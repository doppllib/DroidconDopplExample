//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexAndroidPluginsRxAndroidPlugins")
#ifdef RESTRICT_IoReactivexAndroidPluginsRxAndroidPlugins
#define INCLUDE_ALL_IoReactivexAndroidPluginsRxAndroidPlugins 0
#else
#define INCLUDE_ALL_IoReactivexAndroidPluginsRxAndroidPlugins 1
#endif
#undef RESTRICT_IoReactivexAndroidPluginsRxAndroidPlugins

#if !defined (IoReactivexAndroidPluginsRxAndroidPlugins_) && (INCLUDE_ALL_IoReactivexAndroidPluginsRxAndroidPlugins || defined(INCLUDE_IoReactivexAndroidPluginsRxAndroidPlugins))
#define IoReactivexAndroidPluginsRxAndroidPlugins_

@class IoReactivexScheduler;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexAndroidPluginsRxAndroidPlugins : NSObject

#pragma mark Public

+ (IoReactivexScheduler *)initMainThreadSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)scheduler OBJC_METHOD_FAMILY_NONE;

+ (IoReactivexScheduler *)onMainThreadSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (void)reset;

+ (void)setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

+ (void)setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

#pragma mark Package-Private

+ (id)applyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                     withId:(id)t;

+ (IoReactivexScheduler *)applyRequireNonNullWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                               withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s;

+ (IoReactivexScheduler *)callRequireNonNullWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexAndroidPluginsRxAndroidPlugins)

FOUNDATION_EXPORT void IoReactivexAndroidPluginsRxAndroidPlugins_setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler);

FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_initMainThreadSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> scheduler);

FOUNDATION_EXPORT void IoReactivexAndroidPluginsRxAndroidPlugins_setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler);

FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT void IoReactivexAndroidPluginsRxAndroidPlugins_reset();

FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> s);

FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexFunctionsFunction> f, id<JavaUtilConcurrentCallable> s);

FOUNDATION_EXPORT id IoReactivexAndroidPluginsRxAndroidPlugins_applyWithIoReactivexFunctionsFunction_withId_(id<IoReactivexFunctionsFunction> f, id t);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexAndroidPluginsRxAndroidPlugins)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexAndroidPluginsRxAndroidPlugins")
