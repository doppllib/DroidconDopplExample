//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexAndroidPluginsRxAndroidPlugins.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@interface IoReactivexAndroidPluginsRxAndroidPlugins ()

- (instancetype)init;

@end

inline id<IoReactivexFunctionsFunction> IoReactivexAndroidPluginsRxAndroidPlugins_get_onInitMainThreadHandler();
inline id<IoReactivexFunctionsFunction> IoReactivexAndroidPluginsRxAndroidPlugins_set_onInitMainThreadHandler(id<IoReactivexFunctionsFunction> value);
static volatile_id IoReactivexAndroidPluginsRxAndroidPlugins_onInitMainThreadHandler;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(IoReactivexAndroidPluginsRxAndroidPlugins, onInitMainThreadHandler, id<IoReactivexFunctionsFunction>)

inline id<IoReactivexFunctionsFunction> IoReactivexAndroidPluginsRxAndroidPlugins_get_onMainThreadHandler();
inline id<IoReactivexFunctionsFunction> IoReactivexAndroidPluginsRxAndroidPlugins_set_onMainThreadHandler(id<IoReactivexFunctionsFunction> value);
static volatile_id IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadHandler;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(IoReactivexAndroidPluginsRxAndroidPlugins, onMainThreadHandler, id<IoReactivexFunctionsFunction>)

__attribute__((unused)) static void IoReactivexAndroidPluginsRxAndroidPlugins_init(IoReactivexAndroidPluginsRxAndroidPlugins *self);

__attribute__((unused)) static IoReactivexAndroidPluginsRxAndroidPlugins *new_IoReactivexAndroidPluginsRxAndroidPlugins_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexAndroidPluginsRxAndroidPlugins *create_IoReactivexAndroidPluginsRxAndroidPlugins_init();

@implementation IoReactivexAndroidPluginsRxAndroidPlugins

+ (void)setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexAndroidPluginsRxAndroidPlugins_setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (IoReactivexScheduler *)initMainThreadSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)scheduler {
  return IoReactivexAndroidPluginsRxAndroidPlugins_initMainThreadSchedulerWithJavaUtilConcurrentCallable_(scheduler);
}

+ (void)setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexAndroidPluginsRxAndroidPlugins_setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (IoReactivexScheduler *)onMainThreadSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadSchedulerWithIoReactivexScheduler_(scheduler);
}

+ (void)reset {
  IoReactivexAndroidPluginsRxAndroidPlugins_reset();
}

+ (IoReactivexScheduler *)callRequireNonNullWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s {
  return IoReactivexAndroidPluginsRxAndroidPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(s);
}

+ (IoReactivexScheduler *)applyRequireNonNullWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                               withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s {
  return IoReactivexAndroidPluginsRxAndroidPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, s);
}

+ (id)applyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                     withId:(id)t {
  return IoReactivexAndroidPluginsRxAndroidPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, t);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexAndroidPluginsRxAndroidPlugins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x9, 6, 1, -1, 7, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x8, 10, 4, -1, 5, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x8, 11, 12, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x8, 14, 15, -1, 16, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(initMainThreadSchedulerWithJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[3].selector = @selector(onMainThreadSchedulerWithIoReactivexScheduler:);
  methods[4].selector = @selector(reset);
  methods[5].selector = @selector(callRequireNonNullWithJavaUtilConcurrentCallable:);
  methods[6].selector = @selector(applyRequireNonNullWithIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[7].selector = @selector(applyWithIoReactivexFunctionsFunction:withId:);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onInitMainThreadHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x4a, -1, 17, 18, -1 },
    { "onMainThreadHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x4a, -1, 19, 20, -1 },
  };
  static const void *ptrTable[] = { "setInitMainThreadSchedulerHandler", "LIoReactivexFunctionsFunction;", "(Lio/reactivex/functions/Function<Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;Lio/reactivex/Scheduler;>;)V", "initMainThreadScheduler", "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;)Lio/reactivex/Scheduler;", "setMainThreadSchedulerHandler", "(Lio/reactivex/functions/Function<Lio/reactivex/Scheduler;Lio/reactivex/Scheduler;>;)V", "onMainThreadScheduler", "LIoReactivexScheduler;", "callRequireNonNull", "applyRequireNonNull", "LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/functions/Function<Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;Lio/reactivex/Scheduler;>;Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;)Lio/reactivex/Scheduler;", "apply", "LIoReactivexFunctionsFunction;LNSObject;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<TT;TR;>;TT;)TR;", &IoReactivexAndroidPluginsRxAndroidPlugins_onInitMainThreadHandler, "Lio/reactivex/functions/Function<Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;Lio/reactivex/Scheduler;>;", &IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadHandler, "Lio/reactivex/functions/Function<Lio/reactivex/Scheduler;Lio/reactivex/Scheduler;>;" };
  static const J2ObjcClassInfo _IoReactivexAndroidPluginsRxAndroidPlugins = { "RxAndroidPlugins", "io.reactivex.android.plugins", ptrTable, methods, fields, 7, 0x11, 9, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexAndroidPluginsRxAndroidPlugins;
}

@end

void IoReactivexAndroidPluginsRxAndroidPlugins_setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  JreVolatileStrongAssign(&IoReactivexAndroidPluginsRxAndroidPlugins_onInitMainThreadHandler, handler);
}

IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_initMainThreadSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> scheduler) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  if (scheduler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheduler == null");
  }
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexAndroidPluginsRxAndroidPlugins_onInitMainThreadHandler);
  if (f == nil) {
    return IoReactivexAndroidPluginsRxAndroidPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(scheduler);
  }
  return IoReactivexAndroidPluginsRxAndroidPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, scheduler);
}

void IoReactivexAndroidPluginsRxAndroidPlugins_setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  JreVolatileStrongAssign(&IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadHandler, handler);
}

IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *scheduler) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  if (scheduler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheduler == null");
  }
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexAndroidPluginsRxAndroidPlugins_onMainThreadHandler);
  if (f == nil) {
    return scheduler;
  }
  return IoReactivexAndroidPluginsRxAndroidPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, scheduler);
}

void IoReactivexAndroidPluginsRxAndroidPlugins_reset() {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  IoReactivexAndroidPluginsRxAndroidPlugins_setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexAndroidPluginsRxAndroidPlugins_setMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
}

IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> s) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  @try {
    IoReactivexScheduler *scheduler = [((id<JavaUtilConcurrentCallable>) nil_chk(s)) call];
    if (scheduler == nil) {
      @throw create_JavaLangNullPointerException_initWithNSString_(@"Scheduler Callable returned null");
    }
    return scheduler;
  }
  @catch (JavaLangThrowable *ex) {
    @throw nil_chk(IoReactivexExceptionsExceptions_propagateWithJavaLangThrowable_(ex));
  }
}

IoReactivexScheduler *IoReactivexAndroidPluginsRxAndroidPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexFunctionsFunction> f, id<JavaUtilConcurrentCallable> s) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  IoReactivexScheduler *scheduler = IoReactivexAndroidPluginsRxAndroidPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, s);
  if (scheduler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Scheduler Callable returned null");
  }
  return scheduler;
}

id IoReactivexAndroidPluginsRxAndroidPlugins_applyWithIoReactivexFunctionsFunction_withId_(id<IoReactivexFunctionsFunction> f, id t) {
  IoReactivexAndroidPluginsRxAndroidPlugins_initialize();
  @try {
    return [((id<IoReactivexFunctionsFunction>) nil_chk(f)) applyWithId:t];
  }
  @catch (JavaLangThrowable *ex) {
    @throw nil_chk(IoReactivexExceptionsExceptions_propagateWithJavaLangThrowable_(ex));
  }
}

void IoReactivexAndroidPluginsRxAndroidPlugins_init(IoReactivexAndroidPluginsRxAndroidPlugins *self) {
  NSObject_init(self);
  @throw create_JavaLangAssertionError_initWithId_(@"No instances.");
}

IoReactivexAndroidPluginsRxAndroidPlugins *new_IoReactivexAndroidPluginsRxAndroidPlugins_init() {
  J2OBJC_NEW_IMPL(IoReactivexAndroidPluginsRxAndroidPlugins, init)
}

IoReactivexAndroidPluginsRxAndroidPlugins *create_IoReactivexAndroidPluginsRxAndroidPlugins_init() {
  J2OBJC_CREATE_IMPL(IoReactivexAndroidPluginsRxAndroidPlugins, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexAndroidPluginsRxAndroidPlugins)
