//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidArchPersistenceRoomEntityInsertionAdapter.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidArchPersistenceRoomRoomSQLiteQuery.h"
#include "AndroidArchPersistenceRoomRxRoom.h"
#include "AndroidDatabaseCursor.h"
#include "DDAOUserAccountDao_Impl.h"
#include "DDATUserAccount.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexFlowable.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/Callable.h"

@interface DDAOUserAccountDao_Impl () {
 @public
  AndroidArchPersistenceRoomRoomDatabase *__db_;
  AndroidArchPersistenceRoomEntityInsertionAdapter *__insertionAdapterOfUserAccount_;
}

@end

J2OBJC_FIELD_SETTER(DDAOUserAccountDao_Impl, __db_, AndroidArchPersistenceRoomRoomDatabase *)
J2OBJC_FIELD_SETTER(DDAOUserAccountDao_Impl, __insertionAdapterOfUserAccount_, AndroidArchPersistenceRoomEntityInsertionAdapter *)

@interface DDAOUserAccountDao_Impl_1 : AndroidArchPersistenceRoomEntityInsertionAdapter

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)x0;

- (NSString *)createQuery;

- (void)bindWithAndroidArchPersistenceDbSupportSQLiteStatement:(id<AndroidArchPersistenceDbSupportSQLiteStatement>)stmt
                                                        withId:(DDATUserAccount *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(DDAOUserAccountDao_Impl_1)

__attribute__((unused)) static void DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(DDAOUserAccountDao_Impl_1 *self, AndroidArchPersistenceRoomRoomDatabase *x0);

__attribute__((unused)) static DDAOUserAccountDao_Impl_1 *new_DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DDAOUserAccountDao_Impl_1 *create_DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *x0);

@interface DDAOUserAccountDao_Impl_2 : NSObject < JavaUtilConcurrentCallable > {
 @public
  DDAOUserAccountDao_Impl *this$0_;
  AndroidArchPersistenceRoomRoomSQLiteQuery *val$_statement_;
}

- (instancetype)initWithDDAOUserAccountDao_Impl:(DDAOUserAccountDao_Impl *)outer$
  withAndroidArchPersistenceRoomRoomSQLiteQuery:(AndroidArchPersistenceRoomRoomSQLiteQuery *)capture$0;

- (DDATUserAccount *)call;

- (void)java_finalize;

@end

J2OBJC_EMPTY_STATIC_INIT(DDAOUserAccountDao_Impl_2)

__attribute__((unused)) static void DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl_2 *self, DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0);

__attribute__((unused)) static DDAOUserAccountDao_Impl_2 *new_DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DDAOUserAccountDao_Impl_2 *create_DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0);

@implementation DDAOUserAccountDao_Impl

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)__db {
  DDAOUserAccountDao_Impl_initWithAndroidArchPersistenceRoomRoomDatabase_(self, __db);
  return self;
}

- (void)createOrUpdateWithDDATUserAccount:(DDATUserAccount *)userAccount {
  [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(__db_)) beginTransaction];
  @try {
    [((AndroidArchPersistenceRoomEntityInsertionAdapter *) nil_chk(__insertionAdapterOfUserAccount_)) insertWithId:userAccount];
    [__db_ setTransactionSuccessful];
  }
  @finally {
    [__db_ endTransaction];
  }
}

- (IoReactivexFlowable *)flowUserAccountWithLong:(jlong)userId {
  NSString *_sql = @"SELECT * FROM UserAccount WHERE id = ?";
  AndroidArchPersistenceRoomRoomSQLiteQuery *_statement = AndroidArchPersistenceRoomRoomSQLiteQuery_acquireWithNSString_withInt_(_sql, 1);
  jint _argIndex = 1;
  [((AndroidArchPersistenceRoomRoomSQLiteQuery *) nil_chk(_statement)) bindLongWithInt:_argIndex withLong:userId];
  return AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_withJavaUtilConcurrentCallable_(__db_, [IOSObjectArray arrayWithObjects:(id[]){ @"UserAccount" } count:1 type:NSString_class_()], create_DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(self, _statement));
}

- (DDATUserAccount *)getUserAccountWithLong:(jlong)userId {
  NSString *_sql = @"SELECT * FROM UserAccount WHERE id = ?";
  AndroidArchPersistenceRoomRoomSQLiteQuery *_statement = AndroidArchPersistenceRoomRoomSQLiteQuery_acquireWithNSString_withInt_(_sql, 1);
  jint _argIndex = 1;
  [((AndroidArchPersistenceRoomRoomSQLiteQuery *) nil_chk(_statement)) bindLongWithInt:_argIndex withLong:userId];
  id<AndroidDatabaseCursor> _cursor = [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(__db_)) queryWithAndroidArchPersistenceDbSupportSQLiteQuery:_statement];
  @try {
    jint _cursorIndexOfId = [((id<AndroidDatabaseCursor>) nil_chk(_cursor)) getColumnIndexOrThrowWithNSString:@"id"];
    jint _cursorIndexOfName = [_cursor getColumnIndexOrThrowWithNSString:@"name"];
    jint _cursorIndexOfProfile = [_cursor getColumnIndexOrThrowWithNSString:@"profile"];
    jint _cursorIndexOfAvatarKey = [_cursor getColumnIndexOrThrowWithNSString:@"avatarKey"];
    jint _cursorIndexOfUserCode = [_cursor getColumnIndexOrThrowWithNSString:@"userCode"];
    jint _cursorIndexOfCompany = [_cursor getColumnIndexOrThrowWithNSString:@"company"];
    jint _cursorIndexOfFacebook = [_cursor getColumnIndexOrThrowWithNSString:@"facebook"];
    jint _cursorIndexOfTwitter = [_cursor getColumnIndexOrThrowWithNSString:@"twitter"];
    jint _cursorIndexOfLinkedIn = [_cursor getColumnIndexOrThrowWithNSString:@"linkedIn"];
    jint _cursorIndexOfWebsite = [_cursor getColumnIndexOrThrowWithNSString:@"website"];
    jint _cursorIndexOfFollowing = [_cursor getColumnIndexOrThrowWithNSString:@"following"];
    jint _cursorIndexOfEmail = [_cursor getColumnIndexOrThrowWithNSString:@"email"];
    jint _cursorIndexOfGPlus = [_cursor getColumnIndexOrThrowWithNSString:@"gPlus"];
    jint _cursorIndexOfPhone = [_cursor getColumnIndexOrThrowWithNSString:@"phone"];
    jint _cursorIndexOfCoverKey = [_cursor getColumnIndexOrThrowWithNSString:@"coverKey"];
    jint _cursorIndexOfEmailPublic = [_cursor getColumnIndexOrThrowWithNSString:@"emailPublic"];
    DDATUserAccount *_result;
    if ([_cursor moveToFirst]) {
      _result = create_DDATUserAccount_init();
      if ([_cursor isNullWithInt:_cursorIndexOfId]) {
        JreStrongAssign(&_result->id__, nil);
      }
      else {
        JreStrongAssign(&_result->id__, JavaLangLong_valueOfWithLong_([_cursor getLongWithInt:_cursorIndexOfId]));
      }
      JreStrongAssign(&_result->name_, [_cursor getStringWithInt:_cursorIndexOfName]);
      JreStrongAssign(&_result->profile_, [_cursor getStringWithInt:_cursorIndexOfProfile]);
      JreStrongAssign(&_result->avatarKey_, [_cursor getStringWithInt:_cursorIndexOfAvatarKey]);
      JreStrongAssign(&_result->userCode_, [_cursor getStringWithInt:_cursorIndexOfUserCode]);
      JreStrongAssign(&_result->company_, [_cursor getStringWithInt:_cursorIndexOfCompany]);
      JreStrongAssign(&_result->facebook_, [_cursor getStringWithInt:_cursorIndexOfFacebook]);
      JreStrongAssign(&_result->twitter_, [_cursor getStringWithInt:_cursorIndexOfTwitter]);
      JreStrongAssign(&_result->linkedIn_, [_cursor getStringWithInt:_cursorIndexOfLinkedIn]);
      JreStrongAssign(&_result->website_, [_cursor getStringWithInt:_cursorIndexOfWebsite]);
      jint _tmp;
      _tmp = [_cursor getIntWithInt:_cursorIndexOfFollowing];
      _result->following_ = (_tmp != 0);
      JreStrongAssign(&_result->email_, [_cursor getStringWithInt:_cursorIndexOfEmail]);
      JreStrongAssign(&_result->gPlus_, [_cursor getStringWithInt:_cursorIndexOfGPlus]);
      JreStrongAssign(&_result->phone_, [_cursor getStringWithInt:_cursorIndexOfPhone]);
      JreStrongAssign(&_result->coverKey_, [_cursor getStringWithInt:_cursorIndexOfCoverKey]);
      JavaLangInteger *_tmp_1;
      if ([_cursor isNullWithInt:_cursorIndexOfEmailPublic]) {
        _tmp_1 = nil;
      }
      else {
        _tmp_1 = JavaLangInteger_valueOfWithInt_([_cursor getIntWithInt:_cursorIndexOfEmailPublic]);
      }
      JreStrongAssign(&_result->emailPublic_, _tmp_1 == nil ? nil : JavaLangBoolean_valueOfWithBoolean_([_tmp_1 intValue] != 0));
    }
    else {
      _result = nil;
    }
    return _result;
  }
  @finally {
    [_cursor close];
    [_statement release__];
  }
}

- (void)dealloc {
  RELEASE_(__db_);
  RELEASE_(__insertionAdapterOfUserAccount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LDDATUserAccount;", 0x1, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRoomDatabase:);
  methods[1].selector = @selector(createOrUpdateWithDDATUserAccount:);
  methods[2].selector = @selector(flowUserAccountWithLong:);
  methods[3].selector = @selector(getUserAccountWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "__db_", "LAndroidArchPersistenceRoomRoomDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "__insertionAdapterOfUserAccount_", "LAndroidArchPersistenceRoomEntityInsertionAdapter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomDatabase;", "createOrUpdate", "LDDATUserAccount;", "flowUserAccount", "J", "(J)Lio/reactivex/Flowable<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;", "getUserAccount" };
  static const J2ObjcClassInfo _DDAOUserAccountDao_Impl = { "UserAccountDao_Impl", "co.touchlab.droidconandroid.shared.data.dao", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_DDAOUserAccountDao_Impl;
}

@end

void DDAOUserAccountDao_Impl_initWithAndroidArchPersistenceRoomRoomDatabase_(DDAOUserAccountDao_Impl *self, AndroidArchPersistenceRoomRoomDatabase *__db) {
  NSObject_init(self);
  JreStrongAssign(&self->__db_, __db);
  JreStrongAssignAndConsume(&self->__insertionAdapterOfUserAccount_, new_DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(__db));
}

DDAOUserAccountDao_Impl *new_DDAOUserAccountDao_Impl_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *__db) {
  J2OBJC_NEW_IMPL(DDAOUserAccountDao_Impl, initWithAndroidArchPersistenceRoomRoomDatabase_, __db)
}

DDAOUserAccountDao_Impl *create_DDAOUserAccountDao_Impl_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *__db) {
  J2OBJC_CREATE_IMPL(DDAOUserAccountDao_Impl, initWithAndroidArchPersistenceRoomRoomDatabase_, __db)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DDAOUserAccountDao_Impl)

@implementation DDAOUserAccountDao_Impl_1

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)x0 {
  DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(self, x0);
  return self;
}

- (NSString *)createQuery {
  return @"INSERT OR REPLACE INTO `UserAccount`(`id`,`name`,`profile`,`avatarKey`,`userCode`,`company`,`facebook`,`twitter`,`linkedIn`,`website`,`following`,`email`,`gPlus`,`phone`,`coverKey`,`emailPublic`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
}

- (void)bindWithAndroidArchPersistenceDbSupportSQLiteStatement:(id<AndroidArchPersistenceDbSupportSQLiteStatement>)stmt
                                                        withId:(DDATUserAccount *)value {
  if (((DDATUserAccount *) nil_chk(value))->id__ == nil) {
    [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) bindNullWithInt:1];
  }
  else {
    [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) bindLongWithInt:1 withLong:[value->id__ longLongValue]];
  }
  if (value->name_ == nil) {
    [stmt bindNullWithInt:2];
  }
  else {
    [stmt bindStringWithInt:2 withNSString:value->name_];
  }
  if (value->profile_ == nil) {
    [stmt bindNullWithInt:3];
  }
  else {
    [stmt bindStringWithInt:3 withNSString:value->profile_];
  }
  if (value->avatarKey_ == nil) {
    [stmt bindNullWithInt:4];
  }
  else {
    [stmt bindStringWithInt:4 withNSString:value->avatarKey_];
  }
  if (value->userCode_ == nil) {
    [stmt bindNullWithInt:5];
  }
  else {
    [stmt bindStringWithInt:5 withNSString:value->userCode_];
  }
  if (value->company_ == nil) {
    [stmt bindNullWithInt:6];
  }
  else {
    [stmt bindStringWithInt:6 withNSString:value->company_];
  }
  if (value->facebook_ == nil) {
    [stmt bindNullWithInt:7];
  }
  else {
    [stmt bindStringWithInt:7 withNSString:value->facebook_];
  }
  if (value->twitter_ == nil) {
    [stmt bindNullWithInt:8];
  }
  else {
    [stmt bindStringWithInt:8 withNSString:value->twitter_];
  }
  if (value->linkedIn_ == nil) {
    [stmt bindNullWithInt:9];
  }
  else {
    [stmt bindStringWithInt:9 withNSString:value->linkedIn_];
  }
  if (value->website_ == nil) {
    [stmt bindNullWithInt:10];
  }
  else {
    [stmt bindStringWithInt:10 withNSString:value->website_];
  }
  jint _tmp;
  _tmp = value->following_ ? 1 : 0;
  [stmt bindLongWithInt:11 withLong:_tmp];
  if (value->email_ == nil) {
    [stmt bindNullWithInt:12];
  }
  else {
    [stmt bindStringWithInt:12 withNSString:value->email_];
  }
  if (value->gPlus_ == nil) {
    [stmt bindNullWithInt:13];
  }
  else {
    [stmt bindStringWithInt:13 withNSString:value->gPlus_];
  }
  if (value->phone_ == nil) {
    [stmt bindNullWithInt:14];
  }
  else {
    [stmt bindStringWithInt:14 withNSString:value->phone_];
  }
  if (value->coverKey_ == nil) {
    [stmt bindNullWithInt:15];
  }
  else {
    [stmt bindStringWithInt:15 withNSString:value->coverKey_];
  }
  JavaLangInteger *_tmp_1;
  _tmp_1 = value->emailPublic_ == nil ? nil : JavaLangInteger_valueOfWithInt_(([value->emailPublic_ booleanValue] ? 1 : 0));
  if (_tmp_1 == nil) {
    [stmt bindNullWithInt:16];
  }
  else {
    [stmt bindLongWithInt:16 withLong:[_tmp_1 intValue]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRoomDatabase:);
  methods[1].selector = @selector(createQuery);
  methods[2].selector = @selector(bindWithAndroidArchPersistenceDbSupportSQLiteStatement:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomDatabase;", "bind", "LAndroidArchPersistenceDbSupportSQLiteStatement;LDDATUserAccount;", "LDDAOUserAccountDao_Impl;", "initWithAndroidArchPersistenceRoomRoomDatabase:", "Landroid/arch/persistence/room/EntityInsertionAdapter<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;" };
  static const J2ObjcClassInfo _DDAOUserAccountDao_Impl_1 = { "", "co.touchlab.droidconandroid.shared.data.dao", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, 4, 5, -1 };
  return &_DDAOUserAccountDao_Impl_1;
}

@end

void DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(DDAOUserAccountDao_Impl_1 *self, AndroidArchPersistenceRoomRoomDatabase *x0) {
  AndroidArchPersistenceRoomEntityInsertionAdapter_initWithAndroidArchPersistenceRoomRoomDatabase_(self, x0);
}

DDAOUserAccountDao_Impl_1 *new_DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *x0) {
  J2OBJC_NEW_IMPL(DDAOUserAccountDao_Impl_1, initWithAndroidArchPersistenceRoomRoomDatabase_, x0)
}

DDAOUserAccountDao_Impl_1 *create_DDAOUserAccountDao_Impl_1_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRoomDatabase *x0) {
  J2OBJC_CREATE_IMPL(DDAOUserAccountDao_Impl_1, initWithAndroidArchPersistenceRoomRoomDatabase_, x0)
}

@implementation DDAOUserAccountDao_Impl_2

- (instancetype)initWithDDAOUserAccountDao_Impl:(DDAOUserAccountDao_Impl *)outer$
  withAndroidArchPersistenceRoomRoomSQLiteQuery:(AndroidArchPersistenceRoomRoomSQLiteQuery *)capture$0 {
  DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(self, outer$, capture$0);
  return self;
}

- (DDATUserAccount *)call {
  id<AndroidDatabaseCursor> _cursor = [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(this$0_->__db_)) queryWithAndroidArchPersistenceDbSupportSQLiteQuery:val$_statement_];
  @try {
    jint _cursorIndexOfId = [((id<AndroidDatabaseCursor>) nil_chk(_cursor)) getColumnIndexOrThrowWithNSString:@"id"];
    jint _cursorIndexOfName = [_cursor getColumnIndexOrThrowWithNSString:@"name"];
    jint _cursorIndexOfProfile = [_cursor getColumnIndexOrThrowWithNSString:@"profile"];
    jint _cursorIndexOfAvatarKey = [_cursor getColumnIndexOrThrowWithNSString:@"avatarKey"];
    jint _cursorIndexOfUserCode = [_cursor getColumnIndexOrThrowWithNSString:@"userCode"];
    jint _cursorIndexOfCompany = [_cursor getColumnIndexOrThrowWithNSString:@"company"];
    jint _cursorIndexOfFacebook = [_cursor getColumnIndexOrThrowWithNSString:@"facebook"];
    jint _cursorIndexOfTwitter = [_cursor getColumnIndexOrThrowWithNSString:@"twitter"];
    jint _cursorIndexOfLinkedIn = [_cursor getColumnIndexOrThrowWithNSString:@"linkedIn"];
    jint _cursorIndexOfWebsite = [_cursor getColumnIndexOrThrowWithNSString:@"website"];
    jint _cursorIndexOfFollowing = [_cursor getColumnIndexOrThrowWithNSString:@"following"];
    jint _cursorIndexOfEmail = [_cursor getColumnIndexOrThrowWithNSString:@"email"];
    jint _cursorIndexOfGPlus = [_cursor getColumnIndexOrThrowWithNSString:@"gPlus"];
    jint _cursorIndexOfPhone = [_cursor getColumnIndexOrThrowWithNSString:@"phone"];
    jint _cursorIndexOfCoverKey = [_cursor getColumnIndexOrThrowWithNSString:@"coverKey"];
    jint _cursorIndexOfEmailPublic = [_cursor getColumnIndexOrThrowWithNSString:@"emailPublic"];
    DDATUserAccount *_result;
    if ([_cursor moveToFirst]) {
      _result = create_DDATUserAccount_init();
      if ([_cursor isNullWithInt:_cursorIndexOfId]) {
        JreStrongAssign(&_result->id__, nil);
      }
      else {
        JreStrongAssign(&_result->id__, JavaLangLong_valueOfWithLong_([_cursor getLongWithInt:_cursorIndexOfId]));
      }
      JreStrongAssign(&_result->name_, [_cursor getStringWithInt:_cursorIndexOfName]);
      JreStrongAssign(&_result->profile_, [_cursor getStringWithInt:_cursorIndexOfProfile]);
      JreStrongAssign(&_result->avatarKey_, [_cursor getStringWithInt:_cursorIndexOfAvatarKey]);
      JreStrongAssign(&_result->userCode_, [_cursor getStringWithInt:_cursorIndexOfUserCode]);
      JreStrongAssign(&_result->company_, [_cursor getStringWithInt:_cursorIndexOfCompany]);
      JreStrongAssign(&_result->facebook_, [_cursor getStringWithInt:_cursorIndexOfFacebook]);
      JreStrongAssign(&_result->twitter_, [_cursor getStringWithInt:_cursorIndexOfTwitter]);
      JreStrongAssign(&_result->linkedIn_, [_cursor getStringWithInt:_cursorIndexOfLinkedIn]);
      JreStrongAssign(&_result->website_, [_cursor getStringWithInt:_cursorIndexOfWebsite]);
      jint _tmp;
      _tmp = [_cursor getIntWithInt:_cursorIndexOfFollowing];
      _result->following_ = (_tmp != 0);
      JreStrongAssign(&_result->email_, [_cursor getStringWithInt:_cursorIndexOfEmail]);
      JreStrongAssign(&_result->gPlus_, [_cursor getStringWithInt:_cursorIndexOfGPlus]);
      JreStrongAssign(&_result->phone_, [_cursor getStringWithInt:_cursorIndexOfPhone]);
      JreStrongAssign(&_result->coverKey_, [_cursor getStringWithInt:_cursorIndexOfCoverKey]);
      JavaLangInteger *_tmp_1;
      if ([_cursor isNullWithInt:_cursorIndexOfEmailPublic]) {
        _tmp_1 = nil;
      }
      else {
        _tmp_1 = JavaLangInteger_valueOfWithInt_([_cursor getIntWithInt:_cursorIndexOfEmailPublic]);
      }
      JreStrongAssign(&_result->emailPublic_, _tmp_1 == nil ? nil : JavaLangBoolean_valueOfWithBoolean_([_tmp_1 intValue] != 0));
    }
    else {
      _result = nil;
    }
    return _result;
  }
  @finally {
    [_cursor close];
  }
}

- (void)java_finalize {
  [((AndroidArchPersistenceRoomRoomSQLiteQuery *) nil_chk(val$_statement_)) release__];
}

- (void)dealloc {
  JreCheckFinalize(self, [DDAOUserAccountDao_Impl_2 class]);
  RELEASE_(this$0_);
  RELEASE_(val$_statement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATUserAccount;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDDAOUserAccountDao_Impl:withAndroidArchPersistenceRoomRoomSQLiteQuery:);
  methods[1].selector = @selector(call);
  methods[2].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDDAOUserAccountDao_Impl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$_statement_", "LAndroidArchPersistenceRoomRoomSQLiteQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "finalize", "LDDAOUserAccountDao_Impl;", "flowUserAccountWithLong:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;" };
  static const J2ObjcClassInfo _DDAOUserAccountDao_Impl_2 = { "", "co.touchlab.droidconandroid.shared.data.dao", ptrTable, methods, fields, 7, 0x8018, 3, 2, 2, -1, 3, 4, -1 };
  return &_DDAOUserAccountDao_Impl_2;
}

@end

void DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl_2 *self, DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$_statement_, capture$0);
  NSObject_init(self);
}

DDAOUserAccountDao_Impl_2 *new_DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0) {
  J2OBJC_NEW_IMPL(DDAOUserAccountDao_Impl_2, initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_, outer$, capture$0)
}

DDAOUserAccountDao_Impl_2 *create_DDAOUserAccountDao_Impl_2_initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_(DDAOUserAccountDao_Impl *outer$, AndroidArchPersistenceRoomRoomSQLiteQuery *capture$0) {
  J2OBJC_CREATE_IMPL(DDAOUserAccountDao_Impl_2, initWithDDAOUserAccountDao_Impl_withAndroidArchPersistenceRoomRoomSQLiteQuery_, outer$, capture$0)
}
