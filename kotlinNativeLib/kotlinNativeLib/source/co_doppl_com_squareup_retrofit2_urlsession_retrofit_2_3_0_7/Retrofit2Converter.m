//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Retrofit2Converter.h"
#include "Retrofit2Retrofit.h"
#include "Retrofit2Utils.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "javax/annotation/Nullable.h"

@interface Retrofit2Converter : NSObject

@end

__attribute__((unused)) static IOSObjectArray *Retrofit2Converter_Factory__Annotations$0();

__attribute__((unused)) static IOSObjectArray *Retrofit2Converter_Factory__Annotations$1();

__attribute__((unused)) static IOSObjectArray *Retrofit2Converter_Factory__Annotations$2();

@implementation Retrofit2Converter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convert", "LNSObject;", "LJavaIoIOException;", "(TF;)TT;", "LRetrofit2Converter_Factory;", "<F:Ljava/lang/Object;T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _Retrofit2Converter = { "Converter", "retrofit2", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, 4, -1, 5, -1 };
  return &_Retrofit2Converter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Retrofit2Converter)

@implementation Retrofit2Converter_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Converter_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<Retrofit2Converter> __nullable)responseBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                            withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                                            withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit {
  return nil;
}

- (id<Retrofit2Converter> __nullable)requestBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)parameterAnnotations
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)methodAnnotations
                                                           withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit {
  return nil;
}

- (id<Retrofit2Converter> __nullable)stringConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                      withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                                      withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit {
  return nil;
}

+ (id<JavaLangReflectType>)getParameterUpperBoundWithInt:(jint)index
                    withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType> __nonnull)type {
  return Retrofit2Converter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(index, type);
}

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type {
  return Retrofit2Converter_Factory_getRawTypeWithJavaLangReflectType_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 0, 1, -1, 2, 3, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 4, 5, -1, 6, 7, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 8, 1, -1, 9, 10, -1 },
    { NULL, "LJavaLangReflectType;", 0xc, 11, 12, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0xc, 13, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(responseBodyConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:);
  methods[2].selector = @selector(requestBodyConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:);
  methods[3].selector = @selector(stringConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:);
  methods[4].selector = @selector(getParameterUpperBoundWithInt:withJavaLangReflectParameterizedType:);
  methods[5].selector = @selector(getRawTypeWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "responseBodyConverter", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;LRetrofit2Retrofit;", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter<Lokhttp3/ResponseBody;*>;", (void *)&Retrofit2Converter_Factory__Annotations$0, "requestBodyConverter", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;[LJavaLangAnnotationAnnotation;LRetrofit2Retrofit;", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter<*Lokhttp3/RequestBody;>;", (void *)&Retrofit2Converter_Factory__Annotations$1, "stringConverter", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter<*Ljava/lang/String;>;", (void *)&Retrofit2Converter_Factory__Annotations$2, "getParameterUpperBound", "ILJavaLangReflectParameterizedType;", "getRawType", "LJavaLangReflectType;", "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "LRetrofit2Converter;" };
  static const J2ObjcClassInfo _Retrofit2Converter_Factory = { "Factory", "retrofit2", ptrTable, methods, NULL, 7, 0x409, 6, 0, 16, -1, -1, -1, -1 };
  return &_Retrofit2Converter_Factory;
}

@end

void Retrofit2Converter_Factory_init(Retrofit2Converter_Factory *self) {
  NSObject_init(self);
}

id<JavaLangReflectType> Retrofit2Converter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(jint index, id<JavaLangReflectParameterizedType> type) {
  Retrofit2Converter_Factory_initialize();
  return Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(index, type);
}

IOSClass *Retrofit2Converter_Factory_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Retrofit2Converter_Factory_initialize();
  return Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
}

IOSObjectArray *Retrofit2Converter_Factory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2Converter_Factory__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2Converter_Factory__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Converter_Factory)
