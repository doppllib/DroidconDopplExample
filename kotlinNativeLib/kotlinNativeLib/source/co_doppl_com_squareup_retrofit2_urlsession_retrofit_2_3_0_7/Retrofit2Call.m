//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Retrofit2Call.h"

@interface Retrofit2Call : NSObject

@end

@implementation Retrofit2Call

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRetrofit2Response;", 0x401, -1, -1, 0, 1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Call;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(execute);
  methods[1].selector = @selector(enqueueWithRetrofit2Callback:);
  methods[2].selector = @selector(isExecuted);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(isCanceled);
  methods[5].selector = @selector(clone);
  methods[6].selector = @selector(request);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "()Lretrofit2/Response<TT;>;", "enqueue", "LRetrofit2Callback;", "(Lretrofit2/Callback<TT;>;)V", "()Lretrofit2/Call<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _Retrofit2Call = { "Call", "retrofit2", ptrTable, methods, NULL, 7, 0x609, 7, 0, -1, -1, -1, 6, -1 };
  return &_Retrofit2Call;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Retrofit2Call)
