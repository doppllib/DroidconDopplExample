//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Headers.h"
#include "Okhttp3InternalHttpHttpMethod.h"
#include "Okhttp3InternalHttpRealResponseBody.h"
#include "Okhttp3InternalHttpStatusLine.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3RequestBody.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "Retrofit2IosCallServerInterceptor.h"
#include "Retrofit2IosInterceptor.h"
#include "Retrofit2IosRealInterceptorChain.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/ProtocolException.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"

@interface Retrofit2IosCallServerInterceptor () {
 @public
  jboolean forWebSocket_;
}

- (Okhttp3Headers *)readHeadersWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connection;

@end

__attribute__((unused)) static Okhttp3Headers *Retrofit2IosCallServerInterceptor_readHeadersWithJavaNetHttpURLConnection_(Retrofit2IosCallServerInterceptor *self, JavaNetHttpURLConnection *connection);

@implementation Retrofit2IosCallServerInterceptor

- (instancetype)initWithBoolean:(jboolean)forWebSocket {
  Retrofit2IosCallServerInterceptor_initWithBoolean_(self, forWebSocket);
  return self;
}

- (Okhttp3Response *)interceptWithRetrofit2IosInterceptor_Chain:(id<Retrofit2IosInterceptor_Chain>)chain {
  JavaNetHttpURLConnection *connection = [((Retrofit2IosRealInterceptorChain *) nil_chk(((Retrofit2IosRealInterceptorChain *) cast_chk(chain, [Retrofit2IosRealInterceptorChain class])))) connection];
  Okhttp3Request *request = [((id<Retrofit2IosInterceptor_Chain>) nil_chk(chain)) request];
  jlong sentRequestMillis = JavaLangSystem_currentTimeMillis();
  [((JavaNetHttpURLConnection *) nil_chk(connection)) setRequestMethodWithNSString:[((Okhttp3Request *) nil_chk(request)) method]];
  Okhttp3Headers *headers = [request headers];
  for (jint i = 0, size = [((Okhttp3Headers *) nil_chk(headers)) size]; i < size; i++) {
    [connection addRequestPropertyWithNSString:[headers nameWithInt:i] withNSString:[headers valueWithInt:i]];
  }
  if (Okhttp3InternalHttpHttpMethod_permitsRequestBodyWithNSString_([request method]) && [request body] != nil) {
    [connection setDoOutputWithBoolean:true];
    JavaIoOutputStream *outputStream = [connection getOutputStream];
    id<OkioSink> requestBodyOut = OkioOkio_sinkWithJavaIoOutputStream_(outputStream);
    id<OkioBufferedSink> bufferedRequestBody = OkioOkio_bufferWithOkioSink_(requestBodyOut);
    [((Okhttp3RequestBody *) nil_chk([request body])) writeToWithOkioBufferedSink:bufferedRequestBody];
    [((id<OkioBufferedSink>) nil_chk(bufferedRequestBody)) close];
    [((JavaIoOutputStream *) nil_chk(outputStream)) close];
  }
  Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([self readResponseHeadersWithJavaNetHttpURLConnection:connection])) requestWithOkhttp3Request:request])) sentRequestAtMillisWithLong:sentRequestMillis])) receivedResponseAtMillisWithLong:JavaLangSystem_currentTimeMillis()])) build];
  if (!forWebSocket_ || [((Okhttp3Response *) nil_chk(response)) code] != 101) {
    response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response *) nil_chk(response)) newBuilder])) bodyWithOkhttp3ResponseBody:[self openResponseBodyWithOkhttp3Response:response withJavaNetHttpURLConnection:connection]])) build];
  }
  if ([@"close" java_equalsIgnoreCase:[((Okhttp3Request *) nil_chk([((Okhttp3Response *) nil_chk(response)) request])) headerWithNSString:@"Connection"]] || [@"close" java_equalsIgnoreCase:[response headerWithNSString:@"Connection"]]) {
    [connection disconnect];
  }
  jint code = [response code];
  if ((code == 204 || code == 205) && [((Okhttp3ResponseBody *) nil_chk([response body])) contentLength] > 0) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$I$J", @"HTTP ", code, @" had non-zero Content-Length: ", [((Okhttp3ResponseBody *) nil_chk([response body])) contentLength]));
  }
  return response;
}

- (Okhttp3ResponseBody *)openResponseBodyWithOkhttp3Response:(Okhttp3Response *)response
                                withJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connection {
  JavaIoInputStream *inputStream;
  if ([((Okhttp3Response *) nil_chk(response)) code] >= 400) {
    inputStream = [((JavaNetHttpURLConnection *) nil_chk(connection)) getErrorStream];
  }
  else {
    inputStream = [((JavaNetHttpURLConnection *) nil_chk(connection)) getInputStream];
  }
  return create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_([response headers], OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaIoInputStream_(inputStream)));
}

- (Okhttp3Response_Builder *)readResponseHeadersWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connection {
  @try {
    while (true) {
      jint responseCode = [((JavaNetHttpURLConnection *) nil_chk(connection)) getResponseCode];
      Okhttp3Protocol *protocol = nil;
      @try {
        Okhttp3InternalHttpStatusLine *statusLine = Okhttp3InternalHttpStatusLine_parseWithNSString_([connection getHeaderFieldWithInt:0]);
        protocol = ((Okhttp3InternalHttpStatusLine *) nil_chk(statusLine))->protocol_;
      }
      @catch (JavaIoIOException *e) {
      }
      if (protocol == nil) protocol = JreLoadEnum(Okhttp3Protocol, HTTP_1_1);
      Okhttp3Response_Builder *responseBuilder = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() protocolWithOkhttp3Protocol:protocol])) codeWithInt:responseCode])) messageWithNSString:[connection getResponseMessage]])) headersWithOkhttp3Headers:Retrofit2IosCallServerInterceptor_readHeadersWithJavaNetHttpURLConnection_(self, connection)];
      if (responseCode != Okhttp3InternalHttpStatusLine_HTTP_CONTINUE) {
        return responseBuilder;
      }
    }
  }
  @catch (JavaIoEOFException *e) {
    JavaIoIOException *exception = create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"unexpected end of stream on ", connection));
    [exception initCauseWithJavaLangThrowable:e];
    @throw exception;
  }
}

- (Okhttp3Headers *)readHeadersWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connection {
  return Retrofit2IosCallServerInterceptor_readHeadersWithJavaNetHttpURLConnection_(self, connection);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "LOkhttp3Headers;", 0x2, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(interceptWithRetrofit2IosInterceptor_Chain:);
  methods[2].selector = @selector(openResponseBodyWithOkhttp3Response:withJavaNetHttpURLConnection:);
  methods[3].selector = @selector(readResponseHeadersWithJavaNetHttpURLConnection:);
  methods[4].selector = @selector(readHeadersWithJavaNetHttpURLConnection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forWebSocket_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "intercept", "LRetrofit2IosInterceptor_Chain;", "LJavaIoIOException;", "openResponseBody", "LOkhttp3Response;LJavaNetHttpURLConnection;", "readResponseHeaders", "LJavaNetHttpURLConnection;", "readHeaders" };
  static const J2ObjcClassInfo _Retrofit2IosCallServerInterceptor = { "CallServerInterceptor", "retrofit2.ios", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, -1, -1 };
  return &_Retrofit2IosCallServerInterceptor;
}

@end

void Retrofit2IosCallServerInterceptor_initWithBoolean_(Retrofit2IosCallServerInterceptor *self, jboolean forWebSocket) {
  NSObject_init(self);
  self->forWebSocket_ = forWebSocket;
}

Retrofit2IosCallServerInterceptor *new_Retrofit2IosCallServerInterceptor_initWithBoolean_(jboolean forWebSocket) {
  J2OBJC_NEW_IMPL(Retrofit2IosCallServerInterceptor, initWithBoolean_, forWebSocket)
}

Retrofit2IosCallServerInterceptor *create_Retrofit2IosCallServerInterceptor_initWithBoolean_(jboolean forWebSocket) {
  J2OBJC_CREATE_IMPL(Retrofit2IosCallServerInterceptor, initWithBoolean_, forWebSocket)
}

Okhttp3Headers *Retrofit2IosCallServerInterceptor_readHeadersWithJavaNetHttpURLConnection_(Retrofit2IosCallServerInterceptor *self, JavaNetHttpURLConnection *connection) {
  Okhttp3Headers_Builder *headers = create_Okhttp3Headers_Builder_init();
  for (id<JavaUtilMap_Entry> __strong field in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaNetHttpURLConnection *) nil_chk(connection)) getHeaderFields])) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(field)) getKey];
    if (name != nil) {
      for (NSString * __strong value in nil_chk([field getValue])) {
        [headers addWithNSString:name withNSString:value];
      }
    }
  }
  return [headers build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2IosCallServerInterceptor)
