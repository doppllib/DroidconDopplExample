//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2Converter")
#ifdef RESTRICT_Retrofit2Converter
#define INCLUDE_ALL_Retrofit2Converter 0
#else
#define INCLUDE_ALL_Retrofit2Converter 1
#endif
#undef RESTRICT_Retrofit2Converter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (Retrofit2Converter_) && (INCLUDE_ALL_Retrofit2Converter || defined(INCLUDE_Retrofit2Converter))
#define Retrofit2Converter_

@protocol Retrofit2Converter < JavaObject >

- (id)convertWithId:(id __nonnull)value;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Converter)

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Converter)

#endif

#if !defined (Retrofit2Converter_Factory_) && (INCLUDE_ALL_Retrofit2Converter || defined(INCLUDE_Retrofit2Converter_Factory))
#define Retrofit2Converter_Factory_

@class IOSClass;
@class IOSObjectArray;
@class Retrofit2Retrofit;
@protocol JavaLangReflectParameterizedType;
@protocol JavaLangReflectType;
@protocol Retrofit2Converter;

@interface Retrofit2Converter_Factory : NSObject

#pragma mark Public

- (instancetype)init;

- (id<Retrofit2Converter> __nullable)requestBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)parameterAnnotations
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)methodAnnotations
                                                           withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit;

- (id<Retrofit2Converter> __nullable)responseBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                            withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                                            withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit;

- (id<Retrofit2Converter> __nullable)stringConverterWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                                      withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                                      withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit;

#pragma mark Protected

+ (id<JavaLangReflectType>)getParameterUpperBoundWithInt:(jint)index
                    withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType> __nonnull)type;

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Converter_Factory)

FOUNDATION_EXPORT void Retrofit2Converter_Factory_init(Retrofit2Converter_Factory *self);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Converter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(jint index, id<JavaLangReflectParameterizedType> type);

FOUNDATION_EXPORT IOSClass *Retrofit2Converter_Factory_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Converter_Factory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Retrofit2Converter")
