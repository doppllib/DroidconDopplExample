//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Headers.h"
#include "Okhttp3InternalCacheCacheRequest.h"
#include "Okhttp3InternalCacheCacheStrategy.h"
#include "Okhttp3InternalCacheInternalCache.h"
#include "Okhttp3InternalHttpHttpHeaders.h"
#include "Okhttp3InternalHttpHttpMethod.h"
#include "Okhttp3InternalHttpHttpStream.h"
#include "Okhttp3InternalHttpRealResponseBody.h"
#include "Okhttp3InternalInternal.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "Retrofit2IosCacheInterceptor.h"
#include "Retrofit2IosInterceptor.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/net/HttpURLConnection.h"
#include "java/util/Date.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Retrofit2IosCacheInterceptor ()

+ (Okhttp3Response *)stripBodyWithOkhttp3Response:(Okhttp3Response *)response;

- (id<Okhttp3InternalCacheCacheRequest>)maybeCacheWithOkhttp3Response:(Okhttp3Response *)userResponse
                                                   withOkhttp3Request:(Okhttp3Request *)networkRequest
                                withOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)responseCache;

- (Okhttp3Response *)cacheWritingResponseWithOkhttp3InternalCacheCacheRequest:(id<Okhttp3InternalCacheCacheRequest>)cacheRequest
                                                          withOkhttp3Response:(Okhttp3Response *)response;

+ (jboolean)validateWithOkhttp3Response:(Okhttp3Response *)cached
                    withOkhttp3Response:(Okhttp3Response *)network;

+ (Okhttp3Headers *)combineWithOkhttp3Headers:(Okhttp3Headers *)cachedHeaders
                           withOkhttp3Headers:(Okhttp3Headers *)networkHeaders;

@end

inline Okhttp3ResponseBody *Retrofit2IosCacheInterceptor_get_EMPTY_BODY();
static Okhttp3ResponseBody *Retrofit2IosCacheInterceptor_EMPTY_BODY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Retrofit2IosCacheInterceptor, EMPTY_BODY, Okhttp3ResponseBody *)

__attribute__((unused)) static Okhttp3Response *Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(Okhttp3Response *response);

__attribute__((unused)) static id<Okhttp3InternalCacheCacheRequest> Retrofit2IosCacheInterceptor_maybeCacheWithOkhttp3Response_withOkhttp3Request_withOkhttp3InternalCacheInternalCache_(Retrofit2IosCacheInterceptor *self, Okhttp3Response *userResponse, Okhttp3Request *networkRequest, id<Okhttp3InternalCacheInternalCache> responseCache);

__attribute__((unused)) static Okhttp3Response *Retrofit2IosCacheInterceptor_cacheWritingResponseWithOkhttp3InternalCacheCacheRequest_withOkhttp3Response_(Retrofit2IosCacheInterceptor *self, id<Okhttp3InternalCacheCacheRequest> cacheRequest, Okhttp3Response *response);

__attribute__((unused)) static jboolean Retrofit2IosCacheInterceptor_validateWithOkhttp3Response_withOkhttp3Response_(Okhttp3Response *cached, Okhttp3Response *network);

__attribute__((unused)) static Okhttp3Headers *Retrofit2IosCacheInterceptor_combineWithOkhttp3Headers_withOkhttp3Headers_(Okhttp3Headers *cachedHeaders, Okhttp3Headers *networkHeaders);

@interface Retrofit2IosCacheInterceptor_1 : Okhttp3ResponseBody

- (instancetype)init;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (id<OkioBufferedSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2IosCacheInterceptor_1)

__attribute__((unused)) static void Retrofit2IosCacheInterceptor_1_init(Retrofit2IosCacheInterceptor_1 *self);

__attribute__((unused)) static Retrofit2IosCacheInterceptor_1 *new_Retrofit2IosCacheInterceptor_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2IosCacheInterceptor_1 *create_Retrofit2IosCacheInterceptor_1_init();

@interface Retrofit2IosCacheInterceptor_2 : NSObject < OkioSource > {
 @public
  id<OkioBufferedSource> val$source_;
  id<Okhttp3InternalCacheCacheRequest> val$cacheRequest_;
  id<OkioBufferedSink> val$cacheBody_;
  jboolean cacheRequestClosed_;
}

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)capture$0
      withOkhttp3InternalCacheCacheRequest:(id<Okhttp3InternalCacheCacheRequest>)capture$1
                      withOkioBufferedSink:(id<OkioBufferedSink>)capture$2;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2IosCacheInterceptor_2)

__attribute__((unused)) static void Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(Retrofit2IosCacheInterceptor_2 *self, id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2);

__attribute__((unused)) static Retrofit2IosCacheInterceptor_2 *new_Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2IosCacheInterceptor_2 *create_Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2);

J2OBJC_INITIALIZED_DEFN(Retrofit2IosCacheInterceptor)

@implementation Retrofit2IosCacheInterceptor

- (instancetype)initWithOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)cache {
  Retrofit2IosCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(self, cache);
  return self;
}

- (Okhttp3Response *)interceptWithRetrofit2IosInterceptor_Chain:(id<Retrofit2IosInterceptor_Chain>)chain {
  Okhttp3Response *cacheCandidate = cache_ != nil ? [cache_ getWithOkhttp3Request:[((id<Retrofit2IosInterceptor_Chain>) nil_chk(chain)) request]] : nil;
  jlong now = JavaLangSystem_currentTimeMillis();
  Okhttp3InternalCacheCacheStrategy *strategy = [create_Okhttp3InternalCacheCacheStrategy_Factory_initWithLong_withOkhttp3Request_withOkhttp3Response_(now, [((id<Retrofit2IosInterceptor_Chain>) nil_chk(chain)) request], cacheCandidate) get];
  Okhttp3Request *networkRequest = ((Okhttp3InternalCacheCacheStrategy *) nil_chk(strategy))->networkRequest_;
  Okhttp3Response *cacheResponse = strategy->cacheResponse_;
  if (cache_ != nil) {
    [cache_ trackResponseWithOkhttp3InternalCacheCacheStrategy:strategy];
  }
  if (cacheCandidate != nil && cacheResponse == nil) {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_([cacheCandidate body]);
  }
  if (networkRequest == nil && cacheResponse == nil) {
    return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() requestWithOkhttp3Request:[chain request]])) protocolWithOkhttp3Protocol:JreLoadEnum(Okhttp3Protocol, HTTP_1_1)])) codeWithInt:504])) messageWithNSString:@"Unsatisfiable Request (only-if-cached)"])) bodyWithOkhttp3ResponseBody:Retrofit2IosCacheInterceptor_EMPTY_BODY])) sentRequestAtMillisWithLong:-1LL])) receivedResponseAtMillisWithLong:JavaLangSystem_currentTimeMillis()])) build];
  }
  if (networkRequest == nil) {
    return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response *) nil_chk(cacheResponse)) newBuilder])) cacheResponseWithOkhttp3Response:Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(cacheResponse)])) build];
  }
  Okhttp3Response *networkResponse = nil;
  @try {
    networkResponse = [chain proceedWithOkhttp3Request:networkRequest];
  }
  @finally {
    if (networkResponse == nil && cacheCandidate != nil) {
      Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_([cacheCandidate body]);
    }
  }
  if (cacheResponse != nil) {
    if (Retrofit2IosCacheInterceptor_validateWithOkhttp3Response_withOkhttp3Response_(cacheResponse, networkResponse)) {
      Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([cacheResponse newBuilder])) headersWithOkhttp3Headers:Retrofit2IosCacheInterceptor_combineWithOkhttp3Headers_withOkhttp3Headers_([cacheResponse headers], [((Okhttp3Response *) nil_chk(networkResponse)) headers])])) cacheResponseWithOkhttp3Response:Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(cacheResponse)])) networkResponseWithOkhttp3Response:Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(networkResponse)])) build];
      [((Okhttp3ResponseBody *) nil_chk([networkResponse body])) close];
      [((id<Okhttp3InternalCacheInternalCache>) nil_chk(cache_)) trackConditionalCacheHit];
      [cache_ updateWithOkhttp3Response:cacheResponse withOkhttp3Response:response];
      return response;
    }
    else {
      Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_([cacheResponse body]);
    }
  }
  Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response *) nil_chk(networkResponse)) newBuilder])) cacheResponseWithOkhttp3Response:Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(cacheResponse)])) networkResponseWithOkhttp3Response:Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(networkResponse)])) build];
  if (Okhttp3InternalHttpHttpHeaders_hasBodyWithOkhttp3Response_(response)) {
    id<Okhttp3InternalCacheCacheRequest> cacheRequest = Retrofit2IosCacheInterceptor_maybeCacheWithOkhttp3Response_withOkhttp3Request_withOkhttp3InternalCacheInternalCache_(self, response, [networkResponse request], cache_);
    response = Retrofit2IosCacheInterceptor_cacheWritingResponseWithOkhttp3InternalCacheCacheRequest_withOkhttp3Response_(self, cacheRequest, response);
  }
  return response;
}

+ (Okhttp3Response *)stripBodyWithOkhttp3Response:(Okhttp3Response *)response {
  return Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(response);
}

- (id<Okhttp3InternalCacheCacheRequest>)maybeCacheWithOkhttp3Response:(Okhttp3Response *)userResponse
                                                   withOkhttp3Request:(Okhttp3Request *)networkRequest
                                withOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)responseCache {
  return Retrofit2IosCacheInterceptor_maybeCacheWithOkhttp3Response_withOkhttp3Request_withOkhttp3InternalCacheInternalCache_(self, userResponse, networkRequest, responseCache);
}

- (Okhttp3Response *)cacheWritingResponseWithOkhttp3InternalCacheCacheRequest:(id<Okhttp3InternalCacheCacheRequest>)cacheRequest
                                                          withOkhttp3Response:(Okhttp3Response *)response {
  return Retrofit2IosCacheInterceptor_cacheWritingResponseWithOkhttp3InternalCacheCacheRequest_withOkhttp3Response_(self, cacheRequest, response);
}

+ (jboolean)validateWithOkhttp3Response:(Okhttp3Response *)cached
                    withOkhttp3Response:(Okhttp3Response *)network {
  return Retrofit2IosCacheInterceptor_validateWithOkhttp3Response_withOkhttp3Response_(cached, network);
}

+ (Okhttp3Headers *)combineWithOkhttp3Headers:(Okhttp3Headers *)cachedHeaders
                           withOkhttp3Headers:(Okhttp3Headers *)networkHeaders {
  return Retrofit2IosCacheInterceptor_combineWithOkhttp3Headers_withOkhttp3Headers_(cachedHeaders, networkHeaders);
}

+ (jboolean)isEndToEndWithNSString:(NSString *)fieldName {
  return Retrofit2IosCacheInterceptor_isEndToEndWithNSString_(fieldName);
}

- (void)dealloc {
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheCacheRequest;", 0x2, 6, 7, 3, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x2, 8, 9, 3, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Headers;", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheInternalCache:);
  methods[1].selector = @selector(interceptWithRetrofit2IosInterceptor_Chain:);
  methods[2].selector = @selector(stripBodyWithOkhttp3Response:);
  methods[3].selector = @selector(maybeCacheWithOkhttp3Response:withOkhttp3Request:withOkhttp3InternalCacheInternalCache:);
  methods[4].selector = @selector(cacheWritingResponseWithOkhttp3InternalCacheCacheRequest:withOkhttp3Response:);
  methods[5].selector = @selector(validateWithOkhttp3Response:withOkhttp3Response:);
  methods[6].selector = @selector(combineWithOkhttp3Headers:withOkhttp3Headers:);
  methods[7].selector = @selector(isEndToEndWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BODY", "LOkhttp3ResponseBody;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "cache_", "LOkhttp3InternalCacheInternalCache;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalCacheInternalCache;", "intercept", "LRetrofit2IosInterceptor_Chain;", "LJavaIoIOException;", "stripBody", "LOkhttp3Response;", "maybeCache", "LOkhttp3Response;LOkhttp3Request;LOkhttp3InternalCacheInternalCache;", "cacheWritingResponse", "LOkhttp3InternalCacheCacheRequest;LOkhttp3Response;", "validate", "LOkhttp3Response;LOkhttp3Response;", "combine", "LOkhttp3Headers;LOkhttp3Headers;", "isEndToEnd", "LNSString;", &Retrofit2IosCacheInterceptor_EMPTY_BODY };
  static const J2ObjcClassInfo _Retrofit2IosCacheInterceptor = { "CacheInterceptor", "retrofit2.ios", ptrTable, methods, fields, 7, 0x11, 8, 2, -1, -1, -1, -1, -1 };
  return &_Retrofit2IosCacheInterceptor;
}

+ (void)initialize {
  if (self == [Retrofit2IosCacheInterceptor class]) {
    JreStrongAssignAndConsume(&Retrofit2IosCacheInterceptor_EMPTY_BODY, new_Retrofit2IosCacheInterceptor_1_init());
    J2OBJC_SET_INITIALIZED(Retrofit2IosCacheInterceptor)
  }
}

@end

void Retrofit2IosCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(Retrofit2IosCacheInterceptor *self, id<Okhttp3InternalCacheInternalCache> cache) {
  NSObject_init(self);
  JreStrongAssign(&self->cache_, cache);
}

Retrofit2IosCacheInterceptor *new_Retrofit2IosCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(id<Okhttp3InternalCacheInternalCache> cache) {
  J2OBJC_NEW_IMPL(Retrofit2IosCacheInterceptor, initWithOkhttp3InternalCacheInternalCache_, cache)
}

Retrofit2IosCacheInterceptor *create_Retrofit2IosCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(id<Okhttp3InternalCacheInternalCache> cache) {
  J2OBJC_CREATE_IMPL(Retrofit2IosCacheInterceptor, initWithOkhttp3InternalCacheInternalCache_, cache)
}

Okhttp3Response *Retrofit2IosCacheInterceptor_stripBodyWithOkhttp3Response_(Okhttp3Response *response) {
  Retrofit2IosCacheInterceptor_initialize();
  return response != nil && [response body] != nil ? [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([response newBuilder])) bodyWithOkhttp3ResponseBody:nil])) build] : response;
}

id<Okhttp3InternalCacheCacheRequest> Retrofit2IosCacheInterceptor_maybeCacheWithOkhttp3Response_withOkhttp3Request_withOkhttp3InternalCacheInternalCache_(Retrofit2IosCacheInterceptor *self, Okhttp3Response *userResponse, Okhttp3Request *networkRequest, id<Okhttp3InternalCacheInternalCache> responseCache) {
  if (responseCache == nil) return nil;
  if (!Okhttp3InternalCacheCacheStrategy_isCacheableWithOkhttp3Response_withOkhttp3Request_(userResponse, networkRequest)) {
    if (Okhttp3InternalHttpHttpMethod_invalidatesCacheWithNSString_([((Okhttp3Request *) nil_chk(networkRequest)) method])) {
      @try {
        [responseCache removeWithOkhttp3Request:networkRequest];
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
    return nil;
  }
  return [responseCache putWithOkhttp3Response:userResponse];
}

Okhttp3Response *Retrofit2IosCacheInterceptor_cacheWritingResponseWithOkhttp3InternalCacheCacheRequest_withOkhttp3Response_(Retrofit2IosCacheInterceptor *self, id<Okhttp3InternalCacheCacheRequest> cacheRequest, Okhttp3Response *response) {
  if (cacheRequest == nil) return response;
  id<OkioSink> cacheBodyUnbuffered = [cacheRequest body];
  if (cacheBodyUnbuffered == nil) return response;
  id<OkioBufferedSource> source = [((Okhttp3ResponseBody *) nil_chk([((Okhttp3Response *) nil_chk(response)) body])) source];
  id<OkioBufferedSink> cacheBody = OkioOkio_bufferWithOkioSink_(cacheBodyUnbuffered);
  id<OkioSource> cacheWritingSource = create_Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(source, cacheRequest, cacheBody);
  return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([response newBuilder])) bodyWithOkhttp3ResponseBody:create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_([response headers], OkioOkio_bufferWithOkioSource_(cacheWritingSource))])) build];
}

jboolean Retrofit2IosCacheInterceptor_validateWithOkhttp3Response_withOkhttp3Response_(Okhttp3Response *cached, Okhttp3Response *network) {
  Retrofit2IosCacheInterceptor_initialize();
  if ([((Okhttp3Response *) nil_chk(network)) code] == JavaNetHttpURLConnection_HTTP_NOT_MODIFIED) return true;
  JavaUtilDate *lastModified = [((Okhttp3Headers *) nil_chk([((Okhttp3Response *) nil_chk(cached)) headers])) getDateWithNSString:@"Last-Modified"];
  if (lastModified != nil) {
    JavaUtilDate *networkLastModified = [((Okhttp3Headers *) nil_chk([network headers])) getDateWithNSString:@"Last-Modified"];
    if (networkLastModified != nil && [networkLastModified getTime] < [lastModified getTime]) {
      return true;
    }
  }
  return false;
}

Okhttp3Headers *Retrofit2IosCacheInterceptor_combineWithOkhttp3Headers_withOkhttp3Headers_(Okhttp3Headers *cachedHeaders, Okhttp3Headers *networkHeaders) {
  Retrofit2IosCacheInterceptor_initialize();
  Okhttp3Headers_Builder *result = create_Okhttp3Headers_Builder_init();
  for (jint i = 0, size = [((Okhttp3Headers *) nil_chk(cachedHeaders)) size]; i < size; i++) {
    NSString *fieldName = [cachedHeaders nameWithInt:i];
    NSString *value = [cachedHeaders valueWithInt:i];
    if ([@"Warning" java_equalsIgnoreCase:fieldName] && [((NSString *) nil_chk(value)) java_hasPrefix:@"1"]) {
      continue;
    }
    if (!Retrofit2IosCacheInterceptor_isEndToEndWithNSString_(fieldName) || [((Okhttp3Headers *) nil_chk(networkHeaders)) getWithNSString:fieldName] == nil) {
      [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) addLenientWithOkhttp3Headers_Builder:result withNSString:fieldName withNSString:value];
    }
  }
  for (jint i = 0, size = [((Okhttp3Headers *) nil_chk(networkHeaders)) size]; i < size; i++) {
    NSString *fieldName = [networkHeaders nameWithInt:i];
    if ([@"Content-Length" java_equalsIgnoreCase:fieldName]) {
      continue;
    }
    if (Retrofit2IosCacheInterceptor_isEndToEndWithNSString_(fieldName)) {
      [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) addLenientWithOkhttp3Headers_Builder:result withNSString:fieldName withNSString:[networkHeaders valueWithInt:i]];
    }
  }
  return [result build];
}

jboolean Retrofit2IosCacheInterceptor_isEndToEndWithNSString_(NSString *fieldName) {
  Retrofit2IosCacheInterceptor_initialize();
  return ![@"Connection" java_equalsIgnoreCase:fieldName] && ![@"Keep-Alive" java_equalsIgnoreCase:fieldName] && ![@"Proxy-Authenticate" java_equalsIgnoreCase:fieldName] && ![@"Proxy-Authorization" java_equalsIgnoreCase:fieldName] && ![@"TE" java_equalsIgnoreCase:fieldName] && ![@"Trailers" java_equalsIgnoreCase:fieldName] && ![@"Transfer-Encoding" java_equalsIgnoreCase:fieldName] && ![@"Upgrade" java_equalsIgnoreCase:fieldName];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2IosCacheInterceptor)

@implementation Retrofit2IosCacheInterceptor_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2IosCacheInterceptor_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3MediaType *)contentType {
  return nil;
}

- (jlong)contentLength {
  return 0;
}

- (id<OkioBufferedSource>)source {
  return create_OkioBuffer_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(source);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRetrofit2IosCacheInterceptor;" };
  static const J2ObjcClassInfo _Retrofit2IosCacheInterceptor_1 = { "", "retrofit2.ios", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 0, -1, -1, -1, -1 };
  return &_Retrofit2IosCacheInterceptor_1;
}

@end

void Retrofit2IosCacheInterceptor_1_init(Retrofit2IosCacheInterceptor_1 *self) {
  Okhttp3ResponseBody_init(self);
}

Retrofit2IosCacheInterceptor_1 *new_Retrofit2IosCacheInterceptor_1_init() {
  J2OBJC_NEW_IMPL(Retrofit2IosCacheInterceptor_1, init)
}

Retrofit2IosCacheInterceptor_1 *create_Retrofit2IosCacheInterceptor_1_init() {
  J2OBJC_CREATE_IMPL(Retrofit2IosCacheInterceptor_1, init)
}

@implementation Retrofit2IosCacheInterceptor_2

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)capture$0
      withOkhttp3InternalCacheCacheRequest:(id<Okhttp3InternalCacheCacheRequest>)capture$1
                      withOkioBufferedSink:(id<OkioBufferedSink>)capture$2 {
  Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(self, capture$0, capture$1, capture$2);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  jlong bytesRead;
  @try {
    bytesRead = [((id<OkioBufferedSource>) nil_chk(val$source_)) readWithOkioBuffer:sink withLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    if (!cacheRequestClosed_) {
      cacheRequestClosed_ = true;
      [((id<Okhttp3InternalCacheCacheRequest>) nil_chk(val$cacheRequest_)) abort];
    }
    @throw e;
  }
  if (bytesRead == -1) {
    if (!cacheRequestClosed_) {
      cacheRequestClosed_ = true;
      [((id<OkioBufferedSink>) nil_chk(val$cacheBody_)) close];
    }
    return -1;
  }
  [((OkioBuffer *) nil_chk(sink)) copyToWithOkioBuffer:[((id<OkioBufferedSink>) nil_chk(val$cacheBody_)) buffer] withLong:[sink size] - bytesRead withLong:bytesRead];
  [val$cacheBody_ emitCompleteSegments];
  return bytesRead;
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSource>) nil_chk(val$source_)) timeout];
}

- (void)close {
  if (!cacheRequestClosed_ && !Okhttp3InternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(self, Okhttp3InternalHttpHttpStream_DISCARD_STREAM_TIMEOUT_MILLIS, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) {
    cacheRequestClosed_ = true;
    [((id<Okhttp3InternalCacheCacheRequest>) nil_chk(val$cacheRequest_)) abort];
  }
  [((id<OkioBufferedSource>) nil_chk(val$source_)) close];
}

- (void)dealloc {
  RELEASE_(val$source_);
  RELEASE_(val$cacheRequest_);
  RELEASE_(val$cacheBody_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:withOkhttp3InternalCacheCacheRequest:withOkioBufferedSink:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(timeout);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cacheRequest_", "LOkhttp3InternalCacheCacheRequest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cacheBody_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "cacheRequestClosed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LOkioBuffer;J", "LJavaIoIOException;", "LRetrofit2IosCacheInterceptor;", "cacheWritingResponseWithOkhttp3InternalCacheCacheRequest:withOkhttp3Response:" };
  static const J2ObjcClassInfo _Retrofit2IosCacheInterceptor_2 = { "", "retrofit2.ios", ptrTable, methods, fields, 7, 0x8018, 4, 4, 3, -1, 4, -1, -1 };
  return &_Retrofit2IosCacheInterceptor_2;
}

@end

void Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(Retrofit2IosCacheInterceptor_2 *self, id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  JreStrongAssign(&self->val$source_, capture$0);
  JreStrongAssign(&self->val$cacheRequest_, capture$1);
  JreStrongAssign(&self->val$cacheBody_, capture$2);
  NSObject_init(self);
}

Retrofit2IosCacheInterceptor_2 *new_Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  J2OBJC_NEW_IMPL(Retrofit2IosCacheInterceptor_2, initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_, capture$0, capture$1, capture$2)
}

Retrofit2IosCacheInterceptor_2 *create_Retrofit2IosCacheInterceptor_2_initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<Okhttp3InternalCacheCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  J2OBJC_CREATE_IMPL(Retrofit2IosCacheInterceptor_2, initWithOkioBufferedSource_withOkhttp3InternalCacheCacheRequest_withOkioBufferedSink_, capture$0, capture$1, capture$2)
}
