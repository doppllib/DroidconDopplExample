//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3InternalUtil.h"
#include "Retrofit2IosIosCall.h"
#include "Retrofit2IosIosDispatcher.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/SynchronousQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@interface Retrofit2IosIosDispatcher () {
 @public
  jint maxRequests_;
  jint maxRequestsPerHost_;
  id<JavaLangRunnable> idleCallback_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  id<JavaUtilDeque> readyAsyncCalls_;
  id<JavaUtilDeque> runningAsyncCalls_;
  id<JavaUtilDeque> runningSyncCalls_;
}

- (void)promoteCalls;

- (jint)runningCallsForHostWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call;

- (void)finishedWithJavaUtilDeque:(id<JavaUtilDeque>)calls
                           withId:(id)call
                      withBoolean:(jboolean)promoteCalls;

@end

J2OBJC_FIELD_SETTER(Retrofit2IosIosDispatcher, idleCallback_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(Retrofit2IosIosDispatcher, executorService_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(Retrofit2IosIosDispatcher, readyAsyncCalls_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(Retrofit2IosIosDispatcher, runningAsyncCalls_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(Retrofit2IosIosDispatcher, runningSyncCalls_, id<JavaUtilDeque>)

__attribute__((unused)) static void Retrofit2IosIosDispatcher_promoteCalls(Retrofit2IosIosDispatcher *self);

__attribute__((unused)) static jint Retrofit2IosIosDispatcher_runningCallsForHostWithRetrofit2IosIosCall_AsyncCall_(Retrofit2IosIosDispatcher *self, Retrofit2IosIosCall_AsyncCall *call);

__attribute__((unused)) static void Retrofit2IosIosDispatcher_finishedWithJavaUtilDeque_withId_withBoolean_(Retrofit2IosIosDispatcher *self, id<JavaUtilDeque> calls, id call, jboolean promoteCalls);

@implementation Retrofit2IosIosDispatcher

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executorService {
  Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(self, executorService);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2IosIosDispatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentExecutorService>)executorService {
  @synchronized(self) {
    if (executorService_ == nil) {
      JreStrongAssignAndConsume(&executorService_, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, JavaLangInteger_MAX_VALUE, 60, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), create_JavaUtilConcurrentSynchronousQueue_init(), Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp Dispatcher", false)));
    }
    return JreRetainedLocalValue(executorService_);
  }
}

- (void)setMaxRequestsWithInt:(jint)maxRequests {
  @synchronized(self) {
    if (maxRequests < 1) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"max < 1: ", maxRequests));
    }
    self->maxRequests_ = maxRequests;
    Retrofit2IosIosDispatcher_promoteCalls(self);
  }
}

- (jint)getMaxRequests {
  @synchronized(self) {
    return maxRequests_;
  }
}

- (void)setMaxRequestsPerHostWithInt:(jint)maxRequestsPerHost {
  @synchronized(self) {
    if (maxRequestsPerHost < 1) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"max < 1: ", maxRequestsPerHost));
    }
    self->maxRequestsPerHost_ = maxRequestsPerHost;
    Retrofit2IosIosDispatcher_promoteCalls(self);
  }
}

- (jint)getMaxRequestsPerHost {
  @synchronized(self) {
    return maxRequestsPerHost_;
  }
}

- (void)setIdleCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)idleCallback {
  @synchronized(self) {
    JreStrongAssign(&self->idleCallback_, idleCallback);
  }
}

- (void)enqueueWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call {
  @synchronized(self) {
    if ([((id<JavaUtilDeque>) nil_chk(runningAsyncCalls_)) size] < maxRequests_ && Retrofit2IosIosDispatcher_runningCallsForHostWithRetrofit2IosIosCall_AsyncCall_(self, call) < maxRequestsPerHost_) {
      [runningAsyncCalls_ addWithId:call];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk([self executorService])) executeWithJavaLangRunnable:call];
    }
    else {
      [((id<JavaUtilDeque>) nil_chk(readyAsyncCalls_)) addWithId:call];
    }
  }
}

- (void)cancelAll {
  @synchronized(self) {
    for (Retrofit2IosIosCall_AsyncCall * __strong call in nil_chk(readyAsyncCalls_)) {
      [((Retrofit2IosIosCall *) nil_chk([((Retrofit2IosIosCall_AsyncCall *) nil_chk(call)) get])) cancel];
    }
    for (Retrofit2IosIosCall_AsyncCall * __strong call in nil_chk(runningAsyncCalls_)) {
      [((Retrofit2IosIosCall *) nil_chk([((Retrofit2IosIosCall_AsyncCall *) nil_chk(call)) get])) cancel];
    }
    for (Retrofit2IosIosCall * __strong call in nil_chk(runningSyncCalls_)) {
      [((Retrofit2IosIosCall *) nil_chk(call)) cancel];
    }
  }
}

- (void)promoteCalls {
  Retrofit2IosIosDispatcher_promoteCalls(self);
}

- (jint)runningCallsForHostWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call {
  return Retrofit2IosIosDispatcher_runningCallsForHostWithRetrofit2IosIosCall_AsyncCall_(self, call);
}

- (void)executedWithRetrofit2IosIosCall:(Retrofit2IosIosCall *)call {
  @synchronized(self) {
    [((id<JavaUtilDeque>) nil_chk(runningSyncCalls_)) addWithId:call];
  }
}

- (void)finishedWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call {
  Retrofit2IosIosDispatcher_finishedWithJavaUtilDeque_withId_withBoolean_(self, runningAsyncCalls_, call, true);
}

- (void)finishedWithRetrofit2IosIosCall:(Retrofit2IosIosCall *)call {
  Retrofit2IosIosDispatcher_finishedWithJavaUtilDeque_withId_withBoolean_(self, runningSyncCalls_, call, false);
}

- (void)finishedWithJavaUtilDeque:(id<JavaUtilDeque>)calls
                           withId:(id)call
                      withBoolean:(jboolean)promoteCalls {
  Retrofit2IosIosDispatcher_finishedWithJavaUtilDeque_withId_withBoolean_(self, calls, call, promoteCalls);
}

- (id<JavaUtilList>)queuedCalls {
  @synchronized(self) {
    id<JavaUtilList> result = create_JavaUtilArrayList_init();
    for (Retrofit2IosIosCall_AsyncCall * __strong asyncCall in nil_chk(readyAsyncCalls_)) {
      [result addWithId:[((Retrofit2IosIosCall_AsyncCall *) nil_chk(asyncCall)) get]];
    }
    return JreRetainedLocalValue(JavaUtilCollections_unmodifiableListWithJavaUtilList_(result));
  }
}

- (id<JavaUtilList>)runningCalls {
  @synchronized(self) {
    id<JavaUtilList> result = create_JavaUtilArrayList_init();
    [result addAllWithJavaUtilCollection:runningSyncCalls_];
    for (Retrofit2IosIosCall_AsyncCall * __strong asyncCall in nil_chk(runningAsyncCalls_)) {
      [result addWithId:[((Retrofit2IosIosCall_AsyncCall *) nil_chk(asyncCall)) get]];
    }
    return JreRetainedLocalValue(JavaUtilCollections_unmodifiableListWithJavaUtilList_(result));
  }
}

- (jint)queuedCallsCount {
  @synchronized(self) {
    return [((id<JavaUtilDeque>) nil_chk(readyAsyncCalls_)) size];
  }
}

- (jint)runningCallsCount {
  @synchronized(self) {
    return [((id<JavaUtilDeque>) nil_chk(runningAsyncCalls_)) size] + [((id<JavaUtilDeque>) nil_chk(runningSyncCalls_)) size];
  }
}

- (void)dealloc {
  RELEASE_(idleCallback_);
  RELEASE_(executorService_);
  RELEASE_(readyAsyncCalls_);
  RELEASE_(runningAsyncCalls_);
  RELEASE_(runningSyncCalls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x21, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x21, -1, -1, -1, 14, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutorService:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(executorService);
  methods[3].selector = @selector(setMaxRequestsWithInt:);
  methods[4].selector = @selector(getMaxRequests);
  methods[5].selector = @selector(setMaxRequestsPerHostWithInt:);
  methods[6].selector = @selector(getMaxRequestsPerHost);
  methods[7].selector = @selector(setIdleCallbackWithJavaLangRunnable:);
  methods[8].selector = @selector(enqueueWithRetrofit2IosIosCall_AsyncCall:);
  methods[9].selector = @selector(cancelAll);
  methods[10].selector = @selector(promoteCalls);
  methods[11].selector = @selector(runningCallsForHostWithRetrofit2IosIosCall_AsyncCall:);
  methods[12].selector = @selector(executedWithRetrofit2IosIosCall:);
  methods[13].selector = @selector(finishedWithRetrofit2IosIosCall_AsyncCall:);
  methods[14].selector = @selector(finishedWithRetrofit2IosIosCall:);
  methods[15].selector = @selector(finishedWithJavaUtilDeque:withId:withBoolean:);
  methods[16].selector = @selector(queuedCalls);
  methods[17].selector = @selector(runningCalls);
  methods[18].selector = @selector(queuedCallsCount);
  methods[19].selector = @selector(runningCallsCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxRequests_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxRequestsPerHost_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "idleCallback_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executorService_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readyAsyncCalls_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "runningAsyncCalls_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "runningSyncCalls_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutorService;", "setMaxRequests", "I", "setMaxRequestsPerHost", "setIdleCallback", "LJavaLangRunnable;", "enqueue", "LRetrofit2IosIosCall_AsyncCall;", "runningCallsForHost", "executed", "LRetrofit2IosIosCall;", "finished", "LJavaUtilDeque;LNSObject;Z", "<T:Ljava/lang/Object;>(Ljava/util/Deque<TT;>;TT;Z)V", "()Ljava/util/List<Lokhttp3/Call;>;", "Ljava/util/Deque<Lretrofit2/ios/IosCall$AsyncCall;>;", "Ljava/util/Deque<Lretrofit2/ios/IosCall;>;" };
  static const J2ObjcClassInfo _Retrofit2IosIosDispatcher = { "IosDispatcher", "retrofit2.ios", ptrTable, methods, fields, 7, 0x1, 20, 7, -1, -1, -1, -1, -1 };
  return &_Retrofit2IosIosDispatcher;
}

@end

void Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(Retrofit2IosIosDispatcher *self, id<JavaUtilConcurrentExecutorService> executorService) {
  NSObject_init(self);
  self->maxRequests_ = 64;
  self->maxRequestsPerHost_ = 5;
  JreStrongAssignAndConsume(&self->readyAsyncCalls_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->runningAsyncCalls_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->runningSyncCalls_, new_JavaUtilArrayDeque_init());
  JreStrongAssign(&self->executorService_, executorService);
}

Retrofit2IosIosDispatcher *new_Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) {
  J2OBJC_NEW_IMPL(Retrofit2IosIosDispatcher, initWithJavaUtilConcurrentExecutorService_, executorService)
}

Retrofit2IosIosDispatcher *create_Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) {
  J2OBJC_CREATE_IMPL(Retrofit2IosIosDispatcher, initWithJavaUtilConcurrentExecutorService_, executorService)
}

void Retrofit2IosIosDispatcher_init(Retrofit2IosIosDispatcher *self) {
  NSObject_init(self);
  self->maxRequests_ = 64;
  self->maxRequestsPerHost_ = 5;
  JreStrongAssignAndConsume(&self->readyAsyncCalls_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->runningAsyncCalls_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->runningSyncCalls_, new_JavaUtilArrayDeque_init());
}

Retrofit2IosIosDispatcher *new_Retrofit2IosIosDispatcher_init() {
  J2OBJC_NEW_IMPL(Retrofit2IosIosDispatcher, init)
}

Retrofit2IosIosDispatcher *create_Retrofit2IosIosDispatcher_init() {
  J2OBJC_CREATE_IMPL(Retrofit2IosIosDispatcher, init)
}

void Retrofit2IosIosDispatcher_promoteCalls(Retrofit2IosIosDispatcher *self) {
  if ([((id<JavaUtilDeque>) nil_chk(self->runningAsyncCalls_)) size] >= self->maxRequests_) return;
  if ([((id<JavaUtilDeque>) nil_chk(self->readyAsyncCalls_)) isEmpty]) return;
  for (id<JavaUtilIterator> i = [self->readyAsyncCalls_ iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    Retrofit2IosIosCall_AsyncCall *call = [i next];
    if (Retrofit2IosIosDispatcher_runningCallsForHostWithRetrofit2IosIosCall_AsyncCall_(self, call) < self->maxRequestsPerHost_) {
      [i remove];
      [self->runningAsyncCalls_ addWithId:call];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk([self executorService])) executeWithJavaLangRunnable:call];
    }
    if ([self->runningAsyncCalls_ size] >= self->maxRequests_) return;
  }
}

jint Retrofit2IosIosDispatcher_runningCallsForHostWithRetrofit2IosIosCall_AsyncCall_(Retrofit2IosIosDispatcher *self, Retrofit2IosIosCall_AsyncCall *call) {
  jint result = 0;
  for (Retrofit2IosIosCall_AsyncCall * __strong c in nil_chk(self->runningAsyncCalls_)) {
    if ([((NSString *) nil_chk([((Retrofit2IosIosCall_AsyncCall *) nil_chk(c)) host])) isEqual:[((Retrofit2IosIosCall_AsyncCall *) nil_chk(call)) host]]) result++;
  }
  return result;
}

void Retrofit2IosIosDispatcher_finishedWithJavaUtilDeque_withId_withBoolean_(Retrofit2IosIosDispatcher *self, id<JavaUtilDeque> calls, id call, jboolean promoteCalls) {
  jint runningCallsCount;
  id<JavaLangRunnable> idleCallback;
  @synchronized(self) {
    if (![((id<JavaUtilDeque>) nil_chk(calls)) removeWithId:call]) @throw create_JavaLangAssertionError_initWithId_(@"Call wasn't in-flight!");
    if (promoteCalls) Retrofit2IosIosDispatcher_promoteCalls(self);
    runningCallsCount = [self runningCallsCount];
    idleCallback = JreRetainedLocalValue(self->idleCallback_);
  }
  if (runningCallsCount == 0 && idleCallback != nil) {
    [idleCallback run];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2IosIosDispatcher)
