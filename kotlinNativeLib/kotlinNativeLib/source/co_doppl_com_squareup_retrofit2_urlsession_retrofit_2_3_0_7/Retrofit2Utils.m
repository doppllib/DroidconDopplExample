//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3ResponseBody.h"
#include "Retrofit2Utils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/NoSuchElementException.h"
#include "javax/annotation/Nullable.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"

@interface Retrofit2Utils ()

- (instancetype)init;

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray * __nonnull)array
                          withId:(id __nonnull)toFind;

+ (jboolean)equalWithId:(id __nonnull)a
                 withId:(id __nonnull)b;

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)context
                                                         withIOSClass:(IOSClass * __nonnull)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable> __nonnull)unknown;

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable> __nonnull)typeVariable;

@end

__attribute__((unused)) static void Retrofit2Utils_init(Retrofit2Utils *self);

__attribute__((unused)) static Retrofit2Utils *new_Retrofit2Utils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2Utils *create_Retrofit2Utils_init();

__attribute__((unused)) static jint Retrofit2Utils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind);

__attribute__((unused)) static jboolean Retrofit2Utils_equalWithId_withId_(id a, id b);

__attribute__((unused)) static id<JavaLangReflectType> Retrofit2Utils_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown);

__attribute__((unused)) static IOSClass *Retrofit2Utils_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

__attribute__((unused)) static IOSObjectArray *Retrofit2Utils__Annotations$0();

@interface Retrofit2Utils_ParameterizedTypeImpl : NSObject < JavaLangReflectParameterizedType > {
 @public
  id<JavaLangReflectType> ownerType_;
  id<JavaLangReflectType> rawType_;
  IOSObjectArray *typeArguments_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)typeArguments;

- (IOSObjectArray *)getActualTypeArguments;

- (id<JavaLangReflectType>)getRawType;

- (id<JavaLangReflectType>)getOwnerType;

- (jboolean)isEqual:(id __nonnull)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Utils_ParameterizedTypeImpl)

J2OBJC_FIELD_SETTER(Retrofit2Utils_ParameterizedTypeImpl, ownerType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Retrofit2Utils_ParameterizedTypeImpl, rawType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Retrofit2Utils_ParameterizedTypeImpl, typeArguments_, IOSObjectArray *)

__attribute__((unused)) static void Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(Retrofit2Utils_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

__attribute__((unused)) static Retrofit2Utils_ParameterizedTypeImpl *new_Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2Utils_ParameterizedTypeImpl *create_Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Utils_ParameterizedTypeImpl)

@interface Retrofit2Utils_GenericArrayTypeImpl : NSObject < JavaLangReflectGenericArrayType > {
 @public
  id<JavaLangReflectType> componentType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)componentType;

- (id<JavaLangReflectType>)getGenericComponentType;

- (jboolean)isEqual:(id __nonnull)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Utils_GenericArrayTypeImpl)

J2OBJC_FIELD_SETTER(Retrofit2Utils_GenericArrayTypeImpl, componentType_, id<JavaLangReflectType>)

__attribute__((unused)) static void Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(Retrofit2Utils_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType);

__attribute__((unused)) static Retrofit2Utils_GenericArrayTypeImpl *new_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2Utils_GenericArrayTypeImpl *create_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Utils_GenericArrayTypeImpl)

@interface Retrofit2Utils_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType > {
 @public
  id<JavaLangReflectType> upperBound_;
  id<JavaLangReflectType> lowerBound_;
}

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)lowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (IOSObjectArray *)getLowerBounds;

- (jboolean)isEqual:(id __nonnull)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Utils_WildcardTypeImpl)

J2OBJC_FIELD_SETTER(Retrofit2Utils_WildcardTypeImpl, upperBound_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Retrofit2Utils_WildcardTypeImpl, lowerBound_, id<JavaLangReflectType>)

__attribute__((unused)) static void Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(Retrofit2Utils_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

__attribute__((unused)) static Retrofit2Utils_WildcardTypeImpl *new_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2Utils_WildcardTypeImpl *create_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Utils_WildcardTypeImpl)

J2OBJC_INITIALIZED_DEFN(Retrofit2Utils)

IOSObjectArray *Retrofit2Utils_EMPTY_TYPE_ARRAY;

@implementation Retrofit2Utils

+ (IOSObjectArray *)EMPTY_TYPE_ARRAY {
  return Retrofit2Utils_EMPTY_TYPE_ARRAY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Utils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type {
  return Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
}

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)a
                  withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)b {
  return Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(a, b);
}

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)context
                                                         withIOSClass:(IOSClass * __nonnull)rawType
                                                         withIOSClass:(IOSClass * __nonnull)toResolve {
  return Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, rawType, toResolve);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray * __nonnull)array
                          withId:(id __nonnull)toFind {
  return Retrofit2Utils_indexOfWithNSObjectArray_withId_(array, toFind);
}

+ (jboolean)equalWithId:(id __nonnull)a
                 withId:(id __nonnull)b {
  return Retrofit2Utils_equalWithId_withId_(a, b);
}

+ (jint)hashCodeOrZeroWithId:(id __nonnull)o {
  return Retrofit2Utils_hashCodeOrZeroWithId_(o);
}

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type {
  return Retrofit2Utils_typeToStringWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)context
                                                  withIOSClass:(IOSClass * __nonnull)contextRawType
                                                  withIOSClass:(IOSClass * __nonnull)supertype {
  return Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype);
}

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)context
                                             withIOSClass:(IOSClass * __nonnull)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)toResolve {
  return Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, toResolve);
}

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)context
                                                         withIOSClass:(IOSClass * __nonnull)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable> __nonnull)unknown {
  return Retrofit2Utils_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, unknown);
}

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable> __nonnull)typeVariable {
  return Retrofit2Utils_declaringClassOfWithJavaLangReflectTypeVariable_(typeVariable);
}

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type {
  Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(type);
}

+ (id)checkNotNullWithId:(id __nullable)object
            withNSString:(NSString * __nonnull)message {
  return Retrofit2Utils_checkNotNullWithId_withNSString_(object, message);
}

+ (jboolean)isAnnotationPresentWithJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                                        withIOSClass:(IOSClass * __nonnull)cls {
  return Retrofit2Utils_isAnnotationPresentWithJavaLangAnnotationAnnotationArray_withIOSClass_(annotations, cls);
}

+ (Okhttp3ResponseBody *)bufferWithOkhttp3ResponseBody:(Okhttp3ResponseBody * __nonnull)body {
  return Retrofit2Utils_bufferWithOkhttp3ResponseBody_(body);
}

+ (void)validateServiceInterfaceWithIOSClass:(IOSClass * __nonnull)service {
  Retrofit2Utils_validateServiceInterfaceWithIOSClass_(service);
}

+ (id<JavaLangReflectType>)getParameterUpperBoundWithInt:(jint)index
                    withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType> __nonnull)type {
  return Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(index, type);
}

+ (jboolean)hasUnresolvableTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type {
  return Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getCallResponseTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)returnType {
  return Retrofit2Utils_getCallResponseTypeWithJavaLangReflectType_(returnType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 14, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 15, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "LIOSClass;", 0xa, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x8, 25, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x8, 26, 27, -1, 28, -1, 29 },
    { NULL, "Z", 0x8, 30, 31, -1, 32, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x8, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x8, 36, 37, -1, 38, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 39, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 41, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 42, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRawTypeWithJavaLangReflectType:);
  methods[2].selector = @selector(equalsWithJavaLangReflectType:withJavaLangReflectType:);
  methods[3].selector = @selector(getGenericSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[4].selector = @selector(indexOfWithNSObjectArray:withId:);
  methods[5].selector = @selector(equalWithId:withId:);
  methods[6].selector = @selector(hashCodeOrZeroWithId:);
  methods[7].selector = @selector(typeToStringWithJavaLangReflectType:);
  methods[8].selector = @selector(getSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[9].selector = @selector(resolveWithJavaLangReflectType:withIOSClass:withJavaLangReflectType:);
  methods[10].selector = @selector(resolveTypeVariableWithJavaLangReflectType:withIOSClass:withJavaLangReflectTypeVariable:);
  methods[11].selector = @selector(declaringClassOfWithJavaLangReflectTypeVariable:);
  methods[12].selector = @selector(checkNotPrimitiveWithJavaLangReflectType:);
  methods[13].selector = @selector(checkNotNullWithId:withNSString:);
  methods[14].selector = @selector(isAnnotationPresentWithJavaLangAnnotationAnnotationArray:withIOSClass:);
  methods[15].selector = @selector(bufferWithOkhttp3ResponseBody:);
  methods[16].selector = @selector(validateServiceInterfaceWithIOSClass:);
  methods[17].selector = @selector(getParameterUpperBoundWithInt:withJavaLangReflectParameterizedType:);
  methods[18].selector = @selector(hasUnresolvableTypeWithJavaLangReflectType:);
  methods[19].selector = @selector(getCallResponseTypeWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_TYPE_ARRAY", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x18, -1, 43, -1, -1 },
  };
  static const void *ptrTable[] = { "getRawType", "LJavaLangReflectType;", "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "equals", "LJavaLangReflectType;LJavaLangReflectType;", "getGenericSupertype", "LJavaLangReflectType;LIOSClass;LIOSClass;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;", "indexOf", "[LNSObject;LNSObject;", "equal", "LNSObject;LNSObject;", "hashCodeOrZero", "LNSObject;", "typeToString", "getSupertype", "resolve", "LJavaLangReflectType;LIOSClass;LJavaLangReflectType;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;", "resolveTypeVariable", "LJavaLangReflectType;LIOSClass;LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/reflect/Type;", "declaringClassOf", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/Class<*>;", "checkNotPrimitive", "checkNotNull", "LNSObject;LNSString;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)TT;", (void *)&Retrofit2Utils__Annotations$0, "isAnnotationPresent", "[LJavaLangAnnotationAnnotation;LIOSClass;", "([Ljava/lang/annotation/Annotation;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "buffer", "LOkhttp3ResponseBody;", "LJavaIoIOException;", "validateServiceInterface", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)V", "getParameterUpperBound", "ILJavaLangReflectParameterizedType;", "hasUnresolvableType", "getCallResponseType", &Retrofit2Utils_EMPTY_TYPE_ARRAY, "LRetrofit2Utils_ParameterizedTypeImpl;LRetrofit2Utils_GenericArrayTypeImpl;LRetrofit2Utils_WildcardTypeImpl;" };
  static const J2ObjcClassInfo _Retrofit2Utils = { "Utils", "retrofit2", ptrTable, methods, fields, 7, 0x10, 20, 1, -1, 44, -1, -1, -1 };
  return &_Retrofit2Utils;
}

+ (void)initialize {
  if (self == [Retrofit2Utils class]) {
    JreStrongAssignAndConsume(&Retrofit2Utils_EMPTY_TYPE_ARRAY, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]);
    J2OBJC_SET_INITIALIZED(Retrofit2Utils)
  }
}

@end

void Retrofit2Utils_init(Retrofit2Utils *self) {
  NSObject_init(self);
}

Retrofit2Utils *new_Retrofit2Utils_init() {
  J2OBJC_NEW_IMPL(Retrofit2Utils, init)
}

Retrofit2Utils *create_Retrofit2Utils_init() {
  J2OBJC_CREATE_IMPL(Retrofit2Utils, init)
}

IOSClass *Retrofit2Utils_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Retrofit2Utils_initialize();
  Retrofit2Utils_checkNotNullWithId_withNSString_(type, @"type == null");
  if ([type isKindOfClass:[IOSClass class]]) {
    return (IOSClass *) cast_chk(type, [IOSClass class]);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    if (!([rawType isKindOfClass:[IOSClass class]])) @throw create_JavaLangIllegalArgumentException_init();
    return (IOSClass *) cast_chk(rawType, [IOSClass class]);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType];
    return [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(Retrofit2Utils_getRawTypeWithJavaLangReflectType_(componentType), 0)) java_getClass];
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return NSObject_class_();
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return Retrofit2Utils_getRawTypeWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0));
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Expected a Class, ParameterizedType, or GenericArrayType, but <", type, @"> is of type ", [[((id<JavaLangReflectType>) nil_chk(type)) java_getClass] getName]));
}

jboolean Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b) {
  Retrofit2Utils_initialize();
  if (a == b) {
    return true;
  }
  else if ([a isKindOfClass:[IOSClass class]]) {
    return [((id<JavaLangReflectType>) nil_chk(a)) isEqual:b];
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:a]) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:b])) return false;
    id<JavaLangReflectParameterizedType> pa = (id<JavaLangReflectParameterizedType>) cast_check(a, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectParameterizedType> pb = (id<JavaLangReflectParameterizedType>) cast_check(b, JavaLangReflectParameterizedType_class_());
    return Retrofit2Utils_equalWithId_withId_([((id<JavaLangReflectParameterizedType>) nil_chk(pa)) getOwnerType], [((id<JavaLangReflectParameterizedType>) nil_chk(pb)) getOwnerType]) && [((id<JavaLangReflectType>) nil_chk([pa getRawType])) isEqual:[pb getRawType]] && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([pa getActualTypeArguments], [pb getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:a]) {
    if (!([JavaLangReflectGenericArrayType_class_() isInstance:b])) return false;
    id<JavaLangReflectGenericArrayType> ga = (id<JavaLangReflectGenericArrayType>) cast_check(a, JavaLangReflectGenericArrayType_class_());
    id<JavaLangReflectGenericArrayType> gb = (id<JavaLangReflectGenericArrayType>) cast_check(b, JavaLangReflectGenericArrayType_class_());
    return Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(ga)) getGenericComponentType], [((id<JavaLangReflectGenericArrayType>) nil_chk(gb)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:a]) {
    if (!([JavaLangReflectWildcardType_class_() isInstance:b])) return false;
    id<JavaLangReflectWildcardType> wa = (id<JavaLangReflectWildcardType>) cast_check(a, JavaLangReflectWildcardType_class_());
    id<JavaLangReflectWildcardType> wb = (id<JavaLangReflectWildcardType>) cast_check(b, JavaLangReflectWildcardType_class_());
    return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((id<JavaLangReflectWildcardType>) nil_chk(wa)) getUpperBounds], [((id<JavaLangReflectWildcardType>) nil_chk(wb)) getUpperBounds]) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([wa getLowerBounds], [wb getLowerBounds]);
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:a]) {
    if (!([JavaLangReflectTypeVariable_class_() isInstance:b])) return false;
    id<JavaLangReflectTypeVariable> va = (id<JavaLangReflectTypeVariable>) cast_check(a, JavaLangReflectTypeVariable_class_());
    id<JavaLangReflectTypeVariable> vb = (id<JavaLangReflectTypeVariable>) cast_check(b, JavaLangReflectTypeVariable_class_());
    return [((id<JavaLangReflectTypeVariable>) nil_chk(va)) getGenericDeclaration] == [((id<JavaLangReflectTypeVariable>) nil_chk(vb)) getGenericDeclaration] && [((NSString *) nil_chk([va getName])) isEqual:[vb getName]];
  }
  else {
    return false;
  }
}

id<JavaLangReflectType> Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve) {
  Retrofit2Utils_initialize();
  if (toResolve == rawType) return context;
  if ([((IOSClass *) nil_chk(toResolve)) isInterface]) {
    IOSObjectArray *interfaces = [((IOSClass *) nil_chk(rawType)) getInterfaces];
    for (jint i = 0, length = ((IOSObjectArray *) nil_chk(interfaces))->size_; i < length; i++) {
      if (IOSObjectArray_Get(interfaces, i) == toResolve) {
        return IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i);
      }
      else if ([toResolve isAssignableFrom:IOSObjectArray_Get(interfaces, i)]) {
        return Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i), IOSObjectArray_Get(interfaces, i), toResolve);
      }
    }
  }
  if (![((IOSClass *) nil_chk(rawType)) isInterface]) {
    while (rawType != NSObject_class_()) {
      IOSClass *rawSupertype = [((IOSClass *) nil_chk(rawType)) getSuperclass];
      if (rawSupertype == toResolve) {
        return [rawType getGenericSuperclass];
      }
      else if ([toResolve isAssignableFrom:rawSupertype]) {
        return Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_([rawType getGenericSuperclass], rawSupertype, toResolve);
      }
      rawType = rawSupertype;
    }
  }
  return toResolve;
}

jint Retrofit2Utils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind) {
  Retrofit2Utils_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; i++) {
    if ([nil_chk(toFind) isEqual:IOSObjectArray_Get(array, i)]) return i;
  }
  @throw create_JavaUtilNoSuchElementException_init();
}

jboolean Retrofit2Utils_equalWithId_withId_(id a, id b) {
  Retrofit2Utils_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

jint Retrofit2Utils_hashCodeOrZeroWithId_(id o) {
  Retrofit2Utils_initialize();
  return o != nil ? ((jint) [o hash]) : 0;
}

NSString *Retrofit2Utils_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Retrofit2Utils_initialize();
  return [type isKindOfClass:[IOSClass class]] ? [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getName] : [((id<JavaLangReflectType>) nil_chk(type)) description];
}

id<JavaLangReflectType> Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype) {
  Retrofit2Utils_initialize();
  if (![((IOSClass *) nil_chk(supertype)) isAssignableFrom:contextRawType]) @throw create_JavaLangIllegalArgumentException_init();
  return Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype));
}

id<JavaLangReflectType> Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve) {
  Retrofit2Utils_initialize();
  while (true) {
    if ([JavaLangReflectTypeVariable_class_() isInstance:toResolve]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) cast_check(toResolve, JavaLangReflectTypeVariable_class_());
      toResolve = Retrofit2Utils_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, typeVariable);
      if (toResolve == typeVariable) {
        return toResolve;
      }
    }
    else if ([toResolve isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(toResolve, [IOSClass class])))) isArray]) {
      IOSClass *original = (IOSClass *) cast_chk(toResolve, [IOSClass class]);
      id<JavaLangReflectType> componentType = [((IOSClass *) nil_chk(original)) getComponentType];
      id<JavaLangReflectType> newComponentType = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : (id) create_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectGenericArrayType_class_() isInstance:toResolve]) {
      id<JavaLangReflectGenericArrayType> original = (id<JavaLangReflectGenericArrayType>) cast_check(toResolve, JavaLangReflectGenericArrayType_class_());
      id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(original)) getGenericComponentType];
      id<JavaLangReflectType> newComponentType = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : create_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectParameterizedType_class_() isInstance:toResolve]) {
      id<JavaLangReflectParameterizedType> original = (id<JavaLangReflectParameterizedType>) cast_check(toResolve, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(original)) getOwnerType];
      id<JavaLangReflectType> newOwnerType = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, ownerType);
      jboolean changed = newOwnerType != ownerType;
      IOSObjectArray *args = [original getActualTypeArguments];
      for (jint t = 0, length = ((IOSObjectArray *) nil_chk(args))->size_; t < length; t++) {
        id<JavaLangReflectType> resolvedTypeArgument = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(args, t));
        if (resolvedTypeArgument != IOSObjectArray_Get(args, t)) {
          if (!changed) {
            args = [args java_clone];
            changed = true;
          }
          IOSObjectArray_Set(nil_chk(args), t, resolvedTypeArgument);
        }
      }
      return changed ? create_Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(newOwnerType, [original getRawType], args) : original;
    }
    else if ([JavaLangReflectWildcardType_class_() isInstance:toResolve]) {
      id<JavaLangReflectWildcardType> original = (id<JavaLangReflectWildcardType>) cast_check(toResolve, JavaLangReflectWildcardType_class_());
      IOSObjectArray *originalLowerBound = [((id<JavaLangReflectWildcardType>) nil_chk(original)) getLowerBounds];
      IOSObjectArray *originalUpperBound = [original getUpperBounds];
      if (((IOSObjectArray *) nil_chk(originalLowerBound))->size_ == 1) {
        id<JavaLangReflectType> lowerBound = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalLowerBound, 0));
        if (lowerBound != IOSObjectArray_Get(originalLowerBound, 0)) {
          return create_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()], [IOSObjectArray arrayWithObjects:(id[]){ lowerBound } count:1 type:JavaLangReflectType_class_()]);
        }
      }
      else if (((IOSObjectArray *) nil_chk(originalUpperBound))->size_ == 1) {
        id<JavaLangReflectType> upperBound = Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalUpperBound, 0));
        if (upperBound != IOSObjectArray_Get(originalUpperBound, 0)) {
          return create_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray arrayWithObjects:(id[]){ upperBound } count:1 type:JavaLangReflectType_class_()], Retrofit2Utils_EMPTY_TYPE_ARRAY);
        }
      }
      return original;
    }
    else {
      return toResolve;
    }
  }
}

id<JavaLangReflectType> Retrofit2Utils_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown) {
  Retrofit2Utils_initialize();
  IOSClass *declaredByRaw = Retrofit2Utils_declaringClassOfWithJavaLangReflectTypeVariable_(unknown);
  if (declaredByRaw == nil) return unknown;
  id<JavaLangReflectType> declaredBy = Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, declaredByRaw);
  if ([JavaLangReflectParameterizedType_class_() isInstance:declaredBy]) {
    jint index = Retrofit2Utils_indexOfWithNSObjectArray_withId_([declaredByRaw getTypeParameters], unknown);
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(declaredBy, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), index);
  }
  return unknown;
}

IOSClass *Retrofit2Utils_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) {
  Retrofit2Utils_initialize();
  id<JavaLangReflectGenericDeclaration> genericDeclaration = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getGenericDeclaration];
  return [genericDeclaration isKindOfClass:[IOSClass class]] ? (IOSClass *) cast_chk(genericDeclaration, [IOSClass class]) : nil;
}

void Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Retrofit2Utils_initialize();
  if ([type isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isPrimitive]) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
}

id Retrofit2Utils_checkNotNullWithId_withNSString_(id object, NSString *message) {
  Retrofit2Utils_initialize();
  if (object == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(message);
  }
  return object;
}

jboolean Retrofit2Utils_isAnnotationPresentWithJavaLangAnnotationAnnotationArray_withIOSClass_(IOSObjectArray *annotations, IOSClass *cls) {
  Retrofit2Utils_initialize();
  {
    IOSObjectArray *a__ = annotations;
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> annotation = *b__++;
      if ([((IOSClass *) nil_chk(cls)) isInstance:annotation]) {
        return true;
      }
    }
  }
  return false;
}

Okhttp3ResponseBody *Retrofit2Utils_bufferWithOkhttp3ResponseBody_(Okhttp3ResponseBody *body) {
  Retrofit2Utils_initialize();
  OkioBuffer *buffer = create_OkioBuffer_init();
  [((id<OkioBufferedSource>) nil_chk([((Okhttp3ResponseBody *) nil_chk(body)) source])) readAllWithOkioSink:buffer];
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_([body contentType], [body contentLength], buffer);
}

void Retrofit2Utils_validateServiceInterfaceWithIOSClass_(IOSClass *service) {
  Retrofit2Utils_initialize();
  if (![((IOSClass *) nil_chk(service)) isInterface]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"API declarations must be interfaces.");
  }
  if (((IOSObjectArray *) nil_chk([service getInterfaces]))->size_ > 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"API interfaces must not extend other interfaces.");
  }
}

id<JavaLangReflectType> Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(jint index, id<JavaLangReflectParameterizedType> type) {
  Retrofit2Utils_initialize();
  IOSObjectArray *types = [((id<JavaLangReflectParameterizedType>) nil_chk(type)) getActualTypeArguments];
  if (index < 0 || index >= ((IOSObjectArray *) nil_chk(types))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$@", @"Index ", index, @" not in range [0,", ((IOSObjectArray *) nil_chk(types))->size_, @") for ", type));
  }
  id<JavaLangReflectType> paramType = IOSObjectArray_Get(nil_chk(types), index);
  if ([JavaLangReflectWildcardType_class_() isInstance:paramType]) {
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(paramType, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0);
  }
  return paramType;
}

jboolean Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Retrofit2Utils_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return false;
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    {
      IOSObjectArray *a__ = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getActualTypeArguments];
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> typeArgument = *b__++;
        if (Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(typeArgument)) {
          return true;
        }
      }
    }
    return false;
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType]);
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return true;
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return true;
  }
  NSString *className_ = type == nil ? @"null" : [[type java_getClass] getName];
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Expected a Class, ParameterizedType, or GenericArrayType, but <", type, @"> is of type ", className_));
}

id<JavaLangReflectType> Retrofit2Utils_getCallResponseTypeWithJavaLangReflectType_(id<JavaLangReflectType> returnType) {
  Retrofit2Utils_initialize();
  if (!([JavaLangReflectParameterizedType_class_() isInstance:returnType])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
  }
  return Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, (id<JavaLangReflectParameterizedType>) cast_check(returnType, JavaLangReflectParameterizedType_class_()));
}

IOSObjectArray *Retrofit2Utils__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Utils)

@implementation Retrofit2Utils_ParameterizedTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)typeArguments {
  Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, ownerType, rawType, typeArguments);
  return self;
}

- (IOSObjectArray *)getActualTypeArguments {
  return [((IOSObjectArray *) nil_chk(typeArguments_)) java_clone];
}

- (id<JavaLangReflectType>)getRawType {
  return rawType_;
}

- (id<JavaLangReflectType>)getOwnerType {
  return ownerType_;
}

- (jboolean)isEqual:(id __nonnull)other {
  return [JavaLangReflectParameterizedType_class_() isInstance:other] && Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectParameterizedType>) cast_check(other, JavaLangReflectParameterizedType_class_()));
}

- (NSUInteger)hash {
  return JavaUtilArrays_hashCodeWithNSObjectArray_(typeArguments_) ^ ((jint) [((id<JavaLangReflectType>) nil_chk(rawType_)) hash]) ^ Retrofit2Utils_hashCodeOrZeroWithId_(ownerType_);
}

- (NSString *)description {
  if (((IOSObjectArray *) nil_chk(typeArguments_))->size_ == 0) return Retrofit2Utils_typeToStringWithJavaLangReflectType_(rawType_);
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_initWithInt_(30 * (typeArguments_->size_ + 1));
  [result appendWithNSString:Retrofit2Utils_typeToStringWithJavaLangReflectType_(rawType_)];
  [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"<"])) appendWithNSString:Retrofit2Utils_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, 0))];
  for (jint i = 1; i < typeArguments_->size_; i++) {
    [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@", "])) appendWithNSString:Retrofit2Utils_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, i))];
  }
  return [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@">"])) description];
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(ownerType_);
  RELEASE_(rawType_);
  RELEASE_(typeArguments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getActualTypeArguments);
  methods[2].selector = @selector(getRawType);
  methods[3].selector = @selector(getOwnerType);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ownerType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeArguments_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofit2Utils;" };
  static const J2ObjcClassInfo _Retrofit2Utils_ParameterizedTypeImpl = { "ParameterizedTypeImpl", "retrofit2", ptrTable, methods, fields, 7, 0x1a, 7, 3, 5, -1, -1, -1, -1 };
  return &_Retrofit2Utils_ParameterizedTypeImpl;
}

@end

void Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(Retrofit2Utils_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  NSObject_init(self);
  if ([rawType isKindOfClass:[IOSClass class]] && (ownerType == nil) != ([((IOSClass *) nil_chk(((IOSClass *) cast_chk(rawType, [IOSClass class])))) getEnclosingClass] == nil)) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  {
    IOSObjectArray *a__ = typeArguments;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> typeArgument = *b__++;
      Retrofit2Utils_checkNotNullWithId_withNSString_(typeArgument, @"typeArgument == null");
      Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(typeArgument);
    }
  }
  JreStrongAssign(&self->ownerType_, ownerType);
  JreStrongAssign(&self->rawType_, rawType);
  JreStrongAssign(&self->typeArguments_, [((IOSObjectArray *) nil_chk(typeArguments)) java_clone]);
}

Retrofit2Utils_ParameterizedTypeImpl *new_Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_NEW_IMPL(Retrofit2Utils_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

Retrofit2Utils_ParameterizedTypeImpl *create_Retrofit2Utils_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_CREATE_IMPL(Retrofit2Utils_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Utils_ParameterizedTypeImpl)

@implementation Retrofit2Utils_GenericArrayTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)componentType {
  Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

- (id<JavaLangReflectType>)getGenericComponentType {
  return componentType_;
}

- (jboolean)isEqual:(id __nonnull)o {
  return [JavaLangReflectGenericArrayType_class_() isInstance:o] && Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(o, JavaLangReflectGenericArrayType_class_()));
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaLangReflectType>) nil_chk(componentType_)) hash]);
}

- (NSString *)description {
  return JreStrcat("$$", Retrofit2Utils_typeToStringWithJavaLangReflectType_(componentType_), @"[]");
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(componentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(getGenericComponentType);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "componentType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofit2Utils;" };
  static const J2ObjcClassInfo _Retrofit2Utils_GenericArrayTypeImpl = { "GenericArrayTypeImpl", "retrofit2", ptrTable, methods, fields, 7, 0x1a, 5, 1, 5, -1, -1, -1, -1 };
  return &_Retrofit2Utils_GenericArrayTypeImpl;
}

@end

void Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(Retrofit2Utils_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType) {
  NSObject_init(self);
  JreStrongAssign(&self->componentType_, componentType);
}

Retrofit2Utils_GenericArrayTypeImpl *new_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_NEW_IMPL(Retrofit2Utils_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

Retrofit2Utils_GenericArrayTypeImpl *create_Retrofit2Utils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_CREATE_IMPL(Retrofit2Utils_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Utils_GenericArrayTypeImpl)

@implementation Retrofit2Utils_WildcardTypeImpl

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)lowerBounds {
  Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

- (IOSObjectArray *)getUpperBounds {
  return [IOSObjectArray arrayWithObjects:(id[]){ upperBound_ } count:1 type:JavaLangReflectType_class_()];
}

- (IOSObjectArray *)getLowerBounds {
  return lowerBound_ != nil ? [IOSObjectArray arrayWithObjects:(id[]){ lowerBound_ } count:1 type:JavaLangReflectType_class_()] : JreLoadStatic(Retrofit2Utils, EMPTY_TYPE_ARRAY);
}

- (jboolean)isEqual:(id __nonnull)other {
  return [JavaLangReflectWildcardType_class_() isInstance:other] && Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectWildcardType>) cast_check(other, JavaLangReflectWildcardType_class_()));
}

- (NSUInteger)hash {
  return (lowerBound_ != nil ? 31 + ((jint) [lowerBound_ hash]) : 1) ^ (31 + ((jint) [((id<JavaLangReflectType>) nil_chk(upperBound_)) hash]));
}

- (NSString *)description {
  if (lowerBound_ != nil) return JreStrcat("$$", @"? super ", Retrofit2Utils_typeToStringWithJavaLangReflectType_(lowerBound_));
  if (upperBound_ == (id) NSObject_class_()) return @"?";
  return JreStrcat("$$", @"? extends ", Retrofit2Utils_typeToStringWithJavaLangReflectType_(upperBound_));
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(upperBound_);
  RELEASE_(lowerBound_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getUpperBounds);
  methods[2].selector = @selector(getLowerBounds);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "upperBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofit2Utils;" };
  static const J2ObjcClassInfo _Retrofit2Utils_WildcardTypeImpl = { "WildcardTypeImpl", "retrofit2", ptrTable, methods, fields, 7, 0x1a, 6, 2, 5, -1, -1, -1, -1 };
  return &_Retrofit2Utils_WildcardTypeImpl;
}

@end

void Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(Retrofit2Utils_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(lowerBounds))->size_ > 1) @throw create_JavaLangIllegalArgumentException_init();
  if (((IOSObjectArray *) nil_chk(upperBounds))->size_ != 1) @throw create_JavaLangIllegalArgumentException_init();
  if (lowerBounds->size_ == 1) {
    if (IOSObjectArray_Get(lowerBounds, 0) == nil) @throw create_JavaLangNullPointerException_init();
    Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    if (IOSObjectArray_Get(upperBounds, 0) != (id) NSObject_class_()) @throw create_JavaLangIllegalArgumentException_init();
    JreStrongAssign(&self->lowerBound_, IOSObjectArray_Get(lowerBounds, 0));
    JreStrongAssign(&self->upperBound_, NSObject_class_());
  }
  else {
    if (IOSObjectArray_Get(upperBounds, 0) == nil) @throw create_JavaLangNullPointerException_init();
    Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
    JreStrongAssign(&self->lowerBound_, nil);
    JreStrongAssign(&self->upperBound_, IOSObjectArray_Get(upperBounds, 0));
  }
}

Retrofit2Utils_WildcardTypeImpl *new_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_NEW_IMPL(Retrofit2Utils_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

Retrofit2Utils_WildcardTypeImpl *create_Retrofit2Utils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_CREATE_IMPL(Retrofit2Utils_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Utils_WildcardTypeImpl)
