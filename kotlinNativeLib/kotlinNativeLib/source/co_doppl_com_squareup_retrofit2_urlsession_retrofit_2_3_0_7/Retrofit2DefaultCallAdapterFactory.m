//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Retrofit2Call.h"
#include "Retrofit2CallAdapter.h"
#include "Retrofit2DefaultCallAdapterFactory.h"
#include "Retrofit2Retrofit.h"
#include "Retrofit2Utils.h"
#include "java/lang/reflect/Type.h"

@interface Retrofit2DefaultCallAdapterFactory_1 : NSObject < Retrofit2CallAdapter > {
 @public
  id<JavaLangReflectType> val$responseType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)capture$0;

- (id<JavaLangReflectType>)responseType;

- (id<Retrofit2Call>)adaptWithRetrofit2Call:(id<Retrofit2Call> __nonnull)call;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2DefaultCallAdapterFactory_1)

__attribute__((unused)) static void Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(Retrofit2DefaultCallAdapterFactory_1 *self, id<JavaLangReflectType> capture$0);

__attribute__((unused)) static Retrofit2DefaultCallAdapterFactory_1 *new_Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2DefaultCallAdapterFactory_1 *create_Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0);

J2OBJC_INITIALIZED_DEFN(Retrofit2DefaultCallAdapterFactory)

Retrofit2CallAdapter_Factory *Retrofit2DefaultCallAdapterFactory_INSTANCE;

@implementation Retrofit2DefaultCallAdapterFactory

+ (Retrofit2CallAdapter_Factory *)INSTANCE {
  return Retrofit2DefaultCallAdapterFactory_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2DefaultCallAdapterFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<Retrofit2CallAdapter>)getWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)returnType
                 withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                 withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit {
  if (Retrofit2CallAdapter_Factory_getRawTypeWithJavaLangReflectType_(returnType) != Retrofit2Call_class_()) {
    return nil;
  }
  id<JavaLangReflectType> responseType = Retrofit2Utils_getCallResponseTypeWithJavaLangReflectType_(returnType);
  return create_Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(responseType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2CallAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRetrofit2CallAdapter_Factory;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;LRetrofit2Retrofit;", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter<**>;", &Retrofit2DefaultCallAdapterFactory_INSTANCE };
  static const J2ObjcClassInfo _Retrofit2DefaultCallAdapterFactory = { "DefaultCallAdapterFactory", "retrofit2", ptrTable, methods, fields, 7, 0x10, 2, 1, -1, -1, -1, -1, -1 };
  return &_Retrofit2DefaultCallAdapterFactory;
}

+ (void)initialize {
  if (self == [Retrofit2DefaultCallAdapterFactory class]) {
    JreStrongAssignAndConsume(&Retrofit2DefaultCallAdapterFactory_INSTANCE, new_Retrofit2DefaultCallAdapterFactory_init());
    J2OBJC_SET_INITIALIZED(Retrofit2DefaultCallAdapterFactory)
  }
}

@end

void Retrofit2DefaultCallAdapterFactory_init(Retrofit2DefaultCallAdapterFactory *self) {
  Retrofit2CallAdapter_Factory_init(self);
}

Retrofit2DefaultCallAdapterFactory *new_Retrofit2DefaultCallAdapterFactory_init() {
  J2OBJC_NEW_IMPL(Retrofit2DefaultCallAdapterFactory, init)
}

Retrofit2DefaultCallAdapterFactory *create_Retrofit2DefaultCallAdapterFactory_init() {
  J2OBJC_CREATE_IMPL(Retrofit2DefaultCallAdapterFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2DefaultCallAdapterFactory)

@implementation Retrofit2DefaultCallAdapterFactory_1

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)capture$0 {
  Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(self, capture$0);
  return self;
}

- (id<JavaLangReflectType>)responseType {
  return val$responseType_;
}

- (id<Retrofit2Call>)adaptWithRetrofit2Call:(id<Retrofit2Call> __nonnull)call {
  return call;
}

- (void)dealloc {
  RELEASE_(val$responseType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Call;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(responseType);
  methods[2].selector = @selector(adaptWithRetrofit2Call:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$responseType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "adapt", "LRetrofit2Call;", "(Lretrofit2/Call<Ljava/lang/Object;>;)Lretrofit2/Call<Ljava/lang/Object;>;", "LRetrofit2DefaultCallAdapterFactory;", "getWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:", "Ljava/lang/Object;Lretrofit2/CallAdapter<Ljava/lang/Object;Lretrofit2/Call<*>;>;" };
  static const J2ObjcClassInfo _Retrofit2DefaultCallAdapterFactory_1 = { "", "retrofit2", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, 4, 5, -1 };
  return &_Retrofit2DefaultCallAdapterFactory_1;
}

@end

void Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(Retrofit2DefaultCallAdapterFactory_1 *self, id<JavaLangReflectType> capture$0) {
  JreStrongAssign(&self->val$responseType_, capture$0);
  NSObject_init(self);
}

Retrofit2DefaultCallAdapterFactory_1 *new_Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) {
  J2OBJC_NEW_IMPL(Retrofit2DefaultCallAdapterFactory_1, initWithJavaLangReflectType_, capture$0)
}

Retrofit2DefaultCallAdapterFactory_1 *create_Retrofit2DefaultCallAdapterFactory_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) {
  J2OBJC_CREATE_IMPL(Retrofit2DefaultCallAdapterFactory_1, initWithJavaLangReflectType_, capture$0)
}
