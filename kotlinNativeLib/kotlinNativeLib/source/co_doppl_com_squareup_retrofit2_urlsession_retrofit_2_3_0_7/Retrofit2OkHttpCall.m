//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Call.h"
#include "Okhttp3Callback.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "Retrofit2Call.h"
#include "Retrofit2Callback.h"
#include "Retrofit2OkHttpCall.h"
#include "Retrofit2Response.h"
#include "Retrofit2ServiceMethod.h"
#include "Retrofit2Utils.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ForwardingSource.h"
#include "okio/Okio.h"
#include "okio/Source.h"

@interface Retrofit2OkHttpCall () {
 @public
  Retrofit2ServiceMethod *serviceMethod_;
  IOSObjectArray *args_;
  volatile_jboolean canceled_;
  id<Okhttp3Call> rawCall_;
  JavaLangThrowable *creationFailure_;
  jboolean executed_;
}

- (id<Okhttp3Call>)createRawCall;

@end

J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall, serviceMethod_, Retrofit2ServiceMethod *)
J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall, args_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall, rawCall_, id<Okhttp3Call>)
J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall, creationFailure_, JavaLangThrowable *)

__attribute__((unused)) static id<Okhttp3Call> Retrofit2OkHttpCall_createRawCall(Retrofit2OkHttpCall *self);

__attribute__((unused)) static IOSObjectArray *Retrofit2OkHttpCall__Annotations$0();

__attribute__((unused)) static IOSObjectArray *Retrofit2OkHttpCall__Annotations$1();

__attribute__((unused)) static IOSObjectArray *Retrofit2OkHttpCall__Annotations$2();

__attribute__((unused)) static IOSObjectArray *Retrofit2OkHttpCall__Annotations$3();

@interface Retrofit2OkHttpCall_1 : NSObject < Okhttp3Callback > {
 @public
  Retrofit2OkHttpCall *this$0_;
  id<Retrofit2Callback> val$callback_;
}

- (instancetype)initWithRetrofit2OkHttpCall:(Retrofit2OkHttpCall * __nonnull)outer$
                      withRetrofit2Callback:(id<Retrofit2Callback> __nonnull)capture$0;

- (void)onResponseWithOkhttp3Call:(id<Okhttp3Call> __nonnull)call
              withOkhttp3Response:(Okhttp3Response * __nonnull)rawResponse;

- (void)onFailureWithOkhttp3Call:(id<Okhttp3Call> __nonnull)call
           withJavaIoIOException:(JavaIoIOException * __nonnull)e;

- (void)callFailureWithJavaLangThrowable:(JavaLangThrowable * __nonnull)e;

- (void)callSuccessWithRetrofit2Response:(Retrofit2Response * __nonnull)response;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2OkHttpCall_1)

__attribute__((unused)) static void Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall_1 *self, Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0);

__attribute__((unused)) static Retrofit2OkHttpCall_1 *new_Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2OkHttpCall_1 *create_Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0);

__attribute__((unused)) static void Retrofit2OkHttpCall_1_callFailureWithJavaLangThrowable_(Retrofit2OkHttpCall_1 *self, JavaLangThrowable *e);

__attribute__((unused)) static void Retrofit2OkHttpCall_1_callSuccessWithRetrofit2Response_(Retrofit2OkHttpCall_1 *self, Retrofit2Response *response);

@interface Retrofit2OkHttpCall_NoContentResponseBody () {
 @public
  Okhttp3MediaType *contentType_;
  jlong contentLength_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall_NoContentResponseBody, contentType_, Okhttp3MediaType *)

@interface Retrofit2OkHttpCall_ExceptionCatchingRequestBody () {
 @public
  Okhttp3ResponseBody *delegate_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2OkHttpCall_ExceptionCatchingRequestBody, delegate_, Okhttp3ResponseBody *)

@interface Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 : OkioForwardingSource {
 @public
  Retrofit2OkHttpCall_ExceptionCatchingRequestBody *this$0_;
}

- (instancetype)initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody:(Retrofit2OkHttpCall_ExceptionCatchingRequestBody * __nonnull)outer$
                                                          withOkioSource:(id<OkioSource> __nonnull)x0;

- (jlong)readWithOkioBuffer:(OkioBuffer * __nonnull)sink
                   withLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1)

__attribute__((unused)) static void Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *self, Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0);

__attribute__((unused)) static Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *new_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *create_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0);

@implementation Retrofit2OkHttpCall

- (instancetype)initWithRetrofit2ServiceMethod:(Retrofit2ServiceMethod * __nonnull)serviceMethod
                             withNSObjectArray:(IOSObjectArray * __nullable)args {
  Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(self, serviceMethod, args);
  return self;
}

- (Retrofit2OkHttpCall *)java_clone {
  return create_Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(serviceMethod_, args_);
}

- (Okhttp3Request *)request {
  @synchronized(self) {
    id<Okhttp3Call> call = rawCall_;
    if (call != nil) {
      return JreRetainedLocalValue([call request]);
    }
    if (creationFailure_ != nil) {
      if ([creationFailure_ isKindOfClass:[JavaIoIOException class]]) {
        @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Unable to create request.", creationFailure_);
      }
      else {
        @throw (JavaLangRuntimeException *) cast_chk(creationFailure_, [JavaLangRuntimeException class]);
      }
    }
    @try {
      return JreRetainedLocalValue([((id<Okhttp3Call>) (JreStrongAssign(&rawCall_, Retrofit2OkHttpCall_createRawCall(self)))) request]);
    }
    @catch (JavaLangRuntimeException *e) {
      JreStrongAssign(&creationFailure_, e);
      @throw e;
    }
    @catch (JavaIoIOException *e) {
      JreStrongAssign(&creationFailure_, e);
      @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Unable to create request.", e);
    }
  }
}

- (void)enqueueWithRetrofit2Callback:(id<Retrofit2Callback> __nonnull)callback {
  Retrofit2Utils_checkNotNullWithId_withNSString_(callback, @"callback == null");
  id<Okhttp3Call> call;
  JavaLangThrowable *failure;
  @synchronized(self) {
    if (executed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already executed.");
    executed_ = true;
    call = JreRetainedLocalValue(rawCall_);
    failure = JreRetainedLocalValue(creationFailure_);
    if (call == nil && failure == nil) {
      @try {
        call = JreRetainedLocalValue(JreStrongAssign(&rawCall_, Retrofit2OkHttpCall_createRawCall(self)));
      }
      @catch (JavaLangThrowable *t) {
        failure = JreRetainedLocalValue(JreStrongAssign(&creationFailure_, t));
      }
    }
  }
  if (failure != nil) {
    [((id<Retrofit2Callback>) nil_chk(callback)) onFailureWithRetrofit2Call:self withJavaLangThrowable:failure];
    return;
  }
  if (JreLoadVolatileBoolean(&canceled_)) {
    [((id<Okhttp3Call>) nil_chk(call)) cancel];
  }
  [((id<Okhttp3Call>) nil_chk(call)) enqueueWithOkhttp3Callback:create_Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(self, callback)];
}

- (jboolean)isExecuted {
  @synchronized(self) {
    return executed_;
  }
}

- (Retrofit2Response *)execute {
  id<Okhttp3Call> call;
  @synchronized(self) {
    if (executed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already executed.");
    executed_ = true;
    if (creationFailure_ != nil) {
      if ([creationFailure_ isKindOfClass:[JavaIoIOException class]]) {
        @throw (JavaIoIOException *) cast_chk(creationFailure_, [JavaIoIOException class]);
      }
      else {
        @throw (JavaLangRuntimeException *) cast_chk(creationFailure_, [JavaLangRuntimeException class]);
      }
    }
    call = JreRetainedLocalValue(rawCall_);
    if (call == nil) {
      @try {
        call = JreRetainedLocalValue(JreStrongAssign(&rawCall_, Retrofit2OkHttpCall_createRawCall(self)));
      }
      @catch (JavaIoIOException *e) {
        JreStrongAssign(&creationFailure_, e);
        @throw e;
      }
      @catch (JavaLangRuntimeException *e) {
        JreStrongAssign(&creationFailure_, e);
        @throw e;
      }
    }
  }
  if (JreLoadVolatileBoolean(&canceled_)) {
    [((id<Okhttp3Call>) nil_chk(call)) cancel];
  }
  return [self parseResponseWithOkhttp3Response:[((id<Okhttp3Call>) nil_chk(call)) execute]];
}

- (id<Okhttp3Call>)createRawCall {
  return Retrofit2OkHttpCall_createRawCall(self);
}

- (Retrofit2Response *)parseResponseWithOkhttp3Response:(Okhttp3Response * __nonnull)rawResponse {
  Okhttp3ResponseBody *rawBody = [((Okhttp3Response *) nil_chk(rawResponse)) body];
  rawResponse = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([rawResponse newBuilder])) bodyWithOkhttp3ResponseBody:create_Retrofit2OkHttpCall_NoContentResponseBody_initWithOkhttp3MediaType_withLong_([((Okhttp3ResponseBody *) nil_chk(rawBody)) contentType], [rawBody contentLength])])) build];
  jint code = [((Okhttp3Response *) nil_chk(rawResponse)) code];
  if (code < 200 || code >= 300) {
    @try {
      Okhttp3ResponseBody *bufferedBody = Retrofit2Utils_bufferWithOkhttp3ResponseBody_(rawBody);
      return Retrofit2Response_errorWithOkhttp3ResponseBody_withOkhttp3Response_(bufferedBody, rawResponse);
    }
    @finally {
      [rawBody close];
    }
  }
  if (code == 204 || code == 205) {
    [rawBody close];
    return Retrofit2Response_successWithId_withOkhttp3Response_(nil, rawResponse);
  }
  Retrofit2OkHttpCall_ExceptionCatchingRequestBody *catchingBody = create_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_initWithOkhttp3ResponseBody_(rawBody);
  @try {
    id body = [((Retrofit2ServiceMethod *) nil_chk(serviceMethod_)) toResponseWithOkhttp3ResponseBody:catchingBody];
    return Retrofit2Response_successWithId_withOkhttp3Response_(body, rawResponse);
  }
  @catch (JavaLangRuntimeException *e) {
    [catchingBody throwIfCaught];
    @throw e;
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&canceled_, true);
  id<Okhttp3Call> call;
  @synchronized(self) {
    call = JreRetainedLocalValue(rawCall_);
  }
  if (call != nil) {
    [call cancel];
  }
}

- (jboolean)isCanceled {
  if (JreLoadVolatileBoolean(&canceled_)) {
    return true;
  }
  @synchronized(self) {
    return rawCall_ != nil && [rawCall_ isCanceled];
  }
}

- (id<Retrofit2Call>)clone {
  return [self java_clone];
}

- (void)dealloc {
  RELEASE_(serviceMethod_);
  RELEASE_(args_);
  RELEASE_(rawCall_);
  RELEASE_(creationFailure_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, 2 },
    { NULL, "LRetrofit2OkHttpCall;", 0x1, 3, -1, -1, 4, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Response;", 0x1, -1, -1, 8, 9, -1, -1 },
    { NULL, "LOkhttp3Call;", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "LRetrofit2Response;", 0x0, 10, 11, 8, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2ServiceMethod:withNSObjectArray:);
  methods[1].selector = @selector(java_clone);
  methods[2].selector = @selector(request);
  methods[3].selector = @selector(enqueueWithRetrofit2Callback:);
  methods[4].selector = @selector(isExecuted);
  methods[5].selector = @selector(execute);
  methods[6].selector = @selector(createRawCall);
  methods[7].selector = @selector(parseResponseWithOkhttp3Response:);
  methods[8].selector = @selector(cancel);
  methods[9].selector = @selector(isCanceled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serviceMethod_", "LRetrofit2ServiceMethod;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "args_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, 14 },
    { "canceled_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "rawCall_", "LOkhttp3Call;", .constantValue.asLong = 0, 0x2, -1, -1, -1, 15 },
    { "creationFailure_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, 16 },
    { "executed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRetrofit2ServiceMethod;[LNSObject;", "(Lretrofit2/ServiceMethod<TT;*>;[Ljava/lang/Object;)V", (void *)&Retrofit2OkHttpCall__Annotations$0, "clone", "()Lretrofit2/OkHttpCall<TT;>;", "enqueue", "LRetrofit2Callback;", "(Lretrofit2/Callback<TT;>;)V", "LJavaIoIOException;", "()Lretrofit2/Response<TT;>;", "parseResponse", "LOkhttp3Response;", "(Lokhttp3/Response;)Lretrofit2/Response<TT;>;", "Lretrofit2/ServiceMethod<TT;*>;", (void *)&Retrofit2OkHttpCall__Annotations$1, (void *)&Retrofit2OkHttpCall__Annotations$2, (void *)&Retrofit2OkHttpCall__Annotations$3, "LRetrofit2OkHttpCall_NoContentResponseBody;LRetrofit2OkHttpCall_ExceptionCatchingRequestBody;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lretrofit2/Call<TT;>;" };
  static const J2ObjcClassInfo _Retrofit2OkHttpCall = { "OkHttpCall", "retrofit2", ptrTable, methods, fields, 7, 0x10, 10, 6, -1, 17, -1, 18, -1 };
  return &_Retrofit2OkHttpCall;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(Retrofit2OkHttpCall *self, Retrofit2ServiceMethod *serviceMethod, IOSObjectArray *args) {
  NSObject_init(self);
  JreStrongAssign(&self->serviceMethod_, serviceMethod);
  JreStrongAssign(&self->args_, args);
}

Retrofit2OkHttpCall *new_Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(Retrofit2ServiceMethod *serviceMethod, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Retrofit2OkHttpCall, initWithRetrofit2ServiceMethod_withNSObjectArray_, serviceMethod, args)
}

Retrofit2OkHttpCall *create_Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(Retrofit2ServiceMethod *serviceMethod, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Retrofit2OkHttpCall, initWithRetrofit2ServiceMethod_withNSObjectArray_, serviceMethod, args)
}

id<Okhttp3Call> Retrofit2OkHttpCall_createRawCall(Retrofit2OkHttpCall *self) {
  Okhttp3Request *request = [((Retrofit2ServiceMethod *) nil_chk(self->serviceMethod_)) toRequestWithNSObjectArray:self->args_];
  id<Okhttp3Call> call = [((id<Okhttp3Call_Factory>) nil_chk(self->serviceMethod_->callFactory_)) newCallWithOkhttp3Request:request];
  if (call == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Call.Factory returned null.");
  }
  return call;
}

IOSObjectArray *Retrofit2OkHttpCall__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *Retrofit2OkHttpCall__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2OkHttpCall__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2OkHttpCall__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2OkHttpCall)

@implementation Retrofit2OkHttpCall_1

- (instancetype)initWithRetrofit2OkHttpCall:(Retrofit2OkHttpCall * __nonnull)outer$
                      withRetrofit2Callback:(id<Retrofit2Callback> __nonnull)capture$0 {
  Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(self, outer$, capture$0);
  return self;
}

- (void)onResponseWithOkhttp3Call:(id<Okhttp3Call> __nonnull)call
              withOkhttp3Response:(Okhttp3Response * __nonnull)rawResponse {
  Retrofit2Response *response;
  @try {
    response = [this$0_ parseResponseWithOkhttp3Response:rawResponse];
  }
  @catch (JavaLangThrowable *e) {
    Retrofit2OkHttpCall_1_callFailureWithJavaLangThrowable_(self, e);
    return;
  }
  Retrofit2OkHttpCall_1_callSuccessWithRetrofit2Response_(self, response);
}

- (void)onFailureWithOkhttp3Call:(id<Okhttp3Call> __nonnull)call
           withJavaIoIOException:(JavaIoIOException * __nonnull)e {
  @try {
    [((id<Retrofit2Callback>) nil_chk(val$callback_)) onFailureWithRetrofit2Call:this$0_ withJavaLangThrowable:e];
  }
  @catch (JavaLangThrowable *t) {
    [t printStackTrace];
  }
}

- (void)callFailureWithJavaLangThrowable:(JavaLangThrowable * __nonnull)e {
  Retrofit2OkHttpCall_1_callFailureWithJavaLangThrowable_(self, e);
}

- (void)callSuccessWithRetrofit2Response:(Retrofit2Response * __nonnull)response {
  Retrofit2OkHttpCall_1_callSuccessWithRetrofit2Response_(self, response);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2OkHttpCall:withRetrofit2Callback:);
  methods[1].selector = @selector(onResponseWithOkhttp3Call:withOkhttp3Response:);
  methods[2].selector = @selector(onFailureWithOkhttp3Call:withJavaIoIOException:);
  methods[3].selector = @selector(callFailureWithJavaLangThrowable:);
  methods[4].selector = @selector(callSuccessWithRetrofit2Response:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRetrofit2OkHttpCall;", .constantValue.asLong = 0, 0x1012, -1, -1, 10, -1 },
    { "val$callback_", "LRetrofit2Callback;", .constantValue.asLong = 0, 0x1012, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "onResponse", "LOkhttp3Call;LOkhttp3Response;", "LJavaIoIOException;", "onFailure", "LOkhttp3Call;LJavaIoIOException;", "callFailure", "LJavaLangThrowable;", "callSuccess", "LRetrofit2Response;", "(Lretrofit2/Response<TT;>;)V", "Lretrofit2/OkHttpCall<TT;>;", "Lretrofit2/Callback<TT;>;", "LRetrofit2OkHttpCall;", "enqueueWithRetrofit2Callback:" };
  static const J2ObjcClassInfo _Retrofit2OkHttpCall_1 = { "", "retrofit2", ptrTable, methods, fields, 7, 0x8018, 5, 2, 12, -1, 13, -1, -1 };
  return &_Retrofit2OkHttpCall_1;
}

@end

void Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall_1 *self, Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$callback_, capture$0);
  NSObject_init(self);
}

Retrofit2OkHttpCall_1 *new_Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0) {
  J2OBJC_NEW_IMPL(Retrofit2OkHttpCall_1, initWithRetrofit2OkHttpCall_withRetrofit2Callback_, outer$, capture$0)
}

Retrofit2OkHttpCall_1 *create_Retrofit2OkHttpCall_1_initWithRetrofit2OkHttpCall_withRetrofit2Callback_(Retrofit2OkHttpCall *outer$, id<Retrofit2Callback> capture$0) {
  J2OBJC_CREATE_IMPL(Retrofit2OkHttpCall_1, initWithRetrofit2OkHttpCall_withRetrofit2Callback_, outer$, capture$0)
}

void Retrofit2OkHttpCall_1_callFailureWithJavaLangThrowable_(Retrofit2OkHttpCall_1 *self, JavaLangThrowable *e) {
  @try {
    [((id<Retrofit2Callback>) nil_chk(self->val$callback_)) onFailureWithRetrofit2Call:self->this$0_ withJavaLangThrowable:e];
  }
  @catch (JavaLangThrowable *t) {
    [t printStackTrace];
  }
}

void Retrofit2OkHttpCall_1_callSuccessWithRetrofit2Response_(Retrofit2OkHttpCall_1 *self, Retrofit2Response *response) {
  @try {
    [((id<Retrofit2Callback>) nil_chk(self->val$callback_)) onResponseWithRetrofit2Call:self->this$0_ withRetrofit2Response:response];
  }
  @catch (JavaLangThrowable *t) {
    [t printStackTrace];
  }
}

@implementation Retrofit2OkHttpCall_NoContentResponseBody

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType * __nonnull)contentType
                                withLong:(jlong)contentLength {
  Retrofit2OkHttpCall_NoContentResponseBody_initWithOkhttp3MediaType_withLong_(self, contentType, contentLength);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return contentType_;
}

- (jlong)contentLength {
  return contentLength_;
}

- (id<OkioBufferedSource>)source {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot read raw response body of a converted body.");
}

- (void)dealloc {
  RELEASE_(contentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3MediaType:withLong:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(source);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentLength_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3MediaType;J", "LRetrofit2OkHttpCall;" };
  static const J2ObjcClassInfo _Retrofit2OkHttpCall_NoContentResponseBody = { "NoContentResponseBody", "retrofit2", ptrTable, methods, fields, 7, 0x18, 4, 2, 1, -1, -1, -1, -1 };
  return &_Retrofit2OkHttpCall_NoContentResponseBody;
}

@end

void Retrofit2OkHttpCall_NoContentResponseBody_initWithOkhttp3MediaType_withLong_(Retrofit2OkHttpCall_NoContentResponseBody *self, Okhttp3MediaType *contentType, jlong contentLength) {
  Okhttp3ResponseBody_init(self);
  JreStrongAssign(&self->contentType_, contentType);
  self->contentLength_ = contentLength;
}

Retrofit2OkHttpCall_NoContentResponseBody *new_Retrofit2OkHttpCall_NoContentResponseBody_initWithOkhttp3MediaType_withLong_(Okhttp3MediaType *contentType, jlong contentLength) {
  J2OBJC_NEW_IMPL(Retrofit2OkHttpCall_NoContentResponseBody, initWithOkhttp3MediaType_withLong_, contentType, contentLength)
}

Retrofit2OkHttpCall_NoContentResponseBody *create_Retrofit2OkHttpCall_NoContentResponseBody_initWithOkhttp3MediaType_withLong_(Okhttp3MediaType *contentType, jlong contentLength) {
  J2OBJC_CREATE_IMPL(Retrofit2OkHttpCall_NoContentResponseBody, initWithOkhttp3MediaType_withLong_, contentType, contentLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2OkHttpCall_NoContentResponseBody)

@implementation Retrofit2OkHttpCall_ExceptionCatchingRequestBody

- (instancetype)initWithOkhttp3ResponseBody:(Okhttp3ResponseBody * __nonnull)delegate {
  Retrofit2OkHttpCall_ExceptionCatchingRequestBody_initWithOkhttp3ResponseBody_(self, delegate);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return [((Okhttp3ResponseBody *) nil_chk(delegate_)) contentType];
}

- (jlong)contentLength {
  return [((Okhttp3ResponseBody *) nil_chk(delegate_)) contentLength];
}

- (id<OkioBufferedSource>)source {
  return OkioOkio_bufferWithOkioSource_(create_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(self, [((Okhttp3ResponseBody *) nil_chk(delegate_)) source]));
}

- (void)close {
  [((Okhttp3ResponseBody *) nil_chk(delegate_)) close];
}

- (void)throwIfCaught {
  if (thrownException_ != nil) {
    @throw thrownException_;
  }
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(thrownException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3ResponseBody:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(source);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(throwIfCaught);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LOkhttp3ResponseBody;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "thrownException_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ResponseBody;", "LJavaIoIOException;", "LRetrofit2OkHttpCall;" };
  static const J2ObjcClassInfo _Retrofit2OkHttpCall_ExceptionCatchingRequestBody = { "ExceptionCatchingRequestBody", "retrofit2", ptrTable, methods, fields, 7, 0x18, 6, 2, 2, -1, -1, -1, -1 };
  return &_Retrofit2OkHttpCall_ExceptionCatchingRequestBody;
}

@end

void Retrofit2OkHttpCall_ExceptionCatchingRequestBody_initWithOkhttp3ResponseBody_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody *self, Okhttp3ResponseBody *delegate) {
  Okhttp3ResponseBody_init(self);
  JreStrongAssign(&self->delegate_, delegate);
}

Retrofit2OkHttpCall_ExceptionCatchingRequestBody *new_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_initWithOkhttp3ResponseBody_(Okhttp3ResponseBody *delegate) {
  J2OBJC_NEW_IMPL(Retrofit2OkHttpCall_ExceptionCatchingRequestBody, initWithOkhttp3ResponseBody_, delegate)
}

Retrofit2OkHttpCall_ExceptionCatchingRequestBody *create_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_initWithOkhttp3ResponseBody_(Okhttp3ResponseBody *delegate) {
  J2OBJC_CREATE_IMPL(Retrofit2OkHttpCall_ExceptionCatchingRequestBody, initWithOkhttp3ResponseBody_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2OkHttpCall_ExceptionCatchingRequestBody)

@implementation Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1

- (instancetype)initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody:(Retrofit2OkHttpCall_ExceptionCatchingRequestBody * __nonnull)outer$
                                                          withOkioSource:(id<OkioSource> __nonnull)x0 {
  Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(self, outer$, x0);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer * __nonnull)sink
                   withLong:(jlong)byteCount {
  @try {
    return [super readWithOkioBuffer:sink withLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&this$0_->thrownException_, e);
    @throw e;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody:withOkioSource:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRetrofit2OkHttpCall_ExceptionCatchingRequestBody;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "LRetrofit2OkHttpCall_ExceptionCatchingRequestBody;", "source" };
  static const J2ObjcClassInfo _Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 = { "", "retrofit2", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, -1, -1 };
  return &_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1;
}

@end

void Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *self, Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0) {
  JreStrongAssign(&self->this$0_, outer$);
  OkioForwardingSource_initWithOkioSource_(self, x0);
}

Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *new_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0) {
  J2OBJC_NEW_IMPL(Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1, initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_, outer$, x0)
}

Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1 *create_Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1_initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_(Retrofit2OkHttpCall_ExceptionCatchingRequestBody *outer$, id<OkioSource> x0) {
  J2OBJC_CREATE_IMPL(Retrofit2OkHttpCall_ExceptionCatchingRequestBody_1, initWithRetrofit2OkHttpCall_ExceptionCatchingRequestBody_withOkioSource_, outer$, x0)
}
