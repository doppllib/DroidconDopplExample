//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Call.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3MultipartBody.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "Retrofit2CallAdapter.h"
#include "Retrofit2Converter.h"
#include "Retrofit2HttpBody.h"
#include "Retrofit2HttpDELETE.h"
#include "Retrofit2HttpField.h"
#include "Retrofit2HttpFieldMap.h"
#include "Retrofit2HttpFormUrlEncoded.h"
#include "Retrofit2HttpGET.h"
#include "Retrofit2HttpHEAD.h"
#include "Retrofit2HttpHTTP.h"
#include "Retrofit2HttpHeader.h"
#include "Retrofit2HttpHeaderMap.h"
#include "Retrofit2HttpHeaders.h"
#include "Retrofit2HttpMultipart.h"
#include "Retrofit2HttpOPTIONS.h"
#include "Retrofit2HttpPATCH.h"
#include "Retrofit2HttpPOST.h"
#include "Retrofit2HttpPUT.h"
#include "Retrofit2HttpPart.h"
#include "Retrofit2HttpPartMap.h"
#include "Retrofit2HttpPath.h"
#include "Retrofit2HttpQuery.h"
#include "Retrofit2HttpQueryMap.h"
#include "Retrofit2HttpQueryName.h"
#include "Retrofit2HttpUrl.h"
#include "Retrofit2ParameterHandler.h"
#include "Retrofit2RequestBuilder.h"
#include "Retrofit2Response.h"
#include "Retrofit2Retrofit.h"
#include "Retrofit2ServiceMethod.h"
#include "Retrofit2Utils.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/net/URI.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "javax/annotation/Nullable.h"

@interface Retrofit2ServiceMethod () {
 @public
  Okhttp3HttpUrl *baseUrl_;
  id<Retrofit2Converter> responseConverter_;
  NSString *httpMethod_;
  NSString *relativeUrl_;
  Okhttp3Headers *headers_;
  Okhttp3MediaType *contentType_;
  jboolean hasBody_;
  jboolean isFormEncoded_;
  jboolean isMultipart_;
  IOSObjectArray *parameterHandlers_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, baseUrl_, Okhttp3HttpUrl *)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, responseConverter_, id<Retrofit2Converter>)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, httpMethod_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, relativeUrl_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, headers_, Okhttp3Headers *)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, contentType_, Okhttp3MediaType *)
J2OBJC_FIELD_SETTER(Retrofit2ServiceMethod, parameterHandlers_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *Retrofit2ServiceMethod__Annotations$0();

@interface Retrofit2ServiceMethod_Builder ()

- (id<Retrofit2CallAdapter>)createCallAdapter;

- (void)parseMethodAnnotationWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation> __nonnull)annotation;

- (void)parseHttpMethodAndPathWithNSString:(NSString * __nonnull)httpMethod
                              withNSString:(NSString * __nonnull)value
                               withBoolean:(jboolean)hasBody;

- (Okhttp3Headers *)parseHeadersWithNSStringArray:(IOSObjectArray * __nonnull)headers;

- (Retrofit2ParameterHandler *)parseParameterWithInt:(jint)p
                             withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)parameterType
               withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations;

- (Retrofit2ParameterHandler *)parseParameterAnnotationWithInt:(jint)p
                                       withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                         withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                              withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation> __nonnull)annotation;

- (void)validatePathNameWithInt:(jint)p
                   withNSString:(NSString * __nonnull)name;

- (id<Retrofit2Converter>)createResponseConverter;

- (JavaLangRuntimeException *)methodErrorWithNSString:(NSString * __nonnull)message
                                    withNSObjectArray:(IOSObjectArray * __nonnull)args;

- (JavaLangRuntimeException *)methodErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)cause
                                                  withNSString:(NSString * __nonnull)message
                                             withNSObjectArray:(IOSObjectArray * __nonnull)args;

- (JavaLangRuntimeException *)parameterErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)cause
                                                          withInt:(jint)p
                                                     withNSString:(NSString * __nonnull)message
                                                withNSObjectArray:(IOSObjectArray * __nonnull)args;

- (JavaLangRuntimeException *)parameterErrorWithInt:(jint)p
                                       withNSString:(NSString * __nonnull)message
                                  withNSObjectArray:(IOSObjectArray * __nonnull)args;

@end

__attribute__((unused)) static id<Retrofit2CallAdapter> Retrofit2ServiceMethod_Builder_createCallAdapter(Retrofit2ServiceMethod_Builder *self);

__attribute__((unused)) static void Retrofit2ServiceMethod_Builder_parseMethodAnnotationWithJavaLangAnnotationAnnotation_(Retrofit2ServiceMethod_Builder *self, id<JavaLangAnnotationAnnotation> annotation);

__attribute__((unused)) static void Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(Retrofit2ServiceMethod_Builder *self, NSString *httpMethod, NSString *value, jboolean hasBody);

__attribute__((unused)) static Okhttp3Headers *Retrofit2ServiceMethod_Builder_parseHeadersWithNSStringArray_(Retrofit2ServiceMethod_Builder *self, IOSObjectArray *headers);

__attribute__((unused)) static Retrofit2ParameterHandler *Retrofit2ServiceMethod_Builder_parseParameterWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_(Retrofit2ServiceMethod_Builder *self, jint p, id<JavaLangReflectType> parameterType, IOSObjectArray *annotations);

__attribute__((unused)) static Retrofit2ParameterHandler *Retrofit2ServiceMethod_Builder_parseParameterAnnotationWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_withJavaLangAnnotationAnnotation_(Retrofit2ServiceMethod_Builder *self, jint p, id<JavaLangReflectType> type, IOSObjectArray *annotations, id<JavaLangAnnotationAnnotation> annotation);

__attribute__((unused)) static void Retrofit2ServiceMethod_Builder_validatePathNameWithInt_withNSString_(Retrofit2ServiceMethod_Builder *self, jint p, NSString *name);

__attribute__((unused)) static id<Retrofit2Converter> Retrofit2ServiceMethod_Builder_createResponseConverter(Retrofit2ServiceMethod_Builder *self);

__attribute__((unused)) static JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, NSString *message, IOSObjectArray *args);

__attribute__((unused)) static JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, JavaLangThrowable *cause, NSString *message, IOSObjectArray *args);

__attribute__((unused)) static JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_parameterErrorWithJavaLangThrowable_withInt_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, JavaLangThrowable *cause, jint p, NSString *message, IOSObjectArray *args);

__attribute__((unused)) static JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, jint p, NSString *message, IOSObjectArray *args);

J2OBJC_INITIALIZED_DEFN(Retrofit2ServiceMethod)

NSString *Retrofit2ServiceMethod_PARAM = @"[a-zA-Z][a-zA-Z0-9_-]*";
JavaUtilRegexPattern *Retrofit2ServiceMethod_PARAM_URL_REGEX;
JavaUtilRegexPattern *Retrofit2ServiceMethod_PARAM_NAME_REGEX;

@implementation Retrofit2ServiceMethod

+ (NSString *)PARAM {
  return Retrofit2ServiceMethod_PARAM;
}

+ (JavaUtilRegexPattern *)PARAM_URL_REGEX {
  return Retrofit2ServiceMethod_PARAM_URL_REGEX;
}

+ (JavaUtilRegexPattern *)PARAM_NAME_REGEX {
  return Retrofit2ServiceMethod_PARAM_NAME_REGEX;
}

- (instancetype)initWithRetrofit2ServiceMethod_Builder:(Retrofit2ServiceMethod_Builder * __nonnull)builder {
  Retrofit2ServiceMethod_initWithRetrofit2ServiceMethod_Builder_(self, builder);
  return self;
}

- (Okhttp3Request *)toRequestWithNSObjectArray:(IOSObjectArray * __nullable)args {
  Retrofit2RequestBuilder *requestBuilder = create_Retrofit2RequestBuilder_initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_(httpMethod_, baseUrl_, relativeUrl_, headers_, contentType_, hasBody_, isFormEncoded_, isMultipart_);
  IOSObjectArray *handlers = parameterHandlers_;
  jint argumentCount = args != nil ? args->size_ : 0;
  if (argumentCount != ((IOSObjectArray *) nil_chk(handlers))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Argument count (", argumentCount, @") doesn't match expected count (", handlers->size_, ')'));
  }
  for (jint p = 0; p < argumentCount; p++) {
    [((Retrofit2ParameterHandler *) nil_chk(IOSObjectArray_Get(handlers, p))) applyWithRetrofit2RequestBuilder:requestBuilder withId:IOSObjectArray_Get(nil_chk(args), p)];
  }
  return [requestBuilder build];
}

- (id)toResponseWithOkhttp3ResponseBody:(Okhttp3ResponseBody * __nonnull)body {
  return [((id<Retrofit2Converter>) nil_chk(responseConverter_)) convertWithId:body];
}

+ (id<JavaUtilSet>)parsePathParametersWithNSString:(NSString * __nonnull)path {
  return Retrofit2ServiceMethod_parsePathParametersWithNSString_(path);
}

+ (IOSClass *)boxIfPrimitiveWithIOSClass:(IOSClass * __nonnull)type {
  return Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_(type);
}

- (void)dealloc {
  RELEASE_(callFactory_);
  RELEASE_(callAdapter_);
  RELEASE_(baseUrl_);
  RELEASE_(responseConverter_);
  RELEASE_(httpMethod_);
  RELEASE_(relativeUrl_);
  RELEASE_(headers_);
  RELEASE_(contentType_);
  RELEASE_(parameterHandlers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x80, 2, 3, 4, -1, -1, 5 },
    { NULL, "LNSObject;", 0x0, 6, 7, 4, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x8, 9, 10, -1, 11, -1, -1 },
    { NULL, "LIOSClass;", 0x8, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2ServiceMethod_Builder:);
  methods[1].selector = @selector(toRequestWithNSObjectArray:);
  methods[2].selector = @selector(toResponseWithOkhttp3ResponseBody:);
  methods[3].selector = @selector(parsePathParametersWithNSString:);
  methods[4].selector = @selector(boxIfPrimitiveWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARAM", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "PARAM_URL_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "PARAM_NAME_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "callFactory_", "LOkhttp3Call_Factory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "callAdapter_", "LRetrofit2CallAdapter;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "baseUrl_", "LOkhttp3HttpUrl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "responseConverter_", "LRetrofit2Converter;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "httpMethod_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "relativeUrl_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headers_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasBody_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isFormEncoded_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isMultipart_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parameterHandlers_", "[LRetrofit2ParameterHandler;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "LRetrofit2ServiceMethod_Builder;", "(Lretrofit2/ServiceMethod$Builder<TR;TT;>;)V", "toRequest", "[LNSObject;", "LJavaIoIOException;", (void *)&Retrofit2ServiceMethod__Annotations$0, "toResponse", "LOkhttp3ResponseBody;", "(Lokhttp3/ResponseBody;)TR;", "parsePathParameters", "LNSString;", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "boxIfPrimitive", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/Class<*>;", &Retrofit2ServiceMethod_PARAM, &Retrofit2ServiceMethod_PARAM_URL_REGEX, &Retrofit2ServiceMethod_PARAM_NAME_REGEX, "Lretrofit2/CallAdapter<TR;TT;>;", "Lretrofit2/Converter<Lokhttp3/ResponseBody;TR;>;", "[Lretrofit2/ParameterHandler<*>;", "<R:Ljava/lang/Object;T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _Retrofit2ServiceMethod = { "ServiceMethod", "retrofit2", ptrTable, methods, fields, 7, 0x10, 5, 15, -1, 0, -1, 21, -1 };
  return &_Retrofit2ServiceMethod;
}

+ (void)initialize {
  if (self == [Retrofit2ServiceMethod class]) {
    JreStrongAssign(&Retrofit2ServiceMethod_PARAM_URL_REGEX, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"\\{(", Retrofit2ServiceMethod_PARAM, @")\\}")));
    JreStrongAssign(&Retrofit2ServiceMethod_PARAM_NAME_REGEX, JavaUtilRegexPattern_compileWithNSString_(Retrofit2ServiceMethod_PARAM));
    J2OBJC_SET_INITIALIZED(Retrofit2ServiceMethod)
  }
}

@end

void Retrofit2ServiceMethod_initWithRetrofit2ServiceMethod_Builder_(Retrofit2ServiceMethod *self, Retrofit2ServiceMethod_Builder *builder) {
  NSObject_init(self);
  JreStrongAssign(&self->callFactory_, [((Retrofit2Retrofit *) nil_chk(((Retrofit2ServiceMethod_Builder *) nil_chk(builder))->retrofit_)) callFactory]);
  JreStrongAssign(&self->callAdapter_, builder->callAdapter_);
  JreStrongAssign(&self->baseUrl_, [builder->retrofit_ baseUrl]);
  JreStrongAssign(&self->responseConverter_, builder->responseConverter_);
  JreStrongAssign(&self->httpMethod_, builder->httpMethod_);
  JreStrongAssign(&self->relativeUrl_, builder->relativeUrl_);
  JreStrongAssign(&self->headers_, builder->headers_);
  JreStrongAssign(&self->contentType_, builder->contentType_);
  self->hasBody_ = builder->hasBody_;
  self->isFormEncoded_ = builder->isFormEncoded_;
  self->isMultipart_ = builder->isMultipart_;
  JreStrongAssign(&self->parameterHandlers_, builder->parameterHandlers_);
}

Retrofit2ServiceMethod *new_Retrofit2ServiceMethod_initWithRetrofit2ServiceMethod_Builder_(Retrofit2ServiceMethod_Builder *builder) {
  J2OBJC_NEW_IMPL(Retrofit2ServiceMethod, initWithRetrofit2ServiceMethod_Builder_, builder)
}

Retrofit2ServiceMethod *create_Retrofit2ServiceMethod_initWithRetrofit2ServiceMethod_Builder_(Retrofit2ServiceMethod_Builder *builder) {
  J2OBJC_CREATE_IMPL(Retrofit2ServiceMethod, initWithRetrofit2ServiceMethod_Builder_, builder)
}

id<JavaUtilSet> Retrofit2ServiceMethod_parsePathParametersWithNSString_(NSString *path) {
  Retrofit2ServiceMethod_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(Retrofit2ServiceMethod_PARAM_URL_REGEX)) matcherWithJavaLangCharSequence:path];
  id<JavaUtilSet> patterns = create_JavaUtilLinkedHashSet_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    [patterns addWithId:[m groupWithInt:1]];
  }
  return patterns;
}

IOSClass *Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_(IOSClass *type) {
  Retrofit2ServiceMethod_initialize();
  if ([IOSClass booleanClass] == type) return JavaLangBoolean_class_();
  if ([IOSClass byteClass] == type) return JavaLangByte_class_();
  if ([IOSClass charClass] == type) return JavaLangCharacter_class_();
  if ([IOSClass doubleClass] == type) return JavaLangDouble_class_();
  if ([IOSClass floatClass] == type) return JavaLangFloat_class_();
  if ([IOSClass intClass] == type) return JavaLangInteger_class_();
  if ([IOSClass longClass] == type) return JavaLangLong_class_();
  if ([IOSClass shortClass] == type) return JavaLangShort_class_();
  return type;
}

IOSObjectArray *Retrofit2ServiceMethod__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2ServiceMethod)

@implementation Retrofit2ServiceMethod_Builder

- (instancetype)initWithRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit
                withJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method {
  Retrofit2ServiceMethod_Builder_initWithRetrofit2Retrofit_withJavaLangReflectMethod_(self, retrofit, method);
  return self;
}

- (Retrofit2ServiceMethod *)build {
  JreStrongAssign(&callAdapter_, Retrofit2ServiceMethod_Builder_createCallAdapter(self));
  JreStrongAssign(&responseType_, [((id<Retrofit2CallAdapter>) nil_chk(callAdapter_)) responseType]);
  if (responseType_ == (id) Retrofit2Response_class_() || responseType_ == (id) Okhttp3Response_class_()) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, JreStrcat("C$$", '\'', [((IOSClass *) nil_chk(Retrofit2Utils_getRawTypeWithJavaLangReflectType_(responseType_))) getName], @"' is not a valid response body type. Did you mean ResponseBody?"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  JreStrongAssign(&responseConverter_, Retrofit2ServiceMethod_Builder_createResponseConverter(self));
  {
    IOSObjectArray *a__ = methodAnnotations_;
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> annotation = *b__++;
      Retrofit2ServiceMethod_Builder_parseMethodAnnotationWithJavaLangAnnotationAnnotation_(self, annotation);
    }
  }
  if (httpMethod_ == nil) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"HTTP method annotation is required (e.g., @GET, @POST, etc.).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  if (!hasBody_) {
    if (isMultipart_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Multipart can only be specified on HTTP methods with request body (e.g., @POST).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (isFormEncoded_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
  }
  jint parameterCount = ((IOSObjectArray *) nil_chk(parameterAnnotationsArray_))->size_;
  JreStrongAssignAndConsume(&parameterHandlers_, [IOSObjectArray newArrayWithLength:parameterCount type:Retrofit2ParameterHandler_class_()]);
  for (jint p = 0; p < parameterCount; p++) {
    id<JavaLangReflectType> parameterType = IOSObjectArray_Get(nil_chk(parameterTypes_), p);
    if (Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(parameterType)) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Parameter type must not include a type variable or wildcard: %s", [IOSObjectArray arrayWithObjects:(id[]){ parameterType } count:1 type:NSObject_class_()]));
    }
    IOSObjectArray *parameterAnnotations = IOSObjectArray_Get(parameterAnnotationsArray_, p);
    if (parameterAnnotations == nil) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"No Retrofit annotation found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    IOSObjectArray_Set(nil_chk(parameterHandlers_), p, Retrofit2ServiceMethod_Builder_parseParameterWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_(self, p, parameterType, parameterAnnotations));
  }
  if (relativeUrl_ == nil && !gotUrl_) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Missing either @%s URL or @Url parameter.", [IOSObjectArray arrayWithObjects:(id[]){ httpMethod_ } count:1 type:NSObject_class_()]));
  }
  if (!isFormEncoded_ && !isMultipart_ && !hasBody_ && gotBody_) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Non-body HTTP method cannot contain @Body.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  if (isFormEncoded_ && !gotField_) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Form-encoded method must contain at least one @Field.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  if (isMultipart_ && !gotPart_) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Multipart method must contain at least one @Part.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  return create_Retrofit2ServiceMethod_initWithRetrofit2ServiceMethod_Builder_(self);
}

- (id<Retrofit2CallAdapter>)createCallAdapter {
  return Retrofit2ServiceMethod_Builder_createCallAdapter(self);
}

- (void)parseMethodAnnotationWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation> __nonnull)annotation {
  Retrofit2ServiceMethod_Builder_parseMethodAnnotationWithJavaLangAnnotationAnnotation_(self, annotation);
}

- (void)parseHttpMethodAndPathWithNSString:(NSString * __nonnull)httpMethod
                              withNSString:(NSString * __nonnull)value
                               withBoolean:(jboolean)hasBody {
  Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, httpMethod, value, hasBody);
}

- (Okhttp3Headers *)parseHeadersWithNSStringArray:(IOSObjectArray * __nonnull)headers {
  return Retrofit2ServiceMethod_Builder_parseHeadersWithNSStringArray_(self, headers);
}

- (Retrofit2ParameterHandler *)parseParameterWithInt:(jint)p
                             withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)parameterType
               withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations {
  return Retrofit2ServiceMethod_Builder_parseParameterWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_(self, p, parameterType, annotations);
}

- (Retrofit2ParameterHandler *)parseParameterAnnotationWithInt:(jint)p
                                       withJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type
                         withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                              withJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation> __nonnull)annotation {
  return Retrofit2ServiceMethod_Builder_parseParameterAnnotationWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_withJavaLangAnnotationAnnotation_(self, p, type, annotations, annotation);
}

- (void)validatePathNameWithInt:(jint)p
                   withNSString:(NSString * __nonnull)name {
  Retrofit2ServiceMethod_Builder_validatePathNameWithInt_withNSString_(self, p, name);
}

- (id<Retrofit2Converter>)createResponseConverter {
  return Retrofit2ServiceMethod_Builder_createResponseConverter(self);
}

- (JavaLangRuntimeException *)methodErrorWithNSString:(NSString * __nonnull)message
                                    withNSObjectArray:(IOSObjectArray * __nonnull)args {
  return Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, message, args);
}

- (JavaLangRuntimeException *)methodErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)cause
                                                  withNSString:(NSString * __nonnull)message
                                             withNSObjectArray:(IOSObjectArray * __nonnull)args {
  return Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(self, cause, message, args);
}

- (JavaLangRuntimeException *)parameterErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)cause
                                                          withInt:(jint)p
                                                     withNSString:(NSString * __nonnull)message
                                                withNSObjectArray:(IOSObjectArray * __nonnull)args {
  return Retrofit2ServiceMethod_Builder_parameterErrorWithJavaLangThrowable_withInt_withNSString_withNSObjectArray_(self, cause, p, message, args);
}

- (JavaLangRuntimeException *)parameterErrorWithInt:(jint)p
                                       withNSString:(NSString * __nonnull)message
                                  withNSObjectArray:(IOSObjectArray * __nonnull)args {
  return Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, message, args);
}

- (void)dealloc {
  RELEASE_(retrofit_);
  RELEASE_(method_);
  RELEASE_(methodAnnotations_);
  RELEASE_(parameterAnnotationsArray_);
  RELEASE_(parameterTypes_);
  RELEASE_(responseType_);
  RELEASE_(httpMethod_);
  RELEASE_(relativeUrl_);
  RELEASE_(headers_);
  RELEASE_(contentType_);
  RELEASE_(relativeUrlParamNames_);
  RELEASE_(parameterHandlers_);
  RELEASE_(responseConverter_);
  RELEASE_(callAdapter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRetrofit2ServiceMethod;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2CallAdapter;", 0x2, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Headers;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LRetrofit2ParameterHandler;", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "LRetrofit2ParameterHandler;", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x2, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 17, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 20, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2Retrofit:withJavaLangReflectMethod:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(createCallAdapter);
  methods[3].selector = @selector(parseMethodAnnotationWithJavaLangAnnotationAnnotation:);
  methods[4].selector = @selector(parseHttpMethodAndPathWithNSString:withNSString:withBoolean:);
  methods[5].selector = @selector(parseHeadersWithNSStringArray:);
  methods[6].selector = @selector(parseParameterWithInt:withJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[7].selector = @selector(parseParameterAnnotationWithInt:withJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withJavaLangAnnotationAnnotation:);
  methods[8].selector = @selector(validatePathNameWithInt:withNSString:);
  methods[9].selector = @selector(createResponseConverter);
  methods[10].selector = @selector(methodErrorWithNSString:withNSObjectArray:);
  methods[11].selector = @selector(methodErrorWithJavaLangThrowable:withNSString:withNSObjectArray:);
  methods[12].selector = @selector(parameterErrorWithJavaLangThrowable:withInt:withNSString:withNSObjectArray:);
  methods[13].selector = @selector(parameterErrorWithInt:withNSString:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "retrofit_", "LRetrofit2Retrofit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "method_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "methodAnnotations_", "[LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parameterAnnotationsArray_", "[[LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parameterTypes_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "responseType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotField_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotPart_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotBody_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotPath_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotQuery_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "gotUrl_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "httpMethod_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasBody_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isFormEncoded_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isMultipart_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "relativeUrl_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headers_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "relativeUrlParamNames_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 23, -1 },
    { "parameterHandlers_", "[LRetrofit2ParameterHandler;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
    { "responseConverter_", "LRetrofit2Converter;", .constantValue.asLong = 0, 0x0, -1, -1, 25, -1 },
    { "callAdapter_", "LRetrofit2CallAdapter;", .constantValue.asLong = 0, 0x0, -1, -1, 26, -1 },
  };
  static const void *ptrTable[] = { "LRetrofit2Retrofit;LJavaLangReflectMethod;", "()Lretrofit2/CallAdapter<TT;TR;>;", "parseMethodAnnotation", "LJavaLangAnnotationAnnotation;", "parseHttpMethodAndPath", "LNSString;LNSString;Z", "parseHeaders", "[LNSString;", "parseParameter", "ILJavaLangReflectType;[LJavaLangAnnotationAnnotation;", "(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/ParameterHandler<*>;", "parseParameterAnnotation", "ILJavaLangReflectType;[LJavaLangAnnotationAnnotation;LJavaLangAnnotationAnnotation;", "(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Lretrofit2/ParameterHandler<*>;", "validatePathName", "ILNSString;", "()Lretrofit2/Converter<Lokhttp3/ResponseBody;TT;>;", "methodError", "LNSString;[LNSObject;", "LJavaLangThrowable;LNSString;[LNSObject;", "parameterError", "LJavaLangThrowable;ILNSString;[LNSObject;", "ILNSString;[LNSObject;", "Ljava/util/Set<Ljava/lang/String;>;", "[Lretrofit2/ParameterHandler<*>;", "Lretrofit2/Converter<Lokhttp3/ResponseBody;TT;>;", "Lretrofit2/CallAdapter<TT;TR;>;", "LRetrofit2ServiceMethod;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _Retrofit2ServiceMethod_Builder = { "Builder", "retrofit2", ptrTable, methods, fields, 7, 0x18, 14, 23, 27, -1, -1, 28, -1 };
  return &_Retrofit2ServiceMethod_Builder;
}

@end

void Retrofit2ServiceMethod_Builder_initWithRetrofit2Retrofit_withJavaLangReflectMethod_(Retrofit2ServiceMethod_Builder *self, Retrofit2Retrofit *retrofit, JavaLangReflectMethod *method) {
  NSObject_init(self);
  JreStrongAssign(&self->retrofit_, retrofit);
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->methodAnnotations_, [((JavaLangReflectMethod *) nil_chk(method)) getAnnotations]);
  JreStrongAssign(&self->parameterTypes_, [method getGenericParameterTypes]);
  JreStrongAssign(&self->parameterAnnotationsArray_, [method getParameterAnnotations]);
}

Retrofit2ServiceMethod_Builder *new_Retrofit2ServiceMethod_Builder_initWithRetrofit2Retrofit_withJavaLangReflectMethod_(Retrofit2Retrofit *retrofit, JavaLangReflectMethod *method) {
  J2OBJC_NEW_IMPL(Retrofit2ServiceMethod_Builder, initWithRetrofit2Retrofit_withJavaLangReflectMethod_, retrofit, method)
}

Retrofit2ServiceMethod_Builder *create_Retrofit2ServiceMethod_Builder_initWithRetrofit2Retrofit_withJavaLangReflectMethod_(Retrofit2Retrofit *retrofit, JavaLangReflectMethod *method) {
  J2OBJC_CREATE_IMPL(Retrofit2ServiceMethod_Builder, initWithRetrofit2Retrofit_withJavaLangReflectMethod_, retrofit, method)
}

id<Retrofit2CallAdapter> Retrofit2ServiceMethod_Builder_createCallAdapter(Retrofit2ServiceMethod_Builder *self) {
  id<JavaLangReflectType> returnType = [((JavaLangReflectMethod *) nil_chk(self->method_)) getGenericReturnType];
  if (Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(returnType)) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Method return type must not include a type variable or wildcard: %s", [IOSObjectArray arrayWithObjects:(id[]){ returnType } count:1 type:NSObject_class_()]));
  }
  if (returnType == (id) [IOSClass voidClass]) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Service methods cannot return void.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  IOSObjectArray *annotations = [self->method_ getAnnotations];
  @try {
    return [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) callAdapterWithJavaLangReflectType:returnType withJavaLangAnnotationAnnotationArray:annotations];
  }
  @catch (JavaLangRuntimeException *e) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(self, e, @"Unable to create call adapter for %s", [IOSObjectArray arrayWithObjects:(id[]){ returnType } count:1 type:NSObject_class_()]));
  }
}

void Retrofit2ServiceMethod_Builder_parseMethodAnnotationWithJavaLangAnnotationAnnotation_(Retrofit2ServiceMethod_Builder *self, id<JavaLangAnnotationAnnotation> annotation) {
  if ([Retrofit2HttpDELETE_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"DELETE", [((id<Retrofit2HttpDELETE>) nil_chk(((id<Retrofit2HttpDELETE>) cast_check(annotation, Retrofit2HttpDELETE_class_())))) value], false);
  }
  else if ([Retrofit2HttpGET_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"GET", [((id<Retrofit2HttpGET>) nil_chk(((id<Retrofit2HttpGET>) cast_check(annotation, Retrofit2HttpGET_class_())))) value], false);
  }
  else if ([Retrofit2HttpHEAD_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"HEAD", [((id<Retrofit2HttpHEAD>) nil_chk(((id<Retrofit2HttpHEAD>) cast_check(annotation, Retrofit2HttpHEAD_class_())))) value], false);
    if (![JavaLangVoid_class_() isEqual:self->responseType_]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"HEAD method must use Void as response type.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
  }
  else if ([Retrofit2HttpPATCH_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"PATCH", [((id<Retrofit2HttpPATCH>) nil_chk(((id<Retrofit2HttpPATCH>) cast_check(annotation, Retrofit2HttpPATCH_class_())))) value], true);
  }
  else if ([Retrofit2HttpPOST_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"POST", [((id<Retrofit2HttpPOST>) nil_chk(((id<Retrofit2HttpPOST>) cast_check(annotation, Retrofit2HttpPOST_class_())))) value], true);
  }
  else if ([Retrofit2HttpPUT_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"PUT", [((id<Retrofit2HttpPUT>) nil_chk(((id<Retrofit2HttpPUT>) cast_check(annotation, Retrofit2HttpPUT_class_())))) value], true);
  }
  else if ([Retrofit2HttpOPTIONS_class_() isInstance:annotation]) {
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, @"OPTIONS", [((id<Retrofit2HttpOPTIONS>) nil_chk(((id<Retrofit2HttpOPTIONS>) cast_check(annotation, Retrofit2HttpOPTIONS_class_())))) value], false);
  }
  else if ([Retrofit2HttpHTTP_class_() isInstance:annotation]) {
    id<Retrofit2HttpHTTP> http = (id<Retrofit2HttpHTTP>) cast_check(annotation, Retrofit2HttpHTTP_class_());
    Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(self, [((id<Retrofit2HttpHTTP>) nil_chk(http)) method], [http path], [http hasBody]);
  }
  else if ([Retrofit2HttpHeaders_class_() isInstance:annotation]) {
    IOSObjectArray *headersToParse = [((id<Retrofit2HttpHeaders>) nil_chk(((id<Retrofit2HttpHeaders>) cast_check(annotation, Retrofit2HttpHeaders_class_())))) value];
    if (((IOSObjectArray *) nil_chk(headersToParse))->size_ == 0) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"@Headers annotation is empty.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    JreStrongAssign(&self->headers_, Retrofit2ServiceMethod_Builder_parseHeadersWithNSStringArray_(self, headersToParse));
  }
  else if ([Retrofit2HttpMultipart_class_() isInstance:annotation]) {
    if (self->isFormEncoded_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Only one encoding annotation is allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    self->isMultipart_ = true;
  }
  else if ([Retrofit2HttpFormUrlEncoded_class_() isInstance:annotation]) {
    if (self->isMultipart_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Only one encoding annotation is allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    self->isFormEncoded_ = true;
  }
}

void Retrofit2ServiceMethod_Builder_parseHttpMethodAndPathWithNSString_withNSString_withBoolean_(Retrofit2ServiceMethod_Builder *self, NSString *httpMethod, NSString *value, jboolean hasBody) {
  if (self->httpMethod_ != nil) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Only one HTTP method is allowed. Found: %s and %s.", [IOSObjectArray arrayWithObjects:(id[]){ self->httpMethod_, httpMethod } count:2 type:NSObject_class_()]));
  }
  JreStrongAssign(&self->httpMethod_, httpMethod);
  self->hasBody_ = hasBody;
  if ([((NSString *) nil_chk(value)) java_isEmpty]) {
    return;
  }
  jint question = [value java_indexOf:'?'];
  if (question != -1 && question < [value java_length] - 1) {
    NSString *queryParams = [value java_substring:question + 1];
    JavaUtilRegexMatcher *queryParamMatcher = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(Retrofit2ServiceMethod, PARAM_URL_REGEX))) matcherWithJavaLangCharSequence:queryParams];
    if ([((JavaUtilRegexMatcher *) nil_chk(queryParamMatcher)) find]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query.", [IOSObjectArray arrayWithObjects:(id[]){ queryParams } count:1 type:NSObject_class_()]));
    }
  }
  JreStrongAssign(&self->relativeUrl_, value);
  JreStrongAssign(&self->relativeUrlParamNames_, Retrofit2ServiceMethod_parsePathParametersWithNSString_(value));
}

Okhttp3Headers *Retrofit2ServiceMethod_Builder_parseHeadersWithNSStringArray_(Retrofit2ServiceMethod_Builder *self, IOSObjectArray *headers) {
  Okhttp3Headers_Builder *builder = create_Okhttp3Headers_Builder_init();
  {
    IOSObjectArray *a__ = headers;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *header = *b__++;
      jint colon = [((NSString *) nil_chk(header)) java_indexOf:':'];
      if (colon == -1 || colon == 0 || colon == [header java_length] - 1) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"@Headers value must be in the form \"Name: Value\". Found: \"%s\"", [IOSObjectArray arrayWithObjects:(id[]){ header } count:1 type:NSObject_class_()]));
      }
      NSString *headerName = [header java_substring:0 endIndex:colon];
      NSString *headerValue = [((NSString *) nil_chk([header java_substring:colon + 1])) java_trim];
      if ([@"Content-Type" java_equalsIgnoreCase:headerName]) {
        Okhttp3MediaType *type = Okhttp3MediaType_parseWithNSString_(headerValue);
        if (type == nil) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, @"Malformed content type: %s", [IOSObjectArray arrayWithObjects:(id[]){ headerValue } count:1 type:NSObject_class_()]));
        }
        JreStrongAssign(&self->contentType_, type);
      }
      else {
        [builder addWithNSString:headerName withNSString:headerValue];
      }
    }
  }
  return [builder build];
}

Retrofit2ParameterHandler *Retrofit2ServiceMethod_Builder_parseParameterWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_(Retrofit2ServiceMethod_Builder *self, jint p, id<JavaLangReflectType> parameterType, IOSObjectArray *annotations) {
  Retrofit2ParameterHandler *result = nil;
  {
    IOSObjectArray *a__ = annotations;
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> annotation = *b__++;
      Retrofit2ParameterHandler *annotationAction = Retrofit2ServiceMethod_Builder_parseParameterAnnotationWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_withJavaLangAnnotationAnnotation_(self, p, parameterType, annotations, annotation);
      if (annotationAction == nil) {
        continue;
      }
      if (result != nil) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Multiple Retrofit annotations found, only one allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      result = annotationAction;
    }
  }
  if (result == nil) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"No Retrofit annotation found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  return result;
}

Retrofit2ParameterHandler *Retrofit2ServiceMethod_Builder_parseParameterAnnotationWithInt_withJavaLangReflectType_withJavaLangAnnotationAnnotationArray_withJavaLangAnnotationAnnotation_(Retrofit2ServiceMethod_Builder *self, jint p, id<JavaLangReflectType> type, IOSObjectArray *annotations, id<JavaLangAnnotationAnnotation> annotation) {
  if ([Retrofit2HttpUrl_class_() isInstance:annotation]) {
    if (self->gotUrl_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Multiple @Url method annotations found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->gotPath_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Path parameters may not be used with @Url.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->gotQuery_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"A @Url parameter must not come after a @Query", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->relativeUrl_ != nil) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Url cannot be used with @%s URL", [IOSObjectArray arrayWithObjects:(id[]){ self->httpMethod_ } count:1 type:NSObject_class_()]));
    }
    self->gotUrl_ = true;
    if (type == (id) Okhttp3HttpUrl_class_() || type == (id) NSString_class_() || type == (id) JavaNetURI_class_() || ([type isKindOfClass:[IOSClass class]] && [@"android.net.Uri" isEqual:[((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getName]])) {
      return create_Retrofit2ParameterHandler_RelativeUrl_init();
    }
    else {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
  }
  else if ([Retrofit2HttpPath_class_() isInstance:annotation]) {
    if (self->gotQuery_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"A @Path parameter must not come after a @Query.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->gotUrl_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Path parameters may not be used with @Url.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->relativeUrl_ == nil) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Path can only be used with relative url on @%s", [IOSObjectArray arrayWithObjects:(id[]){ self->httpMethod_ } count:1 type:NSObject_class_()]));
    }
    self->gotPath_ = true;
    id<Retrofit2HttpPath> path = (id<Retrofit2HttpPath>) cast_check(annotation, Retrofit2HttpPath_class_());
    NSString *name = [((id<Retrofit2HttpPath>) nil_chk(path)) value];
    Retrofit2ServiceMethod_Builder_validatePathNameWithInt_withNSString_(self, p, name);
    id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
    return create_Retrofit2ParameterHandler_Path_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, [path encoded]);
  }
  else if ([Retrofit2HttpQuery_class_() isInstance:annotation]) {
    id<Retrofit2HttpQuery> query = (id<Retrofit2HttpQuery>) cast_check(annotation, Retrofit2HttpQuery_class_());
    NSString *name = [((id<Retrofit2HttpQuery>) nil_chk(query)) value];
    jboolean encoded = [query encoded];
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    self->gotQuery_ = true;
    if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
      if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:iterableType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Query_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded) iterable];
    }
    else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
      IOSClass *arrayComponentType = Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_([rawParameterType getComponentType]);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:arrayComponentType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Query_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded) array];
    }
    else {
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
      return create_Retrofit2ParameterHandler_Query_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded);
    }
  }
  else if ([Retrofit2HttpQueryName_class_() isInstance:annotation]) {
    id<Retrofit2HttpQueryName> query = (id<Retrofit2HttpQueryName>) cast_check(annotation, Retrofit2HttpQueryName_class_());
    jboolean encoded = [((id<Retrofit2HttpQueryName>) nil_chk(query)) encoded];
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    self->gotQuery_ = true;
    if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
      if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:iterableType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_QueryName_initWithRetrofit2Converter_withBoolean_(converter, encoded) iterable];
    }
    else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
      IOSClass *arrayComponentType = Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_([rawParameterType getComponentType]);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:arrayComponentType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_QueryName_initWithRetrofit2Converter_withBoolean_(converter, encoded) array];
    }
    else {
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
      return create_Retrofit2ParameterHandler_QueryName_initWithRetrofit2Converter_withBoolean_(converter, encoded);
    }
  }
  else if ([Retrofit2HttpQueryMap_class_() isInstance:annotation]) {
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if (![JavaUtilMap_class_() isAssignableFrom:rawParameterType]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@QueryMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> mapType = Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(type, rawParameterType, JavaUtilMap_class_());
    if (!([JavaLangReflectParameterizedType_class_() isInstance:mapType])) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Map must include generic types (e.g., Map<String, String>)", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> keyType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
    if (NSString_class_() != (id) keyType) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$@", @"@QueryMap keys must be of type String: ", keyType), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> valueType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(1, parameterizedType);
    id<Retrofit2Converter> valueConverter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:valueType withJavaLangAnnotationAnnotationArray:annotations];
    return create_Retrofit2ParameterHandler_QueryMap_initWithRetrofit2Converter_withBoolean_(valueConverter, [((id<Retrofit2HttpQueryMap>) nil_chk(((id<Retrofit2HttpQueryMap>) cast_check(annotation, Retrofit2HttpQueryMap_class_())))) encoded]);
  }
  else if ([Retrofit2HttpHeader_class_() isInstance:annotation]) {
    id<Retrofit2HttpHeader> header = (id<Retrofit2HttpHeader>) cast_check(annotation, Retrofit2HttpHeader_class_());
    NSString *name = [((id<Retrofit2HttpHeader>) nil_chk(header)) value];
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
      if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:iterableType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Header_initWithNSString_withRetrofit2Converter_(name, converter) iterable];
    }
    else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
      IOSClass *arrayComponentType = Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_([rawParameterType getComponentType]);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:arrayComponentType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Header_initWithNSString_withRetrofit2Converter_(name, converter) array];
    }
    else {
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
      return create_Retrofit2ParameterHandler_Header_initWithNSString_withRetrofit2Converter_(name, converter);
    }
  }
  else if ([Retrofit2HttpHeaderMap_class_() isInstance:annotation]) {
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if (![JavaUtilMap_class_() isAssignableFrom:rawParameterType]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@HeaderMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> mapType = Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(type, rawParameterType, JavaUtilMap_class_());
    if (!([JavaLangReflectParameterizedType_class_() isInstance:mapType])) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Map must include generic types (e.g., Map<String, String>)", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> keyType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
    if (NSString_class_() != (id) keyType) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$@", @"@HeaderMap keys must be of type String: ", keyType), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> valueType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(1, parameterizedType);
    id<Retrofit2Converter> valueConverter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:valueType withJavaLangAnnotationAnnotationArray:annotations];
    return create_Retrofit2ParameterHandler_HeaderMap_initWithRetrofit2Converter_(valueConverter);
  }
  else if ([Retrofit2HttpField_class_() isInstance:annotation]) {
    if (!self->isFormEncoded_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Field parameters can only be used with form encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<Retrofit2HttpField> field = (id<Retrofit2HttpField>) cast_check(annotation, Retrofit2HttpField_class_());
    NSString *name = [((id<Retrofit2HttpField>) nil_chk(field)) value];
    jboolean encoded = [field encoded];
    self->gotField_ = true;
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
      if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:iterableType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Field_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded) iterable];
    }
    else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
      IOSClass *arrayComponentType = Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_([rawParameterType getComponentType]);
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:arrayComponentType withJavaLangAnnotationAnnotationArray:annotations];
      return [create_Retrofit2ParameterHandler_Field_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded) array];
    }
    else {
      id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
      return create_Retrofit2ParameterHandler_Field_initWithNSString_withRetrofit2Converter_withBoolean_(name, converter, encoded);
    }
  }
  else if ([Retrofit2HttpFieldMap_class_() isInstance:annotation]) {
    if (!self->isFormEncoded_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@FieldMap parameters can only be used with form encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if (![JavaUtilMap_class_() isAssignableFrom:rawParameterType]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@FieldMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> mapType = Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(type, rawParameterType, JavaUtilMap_class_());
    if (!([JavaLangReflectParameterizedType_class_() isInstance:mapType])) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Map must include generic types (e.g., Map<String, String>)", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> keyType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
    if (NSString_class_() != (id) keyType) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$@", @"@FieldMap keys must be of type String: ", keyType), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> valueType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(1, parameterizedType);
    id<Retrofit2Converter> valueConverter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) stringConverterWithJavaLangReflectType:valueType withJavaLangAnnotationAnnotationArray:annotations];
    self->gotField_ = true;
    return create_Retrofit2ParameterHandler_FieldMap_initWithRetrofit2Converter_withBoolean_(valueConverter, [((id<Retrofit2HttpFieldMap>) nil_chk(((id<Retrofit2HttpFieldMap>) cast_check(annotation, Retrofit2HttpFieldMap_class_())))) encoded]);
  }
  else if ([Retrofit2HttpPart_class_() isInstance:annotation]) {
    if (!self->isMultipart_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part parameters can only be used with multipart encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<Retrofit2HttpPart> part = (id<Retrofit2HttpPart>) cast_check(annotation, Retrofit2HttpPart_class_());
    self->gotPart_ = true;
    NSString *partName = [((id<Retrofit2HttpPart>) nil_chk(part)) value];
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if ([((NSString *) nil_chk(partName)) java_isEmpty]) {
      if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
        if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
        id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
        if (![Okhttp3MultipartBody_Part_class_() isAssignableFrom:Retrofit2Utils_getRawTypeWithJavaLangReflectType_(iterableType)]) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part annotation must supply a name or use MultipartBody.Part parameter type.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        return [((Retrofit2ParameterHandler_RawPart *) nil_chk(JreLoadStatic(Retrofit2ParameterHandler_RawPart, INSTANCE))) iterable];
      }
      else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
        IOSClass *arrayComponentType = [rawParameterType getComponentType];
        if (![Okhttp3MultipartBody_Part_class_() isAssignableFrom:arrayComponentType]) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part annotation must supply a name or use MultipartBody.Part parameter type.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        return [((Retrofit2ParameterHandler_RawPart *) nil_chk(JreLoadStatic(Retrofit2ParameterHandler_RawPart, INSTANCE))) array];
      }
      else if ([Okhttp3MultipartBody_Part_class_() isAssignableFrom:rawParameterType]) {
        return JreLoadStatic(Retrofit2ParameterHandler_RawPart, INSTANCE);
      }
      else {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part annotation must supply a name or use MultipartBody.Part parameter type.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
    }
    else {
      Okhttp3Headers *headers = Okhttp3Headers_ofWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Content-Disposition", JreStrcat("$$C", @"form-data; name=\"", partName, '"'), @"Content-Transfer-Encoding", [part encoding] } count:4 type:NSString_class_()]);
      if ([JavaLangIterable_class_() isAssignableFrom:rawParameterType]) {
        if (!([JavaLangReflectParameterizedType_class_() isInstance:type])) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$$$$", [((IOSClass *) nil_chk(rawParameterType)) getSimpleName], @" must include generic type (e.g., ", [rawParameterType getSimpleName], @"<String>)"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
        id<JavaLangReflectType> iterableType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
        if ([Okhttp3MultipartBody_Part_class_() isAssignableFrom:Retrofit2Utils_getRawTypeWithJavaLangReflectType_(iterableType)]) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part parameters using the MultipartBody.Part must not include a part name in the annotation.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) requestBodyConverterWithJavaLangReflectType:iterableType withJavaLangAnnotationAnnotationArray:annotations withJavaLangAnnotationAnnotationArray:self->methodAnnotations_];
        return [create_Retrofit2ParameterHandler_Part_initWithOkhttp3Headers_withRetrofit2Converter_(headers, converter) iterable];
      }
      else if ([((IOSClass *) nil_chk(rawParameterType)) isArray]) {
        IOSClass *arrayComponentType = Retrofit2ServiceMethod_boxIfPrimitiveWithIOSClass_([rawParameterType getComponentType]);
        if ([Okhttp3MultipartBody_Part_class_() isAssignableFrom:arrayComponentType]) {
          @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part parameters using the MultipartBody.Part must not include a part name in the annotation.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
        }
        id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) requestBodyConverterWithJavaLangReflectType:arrayComponentType withJavaLangAnnotationAnnotationArray:annotations withJavaLangAnnotationAnnotationArray:self->methodAnnotations_];
        return [create_Retrofit2ParameterHandler_Part_initWithOkhttp3Headers_withRetrofit2Converter_(headers, converter) array];
      }
      else if ([Okhttp3MultipartBody_Part_class_() isAssignableFrom:rawParameterType]) {
        @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Part parameters using the MultipartBody.Part must not include a part name in the annotation.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      else {
        id<Retrofit2Converter> converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) requestBodyConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations withJavaLangAnnotationAnnotationArray:self->methodAnnotations_];
        return create_Retrofit2ParameterHandler_Part_initWithOkhttp3Headers_withRetrofit2Converter_(headers, converter);
      }
    }
  }
  else if ([Retrofit2HttpPartMap_class_() isInstance:annotation]) {
    if (!self->isMultipart_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@PartMap parameters can only be used with multipart encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    self->gotPart_ = true;
    IOSClass *rawParameterType = Retrofit2Utils_getRawTypeWithJavaLangReflectType_(type);
    if (![JavaUtilMap_class_() isAssignableFrom:rawParameterType]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@PartMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> mapType = Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(type, rawParameterType, JavaUtilMap_class_());
    if (!([JavaLangReflectParameterizedType_class_() isInstance:mapType])) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Map must include generic types (e.g., Map<String, String>)", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> keyType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, parameterizedType);
    if (NSString_class_() != (id) keyType) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, JreStrcat("$@", @"@PartMap keys must be of type String: ", keyType), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<JavaLangReflectType> valueType = Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(1, parameterizedType);
    if ([Okhttp3MultipartBody_Part_class_() isAssignableFrom:Retrofit2Utils_getRawTypeWithJavaLangReflectType_(valueType)]) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@PartMap values cannot be MultipartBody.Part. Use @Part List<Part> or a different value type instead.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<Retrofit2Converter> valueConverter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) requestBodyConverterWithJavaLangReflectType:valueType withJavaLangAnnotationAnnotationArray:annotations withJavaLangAnnotationAnnotationArray:self->methodAnnotations_];
    id<Retrofit2HttpPartMap> partMap = (id<Retrofit2HttpPartMap>) cast_check(annotation, Retrofit2HttpPartMap_class_());
    return create_Retrofit2ParameterHandler_PartMap_initWithRetrofit2Converter_withNSString_(valueConverter, [((id<Retrofit2HttpPartMap>) nil_chk(partMap)) encoding]);
  }
  else if ([Retrofit2HttpBody_class_() isInstance:annotation]) {
    if (self->isFormEncoded_ || self->isMultipart_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Body parameters cannot be used with form or multi-part encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    if (self->gotBody_) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"Multiple @Body method annotations found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    }
    id<Retrofit2Converter> converter;
    @try {
      converter = [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) requestBodyConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations withJavaLangAnnotationAnnotationArray:self->methodAnnotations_];
    }
    @catch (JavaLangRuntimeException *e) {
      @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithJavaLangThrowable_withInt_withNSString_withNSObjectArray_(self, e, p, @"Unable to create @Body converter for %s", [IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:NSObject_class_()]));
    }
    self->gotBody_ = true;
    return create_Retrofit2ParameterHandler_Body_initWithRetrofit2Converter_(converter);
  }
  return nil;
}

void Retrofit2ServiceMethod_Builder_validatePathNameWithInt_withNSString_(Retrofit2ServiceMethod_Builder *self, jint p, NSString *name) {
  if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(Retrofit2ServiceMethod, PARAM_NAME_REGEX))) matcherWithJavaLangCharSequence:name])) matches]) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"@Path parameter name must match %s. Found: %s", [IOSObjectArray arrayWithObjects:(id[]){ [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(Retrofit2ServiceMethod, PARAM_URL_REGEX))) pattern], name } count:2 type:NSObject_class_()]));
  }
  if (![((id<JavaUtilSet>) nil_chk(self->relativeUrlParamNames_)) containsWithId:name]) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(self, p, @"URL \"%s\" does not contain \"{%s}\".", [IOSObjectArray arrayWithObjects:(id[]){ self->relativeUrl_, name } count:2 type:NSObject_class_()]));
  }
}

id<Retrofit2Converter> Retrofit2ServiceMethod_Builder_createResponseConverter(Retrofit2ServiceMethod_Builder *self) {
  IOSObjectArray *annotations = [((JavaLangReflectMethod *) nil_chk(self->method_)) getAnnotations];
  @try {
    return [((Retrofit2Retrofit *) nil_chk(self->retrofit_)) responseBodyConverterWithJavaLangReflectType:self->responseType_ withJavaLangAnnotationAnnotationArray:annotations];
  }
  @catch (JavaLangRuntimeException *e) {
    @throw nil_chk(Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(self, e, @"Unable to create converter for %s", [IOSObjectArray arrayWithObjects:(id[]){ self->responseType_ } count:1 type:NSObject_class_()]));
  }
}

JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, NSString *message, IOSObjectArray *args) {
  return Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(self, nil, message, args);
}

JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, JavaLangThrowable *cause, NSString *message, IOSObjectArray *args) {
  message = NSString_java_formatWithNSString_withNSObjectArray_(message, args);
  return create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$C$", message, @"\n    for method ", [((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(self->method_)) getDeclaringClass])) getSimpleName], '.', [self->method_ getName]), cause);
}

JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_parameterErrorWithJavaLangThrowable_withInt_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, JavaLangThrowable *cause, jint p, NSString *message, IOSObjectArray *args) {
  return Retrofit2ServiceMethod_Builder_methodErrorWithJavaLangThrowable_withNSString_withNSObjectArray_(self, cause, JreStrcat("$$IC", message, @" (parameter #", (p + 1), ')'), args);
}

JavaLangRuntimeException *Retrofit2ServiceMethod_Builder_parameterErrorWithInt_withNSString_withNSObjectArray_(Retrofit2ServiceMethod_Builder *self, jint p, NSString *message, IOSObjectArray *args) {
  return Retrofit2ServiceMethod_Builder_methodErrorWithNSString_withNSObjectArray_(self, JreStrcat("$$IC", message, @" (parameter #", (p + 1), ')'), args);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2ServiceMethod_Builder)
