//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Retrofit2IosConnectInterceptor.h"
#include "Retrofit2IosInterceptor.h"
#include "Retrofit2IosIosCallFactory.h"
#include "Retrofit2IosRealInterceptorChain.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"

@implementation Retrofit2IosConnectInterceptor

- (instancetype)initWithRetrofit2IosIosCallFactory:(Retrofit2IosIosCallFactory *)client {
  Retrofit2IosConnectInterceptor_initWithRetrofit2IosIosCallFactory_(self, client);
  return self;
}

- (Okhttp3Response *)interceptWithRetrofit2IosInterceptor_Chain:(id<Retrofit2IosInterceptor_Chain>)chain {
  Retrofit2IosRealInterceptorChain *realChain = (Retrofit2IosRealInterceptorChain *) cast_chk(chain, [Retrofit2IosRealInterceptorChain class]);
  Okhttp3Request *request = [((Retrofit2IosRealInterceptorChain *) nil_chk(realChain)) request];
  JavaNetHttpURLConnection *httpURLConnection = (JavaNetHttpURLConnection *) cast_chk([((JavaNetURL *) nil_chk([((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(request)) url])) url])) openConnection], [JavaNetHttpURLConnection class]);
  [((JavaNetHttpURLConnection *) nil_chk(httpURLConnection)) setConnectTimeoutWithInt:((Retrofit2IosIosCallFactory *) nil_chk(client_))->connectTimeout_];
  [httpURLConnection setReadTimeoutWithInt:client_->readTimeout_];
  return [realChain proceedWithOkhttp3Request:request withJavaNetHttpURLConnection:httpURLConnection];
}

- (void)dealloc {
  RELEASE_(client_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2IosIosCallFactory:);
  methods[1].selector = @selector(interceptWithRetrofit2IosInterceptor_Chain:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_", "LRetrofit2IosIosCallFactory;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRetrofit2IosIosCallFactory;", "intercept", "LRetrofit2IosInterceptor_Chain;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _Retrofit2IosConnectInterceptor = { "ConnectInterceptor", "retrofit2.ios", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_Retrofit2IosConnectInterceptor;
}

@end

void Retrofit2IosConnectInterceptor_initWithRetrofit2IosIosCallFactory_(Retrofit2IosConnectInterceptor *self, Retrofit2IosIosCallFactory *client) {
  NSObject_init(self);
  JreStrongAssign(&self->client_, client);
}

Retrofit2IosConnectInterceptor *new_Retrofit2IosConnectInterceptor_initWithRetrofit2IosIosCallFactory_(Retrofit2IosIosCallFactory *client) {
  J2OBJC_NEW_IMPL(Retrofit2IosConnectInterceptor, initWithRetrofit2IosIosCallFactory_, client)
}

Retrofit2IosConnectInterceptor *create_Retrofit2IosConnectInterceptor_initWithRetrofit2IosIosCallFactory_(Retrofit2IosIosCallFactory *client) {
  J2OBJC_CREATE_IMPL(Retrofit2IosConnectInterceptor, initWithRetrofit2IosIosCallFactory_, client)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2IosConnectInterceptor)
