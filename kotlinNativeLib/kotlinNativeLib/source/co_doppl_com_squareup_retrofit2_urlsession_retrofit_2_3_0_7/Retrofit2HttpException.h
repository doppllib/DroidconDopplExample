//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2HttpException")
#ifdef RESTRICT_Retrofit2HttpException
#define INCLUDE_ALL_Retrofit2HttpException 0
#else
#define INCLUDE_ALL_Retrofit2HttpException 1
#endif
#undef RESTRICT_Retrofit2HttpException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (Retrofit2HttpException_) && (INCLUDE_ALL_Retrofit2HttpException || defined(INCLUDE_Retrofit2HttpException))
#define Retrofit2HttpException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;
@class Retrofit2Response;

@interface Retrofit2HttpException : JavaLangRuntimeException

#pragma mark Public

- (instancetype)initWithRetrofit2Response:(Retrofit2Response * __nonnull)response;

- (jint)code;

- (NSString *)message;

- (Retrofit2Response *)response;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString * __nonnull)arg0
           withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString * __nonnull)arg0
           withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2HttpException)

FOUNDATION_EXPORT void Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2HttpException *self, Retrofit2Response *response);

FOUNDATION_EXPORT Retrofit2HttpException *new_Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2Response *response) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Retrofit2HttpException *create_Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2Response *response);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2HttpException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Retrofit2HttpException")
