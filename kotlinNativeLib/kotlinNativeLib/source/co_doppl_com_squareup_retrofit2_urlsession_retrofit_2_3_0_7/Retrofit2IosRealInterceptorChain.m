//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Retrofit2IosInterceptor.h"
#include "Retrofit2IosRealInterceptorChain.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"
#include "java/net/HttpURLConnection.h"
#include "java/util/List.h"

@interface Retrofit2IosRealInterceptorChain () {
 @public
  id<JavaUtilList> interceptors_;
  JavaNetHttpURLConnection *httpURLConnection_;
  jint index_;
  Okhttp3Request *request_;
  jint calls_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2IosRealInterceptorChain, interceptors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Retrofit2IosRealInterceptorChain, httpURLConnection_, JavaNetHttpURLConnection *)
J2OBJC_FIELD_SETTER(Retrofit2IosRealInterceptorChain, request_, Okhttp3Request *)

@implementation Retrofit2IosRealInterceptorChain

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)interceptors
        withJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)httpURLConnection
                             withInt:(jint)index
                  withOkhttp3Request:(Okhttp3Request *)request {
  Retrofit2IosRealInterceptorChain_initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_(self, interceptors, httpURLConnection, index, request);
  return self;
}

- (JavaNetHttpURLConnection *)connection {
  return httpURLConnection_;
}

- (Okhttp3Request *)request {
  return request_;
}

- (Okhttp3Response *)proceedWithOkhttp3Request:(Okhttp3Request *)request {
  return [self proceedWithOkhttp3Request:request withJavaNetHttpURLConnection:httpURLConnection_];
}

- (Okhttp3Response *)proceedWithOkhttp3Request:(Okhttp3Request *)request
                  withJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)httpURLConnection {
  if (index_ >= [((id<JavaUtilList>) nil_chk(interceptors_)) size]) @throw create_JavaLangAssertionError_init();
  calls_++;
  Retrofit2IosRealInterceptorChain *next = create_Retrofit2IosRealInterceptorChain_initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_(interceptors_, httpURLConnection, index_ + 1, request);
  id<Retrofit2IosInterceptor> interceptor = [interceptors_ getWithInt:index_];
  Okhttp3Response *response = [((id<Retrofit2IosInterceptor>) nil_chk(interceptor)) interceptWithRetrofit2IosInterceptor_Chain:next];
  if (response == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$@$", @"interceptor ", interceptor, @" returned null"));
  }
  return response;
}

- (void)dealloc {
  RELEASE_(interceptors_);
  RELEASE_(httpURLConnection_);
  RELEASE_(request_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaNetHttpURLConnection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 2, 5, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaNetHttpURLConnection:withInt:withOkhttp3Request:);
  methods[1].selector = @selector(connection);
  methods[2].selector = @selector(request);
  methods[3].selector = @selector(proceedWithOkhttp3Request:);
  methods[4].selector = @selector(proceedWithOkhttp3Request:withJavaNetHttpURLConnection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "interceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "httpURLConnection_", "LJavaNetHttpURLConnection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "request_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "calls_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaNetHttpURLConnection;ILOkhttp3Request;", "(Ljava/util/List<Lretrofit2/ios/Interceptor;>;Ljava/net/HttpURLConnection;ILokhttp3/Request;)V", "proceed", "LOkhttp3Request;", "LJavaIoIOException;", "LOkhttp3Request;LJavaNetHttpURLConnection;", "Ljava/util/List<Lretrofit2/ios/Interceptor;>;" };
  static const J2ObjcClassInfo _Retrofit2IosRealInterceptorChain = { "RealInterceptorChain", "retrofit2.ios", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_Retrofit2IosRealInterceptorChain;
}

@end

void Retrofit2IosRealInterceptorChain_initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_(Retrofit2IosRealInterceptorChain *self, id<JavaUtilList> interceptors, JavaNetHttpURLConnection *httpURLConnection, jint index, Okhttp3Request *request) {
  NSObject_init(self);
  JreStrongAssign(&self->interceptors_, interceptors);
  JreStrongAssign(&self->httpURLConnection_, httpURLConnection);
  self->index_ = index;
  JreStrongAssign(&self->request_, request);
}

Retrofit2IosRealInterceptorChain *new_Retrofit2IosRealInterceptorChain_initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_(id<JavaUtilList> interceptors, JavaNetHttpURLConnection *httpURLConnection, jint index, Okhttp3Request *request) {
  J2OBJC_NEW_IMPL(Retrofit2IosRealInterceptorChain, initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_, interceptors, httpURLConnection, index, request)
}

Retrofit2IosRealInterceptorChain *create_Retrofit2IosRealInterceptorChain_initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_(id<JavaUtilList> interceptors, JavaNetHttpURLConnection *httpURLConnection, jint index, Okhttp3Request *request) {
  J2OBJC_CREATE_IMPL(Retrofit2IosRealInterceptorChain, initWithJavaUtilList_withJavaNetHttpURLConnection_withInt_withOkhttp3Request_, interceptors, httpURLConnection, index, request)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2IosRealInterceptorChain)
