//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Retrofit2HttpException.h"
#include "Retrofit2Response.h"
#include "Retrofit2Utils.h"
#include "java/lang/RuntimeException.h"

@interface Retrofit2HttpException () {
 @public
  jint code_;
  NSString *message_;
  Retrofit2Response *response_;
}

+ (NSString *)getMessageWithRetrofit2Response:(Retrofit2Response * __nonnull)response;

@end

J2OBJC_FIELD_SETTER(Retrofit2HttpException, message_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2HttpException, response_, Retrofit2Response *)

__attribute__((unused)) static NSString *Retrofit2HttpException_getMessageWithRetrofit2Response_(Retrofit2Response *response);

@implementation Retrofit2HttpException

+ (NSString *)getMessageWithRetrofit2Response:(Retrofit2Response * __nonnull)response {
  return Retrofit2HttpException_getMessageWithRetrofit2Response_(response);
}

- (instancetype)initWithRetrofit2Response:(Retrofit2Response * __nonnull)response {
  Retrofit2HttpException_initWithRetrofit2Response_(self, response);
  return self;
}

- (jint)code {
  return code_;
}

- (NSString *)message {
  return message_;
}

- (Retrofit2Response *)response {
  return response_;
}

- (void)dealloc {
  RELEASE_(message_);
  RELEASE_(response_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Response;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getMessageWithRetrofit2Response:);
  methods[1].selector = @selector(initWithRetrofit2Response:);
  methods[2].selector = @selector(code);
  methods[3].selector = @selector(message);
  methods[4].selector = @selector(response);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "code_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "response_", "LRetrofit2Response;", .constantValue.asLong = 0, 0x92, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "getMessage", "LRetrofit2Response;", "(Lretrofit2/Response<*>;)Ljava/lang/String;", "(Lretrofit2/Response<*>;)V", "()Lretrofit2/Response<*>;", "Lretrofit2/Response<*>;" };
  static const J2ObjcClassInfo _Retrofit2HttpException = { "HttpException", "retrofit2", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_Retrofit2HttpException;
}

@end

NSString *Retrofit2HttpException_getMessageWithRetrofit2Response_(Retrofit2Response *response) {
  Retrofit2HttpException_initialize();
  Retrofit2Utils_checkNotNullWithId_withNSString_(response, @"response == null");
  return JreStrcat("$IC$", @"HTTP ", [((Retrofit2Response *) nil_chk(response)) code], ' ', [response message]);
}

void Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2HttpException *self, Retrofit2Response *response) {
  JavaLangRuntimeException_initWithNSString_(self, Retrofit2HttpException_getMessageWithRetrofit2Response_(response));
  self->code_ = [((Retrofit2Response *) nil_chk(response)) code];
  JreStrongAssign(&self->message_, [response message]);
  JreStrongAssign(&self->response_, response);
}

Retrofit2HttpException *new_Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2Response *response) {
  J2OBJC_NEW_IMPL(Retrofit2HttpException, initWithRetrofit2Response_, response)
}

Retrofit2HttpException *create_Retrofit2HttpException_initWithRetrofit2Response_(Retrofit2Response *response) {
  J2OBJC_CREATE_IMPL(Retrofit2HttpException, initWithRetrofit2Response_, response)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2HttpException)
