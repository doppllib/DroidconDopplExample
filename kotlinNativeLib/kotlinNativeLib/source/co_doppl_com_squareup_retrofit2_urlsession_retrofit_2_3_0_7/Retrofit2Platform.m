//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Retrofit2CallAdapter.h"
#include "Retrofit2DefaultCallAdapterFactory.h"
#include "Retrofit2ExecutorCallAdapterFactory.h"
#include "Retrofit2Platform.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/concurrent/Executor.h"
#include "javax/annotation/Nullable.h"

@interface Retrofit2Platform ()

+ (Retrofit2Platform *)findPlatform;

@end

inline Retrofit2Platform *Retrofit2Platform_get_PLATFORM();
static Retrofit2Platform *Retrofit2Platform_PLATFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Retrofit2Platform, PLATFORM, Retrofit2Platform *)

__attribute__((unused)) static Retrofit2Platform *Retrofit2Platform_findPlatform();

__attribute__((unused)) static IOSObjectArray *Retrofit2Platform__Annotations$0();

__attribute__((unused)) static IOSObjectArray *Retrofit2Platform__Annotations$1();

__attribute__((unused)) static IOSObjectArray *Retrofit2Platform__Annotations$2();

__attribute__((unused)) static IOSObjectArray *Retrofit2Platform__Annotations$3();

__attribute__((unused)) static IOSObjectArray *Retrofit2Platform_Android__Annotations$0();

@interface Retrofit2Platform_Android_MainThreadExecutor () {
 @public
  AndroidOsHandler *handler_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2Platform_Android_MainThreadExecutor, handler_, AndroidOsHandler *)

J2OBJC_INITIALIZED_DEFN(Retrofit2Platform)

@implementation Retrofit2Platform

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Platform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (Retrofit2Platform *)get {
  return Retrofit2Platform_get();
}

+ (Retrofit2Platform *)findPlatform {
  return Retrofit2Platform_findPlatform();
}

- (id<JavaUtilConcurrentExecutor> __nullable)defaultCallbackExecutor {
  return nil;
}

- (Retrofit2CallAdapter_Factory *)defaultCallAdapterFactoryWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nullable)callbackExecutor {
  if (callbackExecutor != nil) {
    return create_Retrofit2ExecutorCallAdapterFactory_initWithJavaUtilConcurrentExecutor_(callbackExecutor);
  }
  return JreLoadStatic(Retrofit2DefaultCallAdapterFactory, INSTANCE);
}

- (jboolean)isDefaultMethodWithJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method {
  return false;
}

- (id __nullable)invokeDefaultMethodWithJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method
                                                 withIOSClass:(IOSClass * __nonnull)declaringClass
                                                       withId:(id __nonnull)object
                                            withNSObjectArray:(IOSObjectArray * __nullable)args {
  @throw create_JavaLangUnsupportedOperationException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Platform;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Platform;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x0, -1, -1, -1, -1, 0, -1 },
    { NULL, "LRetrofit2CallAdapter_Factory;", 0x0, 1, 2, -1, -1, -1, 3 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x80, 6, 7, 8, 9, 10, 11 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(findPlatform);
  methods[3].selector = @selector(defaultCallbackExecutor);
  methods[4].selector = @selector(defaultCallAdapterFactoryWithJavaUtilConcurrentExecutor:);
  methods[5].selector = @selector(isDefaultMethodWithJavaLangReflectMethod:);
  methods[6].selector = @selector(invokeDefaultMethodWithJavaLangReflectMethod:withIOSClass:withId:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PLATFORM", "LRetrofit2Platform;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&Retrofit2Platform__Annotations$0, "defaultCallAdapterFactory", "LJavaUtilConcurrentExecutor;", (void *)&Retrofit2Platform__Annotations$1, "isDefaultMethod", "LJavaLangReflectMethod;", "invokeDefaultMethod", "LJavaLangReflectMethod;LIOSClass;LNSObject;[LNSObject;", "LJavaLangThrowable;", "(Ljava/lang/reflect/Method;Ljava/lang/Class<*>;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", (void *)&Retrofit2Platform__Annotations$2, (void *)&Retrofit2Platform__Annotations$3, &Retrofit2Platform_PLATFORM, "LRetrofit2Platform_Android;" };
  static const J2ObjcClassInfo _Retrofit2Platform = { "Platform", "retrofit2", ptrTable, methods, fields, 7, 0x0, 7, 1, -1, 13, -1, -1, -1 };
  return &_Retrofit2Platform;
}

+ (void)initialize {
  if (self == [Retrofit2Platform class]) {
    JreStrongAssign(&Retrofit2Platform_PLATFORM, Retrofit2Platform_findPlatform());
    J2OBJC_SET_INITIALIZED(Retrofit2Platform)
  }
}

@end

void Retrofit2Platform_init(Retrofit2Platform *self) {
  NSObject_init(self);
}

Retrofit2Platform *new_Retrofit2Platform_init() {
  J2OBJC_NEW_IMPL(Retrofit2Platform, init)
}

Retrofit2Platform *create_Retrofit2Platform_init() {
  J2OBJC_CREATE_IMPL(Retrofit2Platform, init)
}

Retrofit2Platform *Retrofit2Platform_get() {
  Retrofit2Platform_initialize();
  return Retrofit2Platform_PLATFORM;
}

Retrofit2Platform *Retrofit2Platform_findPlatform() {
  Retrofit2Platform_initialize();
  return create_Retrofit2Platform_Android_init();
}

IOSObjectArray *Retrofit2Platform__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2Platform__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *Retrofit2Platform__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *Retrofit2Platform__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Platform)

@implementation Retrofit2Platform_Android

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Platform_Android_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentExecutor>)defaultCallbackExecutor {
  return create_Retrofit2Platform_Android_MainThreadExecutor_init();
}

- (Retrofit2CallAdapter_Factory *)defaultCallAdapterFactoryWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nullable)callbackExecutor {
  if (callbackExecutor == nil) @throw create_JavaLangAssertionError_init();
  return create_Retrofit2ExecutorCallAdapterFactory_initWithJavaUtilConcurrentExecutor_(callbackExecutor);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2CallAdapter_Factory;", 0x0, 0, 1, -1, -1, -1, 2 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(defaultCallbackExecutor);
  methods[2].selector = @selector(defaultCallAdapterFactoryWithJavaUtilConcurrentExecutor:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "defaultCallAdapterFactory", "LJavaUtilConcurrentExecutor;", (void *)&Retrofit2Platform_Android__Annotations$0, "LRetrofit2Platform;", "LRetrofit2Platform_Android_MainThreadExecutor;" };
  static const J2ObjcClassInfo _Retrofit2Platform_Android = { "Android", "retrofit2", ptrTable, methods, NULL, 7, 0x8, 3, 0, 3, 4, -1, -1, -1 };
  return &_Retrofit2Platform_Android;
}

@end

void Retrofit2Platform_Android_init(Retrofit2Platform_Android *self) {
  Retrofit2Platform_init(self);
}

Retrofit2Platform_Android *new_Retrofit2Platform_Android_init() {
  J2OBJC_NEW_IMPL(Retrofit2Platform_Android, init)
}

Retrofit2Platform_Android *create_Retrofit2Platform_Android_init() {
  J2OBJC_CREATE_IMPL(Retrofit2Platform_Android, init)
}

IOSObjectArray *Retrofit2Platform_Android__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Platform_Android)

@implementation Retrofit2Platform_Android_MainThreadExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Platform_Android_MainThreadExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)r {
  [((AndroidOsHandler *) nil_chk(handler_)) postWithJavaLangRunnable:r];
}

- (void)dealloc {
  RELEASE_(handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "handler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LRetrofit2Platform_Android;" };
  static const J2ObjcClassInfo _Retrofit2Platform_Android_MainThreadExecutor = { "MainThreadExecutor", "retrofit2", ptrTable, methods, fields, 7, 0x8, 2, 1, 2, -1, -1, -1, -1 };
  return &_Retrofit2Platform_Android_MainThreadExecutor;
}

@end

void Retrofit2Platform_Android_MainThreadExecutor_init(Retrofit2Platform_Android_MainThreadExecutor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->handler_, new_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper()));
}

Retrofit2Platform_Android_MainThreadExecutor *new_Retrofit2Platform_Android_MainThreadExecutor_init() {
  J2OBJC_NEW_IMPL(Retrofit2Platform_Android_MainThreadExecutor, init)
}

Retrofit2Platform_Android_MainThreadExecutor *create_Retrofit2Platform_Android_MainThreadExecutor_init() {
  J2OBJC_CREATE_IMPL(Retrofit2Platform_Android_MainThreadExecutor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Platform_Android_MainThreadExecutor)
