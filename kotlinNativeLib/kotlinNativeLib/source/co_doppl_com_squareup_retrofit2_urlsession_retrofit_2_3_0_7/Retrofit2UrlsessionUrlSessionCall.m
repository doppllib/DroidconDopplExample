//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsLooper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Callback.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalHttpRealResponseBody.h"
#include "Okhttp3InternalVersion.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3RequestBody.h"
#include "Okhttp3Response.h"
#include "Retrofit2UrlsessionUrlSessionCall.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"

#include "java/lang/Double.h"
#include "com/google/j2objc/net/NSErrorException.h"
#include "java/lang/Double.h"
#include "java/net/ConnectException.h"
#include "java/net/MalformedURLException.h"
#include "java/net/UnknownHostException.h"
#include "java/net/SocketTimeoutException.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface Retrofit2UrlsessionUrlSessionCall () {
 @public
  Okhttp3Request *originalRequest_;
  id<JavaUtilList> headers_;
  volatile_jboolean executed_;
  JavaUtilConcurrentAtomicAtomicReference *response_;
  JavaUtilConcurrentAtomicAtomicReference *responseError_;
  JavaUtilConcurrentCountDownLatch *latch_;
  id<Okhttp3Callback> responseCallback_;
  id urlSessionReference_;
  id urlSessionTask_;
  NSString *makeRequestUrl_;
  NSString *makeRequestMethod_;
  IOSByteArray *makeRequestBody_;
}

- (void)runRequestCall;

- (Okhttp3Request *)prepRequestHeadersWithOkhttp3Request:(Okhttp3Request *)userRequest;

- (void)updateUrlSessionTaskWithId:(id)task;

- (void)makeRequest;

+ (JavaIoIOException *)secureConnectionExceptionWithNSString:(NSString *)description_;

- (jboolean)isMain;

- (void)addHeaderWithNSString:(NSString *)k
                 withNSString:(NSString *)v;

- (void)taskCancelWithId:(id)task;

- (NSString *)findStandardResponseMessageForCodeWithInt:(jint)code;

@end

J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, originalRequest_, Okhttp3Request *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, headers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, response_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, responseError_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, responseCallback_, id<Okhttp3Callback>)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, urlSessionReference_, id)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, urlSessionTask_, id)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, makeRequestUrl_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, makeRequestMethod_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall, makeRequestBody_, IOSByteArray *)

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_runRequestCall(Retrofit2UrlsessionUrlSessionCall *self);

__attribute__((unused)) static Okhttp3Request *Retrofit2UrlsessionUrlSessionCall_prepRequestHeadersWithOkhttp3Request_(Retrofit2UrlsessionUrlSessionCall *self, Okhttp3Request *userRequest);

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_updateUrlSessionTaskWithId_(Retrofit2UrlsessionUrlSessionCall *self, id task);

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_makeRequest(Retrofit2UrlsessionUrlSessionCall *self);

__attribute__((unused)) static JavaIoIOException *Retrofit2UrlsessionUrlSessionCall_secureConnectionExceptionWithNSString_(NSString *description_);

__attribute__((unused)) static jboolean Retrofit2UrlsessionUrlSessionCall_isMain(Retrofit2UrlsessionUrlSessionCall *self);

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_addHeaderWithNSString_withNSString_(Retrofit2UrlsessionUrlSessionCall *self, NSString *k, NSString *v);

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_taskCancelWithId_(Retrofit2UrlsessionUrlSessionCall *self, id task);

__attribute__((unused)) static NSString *Retrofit2UrlsessionUrlSessionCall_findStandardResponseMessageForCodeWithInt_(Retrofit2UrlsessionUrlSessionCall *self, jint code);

@interface Retrofit2UrlsessionUrlSessionCall_HeaderEntry : NSObject < JavaUtilMap_Entry > {
 @public
  NSString *key_;
  NSString *value_;
}

- (instancetype)initWithNSString:(NSString *)k
                    withNSString:(NSString *)v;

- (NSString *)getKey;

- (NSString *)getValue;

- (NSString *)setValueWithId:(NSString *)object;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2UrlsessionUrlSessionCall_HeaderEntry)

J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall_HeaderEntry, key_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2UrlsessionUrlSessionCall_HeaderEntry, value_, NSString *)

__attribute__((unused)) static void Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(Retrofit2UrlsessionUrlSessionCall_HeaderEntry *self, NSString *k, NSString *v);

__attribute__((unused)) static Retrofit2UrlsessionUrlSessionCall_HeaderEntry *new_Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(NSString *k, NSString *v) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2UrlsessionUrlSessionCall_HeaderEntry *create_Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(NSString *k, NSString *v);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2UrlsessionUrlSessionCall_HeaderEntry)

@implementation Retrofit2UrlsessionUrlSessionCall

- (instancetype)initWithId:(id)urlSessionReference
        withOkhttp3Request:(Okhttp3Request *)originalRequest {
  Retrofit2UrlsessionUrlSessionCall_initWithId_withOkhttp3Request_(self, urlSessionReference, originalRequest);
  return self;
}

- (Okhttp3Request *)request {
  return originalRequest_;
}

- (Okhttp3Response *)execute {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&executed_)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already Executed");
    }
    JreAssignVolatileBoolean(&executed_, true);
  }
  Retrofit2UrlsessionUrlSessionCall_runRequestCall(self);
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"What?", e);
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(responseError_)) get] != nil) {
    @throw nil_chk([responseError_ get]);
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(response_)) get] == nil) {
    @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
  }
  return [response_ get];
}

- (void)runRequestCall {
  Retrofit2UrlsessionUrlSessionCall_runRequestCall(self);
}

- (Okhttp3Request *)prepRequestHeadersWithOkhttp3Request:(Okhttp3Request *)userRequest {
  return Retrofit2UrlsessionUrlSessionCall_prepRequestHeadersWithOkhttp3Request_(self, userRequest);
}

- (void)updateUrlSessionTaskWithId:(id)task {
  Retrofit2UrlsessionUrlSessionCall_updateUrlSessionTaskWithId_(self, task);
}

- (void)makeRequest {
  Retrofit2UrlsessionUrlSessionCall_makeRequest(self);
}

+ (JavaIoIOException *)secureConnectionExceptionWithNSString:(NSString *)description_ {
  return Retrofit2UrlsessionUrlSessionCall_secureConnectionExceptionWithNSString_(description_);
}

- (void)sendErrorWithJavaIoIOException:(JavaIoIOException *)ex {
  JreAssert(!Retrofit2UrlsessionUrlSessionCall_isMain(self), @"retrofit2/urlsession/UrlSessionCall.java:288 condition failed: assert !isMain();");
  if (responseCallback_ != nil) {
    [responseCallback_ onFailureWithOkhttp3Call:self withJavaIoIOException:ex];
  }
  else {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(responseError_)) setWithId:ex];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (jboolean)isMain {
  return Retrofit2UrlsessionUrlSessionCall_isMain(self);
}

- (void)constructResponseWithInt:(jint)responseCode
                   withByteArray:(IOSByteArray *)body {
  JreAssert(!Retrofit2UrlsessionUrlSessionCall_isMain(self), @"retrofit2/urlsession/UrlSessionCall.java:308 condition failed: assert !isMain();");
  Okhttp3Protocol *protocol = JreLoadEnum(Okhttp3Protocol, HTTP_1_1);
  Okhttp3Headers_Builder *builder = create_Okhttp3Headers_Builder_init();
  for (Retrofit2UrlsessionUrlSessionCall_HeaderEntry * __strong header in nil_chk(headers_)) {
    [builder addWithNSString:[((Retrofit2UrlsessionUrlSessionCall_HeaderEntry *) nil_chk(header)) getKey] withNSString:[header getValue]];
  }
  Okhttp3Headers *headers = [builder build];
  Okhttp3Response_Builder *responseBuilder = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() requestWithOkhttp3Request:originalRequest_])) protocolWithOkhttp3Protocol:protocol])) codeWithInt:responseCode])) messageWithNSString:Retrofit2UrlsessionUrlSessionCall_findStandardResponseMessageForCodeWithInt_(self, responseCode)])) headersWithOkhttp3Headers:headers];
  OkioBuffer *buffer = create_OkioBuffer_init();
  [buffer writeWithByteArray:body];
  Okhttp3InternalHttpRealResponseBody *responseBody = create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_(headers, OkioOkio_bufferWithOkioSource_(buffer));
  [((Okhttp3Response_Builder *) nil_chk(responseBuilder)) bodyWithOkhttp3ResponseBody:responseBody];
  if (responseCallback_ != nil) {
    [responseCallback_ onResponseWithOkhttp3Call:self withOkhttp3Response:[responseBuilder build]];
  }
  else {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(response_)) setWithId:[responseBuilder build]];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (void)addHeaderWithNSString:(NSString *)k
                 withNSString:(NSString *)v {
  Retrofit2UrlsessionUrlSessionCall_addHeaderWithNSString_withNSString_(self, k, v);
}

- (void)enqueueWithOkhttp3Callback:(id<Okhttp3Callback>)responseCallback {
  JreStrongAssign(&self->responseCallback_, responseCallback);
  @try {
    Retrofit2UrlsessionUrlSessionCall_runRequestCall(self);
  }
  @catch (JavaIoIOException *e) {
    [((id<Okhttp3Callback>) nil_chk(responseCallback)) onFailureWithOkhttp3Call:self withJavaIoIOException:e];
  }
  @catch (JavaLangThrowable *e) {
    [((id<Okhttp3Callback>) nil_chk(responseCallback)) onFailureWithOkhttp3Call:self withJavaIoIOException:create_JavaIoIOException_initWithJavaLangThrowable_(e)];
  }
}

- (void)cancel {
  @synchronized(self) {
    if (urlSessionTask_ != nil) {
      Retrofit2UrlsessionUrlSessionCall_taskCancelWithId_(self, urlSessionTask_);
    }
  }
}

- (void)taskCancelWithId:(id)task {
  Retrofit2UrlsessionUrlSessionCall_taskCancelWithId_(self, task);
}

- (jboolean)isExecuted {
  return JreLoadVolatileBoolean(&executed_);
}

- (jboolean)isCanceled {
  return false;
}

- (NSString *)findStandardResponseMessageForCodeWithInt:(jint)code {
  return Retrofit2UrlsessionUrlSessionCall_findStandardResponseMessageForCodeWithInt_(self, code);
}

- (void)dealloc {
  RELEASE_(originalRequest_);
  RELEASE_(headers_);
  RELEASE_(response_);
  RELEASE_(responseError_);
  RELEASE_(latch_);
  RELEASE_(responseCallback_);
  RELEASE_(urlSessionReference_);
  RELEASE_(urlSessionTask_);
  RELEASE_(makeRequestUrl_);
  RELEASE_(makeRequestMethod_);
  RELEASE_(makeRequestBody_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x22, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withOkhttp3Request:);
  methods[1].selector = @selector(request);
  methods[2].selector = @selector(execute);
  methods[3].selector = @selector(runRequestCall);
  methods[4].selector = @selector(prepRequestHeadersWithOkhttp3Request:);
  methods[5].selector = @selector(updateUrlSessionTaskWithId:);
  methods[6].selector = @selector(makeRequest);
  methods[7].selector = @selector(secureConnectionExceptionWithNSString:);
  methods[8].selector = @selector(sendErrorWithJavaIoIOException:);
  methods[9].selector = @selector(isMain);
  methods[10].selector = @selector(constructResponseWithInt:withByteArray:);
  methods[11].selector = @selector(addHeaderWithNSString:withNSString:);
  methods[12].selector = @selector(enqueueWithOkhttp3Callback:);
  methods[13].selector = @selector(cancel);
  methods[14].selector = @selector(taskCancelWithId:);
  methods[15].selector = @selector(isExecuted);
  methods[16].selector = @selector(isCanceled);
  methods[17].selector = @selector(findStandardResponseMessageForCodeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "originalRequest_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "executed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "response_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "responseError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "responseCallback_", "LOkhttp3Callback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "urlSessionReference_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "urlSessionTask_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "makeRequestUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "makeRequestMethod_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "makeRequestBody_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LOkhttp3Request;", "LJavaIoIOException;", "prepRequestHeaders", "LOkhttp3Request;", "updateUrlSessionTask", "LNSObject;", "secureConnectionException", "LNSString;", "sendError", "constructResponse", "I[B", "addHeader", "LNSString;LNSString;", "enqueue", "LOkhttp3Callback;", "taskCancel", "findStandardResponseMessageForCode", "I", "Ljava/util/List<Lretrofit2/urlsession/UrlSessionCall$HeaderEntry;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lokhttp3/Response;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/io/IOException;>;", "LRetrofit2UrlsessionUrlSessionCall_HeaderEntry;" };
  static const J2ObjcClassInfo _Retrofit2UrlsessionUrlSessionCall = { "UrlSessionCall", "retrofit2.urlsession", ptrTable, methods, fields, 7, 0x1, 18, 12, -1, 21, -1, -1, -1 };
  return &_Retrofit2UrlsessionUrlSessionCall;
}

@end

void Retrofit2UrlsessionUrlSessionCall_initWithId_withOkhttp3Request_(Retrofit2UrlsessionUrlSessionCall *self, id urlSessionReference, Okhttp3Request *originalRequest) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->headers_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->response_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->responseError_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreStrongAssign(&self->urlSessionReference_, urlSessionReference);
  JreStrongAssign(&self->originalRequest_, originalRequest);
}

Retrofit2UrlsessionUrlSessionCall *new_Retrofit2UrlsessionUrlSessionCall_initWithId_withOkhttp3Request_(id urlSessionReference, Okhttp3Request *originalRequest) {
  J2OBJC_NEW_IMPL(Retrofit2UrlsessionUrlSessionCall, initWithId_withOkhttp3Request_, urlSessionReference, originalRequest)
}

Retrofit2UrlsessionUrlSessionCall *create_Retrofit2UrlsessionUrlSessionCall_initWithId_withOkhttp3Request_(id urlSessionReference, Okhttp3Request *originalRequest) {
  J2OBJC_CREATE_IMPL(Retrofit2UrlsessionUrlSessionCall, initWithId_withOkhttp3Request_, urlSessionReference, originalRequest)
}

void Retrofit2UrlsessionUrlSessionCall_runRequestCall(Retrofit2UrlsessionUrlSessionCall *self) {
  Okhttp3Request *request = Retrofit2UrlsessionUrlSessionCall_prepRequestHeadersWithOkhttp3Request_(self, self->originalRequest_);
  Okhttp3Headers *headers = [((Okhttp3Request *) nil_chk(request)) headers];
  for (NSString * __strong key in nil_chk([((Okhttp3Headers *) nil_chk(headers)) names])) {
    Retrofit2UrlsessionUrlSessionCall_addHeaderWithNSString_withNSString_(self, key, [headers getWithNSString:key]);
  }
  JreStrongAssign(&self->makeRequestBody_, nil);
  if ([request body] != nil) {
    OkioBuffer *buffer = create_OkioBuffer_init();
    [((Okhttp3RequestBody *) nil_chk([request body])) writeToWithOkioBufferedSink:buffer];
    [buffer flush];
    JreStrongAssign(&self->makeRequestBody_, [buffer readByteArray]);
  }
  JreStrongAssign(&self->makeRequestUrl_, [((JavaNetURL *) nil_chk([((Okhttp3HttpUrl *) nil_chk([request url])) url])) toExternalForm]);
  JreStrongAssign(&self->makeRequestMethod_, [request method]);
  Retrofit2UrlsessionUrlSessionCall_makeRequest(self);
}

Okhttp3Request *Retrofit2UrlsessionUrlSessionCall_prepRequestHeadersWithOkhttp3Request_(Retrofit2UrlsessionUrlSessionCall *self, Okhttp3Request *userRequest) {
  Okhttp3Request_Builder *requestBuilder = [((Okhttp3Request *) nil_chk(userRequest)) newBuilder];
  Okhttp3RequestBody *body = [userRequest body];
  if (body != nil) {
    Okhttp3MediaType *contentType = [body contentType];
    if (contentType != nil) {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Content-Type" withNSString:[contentType description]];
    }
    jlong contentLength = [body contentLength];
    if (contentLength != - 1) {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Content-Length" withNSString:JavaLangLong_toStringWithLong_(contentLength)];
      [requestBuilder removeHeaderWithNSString:@"Transfer-Encoding"];
    }
    else {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Transfer-Encoding" withNSString:@"chunked"];
      [requestBuilder removeHeaderWithNSString:@"Content-Length"];
    }
  }
  if ([userRequest headerWithNSString:@"User-Agent"] == nil) {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"User-Agent" withNSString:JreStrcat("$$", @"doppl-", Okhttp3InternalVersion_userAgent())];
  }
  return [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) build];
}

void Retrofit2UrlsessionUrlSessionCall_updateUrlSessionTaskWithId_(Retrofit2UrlsessionUrlSessionCall *self, id task) {
  @synchronized(self) {
    JreStrongAssign(&self->urlSessionTask_, task);
  }
}

void Retrofit2UrlsessionUrlSessionCall_makeRequest(Retrofit2UrlsessionUrlSessionCall *self) {
  NSMutableURLRequest *request =
  [NSMutableURLRequest requestWithURL:[NSURL URLWithString:self->makeRequestUrl_]];
  request.cachePolicy = NSURLRequestUseProtocolCachePolicy;
  int readTimeout = 10000;
  request.timeoutInterval = readTimeout > 0 ? (readTimeout / 1000.0) : JavaLangDouble_MAX_VALUE;
  int n = [self->headers_ size];
  for (int i = 0; i < n; i++) {
    Retrofit2UrlsessionUrlSessionCall_HeaderEntry *entry = [self->headers_ getWithInt:i];
    if (entry->key_) {
      [request setValue:[entry getValue] forHTTPHeaderField:entry->key_];
    }
  }
  
  if (self->makeRequestBody_ != nil) {
    request.HTTPBody = [self->makeRequestBody_ toNSData];
  }
  
  request.HTTPMethod = self->makeRequestMethod_;
  
  NSURLSessionTask *task = [self->urlSessionReference_ dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable urlResponse,
  NSError * _Nullable error) {
    
    [self updateUrlSessionTaskWithId:nil];
    
    if (error) {
      JavaIoIOException *responseException = nil;
      NSString *url = @"";//self->makeRequestUrl_;  // Use original URL in any error text.
      if ([[error domain] isEqualToString:@"NSURLErrorDomain"]) {
        switch ([error code]) {
          case NSURLErrorBadURL:
          responseException = create_JavaNetMalformedURLException_initWithNSString_(url);
          break;
          case NSURLErrorCannotConnectToHost:
          responseException =
          create_JavaNetConnectException_initWithNSString_([error description]);
          break;
          case NSURLErrorSecureConnectionFailed:
          responseException = [self secureConnectionExceptionWithNSString:[error description]];
          break;
          case NSURLErrorCannotFindHost:
          responseException = create_JavaNetUnknownHostException_initWithNSString_(url);
          break;
          case NSURLErrorTimedOut:
          responseException = create_JavaNetSocketTimeoutException_initWithNSString_(url);
          break;
        }
      }
      if (!responseException) {
        responseException = create_JavaIoIOException_initWithNSString_([error description]);
      }
      ComGoogleJ2objcNetNSErrorException *cause =
      create_ComGoogleJ2objcNetNSErrorException_initWithId_(error);
      [responseException initWithJavaLangThrowable:cause];
      [self sendErrorWithJavaIoIOException:responseException];
    }
    else {
      
      if (urlResponse && ![urlResponse isKindOfClass:[NSHTTPURLResponse class]]) {
        @throw AUTORELEASE(([[JavaLangAssertionError alloc]
        initWithId:[NSString stringWithFormat:@"Unknown class %@",
        NSStringFromClass([urlResponse class])]]));
      }
      NSHTTPURLResponse *response = (NSHTTPURLResponse *) urlResponse;
      int responseCode = (int) response.statusCode;
      
      // Clear request headers to make room for the response headers.
      [self->headers_ clear];
      
      // Copy remaining response headers.
      [response.allHeaderFields enumerateKeysAndObjectsUsingBlock:
      ^(id key, id value, BOOL *stop) {
        [self addHeaderWithNSString:key withNSString:value];
      }];
      
      [self constructResponseWithInt:responseCode withByteArray:[IOSByteArray arrayWithNSData:data]];
    }
    
  }];
  
  [self updateUrlSessionTaskWithId:task];
  
  [task resume];
}

JavaIoIOException *Retrofit2UrlsessionUrlSessionCall_secureConnectionExceptionWithNSString_(NSString *description_) {
  Retrofit2UrlsessionUrlSessionCall_initialize();
  @try {
    IOSClass *sslExceptionClass = IOSClass_forName_(@"javax.net.ssl.SSLException");
    JavaLangReflectConstructor *constructor = [((IOSClass *) nil_chk(sslExceptionClass)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    return (JavaIoIOException *) cast_chk([((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ description_ } count:1 type:NSObject_class_()]], [JavaIoIOException class]);
  }
  @catch (JavaLangClassNotFoundException *e) {
    return create_JavaIoIOException_initWithNSString_(description_);
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangAssertionError_initWithNSString_withJavaLangThrowable_(@"unexpected exception", e);
  }
}

jboolean Retrofit2UrlsessionUrlSessionCall_isMain(Retrofit2UrlsessionUrlSessionCall *self) {
  return AndroidOsLooper_getMainLooper() == AndroidOsLooper_myLooper();
}

void Retrofit2UrlsessionUrlSessionCall_addHeaderWithNSString_withNSString_(Retrofit2UrlsessionUrlSessionCall *self, NSString *k, NSString *v) {
  [((id<JavaUtilList>) nil_chk(self->headers_)) addWithId:create_Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(k, v)];
}

void Retrofit2UrlsessionUrlSessionCall_taskCancelWithId_(Retrofit2UrlsessionUrlSessionCall *self, id task) {
  [((NSURLSessionDataTask *)task) cancel];
  [self updateUrlSessionTaskWithId:nil];
}

NSString *Retrofit2UrlsessionUrlSessionCall_findStandardResponseMessageForCodeWithInt_(Retrofit2UrlsessionUrlSessionCall *self, jint code) {
  return [NSHTTPURLResponse localizedStringForStatusCode:code];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2UrlsessionUrlSessionCall)

@implementation Retrofit2UrlsessionUrlSessionCall_HeaderEntry

- (instancetype)initWithNSString:(NSString *)k
                    withNSString:(NSString *)v {
  Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(self, k, v);
  return self;
}

- (NSString *)getKey {
  return key_;
}

- (NSString *)getValue {
  return value_;
}

- (NSString *)setValueWithId:(NSString *)object {
  @throw create_JavaLangAssertionError_initWithId_(@"mutable method called on immutable class");
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(setValueWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "setValue", "LNSString;", "LRetrofit2UrlsessionUrlSessionCall;", "Ljava/lang/Object;Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _Retrofit2UrlsessionUrlSessionCall_HeaderEntry = { "HeaderEntry", "retrofit2.urlsession", ptrTable, methods, fields, 7, 0xa, 4, 2, 3, -1, -1, 4, -1 };
  return &_Retrofit2UrlsessionUrlSessionCall_HeaderEntry;
}

@end

void Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(Retrofit2UrlsessionUrlSessionCall_HeaderEntry *self, NSString *k, NSString *v) {
  NSObject_init(self);
  JreStrongAssign(&self->key_, k);
  JreStrongAssign(&self->value_, v);
}

Retrofit2UrlsessionUrlSessionCall_HeaderEntry *new_Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(NSString *k, NSString *v) {
  J2OBJC_NEW_IMPL(Retrofit2UrlsessionUrlSessionCall_HeaderEntry, initWithNSString_withNSString_, k, v)
}

Retrofit2UrlsessionUrlSessionCall_HeaderEntry *create_Retrofit2UrlsessionUrlSessionCall_HeaderEntry_initWithNSString_withNSString_(NSString *k, NSString *v) {
  J2OBJC_CREATE_IMPL(Retrofit2UrlsessionUrlSessionCall_HeaderEntry, initWithNSString_withNSString_, k, v)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2UrlsessionUrlSessionCall_HeaderEntry)
