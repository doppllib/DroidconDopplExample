//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2IosIosDispatcher")
#ifdef RESTRICT_Retrofit2IosIosDispatcher
#define INCLUDE_ALL_Retrofit2IosIosDispatcher 0
#else
#define INCLUDE_ALL_Retrofit2IosIosDispatcher 1
#endif
#undef RESTRICT_Retrofit2IosIosDispatcher

#if !defined (Retrofit2IosIosDispatcher_) && (INCLUDE_ALL_Retrofit2IosIosDispatcher || defined(INCLUDE_Retrofit2IosIosDispatcher))
#define Retrofit2IosIosDispatcher_

@class Retrofit2IosIosCall;
@class Retrofit2IosIosCall_AsyncCall;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilList;

@interface Retrofit2IosIosDispatcher : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executorService;

- (void)cancelAll;

- (id<JavaUtilConcurrentExecutorService>)executorService;

- (jint)getMaxRequests;

- (jint)getMaxRequestsPerHost;

- (id<JavaUtilList>)queuedCalls;

- (jint)queuedCallsCount;

- (id<JavaUtilList>)runningCalls;

- (jint)runningCallsCount;

- (void)setIdleCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)idleCallback;

- (void)setMaxRequestsWithInt:(jint)maxRequests;

- (void)setMaxRequestsPerHostWithInt:(jint)maxRequestsPerHost;

#pragma mark Package-Private

- (void)enqueueWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call;

- (void)executedWithRetrofit2IosIosCall:(Retrofit2IosIosCall *)call;

- (void)finishedWithRetrofit2IosIosCall_AsyncCall:(Retrofit2IosIosCall_AsyncCall *)call;

- (void)finishedWithRetrofit2IosIosCall:(Retrofit2IosIosCall *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2IosIosDispatcher)

FOUNDATION_EXPORT void Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(Retrofit2IosIosDispatcher *self, id<JavaUtilConcurrentExecutorService> executorService);

FOUNDATION_EXPORT Retrofit2IosIosDispatcher *new_Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Retrofit2IosIosDispatcher *create_Retrofit2IosIosDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService);

FOUNDATION_EXPORT void Retrofit2IosIosDispatcher_init(Retrofit2IosIosDispatcher *self);

FOUNDATION_EXPORT Retrofit2IosIosDispatcher *new_Retrofit2IosIosDispatcher_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Retrofit2IosIosDispatcher *create_Retrofit2IosIosDispatcher_init();

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2IosIosDispatcher)

#endif

#pragma pop_macro("INCLUDE_ALL_Retrofit2IosIosDispatcher")
