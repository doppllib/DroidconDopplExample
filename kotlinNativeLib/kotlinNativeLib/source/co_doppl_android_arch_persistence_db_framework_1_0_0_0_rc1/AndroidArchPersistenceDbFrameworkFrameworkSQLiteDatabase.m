//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteProgram.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement.h"
#include "AndroidArchPersistenceDbSimpleSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidContentContentValues.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseSqliteSQLiteCursor.h"
#include "AndroidDatabaseSqliteSQLiteCursorDriver.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteQuery.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "AndroidDatabaseSqliteSQLiteTransactionListener.h"
#include "AndroidOsCancellationSignal.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDelegate_;
}

+ (jboolean)isEmptyWithNSString:(NSString *)input;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, mDelegate_, AndroidDatabaseSqliteSQLiteDatabase *)

inline IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_get_CONFLICT_VALUES();
static IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, EMPTY_STRING_ARRAY, IOSObjectArray *)

__attribute__((unused)) static jboolean AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_isEmptyWithNSString_(NSString *input);

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 : NSObject < AndroidDatabaseSqliteSQLiteDatabase_CursorFactory > {
 @public
  id<AndroidArchPersistenceDbSupportSQLiteQuery> val$supportQuery_;
}

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0;

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1)

__attribute__((unused)) static void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 : NSObject < AndroidDatabaseSqliteSQLiteDatabase_CursorFactory > {
 @public
  id<AndroidArchPersistenceDbSupportSQLiteQuery> val$supportQuery_;
}

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0;

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2)

__attribute__((unused)) static void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0);

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)delegate {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, delegate);
  return self;
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)compileStatementWithNSString:(NSString *)sql {
  return create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) compileStatementWithNSString:sql]);
}

- (void)beginTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransaction];
}

- (void)beginTransactionNonExclusive {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionNonExclusive];
}

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener];
}

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener];
}

- (void)endTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) endTransaction];
}

- (void)setTransactionSuccessful {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setTransactionSuccessful];
}

- (jboolean)inTransaction {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) inTransaction];
}

- (jboolean)isDbLockedByCurrentThread {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isDbLockedByCurrentThread];
}

- (jboolean)yieldIfContendedSafely {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) yieldIfContendedSafely];
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) yieldIfContendedSafelyWithLong:sleepAfterYieldDelay];
}

- (jint)getVersion {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getVersion];
}

- (void)setVersionWithInt:(jint)version_ {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setVersionWithInt:version_];
}

- (jlong)getMaximumSize {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getMaximumSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setMaximumSizeWithLong:numBytes];
}

- (jlong)getPageSize {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getPageSize];
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setPageSizeWithLong:numBytes];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)query {
  return [self queryWithAndroidArchPersistenceDbSupportSQLiteQuery:create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(query)];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)query
                             withNSObjectArray:(IOSObjectArray *)bindArgs {
  return [self queryWithAndroidArchPersistenceDbSupportSQLiteQuery:create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(query, bindArgs)];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)supportQuery {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(supportQuery) withNSString:[((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(supportQuery)) getSql] withNSStringArray:AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY withNSString:nil];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)supportQuery
                                                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(supportQuery) withNSString:[((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(supportQuery)) getSql] withNSStringArray:AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY withNSString:nil withAndroidOsCancellationSignal:cancellationSignal];
}

- (jlong)insertWithNSString:(NSString *)table
                    withInt:(jint)conflictAlgorithm
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) insertWithOnConflictWithNSString:table withNSString:nil withAndroidContentContentValues:values withInt:conflictAlgorithm];
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSObjectArray:(IOSObjectArray *)whereArgs {
  __unused NSString *query = JreStrcat("$$$", @"DELETE FROM ", table, (AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_isEmptyWithNSString_(whereClause) ? @"" : JreStrcat("$$", @" WHERE ", whereClause)));
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> statement = [self compileStatementWithNSString:query];
  AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(statement, whereArgs);
  return [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(statement)) executeUpdateDelete];
}

- (jint)updateWithNSString:(NSString *)table
                   withInt:(jint)conflictAlgorithm
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSObjectArray:(IOSObjectArray *)whereArgs {
  if (values == nil || [values size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  __unused JavaLangStringBuilder *sql = create_JavaLangStringBuilder_initWithInt_(120);
  [sql appendWithNSString:@"UPDATE "];
  [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
  [sql appendWithNSString:table];
  [sql appendWithNSString:@" SET "];
  __unused jint setValuesSize = [values size];
  __unused jint bindArgsSize = (whereArgs == nil) ? setValuesSize : (setValuesSize + ((IOSObjectArray *) nil_chk(whereArgs))->size_);
  __unused IOSObjectArray *bindArgs = [IOSObjectArray arrayWithLength:bindArgsSize type:NSObject_class_()];
  __unused jint i = 0;
  for (NSString * __strong colName in nil_chk([values keySet])) {
    [sql appendWithNSString:(i > 0) ? @"," : @""];
    [sql appendWithNSString:colName];
    IOSObjectArray_Set(bindArgs, i++, [values getWithNSString:colName]);
    [sql appendWithNSString:@"=?"];
  }
  if (whereArgs != nil) {
    for (i = setValuesSize; i < bindArgsSize; i++) {
      IOSObjectArray_Set(bindArgs, i, IOSObjectArray_Get(whereArgs, i - setValuesSize));
    }
  }
  if (!AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_isEmptyWithNSString_(whereClause)) {
    [sql appendWithNSString:@" WHERE "];
    [sql appendWithNSString:whereClause];
  }
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self compileStatementWithNSString:[sql description]];
  AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(stmt, bindArgs);
  return [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeUpdateDelete];
}

- (void)execSQLWithNSString:(NSString *)sql {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) execSQLWithNSString:sql];
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) execSQLWithNSString:sql withNSObjectArray:bindArgs];
}

- (jboolean)isReadOnly {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isReadOnly];
}

- (jboolean)isOpen {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isOpen];
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) needUpgradeWithInt:newVersion];
}

- (NSString *)getPath {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getPath];
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setLocaleWithJavaUtilLocale:locale];
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setMaxSqlCacheSizeWithInt:cacheSize];
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) setForeignKeyConstraintsEnabledWithBoolean:enable];
}

- (jboolean)enableWriteAheadLogging {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) enableWriteAheadLogging];
}

- (void)disableWriteAheadLogging {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) disableWriteAheadLogging];
}

- (jboolean)isWriteAheadLoggingEnabled {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isWriteAheadLoggingEnabled];
}

- (id<JavaUtilList>)getAttachedDbs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) getAttachedDbs];
}

- (jboolean)isDatabaseIntegrityOk {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) isDatabaseIntegrityOk];
}

- (void)close {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDelegate_)) close];
}

+ (jboolean)isEmptyWithNSString:(NSString *)input {
  return AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_isEmptyWithNSString_(input);
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 12, 15, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, 18, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 13, 18, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 31, -1, -1, -1 },
    { NULL, "Z", 0xa, 32, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(compileStatementWithNSString:);
  methods[2].selector = @selector(beginTransaction);
  methods[3].selector = @selector(beginTransactionNonExclusive);
  methods[4].selector = @selector(beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[5].selector = @selector(beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[6].selector = @selector(endTransaction);
  methods[7].selector = @selector(setTransactionSuccessful);
  methods[8].selector = @selector(inTransaction);
  methods[9].selector = @selector(isDbLockedByCurrentThread);
  methods[10].selector = @selector(yieldIfContendedSafely);
  methods[11].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[12].selector = @selector(getVersion);
  methods[13].selector = @selector(setVersionWithInt:);
  methods[14].selector = @selector(getMaximumSize);
  methods[15].selector = @selector(setMaximumSizeWithLong:);
  methods[16].selector = @selector(getPageSize);
  methods[17].selector = @selector(setPageSizeWithLong:);
  methods[18].selector = @selector(queryWithNSString:);
  methods[19].selector = @selector(queryWithNSString:withNSObjectArray:);
  methods[20].selector = @selector(queryWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[21].selector = @selector(queryWithAndroidArchPersistenceDbSupportSQLiteQuery:withAndroidOsCancellationSignal:);
  methods[22].selector = @selector(insertWithNSString:withInt:withAndroidContentContentValues:);
  methods[23].selector = @selector(delete__WithNSString:withNSString:withNSObjectArray:);
  methods[24].selector = @selector(updateWithNSString:withInt:withAndroidContentContentValues:withNSString:withNSObjectArray:);
  methods[25].selector = @selector(execSQLWithNSString:);
  methods[26].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[27].selector = @selector(isReadOnly);
  methods[28].selector = @selector(isOpen);
  methods[29].selector = @selector(needUpgradeWithInt:);
  methods[30].selector = @selector(getPath);
  methods[31].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[32].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[33].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[34].selector = @selector(enableWriteAheadLogging);
  methods[35].selector = @selector(disableWriteAheadLogging);
  methods[36].selector = @selector(isWriteAheadLoggingEnabled);
  methods[37].selector = @selector(getAttachedDbs);
  methods[38].selector = @selector(isDatabaseIntegrityOk);
  methods[39].selector = @selector(close);
  methods[40].selector = @selector(isEmptyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONFLICT_VALUES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "mDelegate_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "compileStatement", "LNSString;", "beginTransactionWithListener", "LAndroidDatabaseSqliteSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "yieldIfContendedSafely", "J", "setVersion", "I", "setMaximumSize", "setPageSize", "query", "LNSString;[LNSObject;", "LAndroidArchPersistenceDbSupportSQLiteQuery;", "LAndroidArchPersistenceDbSupportSQLiteQuery;LAndroidOsCancellationSignal;", "insert", "LNSString;ILAndroidContentContentValues;", "LAndroidDatabaseSQLException;", "delete", "LNSString;LNSString;[LNSObject;", "update", "LNSString;ILAndroidContentContentValues;LNSString;[LNSObject;", "execSQL", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "Z", "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "LJavaIoIOException;", "isEmpty", &AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_CONFLICT_VALUES, &AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase = { "FrameworkSQLiteDatabase", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x0, 41, 3, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase class]) {
    JreStrongAssignAndConsume(&AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_CONFLICT_VALUES, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)
  }
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *self, AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->mDelegate_, delegate);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, initWithAndroidDatabaseSqliteSQLiteDatabase_, delegate)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *delegate) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase, initWithAndroidDatabaseSqliteSQLiteDatabase_, delegate)
}

jboolean AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_isEmptyWithNSString_(NSString *input) {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_initialize();
  return input == nil || [input java_length] == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0 {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(self, capture$0);
  return self;
}

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  [((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(val$supportQuery_)) bindToWithAndroidArchPersistenceDbSupportSQLiteProgram:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteProgram_(query)];
  return create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(masterQuery, editTable, query);
}

- (void)dealloc {
  RELEASE_(val$supportQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[1].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$supportQuery_", "LAndroidArchPersistenceDbSupportSQLiteQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;", "queryWithAndroidArchPersistenceDbSupportSQLiteQuery:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 = { "", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  JreStrongAssign(&self->val$supportQuery_, capture$0);
  NSObject_init(self);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_1, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2

- (instancetype)initWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)capture$0 {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(self, capture$0);
  return self;
}

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  [((id<AndroidArchPersistenceDbSupportSQLiteQuery>) nil_chk(val$supportQuery_)) bindToWithAndroidArchPersistenceDbSupportSQLiteProgram:create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteProgram_(query)];
  return create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(masterQuery, editTable, query);
}

- (void)dealloc {
  RELEASE_(val$supportQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[1].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$supportQuery_", "LAndroidArchPersistenceDbSupportSQLiteQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "LAndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase;", "queryWithAndroidArchPersistenceDbSupportSQLiteQuery:withAndroidOsCancellationSignal:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 = { "", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *self, id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  JreStrongAssign(&self->val$supportQuery_, capture$0);
  NSObject_init(self);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2 *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2_initWithAndroidArchPersistenceDbSupportSQLiteQuery_(id<AndroidArchPersistenceDbSupportSQLiteQuery> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteDatabase_2, initWithAndroidArchPersistenceDbSupportSQLiteQuery_, capture$0)
}
