//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement () {
 @public
  AndroidDatabaseSqliteSQLiteStatement *mDelegate_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement, mDelegate_, AndroidDatabaseSqliteSQLiteStatement *)

@implementation AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement

- (instancetype)initWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)delegate {
  AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(self, delegate);
  return self;
}

- (void)bindNullWithInt:(jint)index {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) bindNullWithInt:index];
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) bindLongWithInt:index withLong:value];
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) bindStringWithInt:index withNSString:value];
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) bindBlobWithInt:index withByteArray:value];
}

- (void)clearBindings {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) clearBindings];
}

- (void)execute {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) execute];
}

- (jint)executeUpdateDelete {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) executeUpdateDelete];
}

- (jlong)executeInsert {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) executeInsert];
}

- (jlong)simpleQueryForLong {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) simpleQueryForLong];
}

- (NSString *)simpleQueryForString {
  return [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) simpleQueryForString];
}

- (void)close {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mDelegate_)) close];
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteStatement:);
  methods[1].selector = @selector(bindNullWithInt:);
  methods[2].selector = @selector(bindLongWithInt:withLong:);
  methods[3].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[4].selector = @selector(bindStringWithInt:withNSString:);
  methods[5].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[6].selector = @selector(clearBindings);
  methods[7].selector = @selector(execute);
  methods[8].selector = @selector(executeUpdateDelete);
  methods[9].selector = @selector(executeInsert);
  methods[10].selector = @selector(simpleQueryForLong);
  methods[11].selector = @selector(simpleQueryForString);
  methods[12].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDelegate_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteStatement;", "bindNull", "I", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindBlob", "I[B", "LJavaLangException;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement = { "FrameworkSQLiteStatement", "android.arch.persistence.db.framework", ptrTable, methods, fields, 7, 0x0, 13, 1, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement;
}

@end

void AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement *self, AndroidDatabaseSqliteSQLiteStatement *delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->mDelegate_, delegate);
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement *new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *delegate) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteStatement_, delegate)
}

AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement *create_AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteStatement_(AndroidDatabaseSqliteSQLiteStatement *delegate) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteStatement_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbFrameworkFrameworkSQLiteStatement)
