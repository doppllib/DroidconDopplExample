//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATAppPrefs.h"
#include "DVMConferenceDataViewModel.h"
#include "DVMConferenceDataViewModel_Factory_MembersInjector.h"
#include "DaggerMembersInjector.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "javax/inject/Provider.h"

@interface DVMConferenceDataViewModel_Factory_MembersInjector () {
 @public
  id<JavaxInjectProvider> appPrefsProvider_;
}

@end

J2OBJC_FIELD_SETTER(DVMConferenceDataViewModel_Factory_MembersInjector, appPrefsProvider_, id<JavaxInjectProvider>)

@implementation DVMConferenceDataViewModel_Factory_MembersInjector

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider {
  DVMConferenceDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(self, appPrefsProvider);
  return self;
}

+ (id<DaggerMembersInjector>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider {
  return DVMConferenceDataViewModel_Factory_MembersInjector_createWithJavaxInjectProvider_(appPrefsProvider);
}

- (void)injectMembersWithId:(DVMConferenceDataViewModel_Factory *)instance {
  if (instance == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Cannot inject members into a null reference");
  }
  JreStrongAssign(&instance->appPrefs_, [((id<JavaxInjectProvider>) nil_chk(appPrefsProvider_)) get]);
}

+ (void)injectAppPrefsWithDVMConferenceDataViewModel_Factory:(DVMConferenceDataViewModel_Factory *)instance
                                     withJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider {
  DVMConferenceDataViewModel_Factory_MembersInjector_injectAppPrefsWithDVMConferenceDataViewModel_Factory_withJavaxInjectProvider_(instance, appPrefsProvider);
}

- (void)dealloc {
  RELEASE_(appPrefsProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDaggerMembersInjector;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:);
  methods[1].selector = @selector(createWithJavaxInjectProvider:);
  methods[2].selector = @selector(injectMembersWithId:);
  methods[3].selector = @selector(injectAppPrefsWithDVMConferenceDataViewModel_Factory:withJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "appPrefsProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;)V", "create", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;)Ldagger/MembersInjector<Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataViewModel$Factory;>;", "injectMembers", "LDVMConferenceDataViewModel_Factory;", "injectAppPrefs", "LDVMConferenceDataViewModel_Factory;LJavaxInjectProvider;", "(Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataViewModel$Factory;Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;)V", "Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;", "Ljava/lang/Object;Ldagger/MembersInjector<Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataViewModel$Factory;>;" };
  static const J2ObjcClassInfo _DVMConferenceDataViewModel_Factory_MembersInjector = { "ConferenceDataViewModel_Factory_MembersInjector", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x11, 4, 1, -1, -1, -1, 10, -1 };
  return &_DVMConferenceDataViewModel_Factory_MembersInjector;
}

@end

void DVMConferenceDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(DVMConferenceDataViewModel_Factory_MembersInjector *self, id<JavaxInjectProvider> appPrefsProvider) {
  NSObject_init(self);
  JreAssert(appPrefsProvider != nil, @"co/touchlab/droidconandroid/shared/viewmodel/ConferenceDataViewModel_Factory_MembersInjector.java:17 condition failed: assert appPrefsProvider != null;");
  JreStrongAssign(&self->appPrefsProvider_, appPrefsProvider);
}

DVMConferenceDataViewModel_Factory_MembersInjector *new_DVMConferenceDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider) {
  J2OBJC_NEW_IMPL(DVMConferenceDataViewModel_Factory_MembersInjector, initWithJavaxInjectProvider_, appPrefsProvider)
}

DVMConferenceDataViewModel_Factory_MembersInjector *create_DVMConferenceDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataViewModel_Factory_MembersInjector, initWithJavaxInjectProvider_, appPrefsProvider)
}

id<DaggerMembersInjector> DVMConferenceDataViewModel_Factory_MembersInjector_createWithJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider) {
  DVMConferenceDataViewModel_Factory_MembersInjector_initialize();
  return create_DVMConferenceDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(appPrefsProvider);
}

void DVMConferenceDataViewModel_Factory_MembersInjector_injectAppPrefsWithDVMConferenceDataViewModel_Factory_withJavaxInjectProvider_(DVMConferenceDataViewModel_Factory *instance, id<JavaxInjectProvider> appPrefsProvider) {
  DVMConferenceDataViewModel_Factory_MembersInjector_initialize();
  JreStrongAssign(&((DVMConferenceDataViewModel_Factory *) nil_chk(instance))->appPrefs_, [((id<JavaxInjectProvider>) nil_chk(appPrefsProvider)) get]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataViewModel_Factory_MembersInjector)
