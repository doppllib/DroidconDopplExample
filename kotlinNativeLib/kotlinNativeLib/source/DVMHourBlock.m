//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATBlock.h"
#include "DDATEvent.h"
#include "DDATTimeBlock.h"
#include "DVMHourBlock.h"
#include "J2ObjC_source.h"

@interface DVMHourBlock () {
 @public
  NSString *hourStringDisplay_;
  id<DDATTimeBlock> timeBlock_;
}

@end

J2OBJC_FIELD_SETTER(DVMHourBlock, hourStringDisplay_, NSString *)
J2OBJC_FIELD_SETTER(DVMHourBlock, timeBlock_, id<DDATTimeBlock>)

@implementation DVMHourBlock

- (instancetype)initWithNSString:(NSString *)hourStringDisplay
               withDDATTimeBlock:(id<DDATTimeBlock>)timeBlock {
  DVMHourBlock_initWithNSString_withDDATTimeBlock_(self, hourStringDisplay, timeBlock);
  return self;
}

- (NSString *)getHourStringDisplay {
  return hourStringDisplay_;
}

- (id<DDATTimeBlock>)getTimeBlock {
  return timeBlock_;
}

- (DDATEvent *)getEvent {
  if ([timeBlock_ isKindOfClass:[DDATEvent class]]) return (DDATEvent *) cast_chk(timeBlock_, [DDATEvent class]);
  else return nil;
}

- (DDATBlock *)getBlock {
  if ([timeBlock_ isKindOfClass:[DDATBlock class]]) return (DDATBlock *) cast_chk(timeBlock_, [DDATBlock class]);
  else return nil;
}

- (NSString * __nonnull)getName {
  return timeBlock_ == nil ? hourStringDisplay_ : [timeBlock_ getName];
}

- (NSString * __nonnull)getSpeakers {
  return timeBlock_ == nil ? @"" : [timeBlock_ getSpeakers];
}

- (void)dealloc {
  RELEASE_(hourStringDisplay_);
  RELEASE_(timeBlock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATTimeBlock;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATBlock;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withDDATTimeBlock:);
  methods[1].selector = @selector(getHourStringDisplay);
  methods[2].selector = @selector(getTimeBlock);
  methods[3].selector = @selector(getEvent);
  methods[4].selector = @selector(getBlock);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(getSpeakers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hourStringDisplay_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeBlock_", "LDDATTimeBlock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LDDATTimeBlock;" };
  static const J2ObjcClassInfo _DVMHourBlock = { "HourBlock", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_DVMHourBlock;
}

@end

void DVMHourBlock_initWithNSString_withDDATTimeBlock_(DVMHourBlock *self, NSString *hourStringDisplay, id<DDATTimeBlock> timeBlock) {
  NSObject_init(self);
  JreStrongAssign(&self->hourStringDisplay_, hourStringDisplay);
  JreStrongAssign(&self->timeBlock_, timeBlock);
}

DVMHourBlock *new_DVMHourBlock_initWithNSString_withDDATTimeBlock_(NSString *hourStringDisplay, id<DDATTimeBlock> timeBlock) {
  J2OBJC_NEW_IMPL(DVMHourBlock, initWithNSString_withDDATTimeBlock_, hourStringDisplay, timeBlock)
}

DVMHourBlock *create_DVMHourBlock_initWithNSString_withDDATTimeBlock_(NSString *hourStringDisplay, id<DDATTimeBlock> timeBlock) {
  J2OBJC_CREATE_IMPL(DVMHourBlock, initWithNSString_withDDATTimeBlock_, hourStringDisplay, timeBlock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMHourBlock)
