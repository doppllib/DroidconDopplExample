//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher")
#ifdef RESTRICT_AndroidArchLifecycleServiceLifecycleDispatcher
#define INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher 0
#else
#define INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher 1
#endif
#undef RESTRICT_AndroidArchLifecycleServiceLifecycleDispatcher

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidArchLifecycleServiceLifecycleDispatcher_) && (INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher || defined(INCLUDE_AndroidArchLifecycleServiceLifecycleDispatcher))
#define AndroidArchLifecycleServiceLifecycleDispatcher_

@class AndroidArchLifecycleLifecycle;
@protocol AndroidArchLifecycleLifecycleOwner;

@interface AndroidArchLifecycleServiceLifecycleDispatcher : NSObject

#pragma mark Public

- (instancetype)initWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner> __nonnull)provider;

- (AndroidArchLifecycleLifecycle *)getLifecycle;

- (void)onServicePreSuperOnBind;

- (void)onServicePreSuperOnCreate;

- (void)onServicePreSuperOnDestroy;

- (void)onServicePreSuperOnStart;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleServiceLifecycleDispatcher)

FOUNDATION_EXPORT void AndroidArchLifecycleServiceLifecycleDispatcher_initWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleServiceLifecycleDispatcher *self, id<AndroidArchLifecycleLifecycleOwner> provider);

FOUNDATION_EXPORT AndroidArchLifecycleServiceLifecycleDispatcher *new_AndroidArchLifecycleServiceLifecycleDispatcher_initWithAndroidArchLifecycleLifecycleOwner_(id<AndroidArchLifecycleLifecycleOwner> provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchLifecycleServiceLifecycleDispatcher *create_AndroidArchLifecycleServiceLifecycleDispatcher_initWithAndroidArchLifecycleLifecycleOwner_(id<AndroidArchLifecycleLifecycleOwner> provider);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleServiceLifecycleDispatcher)

#endif

#if !defined (AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable_) && (INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher || defined(INCLUDE_AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable))
#define AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class AndroidArchLifecycleLifecycleRegistry;
@class AndroidArchLifecycleLifecycle_Event;

@interface AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable : NSObject < JavaLangRunnable > {
 @public
  AndroidArchLifecycleLifecycle_Event *mEvent_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithAndroidArchLifecycleLifecycleRegistry:(AndroidArchLifecycleLifecycleRegistry * __nonnull)registry
                      withAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable)

J2OBJC_FIELD_SETTER(AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable, mEvent_, AndroidArchLifecycleLifecycle_Event *)

FOUNDATION_EXPORT void AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable_initWithAndroidArchLifecycleLifecycleRegistry_withAndroidArchLifecycleLifecycle_Event_(AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable *self, AndroidArchLifecycleLifecycleRegistry *registry, AndroidArchLifecycleLifecycle_Event *event);

FOUNDATION_EXPORT AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable *new_AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable_initWithAndroidArchLifecycleLifecycleRegistry_withAndroidArchLifecycleLifecycle_Event_(AndroidArchLifecycleLifecycleRegistry *registry, AndroidArchLifecycleLifecycle_Event *event) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable *create_AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable_initWithAndroidArchLifecycleLifecycleRegistry_withAndroidArchLifecycleLifecycle_Event_(AndroidArchLifecycleLifecycleRegistry *registry, AndroidArchLifecycleLifecycle_Event *event);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleServiceLifecycleDispatcher_DispatchRunnable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidArchLifecycleServiceLifecycleDispatcher")
