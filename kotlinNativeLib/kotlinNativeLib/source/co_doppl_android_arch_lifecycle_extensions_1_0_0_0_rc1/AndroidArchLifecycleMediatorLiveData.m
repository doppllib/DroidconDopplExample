//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreInternalSafeIterableMap.h"
#include "AndroidArchLifecycleLiveData.h"
#include "AndroidArchLifecycleMediatorLiveData.h"
#include "AndroidArchLifecycleMutableLiveData.h"
#include "AndroidArchLifecycleObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Map.h"

@interface AndroidArchLifecycleMediatorLiveData () {
 @public
  AndroidArchCoreInternalSafeIterableMap *mSources_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchLifecycleMediatorLiveData, mSources_, AndroidArchCoreInternalSafeIterableMap *)

@interface AndroidArchLifecycleMediatorLiveData_Source : NSObject < AndroidArchLifecycleObserver > {
 @public
  AndroidArchLifecycleLiveData *mLiveData_;
  id<AndroidArchLifecycleObserver> mObserver_;
  jint mVersion_;
}

- (instancetype)initWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData *)liveData
                    withAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver>)observer;

- (void)plug;

- (void)unplug;

- (void)onChangedWithId:(id __nullable)v;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleMediatorLiveData_Source)

J2OBJC_FIELD_SETTER(AndroidArchLifecycleMediatorLiveData_Source, mLiveData_, AndroidArchLifecycleLiveData *)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleMediatorLiveData_Source, mObserver_, id<AndroidArchLifecycleObserver>)

__attribute__((unused)) static void AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleMediatorLiveData_Source *self, AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer);

__attribute__((unused)) static AndroidArchLifecycleMediatorLiveData_Source *new_AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchLifecycleMediatorLiveData_Source *create_AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleMediatorLiveData_Source)

@implementation AndroidArchLifecycleMediatorLiveData

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchLifecycleMediatorLiveData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addSourceWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData * __nonnull)source
                 withAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver> __nonnull)onChanged {
  AndroidArchLifecycleMediatorLiveData_Source *e = create_AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(source, onChanged);
  AndroidArchLifecycleMediatorLiveData_Source *existing = [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mSources_)) putIfAbsentWithId:source withId:e];
  if (existing != nil && existing->mObserver_ != onChanged) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"This source was already added with the different observer");
  }
  if (existing != nil) {
    return;
  }
  if ([self hasActiveObservers]) {
    [e plug];
  }
}

- (void)removeSourceWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData * __nonnull)toRemote {
  AndroidArchLifecycleMediatorLiveData_Source *source = [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mSources_)) removeWithId:toRemote];
  if (source != nil) {
    [source unplug];
  }
}

- (void)onActive {
  for (id<JavaUtilMap_Entry> __strong source in nil_chk(mSources_)) {
    [((AndroidArchLifecycleMediatorLiveData_Source *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(source)) getValue])) plug];
  }
}

- (void)onInactive {
  for (id<JavaUtilMap_Entry> __strong source in nil_chk(mSources_)) {
    [((AndroidArchLifecycleMediatorLiveData_Source *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(source)) getValue])) unplug];
  }
}

- (void)dealloc {
  RELEASE_(mSources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addSourceWithAndroidArchLifecycleLiveData:withAndroidArchLifecycleObserver:);
  methods[2].selector = @selector(removeSourceWithAndroidArchLifecycleLiveData:);
  methods[3].selector = @selector(onActive);
  methods[4].selector = @selector(onInactive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSources_", "LAndroidArchCoreInternalSafeIterableMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "addSource", "LAndroidArchLifecycleLiveData;LAndroidArchLifecycleObserver;", "<S:Ljava/lang/Object;>(Landroid/arch/lifecycle/LiveData<TS;>;Landroid/arch/lifecycle/Observer<TS;>;)V", "removeSource", "LAndroidArchLifecycleLiveData;", "<S:Ljava/lang/Object;>(Landroid/arch/lifecycle/LiveData<TS;>;)V", "Landroid/arch/core/internal/SafeIterableMap<Landroid/arch/lifecycle/LiveData<*>;Landroid/arch/lifecycle/MediatorLiveData$Source<*>;>;", "LAndroidArchLifecycleMediatorLiveData_Source;", "<T:Ljava/lang/Object;>Landroid/arch/lifecycle/MutableLiveData<TT;>;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleMediatorLiveData = { "MediatorLiveData", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, 7, -1, 8, -1 };
  return &_AndroidArchLifecycleMediatorLiveData;
}

@end

void AndroidArchLifecycleMediatorLiveData_init(AndroidArchLifecycleMediatorLiveData *self) {
  AndroidArchLifecycleMutableLiveData_init(self);
  JreStrongAssignAndConsume(&self->mSources_, new_AndroidArchCoreInternalSafeIterableMap_init());
}

AndroidArchLifecycleMediatorLiveData *new_AndroidArchLifecycleMediatorLiveData_init() {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleMediatorLiveData, init)
}

AndroidArchLifecycleMediatorLiveData *create_AndroidArchLifecycleMediatorLiveData_init() {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleMediatorLiveData, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleMediatorLiveData)

@implementation AndroidArchLifecycleMediatorLiveData_Source

- (instancetype)initWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData *)liveData
                    withAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver>)observer {
  AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(self, liveData, observer);
  return self;
}

- (void)plug {
  [((AndroidArchLifecycleLiveData *) nil_chk(mLiveData_)) observeForeverWithAndroidArchLifecycleObserver:self];
}

- (void)unplug {
  [((AndroidArchLifecycleLiveData *) nil_chk(mLiveData_)) removeObserverWithAndroidArchLifecycleObserver:self];
}

- (void)onChangedWithId:(id __nullable)v {
  if (mVersion_ != [((AndroidArchLifecycleLiveData *) nil_chk(mLiveData_)) getVersion]) {
    mVersion_ = [mLiveData_ getVersion];
    [((id<AndroidArchLifecycleObserver>) nil_chk(mObserver_)) onChangedWithId:v];
  }
}

- (void)dealloc {
  RELEASE_(mLiveData_);
  RELEASE_(mObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchLifecycleLiveData:withAndroidArchLifecycleObserver:);
  methods[1].selector = @selector(plug);
  methods[2].selector = @selector(unplug);
  methods[3].selector = @selector(onChangedWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLiveData_", "LAndroidArchLifecycleLiveData;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mObserver_", "LAndroidArchLifecycleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "mVersion_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchLifecycleLiveData;LAndroidArchLifecycleObserver;", "(Landroid/arch/lifecycle/LiveData<TV;>;Landroid/arch/lifecycle/Observer<TV;>;)V", "onChanged", "LNSObject;", "(TV;)V", "Landroid/arch/lifecycle/LiveData<TV;>;", "Landroid/arch/lifecycle/Observer<TV;>;", "LAndroidArchLifecycleMediatorLiveData;", "<V:Ljava/lang/Object;>Ljava/lang/Object;Landroid/arch/lifecycle/Observer<TV;>;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleMediatorLiveData_Source = { "Source", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0xa, 4, 3, 7, -1, -1, 8, -1 };
  return &_AndroidArchLifecycleMediatorLiveData_Source;
}

@end

void AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleMediatorLiveData_Source *self, AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer) {
  NSObject_init(self);
  self->mVersion_ = AndroidArchLifecycleLiveData_START_VERSION;
  JreStrongAssign(&self->mLiveData_, liveData);
  JreStrongAssign(&self->mObserver_, observer);
}

AndroidArchLifecycleMediatorLiveData_Source *new_AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer) {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleMediatorLiveData_Source, initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_, liveData, observer)
}

AndroidArchLifecycleMediatorLiveData_Source *create_AndroidArchLifecycleMediatorLiveData_Source_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *liveData, id<AndroidArchLifecycleObserver> observer) {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleMediatorLiveData_Source, initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleObserver_, liveData, observer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleMediatorLiveData_Source)
