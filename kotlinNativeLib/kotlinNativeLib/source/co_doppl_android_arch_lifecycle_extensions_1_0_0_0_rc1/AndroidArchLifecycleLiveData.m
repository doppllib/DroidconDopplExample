//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorArchTaskExecutor.h"
#include "AndroidArchCoreInternalSafeIterableMap.h"
#include "AndroidArchLifecycleLifecycle.h"
#include "AndroidArchLifecycleLifecycleOwner.h"
#include "AndroidArchLifecycleLifecycleRegistry.h"
#include "AndroidArchLifecycleLiveData.h"
#include "AndroidArchLifecycleObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Runnable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@interface AndroidArchLifecycleLiveData () {
 @public
  id mDataLock_;
  AndroidArchCoreInternalSafeIterableMap *mObservers_;
  jint mActiveCount_;
  volatile_id mData_;
  volatile_id mPendingData_;
  jint mVersion_;
  jboolean mDispatchingValue_;
  jboolean mDispatchInvalidated_;
  id<JavaLangRunnable> mPostValueRunnable_;
}

- (void)considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:(AndroidArchLifecycleLiveData_LifecycleBoundObserver *)observer;

- (void)dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:(AndroidArchLifecycleLiveData_LifecycleBoundObserver * __nullable)initiator;

- (void)assertMainThreadWithNSString:(NSString *)methodName;

@end

J2OBJC_FIELD_SETTER(AndroidArchLifecycleLiveData, mDataLock_, id)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleLiveData, mObservers_, AndroidArchCoreInternalSafeIterableMap *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchLifecycleLiveData, mData_, id)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchLifecycleLiveData, mPendingData_, id)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleLiveData, mPostValueRunnable_, id<JavaLangRunnable>)

inline id AndroidArchLifecycleLiveData_get_NOT_SET();
static id AndroidArchLifecycleLiveData_NOT_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchLifecycleLiveData, NOT_SET, id)

inline id<AndroidArchLifecycleLifecycleOwner> AndroidArchLifecycleLiveData_get_ALWAYS_ON();
static id<AndroidArchLifecycleLifecycleOwner> AndroidArchLifecycleLiveData_ALWAYS_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchLifecycleLiveData, ALWAYS_ON, id<AndroidArchLifecycleLifecycleOwner>)

__attribute__((unused)) static void AndroidArchLifecycleLiveData_considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(AndroidArchLifecycleLiveData *self, AndroidArchLifecycleLiveData_LifecycleBoundObserver *observer);

__attribute__((unused)) static void AndroidArchLifecycleLiveData_dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(AndroidArchLifecycleLiveData *self, AndroidArchLifecycleLiveData_LifecycleBoundObserver *initiator);

__attribute__((unused)) static void AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(AndroidArchLifecycleLiveData *self, NSString *methodName);

@interface AndroidArchLifecycleLiveData_1 : NSObject < AndroidArchLifecycleLifecycleOwner > {
 @public
  AndroidArchLifecycleLifecycleRegistry *mRegistry_;
}

- (instancetype)init;

- (AndroidArchLifecycleLifecycleRegistry *)init__ OBJC_METHOD_FAMILY_NONE;

- (AndroidArchLifecycleLifecycle *)getLifecycle;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleLiveData_1)

J2OBJC_FIELD_SETTER(AndroidArchLifecycleLiveData_1, mRegistry_, AndroidArchLifecycleLifecycleRegistry *)

__attribute__((unused)) static void AndroidArchLifecycleLiveData_1_init(AndroidArchLifecycleLiveData_1 *self);

__attribute__((unused)) static AndroidArchLifecycleLiveData_1 *new_AndroidArchLifecycleLiveData_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchLifecycleLiveData_1 *create_AndroidArchLifecycleLiveData_1_init();

__attribute__((unused)) static AndroidArchLifecycleLifecycleRegistry *AndroidArchLifecycleLiveData_1_init__(AndroidArchLifecycleLiveData_1 *self);

@interface AndroidArchLifecycleLiveData_2 : NSObject < JavaLangRunnable > {
 @public
  AndroidArchLifecycleLiveData *this$0_;
}

- (instancetype)initWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleLiveData_2)

__attribute__((unused)) static void AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData_2 *self, AndroidArchLifecycleLiveData *outer$);

__attribute__((unused)) static AndroidArchLifecycleLiveData_2 *new_AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchLifecycleLiveData_2 *create_AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData *outer$);

@interface AndroidArchLifecycleLiveData_LifecycleBoundObserver () {
 @public
  AndroidArchLifecycleLiveData *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(AndroidArchLifecycleLiveData)

@implementation AndroidArchLifecycleLiveData

+ (jint)START_VERSION {
  return AndroidArchLifecycleLiveData_START_VERSION;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchLifecycleLiveData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:(AndroidArchLifecycleLiveData_LifecycleBoundObserver *)observer {
  AndroidArchLifecycleLiveData_considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(self, observer);
}

- (void)dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:(AndroidArchLifecycleLiveData_LifecycleBoundObserver * __nullable)initiator {
  AndroidArchLifecycleLiveData_dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(self, initiator);
}

- (void)observeWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner> __nonnull)owner
                     withAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver> __nonnull)observer {
  if ([((AndroidArchLifecycleLifecycle *) nil_chk([((id<AndroidArchLifecycleLifecycleOwner>) nil_chk(owner)) getLifecycle])) getCurrentState] == JreLoadEnum(AndroidArchLifecycleLifecycle_State, DESTROYED)) {
    return;
  }
  __unused AndroidArchLifecycleLiveData_LifecycleBoundObserver *wrapper = create_AndroidArchLifecycleLiveData_LifecycleBoundObserver_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_(self, owner, observer);
  __unused AndroidArchLifecycleLiveData_LifecycleBoundObserver *existing = [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mObservers_)) putIfAbsentWithId:observer withId:wrapper];
  if (existing != nil && existing->owner_ != wrapper->owner_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add the same observer with different lifecycles");
  }
  if (existing != nil) {
    return;
  }
  [((AndroidArchLifecycleLifecycle *) nil_chk([owner getLifecycle])) addObserverWithAndroidArchLifecycleLifecycleObserver:wrapper];
}

- (void)observeForeverWithAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver> __nonnull)observer {
  [self observeWithAndroidArchLifecycleLifecycleOwner:AndroidArchLifecycleLiveData_ALWAYS_ON withAndroidArchLifecycleObserver:observer];
}

- (void)removeObserverWithAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver> __nonnull)observer {
  AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(self, @"removeObserver");
  __unused AndroidArchLifecycleLiveData_LifecycleBoundObserver *removed = [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mObservers_)) removeWithId:observer];
  if (removed == nil) {
    return;
  }
  [((AndroidArchLifecycleLifecycle *) nil_chk([((id<AndroidArchLifecycleLifecycleOwner>) nil_chk(removed->owner_)) getLifecycle])) removeObserverWithAndroidArchLifecycleLifecycleObserver:removed];
  [removed activeStateChangedWithBoolean:false];
}

- (void)removeObserversWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner> __nonnull)owner {
  AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(self, @"removeObservers");
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(mObservers_)) {
    if (((AndroidArchLifecycleLiveData_LifecycleBoundObserver *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]))->owner_ == owner) {
      [self removeObserverWithAndroidArchLifecycleObserver:[entry_ getKey]];
    }
  }
}

- (void)postValueWithId:(id)value {
  __unused jboolean postTask;
  @synchronized(mDataLock_) {
    postTask = (JreLoadVolatileId(&mPendingData_) == AndroidArchLifecycleLiveData_NOT_SET);
    JreVolatileStrongAssign(&mPendingData_, value);
  }
  if (!postTask) {
    return;
  }
  [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) postToMainThreadWithJavaLangRunnable:mPostValueRunnable_];
}

- (void)setValueWithId:(id)value {
  AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(self, @"setValue");
  mVersion_++;
  JreVolatileStrongAssign(&mData_, value);
  AndroidArchLifecycleLiveData_dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(self, nil);
}

- (id __nullable)getValue {
  __unused id data = JreLoadVolatileId(&mData_);
  if (data != AndroidArchLifecycleLiveData_NOT_SET) {
    return data;
  }
  return nil;
}

- (jint)getVersion {
  return mVersion_;
}

- (void)onActive {
}

- (void)onInactive {
}

- (jboolean)hasObservers {
  return [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mObservers_)) size] > 0;
}

- (jboolean)hasActiveObservers {
  return mActiveCount_ > 0;
}

+ (jboolean)isActiveStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state {
  return AndroidArchLifecycleLiveData_isActiveStateWithAndroidArchLifecycleLifecycle_State_(state);
}

- (void)assertMainThreadWithNSString:(NSString *)methodName {
  AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(self, methodName);
}

- (void)__javaClone:(AndroidArchLifecycleLiveData *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mData_, &original->mData_);
  JreCloneVolatileStrong(&mPendingData_, &original->mPendingData_);
}

- (void)dealloc {
  RELEASE_(mDataLock_);
  RELEASE_(mObservers_);
  JreReleaseVolatile(&mData_);
  JreReleaseVolatile(&mPendingData_);
  RELEASE_(mPostValueRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x4, 15, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:);
  methods[2].selector = @selector(dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver:);
  methods[3].selector = @selector(observeWithAndroidArchLifecycleLifecycleOwner:withAndroidArchLifecycleObserver:);
  methods[4].selector = @selector(observeForeverWithAndroidArchLifecycleObserver:);
  methods[5].selector = @selector(removeObserverWithAndroidArchLifecycleObserver:);
  methods[6].selector = @selector(removeObserversWithAndroidArchLifecycleLifecycleOwner:);
  methods[7].selector = @selector(postValueWithId:);
  methods[8].selector = @selector(setValueWithId:);
  methods[9].selector = @selector(getValue);
  methods[10].selector = @selector(getVersion);
  methods[11].selector = @selector(onActive);
  methods[12].selector = @selector(onInactive);
  methods[13].selector = @selector(hasObservers);
  methods[14].selector = @selector(hasActiveObservers);
  methods[15].selector = @selector(isActiveStateWithAndroidArchLifecycleLifecycle_State:);
  methods[16].selector = @selector(assertMainThreadWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDataLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "START_VERSION", "I", .constantValue.asInt = AndroidArchLifecycleLiveData_START_VERSION, 0x18, -1, -1, -1, -1 },
    { "NOT_SET", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "ALWAYS_ON", "LAndroidArchLifecycleLifecycleOwner;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "mObservers_", "LAndroidArchCoreInternalSafeIterableMap;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "mActiveCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mData_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mPendingData_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mVersion_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDispatchingValue_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDispatchInvalidated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPostValueRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "considerNotify", "LAndroidArchLifecycleLiveData_LifecycleBoundObserver;", "dispatchingValue", "observe", "LAndroidArchLifecycleLifecycleOwner;LAndroidArchLifecycleObserver;", "(Landroid/arch/lifecycle/LifecycleOwner;Landroid/arch/lifecycle/Observer<TT;>;)V", "observeForever", "LAndroidArchLifecycleObserver;", "(Landroid/arch/lifecycle/Observer<TT;>;)V", "removeObserver", "removeObservers", "LAndroidArchLifecycleLifecycleOwner;", "postValue", "LNSObject;", "(TT;)V", "setValue", "()TT;", "isActiveState", "LAndroidArchLifecycleLifecycle_State;", "assertMainThread", "LNSString;", &AndroidArchLifecycleLiveData_NOT_SET, &AndroidArchLifecycleLiveData_ALWAYS_ON, "Landroid/arch/core/internal/SafeIterableMap<Landroid/arch/lifecycle/Observer<TT;>;Landroid/arch/lifecycle/LiveData$LifecycleBoundObserver;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLiveData = { "LiveData", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x401, 17, 12, -1, 1, -1, 24, -1 };
  return &_AndroidArchLifecycleLiveData;
}

+ (void)initialize {
  if (self == [AndroidArchLifecycleLiveData class]) {
    JreStrongAssignAndConsume(&AndroidArchLifecycleLiveData_NOT_SET, new_NSObject_init());
    JreStrongAssignAndConsume(&AndroidArchLifecycleLiveData_ALWAYS_ON, new_AndroidArchLifecycleLiveData_1_init());
    J2OBJC_SET_INITIALIZED(AndroidArchLifecycleLiveData)
  }
}

@end

void AndroidArchLifecycleLiveData_init(AndroidArchLifecycleLiveData *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mDataLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->mObservers_, new_AndroidArchCoreInternalSafeIterableMap_init());
  self->mActiveCount_ = 0;
  JreVolatileStrongAssign(&self->mData_, AndroidArchLifecycleLiveData_NOT_SET);
  JreVolatileStrongAssign(&self->mPendingData_, AndroidArchLifecycleLiveData_NOT_SET);
  self->mVersion_ = AndroidArchLifecycleLiveData_START_VERSION;
  JreStrongAssignAndConsume(&self->mPostValueRunnable_, new_AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(self));
}

void AndroidArchLifecycleLiveData_considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(AndroidArchLifecycleLiveData *self, AndroidArchLifecycleLiveData_LifecycleBoundObserver *observer) {
  if (!((AndroidArchLifecycleLiveData_LifecycleBoundObserver *) nil_chk(observer))->active_) {
    return;
  }
  if (!AndroidArchLifecycleLiveData_isActiveStateWithAndroidArchLifecycleLifecycle_State_([((AndroidArchLifecycleLifecycle *) nil_chk([((id<AndroidArchLifecycleLifecycleOwner>) nil_chk(observer->owner_)) getLifecycle])) getCurrentState])) {
    [observer activeStateChangedWithBoolean:false];
    return;
  }
  if (observer->lastVersion_ >= self->mVersion_) {
    return;
  }
  observer->lastVersion_ = self->mVersion_;
  [((id<AndroidArchLifecycleObserver>) nil_chk(observer->observer_)) onChangedWithId:JreLoadVolatileId(&self->mData_)];
}

void AndroidArchLifecycleLiveData_dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(AndroidArchLifecycleLiveData *self, AndroidArchLifecycleLiveData_LifecycleBoundObserver *initiator) {
  if (self->mDispatchingValue_) {
    self->mDispatchInvalidated_ = true;
    return;
  }
  self->mDispatchingValue_ = true;
  do {
    self->mDispatchInvalidated_ = false;
    if (initiator != nil) {
      AndroidArchLifecycleLiveData_considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(self, initiator);
      initiator = nil;
    }
    else {
      for (id<JavaUtilIterator> iterator = [((AndroidArchCoreInternalSafeIterableMap *) nil_chk(self->mObservers_)) iteratorWithAdditions]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
        AndroidArchLifecycleLiveData_considerNotifyWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(self, [((id<JavaUtilMap_Entry>) nil_chk([iterator next])) getValue]);
        if (self->mDispatchInvalidated_) {
          break;
        }
      }
    }
  }
  while (self->mDispatchInvalidated_);
  self->mDispatchingValue_ = false;
}

jboolean AndroidArchLifecycleLiveData_isActiveStateWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state) {
  AndroidArchLifecycleLiveData_initialize();
  return [((AndroidArchLifecycleLifecycle_State *) nil_chk(state)) isAtLeastWithAndroidArchLifecycleLifecycle_State:JreLoadEnum(AndroidArchLifecycleLifecycle_State, STARTED)];
}

void AndroidArchLifecycleLiveData_assertMainThreadWithNSString_(AndroidArchLifecycleLiveData *self, NSString *methodName) {
  if (![((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) isMainThread]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Cannot invoke ", methodName, @" on a background thread"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleLiveData)

@implementation AndroidArchLifecycleLiveData_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchLifecycleLiveData_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidArchLifecycleLifecycleRegistry *)init__ {
  return AndroidArchLifecycleLiveData_1_init__(self);
}

- (AndroidArchLifecycleLifecycle *)getLifecycle {
  return mRegistry_;
}

- (void)dealloc {
  RELEASE_(mRegistry_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycleRegistry;", 0x2, 0, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(getLifecycle);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRegistry_", "LAndroidArchLifecycleLifecycleRegistry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LAndroidArchLifecycleLiveData;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLiveData_1 = { "", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x8018, 3, 1, 1, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleLiveData_1;
}

@end

void AndroidArchLifecycleLiveData_1_init(AndroidArchLifecycleLiveData_1 *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mRegistry_, AndroidArchLifecycleLiveData_1_init__(self));
}

AndroidArchLifecycleLiveData_1 *new_AndroidArchLifecycleLiveData_1_init() {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLiveData_1, init)
}

AndroidArchLifecycleLiveData_1 *create_AndroidArchLifecycleLiveData_1_init() {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLiveData_1, init)
}

AndroidArchLifecycleLifecycleRegistry *AndroidArchLifecycleLiveData_1_init__(AndroidArchLifecycleLiveData_1 *self) {
  __unused AndroidArchLifecycleLifecycleRegistry *registry = create_AndroidArchLifecycleLifecycleRegistry_initWithAndroidArchLifecycleLifecycleOwner_(self);
  [registry handleLifecycleEventWithAndroidArchLifecycleLifecycle_Event:JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_CREATE)];
  [registry handleLifecycleEventWithAndroidArchLifecycleLifecycle_Event:JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_START)];
  [registry handleLifecycleEventWithAndroidArchLifecycleLifecycle_Event:JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_RESUME)];
  return registry;
}

@implementation AndroidArchLifecycleLiveData_2

- (instancetype)initWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData *)outer$ {
  AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(self, outer$);
  return self;
}

- (void)run {
  __unused id newValue;
  @synchronized(this$0_->mDataLock_) {
    newValue = JreRetainedLocalValue(JreLoadVolatileId(&this$0_->mPendingData_));
    JreVolatileStrongAssign(&this$0_->mPendingData_, JreLoadStatic(AndroidArchLifecycleLiveData, NOT_SET));
  }
  [this$0_ setValueWithId:newValue];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchLifecycleLiveData:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidArchLifecycleLiveData;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Landroid/arch/lifecycle/LiveData<TT;>;", "LAndroidArchLifecycleLiveData;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLiveData_2 = { "", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleLiveData_2;
}

@end

void AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData_2 *self, AndroidArchLifecycleLiveData *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidArchLifecycleLiveData_2 *new_AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData *outer$) {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLiveData_2, initWithAndroidArchLifecycleLiveData_, outer$)
}

AndroidArchLifecycleLiveData_2 *create_AndroidArchLifecycleLiveData_2_initWithAndroidArchLifecycleLiveData_(AndroidArchLifecycleLiveData *outer$) {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLiveData_2, initWithAndroidArchLifecycleLiveData_, outer$)
}

@implementation AndroidArchLifecycleLiveData_LifecycleBoundObserver

- (instancetype)initWithAndroidArchLifecycleLiveData:(AndroidArchLifecycleLiveData *)outer$
              withAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)owner
                    withAndroidArchLifecycleObserver:(id<AndroidArchLifecycleObserver>)observer {
  AndroidArchLifecycleLiveData_LifecycleBoundObserver_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_(self, outer$, owner, observer);
  return self;
}

- (void)onStateChangedWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)source
                     withAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event {
  if ([((AndroidArchLifecycleLifecycle *) nil_chk([((id<AndroidArchLifecycleLifecycleOwner>) nil_chk(owner_)) getLifecycle])) getCurrentState] == JreLoadEnum(AndroidArchLifecycleLifecycle_State, DESTROYED)) {
    [this$0_ removeObserverWithAndroidArchLifecycleObserver:observer_];
    return;
  }
  [self activeStateChangedWithBoolean:AndroidArchLifecycleLiveData_isActiveStateWithAndroidArchLifecycleLifecycle_State_([((AndroidArchLifecycleLifecycle *) nil_chk([owner_ getLifecycle])) getCurrentState])];
}

- (void)activeStateChangedWithBoolean:(jboolean)newActive {
  if (newActive == active_) {
    return;
  }
  active_ = newActive;
  __unused jboolean wasInactive = this$0_->mActiveCount_ == 0;
  this$0_->mActiveCount_ += active_ ? 1 : -1;
  if (wasInactive && active_) {
    [this$0_ onActive];
  }
  if (this$0_->mActiveCount_ == 0 && !active_) {
    [this$0_ onInactive];
  }
  if (active_) {
    AndroidArchLifecycleLiveData_dispatchingValueWithAndroidArchLifecycleLiveData_LifecycleBoundObserver_(this$0_, self);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(owner_);
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchLifecycleLiveData:withAndroidArchLifecycleLifecycleOwner:withAndroidArchLifecycleObserver:);
  methods[1].selector = @selector(onStateChangedWithAndroidArchLifecycleLifecycleOwner:withAndroidArchLifecycleLifecycle_Event:);
  methods[2].selector = @selector(activeStateChangedWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidArchLifecycleLiveData;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "owner_", "LAndroidArchLifecycleLifecycleOwner;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "observer_", "LAndroidArchLifecycleObserver;", .constantValue.asLong = 0, 0x11, -1, -1, 7, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lastVersion_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchLifecycleLifecycleOwner;LAndroidArchLifecycleObserver;", "(Landroid/arch/lifecycle/LifecycleOwner;Landroid/arch/lifecycle/Observer<TT;>;)V", "onStateChanged", "LAndroidArchLifecycleLifecycleOwner;LAndroidArchLifecycleLifecycle_Event;", "activeStateChanged", "Z", "Landroid/arch/lifecycle/LiveData<TT;>;", "Landroid/arch/lifecycle/Observer<TT;>;", "LAndroidArchLifecycleLiveData;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLiveData_LifecycleBoundObserver = { "LifecycleBoundObserver", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x0, 3, 5, 8, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleLiveData_LifecycleBoundObserver;
}

@end

void AndroidArchLifecycleLiveData_LifecycleBoundObserver_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData_LifecycleBoundObserver *self, AndroidArchLifecycleLiveData *outer$, id<AndroidArchLifecycleLifecycleOwner> owner, id<AndroidArchLifecycleObserver> observer) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->lastVersion_ = AndroidArchLifecycleLiveData_START_VERSION;
  JreStrongAssign(&self->owner_, owner);
  JreStrongAssign(&self->observer_, observer);
}

AndroidArchLifecycleLiveData_LifecycleBoundObserver *new_AndroidArchLifecycleLiveData_LifecycleBoundObserver_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *outer$, id<AndroidArchLifecycleLifecycleOwner> owner, id<AndroidArchLifecycleObserver> observer) {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLiveData_LifecycleBoundObserver, initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_, outer$, owner, observer)
}

AndroidArchLifecycleLiveData_LifecycleBoundObserver *create_AndroidArchLifecycleLiveData_LifecycleBoundObserver_initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_(AndroidArchLifecycleLiveData *outer$, id<AndroidArchLifecycleLifecycleOwner> owner, id<AndroidArchLifecycleObserver> observer) {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLiveData_LifecycleBoundObserver, initWithAndroidArchLifecycleLiveData_withAndroidArchLifecycleLifecycleOwner_withAndroidArchLifecycleObserver_, outer$, owner, observer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleLiveData_LifecycleBoundObserver)
