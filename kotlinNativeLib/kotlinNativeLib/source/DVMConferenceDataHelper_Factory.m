//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATAppPrefs.h"
#include "DDATDatabaseHelper.h"
#include "DVMConferenceDataHelper.h"
#include "DVMConferenceDataHelper_Factory.h"
#include "DaggerInternalFactory.h"
#include "J2ObjC_source.h"
#include "javax/inject/Provider.h"

@interface DVMConferenceDataHelper_Factory () {
 @public
  id<JavaxInjectProvider> appPrefsProvider_;
  id<JavaxInjectProvider> helperProvider_;
}

@end

J2OBJC_FIELD_SETTER(DVMConferenceDataHelper_Factory, appPrefsProvider_, id<JavaxInjectProvider>)
J2OBJC_FIELD_SETTER(DVMConferenceDataHelper_Factory, helperProvider_, id<JavaxInjectProvider>)

@implementation DVMConferenceDataHelper_Factory

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider
                    withJavaxInjectProvider:(id<JavaxInjectProvider>)helperProvider {
  DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(self, appPrefsProvider, helperProvider);
  return self;
}

- (DVMConferenceDataHelper *)get {
  return create_DVMConferenceDataHelper_initWithDDATAppPrefs_withDDATDatabaseHelper_([((id<JavaxInjectProvider>) nil_chk(appPrefsProvider_)) get], [((id<JavaxInjectProvider>) nil_chk(helperProvider_)) get]);
}

+ (id<DaggerInternalFactory>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider
                                   withJavaxInjectProvider:(id<JavaxInjectProvider>)helperProvider {
  return DVMConferenceDataHelper_Factory_createWithJavaxInjectProvider_withJavaxInjectProvider_(appPrefsProvider, helperProvider);
}

- (void)dealloc {
  RELEASE_(appPrefsProvider_);
  RELEASE_(helperProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDVMConferenceDataHelper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDaggerInternalFactory;", 0x9, 2, 0, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:withJavaxInjectProvider:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(createWithJavaxInjectProvider:withJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "appPrefsProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "helperProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;LJavaxInjectProvider;", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DatabaseHelper;>;)V", "create", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DatabaseHelper;>;)Ldagger/internal/Factory<Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataHelper;>;", "Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/AppPrefs;>;", "Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DatabaseHelper;>;", "Ljava/lang/Object;Ldagger/internal/Factory<Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataHelper;>;" };
  static const J2ObjcClassInfo _DVMConferenceDataHelper_Factory = { "ConferenceDataHelper_Factory", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, 6, -1 };
  return &_DVMConferenceDataHelper_Factory;
}

@end

void DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(DVMConferenceDataHelper_Factory *self, id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider) {
  NSObject_init(self);
  JreAssert(appPrefsProvider != nil, @"co/touchlab/droidconandroid/shared/viewmodel/ConferenceDataHelper_Factory.java:20 condition failed: assert appPrefsProvider != null;");
  JreStrongAssign(&self->appPrefsProvider_, appPrefsProvider);
  JreAssert(helperProvider != nil, @"co/touchlab/droidconandroid/shared/viewmodel/ConferenceDataHelper_Factory.java:22 condition failed: assert helperProvider != null;");
  JreStrongAssign(&self->helperProvider_, helperProvider);
}

DVMConferenceDataHelper_Factory *new_DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider) {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_Factory, initWithJavaxInjectProvider_withJavaxInjectProvider_, appPrefsProvider, helperProvider)
}

DVMConferenceDataHelper_Factory *create_DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_Factory, initWithJavaxInjectProvider_withJavaxInjectProvider_, appPrefsProvider, helperProvider)
}

id<DaggerInternalFactory> DVMConferenceDataHelper_Factory_createWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider) {
  DVMConferenceDataHelper_Factory_initialize();
  return create_DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(appPrefsProvider, helperProvider);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataHelper_Factory)
