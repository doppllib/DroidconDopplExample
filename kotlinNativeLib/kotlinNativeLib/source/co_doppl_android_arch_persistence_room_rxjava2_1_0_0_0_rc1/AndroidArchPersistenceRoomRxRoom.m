//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorArchTaskExecutor.h"
#include "AndroidArchPersistenceRoomInvalidationTracker.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidArchPersistenceRoomRxRoom.h"
#include "IOSObjectArray.h"
#include "IoReactivexBackpressureStrategy.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFlowableEmitter.h"
#include "IoReactivexFlowableOnSubscribe.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexFunctionsPredicate.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

inline IoReactivexScheduler *AndroidArchPersistenceRoomRxRoom_get_sAppToolkitIOScheduler();
inline IoReactivexScheduler *AndroidArchPersistenceRoomRxRoom_set_sAppToolkitIOScheduler(IoReactivexScheduler *value);
static IoReactivexScheduler *AndroidArchPersistenceRoomRxRoom_sAppToolkitIOScheduler;
J2OBJC_STATIC_FIELD_OBJ(AndroidArchPersistenceRoomRxRoom, sAppToolkitIOScheduler, IoReactivexScheduler *)

@interface AndroidArchPersistenceRoomRxRoom_1 : NSObject < IoReactivexFlowableOnSubscribe > {
 @public
  IOSObjectArray *val$tableNames_;
  AndroidArchPersistenceRoomRoomDatabase *val$database_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)capture$0
withAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)capture$1;

- (void)subscribeWithIoReactivexFlowableEmitter:(id<IoReactivexFlowableEmitter>)emitter;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_1)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRxRoom_1 *self, IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1 *new_AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1 *create_AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1);

@interface AndroidArchPersistenceRoomRxRoom_1_1 : AndroidArchPersistenceRoomInvalidationTracker_Observer {
 @public
  id<IoReactivexFlowableEmitter> val$emitter_;
}

- (instancetype)initWithIoReactivexFlowableEmitter:(id<IoReactivexFlowableEmitter>)capture$0
                                 withNSStringArray:(IOSObjectArray *)arg0;

- (void)onInvalidatedWithJavaUtilSet:(id<JavaUtilSet> __nonnull)tables;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_1_1)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(AndroidArchPersistenceRoomRxRoom_1_1 *self, id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1_1 *new_AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1_1 *create_AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0);

@interface AndroidArchPersistenceRoomRxRoom_1_2 : NSObject < IoReactivexFunctionsAction > {
 @public
  AndroidArchPersistenceRoomRxRoom_1 *this$0_;
  AndroidArchPersistenceRoomInvalidationTracker_Observer *val$observer_;
}

- (instancetype)initWithAndroidArchPersistenceRoomRxRoom_1:(AndroidArchPersistenceRoomRxRoom_1 *)outer$
withAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_1_2)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1_2 *self, AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1_2 *new_AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_1_2 *create_AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0);

@interface AndroidArchPersistenceRoomRxRoom_4 : NSObject < IoReactivexFunctionsFunction > {
 @public
  id<JavaUtilConcurrentCallable> val$callable_;
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0;

- (AndroidArchPersistenceRoomRxRoom_Optional *)applyWithId:(id __nonnull)o;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_4)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(AndroidArchPersistenceRoomRxRoom_4 *self, id<JavaUtilConcurrentCallable> capture$0);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_4 *new_AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_4 *create_AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0);

@interface AndroidArchPersistenceRoomRxRoom_3 : NSObject < IoReactivexFunctionsPredicate >

- (instancetype)init;

- (jboolean)testWithId:(AndroidArchPersistenceRoomRxRoom_Optional * __nonnull)optional;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_3)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_3_init(AndroidArchPersistenceRoomRxRoom_3 *self);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_3 *new_AndroidArchPersistenceRoomRxRoom_3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_3 *create_AndroidArchPersistenceRoomRxRoom_3_init();

@interface AndroidArchPersistenceRoomRxRoom_2 : NSObject < IoReactivexFunctionsFunction >

- (instancetype)init;

- (id)applyWithId:(AndroidArchPersistenceRoomRxRoom_Optional * __nonnull)optional;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_2)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_2_init(AndroidArchPersistenceRoomRxRoom_2 *self);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_2 *new_AndroidArchPersistenceRoomRxRoom_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_2 *create_AndroidArchPersistenceRoomRxRoom_2_init();

@interface AndroidArchPersistenceRoomRxRoom_5 : IoReactivexScheduler

- (instancetype)init;

- (IoReactivexScheduler_Worker *)createWorker;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_5)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_5_init(AndroidArchPersistenceRoomRxRoom_5 *self);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_5 *new_AndroidArchPersistenceRoomRxRoom_5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_5 *create_AndroidArchPersistenceRoomRxRoom_5_init();

@interface AndroidArchPersistenceRoomRxRoom_5_1 : IoReactivexScheduler_Worker {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$mDisposed_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                            withLong:(jlong)delay
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

- (void)dispose;

- (jboolean)isDisposed;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_5_1)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(AndroidArchPersistenceRoomRxRoom_5_1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_5_1 *new_AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_5_1 *create_AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface AndroidArchPersistenceRoomRxRoom_DisposableRunnable : NSObject < IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<JavaLangRunnable> mActual_;
  volatile_jboolean mDisposed_;
  JavaUtilConcurrentAtomicAtomicBoolean *mGlobalDisposed_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)actual
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)globalDisposed;

- (void)dispose;

- (jboolean)isDisposed;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomRxRoom_DisposableRunnable)

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRxRoom_DisposableRunnable, mActual_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRxRoom_DisposableRunnable, mGlobalDisposed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(AndroidArchPersistenceRoomRxRoom_DisposableRunnable *self, id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed);

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_DisposableRunnable *new_AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRxRoom_DisposableRunnable *create_AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceRoomRxRoom_DisposableRunnable)

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceRoomRxRoom)

id AndroidArchPersistenceRoomRxRoom_NOTHING;

@implementation AndroidArchPersistenceRoomRxRoom

+ (id)NOTHING {
  return AndroidArchPersistenceRoomRxRoom_NOTHING;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRxRoom_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IoReactivexFlowable *)createFlowableWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)database
                                                                withNSStringArray:(IOSObjectArray *)tableNames {
  return AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(database, tableNames);
}

+ (IoReactivexFlowable *)createFlowableWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)database
                                                                withNSStringArray:(IOSObjectArray *)tableNames
                                                   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_withJavaUtilConcurrentCallable_(database, tableNames, callable);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x89, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x9, 0, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:);
  methods[2].selector = @selector(createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:withJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOTHING", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "sAppToolkitIOScheduler", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "createFlowable", "LAndroidArchPersistenceRoomRoomDatabase;[LNSString;", "(Landroid/arch/persistence/room/RoomDatabase;[Ljava/lang/String;)Lio/reactivex/Flowable<Ljava/lang/Object;>;", "LAndroidArchPersistenceRoomRoomDatabase;[LNSString;LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Landroid/arch/persistence/room/RoomDatabase;[Ljava/lang/String;Ljava/util/concurrent/Callable<TT;>;)Lio/reactivex/Flowable<TT;>;", &AndroidArchPersistenceRoomRxRoom_NOTHING, &AndroidArchPersistenceRoomRxRoom_sAppToolkitIOScheduler, "LAndroidArchPersistenceRoomRxRoom_DisposableRunnable;LAndroidArchPersistenceRoomRxRoom_Optional;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom = { "RxRoom", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, 7, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceRoomRxRoom class]) {
    JreStrongAssignAndConsume(&AndroidArchPersistenceRoomRxRoom_NOTHING, new_NSObject_init());
    JreStrongAssignAndConsume(&AndroidArchPersistenceRoomRxRoom_sAppToolkitIOScheduler, new_AndroidArchPersistenceRoomRxRoom_5_init());
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceRoomRxRoom)
  }
}

@end

void AndroidArchPersistenceRoomRxRoom_init(AndroidArchPersistenceRoomRxRoom *self) {
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom *new_AndroidArchPersistenceRoomRxRoom_init() {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom, init)
}

AndroidArchPersistenceRoomRxRoom *create_AndroidArchPersistenceRoomRxRoom_init() {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom, init)
}

IoReactivexFlowable *AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(AndroidArchPersistenceRoomRoomDatabase *database, IOSObjectArray *tableNames) {
  AndroidArchPersistenceRoomRxRoom_initialize();
  return IoReactivexFlowable_createWithIoReactivexFlowableOnSubscribe_withIoReactivexBackpressureStrategy_(create_AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(tableNames, database), JreLoadEnum(IoReactivexBackpressureStrategy, LATEST));
}

IoReactivexFlowable *AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_withJavaUtilConcurrentCallable_(AndroidArchPersistenceRoomRoomDatabase *database, IOSObjectArray *tableNames, id<JavaUtilConcurrentCallable> callable) {
  AndroidArchPersistenceRoomRxRoom_initialize();
  return [((IoReactivexFlowable *) nil_chk([((IoReactivexFlowable *) nil_chk([((IoReactivexFlowable *) nil_chk([((IoReactivexFlowable *) nil_chk(AndroidArchPersistenceRoomRxRoom_createFlowableWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(database, tableNames))) observeOnWithIoReactivexScheduler:AndroidArchPersistenceRoomRxRoom_sAppToolkitIOScheduler])) mapWithIoReactivexFunctionsFunction:create_AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(callable)])) filterWithIoReactivexFunctionsPredicate:create_AndroidArchPersistenceRoomRxRoom_3_init()])) mapWithIoReactivexFunctionsFunction:create_AndroidArchPersistenceRoomRxRoom_2_init()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRxRoom)

@implementation AndroidArchPersistenceRoomRxRoom_1

- (instancetype)initWithNSStringArray:(IOSObjectArray *)capture$0
withAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)capture$1 {
  AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(self, capture$0, capture$1);
  return self;
}

- (void)subscribeWithIoReactivexFlowableEmitter:(id<IoReactivexFlowableEmitter>)emitter {
  AndroidArchPersistenceRoomInvalidationTracker_Observer *observer = create_AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(emitter, val$tableNames_);
  if (![((id<IoReactivexFlowableEmitter>) nil_chk(emitter)) isCancelled]) {
    [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk([((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(val$database_)) getInvalidationTracker])) addObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:observer];
    [emitter setDisposableWithIoReactivexDisposablesDisposable:IoReactivexDisposablesDisposables_fromActionWithIoReactivexFunctionsAction_(create_AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(self, observer))];
  }
  if (![emitter isCancelled]) {
    [emitter onNextWithId:JreLoadStatic(AndroidArchPersistenceRoomRxRoom, NOTHING)];
  }
}

- (void)dealloc {
  RELEASE_(val$tableNames_);
  RELEASE_(val$database_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:withAndroidArchPersistenceRoomRoomDatabase:);
  methods[1].selector = @selector(subscribeWithIoReactivexFlowableEmitter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$tableNames_", "[LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$database_", "LAndroidArchPersistenceRoomRoomDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "subscribe", "LIoReactivexFlowableEmitter;", "LJavaLangException;", "(Lio/reactivex/FlowableEmitter<Ljava/lang/Object;>;)V", "LAndroidArchPersistenceRoomRxRoom;", "createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:", "Ljava/lang/Object;Lio/reactivex/FlowableOnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_1 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, 6, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_1;
}

@end

void AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomRxRoom_1 *self, IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1) {
  JreStrongAssign(&self->val$tableNames_, capture$0);
  JreStrongAssign(&self->val$database_, capture$1);
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom_1 *new_AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_1, initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_, capture$0, capture$1)
}

AndroidArchPersistenceRoomRxRoom_1 *create_AndroidArchPersistenceRoomRxRoom_1_initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_(IOSObjectArray *capture$0, AndroidArchPersistenceRoomRoomDatabase *capture$1) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_1, initWithNSStringArray_withAndroidArchPersistenceRoomRoomDatabase_, capture$0, capture$1)
}

@implementation AndroidArchPersistenceRoomRxRoom_1_1

- (instancetype)initWithIoReactivexFlowableEmitter:(id<IoReactivexFlowableEmitter>)capture$0
                                 withNSStringArray:(IOSObjectArray *)arg0 {
  AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(self, capture$0, arg0);
  return self;
}

- (void)onInvalidatedWithJavaUtilSet:(id<JavaUtilSet> __nonnull)tables {
  if (![((id<IoReactivexFlowableEmitter>) nil_chk(val$emitter_)) isCancelled]) {
    [val$emitter_ onNextWithId:JreLoadStatic(AndroidArchPersistenceRoomRxRoom, NOTHING)];
  }
}

- (void)dealloc {
  RELEASE_(val$emitter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowableEmitter:withNSStringArray:);
  methods[1].selector = @selector(onInvalidatedWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$emitter_", "LIoReactivexFlowableEmitter;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "onInvalidated", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "Lio/reactivex/FlowableEmitter<Ljava/lang/Object;>;", "LAndroidArchPersistenceRoomRxRoom_1;", "subscribeWithIoReactivexFlowableEmitter:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_1_1 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 1, 5, -1, 6, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_1_1;
}

@end

void AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(AndroidArchPersistenceRoomRxRoom_1_1 *self, id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0) {
  JreStrongAssign(&self->val$emitter_, capture$0);
  AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSStringArray_(self, arg0);
}

AndroidArchPersistenceRoomRxRoom_1_1 *new_AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_1_1, initWithIoReactivexFlowableEmitter_withNSStringArray_, capture$0, arg0)
}

AndroidArchPersistenceRoomRxRoom_1_1 *create_AndroidArchPersistenceRoomRxRoom_1_1_initWithIoReactivexFlowableEmitter_withNSStringArray_(id<IoReactivexFlowableEmitter> capture$0, IOSObjectArray *arg0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_1_1, initWithIoReactivexFlowableEmitter_withNSStringArray_, capture$0, arg0)
}

@implementation AndroidArchPersistenceRoomRxRoom_1_2

- (instancetype)initWithAndroidArchPersistenceRoomRxRoom_1:(AndroidArchPersistenceRoomRxRoom_1 *)outer$
withAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer *)capture$0 {
  AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(self, outer$, capture$0);
  return self;
}

- (void)run {
  [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk([((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(this$0_->val$database_)) getInvalidationTracker])) removeObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:val$observer_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRxRoom_1:withAndroidArchPersistenceRoomInvalidationTracker_Observer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidArchPersistenceRoomRxRoom_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LAndroidArchPersistenceRoomInvalidationTracker_Observer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LAndroidArchPersistenceRoomRxRoom_1;", "subscribeWithIoReactivexFlowableEmitter:" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_1_2 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_1_2;
}

@end

void AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1_2 *self, AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom_1_2 *new_AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_1_2, initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_, outer$, capture$0)
}

AndroidArchPersistenceRoomRxRoom_1_2 *create_AndroidArchPersistenceRoomRxRoom_1_2_initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomRxRoom_1 *outer$, AndroidArchPersistenceRoomInvalidationTracker_Observer *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_1_2, initWithAndroidArchPersistenceRoomRxRoom_1_withAndroidArchPersistenceRoomInvalidationTracker_Observer_, outer$, capture$0)
}

@implementation AndroidArchPersistenceRoomRxRoom_4

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0 {
  AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(self, capture$0);
  return self;
}

- (AndroidArchPersistenceRoomRxRoom_Optional *)applyWithId:(id __nonnull)o {
  id data = [((id<JavaUtilConcurrentCallable>) nil_chk(val$callable_)) call];
  return create_AndroidArchPersistenceRoomRxRoom_Optional_initWithId_(data);
}

- (void)dealloc {
  RELEASE_(val$callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRxRoom_Optional;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "apply", "LNSObject;", "LJavaLangException;", "(Ljava/lang/Object;)Landroid/arch/persistence/room/RxRoom$Optional<TT;>;", "Ljava/util/concurrent/Callable<TT;>;", "LAndroidArchPersistenceRoomRxRoom;", "createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:withJavaUtilConcurrentCallable:", "Ljava/lang/Object;Lio/reactivex/functions/Function<Ljava/lang/Object;Landroid/arch/persistence/room/RxRoom$Optional<TT;>;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_4 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 1, 5, -1, 6, 7, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_4;
}

@end

void AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(AndroidArchPersistenceRoomRxRoom_4 *self, id<JavaUtilConcurrentCallable> capture$0) {
  JreStrongAssign(&self->val$callable_, capture$0);
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom_4 *new_AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_4, initWithJavaUtilConcurrentCallable_, capture$0)
}

AndroidArchPersistenceRoomRxRoom_4 *create_AndroidArchPersistenceRoomRxRoom_4_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_4, initWithJavaUtilConcurrentCallable_, capture$0)
}

@implementation AndroidArchPersistenceRoomRxRoom_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRxRoom_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)testWithId:(AndroidArchPersistenceRoomRxRoom_Optional * __nonnull)optional {
  return ((AndroidArchPersistenceRoomRxRoom_Optional *) nil_chk(optional))->mValue_ != nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "test", "LAndroidArchPersistenceRoomRxRoom_Optional;", "LJavaLangException;", "(Landroid/arch/persistence/room/RxRoom$Optional<TT;>;)Z", "LAndroidArchPersistenceRoomRxRoom;", "createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:withJavaUtilConcurrentCallable:", "Ljava/lang/Object;Lio/reactivex/functions/Predicate<Landroid/arch/persistence/room/RxRoom$Optional<TT;>;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_3 = { "", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 4, -1, 5, 6, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_3;
}

@end

void AndroidArchPersistenceRoomRxRoom_3_init(AndroidArchPersistenceRoomRxRoom_3 *self) {
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom_3 *new_AndroidArchPersistenceRoomRxRoom_3_init() {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_3, init)
}

AndroidArchPersistenceRoomRxRoom_3 *create_AndroidArchPersistenceRoomRxRoom_3_init() {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_3, init)
}

@implementation AndroidArchPersistenceRoomRxRoom_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRxRoom_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)applyWithId:(AndroidArchPersistenceRoomRxRoom_Optional * __nonnull)optional {
  return ((AndroidArchPersistenceRoomRxRoom_Optional *) nil_chk(optional))->mValue_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LAndroidArchPersistenceRoomRxRoom_Optional;", "LJavaLangException;", "(Landroid/arch/persistence/room/RxRoom$Optional<TT;>;)TT;", "LAndroidArchPersistenceRoomRxRoom;", "createFlowableWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:withJavaUtilConcurrentCallable:", "Ljava/lang/Object;Lio/reactivex/functions/Function<Landroid/arch/persistence/room/RxRoom$Optional<TT;>;TT;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_2 = { "", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 4, -1, 5, 6, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_2;
}

@end

void AndroidArchPersistenceRoomRxRoom_2_init(AndroidArchPersistenceRoomRxRoom_2 *self) {
  NSObject_init(self);
}

AndroidArchPersistenceRoomRxRoom_2 *new_AndroidArchPersistenceRoomRxRoom_2_init() {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_2, init)
}

AndroidArchPersistenceRoomRxRoom_2 *create_AndroidArchPersistenceRoomRxRoom_2_init() {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_2, init)
}

@implementation AndroidArchPersistenceRoomRxRoom_5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRxRoom_5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IoReactivexScheduler_Worker *)createWorker {
  JavaUtilConcurrentAtomicAtomicBoolean *mDisposed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  return create_AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(mDisposed);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRxRoom;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_5 = { "", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_5;
}

@end

void AndroidArchPersistenceRoomRxRoom_5_init(AndroidArchPersistenceRoomRxRoom_5 *self) {
  IoReactivexScheduler_init(self);
}

AndroidArchPersistenceRoomRxRoom_5 *new_AndroidArchPersistenceRoomRxRoom_5_init() {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_5, init)
}

AndroidArchPersistenceRoomRxRoom_5 *create_AndroidArchPersistenceRoomRxRoom_5_init() {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_5, init)
}

@implementation AndroidArchPersistenceRoomRxRoom_5_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                            withLong:(jlong)delay
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit {
  AndroidArchPersistenceRoomRxRoom_DisposableRunnable *disposable = create_AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(run, val$mDisposed_);
  [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) executeOnDiskIOWithJavaLangRunnable:run];
  return disposable;
}

- (void)dispose {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$mDisposed_)) setWithBoolean:true];
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$mDisposed_)) get];
}

- (void)dealloc {
  RELEASE_(val$mDisposed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mDisposed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "LAndroidArchPersistenceRoomRxRoom_5;", "createWorker" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_5_1 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 4, 1, 2, -1, 3, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_5_1;
}

@end

void AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(AndroidArchPersistenceRoomRxRoom_5_1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$mDisposed_, capture$0);
  IoReactivexScheduler_Worker_init(self);
}

AndroidArchPersistenceRoomRxRoom_5_1 *new_AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_5_1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

AndroidArchPersistenceRoomRxRoom_5_1 *create_AndroidArchPersistenceRoomRxRoom_5_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_5_1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation AndroidArchPersistenceRoomRxRoom_DisposableRunnable

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)actual
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)globalDisposed {
  AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(self, actual, globalDisposed);
  return self;
}

- (void)dispose {
  JreAssignVolatileBoolean(&mDisposed_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&mDisposed_) || [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mGlobalDisposed_)) get];
}

- (void)run {
  if (![self isDisposed]) {
    [((id<JavaLangRunnable>) nil_chk(mActual_)) run];
  }
}

- (void)dealloc {
  RELEASE_(mActual_);
  RELEASE_(mGlobalDisposed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mActual_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDisposed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mGlobalDisposed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;LJavaUtilConcurrentAtomicAtomicBoolean;", "LAndroidArchPersistenceRoomRxRoom;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_DisposableRunnable = { "DisposableRunnable", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0xa, 4, 3, 1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_DisposableRunnable;
}

@end

void AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(AndroidArchPersistenceRoomRxRoom_DisposableRunnable *self, id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed) {
  NSObject_init(self);
  JreAssignVolatileBoolean(&self->mDisposed_, false);
  JreStrongAssign(&self->mActual_, actual);
  JreStrongAssign(&self->mGlobalDisposed_, globalDisposed);
}

AndroidArchPersistenceRoomRxRoom_DisposableRunnable *new_AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_DisposableRunnable, initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_, actual, globalDisposed)
}

AndroidArchPersistenceRoomRxRoom_DisposableRunnable *create_AndroidArchPersistenceRoomRxRoom_DisposableRunnable_initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_(id<JavaLangRunnable> actual, JavaUtilConcurrentAtomicAtomicBoolean *globalDisposed) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_DisposableRunnable, initWithJavaLangRunnable_withJavaUtilConcurrentAtomicAtomicBoolean_, actual, globalDisposed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRxRoom_DisposableRunnable)

@implementation AndroidArchPersistenceRoomRxRoom_Optional

- (instancetype)initWithId:(id __nullable)value {
  AndroidArchPersistenceRoomRxRoom_Optional_initWithId_(self, value);
  return self;
}

- (void)dealloc {
  RELEASE_(mValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "TT;", "LAndroidArchPersistenceRoomRxRoom;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRxRoom_Optional = { "Optional", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8, 1, 1, 3, -1, -1, 4, -1 };
  return &_AndroidArchPersistenceRoomRxRoom_Optional;
}

@end

void AndroidArchPersistenceRoomRxRoom_Optional_initWithId_(AndroidArchPersistenceRoomRxRoom_Optional *self, id value) {
  NSObject_init(self);
  JreStrongAssign(&self->mValue_, value);
}

AndroidArchPersistenceRoomRxRoom_Optional *new_AndroidArchPersistenceRoomRxRoom_Optional_initWithId_(id value) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRxRoom_Optional, initWithId_, value)
}

AndroidArchPersistenceRoomRxRoom_Optional *create_AndroidArchPersistenceRoomRxRoom_Optional_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRxRoom_Optional, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRxRoom_Optional)
