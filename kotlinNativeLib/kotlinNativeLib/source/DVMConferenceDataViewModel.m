//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchLifecycleViewModel.h"
#include "AndroidArchLifecycleViewModelProvider.h"
#include "CoTouchlabDroidconandroidCrashReport.h"
#include "DDAGAppComponent.h"
#include "DDATAppPrefs.h"
#include "DUTTimeUtils.h"
#include "DVMAppManager.h"
#include "DVMConferenceDataViewModel.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexObservable.h"
#include "J2ObjC_source.h"
#include "android/util/Pair.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "javax/inject/Inject.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface DVMConferenceDataViewModel () {
 @public
  DDATAppPrefs *appPrefs_;
  IoReactivexDisposablesCompositeDisposable *compositeDisposable_;
}

- (instancetype)initWithDDATAppPrefs:(DDATAppPrefs *)appPrefs;

@end

J2OBJC_FIELD_SETTER(DVMConferenceDataViewModel, appPrefs_, DDATAppPrefs *)
J2OBJC_FIELD_SETTER(DVMConferenceDataViewModel, compositeDisposable_, IoReactivexDisposablesCompositeDisposable *)

__attribute__((unused)) static void DVMConferenceDataViewModel_initWithDDATAppPrefs_(DVMConferenceDataViewModel *self, DDATAppPrefs *appPrefs);

__attribute__((unused)) static DVMConferenceDataViewModel *new_DVMConferenceDataViewModel_initWithDDATAppPrefs_(DDATAppPrefs *appPrefs) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataViewModel *create_DVMConferenceDataViewModel_initWithDDATAppPrefs_(DDATAppPrefs *appPrefs);

@interface DVMConferenceDataViewModel_Host : NSObject

@end

@interface DVMConferenceDataViewModel_Factory () {
 @public
  jboolean allEvents_;
}

@end

__attribute__((unused)) static IOSObjectArray *DVMConferenceDataViewModel_Factory__Annotations$0();

__attribute__((unused)) static void DVMConferenceDataViewModel_AppScreens_initWithNSString_withInt_(DVMConferenceDataViewModel_AppScreens *self, NSString *__name, jint __ordinal);

@interface DVMConferenceDataViewModel_$Lambda$1 : NSObject < IoReactivexFunctionsConsumer > {
 @public
  id<DVMConferenceDataViewModel_Host> val$host_;
}

- (void)acceptWithId:(AndroidUtilPair *)datePair;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataViewModel_$Lambda$1)

__attribute__((unused)) static void DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(DVMConferenceDataViewModel_$Lambda$1 *self, id<DVMConferenceDataViewModel_Host> capture$0);

__attribute__((unused)) static DVMConferenceDataViewModel_$Lambda$1 *new_DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(id<DVMConferenceDataViewModel_Host> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataViewModel_$Lambda$1 *create_DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(id<DVMConferenceDataViewModel_Host> capture$0);

@interface DVMConferenceDataViewModel_$Lambda$2 : NSObject < IoReactivexFunctionsConsumer >

- (void)acceptWithId:(JavaLangThrowable *)throwable;

@end

J2OBJC_STATIC_INIT(DVMConferenceDataViewModel_$Lambda$2)

inline DVMConferenceDataViewModel_$Lambda$2 *DVMConferenceDataViewModel_$Lambda$2_get_instance();
static DVMConferenceDataViewModel_$Lambda$2 *DVMConferenceDataViewModel_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DVMConferenceDataViewModel_$Lambda$2, instance, DVMConferenceDataViewModel_$Lambda$2 *)

__attribute__((unused)) static void DVMConferenceDataViewModel_$Lambda$2_init(DVMConferenceDataViewModel_$Lambda$2 *self);

__attribute__((unused)) static DVMConferenceDataViewModel_$Lambda$2 *new_DVMConferenceDataViewModel_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataViewModel_$Lambda$2 *create_DVMConferenceDataViewModel_$Lambda$2_init();

@implementation DVMConferenceDataViewModel

+ (jlong)DAY_IN_MILLIS {
  return DVMConferenceDataViewModel_DAY_IN_MILLIS;
}

- (instancetype)initWithDDATAppPrefs:(DDATAppPrefs *)appPrefs {
  DVMConferenceDataViewModel_initWithDDATAppPrefs_(self, appPrefs);
  return self;
}

- (void)wireWithDVMConferenceDataViewModel_Host:(id<DVMConferenceDataViewModel_Host>)host {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(compositeDisposable_)) addWithIoReactivexDisposablesDisposable:[((IoReactivexObservable *) nil_chk([((DDATAppPrefs *) nil_chk(appPrefs_)) observeConventionDates])) subscribeWithIoReactivexFunctionsConsumer:create_DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(host) withIoReactivexFunctionsConsumer:JreLoadStatic(DVMConferenceDataViewModel_$Lambda$2, instance)]];
}

- (void)unwire {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(compositeDisposable_)) clear];
}

+ (DVMConferenceDataViewModel_Factory *)factoryWithBoolean:(jboolean)allEvents {
  return DVMConferenceDataViewModel_factoryWithBoolean_(allEvents);
}

+ (DVMConferenceDataViewModel * __nonnull)forIosWithBoolean:(jboolean)allEvents {
  return DVMConferenceDataViewModel_forIosWithBoolean_(allEvents);
}

- (DVMConferenceDataViewModel_AppScreens * __nonnull)goToScreen {
  jboolean hasSeenWelcome = [((DDATAppPrefs *) nil_chk(appPrefs_)) getHasSeenWelcome];
  if (!hasSeenWelcome) {
    return JreLoadEnum(DVMConferenceDataViewModel_AppScreens, Welcome);
  }
  else {
    return JreLoadEnum(DVMConferenceDataViewModel_AppScreens, Schedule);
  }
}

- (void)dealloc {
  RELEASE_(appPrefs_);
  RELEASE_(compositeDisposable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDVMConferenceDataViewModel_Factory;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LDVMConferenceDataViewModel;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LDVMConferenceDataViewModel_AppScreens;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDDATAppPrefs:);
  methods[1].selector = @selector(wireWithDVMConferenceDataViewModel_Host:);
  methods[2].selector = @selector(unwire);
  methods[3].selector = @selector(factoryWithBoolean:);
  methods[4].selector = @selector(forIosWithBoolean:);
  methods[5].selector = @selector(goToScreen);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DAY_IN_MILLIS", "J", .constantValue.asLong = DVMConferenceDataViewModel_DAY_IN_MILLIS, 0x19, -1, -1, -1, -1 },
    { "appPrefs_", "LDDATAppPrefs;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compositeDisposable_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDDATAppPrefs;", "wire", "LDVMConferenceDataViewModel_Host;", "factory", "Z", "forIos", "LDVMConferenceDataViewModel_Host;LDVMConferenceDataViewModel_Factory;LDVMConferenceDataViewModel_AppScreens;" };
  static const J2ObjcClassInfo _DVMConferenceDataViewModel = { "ConferenceDataViewModel", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, 6, -1, -1, -1 };
  return &_DVMConferenceDataViewModel;
}

@end

void DVMConferenceDataViewModel_initWithDDATAppPrefs_(DVMConferenceDataViewModel *self, DDATAppPrefs *appPrefs) {
  AndroidArchLifecycleViewModel_init(self);
  JreStrongAssignAndConsume(&self->compositeDisposable_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssign(&self->appPrefs_, appPrefs);
}

DVMConferenceDataViewModel *new_DVMConferenceDataViewModel_initWithDDATAppPrefs_(DDATAppPrefs *appPrefs) {
  J2OBJC_NEW_IMPL(DVMConferenceDataViewModel, initWithDDATAppPrefs_, appPrefs)
}

DVMConferenceDataViewModel *create_DVMConferenceDataViewModel_initWithDDATAppPrefs_(DDATAppPrefs *appPrefs) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataViewModel, initWithDDATAppPrefs_, appPrefs)
}

DVMConferenceDataViewModel_Factory *DVMConferenceDataViewModel_factoryWithBoolean_(jboolean allEvents) {
  DVMConferenceDataViewModel_initialize();
  DVMConferenceDataViewModel_Factory *factory = create_DVMConferenceDataViewModel_Factory_initWithBoolean_(allEvents);
  [((id<DDAGAppComponent>) nil_chk([((DVMAppManager *) nil_chk(DVMAppManager_getInstance())) getAppComponent])) injectWithDVMConferenceDataViewModel_Factory:factory];
  return factory;
}

DVMConferenceDataViewModel *DVMConferenceDataViewModel_forIosWithBoolean_(jboolean allEvents) {
  DVMConferenceDataViewModel_initialize();
  return ((DVMConferenceDataViewModel *) [((DVMConferenceDataViewModel_Factory *) nil_chk(DVMConferenceDataViewModel_factoryWithBoolean_(allEvents))) createWithIOSClass:DVMConferenceDataViewModel_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataViewModel)

@implementation DVMConferenceDataViewModel_Host

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateConferenceDatesWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "updateConferenceDates", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "LDVMConferenceDataViewModel;" };
  static const J2ObjcClassInfo _DVMConferenceDataViewModel_Host = { "Host", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_DVMConferenceDataViewModel_Host;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DVMConferenceDataViewModel_Host)

@implementation DVMConferenceDataViewModel_Factory

- (instancetype)initWithBoolean:(jboolean)allEvents {
  DVMConferenceDataViewModel_Factory_initWithBoolean_(self, allEvents);
  return self;
}

- (AndroidArchLifecycleViewModel *)createWithIOSClass:(IOSClass *)modelClass {
  return create_DVMConferenceDataViewModel_initWithDDATAppPrefs_(appPrefs_);
}

- (void)dealloc {
  RELEASE_(appPrefs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleViewModel;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(createWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "appPrefs_", "LDDATAppPrefs;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 4 },
    { "allEvents_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "create", "LIOSClass;", "<T:Landroid/arch/lifecycle/ViewModel;>(Ljava/lang/Class<TT;>;)TT;", (void *)&DVMConferenceDataViewModel_Factory__Annotations$0, "LDVMConferenceDataViewModel;" };
  static const J2ObjcClassInfo _DVMConferenceDataViewModel_Factory = { "Factory", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x9, 2, 2, 5, -1, -1, -1, -1 };
  return &_DVMConferenceDataViewModel_Factory;
}

@end

void DVMConferenceDataViewModel_Factory_initWithBoolean_(DVMConferenceDataViewModel_Factory *self, jboolean allEvents) {
  AndroidArchLifecycleViewModelProvider_NewInstanceFactory_init(self);
  self->allEvents_ = allEvents;
}

DVMConferenceDataViewModel_Factory *new_DVMConferenceDataViewModel_Factory_initWithBoolean_(jboolean allEvents) {
  J2OBJC_NEW_IMPL(DVMConferenceDataViewModel_Factory, initWithBoolean_, allEvents)
}

DVMConferenceDataViewModel_Factory *create_DVMConferenceDataViewModel_Factory_initWithBoolean_(jboolean allEvents) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataViewModel_Factory, initWithBoolean_, allEvents)
}

IOSObjectArray *DVMConferenceDataViewModel_Factory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataViewModel_Factory)

J2OBJC_INITIALIZED_DEFN(DVMConferenceDataViewModel_AppScreens)

DVMConferenceDataViewModel_AppScreens *DVMConferenceDataViewModel_AppScreens_values_[2];

@implementation DVMConferenceDataViewModel_AppScreens

+ (DVMConferenceDataViewModel_AppScreens *)Welcome {
  return JreEnum(DVMConferenceDataViewModel_AppScreens, Welcome);
}

+ (DVMConferenceDataViewModel_AppScreens *)Schedule {
  return JreEnum(DVMConferenceDataViewModel_AppScreens, Schedule);
}

+ (IOSObjectArray *)values {
  return DVMConferenceDataViewModel_AppScreens_values();
}

+ (DVMConferenceDataViewModel_AppScreens *)valueOfWithNSString:(NSString *)name {
  return DVMConferenceDataViewModel_AppScreens_valueOfWithNSString_(name);
}

- (DVMConferenceDataViewModel_AppScreens_Enum)toNSEnum {
  return (DVMConferenceDataViewModel_AppScreens_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LDVMConferenceDataViewModel_AppScreens;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDVMConferenceDataViewModel_AppScreens;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Welcome", "LDVMConferenceDataViewModel_AppScreens;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Schedule", "LDVMConferenceDataViewModel_AppScreens;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(DVMConferenceDataViewModel_AppScreens, Welcome), &JreEnum(DVMConferenceDataViewModel_AppScreens, Schedule), "LDVMConferenceDataViewModel;", "Ljava/lang/Enum<Lco/touchlab/droidconandroid/shared/viewmodel/ConferenceDataViewModel$AppScreens;>;" };
  static const J2ObjcClassInfo _DVMConferenceDataViewModel_AppScreens = { "AppScreens", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_DVMConferenceDataViewModel_AppScreens;
}

+ (void)initialize {
  if (self == [DVMConferenceDataViewModel_AppScreens class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 2; i++) {
      (DVMConferenceDataViewModel_AppScreens_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      DVMConferenceDataViewModel_AppScreens_initWithNSString_withInt_(e, JreEnumConstantName(DVMConferenceDataViewModel_AppScreens_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(DVMConferenceDataViewModel_AppScreens)
  }
}

@end

void DVMConferenceDataViewModel_AppScreens_initWithNSString_withInt_(DVMConferenceDataViewModel_AppScreens *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *DVMConferenceDataViewModel_AppScreens_values() {
  DVMConferenceDataViewModel_AppScreens_initialize();
  return [IOSObjectArray arrayWithObjects:DVMConferenceDataViewModel_AppScreens_values_ count:2 type:DVMConferenceDataViewModel_AppScreens_class_()];
}

DVMConferenceDataViewModel_AppScreens *DVMConferenceDataViewModel_AppScreens_valueOfWithNSString_(NSString *name) {
  DVMConferenceDataViewModel_AppScreens_initialize();
  for (int i = 0; i < 2; i++) {
    DVMConferenceDataViewModel_AppScreens *e = DVMConferenceDataViewModel_AppScreens_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

DVMConferenceDataViewModel_AppScreens *DVMConferenceDataViewModel_AppScreens_fromOrdinal(NSUInteger ordinal) {
  DVMConferenceDataViewModel_AppScreens_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return DVMConferenceDataViewModel_AppScreens_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataViewModel_AppScreens)

@implementation DVMConferenceDataViewModel_$Lambda$1

- (void)acceptWithId:(AndroidUtilPair *)datePair {
  JavaLangLong *start = DUTTimeUtils_sanitizeWithJavaUtilDate_([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(DUTTimeUtils, LOCAL_DATE_FORMAT))) get])) parseWithNSString:((AndroidUtilPair *) nil_chk(datePair))->first_]);
  JavaLangLong *end = DUTTimeUtils_sanitizeWithJavaUtilDate_([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(DUTTimeUtils, LOCAL_DATE_FORMAT))) get])) parseWithNSString:datePair->second_]);
  id<JavaUtilList> dateLongs = create_JavaUtilArrayList_init();
  while ([((JavaLangLong *) nil_chk(start)) longLongValue] <= [((JavaLangLong *) nil_chk(end)) longLongValue]) {
    [dateLongs addWithId:start];
    JreBoxedPlusAssignLong(&start, DVMConferenceDataViewModel_DAY_IN_MILLIS);
  }
  [((id<DVMConferenceDataViewModel_Host>) nil_chk(val$host_)) updateConferenceDatesWithJavaUtilList:dateLongs];
}

- (void)dealloc {
  RELEASE_(val$host_);
  [super dealloc];
}

@end

void DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(DVMConferenceDataViewModel_$Lambda$1 *self, id<DVMConferenceDataViewModel_Host> capture$0) {
  JreStrongAssign(&self->val$host_, capture$0);
  NSObject_init(self);
}

DVMConferenceDataViewModel_$Lambda$1 *new_DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(id<DVMConferenceDataViewModel_Host> capture$0) {
  J2OBJC_NEW_IMPL(DVMConferenceDataViewModel_$Lambda$1, initWithDVMConferenceDataViewModel_Host_, capture$0)
}

DVMConferenceDataViewModel_$Lambda$1 *create_DVMConferenceDataViewModel_$Lambda$1_initWithDVMConferenceDataViewModel_Host_(id<DVMConferenceDataViewModel_Host> capture$0) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataViewModel_$Lambda$1, initWithDVMConferenceDataViewModel_Host_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(DVMConferenceDataViewModel_$Lambda$2)

@implementation DVMConferenceDataViewModel_$Lambda$2

- (void)acceptWithId:(JavaLangThrowable *)throwable {
  [((JavaLangThrowable *) nil_chk(throwable)) printStackTrace];
  CoTouchlabDroidconandroidCrashReport_logExceptionWithJavaLangThrowable_(throwable);
}

+ (void)initialize {
  if (self == [DVMConferenceDataViewModel_$Lambda$2 class]) {
    JreStrongAssignAndConsume(&DVMConferenceDataViewModel_$Lambda$2_instance, new_DVMConferenceDataViewModel_$Lambda$2_init());
    J2OBJC_SET_INITIALIZED(DVMConferenceDataViewModel_$Lambda$2)
  }
}

@end

void DVMConferenceDataViewModel_$Lambda$2_init(DVMConferenceDataViewModel_$Lambda$2 *self) {
  NSObject_init(self);
}

DVMConferenceDataViewModel_$Lambda$2 *new_DVMConferenceDataViewModel_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(DVMConferenceDataViewModel_$Lambda$2, init)
}

DVMConferenceDataViewModel_$Lambda$2 *create_DVMConferenceDataViewModel_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(DVMConferenceDataViewModel_$Lambda$2, init)
}
