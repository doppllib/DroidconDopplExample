//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidArchPersistenceRoomEntityInsertionAdapter.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidArchPersistenceRoomSharedSQLiteStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@implementation AndroidArchPersistenceRoomEntityInsertionAdapter

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)database {
  AndroidArchPersistenceRoomEntityInsertionAdapter_initWithAndroidArchPersistenceRoomRoomDatabase_(self, database);
  return self;
}

- (void)bindWithAndroidArchPersistenceDbSupportSQLiteStatement:(id<AndroidArchPersistenceDbSupportSQLiteStatement>)statement
                                                        withId:(id)entity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)insertWithId:(id)entity {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
    [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (void)insertWithNSObjectArray:(IOSObjectArray *)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    {
      IOSObjectArray *a__ = entities;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        __unused id entity = *b__++;
        [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
        [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
      }
    }
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (void)insertWithJavaLangIterable:(id<JavaLangIterable>)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    for (id __strong entity in nil_chk(entities)) {
      [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
      [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
    }
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (jlong)insertAndReturnIdWithId:(id)entity {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
    return [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (IOSLongArray *)insertAndReturnIdsArrayWithJavaUtilCollection:(id<JavaUtilCollection>)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused IOSLongArray *result = [IOSLongArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(entities)) size]];
    __unused jint index = 0;
    for (id __strong entity in entities) {
      [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
      *IOSLongArray_GetRef(result, index) = [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
      index++;
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (IOSLongArray *)insertAndReturnIdsArrayWithNSObjectArray:(IOSObjectArray *)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused IOSLongArray *result = [IOSLongArray arrayWithLength:((IOSObjectArray *) nil_chk(entities))->size_];
    __unused jint index = 0;
    {
      IOSObjectArray *a__ = entities;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        __unused id entity = *b__++;
        [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
        *IOSLongArray_GetRef(result, index) = [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert];
        index++;
      }
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (IOSObjectArray *)insertAndReturnIdsArrayBoxWithJavaUtilCollection:(id<JavaUtilCollection>)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused IOSObjectArray *result = [IOSObjectArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(entities)) size] type:JavaLangLong_class_()];
    __unused jint index = 0;
    for (id __strong entity in entities) {
      [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
      IOSObjectArray_Set(result, index, JavaLangLong_valueOfWithLong_([((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert]));
      index++;
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (IOSObjectArray *)insertAndReturnIdsArrayBoxWithNSObjectArray:(IOSObjectArray *)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(entities))->size_ type:JavaLangLong_class_()];
    __unused jint index = 0;
    {
      IOSObjectArray *a__ = entities;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        __unused id entity = *b__++;
        [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
        IOSObjectArray_Set(result, index, JavaLangLong_valueOfWithLong_([((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert]));
        index++;
      }
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (id<JavaUtilList>)insertAndReturnIdsListWithNSObjectArray:(IOSObjectArray *)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(entities))->size_);
    __unused jint index = 0;
    {
      IOSObjectArray *a__ = entities;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        __unused id entity = *b__++;
        [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
        [result addWithInt:index withId:JavaLangLong_valueOfWithLong_([((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert])];
        index++;
      }
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

- (id<JavaUtilList>)insertAndReturnIdsListWithJavaUtilCollection:(id<JavaUtilCollection>)entities {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt = [self acquire];
  @try {
    __unused id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(entities)) size]);
    __unused jint index = 0;
    for (id __strong entity in entities) {
      [self bindWithAndroidArchPersistenceDbSupportSQLiteStatement:stmt withId:entity];
      [result addWithInt:index withId:JavaLangLong_valueOfWithLong_([((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(stmt)) executeInsert])];
      index++;
    }
    return result;
  }
  @finally {
    [self release__WithAndroidArchPersistenceDbSupportSQLiteStatement:stmt];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x11, 4, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x11, 4, 9, -1, 10, -1, -1 },
    { NULL, "J", 0x11, 11, 5, -1, 12, -1, -1 },
    { NULL, "[J", 0x11, 13, 14, -1, 15, -1, -1 },
    { NULL, "[J", 0x11, 13, 7, -1, 16, -1, -1 },
    { NULL, "[LJavaLangLong;", 0x11, 17, 14, -1, 18, -1, -1 },
    { NULL, "[LJavaLangLong;", 0x11, 17, 7, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 20, 7, -1, 21, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 20, 14, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRoomDatabase:);
  methods[1].selector = @selector(bindWithAndroidArchPersistenceDbSupportSQLiteStatement:withId:);
  methods[2].selector = @selector(insertWithId:);
  methods[3].selector = @selector(insertWithNSObjectArray:);
  methods[4].selector = @selector(insertWithJavaLangIterable:);
  methods[5].selector = @selector(insertAndReturnIdWithId:);
  methods[6].selector = @selector(insertAndReturnIdsArrayWithJavaUtilCollection:);
  methods[7].selector = @selector(insertAndReturnIdsArrayWithNSObjectArray:);
  methods[8].selector = @selector(insertAndReturnIdsArrayBoxWithJavaUtilCollection:);
  methods[9].selector = @selector(insertAndReturnIdsArrayBoxWithNSObjectArray:);
  methods[10].selector = @selector(insertAndReturnIdsListWithNSObjectArray:);
  methods[11].selector = @selector(insertAndReturnIdsListWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomDatabase;", "bind", "LAndroidArchPersistenceDbSupportSQLiteStatement;LNSObject;", "(Landroid/arch/persistence/db/SupportSQLiteStatement;TT;)V", "insert", "LNSObject;", "(TT;)V", "[LNSObject;", "([TT;)V", "LJavaLangIterable;", "(Ljava/lang/Iterable<TT;>;)V", "insertAndReturnId", "(TT;)J", "insertAndReturnIdsArray", "LJavaUtilCollection;", "(Ljava/util/Collection<TT;>;)[J", "([TT;)[J", "insertAndReturnIdsArrayBox", "(Ljava/util/Collection<TT;>;)[Ljava/lang/Long;", "([TT;)[Ljava/lang/Long;", "insertAndReturnIdsList", "([TT;)Ljava/util/List<Ljava/lang/Long;>;", "(Ljava/util/Collection<TT;>;)Ljava/util/List<Ljava/lang/Long;>;", "<T:Ljava/lang/Object;>Landroid/arch/persistence/room/SharedSQLiteStatement;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomEntityInsertionAdapter = { "EntityInsertionAdapter", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x401, 12, 0, -1, -1, -1, 23, -1 };
  return &_AndroidArchPersistenceRoomEntityInsertionAdapter;
}

@end

void AndroidArchPersistenceRoomEntityInsertionAdapter_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomEntityInsertionAdapter *self, AndroidArchPersistenceRoomRoomDatabase *database) {
  AndroidArchPersistenceRoomSharedSQLiteStatement_initWithAndroidArchPersistenceRoomRoomDatabase_(self, database);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomEntityInsertionAdapter)
