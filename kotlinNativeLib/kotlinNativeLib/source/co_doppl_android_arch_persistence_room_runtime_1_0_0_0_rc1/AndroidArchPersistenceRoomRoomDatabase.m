//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorArchTaskExecutor.h"
#include "AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelperFactory.h"
#include "AndroidArchPersistenceDbSimpleSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidArchPersistenceDbSupportSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidArchPersistenceRoomDatabaseConfiguration.h"
#include "AndroidArchPersistenceRoomInvalidationTracker.h"
#include "AndroidArchPersistenceRoomMigrationMigration.h"
#include "AndroidArchPersistenceRoomRoom.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidContentContext.h"
#include "AndroidDatabaseCursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "android/util/SparseArray.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@interface AndroidArchPersistenceRoomRoomDatabase () {
 @public
  id<AndroidArchPersistenceDbSupportSQLiteOpenHelper> mOpenHelper_;
  AndroidArchPersistenceRoomInvalidationTracker *mInvalidationTracker_;
  jboolean mAllowMainThreadQueries_;
  JavaUtilConcurrentLocksReentrantLock *mCloseLock_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase, mOpenHelper_, id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase, mInvalidationTracker_, AndroidArchPersistenceRoomInvalidationTracker *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase, mCloseLock_, JavaUtilConcurrentLocksReentrantLock *)

inline NSString *AndroidArchPersistenceRoomRoomDatabase_get_DB_IMPL_SUFFIX();
static NSString *AndroidArchPersistenceRoomRoomDatabase_DB_IMPL_SUFFIX = @"_Impl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomRoomDatabase, DB_IMPL_SUFFIX, NSString *)

@interface AndroidArchPersistenceRoomRoomDatabase_Builder () {
 @public
  IOSClass *mDatabaseClass_;
  NSString *mName_;
  AndroidContentContext *mContext_;
  JavaUtilArrayList *mCallbacks_;
  id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory> mFactory_;
  jboolean mAllowMainThreadQueries_;
  jboolean mRequireMigration_;
  AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *mMigrationContainer_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mDatabaseClass_, IOSClass *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mContext_, AndroidContentContext *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mCallbacks_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mFactory_, id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory>)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_Builder, mMigrationContainer_, AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *)

@interface AndroidArchPersistenceRoomRoomDatabase_MigrationContainer () {
 @public
  AndroidUtilSparseArray *mMigrations_;
}

- (void)addMigrationWithAndroidArchPersistenceRoomMigrationMigration:(AndroidArchPersistenceRoomMigrationMigration *)migration;

- (id<JavaUtilList>)findUpMigrationPathWithJavaUtilList:(id<JavaUtilList>)result
                                            withBoolean:(jboolean)upgrade
                                                withInt:(jint)start
                                                withInt:(jint)end;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer, mMigrations_, AndroidUtilSparseArray *)

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_addMigrationWithAndroidArchPersistenceRoomMigrationMigration_(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *self, AndroidArchPersistenceRoomMigrationMigration *migration);

__attribute__((unused)) static id<JavaUtilList> AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_findUpMigrationPathWithJavaUtilList_withBoolean_withInt_withInt_(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *self, id<JavaUtilList> result, jboolean upgrade, jint start, jint end);

@implementation AndroidArchPersistenceRoomRoomDatabase

- (id<JavaUtilConcurrentLocksLock>)getCloseLock {
  return mCloseLock_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRoomDatabase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithAndroidArchPersistenceRoomDatabaseConfiguration:(AndroidArchPersistenceRoomDatabaseConfiguration *)configuration {
  JreStrongAssign(&mOpenHelper_, [self createOpenHelperWithAndroidArchPersistenceRoomDatabaseConfiguration:configuration]);
  JreStrongAssign(&mCallbacks_, ((AndroidArchPersistenceRoomDatabaseConfiguration *) nil_chk(configuration))->callbacks_);
  mAllowMainThreadQueries_ = configuration->allowMainThreadQueries_;
}

- (id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>)getOpenHelper {
  return mOpenHelper_;
}

- (id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>)createOpenHelperWithAndroidArchPersistenceRoomDatabaseConfiguration:(AndroidArchPersistenceRoomDatabaseConfiguration *)config {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidArchPersistenceRoomInvalidationTracker *)createInvalidationTracker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isOpen {
  id<AndroidArchPersistenceDbSupportSQLiteDatabase> db = JreLoadVolatileId(&mDatabase_);
  return db != nil && [db isOpen];
}

- (void)close {
  if ([self isOpen]) {
    @try {
      [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mCloseLock_)) lock];
      [((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) close];
    }
    @finally {
      [mCloseLock_ unlock];
    }
  }
}

- (void)assertNotMainThread {
  if (mAllowMainThreadQueries_) {
    return;
  }
  if ([((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) isMainThread]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot access database on the main thread since it may potentially lock the UI for a long period of time.");
  }
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)query
                             withNSObjectArray:(IOSObjectArray * __nullable)args {
  return [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) queryWithAndroidArchPersistenceDbSupportSQLiteQuery:create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(query, args)];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)query {
  [self assertNotMainThread];
  return [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) queryWithAndroidArchPersistenceDbSupportSQLiteQuery:query];
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)compileStatementWithNSString:(NSString *)sql {
  [self assertNotMainThread];
  return [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) compileStatementWithNSString:sql];
}

- (void)beginTransaction {
  [self assertNotMainThread];
  [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk(mInvalidationTracker_)) syncTriggers];
  [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) beginTransaction];
}

- (void)endTransaction {
  [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) endTransaction];
  if (![self inTransaction]) {
    [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk(mInvalidationTracker_)) refreshVersionsAsync];
  }
}

- (void)setTransactionSuccessful {
  [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) setTransactionSuccessful];
}

- (void)runInTransactionWithJavaLangRunnable:(id<JavaLangRunnable>)body {
  [self beginTransaction];
  @try {
    [((id<JavaLangRunnable>) nil_chk(body)) run];
    [self setTransactionSuccessful];
  }
  @finally {
    [self endTransaction];
  }
}

- (id)runInTransactionWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)body {
  [self beginTransaction];
  @try {
    id result = [((id<JavaUtilConcurrentCallable>) nil_chk(body)) call];
    [self setTransactionSuccessful];
    return result;
  }
  @catch (JavaLangRuntimeException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Exception in transaction", e);
  }
  @finally {
    [self endTransaction];
  }
}

- (void)internalInitInvalidationTrackerWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk(mInvalidationTracker_)) internalInitWithAndroidArchPersistenceDbSupportSQLiteDatabase:db];
}

- (AndroidArchPersistenceRoomInvalidationTracker *)getInvalidationTracker {
  return mInvalidationTracker_;
}

- (jboolean)inTransaction {
  return [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk([((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk(mOpenHelper_)) getWritableDatabase])) inTransaction];
}

- (void)__javaClone:(AndroidArchPersistenceRoomRoomDatabase *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mDatabase_, &original->mDatabase_);
}

- (void)dealloc {
  JreReleaseVolatile(&mDatabase_);
  RELEASE_(mOpenHelper_);
  RELEASE_(mInvalidationTracker_);
  RELEASE_(mCallbacks_);
  RELEASE_(mCloseLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilConcurrentLocksLock;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", 0x404, 2, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomInvalidationTracker;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomInvalidationTracker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getCloseLock);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(init__WithAndroidArchPersistenceRoomDatabaseConfiguration:);
  methods[3].selector = @selector(getOpenHelper);
  methods[4].selector = @selector(createOpenHelperWithAndroidArchPersistenceRoomDatabaseConfiguration:);
  methods[5].selector = @selector(createInvalidationTracker);
  methods[6].selector = @selector(isOpen);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(assertNotMainThread);
  methods[9].selector = @selector(queryWithNSString:withNSObjectArray:);
  methods[10].selector = @selector(queryWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[11].selector = @selector(compileStatementWithNSString:);
  methods[12].selector = @selector(beginTransaction);
  methods[13].selector = @selector(endTransaction);
  methods[14].selector = @selector(setTransactionSuccessful);
  methods[15].selector = @selector(runInTransactionWithJavaLangRunnable:);
  methods[16].selector = @selector(runInTransactionWithJavaUtilConcurrentCallable:);
  methods[17].selector = @selector(internalInitInvalidationTrackerWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[18].selector = @selector(getInvalidationTracker);
  methods[19].selector = @selector(inTransaction);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DB_IMPL_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "mDatabase_", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "mOpenHelper_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInvalidationTracker_", "LAndroidArchPersistenceRoomInvalidationTracker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAllowMainThreadQueries_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCallbacks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 15, -1 },
    { "mCloseLock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LAndroidArchPersistenceRoomDatabaseConfiguration;", "createOpenHelper", "query", "LNSString;[LNSObject;", "LAndroidArchPersistenceDbSupportSQLiteQuery;", "compileStatement", "LNSString;", "runInTransaction", "LJavaLangRunnable;", "LJavaUtilConcurrentCallable;", "<V:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TV;>;)TV;", "internalInitInvalidationTracker", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", &AndroidArchPersistenceRoomRoomDatabase_DB_IMPL_SUFFIX, "Ljava/util/List<Landroid/arch/persistence/room/RoomDatabase$Callback;>;", "LAndroidArchPersistenceRoomRoomDatabase_Builder;LAndroidArchPersistenceRoomRoomDatabase_MigrationContainer;LAndroidArchPersistenceRoomRoomDatabase_Callback;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomDatabase = { "RoomDatabase", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x401, 20, 7, -1, 16, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomDatabase;
}

@end

void AndroidArchPersistenceRoomRoomDatabase_init(AndroidArchPersistenceRoomRoomDatabase *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mCloseLock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->mInvalidationTracker_, [self createInvalidationTracker]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomDatabase)

@implementation AndroidArchPersistenceRoomRoomDatabase_Builder

- (instancetype)initWithAndroidContentContext:(AndroidContentContext * __nonnull)context
                                 withIOSClass:(IOSClass * __nonnull)klass
                                 withNSString:(NSString * __nullable)name {
  AndroidArchPersistenceRoomRoomDatabase_Builder_initWithAndroidContentContext_withIOSClass_withNSString_(self, context, klass, name);
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase_Builder * __nonnull)openHelperFactoryWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory:(id<AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory> __nullable)factory {
  JreStrongAssign(&mFactory_, factory);
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase_Builder * __nonnull)addMigrationsWithAndroidArchPersistenceRoomMigrationMigrationArray:(IOSObjectArray *)migrations {
  [((AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *) nil_chk(mMigrationContainer_)) addMigrationsWithAndroidArchPersistenceRoomMigrationMigrationArray:migrations];
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase_Builder * __nonnull)allowMainThreadQueries {
  mAllowMainThreadQueries_ = true;
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase_Builder * __nonnull)fallbackToDestructiveMigration {
  mRequireMigration_ = false;
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase_Builder * __nonnull)addCallbackWithAndroidArchPersistenceRoomRoomDatabase_Callback:(AndroidArchPersistenceRoomRoomDatabase_Callback * __nonnull)callback {
  if (mCallbacks_ == nil) {
    JreStrongAssignAndConsume(&mCallbacks_, new_JavaUtilArrayList_init());
  }
  [mCallbacks_ addWithId:callback];
  return self;
}

- (AndroidArchPersistenceRoomRoomDatabase * __nonnull)build {
  if (mContext_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot provide null context for the database.");
  }
  if (mDatabaseClass_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must provide an abstract class that extends RoomDatabase");
  }
  if (mFactory_ == nil) {
    JreStrongAssignAndConsume(&mFactory_, new_AndroidArchPersistenceDbFrameworkFrameworkSQLiteOpenHelperFactory_init());
  }
  AndroidArchPersistenceRoomDatabaseConfiguration *configuration = create_AndroidArchPersistenceRoomDatabaseConfiguration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_withAndroidArchPersistenceRoomRoomDatabase_MigrationContainer_withJavaUtilList_withBoolean_withBoolean_(mContext_, mName_, mFactory_, mMigrationContainer_, mCallbacks_, mAllowMainThreadQueries_, mRequireMigration_);
  AndroidArchPersistenceRoomRoomDatabase *db = AndroidArchPersistenceRoomRoom_getGeneratedImplementationWithIOSClass_withNSString_(mDatabaseClass_, AndroidArchPersistenceRoomRoomDatabase_DB_IMPL_SUFFIX);
  [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(db)) init__WithAndroidArchPersistenceRoomDatabaseConfiguration:configuration];
  return db;
}

- (void)dealloc {
  RELEASE_(mDatabaseClass_);
  RELEASE_(mName_);
  RELEASE_(mContext_);
  RELEASE_(mCallbacks_);
  RELEASE_(mFactory_);
  RELEASE_(mMigrationContainer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase_Builder;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase_Builder;", 0x81, 5, 6, -1, 7, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase_Builder;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase_Builder;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase_Builder;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LAndroidArchPersistenceRoomRoomDatabase;", 0x1, -1, -1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withIOSClass:withNSString:);
  methods[1].selector = @selector(openHelperFactoryWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory:);
  methods[2].selector = @selector(addMigrationsWithAndroidArchPersistenceRoomMigrationMigrationArray:);
  methods[3].selector = @selector(allowMainThreadQueries);
  methods[4].selector = @selector(fallbackToDestructiveMigration);
  methods[5].selector = @selector(addCallbackWithAndroidArchPersistenceRoomRoomDatabase_Callback:);
  methods[6].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDatabaseClass_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mContext_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCallbacks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "mFactory_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAllowMainThreadQueries_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRequireMigration_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMigrationContainer_", "LAndroidArchPersistenceRoomRoomDatabase_MigrationContainer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LIOSClass;LNSString;", "(Landroid/content/Context;Ljava/lang/Class<TT;>;Ljava/lang/String;)V", "openHelperFactory", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;", "(Landroid/arch/persistence/db/SupportSQLiteOpenHelper$Factory;)Landroid/arch/persistence/room/RoomDatabase$Builder<TT;>;", "addMigrations", "[LAndroidArchPersistenceRoomMigrationMigration;", "([Landroid/arch/persistence/room/migration/Migration;)Landroid/arch/persistence/room/RoomDatabase$Builder<TT;>;", "()Landroid/arch/persistence/room/RoomDatabase$Builder<TT;>;", "addCallback", "LAndroidArchPersistenceRoomRoomDatabase_Callback;", "(Landroid/arch/persistence/room/RoomDatabase$Callback;)Landroid/arch/persistence/room/RoomDatabase$Builder<TT;>;", "()TT;", "Ljava/lang/Class<TT;>;", "Ljava/util/ArrayList<Landroid/arch/persistence/room/RoomDatabase$Callback;>;", "LAndroidArchPersistenceRoomRoomDatabase;", "<T:Landroid/arch/persistence/room/RoomDatabase;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomDatabase_Builder = { "Builder", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x9, 7, 8, 15, -1, -1, 16, -1 };
  return &_AndroidArchPersistenceRoomRoomDatabase_Builder;
}

@end

void AndroidArchPersistenceRoomRoomDatabase_Builder_initWithAndroidContentContext_withIOSClass_withNSString_(AndroidArchPersistenceRoomRoomDatabase_Builder *self, AndroidContentContext *context, IOSClass *klass, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->mContext_, context);
  JreStrongAssign(&self->mDatabaseClass_, klass);
  JreStrongAssign(&self->mName_, name);
  self->mRequireMigration_ = true;
  JreStrongAssignAndConsume(&self->mMigrationContainer_, new_AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_init());
}

AndroidArchPersistenceRoomRoomDatabase_Builder *new_AndroidArchPersistenceRoomRoomDatabase_Builder_initWithAndroidContentContext_withIOSClass_withNSString_(AndroidContentContext *context, IOSClass *klass, NSString *name) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRoomDatabase_Builder, initWithAndroidContentContext_withIOSClass_withNSString_, context, klass, name)
}

AndroidArchPersistenceRoomRoomDatabase_Builder *create_AndroidArchPersistenceRoomRoomDatabase_Builder_initWithAndroidContentContext_withIOSClass_withNSString_(AndroidContentContext *context, IOSClass *klass, NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRoomDatabase_Builder, initWithAndroidContentContext_withIOSClass_withNSString_, context, klass, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomDatabase_Builder)

@implementation AndroidArchPersistenceRoomRoomDatabase_MigrationContainer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addMigrationsWithAndroidArchPersistenceRoomMigrationMigrationArray:(IOSObjectArray *)migrations {
  {
    IOSObjectArray *a__ = migrations;
    AndroidArchPersistenceRoomMigrationMigration * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AndroidArchPersistenceRoomMigrationMigration * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AndroidArchPersistenceRoomMigrationMigration *migration = *b__++;
      AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_addMigrationWithAndroidArchPersistenceRoomMigrationMigration_(self, migration);
    }
  }
}

- (void)addMigrationWithAndroidArchPersistenceRoomMigrationMigration:(AndroidArchPersistenceRoomMigrationMigration *)migration {
  AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_addMigrationWithAndroidArchPersistenceRoomMigrationMigration_(self, migration);
}

- (id<JavaUtilList> __nullable)findMigrationPathWithInt:(jint)start
                                                withInt:(jint)end {
  if (start == end) {
    return JavaUtilCollections_emptyList();
  }
  jboolean migrateUp = end > start;
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  return AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_findUpMigrationPathWithJavaUtilList_withBoolean_withInt_withInt_(self, result, migrateUp, start, end);
}

- (id<JavaUtilList>)findUpMigrationPathWithJavaUtilList:(id<JavaUtilList>)result
                                            withBoolean:(jboolean)upgrade
                                                withInt:(jint)start
                                                withInt:(jint)end {
  return AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_findUpMigrationPathWithJavaUtilList_withBoolean_withInt_withInt_(self, result, upgrade, start, end);
}

- (void)dealloc {
  RELEASE_(mMigrations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addMigrationsWithAndroidArchPersistenceRoomMigrationMigrationArray:);
  methods[2].selector = @selector(addMigrationWithAndroidArchPersistenceRoomMigrationMigration:);
  methods[3].selector = @selector(findMigrationPathWithInt:withInt:);
  methods[4].selector = @selector(findUpMigrationPathWithJavaUtilList:withBoolean:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMigrations_", "LAndroidUtilSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "addMigrations", "[LAndroidArchPersistenceRoomMigrationMigration;", "addMigration", "LAndroidArchPersistenceRoomMigrationMigration;", "findMigrationPath", "II", "(II)Ljava/util/List<Landroid/arch/persistence/room/migration/Migration;>;", "findUpMigrationPath", "LJavaUtilList;ZII", "(Ljava/util/List<Landroid/arch/persistence/room/migration/Migration;>;ZII)Ljava/util/List<Landroid/arch/persistence/room/migration/Migration;>;", "Landroid/util/SparseArray<Landroid/util/SparseArray<Landroid/arch/persistence/room/migration/Migration;>;>;", "LAndroidArchPersistenceRoomRoomDatabase;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomDatabase_MigrationContainer = { "MigrationContainer", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x9, 5, 1, 11, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomDatabase_MigrationContainer;
}

@end

void AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_init(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mMigrations_, new_AndroidUtilSparseArray_init());
}

AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *new_AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_init() {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer, init)
}

AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *create_AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_init() {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer, init)
}

void AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_addMigrationWithAndroidArchPersistenceRoomMigrationMigration_(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *self, AndroidArchPersistenceRoomMigrationMigration *migration) {
  jint start = ((AndroidArchPersistenceRoomMigrationMigration *) nil_chk(migration))->startVersion_;
  jint end = migration->endVersion_;
  AndroidUtilSparseArray *targetMap = [((AndroidUtilSparseArray *) nil_chk(self->mMigrations_)) getWithInt:start];
  if (targetMap == nil) {
    targetMap = create_AndroidUtilSparseArray_init();
    [((AndroidUtilSparseArray *) nil_chk(self->mMigrations_)) putWithInt:start withId:targetMap];
  }
  AndroidArchPersistenceRoomMigrationMigration *existing = [targetMap getWithInt:end];
  if (existing != nil) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidArchPersistenceRoomRoom_LOG_TAG, JreStrcat("$@$@", @"Overriding migration ", existing, @" with ", migration));
  }
  [targetMap appendWithInt:end withId:migration];
}

id<JavaUtilList> AndroidArchPersistenceRoomRoomDatabase_MigrationContainer_findUpMigrationPathWithJavaUtilList_withBoolean_withInt_withInt_(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer *self, id<JavaUtilList> result, jboolean upgrade, jint start, jint end) {
  jint searchDirection = upgrade ? -1 : 1;
  while (upgrade ? start < end : start > end) {
    AndroidUtilSparseArray *targetNodes = [((AndroidUtilSparseArray *) nil_chk(self->mMigrations_)) getWithInt:start];
    if (targetNodes == nil) {
      return nil;
    }
    jint size = [targetNodes size];
    jint firstIndex;
    jint lastIndex;
    if (upgrade) {
      firstIndex = size - 1;
      lastIndex = -1;
    }
    else {
      firstIndex = 0;
      lastIndex = size;
    }
    jboolean found = false;
    for (jint i = firstIndex; i != lastIndex; i += searchDirection) {
      jint targetVersion = [targetNodes keyAtWithInt:i];
      if (targetVersion <= end && targetVersion > start) {
        [((id<JavaUtilList>) nil_chk(result)) addWithId:[targetNodes valueAtWithInt:i]];
        start = targetVersion;
        found = true;
        break;
      }
    }
    if (!found) {
      return nil;
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomDatabase_MigrationContainer)

@implementation AndroidArchPersistenceRoomRoomDatabase_Callback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchPersistenceRoomRoomDatabase_Callback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase> __nonnull)db {
}

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase> __nonnull)db {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCreate", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "onOpen", "LAndroidArchPersistenceRoomRoomDatabase;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomDatabase_Callback = { "Callback", "android.arch.persistence.room", ptrTable, methods, NULL, 7, 0x409, 3, 0, 3, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomDatabase_Callback;
}

@end

void AndroidArchPersistenceRoomRoomDatabase_Callback_init(AndroidArchPersistenceRoomRoomDatabase_Callback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomDatabase_Callback)
