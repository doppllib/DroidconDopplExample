//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteProgram.h"
#include "AndroidArchPersistenceRoomRoomSQLiteQuery.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NavigableSet.h"
#include "java/util/TreeMap.h"

@interface AndroidArchPersistenceRoomRoomSQLiteQuery () {
 @public
  volatile_id mQuery_;
  IOSIntArray *mBindingTypes_;
}

- (instancetype)initWithInt:(jint)capacity;

+ (void)prunePoolLocked;

@end

J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchPersistenceRoomRoomSQLiteQuery, mQuery_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomRoomSQLiteQuery, mBindingTypes_, IOSIntArray *)

inline jint AndroidArchPersistenceRoomRoomSQLiteQuery_get_NULL();
#define AndroidArchPersistenceRoomRoomSQLiteQuery_NULL 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchPersistenceRoomRoomSQLiteQuery, NULL, jint)

inline jint AndroidArchPersistenceRoomRoomSQLiteQuery_get_LONG();
#define AndroidArchPersistenceRoomRoomSQLiteQuery_LONG 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchPersistenceRoomRoomSQLiteQuery, LONG, jint)

inline jint AndroidArchPersistenceRoomRoomSQLiteQuery_get_DOUBLE();
#define AndroidArchPersistenceRoomRoomSQLiteQuery_DOUBLE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchPersistenceRoomRoomSQLiteQuery, DOUBLE, jint)

inline jint AndroidArchPersistenceRoomRoomSQLiteQuery_get_STRING();
#define AndroidArchPersistenceRoomRoomSQLiteQuery_STRING 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchPersistenceRoomRoomSQLiteQuery, STRING, jint)

inline jint AndroidArchPersistenceRoomRoomSQLiteQuery_get_BLOB();
#define AndroidArchPersistenceRoomRoomSQLiteQuery_BLOB 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchPersistenceRoomRoomSQLiteQuery, BLOB, jint)

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(AndroidArchPersistenceRoomRoomSQLiteQuery *self, jint capacity);

__attribute__((unused)) static AndroidArchPersistenceRoomRoomSQLiteQuery *new_AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomRoomSQLiteQuery *create_AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(jint capacity);

__attribute__((unused)) static void AndroidArchPersistenceRoomRoomSQLiteQuery_prunePoolLocked();

@interface AndroidArchPersistenceRoomRoomSQLiteQuery_Binding : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidArchPersistenceRoomRoomSQLiteQuery_Binding__Annotations$0();

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceRoomRoomSQLiteQuery)

JavaUtilTreeMap *AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool;

@implementation AndroidArchPersistenceRoomRoomSQLiteQuery

+ (jint)POOL_LIMIT {
  return AndroidArchPersistenceRoomRoomSQLiteQuery_POOL_LIMIT;
}

+ (jint)DESIRED_POOL_SIZE {
  return AndroidArchPersistenceRoomRoomSQLiteQuery_DESIRED_POOL_SIZE;
}

+ (JavaUtilTreeMap *)sQueryPool {
  return AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool;
}

+ (AndroidArchPersistenceRoomRoomSQLiteQuery *)acquireWithNSString:(NSString *)query
                                                           withInt:(jint)argumentCount {
  return AndroidArchPersistenceRoomRoomSQLiteQuery_acquireWithNSString_withInt_(query, argumentCount);
}

- (instancetype)initWithInt:(jint)capacity {
  AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(self, capacity);
  return self;
}

- (void)init__WithNSString:(NSString *)query
                   withInt:(jint)argCount {
  JreVolatileStrongAssign(&mQuery_, query);
  mArgCount_ = argCount;
}

- (void)release__ {
  @synchronized(AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool) {
    [((JavaUtilTreeMap *) nil_chk(AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool)) putWithId:JavaLangInteger_valueOfWithInt_(mCapacity_) withId:self];
    AndroidArchPersistenceRoomRoomSQLiteQuery_prunePoolLocked();
  }
}

+ (void)prunePoolLocked {
  AndroidArchPersistenceRoomRoomSQLiteQuery_prunePoolLocked();
}

- (NSString *)getSql {
  return JreLoadVolatileId(&mQuery_);
}

- (jint)getArgCount {
  return mArgCount_;
}

- (void)bindToWithAndroidArchPersistenceDbSupportSQLiteProgram:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)program {
  for (jint index = 1; index <= mArgCount_; index++) {
    switch (IOSIntArray_Get(nil_chk(mBindingTypes_), index)) {
      case AndroidArchPersistenceRoomRoomSQLiteQuery_NULL:
      [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(program)) bindNullWithInt:index];
      break;
      case AndroidArchPersistenceRoomRoomSQLiteQuery_LONG:
      [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(program)) bindLongWithInt:index withLong:IOSLongArray_Get(nil_chk(mLongBindings_), index)];
      break;
      case AndroidArchPersistenceRoomRoomSQLiteQuery_DOUBLE:
      [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(program)) bindDoubleWithInt:index withDouble:IOSDoubleArray_Get(nil_chk(mDoubleBindings_), index)];
      break;
      case AndroidArchPersistenceRoomRoomSQLiteQuery_STRING:
      [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(program)) bindStringWithInt:index withNSString:IOSObjectArray_Get(nil_chk(mStringBindings_), index)];
      break;
      case AndroidArchPersistenceRoomRoomSQLiteQuery_BLOB:
      [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(program)) bindBlobWithInt:index withByteArray:IOSObjectArray_Get(nil_chk(mBlobBindings_), index)];
      break;
    }
  }
}

- (void)bindNullWithInt:(jint)index {
  *IOSIntArray_GetRef(nil_chk(mBindingTypes_), index) = AndroidArchPersistenceRoomRoomSQLiteQuery_NULL;
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  *IOSIntArray_GetRef(nil_chk(mBindingTypes_), index) = AndroidArchPersistenceRoomRoomSQLiteQuery_LONG;
  *IOSLongArray_GetRef(nil_chk(mLongBindings_), index) = value;
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  *IOSIntArray_GetRef(nil_chk(mBindingTypes_), index) = AndroidArchPersistenceRoomRoomSQLiteQuery_DOUBLE;
  *IOSDoubleArray_GetRef(nil_chk(mDoubleBindings_), index) = value;
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  *IOSIntArray_GetRef(nil_chk(mBindingTypes_), index) = AndroidArchPersistenceRoomRoomSQLiteQuery_STRING;
  IOSObjectArray_Set(nil_chk(mStringBindings_), index, value);
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  *IOSIntArray_GetRef(nil_chk(mBindingTypes_), index) = AndroidArchPersistenceRoomRoomSQLiteQuery_BLOB;
  IOSObjectArray_Set(nil_chk(mBlobBindings_), index, value);
}

- (void)close {
}

- (void)copyArgumentsFromWithAndroidArchPersistenceRoomRoomSQLiteQuery:(AndroidArchPersistenceRoomRoomSQLiteQuery *)other {
  __unused jint argCount = [((AndroidArchPersistenceRoomRoomSQLiteQuery *) nil_chk(other)) getArgCount] + 1;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->mBindingTypes_, 0, mBindingTypes_, 0, argCount);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->mLongBindings_, 0, mLongBindings_, 0, argCount);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->mStringBindings_, 0, mStringBindings_, 0, argCount);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->mBlobBindings_, 0, mBlobBindings_, 0, argCount);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->mDoubleBindings_, 0, mDoubleBindings_, 0, argCount);
}

- (void)clearBindings {
  JavaUtilArrays_fillWithIntArray_withInt_(mBindingTypes_, AndroidArchPersistenceRoomRoomSQLiteQuery_NULL);
  JavaUtilArrays_fillWithNSObjectArray_withId_(mStringBindings_, nil);
  JavaUtilArrays_fillWithNSObjectArray_withId_(mBlobBindings_, nil);
  JreVolatileStrongAssign(&mQuery_, nil);
}

- (void)__javaClone:(AndroidArchPersistenceRoomRoomSQLiteQuery *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mQuery_, &original->mQuery_);
}

- (void)dealloc {
  JreReleaseVolatile(&mQuery_);
  RELEASE_(mLongBindings_);
  RELEASE_(mDoubleBindings_);
  RELEASE_(mStringBindings_);
  RELEASE_(mBlobBindings_);
  RELEASE_(mBindingTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceRoomRoomSQLiteQuery;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acquireWithNSString:withInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(init__WithNSString:withInt:);
  methods[3].selector = @selector(release__);
  methods[4].selector = @selector(prunePoolLocked);
  methods[5].selector = @selector(getSql);
  methods[6].selector = @selector(getArgCount);
  methods[7].selector = @selector(bindToWithAndroidArchPersistenceDbSupportSQLiteProgram:);
  methods[8].selector = @selector(bindNullWithInt:);
  methods[9].selector = @selector(bindLongWithInt:withLong:);
  methods[10].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[11].selector = @selector(bindStringWithInt:withNSString:);
  methods[12].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[13].selector = @selector(close);
  methods[14].selector = @selector(copyArgumentsFromWithAndroidArchPersistenceRoomRoomSQLiteQuery:);
  methods[15].selector = @selector(clearBindings);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "POOL_LIMIT", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_POOL_LIMIT, 0x18, -1, -1, -1, -1 },
    { "DESIRED_POOL_SIZE", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_DESIRED_POOL_SIZE, 0x18, -1, -1, -1, -1 },
    { "mQuery_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mLongBindings_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mDoubleBindings_", "[D", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mStringBindings_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mBlobBindings_", "[[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mBindingTypes_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCapacity_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mArgCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sQueryPool", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0x18, -1, 19, 20, -1 },
    { "NULL", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_NULL, 0x1a, -1, -1, -1, -1 },
    { "LONG", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_LONG, 0x1a, -1, -1, -1, -1 },
    { "DOUBLE", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_DOUBLE, 0x1a, -1, -1, -1, -1 },
    { "STRING", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_STRING, 0x1a, -1, -1, -1, -1 },
    { "BLOB", "I", .constantValue.asInt = AndroidArchPersistenceRoomRoomSQLiteQuery_BLOB, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "acquire", "LNSString;I", "I", "init", "release", "bindTo", "LAndroidArchPersistenceDbSupportSQLiteProgram;", "bindNull", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindBlob", "I[B", "LJavaLangException;", "copyArgumentsFrom", "LAndroidArchPersistenceRoomRoomSQLiteQuery;", &AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool, "Ljava/util/TreeMap<Ljava/lang/Integer;Landroid/arch/persistence/room/RoomSQLiteQuery;>;", "LAndroidArchPersistenceRoomRoomSQLiteQuery_Binding;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomSQLiteQuery = { "RoomSQLiteQuery", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x1, 16, 16, -1, 21, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomRoomSQLiteQuery;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceRoomRoomSQLiteQuery class]) {
    JreStrongAssignAndConsume(&AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool, new_JavaUtilTreeMap_init());
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceRoomRoomSQLiteQuery)
  }
}

@end

AndroidArchPersistenceRoomRoomSQLiteQuery *AndroidArchPersistenceRoomRoomSQLiteQuery_acquireWithNSString_withInt_(NSString *query, jint argumentCount) {
  AndroidArchPersistenceRoomRoomSQLiteQuery_initialize();
  @synchronized(AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool) {
    __unused id<JavaUtilMap_Entry> entry_ = [((JavaUtilTreeMap *) nil_chk(AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool)) ceilingEntryWithId:JavaLangInteger_valueOfWithInt_(argumentCount)];
    if (entry_ != nil) {
      [AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool removeWithId:[entry_ getKey]];
      __unused AndroidArchPersistenceRoomRoomSQLiteQuery *sqliteQuery = [entry_ getValue];
      [((AndroidArchPersistenceRoomRoomSQLiteQuery *) nil_chk(sqliteQuery)) init__WithNSString:query withInt:argumentCount];
      return JreRetainedLocalValue(sqliteQuery);
    }
  }
  __unused AndroidArchPersistenceRoomRoomSQLiteQuery *sqLiteQuery = create_AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(argumentCount);
  [sqLiteQuery init__WithNSString:query withInt:argumentCount];
  return sqLiteQuery;
}

void AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(AndroidArchPersistenceRoomRoomSQLiteQuery *self, jint capacity) {
  NSObject_init(self);
  self->mCapacity_ = capacity;
  __unused jint limit = capacity + 1;
  JreStrongAssignAndConsume(&self->mBindingTypes_, [IOSIntArray newArrayWithLength:limit]);
  JreStrongAssignAndConsume(&self->mLongBindings_, [IOSLongArray newArrayWithLength:limit]);
  JreStrongAssignAndConsume(&self->mDoubleBindings_, [IOSDoubleArray newArrayWithLength:limit]);
  JreStrongAssignAndConsume(&self->mStringBindings_, [IOSObjectArray newArrayWithLength:limit type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->mBlobBindings_, [IOSObjectArray newArrayWithLength:limit type:IOSClass_byteArray(1)]);
}

AndroidArchPersistenceRoomRoomSQLiteQuery *new_AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomRoomSQLiteQuery, initWithInt_, capacity)
}

AndroidArchPersistenceRoomRoomSQLiteQuery *create_AndroidArchPersistenceRoomRoomSQLiteQuery_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomRoomSQLiteQuery, initWithInt_, capacity)
}

void AndroidArchPersistenceRoomRoomSQLiteQuery_prunePoolLocked() {
  AndroidArchPersistenceRoomRoomSQLiteQuery_initialize();
  if ([((JavaUtilTreeMap *) nil_chk(AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool)) size] > AndroidArchPersistenceRoomRoomSQLiteQuery_POOL_LIMIT) {
    __unused jint toBeRemoved = [AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool size] - AndroidArchPersistenceRoomRoomSQLiteQuery_DESIRED_POOL_SIZE;
    __unused id<JavaUtilIterator> iterator = [((id<JavaUtilNavigableSet>) nil_chk([AndroidArchPersistenceRoomRoomSQLiteQuery_sQueryPool descendingKeySet])) iterator];
    while (toBeRemoved-- > 0) {
      [((id<JavaUtilIterator>) nil_chk(iterator)) next];
      [iterator remove];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomSQLiteQuery)

@implementation AndroidArchPersistenceRoomRoomSQLiteQuery_Binding

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomSQLiteQuery;", (void *)&AndroidArchPersistenceRoomRoomSQLiteQuery_Binding__Annotations$0 };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomRoomSQLiteQuery_Binding = { "Binding", "android.arch.persistence.room", ptrTable, NULL, NULL, 7, 0x2608, 0, 0, 0, -1, -1, -1, 1 };
  return &_AndroidArchPersistenceRoomRoomSQLiteQuery_Binding;
}

@end

IOSObjectArray *AndroidArchPersistenceRoomRoomSQLiteQuery_Binding__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomRoomSQLiteQuery_Binding)
