//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidArchPersistenceRoomSharedSQLiteStatement.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface AndroidArchPersistenceRoomSharedSQLiteStatement () {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *mLock_;
  AndroidArchPersistenceRoomRoomDatabase *mDatabase_;
  volatile_id mStmt_;
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)createNewStatement;

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)getStmtWithBoolean:(jboolean)canUseCached;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomSharedSQLiteStatement, mLock_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomSharedSQLiteStatement, mDatabase_, AndroidArchPersistenceRoomRoomDatabase *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchPersistenceRoomSharedSQLiteStatement, mStmt_, id<AndroidArchPersistenceDbSupportSQLiteStatement>)

__attribute__((unused)) static id<AndroidArchPersistenceDbSupportSQLiteStatement> AndroidArchPersistenceRoomSharedSQLiteStatement_createNewStatement(AndroidArchPersistenceRoomSharedSQLiteStatement *self);

__attribute__((unused)) static id<AndroidArchPersistenceDbSupportSQLiteStatement> AndroidArchPersistenceRoomSharedSQLiteStatement_getStmtWithBoolean_(AndroidArchPersistenceRoomSharedSQLiteStatement *self, jboolean canUseCached);

@implementation AndroidArchPersistenceRoomSharedSQLiteStatement

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)database {
  AndroidArchPersistenceRoomSharedSQLiteStatement_initWithAndroidArchPersistenceRoomRoomDatabase_(self, database);
  return self;
}

- (NSString *)createQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)assertNotMainThread {
  [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(mDatabase_)) assertNotMainThread];
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)createNewStatement {
  return AndroidArchPersistenceRoomSharedSQLiteStatement_createNewStatement(self);
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)getStmtWithBoolean:(jboolean)canUseCached {
  return AndroidArchPersistenceRoomSharedSQLiteStatement_getStmtWithBoolean_(self, canUseCached);
}

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)acquire {
  [self assertNotMainThread];
  return AndroidArchPersistenceRoomSharedSQLiteStatement_getStmtWithBoolean_(self, [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mLock_)) compareAndSetWithBoolean:false withBoolean:true]);
}

- (void)release__WithAndroidArchPersistenceDbSupportSQLiteStatement:(id<AndroidArchPersistenceDbSupportSQLiteStatement>)statement {
  if (statement == JreLoadVolatileId(&mStmt_)) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mLock_)) setWithBoolean:false];
  }
}

- (void)__javaClone:(AndroidArchPersistenceRoomSharedSQLiteStatement *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mStmt_, &original->mStmt_);
}

- (void)dealloc {
  RELEASE_(mLock_);
  RELEASE_(mDatabase_);
  JreReleaseVolatile(&mStmt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRoomDatabase:);
  methods[1].selector = @selector(createQuery);
  methods[2].selector = @selector(assertNotMainThread);
  methods[3].selector = @selector(createNewStatement);
  methods[4].selector = @selector(getStmtWithBoolean:);
  methods[5].selector = @selector(acquire);
  methods[6].selector = @selector(release__WithAndroidArchPersistenceDbSupportSQLiteStatement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLock_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDatabase_", "LAndroidArchPersistenceRoomRoomDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mStmt_", "LAndroidArchPersistenceDbSupportSQLiteStatement;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomDatabase;", "getStmt", "Z", "release", "LAndroidArchPersistenceDbSupportSQLiteStatement;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomSharedSQLiteStatement = { "SharedSQLiteStatement", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x401, 7, 3, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomSharedSQLiteStatement;
}

@end

void AndroidArchPersistenceRoomSharedSQLiteStatement_initWithAndroidArchPersistenceRoomRoomDatabase_(AndroidArchPersistenceRoomSharedSQLiteStatement *self, AndroidArchPersistenceRoomRoomDatabase *database) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mLock_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  JreStrongAssign(&self->mDatabase_, database);
}

id<AndroidArchPersistenceDbSupportSQLiteStatement> AndroidArchPersistenceRoomSharedSQLiteStatement_createNewStatement(AndroidArchPersistenceRoomSharedSQLiteStatement *self) {
  __unused NSString *query = [self createQuery];
  return [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(self->mDatabase_)) compileStatementWithNSString:query];
}

id<AndroidArchPersistenceDbSupportSQLiteStatement> AndroidArchPersistenceRoomSharedSQLiteStatement_getStmtWithBoolean_(AndroidArchPersistenceRoomSharedSQLiteStatement *self, jboolean canUseCached) {
  __unused id<AndroidArchPersistenceDbSupportSQLiteStatement> stmt;
  if (canUseCached) {
    if (JreLoadVolatileId(&self->mStmt_) == nil) {
      JreVolatileStrongAssign(&self->mStmt_, AndroidArchPersistenceRoomSharedSQLiteStatement_createNewStatement(self));
    }
    stmt = JreLoadVolatileId(&self->mStmt_);
  }
  else {
    stmt = AndroidArchPersistenceRoomSharedSQLiteStatement_createNewStatement(self);
  }
  return stmt;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomSharedSQLiteStatement)
