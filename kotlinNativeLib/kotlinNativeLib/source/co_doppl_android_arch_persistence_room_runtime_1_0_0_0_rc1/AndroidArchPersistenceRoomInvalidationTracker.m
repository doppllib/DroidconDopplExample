//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorArchTaskExecutor.h"
#include "AndroidArchCoreInternalSafeIterableMap.h"
#include "AndroidArchPersistenceDbSupportSQLiteDatabase.h"
#include "AndroidArchPersistenceDbSupportSQLiteOpenHelper.h"
#include "AndroidArchPersistenceDbSupportSQLiteStatement.h"
#include "AndroidArchPersistenceRoomInvalidationTracker.h"
#include "AndroidArchPersistenceRoomRoom.h"
#include "AndroidArchPersistenceRoomRoomDatabase.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/ArrayMap.h"
#include "android/util/ArraySet.h"
#include "android/util/Log.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/locks/Lock.h"

@interface AndroidArchPersistenceRoomInvalidationTracker () {
 @public
  IOSObjectArray *mTableNames_;
  IOSObjectArray *mQueryArgs_;
  jlong mMaxVersion_;
  AndroidArchPersistenceRoomRoomDatabase *mDatabase_;
  volatile_jboolean mInitialized_;
  volatile_id mCleanupStatement_;
  AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *mObservedTableTracker_;
  id<JavaLangRunnable> mSyncTriggers_;
}

+ (void)appendTriggerNameWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                      withNSString:(NSString *)tableName
                                      withNSString:(NSString *)triggerType;

- (void)stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)writableDb
                                                                   withInt:(jint)tableId;

- (void)startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)writableDb
                                                                    withInt:(jint)tableId;

- (jboolean)ensureInitialization;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mTableNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mQueryArgs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mDatabase_, AndroidArchPersistenceRoomRoomDatabase *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mCleanupStatement_, id<AndroidArchPersistenceDbSupportSQLiteStatement>)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mObservedTableTracker_, AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker, mSyncTriggers_, id<JavaLangRunnable>)

inline IOSObjectArray *AndroidArchPersistenceRoomInvalidationTracker_get_TRIGGERS();
static IOSObjectArray *AndroidArchPersistenceRoomInvalidationTracker_TRIGGERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomInvalidationTracker, TRIGGERS, IOSObjectArray *)

inline NSString *AndroidArchPersistenceRoomInvalidationTracker_get_UPDATE_TABLE_NAME();
static NSString *AndroidArchPersistenceRoomInvalidationTracker_UPDATE_TABLE_NAME = @"room_table_modification_log";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomInvalidationTracker, UPDATE_TABLE_NAME, NSString *)

inline NSString *AndroidArchPersistenceRoomInvalidationTracker_get_VERSION_COLUMN_NAME();
static NSString *AndroidArchPersistenceRoomInvalidationTracker_VERSION_COLUMN_NAME = @"version";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomInvalidationTracker, VERSION_COLUMN_NAME, NSString *)

inline NSString *AndroidArchPersistenceRoomInvalidationTracker_get_TABLE_ID_COLUMN_NAME();
static NSString *AndroidArchPersistenceRoomInvalidationTracker_TABLE_ID_COLUMN_NAME = @"table_id";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomInvalidationTracker, TABLE_ID_COLUMN_NAME, NSString *)

inline NSString *AndroidArchPersistenceRoomInvalidationTracker_get_CREATE_VERSION_TABLE_SQL();
static NSString *AndroidArchPersistenceRoomInvalidationTracker_CREATE_VERSION_TABLE_SQL = @"CREATE TEMP TABLE room_table_modification_log(version INTEGER PRIMARY KEY AUTOINCREMENT, table_id INTEGER)";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceRoomInvalidationTracker, CREATE_VERSION_TABLE_SQL, NSString *)

__attribute__((unused)) static void AndroidArchPersistenceRoomInvalidationTracker_appendTriggerNameWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *builder, NSString *tableName, NSString *triggerType);

__attribute__((unused)) static void AndroidArchPersistenceRoomInvalidationTracker_stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(AndroidArchPersistenceRoomInvalidationTracker *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> writableDb, jint tableId);

__attribute__((unused)) static void AndroidArchPersistenceRoomInvalidationTracker_startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(AndroidArchPersistenceRoomInvalidationTracker *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> writableDb, jint tableId);

__attribute__((unused)) static jboolean AndroidArchPersistenceRoomInvalidationTracker_ensureInitialization(AndroidArchPersistenceRoomInvalidationTracker *self);

@interface AndroidArchPersistenceRoomInvalidationTracker_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidArchPersistenceRoomInvalidationTracker *this$0_;
}

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker:(AndroidArchPersistenceRoomInvalidationTracker *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomInvalidationTracker_1)

__attribute__((unused)) static void AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker_1 *self, AndroidArchPersistenceRoomInvalidationTracker *outer$);

__attribute__((unused)) static AndroidArchPersistenceRoomInvalidationTracker_1 *new_AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomInvalidationTracker_1 *create_AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$);

@interface AndroidArchPersistenceRoomInvalidationTracker_2 : NSObject < JavaLangRunnable > {
 @public
  AndroidArchPersistenceRoomInvalidationTracker *this$0_;
}

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker:(AndroidArchPersistenceRoomInvalidationTracker *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceRoomInvalidationTracker_2)

__attribute__((unused)) static void AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker_2 *self, AndroidArchPersistenceRoomInvalidationTracker *outer$);

__attribute__((unused)) static AndroidArchPersistenceRoomInvalidationTracker_2 *new_AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceRoomInvalidationTracker_2 *create_AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$);

@interface AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper () {
 @public
  IOSObjectArray *mTableNames_;
  IOSLongArray *mVersions_;
  id<JavaUtilSet> mSingleTableSet_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper, mTableNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper, mVersions_, IOSLongArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper, mSingleTableSet_, id<JavaUtilSet>)

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceRoomInvalidationTracker)

NSString *AndroidArchPersistenceRoomInvalidationTracker_CLEANUP_SQL = @"DELETE FROM room_table_modification_log WHERE version NOT IN( SELECT MAX(version) FROM room_table_modification_log GROUP BY table_id)";
NSString *AndroidArchPersistenceRoomInvalidationTracker_SELECT_UPDATED_TABLES_SQL = @"SELECT * FROM room_table_modification_log WHERE version  > ? ORDER BY version ASC;";

@implementation AndroidArchPersistenceRoomInvalidationTracker

+ (NSString *)CLEANUP_SQL {
  return AndroidArchPersistenceRoomInvalidationTracker_CLEANUP_SQL;
}

+ (NSString *)SELECT_UPDATED_TABLES_SQL {
  return AndroidArchPersistenceRoomInvalidationTracker_SELECT_UPDATED_TABLES_SQL;
}

- (instancetype)initWithAndroidArchPersistenceRoomRoomDatabase:(AndroidArchPersistenceRoomRoomDatabase *)database
                                             withNSStringArray:(IOSObjectArray *)tableNames {
  AndroidArchPersistenceRoomInvalidationTracker_initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(self, database, tableNames);
  return self;
}

- (void)internalInitWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)database {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&mInitialized_)) {
      AndroidUtilLog_eWithNSString_withNSString_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"Invalidation tracker is initialized twice :/.");
      return;
    }
    [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(database)) beginTransaction];
    @try {
      [database execSQLWithNSString:@"PRAGMA temp_store = MEMORY;"];
      [database execSQLWithNSString:@"PRAGMA recursive_triggers='ON';"];
      [database execSQLWithNSString:AndroidArchPersistenceRoomInvalidationTracker_CREATE_VERSION_TABLE_SQL];
      [database setTransactionSuccessful];
    }
    @finally {
      [database endTransaction];
    }
    JreVolatileStrongAssign(&mCleanupStatement_, [database compileStatementWithNSString:AndroidArchPersistenceRoomInvalidationTracker_CLEANUP_SQL]);
    JreAssignVolatileBoolean(&mInitialized_, true);
  }
}

+ (void)appendTriggerNameWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                      withNSString:(NSString *)tableName
                                      withNSString:(NSString *)triggerType {
  AndroidArchPersistenceRoomInvalidationTracker_appendTriggerNameWithJavaLangStringBuilder_withNSString_withNSString_(builder, tableName, triggerType);
}

- (void)stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)writableDb
                                                                   withInt:(jint)tableId {
  AndroidArchPersistenceRoomInvalidationTracker_stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(self, writableDb, tableId);
}

- (void)startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)writableDb
                                                                    withInt:(jint)tableId {
  AndroidArchPersistenceRoomInvalidationTracker_startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(self, writableDb, tableId);
}

- (void)addObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer * __nonnull)observer {
  IOSObjectArray *tableNames = ((AndroidArchPersistenceRoomInvalidationTracker_Observer *) nil_chk(observer))->mTables_;
  IOSIntArray *tableIds = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(tableNames))->size_];
  jint size = tableNames->size_;
  IOSLongArray *versions = [IOSLongArray arrayWithLength:tableNames->size_];
  for (jint i = 0; i < size; i++) {
    JavaLangInteger *tableId = [((AndroidUtilArrayMap *) nil_chk(mTableIdLookup_)) getWithId:[((NSString *) nil_chk(IOSObjectArray_Get(tableNames, i))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
    if (tableId == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"There is no table with name ", IOSObjectArray_Get(tableNames, i)));
    }
    *IOSIntArray_GetRef(tableIds, i) = [tableId intValue];
    *IOSLongArray_GetRef(versions, i) = mMaxVersion_;
  }
  AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *wrapper = create_AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper_initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_(observer, tableIds, tableNames, versions);
  AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *currentObserver;
  @synchronized(mObserverMap_) {
    currentObserver = JreRetainedLocalValue([((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mObserverMap_)) putIfAbsentWithId:observer withId:wrapper]);
  }
  if (currentObserver == nil && [((AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *) nil_chk(mObservedTableTracker_)) onAddedWithIntArray:tableIds]) {
    [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) executeOnDiskIOWithJavaLangRunnable:mSyncTriggers_];
  }
}

- (void)addWeakObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer *)observer {
  [self addObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:create_AndroidArchPersistenceRoomInvalidationTracker_WeakObserver_initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(self, observer)];
}

- (void)removeObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer * __nonnull)observer {
  AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *wrapper;
  @synchronized(mObserverMap_) {
    wrapper = JreRetainedLocalValue([((AndroidArchCoreInternalSafeIterableMap *) nil_chk(mObserverMap_)) removeWithId:observer]);
  }
  if (wrapper != nil && [((AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *) nil_chk(mObservedTableTracker_)) onRemovedWithIntArray:wrapper->mTableIds_]) {
    [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) executeOnDiskIOWithJavaLangRunnable:mSyncTriggers_];
  }
}

- (jboolean)ensureInitialization {
  return AndroidArchPersistenceRoomInvalidationTracker_ensureInitialization(self);
}

- (void)refreshVersionsAsync {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mPendingRefresh_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) executeOnDiskIOWithJavaLangRunnable:mRefreshRunnable_];
  }
}

- (void)refreshVersionsSync {
  [self syncTriggers];
  [((id<JavaLangRunnable>) nil_chk(mRefreshRunnable_)) run];
}

- (void)syncTriggers {
  [((id<JavaLangRunnable>) nil_chk(mSyncTriggers_)) run];
}

- (void)__javaClone:(AndroidArchPersistenceRoomInvalidationTracker *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mCleanupStatement_, &original->mCleanupStatement_);
}

- (void)dealloc {
  RELEASE_(mTableIdLookup_);
  RELEASE_(mTableNames_);
  RELEASE_(mTableVersions_);
  RELEASE_(mQueryArgs_);
  RELEASE_(mDatabase_);
  RELEASE_(mPendingRefresh_);
  JreReleaseVolatile(&mCleanupStatement_);
  RELEASE_(mObservedTableTracker_);
  RELEASE_(mObserverMap_);
  RELEASE_(mSyncTriggers_);
  RELEASE_(mRefreshRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomRoomDatabase:withNSStringArray:);
  methods[1].selector = @selector(internalInitWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(appendTriggerNameWithJavaLangStringBuilder:withNSString:withNSString:);
  methods[3].selector = @selector(stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:);
  methods[4].selector = @selector(startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:);
  methods[5].selector = @selector(addObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:);
  methods[6].selector = @selector(addWeakObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:);
  methods[7].selector = @selector(removeObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:);
  methods[8].selector = @selector(ensureInitialization);
  methods[9].selector = @selector(refreshVersionsAsync);
  methods[10].selector = @selector(refreshVersionsSync);
  methods[11].selector = @selector(syncTriggers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRIGGERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "UPDATE_TABLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "VERSION_COLUMN_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "TABLE_ID_COLUMN_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "CREATE_VERSION_TABLE_SQL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "CLEANUP_SQL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "SELECT_UPDATED_TABLES_SQL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "mTableIdLookup_", "LAndroidUtilArrayMap;", .constantValue.asLong = 0, 0x0, -1, -1, 19, -1 },
    { "mTableNames_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTableVersions_", "[J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mQueryArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxVersion_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDatabase_", "LAndroidArchPersistenceRoomRoomDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPendingRefresh_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mCleanupStatement_", "LAndroidArchPersistenceDbSupportSQLiteStatement;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mObservedTableTracker_", "LAndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mObserverMap_", "LAndroidArchCoreInternalSafeIterableMap;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "mSyncTriggers_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRefreshRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomRoomDatabase;[LNSString;", "internalInit", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "appendTriggerName", "LJavaLangStringBuilder;LNSString;LNSString;", "stopTrackingTable", "LAndroidArchPersistenceDbSupportSQLiteDatabase;I", "startTrackingTable", "addObserver", "LAndroidArchPersistenceRoomInvalidationTracker_Observer;", "addWeakObserver", "removeObserver", &AndroidArchPersistenceRoomInvalidationTracker_TRIGGERS, &AndroidArchPersistenceRoomInvalidationTracker_UPDATE_TABLE_NAME, &AndroidArchPersistenceRoomInvalidationTracker_VERSION_COLUMN_NAME, &AndroidArchPersistenceRoomInvalidationTracker_TABLE_ID_COLUMN_NAME, &AndroidArchPersistenceRoomInvalidationTracker_CREATE_VERSION_TABLE_SQL, &AndroidArchPersistenceRoomInvalidationTracker_CLEANUP_SQL, &AndroidArchPersistenceRoomInvalidationTracker_SELECT_UPDATED_TABLES_SQL, "Landroid/util/ArrayMap<Ljava/lang/String;Ljava/lang/Integer;>;", "Landroid/arch/core/internal/SafeIterableMap<Landroid/arch/persistence/room/InvalidationTracker$Observer;Landroid/arch/persistence/room/InvalidationTracker$ObserverWrapper;>;", "LAndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper;LAndroidArchPersistenceRoomInvalidationTracker_Observer;LAndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker;LAndroidArchPersistenceRoomInvalidationTracker_WeakObserver;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker = { "InvalidationTracker", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x1, 12, 20, -1, 21, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceRoomInvalidationTracker class]) {
    JreStrongAssignAndConsume(&AndroidArchPersistenceRoomInvalidationTracker_TRIGGERS, [IOSObjectArray newArrayWithObjects:(id[]){ @"UPDATE", @"DELETE", @"INSERT" } count:3 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceRoomInvalidationTracker)
  }
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(AndroidArchPersistenceRoomInvalidationTracker *self, AndroidArchPersistenceRoomRoomDatabase *database, IOSObjectArray *tableNames) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mQueryArgs_, [IOSObjectArray newArrayWithLength:1 type:NSObject_class_()]);
  self->mMaxVersion_ = 0;
  JreStrongAssignAndConsume(&self->mPendingRefresh_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  JreAssignVolatileBoolean(&self->mInitialized_, false);
  JreStrongAssignAndConsume(&self->mObserverMap_, new_AndroidArchCoreInternalSafeIterableMap_init());
  JreStrongAssignAndConsume(&self->mSyncTriggers_, new_AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(self));
  JreStrongAssignAndConsume(&self->mRefreshRunnable_, new_AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(self));
  JreStrongAssign(&self->mDatabase_, database);
  JreStrongAssignAndConsume(&self->mObservedTableTracker_, new_AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_initWithInt_(((IOSObjectArray *) nil_chk(tableNames))->size_));
  JreStrongAssignAndConsume(&self->mTableIdLookup_, new_AndroidUtilArrayMap_init());
  jint size = tableNames->size_;
  JreStrongAssignAndConsume(&self->mTableNames_, [IOSObjectArray newArrayWithLength:size type:NSString_class_()]);
  for (jint id_ = 0; id_ < size; id_++) {
    NSString *tableName = [((NSString *) nil_chk(IOSObjectArray_Get(tableNames, id_))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    [((AndroidUtilArrayMap *) nil_chk(self->mTableIdLookup_)) putWithId:tableName withId:JavaLangInteger_valueOfWithInt_(id_)];
    IOSObjectArray_Set(nil_chk(self->mTableNames_), id_, tableName);
  }
  JreStrongAssignAndConsume(&self->mTableVersions_, [IOSLongArray newArrayWithLength:tableNames->size_]);
  JavaUtilArrays_fillWithLongArray_withLong_(self->mTableVersions_, 0);
}

AndroidArchPersistenceRoomInvalidationTracker *new_AndroidArchPersistenceRoomInvalidationTracker_initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(AndroidArchPersistenceRoomRoomDatabase *database, IOSObjectArray *tableNames) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker, initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_, database, tableNames)
}

AndroidArchPersistenceRoomInvalidationTracker *create_AndroidArchPersistenceRoomInvalidationTracker_initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_(AndroidArchPersistenceRoomRoomDatabase *database, IOSObjectArray *tableNames) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker, initWithAndroidArchPersistenceRoomRoomDatabase_withNSStringArray_, database, tableNames)
}

void AndroidArchPersistenceRoomInvalidationTracker_appendTriggerNameWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *builder, NSString *tableName, NSString *triggerType) {
  AndroidArchPersistenceRoomInvalidationTracker_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"`"])) appendWithNSString:@"room_table_modification_trigger_"])) appendWithNSString:tableName])) appendWithNSString:@"_"])) appendWithNSString:triggerType])) appendWithNSString:@"`"];
}

void AndroidArchPersistenceRoomInvalidationTracker_stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(AndroidArchPersistenceRoomInvalidationTracker *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> writableDb, jint tableId) {
  NSString *tableName = IOSObjectArray_Get(nil_chk(self->mTableNames_), tableId);
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = AndroidArchPersistenceRoomInvalidationTracker_TRIGGERS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *trigger = *b__++;
      [stringBuilder setLengthWithInt:0];
      [stringBuilder appendWithNSString:@"DROP TRIGGER IF EXISTS "];
      AndroidArchPersistenceRoomInvalidationTracker_appendTriggerNameWithJavaLangStringBuilder_withNSString_withNSString_(stringBuilder, tableName, trigger);
      [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(writableDb)) execSQLWithNSString:[stringBuilder description]];
    }
  }
}

void AndroidArchPersistenceRoomInvalidationTracker_startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(AndroidArchPersistenceRoomInvalidationTracker *self, id<AndroidArchPersistenceDbSupportSQLiteDatabase> writableDb, jint tableId) {
  NSString *tableName = IOSObjectArray_Get(nil_chk(self->mTableNames_), tableId);
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = AndroidArchPersistenceRoomInvalidationTracker_TRIGGERS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *trigger = *b__++;
      [stringBuilder setLengthWithInt:0];
      [stringBuilder appendWithNSString:@"CREATE TEMP TRIGGER IF NOT EXISTS "];
      AndroidArchPersistenceRoomInvalidationTracker_appendTriggerNameWithJavaLangStringBuilder_withNSString_withNSString_(stringBuilder, tableName, trigger);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@" AFTER "])) appendWithNSString:trigger])) appendWithNSString:@" ON `"])) appendWithNSString:tableName])) appendWithNSString:@"` BEGIN INSERT OR REPLACE INTO "])) appendWithNSString:AndroidArchPersistenceRoomInvalidationTracker_UPDATE_TABLE_NAME])) appendWithNSString:@" VALUES(null, "])) appendWithInt:tableId])) appendWithNSString:@"); END"];
      [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(writableDb)) execSQLWithNSString:[stringBuilder description]];
    }
  }
}

jboolean AndroidArchPersistenceRoomInvalidationTracker_ensureInitialization(AndroidArchPersistenceRoomInvalidationTracker *self) {
  if (![((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(self->mDatabase_)) isOpen]) {
    return false;
  }
  if (!JreLoadVolatileBoolean(&self->mInitialized_)) {
    [((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk([self->mDatabase_ getOpenHelper])) getWritableDatabase];
  }
  if (!JreLoadVolatileBoolean(&self->mInitialized_)) {
    AndroidUtilLog_eWithNSString_withNSString_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"database is not initialized even though it is open");
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomInvalidationTracker)

@implementation AndroidArchPersistenceRoomInvalidationTracker_1

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker:(AndroidArchPersistenceRoomInvalidationTracker *)outer$ {
  AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(self, outer$);
  return self;
}

- (void)run {
  if ([((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(this$0_->mDatabase_)) inTransaction]) {
    return;
  }
  if (!AndroidArchPersistenceRoomInvalidationTracker_ensureInitialization(this$0_)) {
    return;
  }
  @try {
    while (true) {
      IOSIntArray *tablesToSync = [((AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *) nil_chk(this$0_->mObservedTableTracker_)) getTablesToSync];
      if (tablesToSync == nil) {
        return;
      }
      jint limit = tablesToSync->size_;
      id<AndroidArchPersistenceDbSupportSQLiteDatabase> writableDatabase = [((id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>) nil_chk([this$0_->mDatabase_ getOpenHelper])) getWritableDatabase];
      @try {
        [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(writableDatabase)) beginTransaction];
        for (jint tableId = 0; tableId < limit; tableId++) {
          switch (IOSIntArray_Get(tablesToSync, tableId)) {
            case AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_ADD:
            AndroidArchPersistenceRoomInvalidationTracker_startTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(this$0_, writableDatabase, tableId);
            break;
            case AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_REMOVE:
            AndroidArchPersistenceRoomInvalidationTracker_stopTrackingTableWithAndroidArchPersistenceDbSupportSQLiteDatabase_withInt_(this$0_, writableDatabase, tableId);
            break;
          }
        }
        [writableDatabase setTransactionSuccessful];
      }
      @finally {
        [writableDatabase endTransaction];
      }
      [((AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *) nil_chk(this$0_->mObservedTableTracker_)) onSyncCompleted];
    }
  }
  @catch (JavaLangIllegalStateException *exception) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"Cannot run invalidation tracker. Is the db closed?", exception);
  }
  @catch (AndroidDatabaseSqliteSQLiteException *exception) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"Cannot run invalidation tracker. Is the db closed?", exception);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomInvalidationTracker:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidArchPersistenceRoomInvalidationTracker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_1 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_1;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker_1 *self, AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidArchPersistenceRoomInvalidationTracker_1 *new_AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker_1, initWithAndroidArchPersistenceRoomInvalidationTracker_, outer$)
}

AndroidArchPersistenceRoomInvalidationTracker_1 *create_AndroidArchPersistenceRoomInvalidationTracker_1_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker_1, initWithAndroidArchPersistenceRoomInvalidationTracker_, outer$)
}

@implementation AndroidArchPersistenceRoomInvalidationTracker_2

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker:(AndroidArchPersistenceRoomInvalidationTracker *)outer$ {
  AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(self, outer$);
  return self;
}

- (void)run {
  id<JavaUtilConcurrentLocksLock> closeLock = [((AndroidArchPersistenceRoomRoomDatabase *) nil_chk(this$0_->mDatabase_)) getCloseLock];
  jboolean hasUpdatedTable = false;
  @try {
    [((id<JavaUtilConcurrentLocksLock>) nil_chk(closeLock)) lock];
    if (!AndroidArchPersistenceRoomInvalidationTracker_ensureInitialization(this$0_)) {
      return;
    }
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->mPendingRefresh_)) compareAndSetWithBoolean:true withBoolean:false]) {
      return;
    }
    if ([this$0_->mDatabase_ inTransaction]) {
      return;
    }
    [((id<AndroidArchPersistenceDbSupportSQLiteStatement>) nil_chk(JreLoadVolatileId(&this$0_->mCleanupStatement_))) executeUpdateDelete];
    IOSObjectArray_Set(nil_chk(this$0_->mQueryArgs_), 0, JavaLangLong_valueOfWithLong_(this$0_->mMaxVersion_));
    id<AndroidDatabaseCursor> cursor = [this$0_->mDatabase_ queryWithNSString:AndroidArchPersistenceRoomInvalidationTracker_SELECT_UPDATED_TABLES_SQL withNSObjectArray:this$0_->mQueryArgs_];
    @try {
      while ([((id<AndroidDatabaseCursor>) nil_chk(cursor)) moveToNext]) {
        jlong version_ = [cursor getLongWithInt:0];
        jint tableId = [cursor getIntWithInt:1];
        *IOSLongArray_GetRef(nil_chk(this$0_->mTableVersions_), tableId) = version_;
        hasUpdatedTable = true;
        this$0_->mMaxVersion_ = version_;
      }
    }
    @finally {
      [cursor close];
    }
  }
  @catch (JavaLangIllegalStateException *exception) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"Cannot run invalidation tracker. Is the db closed?", exception);
  }
  @catch (AndroidDatabaseSqliteSQLiteException *exception) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidArchPersistenceRoomRoom_LOG_TAG, @"Cannot run invalidation tracker. Is the db closed?", exception);
  }
  @finally {
    [closeLock unlock];
  }
  if (hasUpdatedTable) {
    @synchronized(this$0_->mObserverMap_) {
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(this$0_->mObserverMap_)) {
        [((AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) checkForInvalidationWithLongArray:this$0_->mTableVersions_];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomInvalidationTracker:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidArchPersistenceRoomInvalidationTracker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_2 = { "", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_2;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker_2 *self, AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

AndroidArchPersistenceRoomInvalidationTracker_2 *new_AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker_2, initWithAndroidArchPersistenceRoomInvalidationTracker_, outer$)
}

AndroidArchPersistenceRoomInvalidationTracker_2 *create_AndroidArchPersistenceRoomInvalidationTracker_2_initWithAndroidArchPersistenceRoomInvalidationTracker_(AndroidArchPersistenceRoomInvalidationTracker *outer$) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker_2, initWithAndroidArchPersistenceRoomInvalidationTracker_, outer$)
}

@implementation AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer *)observer
                                                                  withIntArray:(IOSIntArray *)tableIds
                                                             withNSStringArray:(IOSObjectArray *)tableNames
                                                                 withLongArray:(IOSLongArray *)versions {
  AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper_initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_(self, observer, tableIds, tableNames, versions);
  return self;
}

- (void)checkForInvalidationWithLongArray:(IOSLongArray *)versions {
  id<JavaUtilSet> invalidatedTables = nil;
  jint size = ((IOSIntArray *) nil_chk(mTableIds_))->size_;
  for (jint index = 0; index < size; index++) {
    jint tableId = IOSIntArray_Get(mTableIds_, index);
    jlong newVersion = IOSLongArray_Get(nil_chk(versions), tableId);
    jlong currentVersion = IOSLongArray_Get(nil_chk(mVersions_), index);
    if (currentVersion < newVersion) {
      *IOSLongArray_GetRef(mVersions_, index) = newVersion;
      if (size == 1) {
        invalidatedTables = mSingleTableSet_;
      }
      else {
        if (invalidatedTables == nil) {
          invalidatedTables = create_AndroidUtilArraySet_initWithInt_(size);
        }
        [invalidatedTables addWithId:IOSObjectArray_Get(nil_chk(mTableNames_), index)];
      }
    }
  }
  if (invalidatedTables != nil) {
    [((AndroidArchPersistenceRoomInvalidationTracker_Observer *) nil_chk(mObserver_)) onInvalidatedWithJavaUtilSet:invalidatedTables];
  }
}

- (void)dealloc {
  RELEASE_(mTableIds_);
  RELEASE_(mTableNames_);
  RELEASE_(mVersions_);
  RELEASE_(mObserver_);
  RELEASE_(mSingleTableSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomInvalidationTracker_Observer:withIntArray:withNSStringArray:withLongArray:);
  methods[1].selector = @selector(checkForInvalidationWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTableIds_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTableNames_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mVersions_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mObserver_", "LAndroidArchPersistenceRoomInvalidationTracker_Observer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mSingleTableSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomInvalidationTracker_Observer;[I[LNSString;[J", "checkForInvalidation", "[J", "Ljava/util/Set<Ljava/lang/String;>;", "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper = { "ObserverWrapper", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8, 2, 5, 4, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper_initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *self, AndroidArchPersistenceRoomInvalidationTracker_Observer *observer, IOSIntArray *tableIds, IOSObjectArray *tableNames, IOSLongArray *versions) {
  NSObject_init(self);
  JreStrongAssign(&self->mObserver_, observer);
  JreStrongAssign(&self->mTableIds_, tableIds);
  JreStrongAssign(&self->mTableNames_, tableNames);
  JreStrongAssign(&self->mVersions_, versions);
  if (((IOSIntArray *) nil_chk(tableIds))->size_ == 1) {
    AndroidUtilArraySet *set = create_AndroidUtilArraySet_init();
    [set addWithId:IOSObjectArray_Get(nil_chk(self->mTableNames_), 0)];
    JreStrongAssign(&self->mSingleTableSet_, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(set));
  }
  else {
    JreStrongAssign(&self->mSingleTableSet_, nil);
  }
}

AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *new_AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper_initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_(AndroidArchPersistenceRoomInvalidationTracker_Observer *observer, IOSIntArray *tableIds, IOSObjectArray *tableNames, IOSLongArray *versions) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper, initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_, observer, tableIds, tableNames, versions)
}

AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper *create_AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper_initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_(AndroidArchPersistenceRoomInvalidationTracker_Observer *observer, IOSIntArray *tableIds, IOSObjectArray *tableNames, IOSLongArray *versions) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper, initWithAndroidArchPersistenceRoomInvalidationTracker_Observer_withIntArray_withNSStringArray_withLongArray_, observer, tableIds, tableNames, versions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomInvalidationTracker_ObserverWrapper)

@implementation AndroidArchPersistenceRoomInvalidationTracker_Observer

- (instancetype)initWithNSString:(NSString * __nonnull)firstTable
               withNSStringArray:(IOSObjectArray *)rest {
  AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSString_withNSStringArray_(self, firstTable, rest);
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray * __nonnull)tables {
  AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSStringArray_(self, tables);
  return self;
}

- (void)onInvalidatedWithJavaUtilSet:(id<JavaUtilSet> __nonnull)tables {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(mTables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(initWithNSStringArray:);
  methods[2].selector = @selector(onInvalidatedWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTables_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;", "[LNSString;", "onInvalidated", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_Observer = { "Observer", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x409, 3, 1, 5, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_Observer;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSString_withNSStringArray_(AndroidArchPersistenceRoomInvalidationTracker_Observer *self, NSString *firstTable, IOSObjectArray *rest) {
  NSObject_init(self);
  JreStrongAssign(&self->mTables_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(rest, ((IOSObjectArray *) nil_chk(rest))->size_ + 1));
  IOSObjectArray_Set(nil_chk(self->mTables_), rest->size_, firstTable);
}

void AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSStringArray_(AndroidArchPersistenceRoomInvalidationTracker_Observer *self, IOSObjectArray *tables) {
  NSObject_init(self);
  JreStrongAssign(&self->mTables_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(tables, ((IOSObjectArray *) nil_chk(tables))->size_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomInvalidationTracker_Observer)

@implementation AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker

+ (jint)NO_OP {
  return AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_NO_OP;
}

+ (jint)ADD {
  return AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_ADD;
}

+ (jint)REMOVE {
  return AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_REMOVE;
}

- (instancetype)initWithInt:(jint)tableCount {
  AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_initWithInt_(self, tableCount);
  return self;
}

- (jboolean)onAddedWithIntArray:(IOSIntArray *)tableIds {
  jboolean needTriggerSync = false;
  @synchronized(self) {
    {
      IOSIntArray *a__ = tableIds;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint tableId = *b__++;
        jlong prevObserverCount = IOSLongArray_Get(nil_chk(mTableObservers_), tableId);
        *IOSLongArray_GetRef(mTableObservers_, tableId) = prevObserverCount + 1;
        if (prevObserverCount == 0) {
          mNeedsSync_ = true;
          needTriggerSync = true;
        }
      }
    }
  }
  return needTriggerSync;
}

- (jboolean)onRemovedWithIntArray:(IOSIntArray *)tableIds {
  jboolean needTriggerSync = false;
  @synchronized(self) {
    {
      IOSIntArray *a__ = tableIds;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint tableId = *b__++;
        jlong prevObserverCount = IOSLongArray_Get(nil_chk(mTableObservers_), tableId);
        *IOSLongArray_GetRef(mTableObservers_, tableId) = prevObserverCount - 1;
        if (prevObserverCount == 1) {
          mNeedsSync_ = true;
          needTriggerSync = true;
        }
      }
    }
  }
  return needTriggerSync;
}

- (IOSIntArray * __nullable)getTablesToSync {
  @synchronized(self) {
    if (!mNeedsSync_ || mPendingSync_) {
      return JreRetainedLocalValue(nil);
    }
    jint tableCount = ((IOSLongArray *) nil_chk(mTableObservers_))->size_;
    for (jint i = 0; i < tableCount; i++) {
      jboolean newState = IOSLongArray_Get(mTableObservers_, i) > 0;
      if (newState != IOSBooleanArray_Get(nil_chk(mTriggerStates_), i)) {
        *IOSIntArray_GetRef(nil_chk(mTriggerStateChanges_), i) = newState ? AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_ADD : AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_REMOVE;
      }
      else {
        *IOSIntArray_GetRef(nil_chk(mTriggerStateChanges_), i) = AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_NO_OP;
      }
      *IOSBooleanArray_GetRef(mTriggerStates_, i) = newState;
    }
    mPendingSync_ = true;
    mNeedsSync_ = false;
    return JreRetainedLocalValue(mTriggerStateChanges_);
  }
}

- (void)onSyncCompleted {
  @synchronized(self) {
    mPendingSync_ = false;
  }
}

- (void)dealloc {
  RELEASE_(mTableObservers_);
  RELEASE_(mTriggerStates_);
  RELEASE_(mTriggerStateChanges_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x80, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x80, 3, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(onAddedWithIntArray:);
  methods[2].selector = @selector(onRemovedWithIntArray:);
  methods[3].selector = @selector(getTablesToSync);
  methods[4].selector = @selector(onSyncCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OP", "I", .constantValue.asInt = AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_NO_OP, 0x18, -1, -1, -1, -1 },
    { "ADD", "I", .constantValue.asInt = AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_ADD, 0x18, -1, -1, -1, -1 },
    { "REMOVE", "I", .constantValue.asInt = AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_REMOVE, 0x18, -1, -1, -1, -1 },
    { "mTableObservers_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTriggerStates_", "[Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTriggerStateChanges_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mNeedsSync_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPendingSync_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "onAdded", "[I", "onRemoved", "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker = { "ObservedTableTracker", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8, 5, 8, 4, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_initWithInt_(AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *self, jint tableCount) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mTableObservers_, [IOSLongArray newArrayWithLength:tableCount]);
  JreStrongAssignAndConsume(&self->mTriggerStates_, [IOSBooleanArray newArrayWithLength:tableCount]);
  JreStrongAssignAndConsume(&self->mTriggerStateChanges_, [IOSIntArray newArrayWithLength:tableCount]);
  JavaUtilArrays_fillWithLongArray_withLong_(self->mTableObservers_, 0);
  JavaUtilArrays_fillWithBooleanArray_withBoolean_(self->mTriggerStates_, false);
}

AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *new_AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_initWithInt_(jint tableCount) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker, initWithInt_, tableCount)
}

AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker *create_AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker_initWithInt_(jint tableCount) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker, initWithInt_, tableCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomInvalidationTracker_ObservedTableTracker)

@implementation AndroidArchPersistenceRoomInvalidationTracker_WeakObserver

- (instancetype)initWithAndroidArchPersistenceRoomInvalidationTracker:(AndroidArchPersistenceRoomInvalidationTracker *)tracker
           withAndroidArchPersistenceRoomInvalidationTracker_Observer:(AndroidArchPersistenceRoomInvalidationTracker_Observer *)delegate {
  AndroidArchPersistenceRoomInvalidationTracker_WeakObserver_initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(self, tracker, delegate);
  return self;
}

- (void)onInvalidatedWithJavaUtilSet:(id<JavaUtilSet> __nonnull)tables {
  AndroidArchPersistenceRoomInvalidationTracker_Observer *observer = [((JavaLangRefWeakReference *) nil_chk(mDelegateRef_)) get];
  if (observer == nil) {
    [((AndroidArchPersistenceRoomInvalidationTracker *) nil_chk(mTracker_)) removeObserverWithAndroidArchPersistenceRoomInvalidationTracker_Observer:self];
  }
  else {
    [observer onInvalidatedWithJavaUtilSet:tables];
  }
}

- (void)dealloc {
  RELEASE_(mTracker_);
  RELEASE_(mDelegateRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchPersistenceRoomInvalidationTracker:withAndroidArchPersistenceRoomInvalidationTracker_Observer:);
  methods[1].selector = @selector(onInvalidatedWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTracker_", "LAndroidArchPersistenceRoomInvalidationTracker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mDelegateRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchPersistenceRoomInvalidationTracker;LAndroidArchPersistenceRoomInvalidationTracker_Observer;", "onInvalidated", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "Ljava/lang/ref/WeakReference<Landroid/arch/persistence/room/InvalidationTracker$Observer;>;", "LAndroidArchPersistenceRoomInvalidationTracker;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceRoomInvalidationTracker_WeakObserver = { "WeakObserver", "android.arch.persistence.room", ptrTable, methods, fields, 7, 0x8, 2, 2, 5, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceRoomInvalidationTracker_WeakObserver;
}

@end

void AndroidArchPersistenceRoomInvalidationTracker_WeakObserver_initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomInvalidationTracker_WeakObserver *self, AndroidArchPersistenceRoomInvalidationTracker *tracker, AndroidArchPersistenceRoomInvalidationTracker_Observer *delegate) {
  AndroidArchPersistenceRoomInvalidationTracker_Observer_initWithNSStringArray_(self, ((AndroidArchPersistenceRoomInvalidationTracker_Observer *) nil_chk(delegate))->mTables_);
  JreStrongAssign(&self->mTracker_, tracker);
  JreStrongAssignAndConsume(&self->mDelegateRef_, new_JavaLangRefWeakReference_initWithId_(delegate));
}

AndroidArchPersistenceRoomInvalidationTracker_WeakObserver *new_AndroidArchPersistenceRoomInvalidationTracker_WeakObserver_initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomInvalidationTracker *tracker, AndroidArchPersistenceRoomInvalidationTracker_Observer *delegate) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceRoomInvalidationTracker_WeakObserver, initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_, tracker, delegate)
}

AndroidArchPersistenceRoomInvalidationTracker_WeakObserver *create_AndroidArchPersistenceRoomInvalidationTracker_WeakObserver_initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_(AndroidArchPersistenceRoomInvalidationTracker *tracker, AndroidArchPersistenceRoomInvalidationTracker_Observer *delegate) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceRoomInvalidationTracker_WeakObserver, initWithAndroidArchPersistenceRoomInvalidationTracker_withAndroidArchPersistenceRoomInvalidationTracker_Observer_, tracker, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceRoomInvalidationTracker_WeakObserver)
