//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATEvent.h"
#include "DDATEventSpeaker.h"
#include "DDATVenue.h"
#include "DUTTimeUtils.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@implementation DDATEvent

+ (jint)SOONTIME {
  return DDATEvent_SOONTIME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DDATEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getSpeakerList {
  return speakerList_;
}

- (jlong)getId {
  return id__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getDescription {
  return description__;
}

- (NSString *)getCategory {
  return category_;
}

- (DDATVenue * __nonnull)getVenue {
  return venue_;
}

- (JavaLangLong *)getStartDateLong {
  return startDateLong_;
}

- (JavaLangLong *)getEndDateLong {
  return endDateLong_;
}

- (jboolean)isPublicEvent {
  return publicEvent_;
}

- (JavaLangInteger *)getRsvpLimit {
  return rsvpLimit_;
}

- (JavaLangInteger *)getRsvpCount {
  return rsvpCount_;
}

- (JavaLangInteger *)getVote {
  return vote_;
}

- (jboolean)isRsvped {
  return rsvpUuid_ != nil;
}

- (jboolean)isSoon {
  return ![self isNow] && ![self isPast] && startDateLong_ != nil && JavaLangSystem_currentTimeMillis() > ([((JavaLangLong *) nil_chk(startDateLong_)) longLongValue] - DDATEvent_SOONTIME);
}

- (JavaLangLong *)getStartDateSoon {
  return startDateLong_ == nil ? nil : JavaLangLong_valueOfWithLong_([startDateLong_ longLongValue] - DDATEvent_SOONTIME);
}

- (jboolean)isPast {
  return endDateLong_ != nil && JavaLangSystem_currentTimeMillis() > [((JavaLangLong *) nil_chk(endDateLong_)) longLongValue];
}

- (jboolean)isNow {
  return startDateLong_ != nil && endDateLong_ != nil && JavaLangSystem_currentTimeMillis() < [((JavaLangLong *) nil_chk(endDateLong_)) longLongValue] && JavaLangSystem_currentTimeMillis() > [((JavaLangLong *) nil_chk(startDateLong_)) longLongValue];
}

- (jboolean)isAfterWithDDATEvent:(DDATEvent *)event {
  return !(startDateLong_ == nil || ((DDATEvent *) nil_chk(event))->startDateLong_ == nil) && [((JavaLangLong *) nil_chk(startDateLong_)) longLongValue] > [((DDATEvent *) nil_chk(event))->startDateLong_ longLongValue];
}

- (jboolean)isBlock {
  return false;
}

- (JavaLangLong *)getStartLong {
  return startDateLong_;
}

- (JavaLangLong *)getEndLong {
  return endDateLong_;
}

- (NSString *)getStartFormatted {
  return [((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(DUTTimeUtils, LOCAL_DATE_FORMAT))) get])) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_([((JavaLangLong *) nil_chk(startDateLong_)) longLongValue])];
}

- (NSString *)getEndFormatted {
  return [((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(DUTTimeUtils, LOCAL_DATE_FORMAT))) get])) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_([((JavaLangLong *) nil_chk(endDateLong_)) longLongValue])];
}

- (NSString *)getRsvpUuid {
  return rsvpUuid_;
}

- (void)setRsvpUuidWithNSString:(NSString *)rsvpUuid {
  JreStrongAssign(&self->rsvpUuid_, rsvpUuid);
}

- (NSString *)allSpeakersString {
  id<JavaUtilList> names = create_JavaUtilArrayList_init();
  for (DDATEventSpeaker * __strong eventSpeaker in nil_chk(speakerList_)) {
    if (eventSpeaker != nil) {
      [names addWithId:eventSpeaker->name_];
    }
  }
  return AndroidTextTextUtils_joinWithJavaLangCharSequence_withJavaLangIterable_(@", ", names);
}

- (NSString *)getSpeakers {
  return [self allSpeakersString];
}

- (jlong)eventId {
  return id__;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(description__);
  RELEASE_(category_);
  RELEASE_(venue_);
  RELEASE_(startDateLong_);
  RELEASE_(endDateLong_);
  RELEASE_(rsvpLimit_);
  RELEASE_(rsvpCount_);
  RELEASE_(rsvpUuid_);
  RELEASE_(vote_);
  RELEASE_(startDate_);
  RELEASE_(endDate_);
  RELEASE_(speakerList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATVenue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSpeakerList);
  methods[2].selector = @selector(getId);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(getDescription);
  methods[5].selector = @selector(getCategory);
  methods[6].selector = @selector(getVenue);
  methods[7].selector = @selector(getStartDateLong);
  methods[8].selector = @selector(getEndDateLong);
  methods[9].selector = @selector(isPublicEvent);
  methods[10].selector = @selector(getRsvpLimit);
  methods[11].selector = @selector(getRsvpCount);
  methods[12].selector = @selector(getVote);
  methods[13].selector = @selector(isRsvped);
  methods[14].selector = @selector(isSoon);
  methods[15].selector = @selector(getStartDateSoon);
  methods[16].selector = @selector(isPast);
  methods[17].selector = @selector(isNow);
  methods[18].selector = @selector(isAfterWithDDATEvent:);
  methods[19].selector = @selector(isBlock);
  methods[20].selector = @selector(getStartLong);
  methods[21].selector = @selector(getEndLong);
  methods[22].selector = @selector(getStartFormatted);
  methods[23].selector = @selector(getEndFormatted);
  methods[24].selector = @selector(getRsvpUuid);
  methods[25].selector = @selector(setRsvpUuidWithNSString:);
  methods[26].selector = @selector(allSpeakersString);
  methods[27].selector = @selector(getSpeakers);
  methods[28].selector = @selector(eventId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SOONTIME", "I", .constantValue.asInt = DDATEvent_SOONTIME, 0x19, -1, -1, -1, -1 },
    { "id__", "J", .constantValue.asLong = 0, 0x1, 5, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x1, 6, -1, -1, -1 },
    { "category_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "venue_", "LDDATVenue;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startDateLong_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endDateLong_", "LJavaLangLong;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "publicEvent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rsvpLimit_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rsvpCount_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rsvpUuid_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "vote_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startDate_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endDate_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "speakerList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/EventSpeaker;>;", "isAfter", "LDDATEvent;", "setRsvpUuid", "LNSString;", "id", "description", "Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/EventSpeaker;>;" };
  static const J2ObjcClassInfo _DDATEvent = { "Event", "co.touchlab.droidconandroid.shared.data", ptrTable, methods, fields, 7, 0x1, 29, 16, -1, -1, -1, -1, -1 };
  return &_DDATEvent;
}

@end

void DDATEvent_init(DDATEvent *self) {
  NSObject_init(self);
}

DDATEvent *new_DDATEvent_init() {
  J2OBJC_NEW_IMPL(DDATEvent, init)
}

DDATEvent *create_DDATEvent_init() {
  J2OBJC_CREATE_IMPL(DDATEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DDATEvent)
