//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATEvent.h"
#include "DDATEventInfo.h"
#include "DDATUserAccount.h"
#include "J2ObjC_source.h"
#include "java/util/List.h"

@interface DDATEventInfo () {
 @public
  DDATEvent *event_;
  id<JavaUtilList> speakers_;
  jboolean conflict_;
}

@end

J2OBJC_FIELD_SETTER(DDATEventInfo, event_, DDATEvent *)
J2OBJC_FIELD_SETTER(DDATEventInfo, speakers_, id<JavaUtilList>)

@implementation DDATEventInfo

- (instancetype)initWithDDATEvent:(DDATEvent *)event
                 withJavaUtilList:(id<JavaUtilList>)speakers
                      withBoolean:(jboolean)conflict {
  DDATEventInfo_initWithDDATEvent_withJavaUtilList_withBoolean_(self, event, speakers, conflict);
  return self;
}

- (DDATEvent *)getEvent {
  return event_;
}

- (id<JavaUtilList>)getSpeakers {
  return speakers_;
}

- (jboolean)getConflict {
  return conflict_;
}

- (jint)getSpeakerCount {
  return [((id<JavaUtilList>) nil_chk(speakers_)) size];
}

- (DDATUserAccount *)getSpeakerWithInt:(jint)speaker {
  return [((id<JavaUtilList>) nil_chk(speakers_)) getWithInt:speaker];
}

- (void)dealloc {
  RELEASE_(event_);
  RELEASE_(speakers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDDATEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDDATUserAccount;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDDATEvent:withJavaUtilList:withBoolean:);
  methods[1].selector = @selector(getEvent);
  methods[2].selector = @selector(getSpeakers);
  methods[3].selector = @selector(getConflict);
  methods[4].selector = @selector(getSpeakerCount);
  methods[5].selector = @selector(getSpeakerWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "event_", "LDDATEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "speakers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "conflict_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDDATEvent;LJavaUtilList;Z", "(Lco/touchlab/droidconandroid/shared/data/Event;Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;Z)V", "()Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;", "getSpeaker", "I", "Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;" };
  static const J2ObjcClassInfo _DDATEventInfo = { "EventInfo", "co.touchlab.droidconandroid.shared.data", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_DDATEventInfo;
}

@end

void DDATEventInfo_initWithDDATEvent_withJavaUtilList_withBoolean_(DDATEventInfo *self, DDATEvent *event, id<JavaUtilList> speakers, jboolean conflict) {
  NSObject_init(self);
  JreStrongAssign(&self->event_, event);
  JreStrongAssign(&self->speakers_, speakers);
  self->conflict_ = conflict;
}

DDATEventInfo *new_DDATEventInfo_initWithDDATEvent_withJavaUtilList_withBoolean_(DDATEvent *event, id<JavaUtilList> speakers, jboolean conflict) {
  J2OBJC_NEW_IMPL(DDATEventInfo, initWithDDATEvent_withJavaUtilList_withBoolean_, event, speakers, conflict)
}

DDATEventInfo *create_DDATEventInfo_initWithDDATEvent_withJavaUtilList_withBoolean_(DDATEvent *event, id<JavaUtilList> speakers, jboolean conflict) {
  J2OBJC_CREATE_IMPL(DDATEventInfo, initWithDDATEvent_withJavaUtilList_withBoolean_, event, speakers, conflict)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DDATEventInfo)
