//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexBackpressureStrategy.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexObservable.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSingle.h"
#include "J2ObjC_source.h"
#include "Retrofit2AdapterRxjava2BodyObservable.h"
#include "Retrofit2AdapterRxjava2CallEnqueueObservable.h"
#include "Retrofit2AdapterRxjava2CallExecuteObservable.h"
#include "Retrofit2AdapterRxjava2ResultObservable.h"
#include "Retrofit2AdapterRxjava2RxJava2CallAdapter.h"
#include "Retrofit2Call.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Type.h"
#include "javax/annotation/Nullable.h"

@interface Retrofit2AdapterRxjava2RxJava2CallAdapter () {
 @public
  id<JavaLangReflectType> responseType_;
  IoReactivexScheduler *scheduler_;
  jboolean isAsync_;
  jboolean isResult_;
  jboolean isBody_;
  jboolean isFlowable_;
  jboolean isSingle_;
  jboolean isMaybe_;
  jboolean isCompletable_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2AdapterRxjava2RxJava2CallAdapter, responseType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Retrofit2AdapterRxjava2RxJava2CallAdapter, scheduler_, IoReactivexScheduler *)

__attribute__((unused)) static IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$1();

@implementation Retrofit2AdapterRxjava2RxJava2CallAdapter

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)responseType
                   withIoReactivexScheduler:(IoReactivexScheduler * __nullable)scheduler
                                withBoolean:(jboolean)isAsync
                                withBoolean:(jboolean)isResult
                                withBoolean:(jboolean)isBody
                                withBoolean:(jboolean)isFlowable
                                withBoolean:(jboolean)isSingle
                                withBoolean:(jboolean)isMaybe
                                withBoolean:(jboolean)isCompletable {
  Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, responseType, scheduler, isAsync, isResult, isBody, isFlowable, isSingle, isMaybe, isCompletable);
  return self;
}

- (id<JavaLangReflectType>)responseType {
  return responseType_;
}

- (id)adaptWithRetrofit2Call:(id<Retrofit2Call> __nonnull)call {
  IoReactivexObservable *responseObservable = isAsync_ ? create_Retrofit2AdapterRxjava2CallEnqueueObservable_initWithRetrofit2Call_(call) : (id) create_Retrofit2AdapterRxjava2CallExecuteObservable_initWithRetrofit2Call_(call);
  IoReactivexObservable *observable;
  if (isResult_) {
    observable = create_Retrofit2AdapterRxjava2ResultObservable_initWithIoReactivexObservable_(responseObservable);
  }
  else if (isBody_) {
    observable = create_Retrofit2AdapterRxjava2BodyObservable_initWithIoReactivexObservable_(responseObservable);
  }
  else {
    observable = responseObservable;
  }
  if (scheduler_ != nil) {
    observable = [observable subscribeOnWithIoReactivexScheduler:scheduler_];
  }
  if (isFlowable_) {
    return [((IoReactivexObservable *) nil_chk(observable)) toFlowableWithIoReactivexBackpressureStrategy:JreLoadEnum(IoReactivexBackpressureStrategy, LATEST)];
  }
  if (isSingle_) {
    return [((IoReactivexObservable *) nil_chk(observable)) singleOrError];
  }
  if (isMaybe_) {
    return [((IoReactivexObservable *) nil_chk(observable)) singleElement];
  }
  if (isCompletable_) {
    return [((IoReactivexObservable *) nil_chk(observable)) ignoreElements];
  }
  return observable;
}

- (void)dealloc {
  RELEASE_(responseType_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, 1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:withIoReactivexScheduler:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(responseType);
  methods[2].selector = @selector(adaptWithRetrofit2Call:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "responseType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, 5 },
    { "isAsync_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isResult_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isBody_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isFlowable_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isSingle_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isMaybe_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isCompletable_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;LIoReactivexScheduler;ZZZZZZZ", (void *)&Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$0, "adapt", "LRetrofit2Call;", "(Lretrofit2/Call<TR;>;)Ljava/lang/Object;", (void *)&Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$1, "<R:Ljava/lang/Object;>Ljava/lang/Object;Lretrofit2/CallAdapter<TR;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _Retrofit2AdapterRxjava2RxJava2CallAdapter = { "RxJava2CallAdapter", "retrofit2.adapter.rxjava2", ptrTable, methods, fields, 7, 0x10, 3, 9, -1, -1, -1, 6, -1 };
  return &_Retrofit2AdapterRxjava2RxJava2CallAdapter;
}

@end

void Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(Retrofit2AdapterRxjava2RxJava2CallAdapter *self, id<JavaLangReflectType> responseType, IoReactivexScheduler *scheduler, jboolean isAsync, jboolean isResult, jboolean isBody, jboolean isFlowable, jboolean isSingle, jboolean isMaybe, jboolean isCompletable) {
  NSObject_init(self);
  JreStrongAssign(&self->responseType_, responseType);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->isAsync_ = isAsync;
  self->isResult_ = isResult;
  self->isBody_ = isBody;
  self->isFlowable_ = isFlowable;
  self->isSingle_ = isSingle;
  self->isMaybe_ = isMaybe;
  self->isCompletable_ = isCompletable;
}

Retrofit2AdapterRxjava2RxJava2CallAdapter *new_Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(id<JavaLangReflectType> responseType, IoReactivexScheduler *scheduler, jboolean isAsync, jboolean isResult, jboolean isBody, jboolean isFlowable, jboolean isSingle, jboolean isMaybe, jboolean isCompletable) {
  J2OBJC_NEW_IMPL(Retrofit2AdapterRxjava2RxJava2CallAdapter, initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, responseType, scheduler, isAsync, isResult, isBody, isFlowable, isSingle, isMaybe, isCompletable)
}

Retrofit2AdapterRxjava2RxJava2CallAdapter *create_Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(id<JavaLangReflectType> responseType, IoReactivexScheduler *scheduler, jboolean isAsync, jboolean isResult, jboolean isBody, jboolean isFlowable, jboolean isSingle, jboolean isMaybe, jboolean isCompletable) {
  J2OBJC_CREATE_IMPL(Retrofit2AdapterRxjava2RxJava2CallAdapter, initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, responseType, scheduler, isAsync, isResult, isBody, isFlowable, isSingle, isMaybe, isCompletable)
}

IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:9 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapter__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2AdapterRxjava2RxJava2CallAdapter)
