//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexObservable.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSingle.h"
#include "J2ObjC_source.h"
#include "Retrofit2AdapterRxjava2Result.h"
#include "Retrofit2AdapterRxjava2RxJava2CallAdapter.h"
#include "Retrofit2AdapterRxjava2RxJava2CallAdapterFactory.h"
#include "Retrofit2CallAdapter.h"
#include "Retrofit2Response.h"
#include "Retrofit2Retrofit.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "javax/annotation/Nullable.h"

@interface Retrofit2AdapterRxjava2RxJava2CallAdapterFactory () {
 @public
  IoReactivexScheduler *scheduler_;
  jboolean isAsync_;
}

- (instancetype)initWithIoReactivexScheduler:(IoReactivexScheduler * __nullable)scheduler
                                 withBoolean:(jboolean)isAsync;

@end

J2OBJC_FIELD_SETTER(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory, scheduler_, IoReactivexScheduler *)

__attribute__((unused)) static void Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *self, IoReactivexScheduler *scheduler, jboolean isAsync);

__attribute__((unused)) static Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *new_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(IoReactivexScheduler *scheduler, jboolean isAsync) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *create_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(IoReactivexScheduler *scheduler, jboolean isAsync);

__attribute__((unused)) static IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$0();

__attribute__((unused)) static IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$1();

@implementation Retrofit2AdapterRxjava2RxJava2CallAdapterFactory

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)create {
  return Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_create();
}

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)createAsync {
  return Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createAsync();
}

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)createWithSchedulerWithIoReactivexScheduler:(IoReactivexScheduler * __nonnull)scheduler {
  return Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createWithSchedulerWithIoReactivexScheduler_(scheduler);
}

- (instancetype)initWithIoReactivexScheduler:(IoReactivexScheduler * __nullable)scheduler
                                 withBoolean:(jboolean)isAsync {
  Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(self, scheduler, isAsync);
  return self;
}

- (id<Retrofit2CallAdapter>)getWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)returnType
                 withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                 withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit {
  IOSClass *rawType = Retrofit2CallAdapter_Factory_getRawTypeWithJavaLangReflectType_(returnType);
  if (rawType == IoReactivexCompletable_class_()) {
    return create_Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(JavaLangVoid_class_(), scheduler_, isAsync_, false, true, false, false, false, true);
  }
  jboolean isFlowable = rawType == IoReactivexFlowable_class_();
  jboolean isSingle = rawType == IoReactivexSingle_class_();
  jboolean isMaybe = rawType == IoReactivexMaybe_class_();
  if (rawType != IoReactivexObservable_class_() && !isFlowable && !isSingle && !isMaybe) {
    return nil;
  }
  jboolean isResult = false;
  jboolean isBody = false;
  id<JavaLangReflectType> responseType;
  if (!([JavaLangReflectParameterizedType_class_() isInstance:returnType])) {
    NSString *name = isFlowable ? @"Flowable" : isSingle ? @"Single" : isMaybe ? @"Maybe" : @"Observable";
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$$$", name, @" return type must be parameterized as ", name, @"<Foo> or ", name, @"<? extends Foo>"));
  }
  id<JavaLangReflectType> observableType = Retrofit2CallAdapter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, (id<JavaLangReflectParameterizedType>) cast_check(returnType, JavaLangReflectParameterizedType_class_()));
  IOSClass *rawObservableType = Retrofit2CallAdapter_Factory_getRawTypeWithJavaLangReflectType_(observableType);
  if (rawObservableType == Retrofit2Response_class_()) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:observableType])) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Response must be parameterized as Response<Foo> or Response<? extends Foo>");
    }
    responseType = Retrofit2CallAdapter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, (id<JavaLangReflectParameterizedType>) cast_check(observableType, JavaLangReflectParameterizedType_class_()));
  }
  else if (rawObservableType == Retrofit2AdapterRxjava2Result_class_()) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:observableType])) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Result must be parameterized as Result<Foo> or Result<? extends Foo>");
    }
    responseType = Retrofit2CallAdapter_Factory_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(0, (id<JavaLangReflectParameterizedType>) cast_check(observableType, JavaLangReflectParameterizedType_class_()));
    isResult = true;
  }
  else {
    responseType = observableType;
    isBody = true;
  }
  return create_Retrofit2AdapterRxjava2RxJava2CallAdapter_initWithJavaLangReflectType_withIoReactivexScheduler_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(responseType, scheduler_, isAsync_, isResult, isBody, isFlowable, isSingle, isMaybe, false);
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRetrofit2AdapterRxjava2RxJava2CallAdapterFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2AdapterRxjava2RxJava2CallAdapterFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2AdapterRxjava2RxJava2CallAdapterFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, 3 },
    { NULL, "LRetrofit2CallAdapter;", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createAsync);
  methods[2].selector = @selector(createWithSchedulerWithIoReactivexScheduler:);
  methods[3].selector = @selector(initWithIoReactivexScheduler:withBoolean:);
  methods[4].selector = @selector(getWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withRetrofit2Retrofit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, 7 },
    { "isAsync_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createWithScheduler", "LIoReactivexScheduler;", "LIoReactivexScheduler;Z", (void *)&Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$0, "get", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;LRetrofit2Retrofit;", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter<**>;", (void *)&Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$1 };
  static const J2ObjcClassInfo _Retrofit2AdapterRxjava2RxJava2CallAdapterFactory = { "RxJava2CallAdapterFactory", "retrofit2.adapter.rxjava2", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory;
}

@end

Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_create() {
  Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initialize();
  return create_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(nil, false);
}

Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createAsync() {
  Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initialize();
  return create_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(nil, true);
}

Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createWithSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *scheduler) {
  Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initialize();
  if (scheduler == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"scheduler == null");
  return create_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(scheduler, false);
}

void Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *self, IoReactivexScheduler *scheduler, jboolean isAsync) {
  Retrofit2CallAdapter_Factory_init(self);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->isAsync_ = isAsync;
}

Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *new_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(IoReactivexScheduler *scheduler, jboolean isAsync) {
  J2OBJC_NEW_IMPL(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory, initWithIoReactivexScheduler_withBoolean_, scheduler, isAsync)
}

Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *create_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_initWithIoReactivexScheduler_withBoolean_(IoReactivexScheduler *scheduler, jboolean isAsync) {
  J2OBJC_CREATE_IMPL(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory, initWithIoReactivexScheduler_withBoolean_, scheduler, isAsync)
}

IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory)
