//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory")
#ifdef RESTRICT_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory
#define INCLUDE_ALL_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory 0
#else
#define INCLUDE_ALL_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory 1
#endif
#undef RESTRICT_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_) && (INCLUDE_ALL_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory || defined(INCLUDE_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory))
#define Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_

#define RESTRICT_Retrofit2CallAdapter 1
#define INCLUDE_Retrofit2CallAdapter_Factory 1
#include "Retrofit2CallAdapter.h"

@class IOSObjectArray;
@class IoReactivexScheduler;
@class Retrofit2Retrofit;
@protocol JavaLangReflectType;
@protocol Retrofit2CallAdapter;

@interface Retrofit2AdapterRxjava2RxJava2CallAdapterFactory : Retrofit2CallAdapter_Factory

#pragma mark Public

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)create;

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)createAsync;

+ (Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *)createWithSchedulerWithIoReactivexScheduler:(IoReactivexScheduler * __nonnull)scheduler;

- (id<Retrofit2CallAdapter>)getWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)returnType
                 withJavaLangAnnotationAnnotationArray:(IOSObjectArray * __nonnull)annotations
                                 withRetrofit2Retrofit:(Retrofit2Retrofit * __nonnull)retrofit;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory)

FOUNDATION_EXPORT Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_create();

FOUNDATION_EXPORT Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createAsync();

FOUNDATION_EXPORT Retrofit2AdapterRxjava2RxJava2CallAdapterFactory *Retrofit2AdapterRxjava2RxJava2CallAdapterFactory_createWithSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2AdapterRxjava2RxJava2CallAdapterFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Retrofit2AdapterRxjava2RxJava2CallAdapterFactory")
