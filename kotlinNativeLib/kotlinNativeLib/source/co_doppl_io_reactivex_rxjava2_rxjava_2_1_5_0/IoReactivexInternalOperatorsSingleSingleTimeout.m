//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleTimeout.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_serialVersionUID 37497744973048446LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_serialVersionUID 2071387740092105509LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleTimeout

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                                       withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *parent = create_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(s, other_);
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(parent->task_, [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:parent withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_]);
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/SingleSource<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lio/reactivex/SingleSource<+TT;>;", "LIoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout = { "SingleTimeout", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout *self, id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsSingleSingleTimeout *new_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout, initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsSingleSingleTimeout *create_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout, initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTimeout)

@implementation IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                      withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(self, actual, other);
  return self;
}

- (void)run {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED) && [self compareAndSetWithId:d withId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)]) {
    if (d != nil) {
      [d dispose];
    }
    id<IoReactivexSingleSource> other = self->other_;
    if (other == nil) {
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
    }
    else {
      JreStrongAssign(&self->other_, nil);
      [other subscribeWithIoReactivexSingleObserver:fallback_];
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)t {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED) && [self compareAndSetWithId:d withId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)]) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(task_);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:t];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED) && [self compareAndSetWithId:d withId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)]) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(task_);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(task_);
  if (fallback_ != nil) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(fallback_);
  }
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(task_);
  RELEASE_(fallback_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexSingleSource:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "task_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "fallback_", "LIoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexSingleSource;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/SingleSource<+TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver<TT;>;", "Lio/reactivex/SingleSource<+TT;>;", "LIoReactivexInternalOperatorsSingleSingleTimeout;", "LIoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver = { "TimeoutMainObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 7, 5, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->task_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  if (other != nil) {
    JreStrongAssignAndConsume(&self->fallback_, new_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(actual));
  }
  else {
    JreStrongAssign(&self->fallback_, nil);
  }
}

IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *new_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, other)
}

IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *create_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver)

@implementation IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)t {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver = { "TimeoutFallbackObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 4, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *self, id<IoReactivexSingleObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *new_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver, initWithIoReactivexSingleObserver_, actual)
}

IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *create_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver, initWithIoReactivexSingleObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver)
