//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_serialVersionUID -6246093802440953054LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_(self, source);
  return self;
}

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onDrop {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(self, source, onDrop);
  return self;
}

- (void)acceptWithId:(id)t {
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(self->source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(s, onDrop_)];
}

- (void)dealloc {
  RELEASE_(onDrop_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:);
  methods[1].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsConsumer:);
  methods[2].selector = @selector(acceptWithId:);
  methods[3].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onDrop_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;", "(Lio/reactivex/Flowable<TT;>;)V", "LIoReactivexFlowable;LIoReactivexFunctionsConsumer;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Consumer<-TT;>;)V", "accept", "LNSObject;", "(TT;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Consumer<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;Lio/reactivex/functions/Consumer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop = { "FlowableOnBackpressureDrop", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 4, 1, -1, 11, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *self, IoReactivexFlowable *source) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->onDrop_, self);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop, initWithIoReactivexFlowable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop, initWithIoReactivexFlowable_, source)
}

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *self, IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onDrop) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->onDrop_, onDrop);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onDrop) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop, initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_, source, onDrop)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onDrop) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop, initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_, source, onDrop)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onDrop {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(self, actual, onDrop);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  jlong r = [self get];
  if (r != 0LL) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
    IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, 1);
  }
  else {
    @try {
      [((id<IoReactivexFunctionsConsumer>) nil_chk(onDrop_)) acceptWithId:t];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [self cancel];
      [self onErrorWithJavaLangThrowable:e];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
  }
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(onDrop_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "onDrop_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsConsumer;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Consumer<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/functions/Consumer<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber = { "BackpressureDropSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 5, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onDrop) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onDrop_, onDrop);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onDrop) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_, actual, onDrop)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onDrop) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_, actual, onDrop)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureDrop_BackpressureDropSubscriber)
