//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn

#if !defined (IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn))
#define IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@class IoReactivexScheduler;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleUnsubscribeOn : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> source_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn *self, id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUnsubscribeOn *new_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUnsubscribeOn *create_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver))
#define IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexDisposablesDisposable> ds_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                         withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver, ds_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver *self, id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver *new_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver *create_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleUnsubscribeOn_UnsubscribeOnSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUnsubscribeOn")
