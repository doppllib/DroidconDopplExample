//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler")
#ifdef RESTRICT_IoReactivexInternalSchedulersSingleScheduler
#define INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersSingleScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersSingleScheduler_) && (INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler || defined(INCLUDE_IoReactivexInternalSchedulersSingleScheduler))
#define IoReactivexInternalSchedulersSingleScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "IoReactivexScheduler.h"

@class IoReactivexInternalSchedulersRxThreadFactory;
@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentScheduledExecutorService;
@protocol JavaUtilConcurrentThreadFactory;

@interface IoReactivexInternalSchedulersSingleScheduler : IoReactivexScheduler {
 @public
  id<JavaUtilConcurrentThreadFactory> threadFactory_;
  JavaUtilConcurrentAtomicAtomicReference *executor_;
}

+ (IoReactivexInternalSchedulersRxThreadFactory *)SINGLE_THREAD_FACTORY;

+ (id<JavaUtilConcurrentScheduledExecutorService>)SHUTDOWN;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (IoReactivexScheduler_Worker * __nonnull)createWorker;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                            withLong:(jlong)delay
                                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<IoReactivexDisposablesDisposable> __nonnull)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                                        withLong:(jlong)initialDelay
                                                                                        withLong:(jlong)period
                                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)shutdown;

- (void)start;

#pragma mark Package-Private

+ (id<JavaUtilConcurrentScheduledExecutorService>)createExecutorWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersSingleScheduler)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersSingleScheduler, threadFactory_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersSingleScheduler, executor_, JavaUtilConcurrentAtomicAtomicReference *)

inline IoReactivexInternalSchedulersRxThreadFactory *IoReactivexInternalSchedulersSingleScheduler_get_SINGLE_THREAD_FACTORY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersSingleScheduler, SINGLE_THREAD_FACTORY, IoReactivexInternalSchedulersRxThreadFactory *)

inline id<JavaUtilConcurrentScheduledExecutorService> IoReactivexInternalSchedulersSingleScheduler_get_SHUTDOWN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersSingleScheduler, SHUTDOWN, id<JavaUtilConcurrentScheduledExecutorService>)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersSingleScheduler_init(IoReactivexInternalSchedulersSingleScheduler *self);

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler *new_IoReactivexInternalSchedulersSingleScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler *create_IoReactivexInternalSchedulersSingleScheduler_init();

FOUNDATION_EXPORT void IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersSingleScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler *new_IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler *create_IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> IoReactivexInternalSchedulersSingleScheduler_createExecutorWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersSingleScheduler)

#endif

#if !defined (IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_) && (INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler || defined(INCLUDE_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker))
#define IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "IoReactivexScheduler.h"

@class IoReactivexDisposablesCompositeDisposable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentScheduledExecutorService;

@interface IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker : IoReactivexScheduler_Worker {
 @public
  id<JavaUtilConcurrentScheduledExecutorService> executor_;
  IoReactivexDisposablesCompositeDisposable *tasks_;
  volatile_jboolean disposed_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                      withLong:(jlong)delay
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker, executor_, id<JavaUtilConcurrentScheduledExecutorService>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker, tasks_, IoReactivexDisposablesCompositeDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *self, id<JavaUtilConcurrentScheduledExecutorService> executor);

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *new_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *create_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersSingleScheduler")
