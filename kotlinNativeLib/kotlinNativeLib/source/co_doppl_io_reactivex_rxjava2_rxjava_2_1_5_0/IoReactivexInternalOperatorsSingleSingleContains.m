//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexInternalOperatorsSingleSingleContains.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Throwable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsSingleSingleContains_Single () {
 @public
  IoReactivexInternalOperatorsSingleSingleContains *this$0_;
  id<IoReactivexSingleObserver> s_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleContains_Single, s_, id<IoReactivexSingleObserver>)

@implementation IoReactivexInternalOperatorsSingleSingleContains

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                                         withId:(id)value
            withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsSingleSingleContains_initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_(self, source, value, comparer);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleContains_Single_initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_(self, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(value_);
  RELEASE_(comparer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withId:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LNSObject;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/SingleSource<TT;>;Ljava/lang/Object;Lio/reactivex/functions/BiPredicate<Ljava/lang/Object;Ljava/lang/Object;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lio/reactivex/functions/BiPredicate<Ljava/lang/Object;Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsSingleSingleContains_Single;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleContains = { "SingleContains", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleContains;
}

@end

void IoReactivexInternalOperatorsSingleSingleContains_initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsSingleSingleContains *self, id<IoReactivexSingleSource> source, id value, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->value_, value);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsSingleSingleContains *new_IoReactivexInternalOperatorsSingleSingleContains_initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_(id<IoReactivexSingleSource> source, id value, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleContains, initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_, source, value, comparer)
}

IoReactivexInternalOperatorsSingleSingleContains *create_IoReactivexInternalOperatorsSingleSingleContains_initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_(id<IoReactivexSingleSource> source, id value, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleContains, initWithIoReactivexSingleSource_withId_withIoReactivexFunctionsBiPredicate_, source, value, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleContains)

@implementation IoReactivexInternalOperatorsSingleSingleContains_Single

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleContains:(IoReactivexInternalOperatorsSingleSingleContains *)outer$
                                           withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IoReactivexInternalOperatorsSingleSingleContains_Single_initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_(self, outer$, s);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexSingleObserver>) nil_chk(s_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)v {
  jboolean b;
  @try {
    b = [((id<IoReactivexFunctionsBiPredicate>) nil_chk(this$0_->comparer_)) testWithId:v withId:this$0_->value_];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<IoReactivexSingleObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:ex];
    return;
  }
  [((id<IoReactivexSingleObserver>) nil_chk(s_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(b)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleContains:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsSingleSingleContains;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/single/SingleContains<TT;>;", "Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;", "LIoReactivexInternalOperatorsSingleSingleContains;", "Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleContains_Single = { "Single", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x10, 4, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleContains_Single;
}

@end

void IoReactivexInternalOperatorsSingleSingleContains_Single_initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleContains_Single *self, IoReactivexInternalOperatorsSingleSingleContains *outer$, id<IoReactivexSingleObserver> s) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->s_, s);
}

IoReactivexInternalOperatorsSingleSingleContains_Single *new_IoReactivexInternalOperatorsSingleSingleContains_Single_initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleContains *outer$, id<IoReactivexSingleObserver> s) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleContains_Single, initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_, outer$, s)
}

IoReactivexInternalOperatorsSingleSingleContains_Single *create_IoReactivexInternalOperatorsSingleSingleContains_Single_initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleContains *outer$, id<IoReactivexSingleObserver> s) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleContains_Single, initWithIoReactivexInternalOperatorsSingleSingleContains_withIoReactivexSingleObserver_, outer$, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleContains_Single)
