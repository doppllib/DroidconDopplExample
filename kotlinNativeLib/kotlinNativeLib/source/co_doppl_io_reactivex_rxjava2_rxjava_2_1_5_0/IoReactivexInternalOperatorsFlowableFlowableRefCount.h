//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRefCount
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRefCount

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRefCount_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRefCount))
#define IoReactivexInternalOperatorsFlowableFlowableRefCount_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexFlowable;
@class IoReactivexFlowablesConnectableFlowable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentLocksReentrantLock;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexFlowablesConnectableFlowable *source_FlowableRefCount_;
  volatile_id baseDisposable_;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)source;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber;

#pragma mark Package-Private

- (void)doSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
      withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRefCount)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount, source_FlowableRefCount_, IoReactivexFlowablesConnectableFlowable *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount, baseDisposable_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount, subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount, lock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, IoReactivexFlowablesConnectableFlowable *source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexFlowablesConnectableFlowable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexFlowablesConnectableFlowable *source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRefCount)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsFlowableFlowableRefCount;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> subscriber_;
  IoReactivexDisposablesCompositeDisposable *currentBase_;
  id<IoReactivexDisposablesDisposable> resource_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                                            withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                               withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase
                                        withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

- (void)cleanup;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, subscriber_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, currentBase_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, resource_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer))
#define IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_

#define RESTRICT_IoReactivexFunctionsConsumer 1
#define INCLUDE_IoReactivexFunctionsConsumer 1
#include "IoReactivexFunctionsConsumer.h"

@class IoReactivexInternalOperatorsFlowableFlowableRefCount;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol IoReactivexDisposablesDisposable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer : NSObject < IoReactivexFunctionsConsumer >

#pragma mark Public

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)subscription;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                                            withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask))
#define IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsFlowableFlowableRefCount;

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                               withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRefCount")
