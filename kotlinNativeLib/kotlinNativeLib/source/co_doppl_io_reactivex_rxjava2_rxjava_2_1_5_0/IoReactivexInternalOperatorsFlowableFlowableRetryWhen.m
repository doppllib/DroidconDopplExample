//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableRepeatWhen.h"
#include "IoReactivexInternalOperatorsFlowableFlowableRetryWhen.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexProcessorsFlowableProcessor.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_serialVersionUID -2680129890138081029LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableRetryWhen

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(self, source, handler);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexSubscribersSerializedSubscriber *z = create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s);
  IoReactivexProcessorsFlowableProcessor *processor = [((IoReactivexProcessorsUnicastProcessor *) nil_chk(IoReactivexProcessorsUnicastProcessor_createWithInt_(8))) toSerialized];
  id<OrgReactivestreamsPublisher> when;
  @try {
    when = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(handler_)) applyWithId:processor], @"handler returned a null Publisher");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, s);
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver *receiver = create_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_initWithOrgReactivestreamsPublisher_(source_);
  IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *subscriber = create_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(z, processor, receiver);
  JreStrongAssign(&receiver->subscriber_, subscriber);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:subscriber];
  [((id<OrgReactivestreamsPublisher>) nil_chk(when)) subscribeWithOrgReactivestreamsSubscriber:receiver];
  [receiver onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
}

- (void)dealloc {
  RELEASE_(handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "handler_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<Ljava/lang/Throwable;>;+Lorg/reactivestreams/Publisher<*>;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<Ljava/lang/Throwable;>;+Lorg/reactivestreams/Publisher<*>;>;", "LIoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRetryWhen = { "FlowableRetryWhen", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRetryWhen;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableRetryWhen *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->handler_, handler);
}

IoReactivexInternalOperatorsFlowableFlowableRetryWhen *new_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRetryWhen, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_, source, handler)
}

IoReactivexInternalOperatorsFlowableFlowableRetryWhen *create_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRetryWhen, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_, source, handler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRetryWhen)

@implementation IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
          withIoReactivexProcessorsFlowableProcessor:(IoReactivexProcessorsFlowableProcessor *)processor
                  withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)receiver {
  IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(self, actual, processor, receiver);
  return self;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self againWithId:t];
}

- (void)onComplete {
  [((id<OrgReactivestreamsSubscription>) nil_chk(receiver_)) cancel];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_WhenSourceSubscriber_)) onComplete];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexProcessorsFlowableProcessor:withOrgReactivestreamsSubscription:);
  methods[1].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[2].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexProcessorsFlowableProcessor;LOrgReactivestreamsSubscription;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/processors/FlowableProcessor<Ljava/lang/Throwable;>;Lorg/reactivestreams/Subscription;)V", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsFlowableFlowableRetryWhen;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber<TT;Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber = { "RetryWhenSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 1, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver) {
  IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(self, actual, processor, receiver);
}

IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_, actual, processor, receiver)
}

IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_, actual, processor, receiver)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber)
