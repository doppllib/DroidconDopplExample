//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableZip
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableZip

#if !defined (IoReactivexInternalOperatorsObservableObservableZip_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableZip))
#define IoReactivexInternalOperatorsObservableObservableZip_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@class IOSObjectArray;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObserver;
@protocol JavaLangIterable;

@interface IoReactivexInternalOperatorsObservableObservableZip : IoReactivexObservable {
 @public
  IOSObjectArray *sources_;
  id<JavaLangIterable> sourcesIterable_;
  id<IoReactivexFunctionsFunction> zipper_;
  jint bufferSize_;
  jboolean delayError_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSourceArray:(IOSObjectArray *)sources
                                    withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable
                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                                 withInt:(jint)bufferSize
                                             withBoolean:(jboolean)delayError;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableZip)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip, sourcesIterable_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip, zipper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableZip_initWithIoReactivexObservableSourceArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableZip *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip *new_IoReactivexInternalOperatorsObservableObservableZip_initWithIoReactivexObservableSourceArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip *create_IoReactivexInternalOperatorsObservableObservableZip_initWithIoReactivexObservableSourceArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableZip)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator))
#define IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsObservableObservableZip_ZipObserver;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsFunction> zipper_;
  IOSObjectArray *observers_;
  IOSObjectArray *row_;
  jboolean delayError_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (void)dispose;

- (void)drain;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)subscribeWithIoReactivexObservableSourceArray:(IOSObjectArray *)sources
                                              withInt:(jint)bufferSize;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                    withInt:(jint)count
                                withBoolean:(jboolean)delayError;

- (void)cancel;

- (void)cancelSources;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
               withIoReactivexObserver:(id<IoReactivexObserver>)a
                           withBoolean:(jboolean)delayError
withIoReactivexInternalOperatorsObservableObservableZip_ZipObserver:(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver *)source;

- (void)clear;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator, zipper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator, observers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator, row_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> zipper, jint count, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *new_IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> zipper, jint count, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *create_IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> zipper, jint count, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableZip_ZipObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableZip_ZipObserver))
#define IoReactivexInternalOperatorsObservableObservableZip_ZipObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator;
@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsObservableObservableZip_ZipObserver : NSObject < IoReactivexObserver > {
 @public
  IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *parent_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  volatile_jboolean done_;
  JavaLangThrowable *error_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
}

#pragma mark Public

- (void)dispose;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator:(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *)parent
                                                                                   withInt:(jint)bufferSize;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver, parent_, IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver, s_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableZip_ZipObserver_initWithIoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver *self, IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *parent, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip_ZipObserver *new_IoReactivexInternalOperatorsObservableObservableZip_ZipObserver_initWithIoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *parent, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableZip_ZipObserver *create_IoReactivexInternalOperatorsObservableObservableZip_ZipObserver_initWithIoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsObservableObservableZip_ZipCoordinator *parent, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableZip_ZipObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableZip")
