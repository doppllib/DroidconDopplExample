//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableToObservable.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@interface IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver () {
 @public
  id<IoReactivexObserver> observer_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver, observer_, id<IoReactivexObserver>)

@implementation IoReactivexInternalOperatorsCompletableCompletableToObservable

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source {
  IoReactivexInternalOperatorsCompletableCompletableToObservable_initWithIoReactivexCompletableSource_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver_initWithIoReactivexObserver_(observer)];
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToObservable = { "CompletableToObservable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 4, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToObservable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToObservable_initWithIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableToObservable *self, id<IoReactivexCompletableSource> source) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsCompletableCompletableToObservable *new_IoReactivexInternalOperatorsCompletableCompletableToObservable_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToObservable, initWithIoReactivexCompletableSource_, source)
}

IoReactivexInternalOperatorsCompletableCompletableToObservable *create_IoReactivexInternalOperatorsCompletableCompletableToObservable_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToObservable, initWithIoReactivexCompletableSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableToObservable)

@implementation IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver_initWithIoReactivexObserver_(self, observer);
  return self;
}

- (void)onComplete {
  [((id<IoReactivexObserver>) nil_chk(observer_)) onComplete];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexObserver>) nil_chk(observer_)) onErrorWithJavaLangThrowable:e];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexObserver>) nil_chk(observer_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<*>;)V", "onError", "LJavaLangThrowable;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/Observer<*>;", "LIoReactivexInternalOperatorsCompletableCompletableToObservable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver = { "ObserverCompletableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 4, 1, 7, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver *self, id<IoReactivexObserver> observer) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
}

IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver *new_IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> observer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver, initWithIoReactivexObserver_, observer)
}

IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver *create_IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> observer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver, initWithIoReactivexObserver_, observer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableToObservable_ObserverCompletableObserver)
