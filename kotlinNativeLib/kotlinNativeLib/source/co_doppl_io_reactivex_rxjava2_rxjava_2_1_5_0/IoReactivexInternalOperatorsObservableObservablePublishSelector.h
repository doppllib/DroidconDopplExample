//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservablePublishSelector
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservablePublishSelector

#if !defined (IoReactivexInternalOperatorsObservableObservablePublishSelector_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublishSelector))
#define IoReactivexInternalOperatorsObservableObservablePublishSelector_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservablePublishSelector : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> selector_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublishSelector)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublishSelector, selector_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservablePublishSelector *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublishSelector)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver))
#define IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IoReactivexSubjectsPublishSubject;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver : NSObject < IoReactivexObserver > {
 @public
  IoReactivexSubjectsPublishSubject *subject_;
  JavaUtilConcurrentAtomicAtomicReference *target_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)value;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSubjectsPublishSubject:(IoReactivexSubjectsPublishSubject *)subject
              withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)target;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver, subject_, IoReactivexSubjectsPublishSubject *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver, target_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *self, IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver))
#define IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexDisposablesDisposable> d_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)value;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *self, id<IoReactivexObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublishSelector")
