//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableBlockingObservableIterable
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableBlockingObservableIterable

#if !defined (IoReactivexInternalOperatorsObservableBlockingObservableIterable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable || defined(INCLUDE_IoReactivexInternalOperatorsObservableBlockingObservableIterable))
#define IoReactivexInternalOperatorsObservableBlockingObservableIterable_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@protocol IoReactivexObservableSource;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface IoReactivexInternalOperatorsObservableBlockingObservableIterable : NSObject < JavaLangIterable > {
 @public
  id<IoReactivexObservableSource> source_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)bufferSize;

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableBlockingObservableIterable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableIterable, source_, id<IoReactivexObservableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableBlockingObservableIterable_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableBlockingObservableIterable *self, id<IoReactivexObservableSource> source, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableBlockingObservableIterable *new_IoReactivexInternalOperatorsObservableBlockingObservableIterable_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableBlockingObservableIterable *create_IoReactivexInternalOperatorsObservableBlockingObservableIterable_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableBlockingObservableIterable)

#endif

#if !defined (IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable || defined(INCLUDE_IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator))
#define IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class JavaLangThrowable;
@protocol JavaUtilConcurrentLocksCondition;
@protocol JavaUtilConcurrentLocksLock;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, JavaUtilIterator, IoReactivexDisposablesDisposable > {
 @public
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  id<JavaUtilConcurrentLocksLock> lock_;
  id<JavaUtilConcurrentLocksCondition> condition_;
  volatile_jboolean done_;
  JavaLangThrowable *error_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)hasNext;

- (jboolean)isDisposed;

- (id)next;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)remove;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)batchSize;

- (void)signalConsumer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator, lock_, id<JavaUtilConcurrentLocksLock>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator, condition_, id<JavaUtilConcurrentLocksCondition>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator_initWithInt_(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator *self, jint batchSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator *new_IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator_initWithInt_(jint batchSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator *create_IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator_initWithInt_(jint batchSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableBlockingObservableIterable_BlockingObservableIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableBlockingObservableIterable")
