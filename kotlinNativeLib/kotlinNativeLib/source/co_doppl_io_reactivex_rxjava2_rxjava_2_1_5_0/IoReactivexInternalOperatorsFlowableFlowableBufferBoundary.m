//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableBufferBoundary.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubscribersDisposableSubscriber.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferBoundary

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)bufferOpen
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(self, source, bufferOpen, bufferClose, bufferSupplier);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), bufferOpen_, bufferClose_, bufferSupplier_)];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(bufferOpen_);
  RELEASE_(bufferClose_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferOpen_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferClose_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<+TOpen;>;Lio/reactivex/functions/Function<-TOpen;+Lorg/reactivestreams/Publisher<+TClose;>;>;Ljava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "Lorg/reactivestreams/Publisher<+TOpen;>;", "Lio/reactivex/functions/Function<-TOpen;+Lorg/reactivestreams/Publisher<+TClose;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber;LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferBoundary = { "FlowableBufferBoundary", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->bufferOpen_, bufferOpen);
  JreStrongAssign(&self->bufferClose_, bufferClose);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, bufferOpen, bufferClose, bufferSupplier)
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, bufferOpen, bufferClose, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)bufferOpen
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(self, actual, bufferOpen, bufferClose, bufferSupplier);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *bos = create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(self);
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:bos];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) lazySetWithInt:1];
    [((id<OrgReactivestreamsPublisher>) nil_chk(bufferOpen_)) subscribeWithOrgReactivestreamsSubscriber:bos];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    for (id<JavaUtilCollection> __strong b in nil_chk(buffers_)) {
      [((id<JavaUtilCollection>) nil_chk(b)) addWithId:t];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self cancel];
  JreAssignVolatileBoolean(&cancelled_, true);
  @synchronized(self) {
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
    [self complete];
  }
}

- (void)complete {
  id<JavaUtilList> list;
  @synchronized(self) {
    list = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(buffers_));
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  for (id<JavaUtilCollection> __strong u in list) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:u];
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimplePlainQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(q, actual_, false, self, self);
  }
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)dispose {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) isDisposed];
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self dispose];
  }
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
  return true;
}

- (void)openWithId:(id)window {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(bufferClose_)) applyWithId:window], @"The buffer closing publisher is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
  }
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *bcs = create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(b, self);
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:bcs];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) getAndIncrement];
  [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:bcs];
}

- (void)openFinishedWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) removeWithIoReactivexDisposablesDisposable:d]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
      [self complete];
    }
  }
}

- (void)closeWithJavaUtilCollection:(id<JavaUtilCollection>)b
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  jboolean e;
  @synchronized(self) {
    e = [((id<JavaUtilList>) nil_chk(buffers_)) removeWithId:b];
  }
  if (e) {
    [self fastPathOrderedEmitMaxWithId:b withBoolean:false withIoReactivexDisposablesDisposable:self];
  }
  if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) removeWithIoReactivexDisposablesDisposable:d]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
      [self complete];
    }
  }
}

- (void)dealloc {
  RELEASE_(bufferOpen_);
  RELEASE_(bufferClose_);
  RELEASE_(bufferSupplier_);
  RELEASE_(resources_);
  RELEASE_(s_);
  RELEASE_(buffers_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 5, -1, 15, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, 20, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(complete);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(isDisposed);
  methods[9].selector = @selector(cancel);
  methods[10].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  methods[11].selector = @selector(openWithId:);
  methods[12].selector = @selector(openFinishedWithIoReactivexDisposablesDisposable:);
  methods[13].selector = @selector(closeWithJavaUtilCollection:withIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferOpen_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "bufferClose_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "resources_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lorg/reactivestreams/Subscriber<-TU;>;Lorg/reactivestreams/Publisher<+TOpen;>;Lio/reactivex/functions/Function<-TOpen;+Lorg/reactivestreams/Publisher<+TClose;>;>;Ljava/util/concurrent/Callable<TU;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "accept", "LOrgReactivestreamsSubscriber;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;)Z", "open", "(TOpen;)V", "openFinished", "LIoReactivexDisposablesDisposable;", "close", "LJavaUtilCollection;LIoReactivexDisposablesDisposable;", "(TU;Lio/reactivex/disposables/Disposable;)V", "Lorg/reactivestreams/Publisher<+TOpen;>;", "Lio/reactivex/functions/Function<-TOpen;+Lorg/reactivestreams/Publisher<+TClose;>;>;", "Ljava/util/concurrent/Callable<TU;>;", "Ljava/util/List<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;TU;TU;>;Lorg/reactivestreams/Subscription;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber = { "BufferBoundarySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 14, 7, 25, -1, -1, 26, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->bufferOpen_, bufferOpen);
  JreStrongAssign(&self->bufferClose_, bufferClose);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexDisposablesCompositeDisposable_init());
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, actual, bufferOpen, bufferClose, bufferSupplier)
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, actual, bufferOpen, bufferClose, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  [((IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *) nil_chk(parent_)) openWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *) nil_chk(parent_)) openFinishedWithIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber<TT;TU;TOpen;TClose;>;)V", "onNext", "LNSObject;", "(TOpen;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber<TT;TU;TOpen;TClose;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TOpen;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber = { "BufferOpenSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)value
withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(self, value, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  [self onComplete];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  [((IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *) nil_chk(parent_)) closeWithJavaUtilCollection:value_ withIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "value_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;", "(TU;Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber<TT;TU;TOpen;TClose;>;)V", "onNext", "LNSObject;", "(TClose;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber<TT;TU;TOpen;TClose;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TClose;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber = { "BufferCloseSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *self, id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->value_, value);
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber, initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_, value, parent)
}

IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber, initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_, value, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber)
