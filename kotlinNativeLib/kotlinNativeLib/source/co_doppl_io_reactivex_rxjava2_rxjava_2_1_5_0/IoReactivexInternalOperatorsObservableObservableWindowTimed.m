//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalObserversQueueDrainObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableWindowTimed.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubjectsUnicastSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask () {
 @public
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *this$0_;
  IoReactivexSubjectsUnicastSubject *w_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask, w_, IoReactivexSubjectsUnicastSubject *)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timespan
                                           withLong:(jlong)timeskip
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                           withLong:(jlong)maxSize
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(self, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  IoReactivexObserversSerializedObserver *actual = create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t);
  if (timespan_ == timeskip_) {
    if (maxSize_ == JavaLangLong_MAX_VALUE) {
      [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(actual, timespan_, unit_, scheduler_, bufferSize_)];
      return;
    }
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(actual, timespan_, unit_, scheduler_, bufferSize_, maxSize_, restartTimerOnMaxSize_)];
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(actual, timespan_, timeskip_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker], bufferSize_)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withLong:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;JIZ", "(Lio/reactivex/ObservableSource<TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;)V", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver;LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;Lio/reactivex/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed = { "ObservableWindowTimed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 7, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed *self, id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->maxSize_ = maxSize;
  self->bufferSize_ = bufferSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
}

IoReactivexInternalOperatorsObservableObservableWindowTimed *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver)

id IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT;

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver

+ (id)NEXT {
  return IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(self, actual, timespan, unit, scheduler, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    JreStrongAssign(&window_, IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_));
    id<IoReactivexObserver> a = actual_;
    [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [a onNextWithId:window_];
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
      IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(timer_, d);
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&terminated_)) {
    return;
  }
  if ([self fastEnter]) {
    [((IoReactivexSubjectsUnicastSubject *) nil_chk(window_)) onNextWithId:t];
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [self disposeTimer];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [self disposeTimer];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeTimer {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)run {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&terminated_, true);
    [self disposeTimer];
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  IoReactivexInternalQueueMpscLinkedQueue *q = (IoReactivexInternalQueueMpscLinkedQueue *) cast_chk(queue_, [IoReactivexInternalQueueMpscLinkedQueue class]);
  id<IoReactivexObserver> a = actual_;
  IoReactivexSubjectsUnicastSubject *w = window_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      jboolean term = JreLoadVolatileBoolean(&terminated_);
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) poll];
      if (d && (o == nil || o == IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT)) {
        JreStrongAssign(&window_, nil);
        [q clear];
        [self disposeTimer];
        JavaLangThrowable *err = error_;
        if (err != nil) {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onErrorWithJavaLangThrowable:err];
        }
        else {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
        }
        return;
      }
      if (o == nil) {
        break;
      }
      if (o == IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT) {
        [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
        if (!term) {
          w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
          JreStrongAssign(&window_, w);
          [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
        }
        else {
          [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
        }
        continue;
      }
      [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  RELEASE_(window_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(disposeTimer);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "timer_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "NEXT", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", &IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT, "LIoReactivexInternalOperatorsObservableObservableWindowTimed;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;Ljava/lang/Object;Lio/reactivex/Observable<TT;>;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver = { "WindowExactUnboundedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 10, 9, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *self, id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_, actual, timespan, unit, scheduler, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_, actual, timespan, unit, scheduler, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                    withInt:(jint)bufferSize
                                   withLong:(jlong)maxSize
                                withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(self, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<IoReactivexObserver> a = actual_;
    [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
    JreStrongAssign(&window_, w);
    [a onNextWithId:w];
    id<IoReactivexDisposablesDisposable> d;
    IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *consumerIndexHolder = create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(producerIndex_, self);
    if (restartTimerOnMaxSize_) {
      d = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:consumerIndexHolder withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
    }
    else {
      d = [((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:consumerIndexHolder withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
    }
    IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(timer_, d);
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&terminated_)) {
    return;
  }
  if ([self fastEnter]) {
    IoReactivexSubjectsUnicastSubject *w = window_;
    [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:t];
    jlong c = count_ + 1;
    if (c >= maxSize_) {
      producerIndex_++;
      count_ = 0;
      [w onComplete];
      w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
      JreStrongAssign(&window_, w);
      [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:w];
      if (restartTimerOnMaxSize_) {
        id<IoReactivexDisposablesDisposable> tm = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get];
        [((id<IoReactivexDisposablesDisposable>) nil_chk(tm)) dispose];
        id<IoReactivexDisposablesDisposable> task = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(producerIndex_, self) withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
        IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(timer_, task);
      }
    }
    else {
      count_ = c;
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self disposeTimer];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  [self disposeTimer];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeTimer {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
  IoReactivexScheduler_Worker *w = worker_;
  if (w != nil) {
    [w dispose];
  }
}

- (void)drainLoop {
  IoReactivexInternalQueueMpscLinkedQueue *q = (IoReactivexInternalQueueMpscLinkedQueue *) cast_chk(queue_, [IoReactivexInternalQueueMpscLinkedQueue class]);
  id<IoReactivexObserver> a = actual_;
  IoReactivexSubjectsUnicastSubject *w = window_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&terminated_)) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
        [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) clear];
        [self disposeTimer];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) poll];
      jboolean empty = o == nil;
      jboolean isHolder = [o isKindOfClass:[IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder class]];
      if (d && (empty || isHolder)) {
        JreStrongAssign(&window_, nil);
        [q clear];
        [self disposeTimer];
        JavaLangThrowable *err = error_;
        if (err != nil) {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onErrorWithJavaLangThrowable:err];
        }
        else {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
      if (isHolder) {
        IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *consumerIndexHolder = (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *) cast_chk(o, [IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder class]);
        if (restartTimerOnMaxSize_ || producerIndex_ == ((IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *) nil_chk(consumerIndexHolder))->index_) {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
          count_ = 0;
          w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
          JreStrongAssign(&window_, w);
          [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
        }
        continue;
      }
      [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
      jlong c = count_ + 1;
      if (c >= maxSize_) {
        producerIndex_++;
        count_ = 0;
        [w onComplete];
        w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
        JreStrongAssign(&window_, w);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:w];
        if (restartTimerOnMaxSize_) {
          id<IoReactivexDisposablesDisposable> tm = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get];
          [((id<IoReactivexDisposablesDisposable>) nil_chk(tm)) dispose];
          id<IoReactivexDisposablesDisposable> task = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(producerIndex_, self) withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
          if (![timer_ compareAndSetWithId:tm withId:task]) {
            [((id<IoReactivexDisposablesDisposable>) nil_chk(task)) dispose];
          }
        }
      }
      else {
        count_ = c;
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(worker_);
  RELEASE_(s_);
  RELEASE_(window_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:withLong:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(disposeTimer);
  methods[8].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "timer_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;IJZ", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;Ljava/lang/Object;Lio/reactivex/Observable<TT;>;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver = { "WindowExactBoundedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 13, 11, 12, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *self, id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->bufferSize_ = bufferSize;
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
  if (restartTimerOnMaxSize) {
    JreStrongAssign(&self->worker_, [((IoReactivexScheduler *) nil_chk(scheduler)) createWorker]);
  }
  else {
    JreStrongAssign(&self->worker_, nil);
  }
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder

- (instancetype)initWithLong:(jlong)index
withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver:(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(self, index, parent);
  return self;
}

- (void)run {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *p = parent_;
  if (!JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *) nil_chk(p))->cancelled_)) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(p->queue_)) offerWithId:self];
  }
  else {
    JreAssignVolatileBoolean(&p->terminated_, true);
    [p disposeTimer];
  }
  if ([p enter]) {
    [p drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "JLIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;", "(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver<*>;)V", "Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowExactBoundedObserver<*>;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder = { "ConsumerIndexHolder", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 2, 3, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *self, jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent) {
  NSObject_init(self);
  self->index_ = index;
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder, initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_, index, parent)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder, initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_, index, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
                                   withLong:(jlong)timeskip
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(self, actual, timespan, timeskip, unit, worker, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
    [((id<JavaUtilList>) nil_chk(windows_)) addWithId:w];
    [actual_ onNextWithId:w];
    [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(self, w) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
    [worker_ schedulePeriodicallyWithJavaLangRunnable:self withLong:timeskip_ withLong:timeskip_ withJavaUtilConcurrentTimeUnit:unit_];
  }
}

- (void)onNextWithId:(id)t {
  if ([self fastEnter]) {
    for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(windows_)) {
      [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:t];
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:t];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self disposeWorker];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  [self disposeWorker];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeWorker {
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)completeWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(w, false)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  IoReactivexInternalQueueMpscLinkedQueue *q = (IoReactivexInternalQueueMpscLinkedQueue *) cast_chk(queue_, [IoReactivexInternalQueueMpscLinkedQueue class]);
  id<IoReactivexObserver> a = actual_;
  id<JavaUtilList> ws = windows_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&terminated_)) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
        [self disposeWorker];
        [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) clear];
        [((id<JavaUtilList>) nil_chk(ws)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v = [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) poll];
      jboolean empty = v == nil;
      jboolean sw = [v isKindOfClass:[IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork class]];
      if (d && (empty || sw)) {
        [q clear];
        JavaLangThrowable *e = error_;
        if (e != nil) {
          for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
            [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
          }
        }
        else {
          for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
            [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
          }
        }
        [self disposeWorker];
        [ws clear];
        return;
      }
      if (empty) {
        break;
      }
      if (sw) {
        IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *work = (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *) cast_chk(v, [IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork class]);
        if (((IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *) nil_chk(work))->open_) {
          if (JreLoadVolatileBoolean(&cancelled_)) {
            continue;
          }
          IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
          [((id<JavaUtilList>) nil_chk(ws)) addWithId:w];
          [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(self, w) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
        }
        else {
          [((id<JavaUtilList>) nil_chk(ws)) removeWithId:work->w_];
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(work->w_)) onComplete];
          if ([ws isEmpty] && JreLoadVolatileBoolean(&cancelled_)) {
            JreAssignVolatileBoolean(&terminated_, true);
          }
        }
      }
      else {
        for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:v];
        }
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)run {
  IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *sw = create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(w, true);
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:sw];
  }
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(windows_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(disposeWorker);
  methods[8].selector = @selector(completeWithIoReactivexSubjectsUnicastSubject:);
  methods[9].selector = @selector(drainLoop);
  methods[10].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "windows_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;I", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "complete", "LIoReactivexSubjectsUnicastSubject;", "(Lio/reactivex/subjects/UnicastSubject<TT;>;)V", "Ljava/util/List<Lio/reactivex/subjects/UnicastSubject<TT;>;>;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork;LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;Ljava/lang/Object;Lio/reactivex/Observable<TT;>;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver = { "WindowSkipObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 11, 8, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *self, id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilLinkedList_init());
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_, actual, timespan, timeskip, unit, worker, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_, actual, timespan, timeskip, unit, worker, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w
                                              withBoolean:(jboolean)open {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(self, w, open);
  return self;
}

- (void)dealloc {
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSubjectsUnicastSubject:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "open_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSubjectsUnicastSubject;Z", "(Lio/reactivex/subjects/UnicastSubject<TT;>;Z)V", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork = { "SubjectWork", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 1, 2, 3, -1, -1, 4, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *self, IoReactivexSubjectsUnicastSubject *w, jboolean open) {
  NSObject_init(self);
  JreStrongAssign(&self->w_, w);
  self->open_ = open;
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexSubjectsUnicastSubject *w, jboolean open) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork, initWithIoReactivexSubjectsUnicastSubject_withBoolean_, w, open)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexSubjectsUnicastSubject *w, jboolean open) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork, initWithIoReactivexSubjectsUnicastSubject_withBoolean_, w, open)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork)

@implementation IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver:(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *)outer$
                                                                 withIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w {
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(self, outer$, w);
  return self;
}

- (void)run {
  [this$0_ completeWithIoReactivexSubjectsUnicastSubject:w_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver:withIoReactivexSubjectsUnicastSubject:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "w_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSubjectsUnicastSubject;", "(Lio/reactivex/subjects/UnicastSubject<TT;>;)V", "Lio/reactivex/internal/operators/observable/ObservableWindowTimed$WindowSkipObserver<TT;>;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "LIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask = { "CompletionTask", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *self, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->w_, w);
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask, initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_, outer$, w)
}

IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask, initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_, outer$, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask)
