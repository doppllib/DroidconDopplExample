//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalObserversQueueDrainObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableBufferBoundary.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversDisposableObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsObservableObservableBufferBoundary

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)bufferOpen
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsObservableObservableBufferBoundary_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(self, source, bufferOpen, bufferClose, bufferSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), bufferOpen_, bufferClose_, bufferSupplier_)];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(bufferOpen_);
  RELEASE_(bufferClose_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferOpen_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferClose_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<+TOpen;>;Lio/reactivex/functions/Function<-TOpen;+Lio/reactivex/ObservableSource<+TClose;>;>;Ljava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "Lio/reactivex/ObservableSource<+TOpen;>;", "Lio/reactivex/functions/Function<-TOpen;+Lio/reactivex/ObservableSource<+TClose;>;>;", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver;LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferBoundary = { "ObservableBufferBoundary", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferBoundary;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferBoundary_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBufferBoundary *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->bufferOpen_, bufferOpen);
  JreStrongAssign(&self->bufferClose_, bufferClose);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary *new_IoReactivexInternalOperatorsObservableObservableBufferBoundary_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, bufferOpen, bufferClose, bufferSupplier)
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary *create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, bufferOpen, bufferClose, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferBoundary)

@implementation IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)bufferOpen
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(self, actual, bufferOpen, bufferClose, bufferSupplier);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver *bos = create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(self);
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:bos];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) lazySetWithInt:1];
    [((id<IoReactivexObservableSource>) nil_chk(bufferOpen_)) subscribeWithIoReactivexObserver:bos];
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    for (id<JavaUtilCollection> __strong b in nil_chk(buffers_)) {
      [((id<JavaUtilCollection>) nil_chk(b)) addWithId:t];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self dispose];
  JreAssignVolatileBoolean(&cancelled_, true);
  @synchronized(self) {
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
    [self complete];
  }
}

- (void)complete {
  id<JavaUtilList> list;
  @synchronized(self) {
    list = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(buffers_));
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  for (id<JavaUtilCollection> __strong u in list) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:u];
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimplePlainQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(q, actual_, false, self, self);
  }
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id<JavaUtilCollection>)v {
  [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
}

- (void)openWithId:(id)window {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  id<IoReactivexObservableSource> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(bufferClose_)) applyWithId:window], @"The buffer closing Observable is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
  }
  IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver *bcs = create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver_initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(b, self);
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:bcs];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) getAndIncrement];
  [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:bcs];
}

- (void)openFinishedWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) removeWithIoReactivexDisposablesDisposable:d]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
      [self complete];
    }
  }
}

- (void)closeWithJavaUtilCollection:(id<JavaUtilCollection>)b
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  jboolean e;
  @synchronized(self) {
    e = [((id<JavaUtilList>) nil_chk(buffers_)) removeWithId:b];
  }
  if (e) {
    [self fastPathOrderedEmitWithId:b withBoolean:false withIoReactivexDisposablesDisposable:self];
  }
  if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) removeWithIoReactivexDisposablesDisposable:d]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(windows_)) decrementAndGet] == 0) {
      [self complete];
    }
  }
}

- (void)dealloc {
  RELEASE_(bufferOpen_);
  RELEASE_(bufferClose_);
  RELEASE_(bufferSupplier_);
  RELEASE_(resources_);
  RELEASE_(s_);
  RELEASE_(buffers_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 12, 5, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(complete);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(acceptWithIoReactivexObserver:withId:);
  methods[9].selector = @selector(openWithId:);
  methods[10].selector = @selector(openFinishedWithIoReactivexDisposablesDisposable:);
  methods[11].selector = @selector(closeWithJavaUtilCollection:withIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferOpen_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "bufferClose_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "resources_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/Observer<-TU;>;Lio/reactivex/ObservableSource<+TOpen;>;Lio/reactivex/functions/Function<-TOpen;+Lio/reactivex/ObservableSource<+TClose;>;>;Ljava/util/concurrent/Callable<TU;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "accept", "LIoReactivexObserver;LJavaUtilCollection;", "(Lio/reactivex/Observer<-TU;>;TU;)V", "open", "(TOpen;)V", "openFinished", "close", "LJavaUtilCollection;LIoReactivexDisposablesDisposable;", "(TU;Lio/reactivex/disposables/Disposable;)V", "Lio/reactivex/ObservableSource<+TOpen;>;", "Lio/reactivex/functions/Function<-TOpen;+Lio/reactivex/ObservableSource<+TClose;>;>;", "Ljava/util/concurrent/Callable<TU;>;", "Ljava/util/List<TU;>;", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;TU;TU;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver = { "BufferBoundaryObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 12, 7, 22, -1, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->bufferOpen_, bufferOpen);
  JreStrongAssign(&self->bufferClose_, bufferClose);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexDisposablesCompositeDisposable_init());
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *new_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, actual, bufferOpen, bufferClose, bufferSupplier)
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, actual, bufferOpen, bufferClose, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver)

@implementation IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver:(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  [((IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *) nil_chk(parent_)) openWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *) nil_chk(parent_)) openFinishedWithIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;", "(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver<TT;TU;TOpen;TClose;>;)V", "onNext", "LNSObject;", "(TOpen;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver<TT;TU;TOpen;TClose;>;", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<TOpen;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver = { "BufferOpenObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver *self, IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver *new_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver, initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_, parent)
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver *create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver, initWithIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferOpenObserver)

@implementation IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)value
withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver:(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver_initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(self, value, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  [self onComplete];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  [((IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *) nil_chk(parent_)) closeWithJavaUtilCollection:value_ withIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "value_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;LIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver;", "(TU;Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver<TT;TU;TOpen;TClose;>;)V", "onNext", "LNSObject;", "(TClose;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver<TT;TU;TOpen;TClose;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableBufferBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;Open:Ljava/lang/Object;Close:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<TClose;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver = { "BufferCloseObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver_initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver *self, id<JavaUtilCollection> value, IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->value_, value);
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver *new_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver_initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver, initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_, value, parent)
}

IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver *create_IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver_initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver, initWithJavaUtilCollection_withIoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferBoundaryObserver_, value, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferBoundary_BufferCloseObserver)
