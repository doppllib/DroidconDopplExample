//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexProcessorsPublishProcessor")
#ifdef RESTRICT_IoReactivexProcessorsPublishProcessor
#define INCLUDE_ALL_IoReactivexProcessorsPublishProcessor 0
#else
#define INCLUDE_ALL_IoReactivexProcessorsPublishProcessor 1
#endif
#undef RESTRICT_IoReactivexProcessorsPublishProcessor

#if !defined (IoReactivexProcessorsPublishProcessor_) && (INCLUDE_ALL_IoReactivexProcessorsPublishProcessor || defined(INCLUDE_IoReactivexProcessorsPublishProcessor))
#define IoReactivexProcessorsPublishProcessor_

#define RESTRICT_IoReactivexProcessorsFlowableProcessor 1
#define INCLUDE_IoReactivexProcessorsFlowableProcessor 1
#include "IoReactivexProcessorsFlowableProcessor.h"

@class IOSObjectArray;
@class IoReactivexProcessorsPublishProcessor_PublishSubscription;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexProcessorsPublishProcessor : IoReactivexProcessorsFlowableProcessor {
 @public
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaLangThrowable *error_;
}

+ (IOSObjectArray *)TERMINATED;

+ (IOSObjectArray *)EMPTY;

#pragma mark Public

+ (IoReactivexProcessorsPublishProcessor *)create;

- (JavaLangThrowable *)getThrowable;

- (jboolean)hasComplete;

- (jboolean)hasSubscribers;

- (jboolean)hasThrowable;

- (jboolean)offerWithId:(id)t;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)t;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)addWithIoReactivexProcessorsPublishProcessor_PublishSubscription:(IoReactivexProcessorsPublishProcessor_PublishSubscription *)ps;

- (void)removeWithIoReactivexProcessorsPublishProcessor_PublishSubscription:(IoReactivexProcessorsPublishProcessor_PublishSubscription *)ps;

@end

J2OBJC_STATIC_INIT(IoReactivexProcessorsPublishProcessor)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsPublishProcessor, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsPublishProcessor, error_, JavaLangThrowable *)

inline IOSObjectArray *IoReactivexProcessorsPublishProcessor_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsPublishProcessor_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsPublishProcessor, TERMINATED, IOSObjectArray *)

inline IOSObjectArray *IoReactivexProcessorsPublishProcessor_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsPublishProcessor_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsPublishProcessor, EMPTY, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexProcessorsPublishProcessor *IoReactivexProcessorsPublishProcessor_create();

FOUNDATION_EXPORT void IoReactivexProcessorsPublishProcessor_init(IoReactivexProcessorsPublishProcessor *self);

FOUNDATION_EXPORT IoReactivexProcessorsPublishProcessor *new_IoReactivexProcessorsPublishProcessor_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsPublishProcessor *create_IoReactivexProcessorsPublishProcessor_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsPublishProcessor)

#endif

#if !defined (IoReactivexProcessorsPublishProcessor_PublishSubscription_) && (INCLUDE_ALL_IoReactivexProcessorsPublishProcessor || defined(INCLUDE_IoReactivexProcessorsPublishProcessor_PublishSubscription))
#define IoReactivexProcessorsPublishProcessor_PublishSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexProcessorsPublishProcessor;
@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexProcessorsPublishProcessor_PublishSubscription : JavaUtilConcurrentAtomicAtomicLong < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexProcessorsPublishProcessor *parent_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isCancelled;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
           withIoReactivexProcessorsPublishProcessor:(IoReactivexProcessorsPublishProcessor *)parent;

- (jboolean)isFull;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsPublishProcessor_PublishSubscription)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsPublishProcessor_PublishSubscription, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsPublishProcessor_PublishSubscription, parent_, IoReactivexProcessorsPublishProcessor *)

FOUNDATION_EXPORT void IoReactivexProcessorsPublishProcessor_PublishSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsPublishProcessor_(IoReactivexProcessorsPublishProcessor_PublishSubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsPublishProcessor *parent);

FOUNDATION_EXPORT IoReactivexProcessorsPublishProcessor_PublishSubscription *new_IoReactivexProcessorsPublishProcessor_PublishSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsPublishProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsPublishProcessor *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsPublishProcessor_PublishSubscription *create_IoReactivexProcessorsPublishProcessor_PublishSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsPublishProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsPublishProcessor *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsPublishProcessor_PublishSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexProcessorsPublishProcessor")
