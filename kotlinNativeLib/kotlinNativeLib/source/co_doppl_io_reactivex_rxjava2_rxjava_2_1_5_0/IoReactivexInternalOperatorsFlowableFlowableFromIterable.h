//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFromIterable
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFromIterable
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromIterable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable))
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@protocol JavaLangIterable;
@protocol JavaUtilIterator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFromIterable : IoReactivexFlowable {
 @public
  id<JavaLangIterable> source_;
}

#pragma mark Public

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)source;

+ (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                             withJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromIterable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromIterable, source_, id<JavaLangIterable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsFlowableFlowableFromIterable *self, id<JavaLangIterable> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source);

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromIterable_subscribeWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> s, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromIterable)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_

#define RESTRICT_IoReactivexInternalSubscriptionsBasicQueueSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsBasicQueueSubscription 1
#include "IoReactivexInternalSubscriptionsBasicQueueSubscription.h"

@protocol JavaUtilIterator;

@interface IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription : IoReactivexInternalSubscriptionsBasicQueueSubscription {
 @public
  id<JavaUtilIterator> it_;
  volatile_jboolean cancelled_;
  jboolean once_;
}

#pragma mark Public

- (void)cancel;

- (void)clear;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (jboolean)isEqual:(id)obj;

- (id __nullable)poll;

- (void)requestWithLong:(jlong)n;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription, it_, id<JavaUtilIterator>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_initWithJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription *self, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_

@protocol JavaUtilIterator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription : IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                withJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription, actual_, id<OrgReactivestreamsSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_

@protocol IoReactivexInternalFuseableConditionalSubscriber;
@protocol JavaUtilIterator;

@interface IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription : IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription {
 @public
  id<IoReactivexInternalFuseableConditionalSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                    withJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription, actual_, id<IoReactivexInternalFuseableConditionalSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromIterable")
