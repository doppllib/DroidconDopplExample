//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalObserversQueueDrainObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableBufferTimed.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer () {
 @public
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *this$0_;
  id<JavaUtilCollection> b_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer, b_, id<JavaUtilCollection>)

@interface IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit () {
 @public
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *this$0_;
  id<JavaUtilCollection> buffer_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit, buffer_, id<JavaUtilCollection>)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timespan
                                           withLong:(jlong)timeskip
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                            withInt:(jint)maxSize
                                        withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(self, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (timespan_ == timeskip_ && maxSize_ == JavaLangInteger_MAX_VALUE) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), bufferSupplier_, timespan_, unit_, scheduler_)];
    return;
  }
  IoReactivexScheduler_Worker *w = [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker];
  if (timespan_ == timeskip_) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), bufferSupplier_, timespan_, unit_, maxSize_, restartTimerOnMaxSize_, w)];
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), bufferSupplier_, timespan_, timeskip_, unit_, w)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(bufferSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withJavaUtilConcurrentCallable:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LJavaUtilConcurrentCallable;IZ", "(Lio/reactivex/ObservableSource<TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable<TU;>;IZ)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver;LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed = { "ObservableBufferTimed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 7, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableBufferTimed *self, id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
}

IoReactivexInternalOperatorsObservableObservableBufferTimed *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, bufferSupplier, timespan, unit, scheduler);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<JavaUtilCollection> b;
    @try {
      b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [self dispose];
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, actual_);
      return;
    }
    JreStrongAssign(&buffer_, b);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
      if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) compareAndSetWithId:nil withId:d]) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    id<JavaUtilCollection> b = buffer_;
    if (b == nil) {
      return;
    }
    [b addWithId:t];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  @synchronized(self) {
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)onComplete {
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = JreRetainedLocalValue(buffer_);
    JreStrongAssign(&buffer_, nil);
  }
  if (b != nil) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
    JreAssignVolatileBoolean(&done_, true);
    if ([self enter]) {
      IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimplePlainQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(queue_, actual_, false, self, self);
    }
  }
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (void)run {
  id<JavaUtilCollection> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The bufferSupplier returned a null buffer");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    [self dispose];
    return;
  }
  id<JavaUtilCollection> current;
  @synchronized(self) {
    current = JreRetainedLocalValue(buffer_);
    if (current != nil) {
      JreStrongAssign(&buffer_, next);
    }
  }
  if (current == nil) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
    return;
  }
  [self fastPathEmitWithId:current withBoolean:false withIoReactivexDisposablesDisposable:self];
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id<JavaUtilCollection>)v {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:v];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  RELEASE_(buffer_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(run);
  methods[8].selector = @selector(acceptWithIoReactivexObserver:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "timer_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lio/reactivex/Observer<-TU;>;Ljava/util/concurrent/Callable<TU;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "accept", "LIoReactivexObserver;LJavaUtilCollection;", "(Lio/reactivex/Observer<-TU;>;TU;)V", "Ljava/util/concurrent/Callable<TU;>;", "TU;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;TU;TU;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver = { "BufferExactUnboundedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 7, 15, -1, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver *self, id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, bufferSupplier, timespan, unit, scheduler)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, bufferSupplier, timespan, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactUnboundedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                   withLong:(jlong)timespan
                                   withLong:(jlong)timeskip
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(self, actual, bufferSupplier, timespan, timeskip, unit, w);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<JavaUtilCollection> b;
    @try {
      b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, actual_);
      [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
      return;
    }
    [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timeskip_ withLong:timeskip_ withJavaUtilConcurrentTimeUnit:unit_];
    [w_ scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(self, b) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    for (id<JavaUtilCollection> __strong b in nil_chk(buffers_)) {
      [((id<JavaUtilCollection>) nil_chk(b)) addWithId:t];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreAssignVolatileBoolean(&done_, true);
  [self clear];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (void)onComplete {
  id<JavaUtilList> bs;
  @synchronized(self) {
    bs = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(buffers_));
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  for (id<JavaUtilCollection> __strong b in bs) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimplePlainQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(queue_, actual_, false, w_, self);
  }
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self clear];
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)clear {
  @synchronized(self) {
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
}

- (void)run {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The bufferSupplier returned a null buffer");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    [self dispose];
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
  }
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(self, b) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id<JavaUtilCollection>)v {
  [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(w_);
  RELEASE_(buffers_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withJavaUtilConcurrentCallable:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(acceptWithIoReactivexObserver:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "w_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buffers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilConcurrentCallable;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;", "(Lio/reactivex/Observer<-TU;>;Ljava/util/concurrent/Callable<TU;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "accept", "LIoReactivexObserver;LJavaUtilCollection;", "(Lio/reactivex/Observer<-TU;>;TU;)V", "Ljava/util/concurrent/Callable<TU;>;", "Ljava/util/List<TU;>;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer;LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;TU;TU;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver = { "BufferSkipBoundedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 10, 7, 14, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *self, id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->w_, w);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilLinkedList_init());
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, timeskip, unit, w)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, timeskip, unit, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver:(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *)outer$
                                                                                       withJavaUtilCollection:(id<JavaUtilCollection>)b {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(self, outer$, b);
  return self;
}

- (void)run {
  @synchronized(this$0_) {
    [((id<JavaUtilList>) nil_chk(this$0_->buffers_)) removeWithId:b_];
  }
  [this$0_ fastPathOrderedEmitWithId:b_ withBoolean:false withIoReactivexDisposablesDisposable:this$0_->w_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver:withJavaUtilCollection:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "b_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(TU;)V", "Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver<TT;TU;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer = { "RemoveFromBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer *self, IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> b) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->b_, b);
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> b) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer, initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_, outer$, b)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> b) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer, initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_, outer$, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver:(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *)outer$
                                                                                       withJavaUtilCollection:(id<JavaUtilCollection>)buffer {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(self, outer$, buffer);
  return self;
}

- (void)run {
  @synchronized(this$0_) {
    [((id<JavaUtilList>) nil_chk(this$0_->buffers_)) removeWithId:buffer_];
  }
  [this$0_ fastPathOrderedEmitWithId:buffer_ withBoolean:false withIoReactivexDisposablesDisposable:this$0_->w_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver:withJavaUtilCollection:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(TU;)V", "Lio/reactivex/internal/operators/observable/ObservableBufferTimed$BufferSkipBoundedObserver<TT;TU;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit = { "RemoveFromBufferEmit", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit *self, IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> buffer) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->buffer_, buffer);
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> buffer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit, initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_, outer$, buffer)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit_initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver *outer$, id<JavaUtilCollection> buffer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit, initWithIoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_withJavaUtilCollection_, outer$, buffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferSkipBoundedObserver_RemoveFromBufferEmit)

@implementation IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                    withInt:(jint)maxSize
                                withBoolean:(jboolean)restartOnMaxSize
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w {
  IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(self, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<JavaUtilCollection> b;
    @try {
      b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, actual_);
      [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
      return;
    }
    JreStrongAssign(&buffer_, b);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_]);
  }
}

- (void)onNextWithId:(id)t {
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = JreRetainedLocalValue(buffer_);
    if (b == nil) {
      return;
    }
    [b addWithId:t];
    if ([b size] < maxSize_) {
      return;
    }
    JreStrongAssign(&buffer_, nil);
    producerIndex_++;
  }
  if (restartTimerOnMaxSize_) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(timer_)) dispose];
  }
  [self fastPathOrderedEmitWithId:b withBoolean:false withIoReactivexDisposablesDisposable:self];
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    [self dispose];
    return;
  }
  @synchronized(self) {
    JreStrongAssign(&buffer_, b);
    consumerIndex_++;
  }
  if (restartTimerOnMaxSize_) {
    JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_]);
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  @synchronized(self) {
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (void)onComplete {
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = JreRetainedLocalValue(buffer_);
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimplePlainQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(queue_, actual_, false, self, self);
  }
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id<JavaUtilCollection>)v {
  [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
    @synchronized(self) {
      JreStrongAssign(&buffer_, nil);
    }
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)run {
  id<JavaUtilCollection> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The bufferSupplier returned a null buffer");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self dispose];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    return;
  }
  id<JavaUtilCollection> current;
  @synchronized(self) {
    current = JreRetainedLocalValue(buffer_);
    if (current == nil || producerIndex_ != consumerIndex_) {
      return;
    }
    JreStrongAssign(&buffer_, next);
  }
  [self fastPathOrderedEmitWithId:current withBoolean:false withIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(w_);
  RELEASE_(buffer_);
  RELEASE_(timer_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:withInt:withBoolean:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(acceptWithIoReactivexObserver:withId:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "w_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "timer_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;IZLIoReactivexScheduler_Worker;", "(Lio/reactivex/Observer<-TU;>;Ljava/util/concurrent/Callable<TU;>;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "accept", "LIoReactivexObserver;LJavaUtilCollection;", "(Lio/reactivex/Observer<-TU;>;TU;)V", "Ljava/util/concurrent/Callable<TU;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableBufferTimed;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;TU;TU;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver = { "BufferExactBoundedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 11, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver *self, id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartOnMaxSize;
  JreStrongAssign(&self->w_, w);
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver *new_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w)
}

IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver *create_IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBufferTimed_BufferExactBoundedObserver)
