//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalOperatorsSingleSingleAmb.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsSingleSingleAmb () {
 @public
  IOSObjectArray *sources_;
  id<JavaLangIterable> sourcesIterable_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleAmb, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleAmb, sourcesIterable_, id<JavaLangIterable>)

inline jlong IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_serialVersionUID -1944085461036028108LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleAmb

- (instancetype)initWithIoReactivexSingleSourceArray:(IOSObjectArray *)sources
                                withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable {
  IoReactivexInternalOperatorsSingleSingleAmb_initWithIoReactivexSingleSourceArray_withJavaLangIterable_(self, sources, sourcesIterable);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IOSObjectArray *sources = self->sources_;
  jint count = 0;
  if (sources == nil) {
    sources = [IOSObjectArray arrayWithLength:8 type:IoReactivexSingleSource_class_()];
    @try {
      for (id<IoReactivexSingleSource> __strong element in nil_chk(sourcesIterable_)) {
        if (element == nil) {
          IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null"), s);
          return;
        }
        if (count == sources->size_) {
          IOSObjectArray *b = [IOSObjectArray arrayWithLength:count + (JreRShift32(count, 2)) type:IoReactivexSingleSource_class_()];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sources, 0, b, 0, count);
          sources = b;
        }
        IOSObjectArray_Set(sources, count++, element);
      }
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(e, s);
      return;
    }
  }
  else {
    count = sources->size_;
  }
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver *shared = create_IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_(s, set);
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  for (jint i = 0; i < count; i++) {
    id<IoReactivexSingleSource> s1 = IOSObjectArray_Get(sources, i);
    if ([shared get]) {
      return;
    }
    if (s1 == nil) {
      [set dispose];
      JavaLangThrowable *e = create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null");
      if ([shared compareAndSetWithBoolean:false withBoolean:true]) {
        [s onErrorWithJavaLangThrowable:e];
      }
      else {
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
      }
      return;
    }
    [s1 subscribeWithIoReactivexSingleObserver:shared];
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(sourcesIterable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSourceArray:withJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "sourcesIterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexSingleSource;LJavaLangIterable;", "([Lio/reactivex/SingleSource<+TT;>;Ljava/lang/Iterable<+Lio/reactivex/SingleSource<+TT;>;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "[Lio/reactivex/SingleSource<+TT;>;", "Ljava/lang/Iterable<+Lio/reactivex/SingleSource<+TT;>;>;", "LIoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleAmb = { "SingleAmb", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleAmb;
}

@end

void IoReactivexInternalOperatorsSingleSingleAmb_initWithIoReactivexSingleSourceArray_withJavaLangIterable_(IoReactivexInternalOperatorsSingleSingleAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->sourcesIterable_, sourcesIterable);
}

IoReactivexInternalOperatorsSingleSingleAmb *new_IoReactivexInternalOperatorsSingleSingleAmb_initWithIoReactivexSingleSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleAmb, initWithIoReactivexSingleSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

IoReactivexInternalOperatorsSingleSingleAmb *create_IoReactivexInternalOperatorsSingleSingleAmb_initWithIoReactivexSingleSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleAmb, initWithIoReactivexSingleSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleAmb)

@implementation IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s
    withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set {
  IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_(self, s, set);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexSingleObserver>) nil_chk(s_)) onSuccessWithId:value];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexSingleObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)dealloc {
  RELEASE_(set_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexDisposablesCompositeDisposable:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexDisposablesCompositeDisposable;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/disposables/CompositeDisposable;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleAmb;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver = { "AmbSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 4, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver *self, id<IoReactivexSingleObserver> s, IoReactivexDisposablesCompositeDisposable *set) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->s_, s);
  JreStrongAssign(&self->set_, set);
}

IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver *new_IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_(id<IoReactivexSingleObserver> s, IoReactivexDisposablesCompositeDisposable *set) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver, initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_, s, set)
}

IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver *create_IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_(id<IoReactivexSingleObserver> s, IoReactivexDisposablesCompositeDisposable *set) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver, initWithIoReactivexSingleObserver_withIoReactivexDisposablesCompositeDisposable_, s, set)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleAmb_AmbSingleObserver)
