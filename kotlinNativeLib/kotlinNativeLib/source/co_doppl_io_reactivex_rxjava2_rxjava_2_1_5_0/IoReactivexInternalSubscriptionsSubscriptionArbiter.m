//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalSubscriptionsSubscriptionArbiter.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalSubscriptionsSubscriptionArbiter_get_serialVersionUID();
#define IoReactivexInternalSubscriptionsSubscriptionArbiter_serialVersionUID -2189523197179400958LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscriptionsSubscriptionArbiter, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(IoReactivexInternalSubscriptionsSubscriptionArbiter *self);

__attribute__((unused)) static void IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(IoReactivexInternalSubscriptionsSubscriptionArbiter *self);

@implementation IoReactivexInternalSubscriptionsSubscriptionArbiter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSubscriptionsSubscriptionArbiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSubscriptionWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    return;
  }
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(s, @"s is null");
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    id<OrgReactivestreamsSubscription> a = actual_;
    if (a != nil) {
      [a cancel];
    }
    JreStrongAssign(&actual_, s);
    jlong r = requested_;
    if ([self decrementAndGet] != 0) {
      IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(self);
    }
    if (r != 0LL) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:r];
    }
    return;
  }
  id<OrgReactivestreamsSubscription> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(missedSubscription_)) getAndSetWithId:s];
  if (a != nil) {
    [a cancel];
  }
  IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(self);
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    if (unbounded_) {
      return;
    }
    if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
      jlong r = requested_;
      if (r != JavaLangLong_MAX_VALUE) {
        r = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
        requested_ = r;
        if (r == JavaLangLong_MAX_VALUE) {
          unbounded_ = true;
        }
      }
      id<OrgReactivestreamsSubscription> a = actual_;
      if ([self decrementAndGet] != 0) {
        IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(self);
      }
      if (a != nil) {
        [a requestWithLong:n];
      }
      return;
    }
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(missedRequested_, n);
    IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(self);
  }
}

- (void)producedWithLong:(jlong)n {
  if (unbounded_) {
    return;
  }
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    jlong r = requested_;
    if (r != JavaLangLong_MAX_VALUE) {
      jlong u = r - n;
      if (u < 0LL) {
        IoReactivexInternalSubscriptionsSubscriptionHelper_reportMoreProducedWithLong_(u);
        u = 0;
      }
      requested_ = u;
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
    IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(self);
    return;
  }
  IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(missedProduced_, n);
  IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(self);
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(self);
  }
}

- (void)drain {
  IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(self);
}

- (void)drainLoop {
  IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(self);
}

- (jboolean)isUnbounded {
  return unbounded_;
}

- (jboolean)isCancelled {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(missedSubscription_);
  RELEASE_(missedRequested_);
  RELEASE_(missedProduced_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSubscriptionWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(requestWithLong:);
  methods[3].selector = @selector(producedWithLong:);
  methods[4].selector = @selector(cancel);
  methods[5].selector = @selector(drain);
  methods[6].selector = @selector(drainLoop);
  methods[7].selector = @selector(isUnbounded);
  methods[8].selector = @selector(isCancelled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalSubscriptionsSubscriptionArbiter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requested_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missedSubscription_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "missedRequested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "missedProduced_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "unbounded_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSubscription", "LOrgReactivestreamsSubscription;", "request", "J", "produced", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscriptionsSubscriptionArbiter = { "SubscriptionArbiter", "io.reactivex.internal.subscriptions", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalSubscriptionsSubscriptionArbiter;
}

@end

void IoReactivexInternalSubscriptionsSubscriptionArbiter_init(IoReactivexInternalSubscriptionsSubscriptionArbiter *self) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->missedSubscription_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->missedRequested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->missedProduced_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalSubscriptionsSubscriptionArbiter *new_IoReactivexInternalSubscriptionsSubscriptionArbiter_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscriptionsSubscriptionArbiter, init)
}

IoReactivexInternalSubscriptionsSubscriptionArbiter *create_IoReactivexInternalSubscriptionsSubscriptionArbiter_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscriptionsSubscriptionArbiter, init)
}

void IoReactivexInternalSubscriptionsSubscriptionArbiter_drain(IoReactivexInternalSubscriptionsSubscriptionArbiter *self) {
  if ([self getAndIncrement] != 0) {
    return;
  }
  IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(self);
}

void IoReactivexInternalSubscriptionsSubscriptionArbiter_drainLoop(IoReactivexInternalSubscriptionsSubscriptionArbiter *self) {
  jint missed = 1;
  jlong requestAmount = 0LL;
  id<OrgReactivestreamsSubscription> requestTarget = nil;
  for (; ; ) {
    id<OrgReactivestreamsSubscription> ms = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->missedSubscription_)) get];
    if (ms != nil) {
      ms = [self->missedSubscription_ getAndSetWithId:nil];
    }
    jlong mr = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->missedRequested_)) get];
    if (mr != 0LL) {
      mr = [self->missedRequested_ getAndSetWithLong:0LL];
    }
    jlong mp = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->missedProduced_)) get];
    if (mp != 0LL) {
      mp = [self->missedProduced_ getAndSetWithLong:0LL];
    }
    id<OrgReactivestreamsSubscription> a = self->actual_;
    if (JreLoadVolatileBoolean(&self->cancelled_)) {
      if (a != nil) {
        [a cancel];
        JreStrongAssign(&self->actual_, nil);
      }
      if (ms != nil) {
        [ms cancel];
      }
    }
    else {
      jlong r = self->requested_;
      if (r != JavaLangLong_MAX_VALUE) {
        jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, mr);
        if (u != JavaLangLong_MAX_VALUE) {
          jlong v = u - mp;
          if (v < 0LL) {
            IoReactivexInternalSubscriptionsSubscriptionHelper_reportMoreProducedWithLong_(v);
            v = 0;
          }
          r = v;
        }
        else {
          r = u;
        }
        self->requested_ = r;
      }
      if (ms != nil) {
        if (a != nil) {
          [a cancel];
        }
        JreStrongAssign(&self->actual_, ms);
        if (r != 0LL) {
          requestAmount = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(requestAmount, r);
          requestTarget = ms;
        }
      }
      else if (a != nil && mr != 0LL) {
        requestAmount = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(requestAmount, mr);
        requestTarget = a;
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      if (requestAmount != 0LL) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(requestTarget)) requestWithLong:requestAmount];
      }
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscriptionsSubscriptionArbiter)
