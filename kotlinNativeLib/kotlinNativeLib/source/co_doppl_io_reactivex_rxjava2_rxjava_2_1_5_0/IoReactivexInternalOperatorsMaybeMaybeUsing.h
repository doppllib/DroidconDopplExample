//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeUsing
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeUsing

#if !defined (IoReactivexInternalOperatorsMaybeMaybeUsing_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeUsing))
#define IoReactivexInternalOperatorsMaybeMaybeUsing_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsMaybeMaybeUsing : IoReactivexMaybe {
 @public
  id<JavaUtilConcurrentCallable> resourceSupplier_;
  id<IoReactivexFunctionsFunction> sourceSupplier_;
  id<IoReactivexFunctionsConsumer> resourceDisposer_;
  jboolean eager_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer
                                       withBoolean:(jboolean)eager;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeUsing)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing, resourceSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing, sourceSupplier_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing, resourceDisposer_, id<IoReactivexFunctionsConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeUsing *new_IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeUsing *create_IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeUsing)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver))
#define IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsConsumer;

@interface IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
  volatile_id d_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                                          withId:(id)resource
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                     withBoolean:(jboolean)eager;

- (void)disposeResourceAfter;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, disposer_, id<IoReactivexFunctionsConsumer>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *self, id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *new_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *create_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeUsing")
