//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowablePublishMulticast.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_serialVersionUID 8664815189257569791LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublishMulticast

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                    withInt:(jint)prefetch
                                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, source, selector, prefetch, delayError);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *mp = create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(prefetch_, delayError_);
  id<OrgReactivestreamsPublisher> other;
  @try {
    other = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(selector_)) applyWithId:mp], @"selector returned a null Publisher");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, s);
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *out = create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(s, mp);
  [((id<OrgReactivestreamsPublisher>) nil_chk(other)) subscribeWithOrgReactivestreamsSubscriber:out];
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:mp];
}

- (void)dealloc {
  RELEASE_(selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "selector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<TT;>;+Lorg/reactivestreams/Publisher<+TR;>;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<TT;>;+Lorg/reactivestreams/Publisher<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller;LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublishMulticast = { "FlowablePublishMulticast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->selector_, selector);
  self->prefetch_ = prefetch;
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, selector, prefetch, delayError)
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, selector, prefetch, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)processor {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(self, actual, processor);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *) nil_chk(processor_)) dispose];
}

- (void)onComplete {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *) nil_chk(processor_)) dispose];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *) nil_chk(processor_)) dispose];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(processor_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "processor_", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor<*>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor<*>;", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast;", "<R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TR;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller = { "OutputCanceller", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 3, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller;
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->processor_, processor);
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_, actual, processor)
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_, actual, processor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor)

IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED;

@implementation IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED;
}

- (instancetype)initWithInt:(jint)prefetch
                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(self, prefetch, delayError);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self->s_, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        JreAssignVolatileBoolean(&done_, true);
        [self drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(s, prefetch_);
        return;
      }
    }
    JreVolatileStrongAssign(&queue_, IoReactivexInternalUtilQueueDrainHelper_createQueueWithInt_(prefetch_));
    IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(s, prefetch_);
  }
}

- (void)dispose {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(s_);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
    if (q != nil) {
      [q clear];
    }
  }
}

- (jboolean)isDisposed {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_isCancelledWithOrgReactivestreamsSubscription_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get]);
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE && ![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(JreLoadVolatileId(&queue_))) offerWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) cancel];
    [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_init()];
    return;
  }
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  if (!JreLoadVolatileBoolean(&done_)) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *)s {
  for (; ; ) {
    IOSObjectArray *current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (current == IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(current))->size_;
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current, 0, next, 0, n);
    IOSObjectArray_Set(next, n, s);
    if ([subscribers_ compareAndSetWithId:current withId:next]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *)s {
  for (; ; ) {
    IOSObjectArray *current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (current == IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED || current == IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY) {
      return;
    }
    jint n = ((IOSObjectArray *) nil_chk(current))->size_;
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(current, i) == s) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *next;
    if (n == 1) {
      next = IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY;
    }
    else {
      next = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current, 0, next, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current, j + 1, next, j, n - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:current withId:next]) {
      return;
    }
  }
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(s, self);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:ms];
  if ([self addWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:ms]) {
    if ([ms isCancelled]) {
      [self removeWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:ms];
      return;
    }
    [self drain];
  }
  else {
    JavaLangThrowable *ex = error_;
    if (ex != nil) {
      [s onErrorWithJavaLangThrowable:ex];
    }
    else {
      [s onComplete];
    }
  }
}

- (void)drain {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
  jint upstreamConsumed = consumed_;
  jint localLimit = limit_;
  jboolean canRequest = sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC;
  for (; ; ) {
    IOSObjectArray *array = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(array))->size_;
    if (q != nil && n != 0) {
      jlong r = JavaLangLong_MAX_VALUE;
      {
        IOSObjectArray *a__ = array;
        IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *b__ = a__->buffer_;
        IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = *b__++;
          jlong u = [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *) nil_chk(ms)) get];
          if (u != JavaLangLong_MIN_VALUE) {
            if (r > u) {
              r = u;
            }
          }
        }
      }
      jlong e = 0LL;
      while (e != r) {
        if ([self isDisposed]) {
          [q clear];
          return;
        }
        jboolean d = JreLoadVolatileBoolean(&done_);
        if (d && !delayError_) {
          JavaLangThrowable *ex = error_;
          if (ex != nil) {
            [self errorAllWithJavaLangThrowable:ex];
            return;
          }
        }
        id v;
        @try {
          v = [q poll];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(s_);
          [self errorAllWithJavaLangThrowable:ex];
          return;
        }
        jboolean empty = v == nil;
        if (d && empty) {
          JavaLangThrowable *ex = error_;
          if (ex != nil) {
            [self errorAllWithJavaLangThrowable:ex];
          }
          else {
            [self completeAll];
          }
          return;
        }
        if (empty) {
          break;
        }
        {
          IOSObjectArray *a__ = array;
          IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *b__ = a__->buffer_;
          IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = *b__++;
            if ([((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *) nil_chk(ms)) get] != JavaLangLong_MIN_VALUE) {
              [((id<OrgReactivestreamsSubscriber>) nil_chk(ms->actual_)) onNextWithId:v];
            }
          }
        }
        e++;
        if (canRequest && ++upstreamConsumed == localLimit) {
          upstreamConsumed = 0;
          [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) requestWithLong:localLimit];
        }
      }
      if (e == r) {
        if ([self isDisposed]) {
          [q clear];
          return;
        }
        jboolean d = JreLoadVolatileBoolean(&done_);
        if (d && !delayError_) {
          JavaLangThrowable *ex = error_;
          if (ex != nil) {
            [self errorAllWithJavaLangThrowable:ex];
            return;
          }
        }
        if (d && [q isEmpty]) {
          JavaLangThrowable *ex = error_;
          if (ex != nil) {
            [self errorAllWithJavaLangThrowable:ex];
          }
          else {
            [self completeAll];
          }
          return;
        }
      }
      {
        IOSObjectArray *a__ = array;
        IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *b__ = a__->buffer_;
        IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = *b__++;
          IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(ms, e);
        }
      }
    }
    consumed_ = upstreamConsumed;
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    if (q == nil) {
      q = JreLoadVolatileId(&queue_);
    }
  }
}

- (void)errorAllWithJavaLangThrowable:(JavaLangThrowable *)ex {
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED];
    IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = *b__++;
      if ([((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *) nil_chk(ms)) get] != JavaLangLong_MIN_VALUE) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(ms->actual_)) onErrorWithJavaLangThrowable:ex];
      }
    }
  }
}

- (void)completeAll {
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED];
    IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *ms = *b__++;
      if ([((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *) nil_chk(ms)) get] != JavaLangLong_MIN_VALUE) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(ms->actual_)) onComplete];
      }
    }
  }
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(wip_);
  RELEASE_(subscribers_);
  RELEASE_(s_);
  JreReleaseVolatile(&queue_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 11, 9, -1, 12, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(addWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:);
  methods[8].selector = @selector(removeWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:);
  methods[9].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[10].selector = @selector(drain);
  methods[11].selector = @selector(errorAllWithJavaLangThrowable:);
  methods[12].selector = @selector(completeAll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "[LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 21, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumed_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZ", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "add", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;", "(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "errorAll", &IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY, &IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription<TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor = { "MulticastProcessor", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 13, 22, -1, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *self, jint prefetch, jboolean delayError) {
  IoReactivexFlowable_init(self);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY));
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(jint prefetch, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, initWithInt_withBoolean_, prefetch, delayError)
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(jint prefetch, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, initWithInt_withBoolean_, prefetch, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)parent {
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(self, actual, parent);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
    [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *) nil_chk(parent_)) drain];
  }
}

- (void)cancel {
  if ([self getAndSetWithLong:JavaLangLong_MIN_VALUE] != JavaLangLong_MIN_VALUE) {
    [((IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *) nil_chk(parent_)) removeWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:self];
    [parent_ drain];
  }
}

- (jboolean)isCancelled {
  return [self get] == JavaLangLong_MIN_VALUE;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(isCancelled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor<TT;>;)V", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublishMulticast;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription = { "MulticastSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_, actual, parent)
}

IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription)
