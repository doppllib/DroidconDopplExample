//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicQueueDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableFromIterable.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"

@implementation IoReactivexInternalOperatorsObservableObservableFromIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)source {
  IoReactivexInternalOperatorsObservableObservableFromIterable_initWithJavaLangIterable_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  id<JavaUtilIterator> it;
  @try {
    it = [((id<JavaLangIterable>) nil_chk(source_)) iterator];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, s);
    return;
  }
  jboolean hasNext;
  @try {
    hasNext = [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, s);
    return;
  }
  if (!hasNext) {
    IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(s);
    return;
  }
  IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable *d = create_IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable_initWithIoReactivexObserver_withJavaUtilIterator_(s, it);
  [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (!d->fusionMode_) {
    [d run];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/lang/Iterable<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFromIterable = { "ObservableFromIterable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFromIterable;
}

@end

void IoReactivexInternalOperatorsObservableObservableFromIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsObservableObservableFromIterable *self, id<JavaLangIterable> source) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsObservableObservableFromIterable *new_IoReactivexInternalOperatorsObservableObservableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFromIterable, initWithJavaLangIterable_, source)
}

IoReactivexInternalOperatorsObservableObservableFromIterable *create_IoReactivexInternalOperatorsObservableObservableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFromIterable, initWithJavaLangIterable_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFromIterable)

@implementation IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                       withJavaUtilIterator:(id<JavaUtilIterator>)it {
  IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable_initWithIoReactivexObserver_withJavaUtilIterator_(self, actual, it);
  return self;
}

- (void)run {
  jboolean hasNext;
  do {
    if ([self isDisposed]) {
      return;
    }
    id v;
    @try {
      v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilIterator>) nil_chk(it_)) next], @"The iterator returned a null value");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
      return;
    }
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:v];
    if ([self isDisposed]) {
      return;
    }
    @try {
      hasNext = [it_ hasNext];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [actual_ onErrorWithJavaLangThrowable:e];
      return;
    }
  }
  while (hasNext);
  if (![self isDisposed]) {
    [actual_ onComplete];
  }
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_SYNC) != 0) {
    fusionMode_ = true;
    return IoReactivexInternalFuseableQueueFuseable_SYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id __nullable)poll {
  if (done_) {
    return nil;
  }
  if (checkNext_) {
    if (![((id<JavaUtilIterator>) nil_chk(it_)) hasNext]) {
      done_ = true;
      return nil;
    }
  }
  else {
    checkNext_ = true;
  }
  return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilIterator>) nil_chk(it_)) next], @"The iterator returned a null value");
}

- (jboolean)isEmpty {
  return done_;
}

- (void)clear {
  done_ = true;
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(it_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withJavaUtilIterator:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "fusionMode_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "checkNext_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilIterator;", "(Lio/reactivex/Observer<-TT;>;Ljava/util/Iterator<+TT;>;)V", "requestFusion", "I", "()TT;", "Lio/reactivex/Observer<-TT;>;", "Ljava/util/Iterator<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableFromIterable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicQueueDisposable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable = { "FromIterableDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 6, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable_initWithIoReactivexObserver_withJavaUtilIterator_(IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable *self, id<IoReactivexObserver> actual, id<JavaUtilIterator> it) {
  IoReactivexInternalObserversBasicQueueDisposable_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->it_, it);
}

IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable *new_IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable_initWithIoReactivexObserver_withJavaUtilIterator_(id<IoReactivexObserver> actual, id<JavaUtilIterator> it) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable, initWithIoReactivexObserver_withJavaUtilIterator_, actual, it)
}

IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable *create_IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable_initWithIoReactivexObserver_withJavaUtilIterator_(id<IoReactivexObserver> actual, id<JavaUtilIterator> it) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable, initWithIoReactivexObserver_withJavaUtilIterator_, actual, it)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFromIterable_FromIterableDisposable)
