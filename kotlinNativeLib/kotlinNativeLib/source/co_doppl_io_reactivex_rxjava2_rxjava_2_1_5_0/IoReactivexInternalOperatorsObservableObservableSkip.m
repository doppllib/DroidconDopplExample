//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableSkip.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableSkip

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)n {
  IoReactivexInternalOperatorsObservableObservableSkip_initWithIoReactivexObservableSource_withLong_(self, source, n);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver_initWithIoReactivexObserver_withLong_(s, n_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;J", "(Lio/reactivex/ObservableSource<TT;>;J)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableSkip_SkipObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSkip = { "ObservableSkip", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSkip;
}

@end

void IoReactivexInternalOperatorsObservableObservableSkip_initWithIoReactivexObservableSource_withLong_(IoReactivexInternalOperatorsObservableObservableSkip *self, id<IoReactivexObservableSource> source, jlong n) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->n_ = n;
}

IoReactivexInternalOperatorsObservableObservableSkip *new_IoReactivexInternalOperatorsObservableObservableSkip_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong n) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSkip, initWithIoReactivexObservableSource_withLong_, source, n)
}

IoReactivexInternalOperatorsObservableObservableSkip *create_IoReactivexInternalOperatorsObservableObservableSkip_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong n) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSkip, initWithIoReactivexObservableSource_withLong_, source, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSkip)

@implementation IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)n {
  IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver_initWithIoReactivexObserver_withLong_(self, actual, n);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  JreStrongAssign(&self->d_, s);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
}

- (void)onNextWithId:(id)t {
  if (remaining_ != 0LL) {
    remaining_--;
  }
  else {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "remaining_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;J", "(Lio/reactivex/Observer<-TT;>;J)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableSkip;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver = { "SkipObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver_initWithIoReactivexObserver_withLong_(IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver *self, id<IoReactivexObserver> actual, jlong n) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->remaining_ = n;
}

IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver *new_IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong n) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver, initWithIoReactivexObserver_withLong_, actual, n)
}

IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver *create_IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong n) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver, initWithIoReactivexObserver_withLong_, actual, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSkip_SkipObserver)
