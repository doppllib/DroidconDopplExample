//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle

#if !defined (IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle))
#define IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle : IoReactivexSingle {
 @public
  id<OrgReactivestreamsPublisher> source_;
  id<JavaUtilConcurrentCallable> seedSupplier_;
  id<IoReactivexFunctionsBiFunction> reducer_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)seedSupplier
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle, seedSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle, reducer_, id<IoReactivexFunctionsBiFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle *self, id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> reducer);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle *new_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> reducer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle *create_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> reducer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableReduceWithSingle")
