//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexFlowablesConnectableFlowable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalOperatorsFlowableFlowableAutoConnect.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableAutoConnect

- (instancetype)initWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)source
                                                        withInt:(jint)numberOfSubscribers
                               withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  IoReactivexInternalOperatorsFlowableFlowableAutoConnect_initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_(self, source, numberOfSubscribers, connection);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  [((IoReactivexFlowablesConnectableFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:child];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(clients_)) incrementAndGet] == numberOfSubscribers_) {
    [source_ connectWithIoReactivexFunctionsConsumer:connection_];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(connection_);
  RELEASE_(clients_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowablesConnectableFlowable:withInt:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowablesConnectableFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "numberOfSubscribers_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "connection_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "clients_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowablesConnectableFlowable;ILIoReactivexFunctionsConsumer;", "(Lio/reactivex/flowables/ConnectableFlowable<+TT;>;ILio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/flowables/ConnectableFlowable<+TT;>;", "Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableAutoConnect = { "FlowableAutoConnect", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableAutoConnect;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableAutoConnect_initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableAutoConnect *self, IoReactivexFlowablesConnectableFlowable *source, jint numberOfSubscribers, id<IoReactivexFunctionsConsumer> connection) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  self->numberOfSubscribers_ = numberOfSubscribers;
  JreStrongAssign(&self->connection_, connection);
  JreStrongAssignAndConsume(&self->clients_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsFlowableFlowableAutoConnect *new_IoReactivexInternalOperatorsFlowableFlowableAutoConnect_initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexFlowablesConnectableFlowable *source, jint numberOfSubscribers, id<IoReactivexFunctionsConsumer> connection) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableAutoConnect, initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_, source, numberOfSubscribers, connection)
}

IoReactivexInternalOperatorsFlowableFlowableAutoConnect *create_IoReactivexInternalOperatorsFlowableFlowableAutoConnect_initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexFlowablesConnectableFlowable *source, jint numberOfSubscribers, id<IoReactivexFunctionsConsumer> connection) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableAutoConnect, initWithIoReactivexFlowablesConnectableFlowable_withInt_withIoReactivexFunctionsConsumer_, source, numberOfSubscribers, connection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableAutoConnect)
