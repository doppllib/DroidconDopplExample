//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleCreate
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleCreate

#if !defined (IoReactivexInternalOperatorsSingleSingleCreate_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleCreate))
#define IoReactivexInternalOperatorsSingleSingleCreate_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleOnSubscribe;

@interface IoReactivexInternalOperatorsSingleSingleCreate : IoReactivexSingle {
 @public
  id<IoReactivexSingleOnSubscribe> source_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleOnSubscribe:(id<IoReactivexSingleOnSubscribe>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleCreate)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCreate, source_, id<IoReactivexSingleOnSubscribe>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(IoReactivexInternalOperatorsSingleSingleCreate *self, id<IoReactivexSingleOnSubscribe> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCreate *new_IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(id<IoReactivexSingleOnSubscribe> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCreate *create_IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(id<IoReactivexSingleOnSubscribe> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleCreate)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleCreate_Emitter_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleCreate_Emitter))
#define IoReactivexInternalOperatorsSingleSingleCreate_Emitter_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleEmitter 1
#define INCLUDE_IoReactivexSingleEmitter 1
#include "IoReactivexSingleEmitter.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsCancellable;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleCreate_Emitter : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleEmitter, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onSuccessWithId:(id)value;

- (void)setCancellableWithIoReactivexFunctionsCancellable:(id<IoReactivexFunctionsCancellable>)c;

- (void)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (jboolean)tryOnErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleCreate_Emitter)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCreate_Emitter, actual_, id<IoReactivexSingleObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleCreate_Emitter *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCreate_Emitter *new_IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCreate_Emitter *create_IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleCreate_Emitter)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCreate")
