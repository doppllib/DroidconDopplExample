//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleObserveOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleObserveOn

#if !defined (IoReactivexInternalOperatorsSingleSingleObserveOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleObserveOn))
#define IoReactivexInternalOperatorsSingleSingleObserveOn_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@class IoReactivexScheduler;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleObserveOn : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> source_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleObserveOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleObserveOn *self, id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleObserveOn *new_IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleObserveOn *create_IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleObserveOn)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver))
#define IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  IoReactivexScheduler *scheduler_;
  id value_ObserveOnSingleObserver_;
  JavaLangThrowable *error_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                         withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, value_ObserveOnSingleObserver_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *self, id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *new_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *create_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleObserveOn")
