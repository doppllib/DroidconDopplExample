//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexObserversBaseTestConsumer")
#ifdef RESTRICT_IoReactivexObserversBaseTestConsumer
#define INCLUDE_ALL_IoReactivexObserversBaseTestConsumer 0
#else
#define INCLUDE_ALL_IoReactivexObserversBaseTestConsumer 1
#endif
#undef RESTRICT_IoReactivexObserversBaseTestConsumer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexObserversBaseTestConsumer_) && (INCLUDE_ALL_IoReactivexObserversBaseTestConsumer || defined(INCLUDE_IoReactivexObserversBaseTestConsumer))
#define IoReactivexObserversBaseTestConsumer_

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangAssertionError;
@class JavaLangThread;
@class JavaLangThrowable;
@class JavaUtilConcurrentCountDownLatch;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexFunctionsPredicate;
@protocol JavaLangCharSequence;
@protocol JavaLangIterable;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

@interface IoReactivexObserversBaseTestConsumer : NSObject < IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentCountDownLatch *done_;
  id<JavaUtilList> values_;
  id<JavaUtilList> errors_;
  jlong completions_;
  JavaLangThread *lastThread_;
  jboolean checkSubscriptionOnce_;
  jint initialFusionMode_;
  jint establishedFusionMode_;
  id<JavaLangCharSequence> tag_;
  jboolean timeout_;
}

#pragma mark Public

- (instancetype)init;

- (IoReactivexObserversBaseTestConsumer *)assertComplete;

- (IoReactivexObserversBaseTestConsumer *)assertEmpty;

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIOSClass:(IOSClass *)errorClass;

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate;

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithJavaLangThrowable:(JavaLangThrowable *)error;

- (IoReactivexObserversBaseTestConsumer *)assertErrorMessageWithNSString:(NSString *)message;

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIOSClass:(IOSClass *)error
                                                  withNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate
                                                                       withNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)assertFailureAndMessageWithIOSClass:(IOSClass *)error
                                                                 withNSString:(NSString *)message
                                                            withNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate;

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithId:(id)value;

- (IoReactivexObserversBaseTestConsumer *)assertNoErrors;

- (IoReactivexObserversBaseTestConsumer *)assertNotComplete;

- (IoReactivexObserversBaseTestConsumer *)assertNoTimeout;

- (IoReactivexObserversBaseTestConsumer *)assertNotSubscribed;

- (IoReactivexObserversBaseTestConsumer *)assertNotTerminated;

- (IoReactivexObserversBaseTestConsumer *)assertNoValues;

- (IoReactivexObserversBaseTestConsumer *)assertResultWithNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)assertSubscribed;

- (IoReactivexObserversBaseTestConsumer *)assertTerminated;

- (IoReactivexObserversBaseTestConsumer *)assertTimeout;

- (IoReactivexObserversBaseTestConsumer *)assertValueWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate;

- (IoReactivexObserversBaseTestConsumer *)assertValueWithId:(id)value;

- (IoReactivexObserversBaseTestConsumer *)assertValueAtWithInt:(jint)index
                             withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate;

- (IoReactivexObserversBaseTestConsumer *)assertValueAtWithInt:(jint)index
                                                        withId:(id)value;

- (IoReactivexObserversBaseTestConsumer *)assertValueCountWithInt:(jint)count;

- (IoReactivexObserversBaseTestConsumer *)assertValuesWithNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)assertValueSequenceWithJavaLangIterable:(id<JavaLangIterable>)sequence;

- (IoReactivexObserversBaseTestConsumer *)assertValueSetWithJavaUtilCollection:(id<JavaUtilCollection>)expected;

- (IoReactivexObserversBaseTestConsumer *)assertValuesOnlyWithNSObjectArray:(IOSObjectArray *)values;

- (IoReactivexObserversBaseTestConsumer *)await;

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast;

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast
                                       withJavaLangRunnable:(id<JavaLangRunnable>)waitStrategy;

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast
                                       withJavaLangRunnable:(id<JavaLangRunnable>)waitStrategy
                                                   withLong:(jlong)timeoutMillis;

- (IoReactivexObserversBaseTestConsumer *)awaitDoneWithLong:(jlong)time
                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)awaitTerminalEvent;

- (jboolean)awaitTerminalEventWithLong:(jlong)duration
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexObserversBaseTestConsumer *)clearTimeout;

- (jlong)completions;

- (jint)errorCount;

- (id<JavaUtilList>)errors;

- (id<JavaUtilList>)getEvents;

- (jboolean)isTerminated;

- (jboolean)isTimeout;

- (JavaLangThread *)lastThread;

+ (NSString *)valueAndClassWithId:(id)o;

- (jint)valueCount;

- (id<JavaUtilList>)values;

- (IoReactivexObserversBaseTestConsumer *)withTagWithJavaLangCharSequence:(id<JavaLangCharSequence>)tag;

#pragma mark Protected

- (JavaLangAssertionError *)failWithNSString:(NSString *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer)

J2OBJC_FIELD_SETTER(IoReactivexObserversBaseTestConsumer, done_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(IoReactivexObserversBaseTestConsumer, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexObserversBaseTestConsumer, errors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexObserversBaseTestConsumer, lastThread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(IoReactivexObserversBaseTestConsumer, tag_, id<JavaLangCharSequence>)

FOUNDATION_EXPORT void IoReactivexObserversBaseTestConsumer_init(IoReactivexObserversBaseTestConsumer *self);

FOUNDATION_EXPORT NSString *IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexObserversBaseTestConsumer)

#endif

#if !defined (IoReactivexObserversBaseTestConsumer_TestWaitStrategy_) && (INCLUDE_ALL_IoReactivexObserversBaseTestConsumer || defined(INCLUDE_IoReactivexObserversBaseTestConsumer_TestWaitStrategy))
#define IoReactivexObserversBaseTestConsumer_TestWaitStrategy_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_SPIN = 0,
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_YIELD = 1,
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_SLEEP_1MS = 2,
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_SLEEP_10MS = 3,
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_SLEEP_100MS = 4,
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum_SLEEP_1000MS = 5,
};

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy : JavaLangEnum < JavaLangRunnable >

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)SPIN;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)YIELD;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)SLEEP_1MS;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)SLEEP_10MS;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)SLEEP_100MS;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy * __nonnull)SLEEP_1000MS;

#pragma mark Public

- (void)run;

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

+ (void)sleepWithInt:(jint)millis;

- (IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values_[];

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_SPIN();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SPIN)

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_YIELD();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, YIELD)

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_SLEEP_1MS();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1MS)

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_SLEEP_10MS();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_10MS)

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_SLEEP_100MS();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_100MS)

inline IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_get_SLEEP_1000MS();
J2OBJC_ENUM_CONSTANT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1000MS)

FOUNDATION_EXPORT void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(jint millis);

FOUNDATION_EXPORT IOSObjectArray *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values();

FOUNDATION_EXPORT IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexObserversBaseTestConsumer_TestWaitStrategy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexObserversBaseTestConsumer")
