//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsBiConsumer.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCollect.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCollectSingle.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableCollectSingle

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
         withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector {
  IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(self, source, initialSupplier, collector);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  id u;
  @try {
    u = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(initialSupplier_)) call], @"The initialSupplier returned a null value");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(e, s);
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(s, u, collector_)];
}

- (IoReactivexFlowable *)fuseToFlowable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableCollect_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(source_, initialSupplier_, collector_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(initialSupplier_);
  RELEASE_(collector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withJavaUtilConcurrentCallable:withIoReactivexFunctionsBiConsumer:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  methods[2].selector = @selector(fuseToFlowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "initialSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "collector_", "LIoReactivexFunctionsBiConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiConsumer;", "(Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<+TU;>;Lio/reactivex/functions/BiConsumer<-TU;-TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TU;>;)V", "()Lio/reactivex/Flowable<TU;>;", "Lio/reactivex/Flowable<TT;>;", "Ljava/util/concurrent/Callable<+TU;>;", "Lio/reactivex/functions/BiConsumer<-TU;-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Single<TU;>;Lio/reactivex/internal/fuseable/FuseToFlowable<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCollectSingle = { "FlowableCollectSingle", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 9, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCollectSingle;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollectSingle *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->initialSupplier_, initialSupplier);
  JreStrongAssign(&self->collector_, collector);
}

IoReactivexInternalOperatorsFlowableFlowableCollectSingle *new_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollectSingle, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_, source, initialSupplier, collector)
}

IoReactivexInternalOperatorsFlowableFlowableCollectSingle *create_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollectSingle, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_, source, initialSupplier, collector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCollectSingle)

@implementation IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)u
               withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector {
  IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(self, actual, u, collector);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(JreLoadVolatileId(&self->s_), s)) {
    JreVolatileStrongAssign(&self->s_, s);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  @try {
    [((id<IoReactivexFunctionsBiConsumer>) nil_chk(collector_)) acceptWithId:u_ withId:t];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
    [self onErrorWithJavaLangThrowable:e];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:u_];
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
}

- (jboolean)isDisposed {
  return JreLoadVolatileId(&s_) == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&s_, &original->s_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(collector_);
  RELEASE_(u_);
  JreReleaseVolatile(&s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withId:withIoReactivexFunctionsBiConsumer:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "collector_", "LIoReactivexFunctionsBiConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "u_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LNSObject;LIoReactivexFunctionsBiConsumer;", "(Lio/reactivex/SingleObserver<-TU;>;TU;Lio/reactivex/functions/BiConsumer<-TU;-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TU;>;", "Lio/reactivex/functions/BiConsumer<-TU;-TT;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableCollectSingle;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber = { "CollectSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 5, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *self, id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->collector_, collector);
  JreStrongAssign(&self->u_, u);
}

IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_, actual, u, collector)
}

IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_, actual, u, collector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber)
