//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsBiFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScan.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableScan

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator {
  IoReactivexInternalOperatorsFlowableFlowableScan_initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_(self, source, accumulator);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(s, accumulator_)];
}

- (void)dealloc {
  RELEASE_(accumulator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "accumulator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/BiFunction<TT;TT;TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/BiFunction<TT;TT;TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableScan = { "FlowableScan", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableScan;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableScan_initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableScan *self, IoReactivexFlowable *source, id<IoReactivexFunctionsBiFunction> accumulator) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->accumulator_, accumulator);
}

IoReactivexInternalOperatorsFlowableFlowableScan *new_IoReactivexInternalOperatorsFlowableFlowableScan_initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableScan, initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_, source, accumulator)
}

IoReactivexInternalOperatorsFlowableFlowableScan *create_IoReactivexInternalOperatorsFlowableFlowableScan_initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableScan, initWithIoReactivexFlowable_withIoReactivexFunctionsBiFunction_, source, accumulator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableScan)

@implementation IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator {
  IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(self, actual, accumulator);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  id v = value_;
  if (v == nil) {
    JreStrongAssign(&value_, t);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
  }
  else {
    id u;
    @try {
      u = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsBiFunction>) nil_chk(accumulator_)) applyWithId:v withId:t], @"The value returned by the accumulator is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      [self onErrorWithJavaLangThrowable:e];
      return;
    }
    JreStrongAssign(&value_, u);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:u];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(accumulator_);
  RELEASE_(s_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "accumulator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsBiFunction;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/BiFunction<TT;TT;TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/functions/BiFunction<TT;TT;TT;>;", "TT;", "LIoReactivexInternalOperatorsFlowableFlowableScan;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber = { "ScanSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 5, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->accumulator_, accumulator);
}

IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_, actual, accumulator)
}

IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_, actual, accumulator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber)
