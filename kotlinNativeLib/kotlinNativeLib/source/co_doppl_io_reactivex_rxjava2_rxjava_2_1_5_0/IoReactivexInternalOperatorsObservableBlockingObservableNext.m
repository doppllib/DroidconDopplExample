//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalOperatorsObservableBlockingObservableNext.h"
#include "IoReactivexInternalOperatorsObservableObservableMaterialize.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexNotification.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserversDisposableObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/ArrayBlockingQueue.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Consumer.h"

@interface IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator () {
 @public
  IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *observer_;
  id<IoReactivexObservableSource> items_;
  id next_;
  jboolean hasNext_;
  jboolean isNextConsumed_;
  JavaLangThrowable *error_;
  jboolean started_;
}

- (jboolean)moveToNext;

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, observer_, IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, items_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, next_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, error_, JavaLangThrowable *)

__attribute__((unused)) static jboolean IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_moveToNext(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator *self);

@interface IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver () {
 @public
  id<JavaUtilConcurrentBlockingQueue> buf_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver, buf_, id<JavaUtilConcurrentBlockingQueue>)

@implementation IoReactivexInternalOperatorsObservableBlockingObservableNext

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source {
  IoReactivexInternalOperatorsObservableBlockingObservableNext_initWithIoReactivexObservableSource_(self, source);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *nextObserver = create_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_init();
  return create_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_(source_, nextObserver);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<TT;>;)V", "()Ljava/util/Iterator<TT;>;", "Lio/reactivex/ObservableSource<TT;>;", "LIoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator;LIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableBlockingObservableNext = { "BlockingObservableNext", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 4, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsObservableBlockingObservableNext;
}

@end

void IoReactivexInternalOperatorsObservableBlockingObservableNext_initWithIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableBlockingObservableNext *self, id<IoReactivexObservableSource> source) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsObservableBlockingObservableNext *new_IoReactivexInternalOperatorsObservableBlockingObservableNext_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext, initWithIoReactivexObservableSource_, source)
}

IoReactivexInternalOperatorsObservableBlockingObservableNext *create_IoReactivexInternalOperatorsObservableBlockingObservableNext_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext, initWithIoReactivexObservableSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableBlockingObservableNext)

@implementation IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)items
withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver:(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *)observer {
  IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_(self, items, observer);
  return self;
}

- (jboolean)hasNext {
  if (error_ != nil) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(error_));
  }
  if (!hasNext_) {
    return false;
  }
  return !isNextConsumed_ || IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_moveToNext(self);
}

- (jboolean)moveToNext {
  return IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_moveToNext(self);
}

- (id)next {
  if (error_ != nil) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(error_));
  }
  if ([self hasNext]) {
    isNextConsumed_ = true;
    return next_;
  }
  else {
    @throw create_JavaUtilNoSuchElementException_initWithNSString_(@"No more elements");
  }
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Read only iterator");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(items_);
  RELEASE_(next_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(moveToNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "items_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "next_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "hasNext_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isNextConsumed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "started_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver<TT;>;)V", "()TT;", "Lio/reactivex/internal/operators/observable/BlockingObservableNext$NextObserver<TT;>;", "Lio/reactivex/ObservableSource<TT;>;", "TT;", "LIoReactivexInternalOperatorsObservableBlockingObservableNext;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator = { "NextIterator", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 7, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator;
}

@end

void IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator *self, id<IoReactivexObservableSource> items, IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *observer) {
  NSObject_init(self);
  self->hasNext_ = true;
  self->isNextConsumed_ = true;
  JreStrongAssign(&self->items_, items);
  JreStrongAssign(&self->observer_, observer);
}

IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator *new_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_(id<IoReactivexObservableSource> items, IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *observer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_, items, observer)
}

IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator *create_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_(id<IoReactivexObservableSource> items, IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *observer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator, initWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_, items, observer)
}

jboolean IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator_moveToNext(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator *self) {
  if (!self->started_) {
    self->started_ = true;
    [((IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *) nil_chk(self->observer_)) setWaiting];
    [create_IoReactivexInternalOperatorsObservableObservableMaterialize_initWithIoReactivexObservableSource_(self->items_) subscribeWithIoReactivexObserver:self->observer_];
  }
  IoReactivexNotification *nextNotification;
  @try {
    nextNotification = [((IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *) nil_chk(self->observer_)) takeNext];
  }
  @catch (JavaLangInterruptedException *e) {
    [self->observer_ dispose];
    JreStrongAssign(&self->error_, e);
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(e));
  }
  if ([((IoReactivexNotification *) nil_chk(nextNotification)) isOnNext]) {
    self->isNextConsumed_ = false;
    JreStrongAssign(&self->next_, [nextNotification getValue]);
    return true;
  }
  self->hasNext_ = false;
  if ([nextNotification isOnComplete]) {
    return false;
  }
  JreStrongAssign(&self->error_, [nextNotification getError]);
  @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(self->error_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextIterator)

@implementation IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onComplete {
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
}

- (void)onNextWithId:(IoReactivexNotification *)args {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(waiting_)) getAndSetWithInt:0] == 1 || ![((IoReactivexNotification *) nil_chk(args)) isOnNext]) {
    IoReactivexNotification *toOffer = args;
    while (![((id<JavaUtilConcurrentBlockingQueue>) nil_chk(buf_)) offerWithId:toOffer]) {
      IoReactivexNotification *concurrentItem = [buf_ poll];
      if (concurrentItem != nil && ![concurrentItem isOnNext]) {
        toOffer = concurrentItem;
      }
    }
  }
}

- (IoReactivexNotification *)takeNext {
  [self setWaiting];
  IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
  return [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(buf_)) take];
}

- (void)setWaiting {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(waiting_)) setWithInt:1];
}

- (void)dealloc {
  RELEASE_(buf_);
  RELEASE_(waiting_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexNotification;", 0x1, -1, -1, 5, 6, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(takeNext);
  methods[5].selector = @selector(setWaiting);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "waiting_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LJavaLangThrowable;", "onNext", "LIoReactivexNotification;", "(Lio/reactivex/Notification<TT;>;)V", "LJavaLangInterruptedException;", "()Lio/reactivex/Notification<TT;>;", "Ljava/util/concurrent/BlockingQueue<Lio/reactivex/Notification<TT;>;>;", "LIoReactivexInternalOperatorsObservableBlockingObservableNext;", "<T:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<Lio/reactivex/Notification<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver = { "NextObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver;
}

@end

void IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_init(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *self) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssignAndConsume(&self->buf_, new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_(1));
  JreStrongAssignAndConsume(&self->waiting_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *new_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver, init)
}

IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver *create_IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableBlockingObservableNext_NextObserver)
