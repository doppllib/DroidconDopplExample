//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalOperatorsSingleSingleFromPublisher.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/NoSuchElementException.h"

@implementation IoReactivexInternalOperatorsSingleSingleFromPublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)publisher {
  IoReactivexInternalOperatorsSingleSingleFromPublisher_initWithOrgReactivestreamsPublisher_(self, publisher);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(publisher_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver_initWithIoReactivexSingleObserver_(s)];
}

- (void)dealloc {
  RELEASE_(publisher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publisher_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Publisher<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TT;>;", "LIoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFromPublisher = { "SingleFromPublisher", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFromPublisher;
}

@end

void IoReactivexInternalOperatorsSingleSingleFromPublisher_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsSingleSingleFromPublisher *self, id<OrgReactivestreamsPublisher> publisher) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->publisher_, publisher);
}

IoReactivexInternalOperatorsSingleSingleFromPublisher *new_IoReactivexInternalOperatorsSingleSingleFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFromPublisher, initWithOrgReactivestreamsPublisher_, publisher)
}

IoReactivexInternalOperatorsSingleSingleFromPublisher *create_IoReactivexInternalOperatorsSingleSingleFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFromPublisher, initWithOrgReactivestreamsPublisher_, publisher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFromPublisher)

@implementation IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver_initWithIoReactivexSingleObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (value_ != nil) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    done_ = true;
    JreStrongAssign(&self->value_, nil);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaLangIndexOutOfBoundsException_initWithNSString_(@"Too many elements in the Publisher")];
  }
  else {
    JreStrongAssign(&value_, t);
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  JreStrongAssign(&self->value_, nil);
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  id v = self->value_;
  JreStrongAssign(&self->value_, nil);
  if (v == nil) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaUtilNoSuchElementException_initWithNSString_(@"The source Publisher is empty")];
  }
  else {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:v];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "TT;", "LIoReactivexInternalOperatorsSingleSingleFromPublisher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver = { "ToSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 7, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver *self, id<IoReactivexSingleObserver> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver *new_IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver, initWithIoReactivexSingleObserver_, actual)
}

IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver *create_IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver, initWithIoReactivexSingleObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFromPublisher_ToSingleObserver)
