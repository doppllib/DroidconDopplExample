//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFromArray
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFromArray
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromArray_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray))
#define IoReactivexInternalOperatorsFlowableFlowableFromArray_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@class IOSObjectArray;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFromArray : IoReactivexFlowable {
 @public
  IOSObjectArray *array_;
}

#pragma mark Public

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)array;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromArray)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromArray, array_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromArray_initWithNSObjectArray_(IoReactivexInternalOperatorsFlowableFlowableFromArray *self, IOSObjectArray *array);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray *new_IoReactivexInternalOperatorsFlowableFlowableFromArray_initWithNSObjectArray_(IOSObjectArray *array) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray *create_IoReactivexInternalOperatorsFlowableFlowableFromArray_initWithNSObjectArray_(IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromArray)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription_

#define RESTRICT_IoReactivexInternalSubscriptionsBasicQueueSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsBasicQueueSubscription 1
#include "IoReactivexInternalSubscriptionsBasicQueueSubscription.h"

@class IOSObjectArray;

@interface IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription : IoReactivexInternalSubscriptionsBasicQueueSubscription {
 @public
  IOSObjectArray *array_;
  jint index_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (void)cancel;

- (void)clear;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (jboolean)isEqual:(id)obj;

- (id __nullable)poll;

- (void)requestWithLong:(jlong)n;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)array;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription, array_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription_initWithNSObjectArray_(IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription *self, IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription_

@class IOSObjectArray;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription : IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                   withNSObjectArray:(IOSObjectArray *)array;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription, actual_, id<OrgReactivestreamsSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription_initWithOrgReactivestreamsSubscriber_withNSObjectArray_(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription *self, id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *array);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription_initWithOrgReactivestreamsSubscriber_withNSObjectArray_(id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *array) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription_initWithOrgReactivestreamsSubscriber_withNSObjectArray_(id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArraySubscription)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription))
#define IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription_

@class IOSObjectArray;
@protocol IoReactivexInternalFuseableConditionalSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription : IoReactivexInternalOperatorsFlowableFlowableFromArray_BaseArraySubscription {
 @public
  id<IoReactivexInternalFuseableConditionalSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                       withNSObjectArray:(IOSObjectArray *)array;

- (void)fastPath;

- (void)slowPathWithLong:(jlong)r;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription, actual_, id<IoReactivexInternalFuseableConditionalSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withNSObjectArray_(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, IOSObjectArray *array);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withNSObjectArray_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IOSObjectArray *array) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withNSObjectArray_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFromArray_ArrayConditionalSubscription)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFromArray")
