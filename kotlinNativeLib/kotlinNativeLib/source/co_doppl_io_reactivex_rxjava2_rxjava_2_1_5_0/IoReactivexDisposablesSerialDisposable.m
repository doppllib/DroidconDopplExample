//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexDisposablesSerialDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@implementation IoReactivexDisposablesSerialDisposable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexDisposablesSerialDisposable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nullable)initialDisposable {
  IoReactivexDisposablesSerialDisposable_initWithIoReactivexDisposablesDisposable_(self, initialDisposable);
  return self;
}

- (jboolean)setWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nullable)next {
  return IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(resource_, next);
}

- (jboolean)replaceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nullable)next {
  return IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(resource_, next);
}

- (id<IoReactivexDisposablesDisposable> __nullable)get {
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(resource_)) get];
  if (d == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    return IoReactivexDisposablesDisposables_disposed();
  }
  return d;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(resource_);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(resource_)) get]);
}

- (void)dealloc {
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(setWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(replaceWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resource_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesDisposable;", "set", "replace", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexDisposablesSerialDisposable = { "SerialDisposable", "io.reactivex.disposables", ptrTable, methods, fields, 7, 0x11, 7, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexDisposablesSerialDisposable;
}

@end

void IoReactivexDisposablesSerialDisposable_init(IoReactivexDisposablesSerialDisposable *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->resource_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexDisposablesSerialDisposable *new_IoReactivexDisposablesSerialDisposable_init() {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesSerialDisposable, init)
}

IoReactivexDisposablesSerialDisposable *create_IoReactivexDisposablesSerialDisposable_init() {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesSerialDisposable, init)
}

void IoReactivexDisposablesSerialDisposable_initWithIoReactivexDisposablesDisposable_(IoReactivexDisposablesSerialDisposable *self, id<IoReactivexDisposablesDisposable> initialDisposable) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->resource_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(initialDisposable));
}

IoReactivexDisposablesSerialDisposable *new_IoReactivexDisposablesSerialDisposable_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> initialDisposable) {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesSerialDisposable, initWithIoReactivexDisposablesDisposable_, initialDisposable)
}

IoReactivexDisposablesSerialDisposable *create_IoReactivexDisposablesSerialDisposable_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> initialDisposable) {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesSerialDisposable, initWithIoReactivexDisposablesDisposable_, initialDisposable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexDisposablesSerialDisposable)
