//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableFromObservable.h"
#include "IoReactivexObservableSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableFromObservable

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)observable {
  IoReactivexInternalOperatorsCompletableCompletableFromObservable_initWithIoReactivexObservableSource_(self, observable);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  [((id<IoReactivexObservableSource>) nil_chk(observable_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver_initWithIoReactivexCompletableObserver_(s)];
}

- (void)dealloc {
  RELEASE_(observable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observable_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<TT;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Lio/reactivex/ObservableSource<TT;>;", "LIoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Completable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableFromObservable = { "CompletableFromObservable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableFromObservable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableFromObservable_initWithIoReactivexObservableSource_(IoReactivexInternalOperatorsCompletableCompletableFromObservable *self, id<IoReactivexObservableSource> observable) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->observable_, observable);
}

IoReactivexInternalOperatorsCompletableCompletableFromObservable *new_IoReactivexInternalOperatorsCompletableCompletableFromObservable_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> observable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromObservable, initWithIoReactivexObservableSource_, observable)
}

IoReactivexInternalOperatorsCompletableCompletableFromObservable *create_IoReactivexInternalOperatorsCompletableCompletableFromObservable_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> observable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromObservable, initWithIoReactivexObservableSource_, observable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableFromObservable)

@implementation IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)co {
  IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver_initWithIoReactivexCompletableObserver_(self, co);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexCompletableObserver>) nil_chk(co_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)onNextWithId:(id)value {
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexCompletableObserver>) nil_chk(co_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexCompletableObserver>) nil_chk(co_)) onComplete];
}

- (void)dealloc {
  RELEASE_(co_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "co_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableFromObservable;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver = { "CompletableFromObservableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 5, 1, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver_initWithIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver *self, id<IoReactivexCompletableObserver> co) {
  NSObject_init(self);
  JreStrongAssign(&self->co_, co);
}

IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver *new_IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> co) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver, initWithIoReactivexCompletableObserver_, co)
}

IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver *create_IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> co) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver, initWithIoReactivexCompletableObserver_, co)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableFromObservable_CompletableFromObservableObserver)
