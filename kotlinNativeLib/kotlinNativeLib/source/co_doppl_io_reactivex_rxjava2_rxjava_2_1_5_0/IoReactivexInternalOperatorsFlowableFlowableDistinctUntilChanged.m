//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged.h"
#include "IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber.h"
#include "IoReactivexInternalSubscribersBasicFuseableSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
        withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(self, source, keySelector, comparer);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    id<IoReactivexInternalFuseableConditionalSubscriber> cs = (id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_());
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(cs, keySelector_, comparer_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(s, keySelector_, comparer_)];
  }
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(comparer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Lio/reactivex/functions/BiPredicate<-TK;-TK;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Function<-TT;TK;>;", "Lio/reactivex/functions/BiPredicate<-TK;-TK;>;", "LIoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged = { "FlowableDistinctUntilChanged", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged *new_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, source, keySelector, comparer)
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged *create_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, source, keySelector, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged)

@implementation IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                 withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(self, actual, keySelector, comparer);
  return self;
}

- (void)onNextWithId:(id)t {
  if (![self tryOnNextWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
  }
}

- (jboolean)tryOnNextWithId:(id)t {
  if (done_) {
    return false;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
    return true;
  }
  id key;
  @try {
    key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:t];
    if (hasValue_) {
      jboolean equal = [((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key];
      JreStrongAssign(&last_, key);
      if (equal) {
        return false;
      }
    }
    else {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
    }
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return true;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  return true;
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  for (; ; ) {
    id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
    if (v == nil) {
      return nil;
    }
    id key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:v];
    if (!hasValue_) {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
      return v;
    }
    if (![((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key]) {
      JreStrongAssign(&last_, key);
      return v;
    }
    JreStrongAssign(&last_, key);
    if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
  }
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(comparer_);
  RELEASE_(last_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(requestFusionWithInt:);
  methods[4].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "last_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "hasValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiPredicate;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Lio/reactivex/functions/BiPredicate<-TK;-TK;>;)V", "onNext", "LNSObject;", "(TT;)V", "tryOnNext", "(TT;)Z", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Function<-TT;TK;>;", "Lio/reactivex/functions/BiPredicate<-TK;-TK;>;", "TK;", "LIoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableSubscriber<TT;TT;>;Lio/reactivex/internal/fuseable/ConditionalSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber = { "DistinctUntilChangedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 4, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexInternalSubscribersBasicFuseableSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                     withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(self, actual, keySelector, comparer);
  return self;
}

- (void)onNextWithId:(id)t {
  if (![self tryOnNextWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
  }
}

- (jboolean)tryOnNextWithId:(id)t {
  if (done_) {
    return false;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    return [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) tryOnNextWithId:t];
  }
  id key;
  @try {
    key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:t];
    if (hasValue_) {
      jboolean equal = [((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key];
      JreStrongAssign(&last_, key);
      if (equal) {
        return false;
      }
    }
    else {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
    }
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return true;
  }
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:t];
  return true;
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  for (; ; ) {
    id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
    if (v == nil) {
      return nil;
    }
    id key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:v];
    if (!hasValue_) {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
      return v;
    }
    if (![((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key]) {
      JreStrongAssign(&last_, key);
      return v;
    }
    JreStrongAssign(&last_, key);
    if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
  }
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(comparer_);
  RELEASE_(last_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(requestFusionWithInt:);
  methods[4].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "last_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "hasValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Lio/reactivex/functions/BiPredicate<-TK;-TK;>;)V", "onNext", "LNSObject;", "(TT;)V", "tryOnNext", "(TT;)Z", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Function<-TT;TK;>;", "Lio/reactivex/functions/BiPredicate<-TK;-TK;>;", "TK;", "LIoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber = { "DistinctUntilChangedConditionalSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 4, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_(self, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDistinctUntilChanged_DistinctUntilChangedConditionalSubscriber)
