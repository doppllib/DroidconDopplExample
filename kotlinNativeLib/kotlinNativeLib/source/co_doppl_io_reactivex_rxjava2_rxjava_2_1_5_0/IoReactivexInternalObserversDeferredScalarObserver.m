//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalObserversDeferredScalarDisposable.h"
#include "IoReactivexInternalObserversDeferredScalarObserver.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong IoReactivexInternalObserversDeferredScalarObserver_get_serialVersionUID();
#define IoReactivexInternalObserversDeferredScalarObserver_serialVersionUID -266195175408988651LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalObserversDeferredScalarObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalObserversDeferredScalarObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexInternalObserversDeferredScalarObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&value_DeferredScalarDisposable_, nil);
  [self errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id v = value_DeferredScalarDisposable_;
  if (v != nil) {
    JreStrongAssign(&value_DeferredScalarDisposable_, nil);
    [self completeWithId:v];
  }
  else {
    [self complete];
  }
}

- (void)dispose {
  [super dispose];
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalObserversDeferredScalarObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/observers/DeferredScalarDisposable<TR;>;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversDeferredScalarObserver = { "DeferredScalarObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x401, 5, 2, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalObserversDeferredScalarObserver;
}

@end

void IoReactivexInternalObserversDeferredScalarObserver_initWithIoReactivexObserver_(IoReactivexInternalObserversDeferredScalarObserver *self, id<IoReactivexObserver> actual) {
  IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(self, actual);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversDeferredScalarObserver)
