//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableCache.h"
#include "IoReactivexInternalUtilLinkedArrayList.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalOperatorsObservableObservableCache ()

- (instancetype)initWithIoReactivexObservable:(IoReactivexObservable *)source
withIoReactivexInternalOperatorsObservableObservableCache_CacheState:(IoReactivexInternalOperatorsObservableObservableCache_CacheState *)state;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexInternalOperatorsObservableObservableCache *self, IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableCache *new_IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableCache *create_IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state);

inline jlong IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_serialVersionUID 7058506693698832024LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableCache

+ (IoReactivexObservable *)fromWithIoReactivexObservable:(IoReactivexObservable *)source {
  return IoReactivexInternalOperatorsObservableObservableCache_fromWithIoReactivexObservable_(source);
}

+ (IoReactivexObservable *)fromWithIoReactivexObservable:(IoReactivexObservable *)source
                                                 withInt:(jint)capacityHint {
  return IoReactivexInternalOperatorsObservableObservableCache_fromWithIoReactivexObservable_withInt_(source, capacityHint);
}

- (instancetype)initWithIoReactivexObservable:(IoReactivexObservable *)source
withIoReactivexInternalOperatorsObservableObservableCache_CacheState:(IoReactivexInternalOperatorsObservableObservableCache_CacheState *)state {
  IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(self, source, state);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *rp = create_IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(t, state_);
  [((id<IoReactivexObserver>) nil_chk(t)) onSubscribeWithIoReactivexDisposablesDisposable:rp];
  [((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_)) addChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:rp];
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) get] && [once_ compareAndSetWithBoolean:false withBoolean:true]) {
    [state_ connect];
  }
  [rp replay];
}

- (jboolean)isConnected {
  return JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_))->isConnected_);
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_))->observers_)) get]))->size_ != 0;
}

- (jint)cachedEventCount {
  return [((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_)) size];
}

- (void)dealloc {
  RELEASE_(state_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexObservable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromWithIoReactivexObservable:);
  methods[1].selector = @selector(fromWithIoReactivexObservable:withInt:);
  methods[2].selector = @selector(initWithIoReactivexObservable:withIoReactivexInternalOperatorsObservableObservableCache_CacheState:);
  methods[3].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[4].selector = @selector(isConnected);
  methods[5].selector = @selector(hasObservers);
  methods[6].selector = @selector(cachedEventCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LIoReactivexInternalOperatorsObservableObservableCache_CacheState;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "from", "LIoReactivexObservable;", "<T:Ljava/lang/Object;>(Lio/reactivex/Observable<TT;>;)Lio/reactivex/Observable<TT;>;", "LIoReactivexObservable;I", "<T:Ljava/lang/Object;>(Lio/reactivex/Observable<TT;>;I)Lio/reactivex/Observable<TT;>;", "LIoReactivexObservable;LIoReactivexInternalOperatorsObservableObservableCache_CacheState;", "(Lio/reactivex/Observable<TT;>;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState<TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/internal/operators/observable/ObservableCache$CacheState<TT;>;", "LIoReactivexInternalOperatorsObservableObservableCache_CacheState;LIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCache = { "ObservableCache", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 7, 2, -1, 11, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCache;
}

@end

IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableCache_fromWithIoReactivexObservable_(IoReactivexObservable *source) {
  IoReactivexInternalOperatorsObservableObservableCache_initialize();
  return IoReactivexInternalOperatorsObservableObservableCache_fromWithIoReactivexObservable_withInt_(source, 16);
}

IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableCache_fromWithIoReactivexObservable_withInt_(IoReactivexObservable *source, jint capacityHint) {
  IoReactivexInternalOperatorsObservableObservableCache_initialize();
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint");
  IoReactivexInternalOperatorsObservableObservableCache_CacheState *state = create_IoReactivexInternalOperatorsObservableObservableCache_CacheState_initWithIoReactivexObservable_withInt_(source, capacityHint);
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(source, state));
}

void IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexInternalOperatorsObservableObservableCache *self, IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->state_, state);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsObservableObservableCache *new_IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCache, initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_, source, state)
}

IoReactivexInternalOperatorsObservableObservableCache *create_IoReactivexInternalOperatorsObservableObservableCache_initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexObservable *source, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCache, initWithIoReactivexObservable_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_, source, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCache)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableCache_CacheState)

IOSObjectArray *IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED;

@implementation IoReactivexInternalOperatorsObservableObservableCache_CacheState

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED;
}

- (instancetype)initWithIoReactivexObservable:(IoReactivexObservable *)source
                                      withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsObservableObservableCache_CacheState_initWithIoReactivexObservable_withInt_(self, source, capacityHint);
  return self;
}

- (jboolean)addChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *)p {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, p);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *)p {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if ([((IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *) nil_chk(IOSObjectArray_Get(a, i))) isEqual:p]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(connection_)) updateWithIoReactivexDisposablesDisposable:s];
}

- (void)connect {
  [((IoReactivexObservable *) nil_chk(source_)) subscribeWithIoReactivexObserver:self];
  JreAssignVolatileBoolean(&isConnected_, true);
}

- (void)onNextWithId:(id)t {
  if (!sourceDone_) {
    id o = IoReactivexInternalUtilNotificationLite_nextWithId_(t);
    [self addWithId:o];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *rp = *b__++;
        [((IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *) nil_chk(rp)) replay];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (!sourceDone_) {
    sourceDone_ = true;
    id o = IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e);
    [self addWithId:o];
    [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(connection_)) dispose];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED];
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *rp = *b__++;
        [((IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *) nil_chk(rp)) replay];
      }
    }
  }
}

- (void)onComplete {
  if (!sourceDone_) {
    sourceDone_ = true;
    id o = IoReactivexInternalUtilNotificationLite_complete();
    [self addWithId:o];
    [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(connection_)) dispose];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED];
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *rp = *b__++;
        [((IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *) nil_chk(rp)) replay];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(connection_);
  RELEASE_(observers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservable:withInt:);
  methods[1].selector = @selector(addChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:);
  methods[2].selector = @selector(removeChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(connect);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "connection_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "isConnected_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceDone_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservable;I", "(Lio/reactivex/Observable<+TT;>;I)V", "addChild", "LIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable;", "(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable<TT;>;)Z", "removeChild", "(Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observable<+TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/observable/ObservableCache$ReplayDisposable<TT;>;>;", &IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY, &IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED, "LIoReactivexInternalOperatorsObservableObservableCache;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/util/LinkedArrayList;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCache_CacheState = { "CacheState", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 7, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCache_CacheState;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableCache_CacheState class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableCache_CacheState_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableCache_CacheState)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableCache_CacheState_initWithIoReactivexObservable_withInt_(IoReactivexInternalOperatorsObservableObservableCache_CacheState *self, IoReactivexObservable *source, jint capacityHint) {
  IoReactivexInternalUtilLinkedArrayList_initWithInt_(self, capacityHint);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsObservableObservableCache_CacheState_EMPTY));
  JreStrongAssignAndConsume(&self->connection_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsObservableObservableCache_CacheState *new_IoReactivexInternalOperatorsObservableObservableCache_CacheState_initWithIoReactivexObservable_withInt_(IoReactivexObservable *source, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCache_CacheState, initWithIoReactivexObservable_withInt_, source, capacityHint)
}

IoReactivexInternalOperatorsObservableObservableCache_CacheState *create_IoReactivexInternalOperatorsObservableObservableCache_CacheState_initWithIoReactivexObservable_withInt_(IoReactivexObservable *source, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCache_CacheState, initWithIoReactivexObservable_withInt_, source, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCache_CacheState)

@implementation IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)child
withIoReactivexInternalOperatorsObservableObservableCache_CacheState:(IoReactivexInternalOperatorsObservableObservableCache_CacheState *)state {
  IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(self, child, state);
  return self;
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_)) removeChildWithIoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable:self];
  }
}

- (void)replay {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<IoReactivexObserver> child = self->child_;
  jint missed = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jint s = [((IoReactivexInternalOperatorsObservableObservableCache_CacheState *) nil_chk(state_)) size];
    if (s != 0) {
      IOSObjectArray *b = currentBuffer_;
      if (b == nil) {
        b = [state_ head];
        JreStrongAssign(&currentBuffer_, b);
      }
      jint n = ((IOSObjectArray *) nil_chk(b))->size_ - 1;
      jint j = index_;
      jint k = currentIndexInBuffer_;
      while (j < s) {
        if (JreLoadVolatileBoolean(&cancelled_)) {
          return;
        }
        if (k == n) {
          b = (IOSObjectArray *) cast_check(IOSObjectArray_Get(b, n), IOSClass_arrayType(NSObject_class_(), 1));
          k = 0;
        }
        id o = IOSObjectArray_Get(nil_chk(b), k);
        if (IoReactivexInternalUtilNotificationLite_acceptWithId_withIoReactivexObserver_(o, child)) {
          return;
        }
        k++;
        j++;
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      index_ = j;
      currentIndexInBuffer_ = k;
      JreStrongAssign(&currentBuffer_, b);
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(child_);
  RELEASE_(state_);
  RELEASE_(currentBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexInternalOperatorsObservableObservableCache_CacheState:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(replay);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "child_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "state_", "LIoReactivexInternalOperatorsObservableObservableCache_CacheState;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "currentBuffer_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentIndexInBuffer_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexInternalOperatorsObservableObservableCache_CacheState;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/internal/operators/observable/ObservableCache$CacheState<TT;>;)V", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/internal/operators/observable/ObservableCache$CacheState<TT;>;", "LIoReactivexInternalOperatorsObservableObservableCache;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable = { "ReplayDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 7, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *self, id<IoReactivexObserver> child, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->child_, child);
  JreStrongAssign(&self->state_, state);
}

IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *new_IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(id<IoReactivexObserver> child, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_, child, state)
}

IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable *create_IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_(id<IoReactivexObserver> child, IoReactivexInternalOperatorsObservableObservableCache_CacheState *state) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableCache_CacheState_, child, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCache_ReplayDisposable)
