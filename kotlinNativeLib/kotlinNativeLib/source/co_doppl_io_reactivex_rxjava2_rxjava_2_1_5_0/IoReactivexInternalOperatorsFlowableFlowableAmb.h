//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableAmb
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableAmb

#if !defined (IoReactivexInternalOperatorsFlowableFlowableAmb_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableAmb))
#define IoReactivexInternalOperatorsFlowableFlowableAmb_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableAmb : IoReactivexFlowable {
 @public
  IOSObjectArray *sources_;
  id<JavaLangIterable> sourcesIterable_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                    withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableAmb)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb, sourcesIterable_, id<JavaLangIterable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableAmb_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_(IoReactivexInternalOperatorsFlowableFlowableAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb *new_IoReactivexInternalOperatorsFlowableFlowableAmb_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb *create_IoReactivexInternalOperatorsFlowableFlowableAmb_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableAmb)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator))
#define IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IOSObjectArray;
@class JavaUtilConcurrentAtomicAtomicInteger;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator : NSObject < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IOSObjectArray *subscribers_;
  JavaUtilConcurrentAtomicAtomicInteger *winner_;
}

#pragma mark Public

- (void)cancel;

- (void)requestWithLong:(jlong)n;

- (void)subscribeWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

- (jboolean)winWithInt:(jint)index;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)count;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator, subscribers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator, winner_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_initWithOrgReactivestreamsSubscriber_withInt_(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *self, id<OrgReactivestreamsSubscriber> actual, jint count);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *new_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *create_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *parent_;
  jint index_;
  id<OrgReactivestreamsSubscriber> actual_;
  jboolean won_;
  JavaUtilConcurrentAtomicAtomicLong *missedRequested_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator:(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *)parent
                                                                               withInt:(jint)index
                                                      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber, missedRequested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_withInt_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *parent, jint index, id<OrgReactivestreamsSubscriber> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_withInt_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *parent, jint index, id<OrgReactivestreamsSubscriber> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator_withInt_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbCoordinator *parent, jint index, id<OrgReactivestreamsSubscriber> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableAmb_AmbInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableAmb")
