//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersAbstractDirectTask")
#ifdef RESTRICT_IoReactivexInternalSchedulersAbstractDirectTask
#define INCLUDE_ALL_IoReactivexInternalSchedulersAbstractDirectTask 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersAbstractDirectTask 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersAbstractDirectTask

#if !defined (IoReactivexInternalSchedulersAbstractDirectTask_) && (INCLUDE_ALL_IoReactivexInternalSchedulersAbstractDirectTask || defined(INCLUDE_IoReactivexInternalSchedulersAbstractDirectTask))
#define IoReactivexInternalSchedulersAbstractDirectTask_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThread;
@class JavaUtilConcurrentFutureTask;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalSchedulersAbstractDirectTask : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable > {
 @public
  id<JavaLangRunnable> runnable_;
  JavaLangThread *runner_;
}

+ (JavaUtilConcurrentFutureTask *)FINISHED;

+ (JavaUtilConcurrentFutureTask *)DISPOSED;

#pragma mark Public

- (id<JavaUtilConcurrentFuture>)accumulateAndGetWithId:(id<JavaUtilConcurrentFuture>)arg0
                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<JavaUtilConcurrentFuture>)get;

- (id<JavaUtilConcurrentFuture>)getAndAccumulateWithId:(id<JavaUtilConcurrentFuture>)arg0
                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<JavaUtilConcurrentFuture>)getAndSetWithId:(id<JavaUtilConcurrentFuture>)arg0;

- (id<JavaUtilConcurrentFuture>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)setFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

- (id<JavaUtilConcurrentFuture>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersAbstractDirectTask)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersAbstractDirectTask, runnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersAbstractDirectTask, runner_, JavaLangThread *)

inline JavaUtilConcurrentFutureTask *IoReactivexInternalSchedulersAbstractDirectTask_get_FINISHED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentFutureTask *IoReactivexInternalSchedulersAbstractDirectTask_FINISHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersAbstractDirectTask, FINISHED, JavaUtilConcurrentFutureTask *)

inline JavaUtilConcurrentFutureTask *IoReactivexInternalSchedulersAbstractDirectTask_get_DISPOSED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentFutureTask *IoReactivexInternalSchedulersAbstractDirectTask_DISPOSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersAbstractDirectTask, DISPOSED, JavaUtilConcurrentFutureTask *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersAbstractDirectTask_initWithJavaLangRunnable_(IoReactivexInternalSchedulersAbstractDirectTask *self, id<JavaLangRunnable> runnable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersAbstractDirectTask)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersAbstractDirectTask")
