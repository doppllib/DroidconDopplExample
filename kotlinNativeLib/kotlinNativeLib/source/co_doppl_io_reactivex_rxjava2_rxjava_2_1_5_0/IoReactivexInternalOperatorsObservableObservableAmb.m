//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableAmb.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_serialVersionUID -1185974347409665484LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableAmb

- (instancetype)initWithIoReactivexObservableSourceArray:(IOSObjectArray *)sources
                                    withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable {
  IoReactivexInternalOperatorsObservableObservableAmb_initWithIoReactivexObservableSourceArray_withJavaLangIterable_(self, sources, sourcesIterable);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  IOSObjectArray *sources = self->sources_;
  jint count = 0;
  if (sources == nil) {
    sources = [IOSObjectArray arrayWithLength:8 type:IoReactivexObservable_class_()];
    @try {
      for (id<IoReactivexObservableSource> __strong p in nil_chk(sourcesIterable_)) {
        if (p == nil) {
          IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null"), s);
          return;
        }
        if (count == sources->size_) {
          IOSObjectArray *b = [IOSObjectArray arrayWithLength:count + (JreRShift32(count, 2)) type:IoReactivexObservableSource_class_()];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sources, 0, b, 0, count);
          sources = b;
        }
        IOSObjectArray_Set(sources, count++, p);
      }
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, s);
      return;
    }
  }
  else {
    count = sources->size_;
  }
  if (count == 0) {
    IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(s);
    return;
  }
  else if (count == 1) {
    [((id<IoReactivexObservableSource>) nil_chk(IOSObjectArray_Get(sources, 0))) subscribeWithIoReactivexObserver:s];
    return;
  }
  IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *ac = create_IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_initWithIoReactivexObserver_withInt_(s, count);
  [ac subscribeWithIoReactivexObservableSourceArray:sources];
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(sourcesIterable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSourceArray:withJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "sourcesIterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexObservableSource;LJavaLangIterable;", "([Lio/reactivex/ObservableSource<+TT;>;Ljava/lang/Iterable<+Lio/reactivex/ObservableSource<+TT;>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "[Lio/reactivex/ObservableSource<+TT;>;", "Ljava/lang/Iterable<+Lio/reactivex/ObservableSource<+TT;>;>;", "LIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator;LIoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableAmb = { "ObservableAmb", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableAmb;
}

@end

void IoReactivexInternalOperatorsObservableObservableAmb_initWithIoReactivexObservableSourceArray_withJavaLangIterable_(IoReactivexInternalOperatorsObservableObservableAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->sourcesIterable_, sourcesIterable);
}

IoReactivexInternalOperatorsObservableObservableAmb *new_IoReactivexInternalOperatorsObservableObservableAmb_initWithIoReactivexObservableSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableAmb, initWithIoReactivexObservableSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

IoReactivexInternalOperatorsObservableObservableAmb *create_IoReactivexInternalOperatorsObservableObservableAmb_initWithIoReactivexObservableSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableAmb, initWithIoReactivexObservableSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableAmb)

@implementation IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count {
  IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_initWithIoReactivexObserver_withInt_(self, actual, count);
  return self;
}

- (void)subscribeWithIoReactivexObservableSourceArray:(IOSObjectArray *)sources {
  IOSObjectArray *as = observers_;
  jint len = ((IOSObjectArray *) nil_chk(as))->size_;
  for (jint i = 0; i < len; i++) {
    IOSObjectArray_SetAndConsume(as, i, new_IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_(self, i + 1, actual_));
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(winner_)) lazySetWithInt:0];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  for (jint i = 0; i < len; i++) {
    if ([winner_ get] != 0) {
      return;
    }
    [((id<IoReactivexObservableSource>) nil_chk(IOSObjectArray_Get(nil_chk(sources), i))) subscribeWithIoReactivexObserver:IOSObjectArray_Get(as, i)];
  }
}

- (jboolean)winWithInt:(jint)index {
  jint w = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(winner_)) get];
  if (w == 0) {
    if ([winner_ compareAndSetWithInt:0 withInt:index]) {
      IOSObjectArray *a = observers_;
      jint n = ((IOSObjectArray *) nil_chk(a))->size_;
      for (jint i = 0; i < n; i++) {
        if (i + 1 != index) {
          [((IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *) nil_chk(IOSObjectArray_Get(a, i))) dispose];
        }
      }
      return true;
    }
    return false;
  }
  return w == index;
}

- (void)dispose {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(winner_)) get] != -1) {
    [winner_ lazySetWithInt:-1];
    {
      IOSObjectArray *a__ = observers_;
      IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *a = *b__++;
        [((IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *) nil_chk(a)) dispose];
      }
    }
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(winner_)) get] == -1;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(observers_);
  RELEASE_(winner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withInt:);
  methods[1].selector = @selector(subscribeWithIoReactivexObservableSourceArray:);
  methods[2].selector = @selector(winWithInt:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "observers_", "[LIoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "winner_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;I", "(Lio/reactivex/Observer<-TT;>;I)V", "subscribe", "[LIoReactivexObservableSource;", "([Lio/reactivex/ObservableSource<+TT;>;)V", "win", "I", "Lio/reactivex/Observer<-TT;>;", "[Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableAmb;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator = { "AmbCoordinator", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator;
}

@end

void IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_initWithIoReactivexObserver_withInt_(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *self, id<IoReactivexObserver> actual, jint count) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->winner_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->observers_, [IOSObjectArray newArrayWithLength:count type:IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_class_()]);
}

IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *new_IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint count) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator, initWithIoReactivexObserver_withInt_, actual, count)
}

IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *create_IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint count) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator, initWithIoReactivexObserver_withInt_, actual, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator)

@implementation IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator:(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *)parent
                                                                                   withInt:(jint)index
                                                                   withIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_(self, parent, index, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, s);
}

- (void)onNextWithId:(id)t {
  if (won_) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  }
  else {
    if ([((IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *) nil_chk(parent_)) winWithInt:index_]) {
      won_ = true;
      [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
    }
    else {
      [((id<IoReactivexDisposablesDisposable>) nil_chk([self get])) dispose];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (won_) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  else {
    if ([((IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *) nil_chk(parent_)) winWithInt:index_]) {
      won_ = true;
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
    }
    else {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    }
  }
}

- (void)onComplete {
  if (won_) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
  else {
    if ([((IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *) nil_chk(parent_)) winWithInt:index_]) {
      won_ = true;
      [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
    }
  }
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator:withInt:withIoReactivexObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "won_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator;ILIoReactivexObserver;", "(Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator<TT;>;ILio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableAmb$AmbCoordinator<TT;>;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableAmb;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver = { "AmbInnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *self, IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *parent, jint index, id<IoReactivexObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *new_IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *parent, jint index, id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_, parent, index, actual)
}

IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver *create_IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator *parent, jint index, id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableAmb_AmbCoordinator_withInt_withIoReactivexObserver_, parent, index, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableAmb_AmbInnerObserver)
