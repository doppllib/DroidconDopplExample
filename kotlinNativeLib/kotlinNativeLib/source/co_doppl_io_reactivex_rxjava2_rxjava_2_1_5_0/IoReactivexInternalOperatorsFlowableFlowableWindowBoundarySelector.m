//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "IoReactivexSubscribersDisposableSubscriber.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)open
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(self, source, open, close, bufferSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), open_, close_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(open_);
  RELEASE_(close_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "open_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "close_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;I", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<TB;>;Lio/reactivex/functions/Function<-TB;+Lorg/reactivestreams/Publisher<TV;>;>;I)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;)V", "Lorg/reactivestreams/Publisher<TB;>;", "Lio/reactivex/functions/Function<-TB;+Lorg/reactivestreams/Publisher<TV;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation;LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Flowable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector = { "FlowableWindowBoundarySelector", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->open_, open);
  JreStrongAssign(&self->close_, close);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_, source, open, close, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_, source, open, close, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)open
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(self, actual, open, close, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber *os = create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_(self);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:nil withId:os]) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      [((id<OrgReactivestreamsPublisher>) nil_chk(open_)) subscribeWithOrgReactivestreamsSubscriber:os];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if ([self fastEnter]) {
    for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws_)) {
      [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:t];
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)dispose {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
}

- (void)drainLoop {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<JavaUtilList> ws = self->ws_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) poll];
      jboolean empty = o == nil;
      if (d && empty) {
        [self dispose];
        JavaLangThrowable *e = error_;
        if (e != nil) {
          for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
            [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
          }
        }
        else {
          for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
            [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
          }
        }
        [ws clear];
        return;
      }
      if (empty) {
        break;
      }
      if ([o isKindOfClass:[IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation class]]) {
        IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *wo = (IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *) cast_chk(o, [IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation class]);
        IoReactivexProcessorsUnicastProcessor *w = ((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *) nil_chk(wo))->w_;
        if (w != nil) {
          if ([((id<JavaUtilList>) nil_chk(ws)) removeWithId:wo->w_]) {
            [((IoReactivexProcessorsUnicastProcessor *) nil_chk(wo->w_)) onComplete];
            if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
              [self dispose];
              return;
            }
          }
          continue;
        }
        if (JreLoadVolatileBoolean(&cancelled_)) {
          continue;
        }
        w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
        jlong r = [self requested];
        if (r != 0LL) {
          [((id<JavaUtilList>) nil_chk(ws)) addWithId:w];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
          if (r != JavaLangLong_MAX_VALUE) {
            [self producedWithLong:1];
          }
        }
        else {
          JreAssignVolatileBoolean(&cancelled_, true);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver new window due to lack of requests")];
          continue;
        }
        id<OrgReactivestreamsPublisher> p;
        @try {
          p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(close_)) applyWithId:wo->open_], @"The publisher supplied is null");
        }
        @catch (JavaLangThrowable *e) {
          JreAssignVolatileBoolean(&cancelled_, true);
          [a onErrorWithJavaLangThrowable:e];
          continue;
        }
        IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *cl = create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_(self, w);
        if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:cl]) {
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
          [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:cl];
        }
        continue;
      }
      for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
        [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id)v {
  return false;
}

- (void)openWithId:(id)b {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(nil, b)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)closeWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *)w {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) delete__WithIoReactivexDisposablesDisposable:w];
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *) nil_chk(w))->w_, nil)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(open_);
  RELEASE_(close_);
  RELEASE_(resources_);
  RELEASE_(s_);
  RELEASE_(boundary_);
  RELEASE_(ws_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 5, -1, 16, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, 19, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(errorWithJavaLangThrowable:);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(dispose);
  methods[9].selector = @selector(drainLoop);
  methods[10].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  methods[11].selector = @selector(openWithId:);
  methods[12].selector = @selector(closeWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "open_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "close_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resources_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "boundary_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "ws_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;I", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;Lorg/reactivestreams/Publisher<TB;>;Lio/reactivex/functions/Function<-TB;+Lorg/reactivestreams/Publisher<TV;>;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "error", "request", "J", "accept", "LOrgReactivestreamsSubscriber;LNSObject;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;Ljava/lang/Object;)Z", "open", "(TB;)V", "close", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$OperatorWindowBoundaryCloseSubscriber<TT;TV;>;)V", "Lorg/reactivestreams/Publisher<TB;>;", "Lio/reactivex/functions/Function<-TB;+Lorg/reactivestreams/Publisher<TV;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Ljava/util/List<Lio/reactivex/processors/UnicastProcessor<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;Ljava/lang/Object;Lio/reactivex/Flowable<TT;>;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber = { "WindowBoundaryMainSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 8, 24, -1, -1, 25, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->boundary_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->open_, open);
  JreStrongAssign(&self->close_, close);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->ws_, new_JavaUtilArrayList_init());
  [self->windows_ lazySetWithLong:1];
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_, actual, open, close, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_, actual, open, close, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation

- (instancetype)initWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w
                                                       withId:(id)open {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(self, w, open);
  return self;
}

- (void)dealloc {
  RELEASE_(w_);
  RELEASE_(open_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexProcessorsUnicastProcessor:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "open_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexProcessorsUnicastProcessor;LNSObject;", "(Lio/reactivex/processors/UnicastProcessor<TT;>;TB;)V", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "TB;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation = { "WindowOperation", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 1, 2, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *self, IoReactivexProcessorsUnicastProcessor *w, id open) {
  NSObject_init(self);
  JreStrongAssign(&self->w_, w);
  JreStrongAssign(&self->open_, open);
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(IoReactivexProcessorsUnicastProcessor *w, id open) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation, initWithIoReactivexProcessorsUnicastProcessor_withId_, w, open)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation_initWithIoReactivexProcessorsUnicastProcessor_withId_(IoReactivexProcessorsUnicastProcessor *w, id open) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation, initWithIoReactivexProcessorsUnicastProcessor_withId_, w, open)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowOperation)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) openWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) onComplete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber<TT;TB;*>;)V", "onNext", "LNSObject;", "(TB;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber<TT;TB;*>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TB;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber = { "OperatorWindowBoundaryOpenSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryOpenSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *)parent
                                                                              withIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_(self, parent, w);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self cancel];
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) closeWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *) nil_chk(parent_)) closeWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber:withIoReactivexProcessorsUnicastProcessor:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "w_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber;LIoReactivexProcessorsUnicastProcessor;", "(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber<TT;*TV;>;Lio/reactivex/processors/UnicastProcessor<TT;>;)V", "onNext", "LNSObject;", "(TV;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber<TT;*TV;>;", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TV;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber = { "OperatorWindowBoundaryCloseSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent, IoReactivexProcessorsUnicastProcessor *w) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->w_, w);
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent, IoReactivexProcessorsUnicastProcessor *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_, parent, w)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber *parent, IoReactivexProcessorsUnicastProcessor *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_WindowBoundaryMainSubscriber_withIoReactivexProcessorsUnicastProcessor_, parent, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySelector_OperatorWindowBoundaryCloseSubscriber)
