//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsMaybeMaybeMergeArray.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

inline jlong IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_serialVersionUID -660395290758764731LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex : NSObject

@end

inline jlong IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_serialVersionUID -7969063454040569579LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_serialVersionUID -4025173261791142821LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeMergeArray

- (instancetype)initWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsMaybeMaybeMergeArray_initWithIoReactivexMaybeSourceArray_(self, sources);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IOSObjectArray *maybes = sources_;
  jint n = ((IOSObjectArray *) nil_chk(maybes))->size_;
  id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> queue;
  if (n <= IoReactivexFlowable_bufferSize()) {
    queue = create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_initWithInt_(n);
  }
  else {
    queue = create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_init();
  }
  IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver *parent = create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_(s, n, queue);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent];
  IoReactivexInternalUtilAtomicThrowable *e = parent->error_;
  {
    IOSObjectArray *a__ = maybes;
    id<IoReactivexMaybeSource> const *b__ = a__->buffer_;
    id<IoReactivexMaybeSource> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<IoReactivexMaybeSource> source = *b__++;
      if ([parent isCancelled] || [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(e)) get] != nil) {
        return;
      }
      [((id<IoReactivexMaybeSource>) nil_chk(source)) subscribeWithIoReactivexMaybeObserver:parent];
    }
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSourceArray:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexMaybeSource;", "([Lio/reactivex/MaybeSource<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "[Lio/reactivex/MaybeSource<+TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver;LIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex;LIoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue;LIoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeMergeArray = { "MaybeMergeArray", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeMergeArray;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeMergeArray_initWithIoReactivexMaybeSourceArray_(IoReactivexInternalOperatorsMaybeMaybeMergeArray *self, IOSObjectArray *sources) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray *new_IoReactivexInternalOperatorsMaybeMaybeMergeArray_initWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray, initWithIoReactivexMaybeSourceArray_, sources)
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray *create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_initWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray, initWithIoReactivexMaybeSourceArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeMergeArray)

@implementation IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)sourceCount
withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex:(id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>)queue {
  IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_(self, actual, sourceCount, queue);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id __nullable)poll {
  for (; ; ) {
    id o = [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) poll];
    if (o != JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)) {
      return o;
    }
  }
}

- (jboolean)isEmpty {
  return [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) isEmpty];
}

- (void)clear {
  [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) clear];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    if ([self getAndIncrement] == 0) {
      [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) clear];
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) offerWithId:value];
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:e]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) offerWithId:JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)];
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(queue_)) offerWithId:JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)];
  [self drain];
}

- (jboolean)isCancelled {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)drainNormal {
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> q = queue_;
  jlong e = consumed_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) clear];
        return;
      }
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
      if (ex != nil) {
        [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
        return;
      }
      if ([((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) consumerIndex] == sourceCount_) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
      id v = [q poll];
      if (v == nil) {
        break;
      }
      if (v != JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
        e++;
      }
    }
    if (e == r) {
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
      if (ex != nil) {
        [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
        return;
      }
      while ([((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) peek] == JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)) {
        [q drop];
      }
      if ([q consumerIndex] == sourceCount_) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
    }
    consumed_ = e;
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drainFused {
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> q = queue_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) clear];
      return;
    }
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
    if (ex != nil) {
      [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) clear];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    jboolean d = [((id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex>) nil_chk(q)) producerIndex] == sourceCount_;
    if (![q isEmpty]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:nil];
    }
    if (d) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      return;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  if (outputFused_) {
    [self drainFused];
  }
  else {
    [self drainNormal];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(set_);
  RELEASE_(requested_);
  RELEASE_(queue_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, 5, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[8].selector = @selector(onSuccessWithId:);
  methods[9].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[10].selector = @selector(onComplete);
  methods[11].selector = @selector(isCancelled);
  methods[12].selector = @selector(drainNormal);
  methods[13].selector = @selector(drainFused);
  methods[14].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sourceCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumed_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;ILIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex;", "(Lorg/reactivestreams/Subscriber<-TT;>;ILio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex<Ljava/lang/Object;>;)V", "requestFusion", "I", "LJavaLangException;", "()TT;", "request", "J", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex<Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/MaybeObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver = { "MergeMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 15, 10, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver *self, id<OrgReactivestreamsSubscriber> actual, jint sourceCount, id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> queue) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->sourceCount_ = sourceCount;
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssign(&self->queue_, queue);
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_(id<OrgReactivestreamsSubscriber> actual, jint sourceCount, id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> queue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver, initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_, actual, sourceCount, queue)
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_(id<OrgReactivestreamsSubscriber> actual, jint sourceCount, id<IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex> queue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver, initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex_, actual, sourceCount, queue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MergeMaybeObserver)

@implementation IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(poll);
  methods[1].selector = @selector(peek);
  methods[2].selector = @selector(drop);
  methods[3].selector = @selector(consumerIndex);
  methods[4].selector = @selector(producerIndex);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex = { "SimpleQueueWithConsumerIndex", "io.reactivex.internal.operators.maybe", ptrTable, methods, NULL, 7, 0x608, 5, 0, 1, -1, -1, 2, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeMergeArray_SimpleQueueWithConsumerIndex)

@implementation IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue

- (instancetype)initWithInt:(jint)length {
  IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_initWithInt_(self, length);
  return self;
}

- (jboolean)offerWithId:(id)value {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(value, @"value is null");
  jint idx = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(producerIndex_)) getAndIncrement];
  if (idx < [self length]) {
    [self lazySetWithInt:idx withId:value];
    return true;
  }
  return false;
}

- (jboolean)offerWithId:(id)v1
                 withId:(id)v2 {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id __nullable)poll {
  jint ci = consumerIndex_;
  if (ci == [self length]) {
    return nil;
  }
  JavaUtilConcurrentAtomicAtomicInteger *pi = producerIndex_;
  for (; ; ) {
    id v = [self getWithInt:ci];
    if (v != nil) {
      consumerIndex_ = ci + 1;
      [self lazySetWithInt:ci withId:nil];
      return v;
    }
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(pi)) get] == ci) {
      return nil;
    }
  }
}

- (id)peek {
  jint ci = consumerIndex_;
  if (ci == [self length]) {
    return nil;
  }
  return [self getWithInt:ci];
}

- (void)drop {
  jint ci = consumerIndex_;
  [self lazySetWithInt:ci withId:nil];
  consumerIndex_ = ci + 1;
}

- (jboolean)isEmpty {
  return consumerIndex_ == [self producerIndex];
}

- (void)clear {
  while ([self poll] != nil && ![self isEmpty]) {
  }
}

- (jint)consumerIndex {
  return consumerIndex_;
}

- (jint)producerIndex {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(producerIndex_)) get];
}

- (void)dealloc {
  RELEASE_(producerIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(offerWithId:withId:);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(peek);
  methods[5].selector = @selector(drop);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(consumerIndex);
  methods[9].selector = @selector(producerIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "producerIndex_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "consumerIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "offer", "LNSObject;", "(TT;)Z", "LNSObject;LNSObject;", "(TT;TT;)Z", "()TT;", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReferenceArray<TT;>;Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue = { "MpscFillOnceSimpleQueue", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 10, 3, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_initWithInt_(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue *self, jint length) {
  JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(self, length);
  JreStrongAssignAndConsume(&self->producerIndex_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue *new_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue, initWithInt_, length)
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue *create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue, initWithInt_, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeMergeArray_MpscFillOnceSimpleQueue)

@implementation IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)offerWithId:(id)v1
                 withId:(id)v2 {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)offerWithId:(id)e {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(producerIndex_)) getAndIncrement];
  return [super offerWithId:e];
}

- (id __nullable)poll {
  id v = [super poll];
  if (v != nil) {
    consumerIndex_++;
  }
  return v;
}

- (jint)consumerIndex {
  return consumerIndex_;
}

- (jint)producerIndex {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(producerIndex_)) get];
}

- (void)drop {
  [self poll];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(producerIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(offerWithId:withId:);
  methods[2].selector = @selector(offerWithId:);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(consumerIndex);
  methods[5].selector = @selector(producerIndex);
  methods[6].selector = @selector(drop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "consumerIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerIndex_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "offer", "LNSObject;LNSObject;", "(TT;TT;)Z", "LNSObject;", "(TT;)Z", "()TT;", "LIoReactivexInternalOperatorsMaybeMaybeMergeArray;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/ConcurrentLinkedQueue<TT;>;Lio/reactivex/internal/operators/maybe/MaybeMergeArray$SimpleQueueWithConsumerIndex<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue = { "ClqSimpleQueue", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 3, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_init(IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue *self) {
  JavaUtilConcurrentConcurrentLinkedQueue_init(self);
  JreStrongAssignAndConsume(&self->producerIndex_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue *new_IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue, init)
}

IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue *create_IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeMergeArray_ClqSimpleQueue)
