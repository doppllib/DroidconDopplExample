//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalQueueSpscArrayQueue")
#ifdef RESTRICT_IoReactivexInternalQueueSpscArrayQueue
#define INCLUDE_ALL_IoReactivexInternalQueueSpscArrayQueue 0
#else
#define INCLUDE_ALL_IoReactivexInternalQueueSpscArrayQueue 1
#endif
#undef RESTRICT_IoReactivexInternalQueueSpscArrayQueue

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalQueueSpscArrayQueue_) && (INCLUDE_ALL_IoReactivexInternalQueueSpscArrayQueue || defined(INCLUDE_IoReactivexInternalQueueSpscArrayQueue))
#define IoReactivexInternalQueueSpscArrayQueue_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#define RESTRICT_IoReactivexInternalFuseableSimplePlainQueue 1
#define INCLUDE_IoReactivexInternalFuseableSimplePlainQueue 1
#include "IoReactivexInternalFuseableSimplePlainQueue.h"

@class IOSObjectArray;
@class JavaUtilConcurrentAtomicAtomicLong;

@interface IoReactivexInternalQueueSpscArrayQueue : JavaUtilConcurrentAtomicAtomicReferenceArray < IoReactivexInternalFuseableSimplePlainQueue > {
 @public
  jint mask_;
  JavaUtilConcurrentAtomicAtomicLong *producerIndex_;
  jlong producerLookAhead_;
  JavaUtilConcurrentAtomicAtomicLong *consumerIndex_;
  jint lookAheadStep_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (void)clear;

- (jboolean)isEmpty;

- (jboolean)offerWithId:(id)e;

- (jboolean)offerWithId:(id)v1
                 withId:(id)v2;

- (id __nullable)poll;

#pragma mark Package-Private

- (jint)calcElementOffsetWithLong:(jlong)index;

- (jint)calcElementOffsetWithLong:(jlong)index
                          withInt:(jint)mask;

- (id)lvElementWithInt:(jint)offset;

- (void)soConsumerIndexWithLong:(jlong)newIndex;

- (void)soElementWithInt:(jint)offset
                  withId:(id)value;

- (void)soProducerIndexWithLong:(jlong)newIndex;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalQueueSpscArrayQueue)

J2OBJC_FIELD_SETTER(IoReactivexInternalQueueSpscArrayQueue, producerIndex_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalQueueSpscArrayQueue, consumerIndex_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalQueueSpscArrayQueue_initWithInt_(IoReactivexInternalQueueSpscArrayQueue *self, jint capacity);

FOUNDATION_EXPORT IoReactivexInternalQueueSpscArrayQueue *new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalQueueSpscArrayQueue *create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalQueueSpscArrayQueue)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalQueueSpscArrayQueue")
