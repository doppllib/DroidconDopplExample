//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicIntQueueDisposable.h"
#include "IoReactivexInternalObserversDeferredScalarDisposable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

inline jlong IoReactivexInternalObserversDeferredScalarDisposable_get_serialVersionUID();
#define IoReactivexInternalObserversDeferredScalarDisposable_serialVersionUID -5502432239815349361LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalObserversDeferredScalarDisposable, serialVersionUID, jlong)

@implementation IoReactivexInternalObserversDeferredScalarDisposable

+ (jint)TERMINATED {
  return IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED;
}

+ (jint)DISPOSED {
  return IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED;
}

+ (jint)FUSED_EMPTY {
  return IoReactivexInternalObserversDeferredScalarDisposable_FUSED_EMPTY;
}

+ (jint)FUSED_READY {
  return IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY;
}

+ (jint)FUSED_CONSUMED {
  return IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_FUSED_EMPTY];
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)completeWithId:(id)value {
  jint state = [self get];
  if ((state & (IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY | IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED | IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED | IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED)) != 0) {
    return;
  }
  if (state == IoReactivexInternalObserversDeferredScalarDisposable_FUSED_EMPTY) {
    JreStrongAssign(&self->value_DeferredScalarDisposable_, value);
    [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY];
  }
  else {
    [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED];
  }
  id<IoReactivexObserver> a = actual_;
  [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:value];
  if ([self get] != IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED) {
    [a onComplete];
  }
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)t {
  jint state = [self get];
  if ((state & (IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY | IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED | IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED | IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED)) != 0) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)complete {
  jint state = [self get];
  if ((state & (IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY | IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED | IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED | IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED)) != 0) {
    return;
  }
  [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (id __nullable)poll {
  if ([self get] == IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY) {
    id v = value_DeferredScalarDisposable_;
    JreStrongAssign(&value_DeferredScalarDisposable_, nil);
    [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED];
    return v;
  }
  return nil;
}

- (jboolean)isEmpty {
  return [self get] != IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY;
}

- (void)clear {
  [self lazySetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED];
  JreStrongAssign(&value_DeferredScalarDisposable_, nil);
}

- (void)dispose {
  [self setWithInt:IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED];
  JreStrongAssign(&value_DeferredScalarDisposable_, nil);
}

- (jboolean)tryDispose {
  return [self getAndSetWithInt:IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED] != IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED;
}

- (jboolean)isDisposed {
  return [self get] == IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(value_DeferredScalarDisposable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, 9, 10, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(completeWithId:);
  methods[3].selector = @selector(errorWithJavaLangThrowable:);
  methods[4].selector = @selector(complete);
  methods[5].selector = @selector(poll);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(dispose);
  methods[9].selector = @selector(tryDispose);
  methods[10].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalObserversDeferredScalarDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x14, -1, -1, 11, -1 },
    { "value_DeferredScalarDisposable_", "LNSObject;", .constantValue.asLong = 0, 0x4, 12, -1, 13, -1 },
    { "TERMINATED", "I", .constantValue.asInt = IoReactivexInternalObserversDeferredScalarDisposable_TERMINATED, 0x18, -1, -1, -1, -1 },
    { "DISPOSED", "I", .constantValue.asInt = IoReactivexInternalObserversDeferredScalarDisposable_DISPOSED, 0x18, -1, -1, -1, -1 },
    { "FUSED_EMPTY", "I", .constantValue.asInt = IoReactivexInternalObserversDeferredScalarDisposable_FUSED_EMPTY, 0x18, -1, -1, -1, -1 },
    { "FUSED_READY", "I", .constantValue.asInt = IoReactivexInternalObserversDeferredScalarDisposable_FUSED_READY, 0x18, -1, -1, -1, -1 },
    { "FUSED_CONSUMED", "I", .constantValue.asInt = IoReactivexInternalObserversDeferredScalarDisposable_FUSED_CONSUMED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "requestFusion", "I", "complete", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "LJavaLangException;", "()TT;", "Lio/reactivex/Observer<-TT;>;", "value", "TT;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicIntQueueDisposable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversDeferredScalarDisposable = { "DeferredScalarDisposable", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, 14, -1 };
  return &_IoReactivexInternalObserversDeferredScalarDisposable;
}

@end

void IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(IoReactivexInternalObserversDeferredScalarDisposable *self, id<IoReactivexObserver> actual) {
  IoReactivexInternalObserversBasicIntQueueDisposable_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalObserversDeferredScalarDisposable *new_IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversDeferredScalarDisposable, initWithIoReactivexObserver_, actual)
}

IoReactivexInternalObserversDeferredScalarDisposable *create_IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversDeferredScalarDisposable, initWithIoReactivexObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversDeferredScalarDisposable)
