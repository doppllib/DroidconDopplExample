//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubjectsReplaySubject.h"
#include "IoReactivexSubjectsSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline IOSObjectArray *IoReactivexSubjectsReplaySubject_get_EMPTY_ARRAY();
static IOSObjectArray *IoReactivexSubjectsReplaySubject_EMPTY_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsReplaySubject, EMPTY_ARRAY, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$2();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$3();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$4();

@interface IoReactivexSubjectsReplaySubject_ReplayBuffer : NSObject

@end

inline jlong IoReactivexSubjectsReplaySubject_ReplayDisposable_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_ReplayDisposable_serialVersionUID 466549804534799122LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_ReplayDisposable, serialVersionUID, jlong)

inline jlong IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_serialVersionUID -733876083048047795LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexSubjectsReplaySubject_Node_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_Node_serialVersionUID 6404226426336033100LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_Node, serialVersionUID, jlong)

inline jlong IoReactivexSubjectsReplaySubject_TimedNode_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_TimedNode_serialVersionUID 6404226426336033100LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_TimedNode, serialVersionUID, jlong)

inline jlong IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_serialVersionUID 1107649250281456395LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_serialVersionUID -8056260896137901749LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexSubjectsReplaySubject)

IOSObjectArray *IoReactivexSubjectsReplaySubject_EMPTY;
IOSObjectArray *IoReactivexSubjectsReplaySubject_TERMINATED;

@implementation IoReactivexSubjectsReplaySubject

+ (IOSObjectArray *)EMPTY {
  return IoReactivexSubjectsReplaySubject_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexSubjectsReplaySubject_TERMINATED;
}

+ (IoReactivexSubjectsReplaySubject *)create {
  return IoReactivexSubjectsReplaySubject_create();
}

+ (IoReactivexSubjectsReplaySubject *)createWithInt:(jint)capacityHint {
  return IoReactivexSubjectsReplaySubject_createWithInt_(capacityHint);
}

+ (IoReactivexSubjectsReplaySubject *)createWithSizeWithInt:(jint)maxSize {
  return IoReactivexSubjectsReplaySubject_createWithSizeWithInt_(maxSize);
}

+ (IoReactivexSubjectsReplaySubject *)createUnbounded {
  return IoReactivexSubjectsReplaySubject_createUnbounded();
}

+ (IoReactivexSubjectsReplaySubject *)createWithTimeWithLong:(jlong)maxAge
                              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(maxAge, unit, scheduler);
}

+ (IoReactivexSubjectsReplaySubject *)createWithTimeAndSizeWithLong:(jlong)maxAge
                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                            withInt:(jint)maxSize {
  return IoReactivexSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(maxAge, unit, scheduler, maxSize);
}

- (instancetype)initWithIoReactivexSubjectsReplaySubject_ReplayBuffer:(id<IoReactivexSubjectsReplaySubject_ReplayBuffer>)buffer {
  IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(self, buffer);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexSubjectsReplaySubject_ReplayDisposable *rs = create_IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(observer, self);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:rs];
  if (!JreLoadVolatileBoolean(&rs->cancelled_)) {
    if ([self addWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs]) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        [self removeWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs];
        return;
      }
    }
    [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs];
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (done_) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
  }
}

- (void)onNextWithId:(id)t {
  if (t == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  if (done_) {
    return;
  }
  id<IoReactivexSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) addWithId:t];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsReplaySubject_ReplayDisposable *rs = *b__++;
      [b replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  id o = IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(t);
  id<IoReactivexSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) addFinalWithId:o];
  {
    IOSObjectArray *a__ = [self terminateWithId:o];
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsReplaySubject_ReplayDisposable *rs = *b__++;
      [b replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs];
    }
  }
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  id o = IoReactivexInternalUtilNotificationLite_complete();
  id<IoReactivexSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) addFinalWithId:o];
  {
    IOSObjectArray *a__ = [self terminateWithId:o];
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsReplaySubject_ReplayDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsReplaySubject_ReplayDisposable *rs = *b__++;
      [b replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:rs];
    }
  }
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get]))->size_ != 0;
}

- (jint)observerCount {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get]))->size_;
}

- (JavaLangThrowable *)getThrowable {
  id o = [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) get];
  if (IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
    return IoReactivexInternalUtilNotificationLite_getErrorWithId_(o);
  }
  return nil;
}

- (id)getValue {
  return [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) getValue];
}

- (IOSObjectArray *)getValues {
  IOSObjectArray *a = IoReactivexSubjectsReplaySubject_EMPTY_ARRAY;
  IOSObjectArray *b = [self getValuesWithNSObjectArray:a];
  if (b == IoReactivexSubjectsReplaySubject_EMPTY_ARRAY) {
    return [IOSObjectArray arrayWithLength:0 type:NSObject_class_()];
  }
  return b;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) getValuesWithNSObjectArray:array];
}

- (jboolean)hasComplete {
  id o = [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) get];
  return IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o);
}

- (jboolean)hasThrowable {
  id o = [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) get];
  return IoReactivexInternalUtilNotificationLite_isErrorWithId_(o);
}

- (jboolean)hasValue {
  return [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) size] != 0;
}

- (jint)size {
  return [((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) size];
}

- (jboolean)addWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexSubjectsReplaySubject_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexSubjectsReplaySubject_ReplayDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, len);
    IOSObjectArray_Set(b, len, rs);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexSubjectsReplaySubject_TERMINATED || a == IoReactivexSubjectsReplaySubject_EMPTY) {
      return;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if (IOSObjectArray_Get(a, i) == rs) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (len == 1) {
      b = IoReactivexSubjectsReplaySubject_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexSubjectsReplaySubject_ReplayDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, len - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (IOSObjectArray *)terminateWithId:(id)terminalValue {
  if ([((id<IoReactivexSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) compareAndSetWithId:nil withId:terminalValue]) {
    return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexSubjectsReplaySubject_TERMINATED];
  }
  return IoReactivexSubjectsReplaySubject_TERMINATED;
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(observers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x9, 2, 3, -1, 4, 5, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x9, 6, 3, -1, 4, 7, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x8, -1, -1, -1, 0, -1, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x9, 8, 9, -1, 10, 11, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject;", 0x9, 12, 13, -1, 14, 15, -1 },
    { NULL, NULL, 0x0, -1, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x0, 35, 33, -1, 36, -1, -1 },
    { NULL, "[LIoReactivexSubjectsReplaySubject_ReplayDisposable;", 0x0, 37, 24, -1, 38, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithInt:);
  methods[2].selector = @selector(createWithSizeWithInt:);
  methods[3].selector = @selector(createUnbounded);
  methods[4].selector = @selector(createWithTimeWithLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[5].selector = @selector(createWithTimeAndSizeWithLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[6].selector = @selector(initWithIoReactivexSubjectsReplaySubject_ReplayBuffer:);
  methods[7].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[8].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[9].selector = @selector(onNextWithId:);
  methods[10].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[11].selector = @selector(onComplete);
  methods[12].selector = @selector(hasObservers);
  methods[13].selector = @selector(observerCount);
  methods[14].selector = @selector(getThrowable);
  methods[15].selector = @selector(getValue);
  methods[16].selector = @selector(getValues);
  methods[17].selector = @selector(getValuesWithNSObjectArray:);
  methods[18].selector = @selector(hasComplete);
  methods[19].selector = @selector(hasThrowable);
  methods[20].selector = @selector(hasValue);
  methods[21].selector = @selector(size);
  methods[22].selector = @selector(addWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[23].selector = @selector(removeWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[24].selector = @selector(terminateWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LIoReactivexSubjectsReplaySubject_ReplayBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, 39, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 40, -1 },
    { "EMPTY", "[LIoReactivexSubjectsReplaySubject_ReplayDisposable;", .constantValue.asLong = 0, 0x18, -1, 41, -1, -1 },
    { "TERMINATED", "[LIoReactivexSubjectsReplaySubject_ReplayDisposable;", .constantValue.asLong = 0, 0x18, -1, 42, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY_ARRAY", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/subjects/ReplaySubject<TT;>;", (void *)&IoReactivexSubjectsReplaySubject__Annotations$0, "create", "I", "<T:Ljava/lang/Object;>(I)Lio/reactivex/subjects/ReplaySubject<TT;>;", (void *)&IoReactivexSubjectsReplaySubject__Annotations$1, "createWithSize", (void *)&IoReactivexSubjectsReplaySubject__Annotations$2, "createWithTime", "JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/subjects/ReplaySubject<TT;>;", (void *)&IoReactivexSubjectsReplaySubject__Annotations$3, "createWithTimeAndSize", "JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/subjects/ReplaySubject<TT;>;", (void *)&IoReactivexSubjectsReplaySubject__Annotations$4, "LIoReactivexSubjectsReplaySubject_ReplayBuffer;", "(Lio/reactivex/subjects/ReplaySubject$ReplayBuffer<TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "add", "LIoReactivexSubjectsReplaySubject_ReplayDisposable;", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)Z", "remove", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)V", "terminate", "(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;", "Lio/reactivex/subjects/ReplaySubject$ReplayBuffer<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;>;", &IoReactivexSubjectsReplaySubject_EMPTY, &IoReactivexSubjectsReplaySubject_TERMINATED, &IoReactivexSubjectsReplaySubject_EMPTY_ARRAY, "LIoReactivexSubjectsReplaySubject_ReplayBuffer;LIoReactivexSubjectsReplaySubject_ReplayDisposable;LIoReactivexSubjectsReplaySubject_UnboundedReplayBuffer;LIoReactivexSubjectsReplaySubject_Node;LIoReactivexSubjectsReplaySubject_TimedNode;LIoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer;LIoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer;", "<T:Ljava/lang/Object;>Lio/reactivex/subjects/Subject<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject = { "ReplaySubject", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x11, 25, 6, -1, 44, -1, 45, -1 };
  return &_IoReactivexSubjectsReplaySubject;
}

+ (void)initialize {
  if (self == [IoReactivexSubjectsReplaySubject class]) {
    JreStrongAssignAndConsume(&IoReactivexSubjectsReplaySubject_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsReplaySubject_ReplayDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsReplaySubject_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsReplaySubject_ReplayDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsReplaySubject_EMPTY_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexSubjectsReplaySubject)
  }
}

@end

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_create() {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(16));
}

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithInt_(jint capacityHint) {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(capacityHint));
}

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithSizeWithInt_(jint maxSize) {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(maxSize));
}

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createUnbounded() {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(JavaLangInteger_MAX_VALUE));
}

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(JavaLangInteger_MAX_VALUE, maxAge, unit, scheduler));
}

IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint maxSize) {
  IoReactivexSubjectsReplaySubject_initialize();
  return create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(create_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(maxSize, maxAge, unit, scheduler));
}

void IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(IoReactivexSubjectsReplaySubject *self, id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer) {
  IoReactivexSubjectsSubject_init(self);
  JreStrongAssign(&self->buffer_, buffer);
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexSubjectsReplaySubject_EMPTY));
}

IoReactivexSubjectsReplaySubject *new_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject, initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_, buffer)
}

IoReactivexSubjectsReplaySubject *create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject, initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_, buffer)
}

IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsReplaySubject__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject)

@implementation IoReactivexSubjectsReplaySubject_ReplayBuffer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 7, -1, -1 },
    { NULL, "[LNSObject;", 0x401, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addWithId:);
  methods[1].selector = @selector(addFinalWithId:);
  methods[2].selector = @selector(replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(getValuesWithNSObjectArray:);
  methods[6].selector = @selector(get);
  methods[7].selector = @selector(compareAndSetWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LNSObject;", "(TT;)V", "addFinal", "replay", "LIoReactivexSubjectsReplaySubject_ReplayDisposable;", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)V", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "compareAndSet", "LNSObject;LNSObject;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_ReplayBuffer = { "ReplayBuffer", "io.reactivex.subjects", ptrTable, methods, NULL, 7, 0x608, 8, 0, 13, -1, -1, 14, -1 };
  return &_IoReactivexSubjectsReplaySubject_ReplayBuffer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_ReplayBuffer)

@implementation IoReactivexSubjectsReplaySubject_ReplayDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
       withIoReactivexSubjectsReplaySubject:(IoReactivexSubjectsReplaySubject *)state {
  IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(self, actual, state);
  return self;
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexSubjectsReplaySubject *) nil_chk(state_)) removeWithIoReactivexSubjectsReplaySubject_ReplayDisposable:self];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(state_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexSubjectsReplaySubject:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_ReplayDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "state_", "LIoReactivexSubjectsReplaySubject;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "index_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexSubjectsReplaySubject;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/subjects/ReplaySubject<TT;>;)V", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/subjects/ReplaySubject<TT;>;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_ReplayDisposable = { "ReplayDisposable", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 3, 5, 4, -1, -1, 5, -1 };
  return &_IoReactivexSubjectsReplaySubject_ReplayDisposable;
}

@end

void IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(IoReactivexSubjectsReplaySubject_ReplayDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->state_, state);
}

IoReactivexSubjectsReplaySubject_ReplayDisposable *new_IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_ReplayDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_, actual, state)
}

IoReactivexSubjectsReplaySubject_ReplayDisposable *create_IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_ReplayDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_, actual, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_ReplayDisposable)

@implementation IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(self, capacityHint);
  return self;
}

- (void)addWithId:(id)value {
  [((id<JavaUtilList>) nil_chk(buffer_)) addWithId:value];
  size_++;
}

- (void)addFinalWithId:(id)notificationLite {
  [((id<JavaUtilList>) nil_chk(buffer_)) addWithId:notificationLite];
  size_++;
  JreAssignVolatileBoolean(&done_, true);
}

- (id)getValue {
  jint s = JreLoadVolatileInt(&size_);
  if (s != 0) {
    id<JavaUtilList> b = buffer_;
    id o = [((id<JavaUtilList>) nil_chk(b)) getWithInt:s - 1];
    if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
      if (s == 1) {
        return nil;
      }
      return [b getWithInt:s - 2];
    }
    return o;
  }
  return nil;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  jint s = JreLoadVolatileInt(&size_);
  if (s == 0) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
    return array;
  }
  id<JavaUtilList> b = buffer_;
  id o = [((id<JavaUtilList>) nil_chk(b)) getWithInt:s - 1];
  if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
    s--;
    if (s == 0) {
      if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
        IOSObjectArray_Set(array, 0, nil);
      }
      return array;
    }
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
    array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
  }
  for (jint i = 0; i < s; i++) {
    IOSObjectArray_Set(nil_chk(array), i, [b getWithInt:i]);
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
    IOSObjectArray_Set(array, s, nil);
  }
  return array;
}

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs {
  if ([((IoReactivexSubjectsReplaySubject_ReplayDisposable *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<JavaUtilList> b = buffer_;
  id<IoReactivexObserver> a = rs->actual_;
  JavaLangInteger *indexObject = (JavaLangInteger *) cast_chk(rs->index_, [JavaLangInteger class]);
  jint index;
  if (indexObject != nil) {
    index = [indexObject intValue];
  }
  else {
    index = 0;
    JreStrongAssign(&rs->index_, JavaLangInteger_valueOfWithInt_(0));
  }
  for (; ; ) {
    if (JreLoadVolatileBoolean(&rs->cancelled_)) {
      JreStrongAssign(&rs->index_, nil);
      return;
    }
    jint s = JreLoadVolatileInt(&size_);
    while (s != index) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      id o = [((id<JavaUtilList>) nil_chk(b)) getWithInt:index];
      if (JreLoadVolatileBoolean(&done_)) {
        if (index + 1 == s) {
          s = JreLoadVolatileInt(&size_);
          if (index + 1 == s) {
            if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
              [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
            }
            else {
              [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:IoReactivexInternalUtilNotificationLite_getErrorWithId_(o)];
            }
            JreStrongAssign(&rs->index_, nil);
            JreAssignVolatileBoolean(&rs->cancelled_, true);
            return;
          }
        }
      }
      [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:o];
      index++;
    }
    if (index != JreLoadVolatileInt(&size_)) {
      continue;
    }
    JreStrongAssign(&rs->index_, JavaLangInteger_valueOfWithInt_(index));
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  jint s = JreLoadVolatileInt(&size_);
  if (s != 0) {
    id o = [((id<JavaUtilList>) nil_chk(buffer_)) getWithInt:s - 1];
    if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
      return s - 1;
    }
    return s;
  }
  return 0;
}

- (void)dealloc {
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(addFinalWithId:);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(getValuesWithNSObjectArray:);
  methods[5].selector = @selector(replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[6].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LNSObject;", "(TT;)V", "addFinal", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "replay", "LIoReactivexSubjectsReplaySubject_ReplayDisposable;", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)V", "Ljava/util/List<Ljava/lang/Object;>;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer = { "UnboundedReplayBuffer", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 7, 4, 13, -1, -1, 14, -1 };
  return &_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer;
}

@end

void IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *self, jint capacityHint) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->buffer_, new_JavaUtilArrayList_initWithInt_(IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint")));
}

IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *new_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *create_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer)

@implementation IoReactivexSubjectsReplaySubject_Node

- (instancetype)initWithId:(id)value {
  IoReactivexSubjectsReplaySubject_Node_initWithId_(self, value);
  return self;
}

- (void)dealloc {
  RELEASE_(value_Node_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_Node_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_Node_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "value", "TT;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/subjects/ReplaySubject$Node<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_Node = { "Node", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 1, 2, 4, -1, -1, 5, -1 };
  return &_IoReactivexSubjectsReplaySubject_Node;
}

@end

void IoReactivexSubjectsReplaySubject_Node_initWithId_(IoReactivexSubjectsReplaySubject_Node *self, id value) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_Node_, value);
}

IoReactivexSubjectsReplaySubject_Node *new_IoReactivexSubjectsReplaySubject_Node_initWithId_(id value) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_Node, initWithId_, value)
}

IoReactivexSubjectsReplaySubject_Node *create_IoReactivexSubjectsReplaySubject_Node_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_Node, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_Node)

@implementation IoReactivexSubjectsReplaySubject_TimedNode

- (instancetype)initWithId:(id)value
                  withLong:(jlong)time {
  IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(self, value, time);
  return self;
}

- (void)dealloc {
  RELEASE_(value_TimedNode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_TimedNode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_TimedNode_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;J", "(TT;J)V", "value", "TT;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/subjects/ReplaySubject$TimedNode<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_TimedNode = { "TimedNode", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 1, 3, 4, -1, -1, 5, -1 };
  return &_IoReactivexSubjectsReplaySubject_TimedNode;
}

@end

void IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(IoReactivexSubjectsReplaySubject_TimedNode *self, id value, jlong time) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_TimedNode_, value);
  self->time_ = time;
}

IoReactivexSubjectsReplaySubject_TimedNode *new_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(id value, jlong time) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_TimedNode, initWithId_withLong_, value, time)
}

IoReactivexSubjectsReplaySubject_TimedNode *create_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(id value, jlong time) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_TimedNode, initWithId_withLong_, value, time)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_TimedNode)

@implementation IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer

- (instancetype)initWithInt:(jint)maxSize {
  IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(self, maxSize);
  return self;
}

- (void)trim {
  if (size_ > maxSize_) {
    size_--;
    IoReactivexSubjectsReplaySubject_Node *h = JreLoadVolatileId(&head_);
    JreVolatileStrongAssign(&head_, [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(h)) get]);
  }
}

- (void)addWithId:(id)value {
  IoReactivexSubjectsReplaySubject_Node *n = create_IoReactivexSubjectsReplaySubject_Node_initWithId_(value);
  IoReactivexSubjectsReplaySubject_Node *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(t)) setWithId:n];
  [self trim];
}

- (void)addFinalWithId:(id)notificationLite {
  IoReactivexSubjectsReplaySubject_Node *n = create_IoReactivexSubjectsReplaySubject_Node_initWithId_(notificationLite);
  IoReactivexSubjectsReplaySubject_Node *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(t)) lazySetWithId:n];
  JreAssignVolatileBoolean(&done_, true);
}

- (id)getValue {
  IoReactivexSubjectsReplaySubject_Node *prev = nil;
  IoReactivexSubjectsReplaySubject_Node *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexSubjectsReplaySubject_Node *next = [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(h)) get];
    if (next == nil) {
      break;
    }
    prev = h;
    h = next;
  }
  id v = h->value_Node_;
  if (v == nil) {
    return nil;
  }
  if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(v) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(v)) {
    return ((IoReactivexSubjectsReplaySubject_Node *) nil_chk(prev))->value_Node_;
  }
  return v;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  IoReactivexSubjectsReplaySubject_Node *h = JreLoadVolatileId(&head_);
  jint s = [self size];
  if (s == 0) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
  }
  else {
    if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
      array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
    }
    jint i = 0;
    while (i != s) {
      IoReactivexSubjectsReplaySubject_Node *next = [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(h)) get];
      IOSObjectArray_Set(nil_chk(array), i, ((IoReactivexSubjectsReplaySubject_Node *) nil_chk(next))->value_Node_);
      i++;
      h = next;
    }
    if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
      IOSObjectArray_Set(array, s, nil);
    }
  }
  return array;
}

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs {
  if ([((IoReactivexSubjectsReplaySubject_ReplayDisposable *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<IoReactivexObserver> a = rs->actual_;
  IoReactivexSubjectsReplaySubject_Node *index = (IoReactivexSubjectsReplaySubject_Node *) cast_chk(rs->index_, [IoReactivexSubjectsReplaySubject_Node class]);
  if (index == nil) {
    index = JreLoadVolatileId(&head_);
  }
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      IoReactivexSubjectsReplaySubject_Node *n = [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(index)) get];
      if (n == nil) {
        break;
      }
      id o = n->value_Node_;
      if (JreLoadVolatileBoolean(&done_)) {
        if ([n get] == nil) {
          if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
            [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          }
          else {
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:IoReactivexInternalUtilNotificationLite_getErrorWithId_(o)];
          }
          JreStrongAssign(&rs->index_, nil);
          JreAssignVolatileBoolean(&rs->cancelled_, true);
          return;
        }
      }
      [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:o];
      index = n;
    }
    if ([index get] != nil) {
      continue;
    }
    JreStrongAssign(&rs->index_, index);
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  jint s = 0;
  IoReactivexSubjectsReplaySubject_Node *h = JreLoadVolatileId(&head_);
  while (s != JavaLangInteger_MAX_VALUE) {
    IoReactivexSubjectsReplaySubject_Node *next = [((IoReactivexSubjectsReplaySubject_Node *) nil_chk(h)) get];
    if (next == nil) {
      id o = h->value_Node_;
      if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
        s--;
      }
      break;
    }
    s++;
    h = next;
  }
  return s;
}

- (void)__javaClone:(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  JreReleaseVolatile(&head_);
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(trim);
  methods[2].selector = @selector(addWithId:);
  methods[3].selector = @selector(addFinalWithId:);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(getValuesWithNSObjectArray:);
  methods[6].selector = @selector(replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[7].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "LIoReactivexSubjectsReplaySubject_Node;", .constantValue.asLong = 0, 0x40, -1, -1, 12, -1 },
    { "tail_", "LIoReactivexSubjectsReplaySubject_Node;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LNSObject;", "(TT;)V", "addFinal", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "replay", "LIoReactivexSubjectsReplaySubject_ReplayDisposable;", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)V", "Lio/reactivex/subjects/ReplaySubject$Node<Ljava/lang/Object;>;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer = { "SizeBoundReplayBuffer", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 8, 6, 13, -1, -1, 14, -1 };
  return &_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer;
}

@end

void IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *self, jint maxSize) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->maxSize_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(maxSize, @"maxSize");
  IoReactivexSubjectsReplaySubject_Node *h = create_IoReactivexSubjectsReplaySubject_Node_initWithId_(nil);
  JreStrongAssign(&self->tail_, h);
  JreVolatileStrongAssign(&self->head_, h);
}

IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *new_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer, initWithInt_, maxSize)
}

IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *create_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer, initWithInt_, maxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer)

@implementation IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, maxSize, maxAge, unit, scheduler);
  return self;
}

- (void)trim {
  if (size_ > maxSize_) {
    size_--;
    IoReactivexSubjectsReplaySubject_TimedNode *h = JreLoadVolatileId(&head_);
    JreVolatileStrongAssign(&head_, [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get]);
  }
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexSubjectsReplaySubject_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    if (next->time_ > limit) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    h = next;
  }
}

- (void)trimFinal {
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexSubjectsReplaySubject_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get];
    if ([((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(next)) get] == nil) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    if (next->time_ > limit) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    h = next;
  }
}

- (void)addWithId:(id)value {
  IoReactivexSubjectsReplaySubject_TimedNode *n = create_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(value, [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_]);
  IoReactivexSubjectsReplaySubject_TimedNode *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(t)) setWithId:n];
  [self trim];
}

- (void)addFinalWithId:(id)notificationLite {
  IoReactivexSubjectsReplaySubject_TimedNode *n = create_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(notificationLite, JavaLangLong_MAX_VALUE);
  IoReactivexSubjectsReplaySubject_TimedNode *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(t)) lazySetWithId:n];
  [self trimFinal];
  JreAssignVolatileBoolean(&done_, true);
}

- (id)getValue {
  IoReactivexSubjectsReplaySubject_TimedNode *prev = nil;
  IoReactivexSubjectsReplaySubject_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      break;
    }
    prev = h;
    h = next;
  }
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  if (h->time_ < limit) {
    return nil;
  }
  id v = h->value_TimedNode_;
  if (v == nil) {
    return nil;
  }
  if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(v) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(v)) {
    return ((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(prev))->value_TimedNode_;
  }
  return v;
}

- (IoReactivexSubjectsReplaySubject_TimedNode *)getHead {
  IoReactivexSubjectsReplaySubject_TimedNode *index = JreLoadVolatileId(&head_);
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(index)) get];
  while (next != nil) {
    jlong ts = next->time_;
    if (ts > limit) {
      break;
    }
    index = next;
    next = [index get];
  }
  return index;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  IoReactivexSubjectsReplaySubject_TimedNode *h = [self getHead];
  jint s = [self sizeWithIoReactivexSubjectsReplaySubject_TimedNode:h];
  if (s == 0) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
  }
  else {
    if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
      array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
    }
    jint i = 0;
    while (i != s) {
      IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get];
      IOSObjectArray_Set(nil_chk(array), i, ((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(next))->value_TimedNode_);
      i++;
      h = next;
    }
    if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
      IOSObjectArray_Set(array, s, nil);
    }
  }
  return array;
}

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs {
  if ([((IoReactivexSubjectsReplaySubject_ReplayDisposable *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<IoReactivexObserver> a = rs->actual_;
  IoReactivexSubjectsReplaySubject_TimedNode *index = (IoReactivexSubjectsReplaySubject_TimedNode *) cast_chk(rs->index_, [IoReactivexSubjectsReplaySubject_TimedNode class]);
  if (index == nil) {
    index = [self getHead];
  }
  for (; ; ) {
    if (JreLoadVolatileBoolean(&rs->cancelled_)) {
      JreStrongAssign(&rs->index_, nil);
      return;
    }
    for (; ; ) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      IoReactivexSubjectsReplaySubject_TimedNode *n = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(index)) get];
      if (n == nil) {
        break;
      }
      id o = n->value_TimedNode_;
      if (JreLoadVolatileBoolean(&done_)) {
        if ([n get] == nil) {
          if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
            [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          }
          else {
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:IoReactivexInternalUtilNotificationLite_getErrorWithId_(o)];
          }
          JreStrongAssign(&rs->index_, nil);
          JreAssignVolatileBoolean(&rs->cancelled_, true);
          return;
        }
      }
      [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:o];
      index = n;
    }
    if ([index get] != nil) {
      continue;
    }
    JreStrongAssign(&rs->index_, index);
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  return [self sizeWithIoReactivexSubjectsReplaySubject_TimedNode:[self getHead]];
}

- (jint)sizeWithIoReactivexSubjectsReplaySubject_TimedNode:(IoReactivexSubjectsReplaySubject_TimedNode *)h {
  jint s = 0;
  while (s != JavaLangInteger_MAX_VALUE) {
    IoReactivexSubjectsReplaySubject_TimedNode *next = [((IoReactivexSubjectsReplaySubject_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      id o = h->value_TimedNode_;
      if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
        s--;
      }
      break;
    }
    s++;
    h = next;
  }
  return s;
}

- (void)__javaClone:(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  JreReleaseVolatile(&head_);
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexSubjectsReplaySubject_TimedNode;", 0x0, -1, -1, -1, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 13, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(trim);
  methods[2].selector = @selector(trimFinal);
  methods[3].selector = @selector(addWithId:);
  methods[4].selector = @selector(addFinalWithId:);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(getHead);
  methods[7].selector = @selector(getValuesWithNSObjectArray:);
  methods[8].selector = @selector(replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:);
  methods[9].selector = @selector(size);
  methods[10].selector = @selector(sizeWithIoReactivexSubjectsReplaySubject_TimedNode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "LIoReactivexSubjectsReplaySubject_TimedNode;", .constantValue.asLong = 0, 0x40, -1, -1, 16, -1 },
    { "tail_", "LIoReactivexSubjectsReplaySubject_TimedNode;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "add", "LNSObject;", "(TT;)V", "addFinal", "()TT;", "()Lio/reactivex/subjects/ReplaySubject$TimedNode<Ljava/lang/Object;>;", "getValues", "[LNSObject;", "([TT;)[TT;", "replay", "LIoReactivexSubjectsReplaySubject_ReplayDisposable;", "(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable<TT;>;)V", "size", "LIoReactivexSubjectsReplaySubject_TimedNode;", "(Lio/reactivex/subjects/ReplaySubject$TimedNode<Ljava/lang/Object;>;)I", "Lio/reactivex/subjects/ReplaySubject$TimedNode<Ljava/lang/Object;>;", "LIoReactivexSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer = { "SizeAndTimeBoundReplayBuffer", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 11, 9, 17, -1, -1, 18, -1 };
  return &_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer;
}

@end

void IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *self, jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->maxSize_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(maxSize, @"maxSize");
  self->maxAge_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithLong_withNSString_(maxAge, @"maxAge");
  JreStrongAssign(&self->unit_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(unit, @"unit is null"));
  JreStrongAssign(&self->scheduler_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(scheduler, @"scheduler is null"));
  IoReactivexSubjectsReplaySubject_TimedNode *h = create_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(nil, 0LL);
  JreStrongAssign(&self->tail_, h);
  JreVolatileStrongAssign(&self->head_, h);
}

IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *new_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, maxSize, maxAge, unit, scheduler)
}

IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *create_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, maxSize, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer)
