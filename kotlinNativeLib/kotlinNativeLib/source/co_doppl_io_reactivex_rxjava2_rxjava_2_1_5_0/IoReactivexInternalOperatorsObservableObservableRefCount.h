//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableRefCount
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableRefCount

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount))
#define IoReactivexInternalOperatorsObservableObservableRefCount_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexObservablesConnectableObservable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentLocksReentrantLock;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRefCount : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  IoReactivexObservablesConnectableObservable *source_ObservableRefCount_;
  volatile_id baseDisposable_;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)source;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)subscriber;

#pragma mark Package-Private

- (void)doSubscribeWithIoReactivexObserver:(id<IoReactivexObserver>)observer
withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, source_ObservableRefCount_, IoReactivexObservablesConnectableObservable *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, baseDisposable_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, lock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexInternalOperatorsObservableObservableRefCount *self, IoReactivexObservablesConnectableObservable *source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount *new_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount *create_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver))
#define IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableRefCount;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> subscriber_;
  IoReactivexDisposablesCompositeDisposable *currentBase_;
  id<IoReactivexDisposablesDisposable> resource_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                                         withIoReactivexObserver:(id<IoReactivexObserver>)subscriber
                                   withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase
                                            withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

- (void)cleanup;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, subscriber_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, currentBase_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, resource_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *new_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *create_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer))
#define IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_

#define RESTRICT_IoReactivexFunctionsConsumer 1
#define INCLUDE_IoReactivexFunctionsConsumer 1
#include "IoReactivexFunctionsConsumer.h"

@class IoReactivexInternalOperatorsObservableObservableRefCount;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer : NSObject < IoReactivexFunctionsConsumer >

#pragma mark Public

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)subscription;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                                         withIoReactivexObserver:(id<IoReactivexObserver>)observer
                                       withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *new_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask))
#define IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableRefCount;

@interface IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                   withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *new_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount")
