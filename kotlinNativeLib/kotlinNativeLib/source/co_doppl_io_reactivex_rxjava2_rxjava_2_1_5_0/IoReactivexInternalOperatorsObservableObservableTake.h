//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableTake
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableTake

#if !defined (IoReactivexInternalOperatorsObservableObservableTake_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTake))
#define IoReactivexInternalOperatorsObservableObservableTake_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableTake : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong limit_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)limit;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTake)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(IoReactivexInternalOperatorsObservableObservableTake *self, id<IoReactivexObservableSource> source, jlong limit);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTake *new_IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTake *create_IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong limit);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTake)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver))
#define IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableTake_TakeObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jboolean done_;
  id<IoReactivexDisposablesDisposable> subscription_;
  jlong remaining_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)limit;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver, subscription_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *self, id<IoReactivexObserver> actual, jlong limit);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *new_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *create_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong limit);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTake")
