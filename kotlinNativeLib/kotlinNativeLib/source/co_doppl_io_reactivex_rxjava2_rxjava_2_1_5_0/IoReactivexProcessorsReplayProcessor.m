//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsFlowableProcessor.h"
#include "IoReactivexProcessorsReplayProcessor.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline IOSObjectArray *IoReactivexProcessorsReplayProcessor_get_EMPTY_ARRAY();
static IOSObjectArray *IoReactivexProcessorsReplayProcessor_EMPTY_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsReplayProcessor, EMPTY_ARRAY, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$1();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$2();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$3();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$4();

@interface IoReactivexProcessorsReplayProcessor_ReplayBuffer : NSObject

@end

inline jlong IoReactivexProcessorsReplayProcessor_ReplaySubscription_get_serialVersionUID();
#define IoReactivexProcessorsReplayProcessor_ReplaySubscription_serialVersionUID 466549804534799122LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexProcessorsReplayProcessor_ReplaySubscription, serialVersionUID, jlong)

inline jlong IoReactivexProcessorsReplayProcessor_Node_get_serialVersionUID();
#define IoReactivexProcessorsReplayProcessor_Node_serialVersionUID 6404226426336033100LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexProcessorsReplayProcessor_Node, serialVersionUID, jlong)

inline jlong IoReactivexProcessorsReplayProcessor_TimedNode_get_serialVersionUID();
#define IoReactivexProcessorsReplayProcessor_TimedNode_serialVersionUID 6404226426336033100LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexProcessorsReplayProcessor_TimedNode, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexProcessorsReplayProcessor)

IOSObjectArray *IoReactivexProcessorsReplayProcessor_EMPTY;
IOSObjectArray *IoReactivexProcessorsReplayProcessor_TERMINATED;

@implementation IoReactivexProcessorsReplayProcessor

+ (IOSObjectArray *)EMPTY {
  return IoReactivexProcessorsReplayProcessor_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexProcessorsReplayProcessor_TERMINATED;
}

+ (IoReactivexProcessorsReplayProcessor *)create {
  return IoReactivexProcessorsReplayProcessor_create();
}

+ (IoReactivexProcessorsReplayProcessor *)createWithInt:(jint)capacityHint {
  return IoReactivexProcessorsReplayProcessor_createWithInt_(capacityHint);
}

+ (IoReactivexProcessorsReplayProcessor *)createWithSizeWithInt:(jint)maxSize {
  return IoReactivexProcessorsReplayProcessor_createWithSizeWithInt_(maxSize);
}

+ (IoReactivexProcessorsReplayProcessor *)createUnbounded {
  return IoReactivexProcessorsReplayProcessor_createUnbounded();
}

+ (IoReactivexProcessorsReplayProcessor *)createWithTimeWithLong:(jlong)maxAge
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                        withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexProcessorsReplayProcessor_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(maxAge, unit, scheduler);
}

+ (IoReactivexProcessorsReplayProcessor *)createWithTimeAndSizeWithLong:(jlong)maxAge
                                         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                                withInt:(jint)maxSize {
  return IoReactivexProcessorsReplayProcessor_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(maxAge, unit, scheduler, maxSize);
}

- (instancetype)initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer:(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>)buffer {
  IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(self, buffer);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexProcessorsReplayProcessor_ReplaySubscription *rs = create_IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(s, self);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:rs];
  if ([self addWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs]) {
    if (JreLoadVolatileBoolean(&rs->cancelled_)) {
      [self removeWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs];
      return;
    }
  }
  [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(buffer_)) replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs];
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (done_) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    return;
  }
  [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
}

- (void)onNextWithId:(id)t {
  if (t == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  if (done_) {
    return;
  }
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) nextWithId:t];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexProcessorsReplayProcessor_ReplaySubscription *rs = *b__++;
      [b replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) errorWithJavaLangThrowable:t];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexProcessorsReplayProcessor_TERMINATED];
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexProcessorsReplayProcessor_ReplaySubscription *rs = *b__++;
      [b replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs];
    }
  }
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) complete];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexProcessorsReplayProcessor_TERMINATED];
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexProcessorsReplayProcessor_ReplaySubscription * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexProcessorsReplayProcessor_ReplaySubscription *rs = *b__++;
      [b replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:rs];
    }
  }
}

- (jboolean)hasSubscribers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get]))->size_ != 0;
}

- (jint)subscriberCount {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get]))->size_;
}

- (JavaLangThrowable *)getThrowable {
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  if ([((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) isDone]) {
    return [b getError];
  }
  return nil;
}

- (id)getValue {
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(buffer_)) getValue];
}

- (IOSObjectArray *)getValues {
  IOSObjectArray *a = IoReactivexProcessorsReplayProcessor_EMPTY_ARRAY;
  IOSObjectArray *b = [self getValuesWithNSObjectArray:a];
  if (b == IoReactivexProcessorsReplayProcessor_EMPTY_ARRAY) {
    return [IOSObjectArray arrayWithLength:0 type:NSObject_class_()];
  }
  return b;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(buffer_)) getValuesWithNSObjectArray:array];
}

- (jboolean)hasComplete {
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) isDone] && [b getError] == nil;
}

- (jboolean)hasThrowable {
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> b = buffer_;
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(b)) isDone] && [b getError] != nil;
}

- (jboolean)hasValue {
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(buffer_)) size] != 0;
}

- (jint)size {
  return [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(buffer_)) size];
}

- (jboolean)addWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexProcessorsReplayProcessor_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexProcessorsReplayProcessor_ReplaySubscription_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, len);
    IOSObjectArray_Set(b, len, rs);
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexProcessorsReplayProcessor_TERMINATED || a == IoReactivexProcessorsReplayProcessor_EMPTY) {
      return;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if (IOSObjectArray_Get(a, i) == rs) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (len == 1) {
      b = IoReactivexProcessorsReplayProcessor_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexProcessorsReplayProcessor_ReplaySubscription_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, len - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(subscribers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x9, 2, 3, -1, 4, 5, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x9, 6, 3, -1, 4, 7, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x8, -1, -1, -1, 0, -1, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x9, 8, 9, -1, 10, 11, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor;", 0x9, 12, 13, -1, 14, 15, -1 },
    { NULL, NULL, 0x0, -1, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x0, 35, 33, -1, 36, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithInt:);
  methods[2].selector = @selector(createWithSizeWithInt:);
  methods[3].selector = @selector(createUnbounded);
  methods[4].selector = @selector(createWithTimeWithLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[5].selector = @selector(createWithTimeAndSizeWithLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[6].selector = @selector(initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer:);
  methods[7].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[8].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[9].selector = @selector(onNextWithId:);
  methods[10].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[11].selector = @selector(onComplete);
  methods[12].selector = @selector(hasSubscribers);
  methods[13].selector = @selector(subscriberCount);
  methods[14].selector = @selector(getThrowable);
  methods[15].selector = @selector(getValue);
  methods[16].selector = @selector(getValues);
  methods[17].selector = @selector(getValuesWithNSObjectArray:);
  methods[18].selector = @selector(hasComplete);
  methods[19].selector = @selector(hasThrowable);
  methods[20].selector = @selector(hasValue);
  methods[21].selector = @selector(size);
  methods[22].selector = @selector(addWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  methods[23].selector = @selector(removeWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "buffer_", "LIoReactivexProcessorsReplayProcessor_ReplayBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, 38, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 39, -1 },
    { "EMPTY", "[LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", .constantValue.asLong = 0, 0x18, -1, 40, -1, -1 },
    { "TERMINATED", "[LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", .constantValue.asLong = 0, 0x18, -1, 41, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/processors/ReplayProcessor<TT;>;", (void *)&IoReactivexProcessorsReplayProcessor__Annotations$0, "create", "I", "<T:Ljava/lang/Object;>(I)Lio/reactivex/processors/ReplayProcessor<TT;>;", (void *)&IoReactivexProcessorsReplayProcessor__Annotations$1, "createWithSize", (void *)&IoReactivexProcessorsReplayProcessor__Annotations$2, "createWithTime", "JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/processors/ReplayProcessor<TT;>;", (void *)&IoReactivexProcessorsReplayProcessor__Annotations$3, "createWithTimeAndSize", "JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/processors/ReplayProcessor<TT;>;", (void *)&IoReactivexProcessorsReplayProcessor__Annotations$4, "LIoReactivexProcessorsReplayProcessor_ReplayBuffer;", "(Lio/reactivex/processors/ReplayProcessor$ReplayBuffer<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "add", "LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)Z", "remove", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)V", &IoReactivexProcessorsReplayProcessor_EMPTY_ARRAY, "Lio/reactivex/processors/ReplayProcessor$ReplayBuffer<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;>;", &IoReactivexProcessorsReplayProcessor_EMPTY, &IoReactivexProcessorsReplayProcessor_TERMINATED, "LIoReactivexProcessorsReplayProcessor_ReplayBuffer;LIoReactivexProcessorsReplayProcessor_ReplaySubscription;LIoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer;LIoReactivexProcessorsReplayProcessor_Node;LIoReactivexProcessorsReplayProcessor_TimedNode;LIoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer;LIoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer;", "<T:Ljava/lang/Object;>Lio/reactivex/processors/FlowableProcessor<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor = { "ReplayProcessor", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x11, 24, 6, -1, 42, -1, 43, -1 };
  return &_IoReactivexProcessorsReplayProcessor;
}

+ (void)initialize {
  if (self == [IoReactivexProcessorsReplayProcessor class]) {
    JreStrongAssignAndConsume(&IoReactivexProcessorsReplayProcessor_EMPTY_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    JreStrongAssignAndConsume(&IoReactivexProcessorsReplayProcessor_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexProcessorsReplayProcessor_ReplaySubscription_class_()]);
    JreStrongAssignAndConsume(&IoReactivexProcessorsReplayProcessor_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexProcessorsReplayProcessor_ReplaySubscription_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexProcessorsReplayProcessor)
  }
}

@end

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_create() {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(16));
}

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithInt_(jint capacityHint) {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(capacityHint));
}

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithSizeWithInt_(jint maxSize) {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(maxSize));
}

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createUnbounded() {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(JavaLangInteger_MAX_VALUE));
}

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(JavaLangInteger_MAX_VALUE, maxAge, unit, scheduler));
}

IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint maxSize) {
  IoReactivexProcessorsReplayProcessor_initialize();
  return create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(create_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(maxSize, maxAge, unit, scheduler));
}

void IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(IoReactivexProcessorsReplayProcessor *self, id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer) {
  IoReactivexProcessorsFlowableProcessor_init(self);
  JreStrongAssign(&self->buffer_, buffer);
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexProcessorsReplayProcessor_EMPTY));
}

IoReactivexProcessorsReplayProcessor *new_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor, initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_, buffer)
}

IoReactivexProcessorsReplayProcessor *create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor, initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_, buffer)
}

IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsReplayProcessor__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor)

@implementation IoReactivexProcessorsReplayProcessor_ReplayBuffer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 8, -1, -1 },
    { NULL, "[LNSObject;", 0x401, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(nextWithId:);
  methods[1].selector = @selector(errorWithJavaLangThrowable:);
  methods[2].selector = @selector(complete);
  methods[3].selector = @selector(replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(getValuesWithNSObjectArray:);
  methods[7].selector = @selector(isDone);
  methods[8].selector = @selector(getError);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)V", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_ReplayBuffer = { "ReplayBuffer", "io.reactivex.processors", ptrTable, methods, NULL, 7, 0x608, 9, 0, 12, -1, -1, 13, -1 };
  return &_IoReactivexProcessorsReplayProcessor_ReplayBuffer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_ReplayBuffer)

@implementation IoReactivexProcessorsReplayProcessor_ReplaySubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
            withIoReactivexProcessorsReplayProcessor:(IoReactivexProcessorsReplayProcessor *)state {
  IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(self, actual, state);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [((id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>) nil_chk(((IoReactivexProcessorsReplayProcessor *) nil_chk(state_))->buffer_)) replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:self];
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexProcessorsReplayProcessor *) nil_chk(state_)) removeWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:self];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(state_);
  RELEASE_(index_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexProcessorsReplayProcessor:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexProcessorsReplayProcessor_ReplaySubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "state_", "LIoReactivexProcessorsReplayProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "index_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "emitted_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexProcessorsReplayProcessor;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/processors/ReplayProcessor<TT;>;)V", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/processors/ReplayProcessor<TT;>;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_ReplaySubscription = { "ReplaySubscription", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 3, 7, 6, -1, -1, 7, -1 };
  return &_IoReactivexProcessorsReplayProcessor_ReplaySubscription;
}

@end

void IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(IoReactivexProcessorsReplayProcessor_ReplaySubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->state_, state);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexProcessorsReplayProcessor_ReplaySubscription *new_IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_ReplaySubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_, actual, state)
}

IoReactivexProcessorsReplayProcessor_ReplaySubscription *create_IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_ReplaySubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_, actual, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_ReplaySubscription)

@implementation IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(self, capacityHint);
  return self;
}

- (void)nextWithId:(id)value {
  [((id<JavaUtilList>) nil_chk(buffer_)) addWithId:value];
  size_++;
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex {
  JreStrongAssign(&error_, ex);
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  JreAssignVolatileBoolean(&done_, true);
}

- (id)getValue {
  jint s = JreLoadVolatileInt(&size_);
  if (s == 0) {
    return nil;
  }
  return [((id<JavaUtilList>) nil_chk(buffer_)) getWithInt:s - 1];
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  jint s = JreLoadVolatileInt(&size_);
  if (s == 0) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
    return array;
  }
  id<JavaUtilList> b = buffer_;
  if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
    array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
  }
  for (jint i = 0; i < s; i++) {
    IOSObjectArray_Set(nil_chk(array), i, [((id<JavaUtilList>) nil_chk(b)) getWithInt:i]);
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
    IOSObjectArray_Set(array, s, nil);
  }
  return array;
}

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs {
  if ([((IoReactivexProcessorsReplayProcessor_ReplaySubscription *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<JavaUtilList> b = buffer_;
  id<OrgReactivestreamsSubscriber> a = rs->actual_;
  JavaLangInteger *indexObject = (JavaLangInteger *) cast_chk(rs->index_, [JavaLangInteger class]);
  jint index;
  if (indexObject != nil) {
    index = [indexObject intValue];
  }
  else {
    index = 0;
    JreStrongAssign(&rs->index_, JavaLangInteger_valueOfWithInt_(0));
  }
  jlong e = rs->emitted_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rs->requested_)) get];
    while (e != r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jint s = JreLoadVolatileInt(&size_);
      if (d && index == s) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
      if (index == s) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:[((id<JavaUtilList>) nil_chk(b)) getWithInt:index]];
      index++;
      e++;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jint s = JreLoadVolatileInt(&size_);
      if (d && index == s) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
    }
    JreStrongAssign(&rs->index_, JavaLangInteger_valueOfWithInt_(index));
    rs->emitted_ = e;
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  return JreLoadVolatileInt(&size_);
}

- (jboolean)isDone {
  return JreLoadVolatileBoolean(&done_);
}

- (JavaLangThrowable *)getError {
  return error_;
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(nextWithId:);
  methods[2].selector = @selector(errorWithJavaLangThrowable:);
  methods[3].selector = @selector(complete);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(getValuesWithNSObjectArray:);
  methods[6].selector = @selector(replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(isDone);
  methods[9].selector = @selector(getError);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "replay", "LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)V", "Ljava/util/List<TT;>;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/processors/ReplayProcessor$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer = { "UnboundedReplayBuffer", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 10, 4, 14, -1, -1, 15, -1 };
  return &_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer;
}

@end

void IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *self, jint capacityHint) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffer_, new_JavaUtilArrayList_initWithInt_(IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint")));
}

IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *new_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *create_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer)

@implementation IoReactivexProcessorsReplayProcessor_Node

- (instancetype)initWithId:(id)value {
  IoReactivexProcessorsReplayProcessor_Node_initWithId_(self, value);
  return self;
}

- (void)dealloc {
  RELEASE_(value_Node_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexProcessorsReplayProcessor_Node_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_Node_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "value", "TT;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/processors/ReplayProcessor$Node<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_Node = { "Node", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 1, 2, 4, -1, -1, 5, -1 };
  return &_IoReactivexProcessorsReplayProcessor_Node;
}

@end

void IoReactivexProcessorsReplayProcessor_Node_initWithId_(IoReactivexProcessorsReplayProcessor_Node *self, id value) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_Node_, value);
}

IoReactivexProcessorsReplayProcessor_Node *new_IoReactivexProcessorsReplayProcessor_Node_initWithId_(id value) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_Node, initWithId_, value)
}

IoReactivexProcessorsReplayProcessor_Node *create_IoReactivexProcessorsReplayProcessor_Node_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_Node, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_Node)

@implementation IoReactivexProcessorsReplayProcessor_TimedNode

- (instancetype)initWithId:(id)value
                  withLong:(jlong)time {
  IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(self, value, time);
  return self;
}

- (void)dealloc {
  RELEASE_(value_TimedNode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexProcessorsReplayProcessor_TimedNode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_TimedNode_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;J", "(TT;J)V", "value", "TT;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/processors/ReplayProcessor$TimedNode<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_TimedNode = { "TimedNode", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 1, 3, 4, -1, -1, 5, -1 };
  return &_IoReactivexProcessorsReplayProcessor_TimedNode;
}

@end

void IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(IoReactivexProcessorsReplayProcessor_TimedNode *self, id value, jlong time) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_TimedNode_, value);
  self->time_ = time;
}

IoReactivexProcessorsReplayProcessor_TimedNode *new_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(id value, jlong time) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_TimedNode, initWithId_withLong_, value, time)
}

IoReactivexProcessorsReplayProcessor_TimedNode *create_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(id value, jlong time) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_TimedNode, initWithId_withLong_, value, time)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_TimedNode)

@implementation IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer

- (instancetype)initWithInt:(jint)maxSize {
  IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(self, maxSize);
  return self;
}

- (void)trim {
  if (size_ > maxSize_) {
    size_--;
    IoReactivexProcessorsReplayProcessor_Node *h = JreLoadVolatileId(&head_);
    JreVolatileStrongAssign(&head_, [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h)) get]);
  }
}

- (void)nextWithId:(id)value {
  IoReactivexProcessorsReplayProcessor_Node *n = create_IoReactivexProcessorsReplayProcessor_Node_initWithId_(value);
  IoReactivexProcessorsReplayProcessor_Node *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(t)) setWithId:n];
  [self trim];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex {
  JreStrongAssign(&error_, ex);
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  JreAssignVolatileBoolean(&done_, true);
}

- (jboolean)isDone {
  return JreLoadVolatileBoolean(&done_);
}

- (JavaLangThrowable *)getError {
  return error_;
}

- (id)getValue {
  IoReactivexProcessorsReplayProcessor_Node *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexProcessorsReplayProcessor_Node *n = [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h)) get];
    if (n == nil) {
      return h->value_Node_;
    }
    h = n;
  }
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  jint s = 0;
  IoReactivexProcessorsReplayProcessor_Node *h = JreLoadVolatileId(&head_);
  IoReactivexProcessorsReplayProcessor_Node *h0 = h;
  for (; ; ) {
    IoReactivexProcessorsReplayProcessor_Node *next = [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h0)) get];
    if (next == nil) {
      break;
    }
    s++;
    h0 = next;
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
    array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
  }
  for (jint j = 0; j < s; j++) {
    h = [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h)) get];
    IOSObjectArray_Set(nil_chk(array), j, ((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h))->value_Node_);
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
    IOSObjectArray_Set(array, s, nil);
  }
  return array;
}

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs {
  if ([((IoReactivexProcessorsReplayProcessor_ReplaySubscription *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = rs->actual_;
  IoReactivexProcessorsReplayProcessor_Node *index = (IoReactivexProcessorsReplayProcessor_Node *) cast_chk(rs->index_, [IoReactivexProcessorsReplayProcessor_Node class]);
  if (index == nil) {
    index = JreLoadVolatileId(&head_);
  }
  jlong e = rs->emitted_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rs->requested_)) get];
    while (e != r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      IoReactivexProcessorsReplayProcessor_Node *next = [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(index)) get];
      jboolean empty = next == nil;
      if (d && empty) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(next))->value_Node_];
      e++;
      index = next;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d && [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(index)) get] == nil) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
    }
    JreStrongAssign(&rs->index_, index);
    rs->emitted_ = e;
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  jint s = 0;
  IoReactivexProcessorsReplayProcessor_Node *h = JreLoadVolatileId(&head_);
  while (s != JavaLangInteger_MAX_VALUE) {
    IoReactivexProcessorsReplayProcessor_Node *next = [((IoReactivexProcessorsReplayProcessor_Node *) nil_chk(h)) get];
    if (next == nil) {
      break;
    }
    s++;
    h = next;
  }
  return s;
}

- (void)__javaClone:(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  JreReleaseVolatile(&head_);
  RELEASE_(tail_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(trim);
  methods[2].selector = @selector(nextWithId:);
  methods[3].selector = @selector(errorWithJavaLangThrowable:);
  methods[4].selector = @selector(complete);
  methods[5].selector = @selector(isDone);
  methods[6].selector = @selector(getError);
  methods[7].selector = @selector(getValue);
  methods[8].selector = @selector(getValuesWithNSObjectArray:);
  methods[9].selector = @selector(replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  methods[10].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "LIoReactivexProcessorsReplayProcessor_Node;", .constantValue.asLong = 0, 0x40, -1, -1, 13, -1 },
    { "tail_", "LIoReactivexProcessorsReplayProcessor_Node;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "replay", "LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)V", "Lio/reactivex/processors/ReplayProcessor$Node<TT;>;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/processors/ReplayProcessor$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer = { "SizeBoundReplayBuffer", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 11, 6, 14, -1, -1, 15, -1 };
  return &_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer;
}

@end

void IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *self, jint maxSize) {
  NSObject_init(self);
  self->maxSize_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(maxSize, @"maxSize");
  IoReactivexProcessorsReplayProcessor_Node *h = create_IoReactivexProcessorsReplayProcessor_Node_initWithId_(nil);
  JreStrongAssign(&self->tail_, h);
  JreVolatileStrongAssign(&self->head_, h);
}

IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *new_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer, initWithInt_, maxSize)
}

IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *create_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer, initWithInt_, maxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer)

@implementation IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, maxSize, maxAge, unit, scheduler);
  return self;
}

- (void)trim {
  if (size_ > maxSize_) {
    size_--;
    IoReactivexProcessorsReplayProcessor_TimedNode *h = JreLoadVolatileId(&head_);
    JreVolatileStrongAssign(&head_, [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get]);
  }
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexProcessorsReplayProcessor_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    if (next->time_ > limit) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    h = next;
  }
}

- (void)trimFinal {
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexProcessorsReplayProcessor_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    if (next->time_ > limit) {
      JreVolatileStrongAssign(&head_, h);
      break;
    }
    h = next;
  }
}

- (void)nextWithId:(id)value {
  IoReactivexProcessorsReplayProcessor_TimedNode *n = create_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(value, [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_]);
  IoReactivexProcessorsReplayProcessor_TimedNode *t = tail_;
  JreStrongAssign(&tail_, n);
  size_++;
  [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(t)) setWithId:n];
  [self trim];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex {
  [self trimFinal];
  JreStrongAssign(&error_, ex);
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  [self trimFinal];
  JreAssignVolatileBoolean(&done_, true);
}

- (id)getValue {
  IoReactivexProcessorsReplayProcessor_TimedNode *h = JreLoadVolatileId(&head_);
  for (; ; ) {
    IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      break;
    }
    h = next;
  }
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  if (h->time_ < limit) {
    return nil;
  }
  return h->value_TimedNode_;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  IoReactivexProcessorsReplayProcessor_TimedNode *h = [self getHead];
  jint s = [self sizeWithIoReactivexProcessorsReplayProcessor_TimedNode:h];
  if (s == 0) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
  }
  else {
    if (((IOSObjectArray *) nil_chk(array))->size_ < s) {
      array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
    }
    jint i = 0;
    while (i != s) {
      IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get];
      IOSObjectArray_Set(nil_chk(array), i, ((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(next))->value_TimedNode_);
      i++;
      h = next;
    }
    if (((IOSObjectArray *) nil_chk(array))->size_ > s) {
      IOSObjectArray_Set(array, s, nil);
    }
  }
  return array;
}

- (IoReactivexProcessorsReplayProcessor_TimedNode *)getHead {
  IoReactivexProcessorsReplayProcessor_TimedNode *index = JreLoadVolatileId(&head_);
  jlong limit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(index)) get];
  while (next != nil) {
    jlong ts = next->time_;
    if (ts > limit) {
      break;
    }
    index = next;
    next = [index get];
  }
  return index;
}

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs {
  if ([((IoReactivexProcessorsReplayProcessor_ReplaySubscription *) nil_chk(rs)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = rs->actual_;
  IoReactivexProcessorsReplayProcessor_TimedNode *index = (IoReactivexProcessorsReplayProcessor_TimedNode *) cast_chk(rs->index_, [IoReactivexProcessorsReplayProcessor_TimedNode class]);
  if (index == nil) {
    index = [self getHead];
  }
  jlong e = rs->emitted_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rs->requested_)) get];
    while (e != r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(index)) get];
      jboolean empty = next == nil;
      if (d && empty) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(next))->value_TimedNode_];
      e++;
      index = next;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&rs->cancelled_)) {
        JreStrongAssign(&rs->index_, nil);
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d && [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(index)) get] == nil) {
        JreStrongAssign(&rs->index_, nil);
        JreAssignVolatileBoolean(&rs->cancelled_, true);
        JavaLangThrowable *ex = error_;
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        return;
      }
    }
    JreStrongAssign(&rs->index_, index);
    rs->emitted_ = e;
    missed = [rs addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jint)size {
  return [self sizeWithIoReactivexProcessorsReplayProcessor_TimedNode:[self getHead]];
}

- (jint)sizeWithIoReactivexProcessorsReplayProcessor_TimedNode:(IoReactivexProcessorsReplayProcessor_TimedNode *)h {
  jint s = 0;
  while (s != JavaLangInteger_MAX_VALUE) {
    IoReactivexProcessorsReplayProcessor_TimedNode *next = [((IoReactivexProcessorsReplayProcessor_TimedNode *) nil_chk(h)) get];
    if (next == nil) {
      break;
    }
    s++;
    h = next;
  }
  return s;
}

- (JavaLangThrowable *)getError {
  return error_;
}

- (jboolean)isDone {
  return JreLoadVolatileBoolean(&done_);
}

- (void)__javaClone:(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  JreReleaseVolatile(&head_);
  RELEASE_(tail_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LIoReactivexProcessorsReplayProcessor_TimedNode;", 0x0, -1, -1, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(trim);
  methods[2].selector = @selector(trimFinal);
  methods[3].selector = @selector(nextWithId:);
  methods[4].selector = @selector(errorWithJavaLangThrowable:);
  methods[5].selector = @selector(complete);
  methods[6].selector = @selector(getValue);
  methods[7].selector = @selector(getValuesWithNSObjectArray:);
  methods[8].selector = @selector(getHead);
  methods[9].selector = @selector(replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(sizeWithIoReactivexProcessorsReplayProcessor_TimedNode:);
  methods[12].selector = @selector(getError);
  methods[13].selector = @selector(isDone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "LIoReactivexProcessorsReplayProcessor_TimedNode;", .constantValue.asLong = 0, 0x40, -1, -1, 17, -1 },
    { "tail_", "LIoReactivexProcessorsReplayProcessor_TimedNode;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "()Lio/reactivex/processors/ReplayProcessor$TimedNode<TT;>;", "replay", "LIoReactivexProcessorsReplayProcessor_ReplaySubscription;", "(Lio/reactivex/processors/ReplayProcessor$ReplaySubscription<TT;>;)V", "size", "LIoReactivexProcessorsReplayProcessor_TimedNode;", "(Lio/reactivex/processors/ReplayProcessor$TimedNode<TT;>;)I", "Lio/reactivex/processors/ReplayProcessor$TimedNode<TT;>;", "LIoReactivexProcessorsReplayProcessor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/processors/ReplayProcessor$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer = { "SizeAndTimeBoundReplayBuffer", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x18, 14, 9, 18, -1, -1, 19, -1 };
  return &_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer;
}

@end

void IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *self, jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  NSObject_init(self);
  self->maxSize_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(maxSize, @"maxSize");
  self->maxAge_ = IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithLong_withNSString_(maxAge, @"maxAge");
  JreStrongAssign(&self->unit_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(unit, @"unit is null"));
  JreStrongAssign(&self->scheduler_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(scheduler, @"scheduler is null"));
  IoReactivexProcessorsReplayProcessor_TimedNode *h = create_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(nil, 0LL);
  JreStrongAssign(&self->tail_, h);
  JreVolatileStrongAssign(&self->head_, h);
}

IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *new_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, maxSize, maxAge, unit, scheduler)
}

IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *create_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, maxSize, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer)
