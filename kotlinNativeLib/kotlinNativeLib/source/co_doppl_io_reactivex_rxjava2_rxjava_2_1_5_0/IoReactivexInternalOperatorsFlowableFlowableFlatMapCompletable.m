//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_serialVersionUID 8443155186132538303LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_serialVersionUID 8606673141535671828LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors
                                    withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, source, mapper, delayErrors, maxConcurrency);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)observer {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(observer, mapper_, delayErrors_, maxConcurrency_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;ZI", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;ZI)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable = { "FlowableFlatMapCompletable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayErrors, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayErrors, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)observer
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                         withBoolean:(jboolean)delayErrors
                                             withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, observer, mapper, delayErrors, maxConcurrency);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    jint m = maxConcurrency_;
    if (m == JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:m];
    }
  }
}

- (void)onNextWithId:(id)value {
  id<IoReactivexCompletableSource> cs;
  @try {
    cs = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The mapper returned a null CompletableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  [self getAndIncrement];
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *inner = create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_(self);
  if (!JreLoadVolatileBoolean(&cancelled_) && [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:inner]) {
    [((id<IoReactivexCompletableSource>) nil_chk(cs)) subscribeWithIoReactivexCompletableObserver:inner];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    if (delayErrors_) {
      if ([self decrementAndGet] == 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
      else {
        if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
        }
      }
    }
    else {
      [self cancel];
      if ([self getAndSetWithInt:0] > 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([self decrementAndGet] == 0) {
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
    if (ex != nil) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    }
    else {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
    }
  }
  else {
    if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
}

- (void)requestWithLong:(jlong)n {
}

- (id __nullable)poll {
  return nil;
}

- (jboolean)isEmpty {
  return true;
}

- (void)clear {
}

- (jint)requestFusionWithInt:(jint)mode {
  return mode & IoReactivexInternalFuseableQueueFuseable_ASYNC;
}

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *)inner {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onComplete];
}

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *)inner
                                                                                                              withJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onErrorWithJavaLangThrowable:e];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(errors_);
  RELEASE_(mapper_);
  RELEASE_(set_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 11, 12, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(poll);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(requestFusionWithInt:);
  methods[11].selector = @selector(innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:);
  methods[12].selector = @selector(innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;ZI", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;ZI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "LJavaLangException;", "()TT;", "requestFusion", "I", "innerComplete", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer;", "innerError", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer;LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber = { "FlatMapCompletableMainSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 9, 21, 16, -1, 22, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *self, id<OrgReactivestreamsSubscriber> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, observer);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
  self->maxConcurrency_ = maxConcurrency;
  [self lazySetWithInt:1];
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_, observer, mapper, delayErrors, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_, observer, mapper, delayErrors, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onComplete {
  [this$0_ innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [this$0_ innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer:self withJavaLangThrowable:e];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onComplete);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer = { "InnerConsumer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 6, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *self, IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_FlatMapCompletableMainSubscriber_InnerConsumer)
