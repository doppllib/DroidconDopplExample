//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservablePublish
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservablePublish

#if !defined (IoReactivexInternalOperatorsObservableObservablePublish_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublish))
#define IoReactivexInternalOperatorsObservableObservablePublish_

#define RESTRICT_IoReactivexObservablesConnectableObservable 1
#define INCLUDE_IoReactivexObservablesConnectableObservable 1
#include "IoReactivexObservablesConnectableObservable.h"

#define RESTRICT_IoReactivexInternalFuseableHasUpstreamObservableSource 1
#define INCLUDE_IoReactivexInternalFuseableHasUpstreamObservableSource 1
#include "IoReactivexInternalFuseableHasUpstreamObservableSource.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservablePublish : IoReactivexObservablesConnectableObservable < IoReactivexInternalFuseableHasUpstreamObservableSource > {
 @public
  id<IoReactivexObservableSource> source_;
  JavaUtilConcurrentAtomicAtomicReference *current_;
  id<IoReactivexObservableSource> onSubscribe_;
}

#pragma mark Public

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection;

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source;

- (id<IoReactivexObservableSource>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublish)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish, source_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish, onSubscribe_, id<IoReactivexObservableSource>)

FOUNDATION_EXPORT IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservablePublish_createWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublish)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver))
#define IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;

@interface IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *current_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  JavaUtilConcurrentAtomicAtomicBoolean *shouldConnect_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current;

- (jboolean)addWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *)producer;

- (void)removeWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *)producer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, shouldConnect_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, s_, JavaUtilConcurrentAtomicAtomicReference *)

inline IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *self, JavaUtilConcurrentAtomicAtomicReference *current);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *new_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *create_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable))
#define IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> child_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)child;

- (void)setParentWithIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver:(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *)p;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable, child_, id<IoReactivexObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *self, id<IoReactivexObserver> child);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *new_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *create_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> child);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource))
#define IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_

#define RESTRICT_IoReactivexObservableSource 1
#define INCLUDE_IoReactivexObservableSource 1
#include "IoReactivexObservableSource.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservablePublish_PublishSource : NSObject < IoReactivexObservableSource >

#pragma mark Public

- (void)subscribeWithIoReactivexObserver:(id<IoReactivexObserver>)child;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)curr;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *self, JavaUtilConcurrentAtomicAtomicReference *curr);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *new_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *curr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *create_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *curr);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservablePublish")
