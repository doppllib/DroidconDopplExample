//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableTimeInterval
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableTimeInterval

#if !defined (IoReactivexInternalOperatorsObservableObservableTimeInterval_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTimeInterval))
#define IoReactivexInternalOperatorsObservableObservableTimeInterval_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@class IoReactivexSchedulersTimed;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableTimeInterval : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
  JavaUtilConcurrentTimeUnit *unit_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSchedulersTimed *)blockingFirst;

- (IoReactivexSchedulersTimed *)blockingFirstWithId:(IoReactivexSchedulersTimed *)arg0;

- (IoReactivexSchedulersTimed *)blockingLast;

- (IoReactivexSchedulersTimed *)blockingLastWithId:(IoReactivexSchedulersTimed *)arg0;

- (IoReactivexSchedulersTimed *)blockingSingle;

- (IoReactivexSchedulersTimed *)blockingSingleWithId:(IoReactivexSchedulersTimed *)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTimeInterval)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval, unit_, JavaUtilConcurrentTimeUnit *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTimeInterval_initWithIoReactivexObservableSource_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableTimeInterval *self, id<IoReactivexObservableSource> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeInterval *new_IoReactivexInternalOperatorsObservableObservableTimeInterval_initWithIoReactivexObservableSource_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeInterval *create_IoReactivexInternalOperatorsObservableObservableTimeInterval_initWithIoReactivexObservableSource_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTimeInterval)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver))
#define IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jlong lastTime_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver_initWithIoReactivexObserver_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver *self, id<IoReactivexObserver> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver *new_IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver_initWithIoReactivexObserver_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver *create_IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver_initWithIoReactivexObserver_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTimeInterval_TimeIntervalObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeInterval")
