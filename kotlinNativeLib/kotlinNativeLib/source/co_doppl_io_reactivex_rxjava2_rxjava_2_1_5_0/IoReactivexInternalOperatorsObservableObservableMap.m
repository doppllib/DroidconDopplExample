//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicFuseableObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableMap.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableMap

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)function {
  IoReactivexInternalOperatorsObservableObservableMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(self, source, function);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableMap_MapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(t, function_)];
}

- (void)dealloc {
  RELEASE_(function_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "function_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+TU;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Lio/reactivex/functions/Function<-TT;+TU;>;", "LIoReactivexInternalOperatorsObservableObservableMap_MapObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableMap = { "ObservableMap", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableMap;
}

@end

void IoReactivexInternalOperatorsObservableObservableMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableMap *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> function) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->function_, function);
}

IoReactivexInternalOperatorsObservableObservableMap *new_IoReactivexInternalOperatorsObservableObservableMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> function) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, function)
}

IoReactivexInternalOperatorsObservableObservableMap *create_IoReactivexInternalOperatorsObservableObservableMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> function) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, function)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableMap)

@implementation IoReactivexInternalOperatorsObservableObservableMap_MapObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsObservableObservableMap_MapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(self, actual, mapper);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:nil];
    return;
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.");
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:v];
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  id t = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) poll];
  return t != nil ? IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.") : nil;
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;", "(Lio/reactivex/Observer<-TU;>;Lio/reactivex/functions/Function<-TT;+TU;>;)V", "onNext", "LNSObject;", "(TT;)V", "requestFusion", "I", "LJavaLangException;", "()TU;", "Lio/reactivex/functions/Function<-TT;+TU;>;", "LIoReactivexInternalOperatorsObservableObservableMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicFuseableObserver<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableMap_MapObserver = { "MapObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableMap_MapObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableMap_MapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableMap_MapObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalObserversBasicFuseableObserver_initWithIoReactivexObserver_(self, actual);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsObservableObservableMap_MapObserver *new_IoReactivexInternalOperatorsObservableObservableMap_MapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableMap_MapObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

IoReactivexInternalOperatorsObservableObservableMap_MapObserver *create_IoReactivexInternalOperatorsObservableObservableMap_MapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableMap_MapObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableMap_MapObserver)
