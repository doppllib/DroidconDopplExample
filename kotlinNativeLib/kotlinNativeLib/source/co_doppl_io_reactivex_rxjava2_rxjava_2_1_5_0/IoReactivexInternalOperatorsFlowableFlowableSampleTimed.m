//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSampleTimed.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_serialVersionUID -3517602651313910099LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_serialVersionUID -7139995637533111443LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_serialVersionUID -7139995637533111443LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableSampleTimed

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)period
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withBoolean:(jboolean)emitLast {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(self, source, period, unit, scheduler, emitLast);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexSubscribersSerializedSubscriber *serial = create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s);
  if (emitLast_) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(serial, period_, unit_, scheduler_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(serial, period_, unit_, scheduler_)];
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "period_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "emitLast_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;Z", "(Lio/reactivex/Flowable<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast;LIoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSampleTimed = { "FlowableSampleTimed", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSampleTimed;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed *self, IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->period_ = period;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->emitLast_ = emitLast;
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_, source, period, unit, scheduler, emitLast)
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_, source, period, unit, scheduler, emitLast)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSampleTimed)

@implementation IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, period, unit, scheduler);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(timer_)) replaceWithIoReactivexDisposablesDisposable:[((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:self withLong:period_ withLong:period_ withJavaUtilConcurrentTimeUnit:unit_]];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  [self lazySetWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self cancelTimer];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [self cancelTimer];
  [self complete];
}

- (void)cancelTimer {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
  }
}

- (void)cancel {
  [self cancelTimer];
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (void)emit {
  id value = [self getAndSetWithId:nil];
  if (value != nil) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    if (r != 0LL) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, 1);
    }
    else {
      [self cancel];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Couldn't emit value due to lack of requests!")];
    }
  }
}

- (void)complete {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(requested_);
  RELEASE_(timer_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancelTimer);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(emit);
  methods[9].selector = @selector(complete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "period_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timer_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableSampleTimed;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber = { "SampleTimedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 10, 8, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->timer_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
  JreStrongAssign(&self->actual_, actual);
  self->period_ = period;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, period, unit, scheduler);
  return self;
}

- (void)complete {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)run {
  [self emit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(complete);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "LIoReactivexInternalOperatorsFlowableFlowableSampleTimed;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast = { "SampleTimedNoLast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, period, unit, scheduler);
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, period, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, period, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast)

@implementation IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, period, unit, scheduler);
  return self;
}

- (void)complete {
  [self emit];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] == 0) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) incrementAndGet] == 2) {
    [self emit];
    if ([wip_ decrementAndGet] == 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
    }
  }
}

- (void)dealloc {
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(complete);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "LIoReactivexInternalOperatorsFlowableFlowableSampleTimed;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast = { "SampleTimedEmitLast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, period, unit, scheduler);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, period, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, period, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast)
