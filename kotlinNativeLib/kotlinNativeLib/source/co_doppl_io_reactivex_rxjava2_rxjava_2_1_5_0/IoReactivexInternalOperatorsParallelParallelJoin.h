//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelJoin
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelJoin
#ifdef INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError
#define INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription
#define INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase 1
#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin))
#define IoReactivexInternalOperatorsParallelParallelJoin_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@class IoReactivexParallelParallelFlowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin : IoReactivexFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  jint prefetch_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                                                    withInt:(jint)prefetch
                                                withBoolean:(jboolean)delayErrors;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin, source_, IoReactivexParallelParallelFlowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexInternalOperatorsParallelParallelJoin *self, IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin *new_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin *create_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IOSObjectArray *subscribers_;
  IoReactivexInternalUtilAtomicThrowable *errors_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jboolean cancelled_;
  JavaUtilConcurrentAtomicAtomicInteger *done_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch;

- (void)cancelAll;

- (void)cleanup;

- (void)drain;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, subscribers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, errors_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, done_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_

@class IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;
@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription : IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch;

- (void)drain;

- (void)drainLoop;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_

@class IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;
@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError : IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch;

- (void)drain;

- (void)drainLoop;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase;
@class JavaLangThrowable;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber > {
 @public
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent_;
  jint prefetch_;
  jint limit_;
  jlong produced_;
  volatile_id queue_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (jboolean)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (void)requestOne;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase:(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *)parent
                                                                                      withInt:(jint)prefetch;

- (id<IoReactivexInternalFuseableSimplePlainQueue>)getQueue;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, parent_, IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, queue_, id<IoReactivexInternalFuseableSimplePlainQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *self, IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin")
