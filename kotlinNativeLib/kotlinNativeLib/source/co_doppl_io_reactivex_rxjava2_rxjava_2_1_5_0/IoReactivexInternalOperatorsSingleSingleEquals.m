//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleEquals.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsSingleSingleEquals

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)first
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)second {
  IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(self, first, second);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  IOSObjectArray *values = [IOSObjectArray arrayWithObjects:(id[]){ nil, nil } count:2 type:NSObject_class_()];
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  [((id<IoReactivexSingleSource>) nil_chk(first_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(0, set, values, s, count)];
  [((id<IoReactivexSingleSource>) nil_chk(second_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(1, set, values, s, count)];
}

- (void)dealloc {
  RELEASE_(first_);
  RELEASE_(second_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "second_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<+TT;>;Lio/reactivex/SingleSource<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;)V", "Lio/reactivex/SingleSource<+TT;>;", "LIoReactivexInternalOperatorsSingleSingleEquals_InnerObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleEquals = { "SingleEquals", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleEquals;
}

@end

void IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleEquals *self, id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->first_, first);
  JreStrongAssign(&self->second_, second);
}

IoReactivexInternalOperatorsSingleSingleEquals *new_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleEquals, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, first, second)
}

IoReactivexInternalOperatorsSingleSingleEquals *create_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleEquals, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, first, second)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleEquals)

@implementation IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver

- (instancetype)initWithInt:(jint)index
withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
          withNSObjectArray:(IOSObjectArray *)values
withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)count {
  IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(self, index, set, values, s, count);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  IOSObjectArray_Set(nil_chk(values_), index_, value);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(count_)) incrementAndGet] == 2) {
    [((id<IoReactivexSingleObserver>) nil_chk(s_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(IOSObjectArray_Get(values_, 0), IOSObjectArray_Get(values_, 1)))];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  for (; ; ) {
    jint state = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(count_)) get];
    if (state >= 2) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
      return;
    }
    if ([count_ compareAndSetWithInt:state withInt:2]) {
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
      [((id<IoReactivexSingleObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:e];
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(set_);
  RELEASE_(values_);
  RELEASE_(s_);
  RELEASE_(count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withIoReactivexDisposablesCompositeDisposable:withNSObjectArray:withIoReactivexSingleObserver:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "values_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILIoReactivexDisposablesCompositeDisposable;[LNSObject;LIoReactivexSingleObserver;LJavaUtilConcurrentAtomicAtomicInteger;", "(ILio/reactivex/disposables/CompositeDisposable;[Ljava/lang/Object;Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;Ljava/util/concurrent/atomic/AtomicInteger;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;", "LIoReactivexInternalOperatorsSingleSingleEquals;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x8, 4, 5, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *self, jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count) {
  NSObject_init(self);
  self->index_ = index;
  JreStrongAssign(&self->set_, set);
  JreStrongAssign(&self->values_, values);
  JreStrongAssign(&self->s_, s);
  JreStrongAssign(&self->count_, count);
}

IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *new_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_, index, set, values, s, count)
}

IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *create_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_, index, set, values, s, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver)
