//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFlowablesConnectableFlowable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableReplay.h"
#include "IoReactivexInternalSubscribersSubscriberResourceWrapper.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersTimed.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsFlowableFlowableReplay ()

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)onSubscribe
                            withIoReactivexFlowable:(IoReactivexFlowable *)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferFactory;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableReplay *self, id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableReplay *new_IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableReplay *create_IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory);

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_serialVersionUID 7224554242710036740LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_serialVersionUID -4453897557930727610LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer : NSObject

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_serialVersionUID 7063189396499112664LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_Node_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_Node_serialVersionUID 245354315435971818LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_Node, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_serialVersionUID 2346567790059478686LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n);

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_removeFirst(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self);

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n);

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_serialVersionUID -5898283885385201806LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_serialVersionUID 3457957419649567404LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher () {
 @public
  id<JavaUtilConcurrentCallable> connectableFactory_;
  id<IoReactivexFunctionsFunction> selector_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher, connectableFactory_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher, selector_, id<IoReactivexFunctionsFunction>)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer () {
 @public
  IoReactivexInternalSubscribersSubscriberResourceWrapper *srw_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer, srw_, IoReactivexInternalSubscribersSubscriberResourceWrapper *)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay () {
 @public
  IoReactivexFlowablesConnectableFlowable *co_;
  IoReactivexFlowable *observable_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay, co_, IoReactivexFlowablesConnectableFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay, observable_, IoReactivexFlowable *)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask () {
 @public
  jint bufferSize_;
}

@end

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask () {
 @public
  jint bufferSize_;
  jlong maxAge_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask, scheduler_, IoReactivexScheduler *)

@interface IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *curr_;
  id<JavaUtilConcurrentCallable> bufferFactory_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher, curr_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher, bufferFactory_, id<JavaUtilConcurrentCallable>)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableReplay)

id<JavaUtilConcurrentCallable> IoReactivexInternalOperatorsFlowableFlowableReplay_DEFAULT_UNBOUNDED_FACTORY;

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay

+ (id<JavaUtilConcurrentCallable>)DEFAULT_UNBOUNDED_FACTORY {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_DEFAULT_UNBOUNDED_FACTORY;
}

+ (IoReactivexFlowable *)multicastSelectorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)connectableFactory
                                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_multicastSelectorWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(connectableFactory, selector);
}

+ (IoReactivexFlowablesConnectableFlowable *)observeOnWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)co
                                                                         withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_observeOnWithIoReactivexFlowablesConnectableFlowable_withIoReactivexScheduler_(co, scheduler);
}

+ (IoReactivexFlowablesConnectableFlowable *)createFromWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createFromWithIoReactivexFlowable_(source);
}

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                   withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withInt_(source, bufferSize);
}

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                  withLong:(jlong)maxAge
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                  withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(source, maxAge, unit, scheduler);
}

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                  withLong:(jlong)maxAge
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                  withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                                   withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(source, maxAge, unit, scheduler, bufferSize);
}

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                            withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferFactory {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(source, bufferFactory);
}

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)onSubscribe
                            withIoReactivexFlowable:(IoReactivexFlowable *)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferFactory {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(self, onSubscribe, source, current, bufferFactory);
  return self;
}

- (id<OrgReactivestreamsPublisher>)source {
  return source_;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(onSubscribe_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)dispose {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) lazySetWithId:nil];
}

- (jboolean)isDisposed {
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
  return d == nil || [d isDisposed];
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  jboolean doConnect;
  IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *ps;
  for (; ; ) {
    ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
    if (ps == nil || [ps isDisposed]) {
      id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer> buf;
      @try {
        buf = [((id<JavaUtilConcurrentCallable>) nil_chk(bufferFactory_)) call];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
      }
      IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *u = create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(buf);
      if (![current_ compareAndSetWithId:ps withId:u]) {
        continue;
      }
      ps = u;
    }
    doConnect = (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ps->shouldConnect_)) get] && [ps->shouldConnect_ compareAndSetWithBoolean:false withBoolean:true]);
    break;
  }
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(connection)) acceptWithId:ps];
  }
  @catch (JavaLangThrowable *ex) {
    if (doConnect) {
      [ps->shouldConnect_ compareAndSetWithBoolean:true withBoolean:false];
    }
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  if (doConnect) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:ps];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(current_);
  RELEASE_(bufferFactory_);
  RELEASE_(onSubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexFlowable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 9, 10, -1, 11, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 9, 12, -1, 13, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 9, 14, -1, 15, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x8, 9, 16, -1, 17, -1, -1 },
    { NULL, NULL, 0x2, -1, 18, -1, 19, -1, -1 },
    { NULL, "LOrgReactivestreamsPublisher;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x4, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(multicastSelectorWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(observeOnWithIoReactivexFlowablesConnectableFlowable:withIoReactivexScheduler:);
  methods[2].selector = @selector(createFromWithIoReactivexFlowable:);
  methods[3].selector = @selector(createWithIoReactivexFlowable:withInt:);
  methods[4].selector = @selector(createWithIoReactivexFlowable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[5].selector = @selector(createWithIoReactivexFlowable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[6].selector = @selector(createWithIoReactivexFlowable:withJavaUtilConcurrentCallable:);
  methods[7].selector = @selector(initWithOrgReactivestreamsPublisher:withIoReactivexFlowable:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCallable:);
  methods[8].selector = @selector(source);
  methods[9].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[10].selector = @selector(dispose);
  methods[11].selector = @selector(isDisposed);
  methods[12].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 28, -1 },
    { "bufferFactory_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 29, -1 },
    { "onSubscribe_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 30, -1 },
    { "DEFAULT_UNBOUNDED_FACTORY", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "multicastSelector", "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;", "<U:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<+Lio/reactivex/flowables/ConnectableFlowable<TU;>;>;Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<TU;>;+Lorg/reactivestreams/Publisher<TR;>;>;)Lio/reactivex/Flowable<TR;>;", "observeOn", "LIoReactivexFlowablesConnectableFlowable;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(Lio/reactivex/flowables/ConnectableFlowable<TT;>;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "createFrom", "LIoReactivexFlowable;", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<+TT;>;)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "create", "LIoReactivexFlowable;I", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;I)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LIoReactivexFlowable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LIoReactivexFlowable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LIoReactivexFlowable;LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<+Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LOrgReactivestreamsPublisher;LIoReactivexFlowable;LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCallable;", "(Lorg/reactivestreams/Publisher<TT;>;Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;>;Ljava/util/concurrent/Callable<+Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;)V", "()Lorg/reactivestreams/Publisher<TT;>;", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "Lio/reactivex/Flowable<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;>;", "Ljava/util/concurrent/Callable<+Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;", "Lorg/reactivestreams/Publisher<TT;>;", &IoReactivexInternalOperatorsFlowableFlowableReplay_DEFAULT_UNBOUNDED_FACTORY, "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber;LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;LIoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer;LIoReactivexInternalOperatorsFlowableFlowableReplay_Node;LIoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer;LIoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer;LIoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer;LIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher;LIoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay;LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask;LIoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask;LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher;LIoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory;", "<T:Ljava/lang/Object;>Lio/reactivex/flowables/ConnectableFlowable<TT;>;Lio/reactivex/internal/fuseable/HasUpstreamPublisher<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay = { "FlowableReplay", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 13, 5, -1, 32, -1, 33, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableReplay class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableReplay_DEFAULT_UNBOUNDED_FACTORY, new_IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableReplay)
  }
}

@end

IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_multicastSelectorWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  return IoReactivexFlowable_unsafeCreateWithOrgReactivestreamsPublisher_(create_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(connectableFactory, selector));
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_observeOnWithIoReactivexFlowablesConnectableFlowable_withIoReactivexScheduler_(IoReactivexFlowablesConnectableFlowable *co, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  IoReactivexFlowable *observable = [((IoReactivexFlowablesConnectableFlowable *) nil_chk(co)) observeOnWithIoReactivexScheduler:scheduler];
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowablesConnectableFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay_initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_(co, observable));
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_createFromWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(source, IoReactivexInternalOperatorsFlowableFlowableReplay_DEFAULT_UNBOUNDED_FACTORY);
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  if (bufferSize == JavaLangInteger_MAX_VALUE) {
    return IoReactivexInternalOperatorsFlowableFlowableReplay_createFromWithIoReactivexFlowable_(source);
  }
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(source, create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask_initWithInt_(bufferSize));
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexFlowable *source, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(source, maxAge, unit, scheduler, JavaLangInteger_MAX_VALUE);
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(IoReactivexFlowable *source, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  return IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(source, create_IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(bufferSize, maxAge, unit, scheduler));
}

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowableReplay_createWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> bufferFactory) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_initialize();
  JavaUtilConcurrentAtomicAtomicReference *curr = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<OrgReactivestreamsPublisher> onSubscribe = create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(curr, bufferFactory);
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowablesConnectableFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(onSubscribe, source, curr, bufferFactory));
}

void IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableReplay *self, id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory) {
  IoReactivexFlowablesConnectableFlowable_init(self);
  JreStrongAssign(&self->onSubscribe_, onSubscribe);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->current_, current);
  JreStrongAssign(&self->bufferFactory_, bufferFactory);
}

IoReactivexInternalOperatorsFlowableFlowableReplay *new_IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay, initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_, onSubscribe, source, current, bufferFactory)
}

IoReactivexInternalOperatorsFlowableFlowableReplay *create_IoReactivexInternalOperatorsFlowableFlowableReplay_initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> onSubscribe, IoReactivexFlowable *source, JavaUtilConcurrentAtomicAtomicReference *current, id<JavaUtilConcurrentCallable> bufferFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay, initWithOrgReactivestreamsPublisher_withIoReactivexFlowable_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_, onSubscribe, source, current, bufferFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber)

IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED;

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED;
}

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer:(id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>)buffer {
  IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(self, buffer);
  return self;
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED;
}

- (void)dispose {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) setWithId:IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED];
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *)producer {
  if (producer == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (c == IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    IOSObjectArray *u = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, len);
    IOSObjectArray_Set(u, len, producer);
    if ([subscribers_ compareAndSetWithId:c withId:u]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *)p {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    if (len == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if ([((IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *) nil_chk(IOSObjectArray_Get(c, i))) isEqual:p]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *u;
    if (len == 1) {
      u = IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY;
    }
    else {
      u = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, j + 1, u, j, len - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:c withId:u]) {
      return;
    }
  }
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)p {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, p)) {
    [self manageRequests];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *rp = *b__++;
        [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(buffer_)) replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:rp];
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  if (!done_) {
    [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(buffer_)) nextWithId:t];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *rp = *b__++;
        [buffer_ replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:rp];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(buffer_)) errorWithJavaLangThrowable:e];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED];
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *rp = *b__++;
        [buffer_ replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:rp];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(buffer_)) complete];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED];
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *rp = *b__++;
        [buffer_ replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:rp];
      }
    }
  }
}

- (void)manageRequests {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(management_)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  for (; ; ) {
    if ([self isDisposed]) {
      return;
    }
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jlong ri = maxChildRequested_;
    jlong maxTotalRequests = ri;
    {
      IOSObjectArray *a__ = a;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *rp = *b__++;
        maxTotalRequests = JavaLangMath_maxWithLong_withLong_(maxTotalRequests, [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *) nil_chk(rp))->totalRequested_)) get]);
      }
    }
    jlong ur = maxUpstreamRequested_;
    id<OrgReactivestreamsSubscription> p = [self get];
    jlong diff = maxTotalRequests - ri;
    if (diff != 0LL) {
      maxChildRequested_ = maxTotalRequests;
      if (p != nil) {
        if (ur != 0LL) {
          maxUpstreamRequested_ = 0LL;
          [p requestWithLong:ur + diff];
        }
        else {
          [p requestWithLong:diff];
        }
      }
      else {
        jlong u = ur + diff;
        if (u < 0) {
          u = JavaLangLong_MAX_VALUE;
        }
        maxUpstreamRequested_ = u;
      }
    }
    else if (ur != 0LL && p != nil) {
      maxUpstreamRequested_ = 0LL;
      [p requestWithLong:ur];
    }
    missed = [management_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(subscribers_);
  RELEASE_(shouldConnect_);
  RELEASE_(management_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(addWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:);
  methods[4].selector = @selector(removeWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:);
  methods[5].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[6].selector = @selector(onNextWithId:);
  methods[7].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[8].selector = @selector(onComplete);
  methods[9].selector = @selector(manageRequests);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "shouldConnect_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "management_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxChildRequested_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxUpstreamRequested_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;)V", "add", "LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;", &IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY, &IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber = { "ReplaySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 10, 10, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *self, id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer> buffer) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->buffer_, buffer);
  JreStrongAssignAndConsume(&self->management_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_EMPTY));
  JreStrongAssignAndConsume(&self->shouldConnect_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer> buffer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_, buffer)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer> buffer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_, buffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription

+ (jlong)CANCELLED {
  return IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED;
}

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber:(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *)parent
                                                           withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_(self, parent, child);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    for (; ; ) {
      jlong r = [self get];
      if (r == IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED) {
        return;
      }
      if (r >= 0LL && n == 0) {
        return;
      }
      jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
      if ([self compareAndSetWithLong:r withLong:u]) {
        IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(totalRequested_, n);
        [((IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *) nil_chk(parent_)) manageRequests];
        [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(parent_->buffer_)) replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:self];
        return;
      }
    }
  }
}

- (jlong)producedWithLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_producedCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
}

- (jboolean)isDisposed {
  return [self get] == IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED;
}

- (void)cancel {
  [self dispose];
}

- (void)dispose {
  if ([self getAndSetWithLong:IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED] != IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED) {
    [((IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *) nil_chk(parent_)) removeWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:self];
    [parent_ manageRequests];
  }
}

- (id)index {
  return index_;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(child_);
  RELEASE_(index_);
  RELEASE_(totalRequested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber:withOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(producedWithLong:);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(cancel);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(index);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "child_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "index_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "totalRequested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "CANCELLED", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_CANCELLED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber;LOrgReactivestreamsSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;Lorg/reactivestreams/Subscriber<-TT;>;)V", "request", "J", "produced", "<U:Ljava/lang/Object;>()TU;", "Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription = { "InnerSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 8, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *self, IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *parent, id<OrgReactivestreamsSubscriber> child) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->child_, child);
  JreStrongAssignAndConsume(&self->totalRequested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *new_IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *parent, id<OrgReactivestreamsSubscriber> child) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_, parent, child)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *create_IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *parent, id<OrgReactivestreamsSubscriber> child) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_, parent, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(nextWithId:);
  methods[1].selector = @selector(errorWithJavaLangThrowable:);
  methods[2].selector = @selector(complete);
  methods[3].selector = @selector(replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer = { "ReplayBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x608, 4, 0, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_initWithInt_(self, capacityHint);
  return self;
}

- (void)nextWithId:(id)value {
  [self addWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(value)];
  size_UnboundedReplayBuffer_++;
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [self addWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e)];
  size_UnboundedReplayBuffer_++;
}

- (void)complete {
  [self addWithId:IoReactivexInternalUtilNotificationLite_complete()];
  size_UnboundedReplayBuffer_++;
}

- (void)replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *)output {
  @synchronized(output) {
    if (((IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *) nil_chk(output))->emitting_) {
      output->missed_ = true;
      return;
    }
    output->emitting_ = true;
  }
  id<OrgReactivestreamsSubscriber> child = output->child_;
  for (; ; ) {
    if ([output isDisposed]) {
      return;
    }
    jint sourceIndex = JreLoadVolatileInt(&size_UnboundedReplayBuffer_);
    JavaLangInteger *destinationIndexObject = [output index];
    jint destinationIndex = destinationIndexObject != nil ? [destinationIndexObject intValue] : 0;
    jlong r = [output get];
    jlong r0 = r;
    jlong e = 0LL;
    while (r != 0LL && destinationIndex < sourceIndex) {
      id o = [self getWithInt:destinationIndex];
      @try {
        if (IoReactivexInternalUtilNotificationLite_acceptWithId_withOrgReactivestreamsSubscriber_(o, child)) {
          return;
        }
      }
      @catch (JavaLangThrowable *err) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(err);
        [output dispose];
        if (!IoReactivexInternalUtilNotificationLite_isErrorWithId_(o) && !IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onErrorWithJavaLangThrowable:err];
        }
        return;
      }
      if ([output isDisposed]) {
        return;
      }
      destinationIndex++;
      r--;
      e++;
    }
    if (e != 0LL) {
      JreStrongAssign(&output->index_, JavaLangInteger_valueOfWithInt_(destinationIndex));
      if (r0 != JavaLangLong_MAX_VALUE) {
        [output producedWithLong:e];
      }
    }
    @synchronized(output) {
      if (!output->missed_) {
        output->emitting_ = false;
        return;
      }
      output->missed_ = false;
    }
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(nextWithId:);
  methods[2].selector = @selector(errorWithJavaLangThrowable:);
  methods[3].selector = @selector(complete);
  methods[4].selector = @selector(replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "size_UnboundedReplayBuffer_", "I", .constantValue.asLong = 0, 0x40, 9, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;)V", "size", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/util/ArrayList<Ljava/lang/Object;>;Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer = { "UnboundedReplayBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_initWithInt_(IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer *self, jint capacityHint) {
  JavaUtilArrayList_initWithInt_(self, capacityHint);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer *new_IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer *create_IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_Node

- (instancetype)initWithId:(id)value
                  withLong:(jlong)index {
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(self, value, index);
  return self;
}

- (void)dealloc {
  RELEASE_(value_Node_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_Node_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_Node_", "LNSObject;", .constantValue.asLong = 0, 0x10, 1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;J", "value", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_Node = { "Node", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 1, 3, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_Node;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(IoReactivexInternalOperatorsFlowableFlowableReplay_Node *self, id value, jlong index) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_Node_, value);
  self->index_ = index;
}

IoReactivexInternalOperatorsFlowableFlowableReplay_Node *new_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(id value, jlong index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_Node, initWithId_withLong_, value, index)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_Node *create_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(id value, jlong index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_Node, initWithId_withLong_, value, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_Node)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node:(IoReactivexInternalOperatorsFlowableFlowableReplay_Node *)n {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, n);
}

- (void)removeFirst {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_removeFirst(self);
}

- (void)removeSomeWithInt:(jint)n {
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *head = [self get];
  while (n > 0) {
    head = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(head)) get];
    n--;
    size_--;
  }
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, head);
}

- (void)setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node:(IoReactivexInternalOperatorsFlowableFlowableReplay_Node *)n {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, n);
}

- (void)nextWithId:(id)value {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(value)];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n = create_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(o, ++index_);
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, n);
  [self truncate];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e)];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n = create_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(o, ++index_);
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, n);
  [self truncateFinal];
}

- (void)complete {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_complete()];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n = create_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(o, ++index_);
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, n);
  [self truncateFinal];
}

- (void)replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:(IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *)output {
  @synchronized(output) {
    if (((IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *) nil_chk(output))->emitting_) {
      output->missed_ = true;
      return;
    }
    output->emitting_ = true;
  }
  for (; ; ) {
    if ([output isDisposed]) {
      return;
    }
    jlong r = [output get];
    jboolean unbounded = r == JavaLangLong_MAX_VALUE;
    jlong e = 0LL;
    IoReactivexInternalOperatorsFlowableFlowableReplay_Node *node = [output index];
    if (node == nil) {
      node = [self getHead];
      JreStrongAssign(&output->index_, node);
      IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(output->totalRequested_, ((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(node))->index_);
    }
    while (r != 0) {
      IoReactivexInternalOperatorsFlowableFlowableReplay_Node *v = [node get];
      if (v != nil) {
        id o = [self leaveTransformWithId:v->value_Node_];
        @try {
          if (IoReactivexInternalUtilNotificationLite_acceptWithId_withOrgReactivestreamsSubscriber_(o, output->child_)) {
            JreStrongAssign(&output->index_, nil);
            return;
          }
        }
        @catch (JavaLangThrowable *err) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(err);
          JreStrongAssign(&output->index_, nil);
          [output dispose];
          if (!IoReactivexInternalUtilNotificationLite_isErrorWithId_(o) && !IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(output->child_)) onErrorWithJavaLangThrowable:err];
          }
          return;
        }
        e++;
        r--;
        node = v;
      }
      else {
        break;
      }
      if ([output isDisposed]) {
        return;
      }
    }
    if (e != 0LL) {
      JreStrongAssign(&output->index_, node);
      if (!unbounded) {
        [output producedWithLong:e];
      }
    }
    @synchronized(output) {
      if (!output->missed_) {
        output->emitting_ = false;
        return;
      }
      output->missed_ = false;
    }
  }
}

- (id)enterTransformWithId:(id)value {
  return value;
}

- (id)leaveTransformWithId:(id)value {
  return value;
}

- (void)truncate {
}

- (void)truncateFinal {
}

- (void)collectWithJavaUtilCollection:(id<JavaUtilCollection>)output {
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n = [self getHead];
  for (; ; ) {
    IoReactivexInternalOperatorsFlowableFlowableReplay_Node *next = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(n)) get];
    if (next != nil) {
      id o = next->value_Node_;
      id v = [self leaveTransformWithId:o];
      if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(v) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(v)) {
        break;
      }
      [((id<JavaUtilCollection>) nil_chk(output)) addWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(v)];
      n = next;
    }
    else {
      break;
    }
  }
}

- (jboolean)hasError {
  return ((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(tail_))->value_Node_ != nil && IoReactivexInternalUtilNotificationLite_isErrorWithId_([self leaveTransformWithId:tail_->value_Node_]);
}

- (jboolean)hasCompleted {
  return ((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(tail_))->value_Node_ != nil && IoReactivexInternalUtilNotificationLite_isCompleteWithId_([self leaveTransformWithId:tail_->value_Node_]);
}

- (IoReactivexInternalOperatorsFlowableFlowableReplay_Node *)getHead {
  return [self get];
}

- (void)dealloc {
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x0, 13, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 14, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 15, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsFlowableFlowableReplay_Node;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node:);
  methods[2].selector = @selector(removeFirst);
  methods[3].selector = @selector(removeSomeWithInt:);
  methods[4].selector = @selector(setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node:);
  methods[5].selector = @selector(nextWithId:);
  methods[6].selector = @selector(errorWithJavaLangThrowable:);
  methods[7].selector = @selector(complete);
  methods[8].selector = @selector(replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:);
  methods[9].selector = @selector(enterTransformWithId:);
  methods[10].selector = @selector(leaveTransformWithId:);
  methods[11].selector = @selector(truncate);
  methods[12].selector = @selector(truncateFinal);
  methods[13].selector = @selector(collectWithJavaUtilCollection:);
  methods[14].selector = @selector(hasError);
  methods[15].selector = @selector(hasCompleted);
  methods[16].selector = @selector(getHead);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tail_", "LIoReactivexInternalOperatorsFlowableFlowableReplay_Node;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addLast", "LIoReactivexInternalOperatorsFlowableFlowableReplay_Node;", "removeSome", "I", "setFirst", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription;", "(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription<TT;>;)V", "enterTransform", "leaveTransform", "collect", "LJavaUtilCollection;", "(Ljava/util/Collection<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;>;Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer = { "BoundedReplayBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x8, 17, 4, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n = create_IoReactivexInternalOperatorsFlowableFlowableReplay_Node_initWithId_withLong_(nil, 0);
  JreStrongAssign(&self->tail_, n);
  [self setWithId:n];
}

IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *new_IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer, init)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *create_IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer, init)
}

void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n) {
  [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(self->tail_)) setWithId:n];
  JreStrongAssign(&self->tail_, n);
  self->size_++;
}

void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_removeFirst(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *head = [self get];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *next = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(head)) get];
  if (next == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Empty list!");
  }
  self->size_--;
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, next);
}

void IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsFlowableFlowableReplay_Node *n) {
  [self setWithId:n];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer

- (instancetype)initWithInt:(jint)limit {
  IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_initWithInt_(self, limit);
  return self;
}

- (void)truncate {
  if (size_ > limit_) {
    IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_removeFirst(self);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(truncate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer = { "SizeBoundReplayBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 2, 1, -1, -1, 2, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_initWithInt_(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer *self, jint limit) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init(self);
  self->limit_ = limit;
}

IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer *new_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer, initWithInt_, limit)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer *create_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer, initWithInt_, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer

- (instancetype)initWithInt:(jint)limit
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, limit, maxAge, unit, scheduler);
  return self;
}

- (id)enterTransformWithId:(id)value {
  return create_IoReactivexSchedulersTimed_initWithId_withLong_withJavaUtilConcurrentTimeUnit_(value, [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_], unit_);
}

- (id)leaveTransformWithId:(id)value {
  return [((IoReactivexSchedulersTimed *) nil_chk(((IoReactivexSchedulersTimed *) cast_chk(value, [IoReactivexSchedulersTimed class])))) value];
}

- (void)truncate {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *next = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(prev)) get];
  jint e = 0;
  for (; ; ) {
    if (next != nil) {
      if (size_ > limit_) {
        e++;
        size_--;
        prev = next;
        next = [next get];
      }
      else {
        IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
        if ([((IoReactivexSchedulersTimed *) nil_chk(v)) time] <= timeLimit) {
          e++;
          size_--;
          prev = next;
          next = [next get];
        }
        else {
          break;
        }
      }
    }
    else {
      break;
    }
  }
  if (e != 0) {
    IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, prev);
  }
}

- (void)truncateFinal {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *next = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(prev)) get];
  jint e = 0;
  for (; ; ) {
    if (next != nil && size_ > 1) {
      IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
      if ([((IoReactivexSchedulersTimed *) nil_chk(v)) time] <= timeLimit) {
        e++;
        size_--;
        prev = next;
        next = [next get];
      }
      else {
        break;
      }
    }
    else {
      break;
    }
  }
  if (e != 0) {
    IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsFlowableFlowableReplay_Node_(self, prev);
  }
}

- (IoReactivexInternalOperatorsFlowableFlowableReplay_Node *)getHead {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsFlowableFlowableReplay_Node *next = [((IoReactivexInternalOperatorsFlowableFlowableReplay_Node *) nil_chk(prev)) get];
  for (; ; ) {
    if (next == nil) {
      break;
    }
    IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
    if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_([((IoReactivexSchedulersTimed *) nil_chk(v)) value]) || IoReactivexInternalUtilNotificationLite_isErrorWithId_([v value])) {
      break;
    }
    if ([v time] <= timeLimit) {
      prev = next;
      next = [next get];
    }
    else {
      break;
    }
  }
  return prev;
}

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsFlowableFlowableReplay_Node;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(enterTransformWithId:);
  methods[2].selector = @selector(leaveTransformWithId:);
  methods[3].selector = @selector(truncate);
  methods[4].selector = @selector(truncateFinal);
  methods[5].selector = @selector(getHead);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "enterTransform", "LNSObject;", "leaveTransform", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer = { "SizeAndTimeBoundReplayBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 5, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer *self, jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableFlowableReplay_BoundedReplayBuffer_init(self);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->limit_ = limit;
  self->maxAge_ = maxAge;
  JreStrongAssign(&self->unit_, unit);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer *new_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, limit, maxAge, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer *create_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, limit, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)connectableFactory
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector {
  IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(self, connectableFactory, selector);
  return self;
}

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  IoReactivexFlowablesConnectableFlowable *co;
  @try {
    co = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(connectableFactory_)) call], @"The connectableFactory returned null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, child);
    return;
  }
  id<OrgReactivestreamsPublisher> observable;
  @try {
    observable = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(selector_)) applyWithId:co], @"The selector returned a null Publisher");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, child);
    return;
  }
  IoReactivexInternalSubscribersSubscriberResourceWrapper *srw = create_IoReactivexInternalSubscribersSubscriberResourceWrapper_initWithOrgReactivestreamsSubscriber_(child);
  [((id<OrgReactivestreamsPublisher>) nil_chk(observable)) subscribeWithOrgReactivestreamsSubscriber:srw];
  [((IoReactivexFlowablesConnectableFlowable *) nil_chk(co)) connectWithIoReactivexFunctionsConsumer:create_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_(self, srw)];
}

- (void)dealloc {
  RELEASE_(connectableFactory_);
  RELEASE_(selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "connectableFactory_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "selector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;", "(Ljava/util/concurrent/Callable<+Lio/reactivex/flowables/ConnectableFlowable<TU;>;>;Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<TU;>;+Lorg/reactivestreams/Publisher<TR;>;>;)V", "subscribe", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Ljava/util/concurrent/Callable<+Lio/reactivex/flowables/ConnectableFlowable<TU;>;>;", "Lio/reactivex/functions/Function<-Lio/reactivex/Flowable<TU;>;+Lorg/reactivestreams/Publisher<TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "LIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer;", "<R:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/lang/Object;Lorg/reactivestreams/Publisher<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher = { "MultiCastPublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *self, id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  NSObject_init(self);
  JreStrongAssign(&self->connectableFactory_, connectableFactory);
  JreStrongAssign(&self->selector_, selector);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *new_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_, connectableFactory, selector)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *create_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_, connectableFactory, selector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher:(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *)outer$
                                  withIoReactivexInternalSubscribersSubscriberResourceWrapper:(IoReactivexInternalSubscribersSubscriberResourceWrapper *)srw {
  IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_(self, outer$, srw);
  return self;
}

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)r {
  [((IoReactivexInternalSubscribersSubscriberResourceWrapper *) nil_chk(srw_)) setResourceWithIoReactivexDisposablesDisposable:r];
}

- (void)dealloc {
  RELEASE_(srw_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher:withIoReactivexInternalSubscribersSubscriberResourceWrapper:);
  methods[1].selector = @selector(acceptWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "srw_", "LIoReactivexInternalSubscribersSubscriberResourceWrapper;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalSubscribersSubscriberResourceWrapper;", "(Lio/reactivex/internal/subscribers/SubscriberResourceWrapper<TR;>;)V", "accept", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/subscribers/SubscriberResourceWrapper<TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher;", "Ljava/lang/Object;Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer = { "DisposableConsumer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 1, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer *self, IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *outer$, IoReactivexInternalSubscribersSubscriberResourceWrapper *srw) {
  NSObject_init(self);
  JreStrongAssign(&self->srw_, srw);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer *new_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *outer$, IoReactivexInternalSubscribersSubscriberResourceWrapper *srw) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_, outer$, srw)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer *create_IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher *outer$, IoReactivexInternalSubscribersSubscriberResourceWrapper *srw) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_withIoReactivexInternalSubscribersSubscriberResourceWrapper_, outer$, srw)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_MultiCastPublisher_DisposableConsumer)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay

- (instancetype)initWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)co
                                        withIoReactivexFlowable:(IoReactivexFlowable *)observable {
  IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay_initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_(self, co, observable);
  return self;
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  [((IoReactivexFlowablesConnectableFlowable *) nil_chk(co_)) connectWithIoReactivexFunctionsConsumer:connection];
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(observable_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)dealloc {
  RELEASE_(co_);
  RELEASE_(observable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowablesConnectableFlowable:withIoReactivexFlowable:);
  methods[1].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  methods[2].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "co_", "LIoReactivexFlowablesConnectableFlowable;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "observable_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowablesConnectableFlowable;LIoReactivexFlowable;", "(Lio/reactivex/flowables/ConnectableFlowable<TT;>;Lio/reactivex/Flowable<TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "Lio/reactivex/Flowable<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/flowables/ConnectableFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay = { "ConnectableFlowableReplay", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay_initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay *self, IoReactivexFlowablesConnectableFlowable *co, IoReactivexFlowable *observable) {
  IoReactivexFlowablesConnectableFlowable_init(self);
  JreStrongAssign(&self->co_, co);
  JreStrongAssign(&self->observable_, observable);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay *new_IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay_initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_(IoReactivexFlowablesConnectableFlowable *co, IoReactivexFlowable *observable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay, initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_, co, observable)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay *create_IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay_initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_(IoReactivexFlowablesConnectableFlowable *co, IoReactivexFlowable *observable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay, initWithIoReactivexFlowablesConnectableFlowable_withIoReactivexFlowable_, co, observable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ConnectableFlowableReplay)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask

- (instancetype)initWithInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask_initWithInt_(self, bufferSize);
  return self;
}

- (id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>)call {
  return create_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeBoundReplayBuffer_initWithInt_(bufferSize_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Callable<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask = { "ReplayBufferTask", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 1, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask_initWithInt_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask *self, jint bufferSize) {
  NSObject_init(self);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask *new_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask_initWithInt_(jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask, initWithInt_, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask *create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask_initWithInt_(jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask, initWithInt_, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBufferTask)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask

- (instancetype)initWithInt:(jint)bufferSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, bufferSize, maxAge, unit, scheduler);
  return self;
}

- (id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>)call {
  return create_IoReactivexInternalOperatorsFlowableFlowableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(bufferSize_, maxAge_, unit_, scheduler_);
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "()Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/concurrent/Callable<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask = { "ScheduledReplayBufferTask", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 4, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask *self, jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  NSObject_init(self);
  self->bufferSize_ = bufferSize;
  self->maxAge_ = maxAge;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask *new_IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, bufferSize, maxAge, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask *create_IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, bufferSize, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ScheduledReplayBufferTask)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)curr
                                 withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferFactory {
  IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(self, curr, bufferFactory);
  return self;
}

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  for (; ; ) {
    IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(curr_)) get];
    if (r == nil) {
      id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer> buf;
      @try {
        buf = [((id<JavaUtilConcurrentCallable>) nil_chk(bufferFactory_)) call];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
      }
      IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber *u = create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer_(buf);
      if (![curr_ compareAndSetWithId:nil withId:u]) {
        continue;
      }
      r = u;
    }
    IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription *inner = create_IoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription_initWithIoReactivexInternalOperatorsFlowableFlowableReplay_ReplaySubscriber_withOrgReactivestreamsSubscriber_(r, child);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onSubscribeWithOrgReactivestreamsSubscription:inner];
    [r addWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:inner];
    if ([inner isDisposed]) {
      [r removeWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:inner];
      return;
    }
    [r manageRequests];
    [((id<IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayBuffer>) nil_chk(r->buffer_)) replayWithIoReactivexInternalOperatorsFlowableFlowableReplay_InnerSubscription:inner];
    break;
  }
}

- (void)dealloc {
  RELEASE_(curr_);
  RELEASE_(bufferFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curr_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "bufferFactory_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;>;Ljava/util/concurrent/Callable<+Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;)V", "subscribe", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber<TT;>;>;", "Ljava/util/concurrent/Callable<+Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplayBuffer<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/reactivestreams/Publisher<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher = { "ReplayPublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher *self, JavaUtilConcurrentAtomicAtomicReference *curr, id<JavaUtilConcurrentCallable> bufferFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->curr_, curr);
  JreStrongAssign(&self->bufferFactory_, bufferFactory);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher *new_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(JavaUtilConcurrentAtomicAtomicReference *curr, id<JavaUtilConcurrentCallable> bufferFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_, curr, bufferFactory)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher *create_IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_(JavaUtilConcurrentAtomicAtomicReference *curr, id<JavaUtilConcurrentCallable> bufferFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCallable_, curr, bufferFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_ReplayPublisher)

@implementation IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)call {
  return create_IoReactivexInternalOperatorsFlowableFlowableReplay_UnboundedReplayBuffer_initWithInt_(16);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableReplay;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory = { "DefaultUnboundedFactory", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x18, 2, 0, 0, -1, -1, 1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory_init(IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory *self) {
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory *new_IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory, init)
}

IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory *create_IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableReplay_DefaultUnboundedFactory)
