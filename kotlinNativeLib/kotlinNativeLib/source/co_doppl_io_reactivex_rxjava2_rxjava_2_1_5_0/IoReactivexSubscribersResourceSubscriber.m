//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesListCompositeDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilEndConsumerHelper.h"
#include "IoReactivexSubscribersResourceSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface IoReactivexSubscribersResourceSubscriber () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *s_;
  IoReactivexInternalDisposablesListCompositeDisposable *resources_;
  JavaUtilConcurrentAtomicAtomicLong *missedRequested_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexSubscribersResourceSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubscribersResourceSubscriber, resources_, IoReactivexInternalDisposablesListCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexSubscribersResourceSubscriber, missedRequested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void IoReactivexSubscribersResourceSubscriber_requestWithLong_(IoReactivexSubscribersResourceSubscriber *self, jlong n);

@implementation IoReactivexSubscribersResourceSubscriber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexSubscribersResourceSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(resource, @"resource is null");
  [((IoReactivexInternalDisposablesListCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:resource];
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalUtilEndConsumerHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_withIOSClass_(self->s_, s, [self java_getClass])) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(missedRequested_)) getAndSetWithLong:0LL];
    if (r != 0LL) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:r];
    }
    [self onStart];
  }
}

- (void)onStart {
  IoReactivexSubscribersResourceSubscriber_requestWithLong_(self, JavaLangLong_MAX_VALUE);
}

- (void)requestWithLong:(jlong)n {
  IoReactivexSubscribersResourceSubscriber_requestWithLong_(self, n);
}

- (void)dispose {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(s_)) {
    [((IoReactivexInternalDisposablesListCompositeDisposable *) nil_chk(resources_)) dispose];
  }
}

- (jboolean)isDisposed {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_isCancelledWithOrgReactivestreamsSubscription_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get]);
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(resources_);
  RELEASE_(missedRequested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[3].selector = @selector(onStart);
  methods[4].selector = @selector(requestWithLong:);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "resources_", "LIoReactivexInternalDisposablesListCompositeDisposable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "missedRequested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LIoReactivexDisposablesDisposable;", "onSubscribe", "LOrgReactivestreamsSubscription;", "request", "J", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexSubscribersResourceSubscriber = { "ResourceSubscriber", "io.reactivex.subscribers", ptrTable, methods, fields, 7, 0x401, 7, 3, -1, -1, -1, 7, -1 };
  return &_IoReactivexSubscribersResourceSubscriber;
}

@end

void IoReactivexSubscribersResourceSubscriber_init(IoReactivexSubscribersResourceSubscriber *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexInternalDisposablesListCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->missedRequested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

void IoReactivexSubscribersResourceSubscriber_requestWithLong_(IoReactivexSubscribersResourceSubscriber *self, jlong n) {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredRequestWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withLong_(self->s_, self->missedRequested_, n);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubscribersResourceSubscriber)
