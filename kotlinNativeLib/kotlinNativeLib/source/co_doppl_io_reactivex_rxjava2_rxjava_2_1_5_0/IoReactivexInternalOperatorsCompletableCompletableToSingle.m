//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalOperatorsCompletableCompletableToSingle.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@interface IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle () {
 @public
  IoReactivexInternalOperatorsCompletableCompletableToSingle *this$0_;
  id<IoReactivexSingleObserver> observer_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle, observer_, id<IoReactivexSingleObserver>)

@implementation IoReactivexInternalOperatorsCompletableCompletableToSingle

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)completionValueSupplier
                                              withId:(id)completionValue {
  IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(self, source, completionValueSupplier, completionValue);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(self, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(completionValueSupplier_);
  RELEASE_(completionValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withJavaUtilConcurrentCallable:withId:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "completionValueSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "completionValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;LJavaUtilConcurrentCallable;LNSObject;", "(Lio/reactivex/CompletableSource;Ljava/util/concurrent/Callable<+TT;>;TT;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Ljava/util/concurrent/Callable<+TT;>;", "TT;", "LIoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToSingle = { "CompletableToSingle", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToSingle;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(IoReactivexInternalOperatorsCompletableCompletableToSingle *self, id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->completionValue_, completionValue);
  JreStrongAssign(&self->completionValueSupplier_, completionValueSupplier);
}

IoReactivexInternalOperatorsCompletableCompletableToSingle *new_IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle, initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_, source, completionValueSupplier, completionValue)
}

IoReactivexInternalOperatorsCompletableCompletableToSingle *create_IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle, initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_, source, completionValueSupplier, completionValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableToSingle)

@implementation IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableToSingle:(IoReactivexInternalOperatorsCompletableCompletableToSingle *)outer$
                                                     withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(self, outer$, observer);
  return self;
}

- (void)onComplete {
  id v;
  if (this$0_->completionValueSupplier_ != nil) {
    @try {
      v = [this$0_->completionValueSupplier_ call];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<IoReactivexSingleObserver>) nil_chk(observer_)) onErrorWithJavaLangThrowable:e];
      return;
    }
  }
  else {
    v = this$0_->completionValue_;
  }
  if (v == nil) {
    [((id<IoReactivexSingleObserver>) nil_chk(observer_)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"The value supplied is null")];
  }
  else {
    [((id<IoReactivexSingleObserver>) nil_chk(observer_)) onSuccessWithId:v];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(observer_)) onErrorWithJavaLangThrowable:e];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexSingleObserver>) nil_chk(observer_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableToSingle:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableToSingle;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "observer_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "onError", "LJavaLangThrowable;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/operators/completable/CompletableToSingle<TT;>;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsCompletableCompletableToSingle;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle = { "ToSingle", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x10, 4, 2, 8, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle *self, IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> observer) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
}

IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle *new_IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> observer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle, initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_, outer$, observer)
}

IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle *create_IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> observer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle, initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_, outer$, observer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableToSingle_ToSingle)
