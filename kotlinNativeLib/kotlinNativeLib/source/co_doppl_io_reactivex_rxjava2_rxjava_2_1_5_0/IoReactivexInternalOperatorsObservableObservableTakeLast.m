//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableTakeLast.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"

inline jlong IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_serialVersionUID 7240042530241604978LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableTakeLast

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)count {
  IoReactivexInternalOperatorsObservableObservableTakeLast_initWithIoReactivexObservableSource_withInt_(self, source, count);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_initWithIoReactivexObserver_withInt_(t, count_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;I", "(Lio/reactivex/ObservableSource<TT;>;I)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTakeLast = { "ObservableTakeLast", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTakeLast;
}

@end

void IoReactivexInternalOperatorsObservableObservableTakeLast_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableObservableTakeLast *self, id<IoReactivexObservableSource> source, jint count) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->count_ = count;
}

IoReactivexInternalOperatorsObservableObservableTakeLast *new_IoReactivexInternalOperatorsObservableObservableTakeLast_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint count) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLast, initWithIoReactivexObservableSource_withInt_, source, count)
}

IoReactivexInternalOperatorsObservableObservableTakeLast *create_IoReactivexInternalOperatorsObservableObservableTakeLast_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint count) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLast, initWithIoReactivexObservableSource_withInt_, source, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTakeLast)

@implementation IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count {
  IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_initWithIoReactivexObserver_withInt_(self, actual, count);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  if (count_ == [self size]) {
    [self poll];
  }
  [self offerWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<IoReactivexObserver> a = actual_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id v = [self poll];
    if (v == nil) {
      if (!JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
      }
      return;
    }
    [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
  }
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;I", "(Lio/reactivex/Observer<-TT;>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableTakeLast;", "<T:Ljava/lang/Object;>Ljava/util/ArrayDeque<TT;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver = { "TakeLastObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 5, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_initWithIoReactivexObserver_withInt_(IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver *self, id<IoReactivexObserver> actual, jint count) {
  JavaUtilArrayDeque_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
}

IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver *new_IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint count) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver, initWithIoReactivexObserver_withInt_, actual, count)
}

IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver *create_IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint count) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver, initWithIoReactivexObserver_withInt_, actual, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTakeLast_TakeLastObserver)
