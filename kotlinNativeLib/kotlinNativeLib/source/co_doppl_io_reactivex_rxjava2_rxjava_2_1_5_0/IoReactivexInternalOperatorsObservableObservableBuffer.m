//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableBuffer.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_serialVersionUID -8223395059921494546LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableBuffer

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)count
                                            withInt:(jint)skip
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(self, source, count, skip, bufferSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (skip_ == count_) {
    IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *bes = create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(t, count_, bufferSupplier_);
    if ([bes createBuffer]) {
      [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:bes];
    }
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(t, count_, skip_, bufferSupplier_)];
  }
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withInt:withInt:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;IILJavaUtilConcurrentCallable;", "(Lio/reactivex/ObservableSource<TT;>;IILjava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver;LIoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBuffer = { "ObservableBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer *self, id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->count_ = count;
  self->skip_ = skip;
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
}

IoReactivexInternalOperatorsObservableObservableBuffer *new_IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer, initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_, source, count, skip, bufferSupplier)
}

IoReactivexInternalOperatorsObservableObservableBuffer *create_IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer, initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_, source, count, skip, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(self, actual, count, bufferSupplier);
  return self;
}

- (jboolean)createBuffer {
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"Empty buffer supplied");
  }
  @catch (JavaLangThrowable *t) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(t);
    JreStrongAssign(&buffer_, nil);
    if (s_ == nil) {
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(t, actual_);
    }
    else {
      [s_ dispose];
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
    }
    return false;
  }
  JreStrongAssign(&buffer_, b);
  return true;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  id<JavaUtilCollection> b = buffer_;
  if (b != nil) {
    [b addWithId:t];
    if (++size_ >= count_) {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:b];
      size_ = 0;
      [self createBuffer];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&buffer_, nil);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<JavaUtilCollection> b = buffer_;
  JreStrongAssign(&buffer_, nil);
  if (b != nil && ![b isEmpty]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:b];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(bufferSupplier_);
  RELEASE_(buffer_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withInt:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(createBuffer);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;ILJavaUtilConcurrentCallable;", "(Lio/reactivex/Observer<-TU;>;ILjava/util/concurrent/Callable<TU;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TU;>;", "Ljava/util/concurrent/Callable<TU;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableBuffer;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver = { "BufferExactObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 6, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *self, id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
}

IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *new_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_, actual, count, bufferSupplier)
}

IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_, actual, count, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver)

@implementation IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count
                                    withInt:(jint)skip
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(self, actual, count, skip, bufferSupplier);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  if (index_++ % skip_ == 0) {
    id<JavaUtilCollection> b;
    @try {
      b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");
    }
    @catch (JavaLangThrowable *e) {
      [((JavaUtilArrayDeque *) nil_chk(buffers_)) clear];
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
      return;
    }
    [((JavaUtilArrayDeque *) nil_chk(buffers_)) offerWithId:b];
  }
  id<JavaUtilIterator> it = [((JavaUtilArrayDeque *) nil_chk(buffers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilCollection> b = [it next];
    [((id<JavaUtilCollection>) nil_chk(b)) addWithId:t];
    if (count_ <= [b size]) {
      [it remove];
      [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:b];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((JavaUtilArrayDeque *) nil_chk(buffers_)) clear];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  while (![((JavaUtilArrayDeque *) nil_chk(buffers_)) isEmpty]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:[buffers_ poll]];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(bufferSupplier_);
  RELEASE_(s_);
  RELEASE_(buffers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withInt:withInt:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffers_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;IILJavaUtilConcurrentCallable;", "(Lio/reactivex/Observer<-TU;>;IILjava/util/concurrent/Callable<TU;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TU;>;", "Ljava/util/concurrent/Callable<TU;>;", "Ljava/util/ArrayDeque<TU;>;", "LIoReactivexInternalOperatorsObservableObservableBuffer;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver = { "BufferSkipObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 8, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *self, id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
  self->skip_ = skip;
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilArrayDeque_init());
}

IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *new_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_, actual, count, skip, bufferSupplier)
}

IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_, actual, count, skip, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver)
