//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesObserverFullArbiter.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalObserversFullArbiterObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableTimeout.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversDisposableObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout : NSObject

@end

inline jlong IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_serialVersionUID 2672739326310051084LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_serialVersionUID -1957813281749686898LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableTimeout

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)firstTimeoutIndicator
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableTimeout_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(self, source, firstTimeoutIndicator, itemTimeoutIndicator, other);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (other_ == nil) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), firstTimeoutIndicator_, itemTimeoutIndicator_)];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(t, firstTimeoutIndicator_, itemTimeoutIndicator_, other_)];
  }
}

- (void)dealloc {
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withIoReactivexObservableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "firstTimeoutIndicator_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<TU;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;Lio/reactivex/ObservableSource<+TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/ObservableSource<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;", "Lio/reactivex/ObservableSource<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver;LIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout;LIoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver;LIoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeout = { "ObservableTimeout", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeout;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeout_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeout *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsObservableObservableTimeout *new_IoReactivexInternalOperatorsObservableObservableTimeout_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_, source, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

IoReactivexInternalOperatorsObservableObservableTimeout *create_IoReactivexInternalOperatorsObservableObservableTimeout_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_, source, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeout)

@implementation IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(timeoutWithLong:);
  methods[1].selector = @selector(innerErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "timeout", "J", "innerError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsObservableObservableTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout = { "OnTimeout", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x608, 2, 0, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout)

@implementation IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)firstTimeoutIndicator
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator {
  IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_(self, actual, firstTimeoutIndicator, itemTimeoutIndicator);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<IoReactivexObserver> a = actual_;
    id<IoReactivexObservableSource> p = firstTimeoutIndicator_;
    if (p != nil) {
      IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *tis = create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(self, 0);
      if ([self compareAndSetWithId:nil withId:tis]) {
        [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        [p subscribeWithIoReactivexObserver:tis];
      }
    }
    else {
      [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    }
  }
}

- (void)onNextWithId:(id)t {
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != nil) {
    [d dispose];
  }
  id<IoReactivexObservableSource> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(itemTimeoutIndicator_)) applyWithId:t], @"The ObservableSource returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self dispose];
    [actual_ onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *tis = create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(self, idx);
  if ([self compareAndSetWithId:d withId:tis]) {
    [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:tis];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  if (IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self)) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  }
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)timeoutWithLong:(jlong)idx {
  if (idx == JreLoadVolatileLong(&index_)) {
    [self dispose];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
  }
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(timeoutWithLong:);
  methods[8].selector = @selector(innerErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "firstTimeoutIndicator_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<TU;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "timeout", "J", "innerError", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/ObservableSource<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;", "LIoReactivexInternalOperatorsObservableObservableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/operators/observable/ObservableTimeout$OnTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver = { "TimeoutObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 6, 15, -1, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver *new_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_, actual, firstTimeoutIndicator, itemTimeoutIndicator)
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver *create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_, actual, firstTimeoutIndicator, itemTimeoutIndicator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutObserver)

@implementation IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout:(id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout>)parent
                                                                                 withLong:(jlong)index {
  IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(self, parent, index);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self dispose];
  [((id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout>) nil_chk(parent_)) timeoutWithLong:index_];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout>) nil_chk(parent_)) innerErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout>) nil_chk(parent_)) timeoutWithLong:index_];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout:withLong:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout;J", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsObservableObservableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver = { "TimeoutInnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 3, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *self, id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout> parent, jlong index) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *new_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout> parent, jlong index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_, parent, index)
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(id<IoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout> parent, jlong index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_, parent, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver)

@implementation IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)firstTimeoutIndicator
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(self, actual, firstTimeoutIndicator, itemTimeoutIndicator, other);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) setDisposableWithIoReactivexDisposablesDisposable:s];
    id<IoReactivexObserver> a = actual_;
    id<IoReactivexObservableSource> p = firstTimeoutIndicator_;
    if (p != nil) {
      IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *tis = create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(self, 0);
      if ([self compareAndSetWithId:nil withId:tis]) {
        [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:arbiter_];
        [p subscribeWithIoReactivexObserver:tis];
      }
    }
    else {
      [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:arbiter_];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  if (![((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onNextWithId:t withIoReactivexDisposablesDisposable:s_]) {
    return;
  }
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != nil) {
    [d dispose];
  }
  id<IoReactivexObservableSource> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(itemTimeoutIndicator_)) applyWithId:t], @"The ObservableSource returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver *tis = create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableTimeout_OnTimeout_withLong_(self, idx);
  if ([self compareAndSetWithId:d withId:tis]) {
    [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:tis];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onErrorWithJavaLangThrowable:t withIoReactivexDisposablesDisposable:s_];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onCompleteWithIoReactivexDisposablesDisposable:s_];
}

- (void)dispose {
  if (IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self)) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  }
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)timeoutWithLong:(jlong)idx {
  if (idx == JreLoadVolatileLong(&index_)) {
    [self dispose];
    [((id<IoReactivexObservableSource>) nil_chk(other_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(arbiter_)];
  }
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(other_);
  RELEASE_(arbiter_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withIoReactivexObservableSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(timeoutWithLong:);
  methods[8].selector = @selector(innerErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "firstTimeoutIndicator_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "arbiter_", "LIoReactivexInternalDisposablesObserverFullArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<TU;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;Lio/reactivex/ObservableSource<+TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "timeout", "J", "innerError", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/ObservableSource<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<TV;>;>;", "Lio/reactivex/ObservableSource<+TT;>;", "Lio/reactivex/internal/disposables/ObserverFullArbiter<TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/operators/observable/ObservableTimeout$OnTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver = { "TimeoutOtherObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 9, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(actual, self, 8));
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver *new_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_, actual, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver *create_IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexObservableSource_, actual, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeout_TimeoutOtherObserver)
