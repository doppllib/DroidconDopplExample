//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableConcatIterable.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_serialVersionUID -7965400327305809232LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsCompletableCompletableConcatIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources {
  IoReactivexInternalOperatorsCompletableCompletableConcatIterable_initWithJavaLangIterable_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  id<JavaUtilIterator> it;
  @try {
    it = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaLangIterable>) nil_chk(sources_)) iterator], @"The iterator returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexCompletableObserver_(e, s);
    return;
  }
  IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver *inner = create_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withJavaUtilIterator_(s, it);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:inner->sd_];
  [inner next];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableConcatIterable = { "CompletableConcatIterable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableConcatIterable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableConcatIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsCompletableCompletableConcatIterable *self, id<JavaLangIterable> sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableConcatIterable *new_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatIterable, initWithJavaLangIterable_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableConcatIterable *create_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatIterable, initWithJavaLangIterable_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableConcatIterable)

@implementation IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                                  withJavaUtilIterator:(id<JavaUtilIterator>)sources {
  IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withJavaUtilIterator_(self, actual, sources);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sd_)) updateWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [self next];
}

- (void)next {
  if ([((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sd_)) isDisposed]) {
    return;
  }
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<JavaUtilIterator> a = sources_;
  do {
    if ([sd_ isDisposed]) {
      return;
    }
    jboolean b;
    @try {
      b = [((id<JavaUtilIterator>) nil_chk(a)) hasNext];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (!b) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
      return;
    }
    id<IoReactivexCompletableSource> c;
    @try {
      c = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([a next], @"The CompletableSource returned is null");
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    [((id<IoReactivexCompletableSource>) nil_chk(c)) subscribeWithIoReactivexCompletableObserver:self];
  }
  while ([self decrementAndGet] != 0);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sources_);
  RELEASE_(sd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withJavaUtilIterator:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sources_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "sd_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LJavaUtilIterator;", "(Lio/reactivex/CompletableObserver;Ljava/util/Iterator<+Lio/reactivex/CompletableSource;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "Ljava/util/Iterator<+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsCompletableCompletableConcatIterable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver = { "ConcatInnerObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 5, 4, 7, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withJavaUtilIterator_(IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver *self, id<IoReactivexCompletableObserver> actual, id<JavaUtilIterator> sources) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssignAndConsume(&self->sd_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver *new_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withJavaUtilIterator_(id<IoReactivexCompletableObserver> actual, id<JavaUtilIterator> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver, initWithIoReactivexCompletableObserver_withJavaUtilIterator_, actual, sources)
}

IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver *create_IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withJavaUtilIterator_(id<IoReactivexCompletableObserver> actual, id<JavaUtilIterator> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver, initWithIoReactivexCompletableObserver_withJavaUtilIterator_, actual, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableConcatIterable_ConcatInnerObserver)
