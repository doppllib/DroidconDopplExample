//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableTake.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_serialVersionUID -5636543848937116287LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableTake

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)limit {
  IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(self, source, limit);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(s, limit_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;J", "(Lio/reactivex/Flowable<TT;>;J)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTake = { "FlowableTake", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTake;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexInternalOperatorsFlowableFlowableTake *self, IoReactivexFlowable *source, jlong limit) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->limit_ = limit;
}

IoReactivexInternalOperatorsFlowableFlowableTake *new_IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexFlowable *source, jlong limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTake, initWithIoReactivexFlowable_withLong_, source, limit)
}

IoReactivexInternalOperatorsFlowableFlowableTake *create_IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexFlowable *source, jlong limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTake, initWithIoReactivexFlowable_withLong_, source, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTake)

@implementation IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)limit {
  IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(self, actual, limit);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->subscription_, s)) {
    JreStrongAssign(&subscription_, s);
    if (limit_ == 0LL) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      done_ = true;
      IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(actual_);
    }
    else {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (!done_ && remaining_-- > 0) {
    jboolean stop = remaining_ == 0;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
    if (stop) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(subscription_)) cancel];
      [self onComplete];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (!done_) {
    done_ = true;
    [((id<OrgReactivestreamsSubscription>) nil_chk(subscription_)) cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)requestWithLong:(jlong)n {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    return;
  }
  if (![self get] && [self compareAndSetWithBoolean:false withBoolean:true]) {
    if (n >= limit_) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(subscription_)) requestWithLong:JavaLangLong_MAX_VALUE];
      return;
    }
  }
  [((id<OrgReactivestreamsSubscription>) nil_chk(subscription_)) requestWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(subscription_)) cancel];
}

- (void)dealloc {
  RELEASE_(subscription_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subscription_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "limit_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "remaining_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;J", "(Lorg/reactivestreams/Subscriber<-TT;>;J)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTake;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber = { "TakeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 6, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong limit) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->limit_ = limit;
  self->remaining_ = limit;
}

IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber, initWithOrgReactivestreamsSubscriber_withLong_, actual, limit)
}

IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber, initWithOrgReactivestreamsSubscriber_withLong_, actual, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber)
