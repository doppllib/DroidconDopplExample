//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableConcat
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableConcat

#if !defined (IoReactivexInternalOperatorsCompletableCompletableConcat_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableConcat))
#define IoReactivexInternalOperatorsCompletableCompletableConcat_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

@protocol IoReactivexCompletableObserver;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsCompletableCompletableConcat : IoReactivexCompletable {
 @public
  id<OrgReactivestreamsPublisher> sources_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                            withInt:(jint)prefetch;

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableConcat)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat, sources_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableConcat_initWithOrgReactivestreamsPublisher_withInt_(IoReactivexInternalOperatorsCompletableCompletableConcat *self, id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat *new_IoReactivexInternalOperatorsCompletableCompletableConcat_initWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat *create_IoReactivexInternalOperatorsCompletableCompletableConcat_initWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableConcat)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber))
#define IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  jint prefetch_;
  jint limit_;
  IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver *inner_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  jint sourceFused_;
  jint consumed_;
  id<IoReactivexInternalFuseableSimpleQueue> queue_;
  volatile_id s_;
  volatile_jboolean done_;
  volatile_jboolean active_;
}

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id<IoReactivexCompletableSource>)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                                               withInt:(jint)prefetch;

- (void)drain;

- (void)innerComplete;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)request;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber, inner_, IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_initWithIoReactivexCompletableObserver_withInt_(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *self, id<IoReactivexCompletableObserver> actual, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *new_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_initWithIoReactivexCompletableObserver_withInt_(id<IoReactivexCompletableObserver> actual, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *create_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_initWithIoReactivexCompletableObserver_withInt_(id<IoReactivexCompletableObserver> actual, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver))
#define IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

@class IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver > {
 @public
  IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *parent_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber:(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver, parent_, IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver *self, IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver *new_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver *create_IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableConcat_CompletableConcatSubscriber_ConcatInnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableConcat")
