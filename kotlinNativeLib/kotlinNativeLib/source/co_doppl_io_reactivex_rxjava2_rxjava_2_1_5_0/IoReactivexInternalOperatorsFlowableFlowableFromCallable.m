//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFromCallable.h"
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableFromCallable

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  IoReactivexInternalOperatorsFlowableFlowableFromCallable_initWithJavaUtilConcurrentCallable_(self, callable);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalSubscriptionsDeferredScalarSubscription *deferred = create_IoReactivexInternalSubscriptionsDeferredScalarSubscription_initWithOrgReactivestreamsSubscriber_(s);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:deferred];
  id t;
  @try {
    t = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call], @"The callable returned a null value");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [s onErrorWithJavaLangThrowable:ex];
    return;
  }
  [deferred completeWithId:t];
}

- (id)call {
  return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call], @"The callable returned a null value");
}

- (void)dealloc {
  RELEASE_(callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LJavaLangException;", "()TT;", "Ljava/util/concurrent/Callable<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromCallable = { "FlowableFromCallable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromCallable;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromCallable_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableFromCallable *self, id<JavaUtilConcurrentCallable> callable) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->callable_, callable);
}

IoReactivexInternalOperatorsFlowableFlowableFromCallable *new_IoReactivexInternalOperatorsFlowableFlowableFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

IoReactivexInternalOperatorsFlowableFlowableFromCallable *create_IoReactivexInternalOperatorsFlowableFlowableFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromCallable)
