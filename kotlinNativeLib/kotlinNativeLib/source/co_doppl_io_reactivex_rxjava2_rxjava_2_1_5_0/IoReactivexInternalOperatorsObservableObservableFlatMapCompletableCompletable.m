//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableObservableFlatMapCompletable.h"
#include "IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_serialVersionUID 8443155186132538303LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver () {
 @public
  IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_serialVersionUID 8606673141535671828LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(self, source, mapper, delayErrors);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_(observer, mapper_, delayErrors_)];
}

- (IoReactivexObservable *)fuseToObservable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(source_, mapper_, delayErrors_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  methods[2].selector = @selector(fuseToObservable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;Z", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;Z)V", "subscribeActual", "LIoReactivexCompletableObserver;", "()Lio/reactivex/Observable<TT;>;", "Lio/reactivex/ObservableSource<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Completable;Lio/reactivex/internal/fuseable/FuseToObservable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable = { "ObservableFlatMapCompletableCompletable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable;
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_, source, mapper, delayErrors)
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_, source, mapper, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable)

@implementation IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                           withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_(self, observer, mapper, delayErrors);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)value {
  id<IoReactivexCompletableSource> cs;
  @try {
    cs = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The mapper returned a null CompletableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  [self getAndIncrement];
  IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *inner = create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_(self);
  if (!JreLoadVolatileBoolean(&disposed_) && [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:inner]) {
    [((id<IoReactivexCompletableSource>) nil_chk(cs)) subscribeWithIoReactivexCompletableObserver:inner];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    if (delayErrors_) {
      if ([self decrementAndGet] == 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
    }
    else {
      [self dispose];
      if ([self getAndSetWithInt:0] > 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([self decrementAndGet] == 0) {
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
    if (ex != nil) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    }
    else {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
    }
  }
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) isDisposed];
}

- (void)innerCompleteWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *)inner {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onComplete];
}

- (void)innerErrorWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *)inner
                                                                                                                           withJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onErrorWithJavaLangThrowable:e];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(errors_);
  RELEASE_(mapper_);
  RELEASE_(set_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexFunctionsFunction:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(innerCompleteWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:);
  methods[8].selector = @selector(innerErrorWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexFunctionsFunction;Z", "(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;Z)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerComplete", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver;", "innerError", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver;LJavaLangThrowable;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver = { "FlatMapCompletableMainObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 8, 14, 10, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *self, id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, observer);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
  [self lazySetWithInt:1];
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_, observer, mapper, delayErrors)
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_, observer, mapper, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver)

@implementation IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *)outer$ {
  IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onComplete {
  [this$0_ innerCompleteWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [this$0_ innerErrorWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver:self withJavaLangThrowable:e];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onComplete);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 6, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *self, IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver, initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_, outer$)
}

IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver, initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMapCompletableCompletable_FlatMapCompletableMainObserver_InnerObserver)
