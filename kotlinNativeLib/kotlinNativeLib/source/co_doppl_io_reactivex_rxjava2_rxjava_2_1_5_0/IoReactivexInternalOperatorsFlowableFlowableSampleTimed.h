//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSampleTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSampleTimed
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber 1
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSampleTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed))
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSampleTimed : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jboolean emitLast_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)period
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withBoolean:(jboolean)emitLast;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed *self, IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  IoReactivexInternalDisposablesSequentialDisposable *timer_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)cancelTimer;

- (void)complete;

- (void)emit;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, timer_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast))
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast : IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)complete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedNoLast)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast))
#define IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_

@class IoReactivexScheduler;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast : IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)period
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)complete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *self, id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *new_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast *create_IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSampleTimed_SampleTimedEmitLast)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSampleTimed")
