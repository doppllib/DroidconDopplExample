//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableRefCount.h"
#include "IoReactivexObservablesConnectableObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableRefCount ()

- (id<IoReactivexFunctionsConsumer>)onSubscribeWithIoReactivexObserver:(id<IoReactivexObserver>)observer
                             withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

- (id<IoReactivexDisposablesDisposable>)disconnectWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current;

@end

__attribute__((unused)) static id<IoReactivexFunctionsConsumer> IoReactivexInternalOperatorsObservableObservableRefCount_onSubscribeWithIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *self, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

__attribute__((unused)) static id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsObservableObservableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *self, IoReactivexDisposablesCompositeDisposable *current);

@interface IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver () {
 @public
  IoReactivexInternalOperatorsObservableObservableRefCount *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_serialVersionUID 3813126992133394324LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer () {
 @public
  IoReactivexInternalOperatorsObservableObservableRefCount *this$0_;
  id<IoReactivexObserver> observer_;
  JavaUtilConcurrentAtomicAtomicBoolean *writeLocked_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer, observer_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer, writeLocked_, JavaUtilConcurrentAtomicAtomicBoolean *)

@interface IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask () {
 @public
  IoReactivexInternalOperatorsObservableObservableRefCount *this$0_;
  IoReactivexDisposablesCompositeDisposable *current_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask, current_, IoReactivexDisposablesCompositeDisposable *)

@implementation IoReactivexInternalOperatorsObservableObservableRefCount

- (instancetype)initWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)source {
  IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)subscriber {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(subscriptionCount_)) incrementAndGet] == 1) {
    JavaUtilConcurrentAtomicAtomicBoolean *writeLocked = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
    @try {
      [((IoReactivexObservablesConnectableObservable *) nil_chk(source_ObservableRefCount_)) connectWithIoReactivexFunctionsConsumer:IoReactivexInternalOperatorsObservableObservableRefCount_onSubscribeWithIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked)];
    }
    @finally {
      if ([writeLocked get]) {
        [lock_ unlock];
      }
    }
  }
  else {
    @try {
      [self doSubscribeWithIoReactivexObserver:subscriber withIoReactivexDisposablesCompositeDisposable:JreLoadVolatileId(&baseDisposable_)];
    }
    @finally {
      [lock_ unlock];
    }
  }
}

- (id<IoReactivexFunctionsConsumer>)onSubscribeWithIoReactivexObserver:(id<IoReactivexObserver>)observer
                             withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  return IoReactivexInternalOperatorsObservableObservableRefCount_onSubscribeWithIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(self, observer, writeLocked);
}

- (void)doSubscribeWithIoReactivexObserver:(id<IoReactivexObserver>)observer
withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase {
  id<IoReactivexDisposablesDisposable> d = IoReactivexInternalOperatorsObservableObservableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(self, currentBase);
  IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *s = create_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(self, observer, currentBase, d);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:s];
  [((IoReactivexObservablesConnectableObservable *) nil_chk(source_ObservableRefCount_)) subscribeWithIoReactivexObserver:s];
}

- (id<IoReactivexDisposablesDisposable>)disconnectWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current {
  return IoReactivexInternalOperatorsObservableObservableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(self, current);
}

- (void)__javaClone:(IoReactivexInternalOperatorsObservableObservableRefCount *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&baseDisposable_, &original->baseDisposable_);
}

- (void)dealloc {
  RELEASE_(source_ObservableRefCount_);
  JreReleaseVolatile(&baseDisposable_);
  RELEASE_(subscriptionCount_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsConsumer;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservablesConnectableObservable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexObserver:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[3].selector = @selector(doSubscribeWithIoReactivexObserver:withIoReactivexDisposablesCompositeDisposable:);
  methods[4].selector = @selector(disconnectWithIoReactivexDisposablesCompositeDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_ObservableRefCount_", "LIoReactivexObservablesConnectableObservable;", .constantValue.asLong = 0, 0x10, 13, -1, 14, -1 },
    { "baseDisposable_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservablesConnectableObservable;", "(Lio/reactivex/observables/ConnectableObservable<TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexObserver;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lio/reactivex/Observer<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;", "doSubscribe", "LIoReactivexObserver;LIoReactivexDisposablesCompositeDisposable;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/disposables/CompositeDisposable;)V", "disconnect", "LIoReactivexDisposablesCompositeDisposable;", "source", "Lio/reactivex/observables/ConnectableObservable<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver;LIoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer;LIoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRefCount = { "ObservableRefCount", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRefCount;
}

@end

void IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexInternalOperatorsObservableObservableRefCount *self, IoReactivexObservablesConnectableObservable *source) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreVolatileStrongAssign(&self->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->subscriptionCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->source_ObservableRefCount_, source);
}

IoReactivexInternalOperatorsObservableObservableRefCount *new_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount, initWithIoReactivexObservablesConnectableObservable_, source)
}

IoReactivexInternalOperatorsObservableObservableRefCount *create_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount, initWithIoReactivexObservablesConnectableObservable_, source)
}

id<IoReactivexFunctionsConsumer> IoReactivexInternalOperatorsObservableObservableRefCount_onSubscribeWithIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *self, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  return create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(self, observer, writeLocked);
}

id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsObservableObservableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *self, IoReactivexDisposablesCompositeDisposable *current) {
  return IoReactivexDisposablesDisposables_fromRunnableWithJavaLangRunnable_(create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(self, current));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRefCount)

@implementation IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                                         withIoReactivexObserver:(id<IoReactivexObserver>)subscriber
                                   withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase
                                            withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(self, outer$, subscriber, currentBase, resource);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, s);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [self cleanup];
  [((id<IoReactivexObserver>) nil_chk(subscriber_)) onErrorWithJavaLangThrowable:e];
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexObserver>) nil_chk(subscriber_)) onNextWithId:t];
}

- (void)onComplete {
  [self cleanup];
  [((id<IoReactivexObserver>) nil_chk(subscriber_)) onComplete];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(resource_)) dispose];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)cleanup {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseDisposable_) == currentBase_) {
      if ([IoReactivexDisposablesDisposable_class_() isInstance:this$0_->source_ObservableRefCount_]) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(((id<IoReactivexDisposablesDisposable>) cast_check(this$0_->source_ObservableRefCount_, IoReactivexDisposablesDisposable_class_())))) dispose];
      }
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) dispose];
      JreVolatileStrongAssign(&this$0_->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) setWithInt:0];
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(subscriber_);
  RELEASE_(currentBase_);
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableRefCount:withIoReactivexObserver:withIoReactivexDisposablesCompositeDisposable:withIoReactivexDisposablesDisposable:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(cleanup);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "subscriber_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "currentBase_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resource_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexDisposablesCompositeDisposable;LIoReactivexDisposablesDisposable;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "onNext", "LNSObject;", "(TT;)V", "Lio/reactivex/internal/operators/observable/ObservableRefCount<TT;>;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableRefCount;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver = { "ConnectionObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 8, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->subscriber_, subscriber);
  JreStrongAssign(&self->currentBase_, currentBase);
  JreStrongAssign(&self->resource_, resource);
}

IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *new_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_, outer$, subscriber, currentBase, resource)
}

IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *create_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_, outer$, subscriber, currentBase, resource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver)

@implementation IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                                         withIoReactivexObserver:(id<IoReactivexObserver>)observer
                                       withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, observer, writeLocked);
  return self;
}

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)subscription {
  @try {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) addWithIoReactivexDisposablesDisposable:subscription];
    [this$0_ doSubscribeWithIoReactivexObserver:observer_ withIoReactivexDisposablesCompositeDisposable:JreLoadVolatileId(&this$0_->baseDisposable_)];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) unlock];
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(writeLocked_)) setWithBoolean:false];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(observer_);
  RELEASE_(writeLocked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableRefCount:withIoReactivexObserver:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(acceptWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "observer_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "writeLocked_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lio/reactivex/Observer<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "accept", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/operators/observable/ObservableRefCount<TT;>;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableRefCount;", "Ljava/lang/Object;Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer = { "DisposeConsumer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 3, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer;
}

@end

void IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
  JreStrongAssign(&self->writeLocked_, writeLocked);
}

IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *new_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, observer, writeLocked)
}

IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer *create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> observer, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, observer, writeLocked)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeConsumer)

@implementation IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                   withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current {
  IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(self, outer$, current);
  return self;
}

- (void)run {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseDisposable_) == current_) {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) decrementAndGet] == 0) {
        if ([IoReactivexDisposablesDisposable_class_() isInstance:this$0_->source_ObservableRefCount_]) {
          [((id<IoReactivexDisposablesDisposable>) nil_chk(((id<IoReactivexDisposablesDisposable>) cast_check(this$0_->source_ObservableRefCount_, IoReactivexDisposablesDisposable_class_())))) dispose];
        }
        [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) dispose];
        JreVolatileStrongAssign(&this$0_->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
      }
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableRefCount:withIoReactivexDisposablesCompositeDisposable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "current_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesCompositeDisposable;", "Lio/reactivex/internal/operators/observable/ObservableRefCount<TT;>;", "LIoReactivexInternalOperatorsObservableObservableRefCount;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask = { "DisposeTask", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask;
}

@end

void IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->current_, current);
}

IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *new_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_, outer$, current)
}

IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask *create_IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask, initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexDisposablesCompositeDisposable_, outer$, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRefCount_DisposeTask)
