//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromCallable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFromCallable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromCallable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromCallable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFromCallable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFromCallable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromCallable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFromCallable))
#define IoReactivexInternalOperatorsMaybeMaybeFromCallable_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

#define RESTRICT_JavaUtilConcurrentCallable 1
#define INCLUDE_JavaUtilConcurrentCallable 1
#include "java/util/concurrent/Callable.h"

@protocol IoReactivexMaybeObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeFromCallable : IoReactivexMaybe < JavaUtilConcurrentCallable > {
 @public
  id<JavaUtilConcurrentCallable> callable_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (id)call;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFromCallable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFromCallable, callable_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsMaybeMaybeFromCallable *self, id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFromCallable *new_IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFromCallable *create_IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFromCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromCallable")
