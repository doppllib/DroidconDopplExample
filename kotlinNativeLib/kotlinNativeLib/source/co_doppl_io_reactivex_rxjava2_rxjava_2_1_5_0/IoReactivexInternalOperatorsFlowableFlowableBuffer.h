//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBuffer
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBuffer

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBuffer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBuffer))
#define IoReactivexInternalOperatorsFlowableFlowableBuffer_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBuffer : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jint size_;
  jint skip_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)size
                                    withInt:(jint)skip
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBuffer)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer, bufferSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBuffer_initWithIoReactivexFlowable_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBuffer *self, IoReactivexFlowable *source, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer *new_IoReactivexInternalOperatorsFlowableFlowableBuffer_initWithIoReactivexFlowable_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer *create_IoReactivexInternalOperatorsFlowableFlowableBuffer_initWithIoReactivexFlowable_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBuffer)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class JavaLangThrowable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber : NSObject < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  jint size_;
  id<JavaUtilCollection> buffer_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
  jint index_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)size
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber, buffer_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint size, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferExactSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class JavaLangThrowable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  jint size_;
  jint skip_;
  id<JavaUtilCollection> buffer_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
  jint index_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)size
                                             withInt:(jint)skip
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber, buffer_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferSkipSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_IoReactivexFunctionsBooleanSupplier 1
#define INCLUDE_IoReactivexFunctionsBooleanSupplier 1
#include "IoReactivexFunctionsBooleanSupplier.h"

@class JavaLangThrowable;
@class JavaUtilArrayDeque;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber : JavaUtilConcurrentAtomicAtomicLong < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription, IoReactivexFunctionsBooleanSupplier > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  jint size_;
  jint skip_;
  JavaUtilArrayDeque *buffers_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
  jint index_;
  volatile_jboolean cancelled_;
  jlong produced_;
}

#pragma mark Public

- (void)cancel;

- (jboolean)getAsBoolean;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)size
                                             withInt:(jint)skip
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber, buffers_, JavaUtilArrayDeque *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withInt_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, jint size, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBuffer_PublisherBufferOverlappingSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBuffer")
