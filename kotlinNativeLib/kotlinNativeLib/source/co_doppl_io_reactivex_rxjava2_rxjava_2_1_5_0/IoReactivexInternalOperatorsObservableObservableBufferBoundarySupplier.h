//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier

#if !defined (IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier))
#define IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> boundarySupplier_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundarySupplier
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier, boundarySupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier, bufferSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier *new_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier *create_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver))
#define IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_

#define RESTRICT_IoReactivexInternalObserversQueueDrainObserver 1
#define INCLUDE_IoReactivexInternalObserversQueueDrainObserver 1
#include "IoReactivexInternalObserversQueueDrainObserver.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver : IoReactivexInternalObserversQueueDrainObserver < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  id<JavaUtilConcurrentCallable> boundarySupplier_;
  id<IoReactivexDisposablesDisposable> s_;
  JavaUtilConcurrentAtomicAtomicReference *other_;
  id<JavaUtilCollection> buffer_;
}

#pragma mark Public

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id<JavaUtilCollection>)v;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundarySupplier;

- (void)disposeOther;

- (void)next;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0
withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver, boundarySupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver, other_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver, buffer_, id<JavaUtilCollection>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *self, id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *new_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *create_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver))
#define IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver_

#define RESTRICT_IoReactivexObserversDisposableObserver 1
#define INCLUDE_IoReactivexObserversDisposableObserver 1
#include "IoReactivexObserversDisposableObserver.h"

@class IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver : IoReactivexObserversDisposableObserver {
 @public
  IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *parent_;
  jboolean once_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver:(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver, parent_, IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver *self, IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver *new_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver *create_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver_initWithIoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver_(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundarySupplierObserver *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier_BufferBoundaryObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBufferBoundarySupplier")
