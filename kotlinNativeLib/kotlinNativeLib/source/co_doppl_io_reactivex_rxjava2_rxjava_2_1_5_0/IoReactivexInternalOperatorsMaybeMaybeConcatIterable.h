//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeConcatIterable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeConcatIterable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeConcatIterable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeConcatIterable))
#define IoReactivexInternalOperatorsMaybeMaybeConcatIterable_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@protocol JavaLangIterable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsMaybeMaybeConcatIterable : IoReactivexFlowable {
 @public
  id<JavaLangIterable> sources_;
}

#pragma mark Public

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeConcatIterable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable, sources_, id<JavaLangIterable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsMaybeMaybeConcatIterable *self, id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatIterable *new_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatIterable *create_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilIterator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexMaybeObserver, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicReference *current_;
  IoReactivexInternalDisposablesSequentialDisposable *disposables_;
  id<JavaUtilIterator> sources_;
  jlong produced_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                withJavaUtilIterator:(id<JavaUtilIterator>)sources;

- (void)drain;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, disposables_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, sources_, id<JavaUtilIterator>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatIterable")
