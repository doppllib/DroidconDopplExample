//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableSampleTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableSampleTimed
#ifdef INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast
#define INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast
#define INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver 1
#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableSampleTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed))
#define IoReactivexInternalOperatorsObservableObservableSampleTimed_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableSampleTimed : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jboolean emitLast_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)period
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                        withBoolean:(jboolean)emitLast;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSampleTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSampleTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsObservableObservableSampleTimed *self, id<IoReactivexObservableSource> source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed *new_IoReactivexInternalOperatorsObservableObservableSampleTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<IoReactivexObservableSource> source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed *create_IoReactivexInternalOperatorsObservableObservableSampleTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<IoReactivexObservableSource> source, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean emitLast);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSampleTimed)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver))
#define IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  JavaUtilConcurrentAtomicAtomicReference *timer_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)period
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)cancelTimer;

- (void)complete;

- (void)emit;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver, timer_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver *self, id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast))
#define IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast_

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast : IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)period
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)complete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast *self, id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast *new_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast *create_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedNoLast)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast))
#define IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast_

@class IoReactivexScheduler;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast : IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedObserver {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)period
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)complete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast *self, id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast *new_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast *create_IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObserver> actual, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSampleTimed_SampleTimedEmitLast)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSampleTimed")
