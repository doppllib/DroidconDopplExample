//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCountSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCountSingle

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCountSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCountSingle))
#define IoReactivexInternalOperatorsFlowableFlowableCountSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "IoReactivexInternalFuseableFuseToFlowable.h"

@class IoReactivexFlowable;
@class JavaLangLong;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsFlowableFlowableCountSingle : IoReactivexSingle < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  IoReactivexFlowable *source_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source;

- (JavaLangLong *)blockingGet;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCountSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCountSingle, source_, IoReactivexFlowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCountSingle_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableCountSingle *self, IoReactivexFlowable *source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCountSingle *new_IoReactivexInternalOperatorsFlowableFlowableCountSingle_initWithIoReactivexFlowable_(IoReactivexFlowable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCountSingle *create_IoReactivexInternalOperatorsFlowableFlowableCountSingle_initWithIoReactivexFlowable_(IoReactivexFlowable *source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCountSingle)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexSingleObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  volatile_id s_;
  jlong count_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber, actual_, id<IoReactivexSingleObserver>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCountSingle_CountSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCountSingle")
