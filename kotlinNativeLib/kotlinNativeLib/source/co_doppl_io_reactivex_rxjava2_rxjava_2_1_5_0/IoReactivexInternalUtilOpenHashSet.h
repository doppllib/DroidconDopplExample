//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalUtilOpenHashSet")
#ifdef RESTRICT_IoReactivexInternalUtilOpenHashSet
#define INCLUDE_ALL_IoReactivexInternalUtilOpenHashSet 0
#else
#define INCLUDE_ALL_IoReactivexInternalUtilOpenHashSet 1
#endif
#undef RESTRICT_IoReactivexInternalUtilOpenHashSet

#if !defined (IoReactivexInternalUtilOpenHashSet_) && (INCLUDE_ALL_IoReactivexInternalUtilOpenHashSet || defined(INCLUDE_IoReactivexInternalUtilOpenHashSet))
#define IoReactivexInternalUtilOpenHashSet_

@class IOSObjectArray;

@interface IoReactivexInternalUtilOpenHashSet : NSObject {
 @public
  jfloat loadFactor_;
  jint mask_;
  jint size_;
  jint maxSize_;
  IOSObjectArray *keys_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)capacity;

- (instancetype)initWithInt:(jint)capacity
                  withFloat:(jfloat)loadFactor;

- (jboolean)addWithId:(id)value;

- (IOSObjectArray *)keys;

- (jboolean)removeWithId:(id)value;

- (jint)size;

#pragma mark Package-Private

+ (jint)mixWithInt:(jint)x;

- (void)rehash;

- (jboolean)removeEntryWithInt:(jint)pos
             withNSObjectArray:(IOSObjectArray *)a
                       withInt:(jint)m;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalUtilOpenHashSet)

J2OBJC_FIELD_SETTER(IoReactivexInternalUtilOpenHashSet, keys_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalUtilOpenHashSet_init(IoReactivexInternalUtilOpenHashSet *self);

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_init();

FOUNDATION_EXPORT void IoReactivexInternalUtilOpenHashSet_initWithInt_(IoReactivexInternalUtilOpenHashSet *self, jint capacity);

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_initWithInt_(jint capacity);

FOUNDATION_EXPORT void IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(IoReactivexInternalUtilOpenHashSet *self, jint capacity, jfloat loadFactor);

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor);

FOUNDATION_EXPORT jint IoReactivexInternalUtilOpenHashSet_mixWithInt_(jint x);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalUtilOpenHashSet)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalUtilOpenHashSet")
