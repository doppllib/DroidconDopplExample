//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScalarXMap.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSwitchMap.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_serialVersionUID -3491074160481096299LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_serialVersionUID 3837284832786408377LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableSwitchMap

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, source, mapper, bufferSize, delayErrors);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(source_, s, mapper_)) {
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(s, mapper_, bufferSize_, delayErrors_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;LIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSwitchMap = { "FlowableSwitchMap", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSwitchMap;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, mapper, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, mapper, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSwitchMap)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED;

@implementation IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber

+ (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *)CANCELLED {
  return IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED;
}

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, mapper, bufferSize, delayErrors);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong c = JreLoadVolatileLong(&unique_) + 1;
  JreAssignVolatileLong(&unique_, c);
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
  if (inner != nil) {
    [inner cancel];
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The publisher returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *nextInner = create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(self, c, bufferSize_);
  for (; ; ) {
    inner = [active_ get];
    if (inner == IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED) {
      break;
    }
    if ([active_ compareAndSetWithId:inner withId:nextInner]) {
      [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:nextInner];
      break;
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (!JreLoadVolatileBoolean(&done_) && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:t]) {
    if (!delayErrors_) {
      [self disposeInner];
    }
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    if (JreLoadVolatileLong(&unique_) == 0LL) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
    else {
      [self drain];
    }
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self disposeInner];
  }
}

- (void)disposeInner {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
  if (a != IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED) {
    a = [active_ getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED];
    if (a != IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED && a != nil) {
      [a cancel];
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  jint missing = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) lazySetWithId:nil];
      return;
    }
    if (JreLoadVolatileBoolean(&done_)) {
      if (delayErrors_) {
        if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get] == nil) {
          JavaLangThrowable *err = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
          if (err != nil) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
          }
          else {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
          }
          return;
        }
      }
      else {
        JavaLangThrowable *err = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
        if (err != nil) {
          [self disposeInner];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
          return;
        }
        else if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get] == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
          return;
        }
      }
    }
    IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
    id<IoReactivexInternalFuseableSimpleQueue> q = inner != nil ? JreLoadVolatileId(&inner->queue_) : nil;
    if (q != nil) {
      if (JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *) nil_chk(inner))->done_)) {
        if (!delayErrors_) {
          JavaLangThrowable *err = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
          if (err != nil) {
            [self disposeInner];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
            return;
          }
          else if ([q isEmpty]) {
            [active_ compareAndSetWithId:inner withId:nil];
            continue;
          }
        }
        else {
          if ([q isEmpty]) {
            [active_ compareAndSetWithId:inner withId:nil];
            continue;
          }
        }
      }
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong e = 0LL;
      jboolean retry = false;
      while (e != r) {
        if (JreLoadVolatileBoolean(&cancelled_)) {
          return;
        }
        jboolean d = JreLoadVolatileBoolean(&inner->done_);
        id v;
        @try {
          v = [q poll];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [inner cancel];
          [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:ex];
          d = true;
          v = nil;
        }
        jboolean empty = v == nil;
        if (inner != [active_ get]) {
          retry = true;
          break;
        }
        if (d) {
          if (!delayErrors_) {
            JavaLangThrowable *err = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
            if (err != nil) {
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
              return;
            }
            else if (empty) {
              [active_ compareAndSetWithId:inner withId:nil];
              retry = true;
              break;
            }
          }
          else {
            if (empty) {
              [active_ compareAndSetWithId:inner withId:nil];
              retry = true;
              break;
            }
          }
        }
        if (empty) {
          break;
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
        e++;
      }
      if (e != 0LL) {
        if (!JreLoadVolatileBoolean(&cancelled_)) {
          if (r != JavaLangLong_MAX_VALUE) {
            [requested_ addAndGetWithLong:-e];
          }
          [((id<OrgReactivestreamsSubscription>) nil_chk([inner get])) requestWithLong:e];
        }
      }
      if (retry) {
        continue;
      }
    }
    missing = [self addAndGetWithInt:-missing];
    if (missing == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(error_);
  RELEASE_(s_);
  RELEASE_(active_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(disposeInner);
  methods[8].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "active_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "CANCELLED", "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 14, 15, -1 },
    { "unique_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;IZ", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IZ)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber<TT;TR;>;>;", &IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED, "Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber<Ljava/lang/Object;Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber = { "SwitchMapSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 13, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber class]) {
    {
      JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED, new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(nil, -1LL, 1));
      [IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED cancel];
    }
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->active_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber:(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *)parent
                                                                                         withLong:(jlong)index
                                                                                          withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(self, parent, index, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        JreAssignVolatileBoolean(&done_, true);
        [((IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *) nil_chk(parent_)) drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
        return;
      }
    }
    JreVolatileStrongAssign(&queue_, create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(bufferSize_));
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
  }
}

- (void)onNextWithId:(id)t {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *p = parent_;
  if (index_ == JreLoadVolatileLong(&((IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *) nil_chk(p))->unique_)) {
    if (fusionMode_ == IoReactivexInternalFuseableQueueFuseable_NONE && ![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(JreLoadVolatileId(&queue_))) offerWithId:t]) {
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!")];
      return;
    }
    [p drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *p = parent_;
  if (index_ == JreLoadVolatileLong(&((IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *) nil_chk(p))->unique_) && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(p->error_)) addThrowableWithJavaLangThrowable:t]) {
    if (!p->delayErrors_) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(p->s_)) cancel];
    }
    JreAssignVolatileBoolean(&done_, true);
    [p drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *p = parent_;
  if (index_ == JreLoadVolatileLong(&((IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *) nil_chk(p))->unique_)) {
    JreAssignVolatileBoolean(&done_, true);
    [p drain];
  }
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 10, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "fusionMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;JI", "(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber<TT;TR;>;JI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber<TT;TR;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableSwitchMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber = { "SwitchMapInnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 7, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_, parent, index, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_, parent, index, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber)
