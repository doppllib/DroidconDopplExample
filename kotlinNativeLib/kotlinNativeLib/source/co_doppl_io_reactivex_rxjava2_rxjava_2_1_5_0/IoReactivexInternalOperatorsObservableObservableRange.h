//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableRange
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableRange

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRange_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRange))
#define IoReactivexInternalOperatorsObservableObservableRange_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@class JavaLangInteger;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRange : IoReactivexObservable

#pragma mark Public

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)count;

- (JavaLangInteger *)blockingFirst;

- (JavaLangInteger *)blockingFirstWithId:(JavaLangInteger *)arg0;

- (JavaLangInteger *)blockingLast;

- (JavaLangInteger *)blockingLastWithId:(JavaLangInteger *)arg0;

- (JavaLangInteger *)blockingSingle;

- (JavaLangInteger *)blockingSingleWithId:(JavaLangInteger *)arg0;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)o;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRange)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRange_initWithInt_withInt_(IoReactivexInternalOperatorsObservableObservableRange *self, jint start, jint count);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRange *new_IoReactivexInternalOperatorsObservableObservableRange_initWithInt_withInt_(jint start, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRange *create_IoReactivexInternalOperatorsObservableObservableRange_initWithInt_withInt_(jint start, jint count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRange)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable))
#define IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable_

#define RESTRICT_IoReactivexInternalObserversBasicIntQueueDisposable 1
#define INCLUDE_IoReactivexInternalObserversBasicIntQueueDisposable 1
#include "IoReactivexInternalObserversBasicIntQueueDisposable.h"

@class JavaLangInteger;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable : IoReactivexInternalObserversBasicIntQueueDisposable {
 @public
  id<IoReactivexObserver> actual_;
  jlong end_;
  jlong index_;
  jboolean fused_;
}

#pragma mark Public

- (void)clear;

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (jboolean)isEqual:(id)obj;

- (JavaLangInteger * __nullable)poll;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)start
                                   withLong:(jlong)end;

- (void)run;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable, actual_, id<IoReactivexObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable_initWithIoReactivexObserver_withLong_withLong_(IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable *self, id<IoReactivexObserver> actual, jlong start, jlong end);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable *new_IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable_initWithIoReactivexObserver_withLong_withLong_(id<IoReactivexObserver> actual, jlong start, jlong end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable *create_IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable_initWithIoReactivexObserver_withLong_withLong_(id<IoReactivexObserver> actual, jlong start, jlong end);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRange_RangeDisposable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRange")
