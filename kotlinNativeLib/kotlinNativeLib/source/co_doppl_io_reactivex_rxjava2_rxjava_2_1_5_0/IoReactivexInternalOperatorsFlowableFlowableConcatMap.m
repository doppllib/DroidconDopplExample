//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableConcatMap.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScalarXMap.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionArbiter.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport : NSObject

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_serialVersionUID -3511336836796789179LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_serialVersionUID 7898995095634264146LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_serialVersionUID -2945777694260521066LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_serialVersionUID 897683679971470653LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)prefetch
       withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(self, source, mapper, prefetch, errorMode);
  return self;
}

+ (id<OrgReactivestreamsSubscriber>)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                                             withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                      withInt:(jint)prefetch
                                         withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  return IoReactivexInternalOperatorsFlowableFlowableConcatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(s, mapper, prefetch, errorMode);
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(source_, s, mapper_)) {
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:IoReactivexInternalOperatorsFlowableFlowableConcatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(s, mapper_, prefetch_, errorMode_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgReactivestreamsSubscriber;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[2].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;ILIoReactivexInternalUtilErrorMode;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;ILio/reactivex/internal/util/ErrorMode;)V", "subscribe", "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;ILIoReactivexInternalUtilErrorMode;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;ILio/reactivex/internal/util/ErrorMode;)Lorg/reactivestreams/Subscriber<TT;>;", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber;LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate;LIoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription;LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed;LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport;LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap = { "FlowableConcatMap", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 9, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsFlowableFlowableConcatMap *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, errorMode);
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap *new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, prefetch, errorMode)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap *create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, prefetch, errorMode)
}

id<OrgReactivestreamsSubscriber> IoReactivexInternalOperatorsFlowableFlowableConcatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(id<OrgReactivestreamsSubscriber> s, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_initialize();
  switch ([errorMode ordinal]) {
    case IoReactivexInternalUtilErrorMode_Enum_BOUNDARY:
    return create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(s, mapper, prefetch, false);
    case IoReactivexInternalUtilErrorMode_Enum_END:
    return create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(s, mapper, prefetch, true);
    default:
    return create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_(s, mapper, prefetch);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(innerNextWithId:);
  methods[1].selector = @selector(innerComplete);
  methods[2].selector = @selector(innerErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "innerNext", "LNSObject;", "(TT;)V", "innerError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport = { "ConcatMapSupport", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x608, 3, 0, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber

- (instancetype)initWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_initWithIoReactivexFunctionsFunction_withInt_(self, mapper, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> f = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(f)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, f);
        JreAssignVolatileBoolean(&done_, true);
        [self subscribeActual];
        [self drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, f);
        [self subscribeActual];
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_));
    [self subscribeActual];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)drain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)subscribeActual {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onNextWithId:(id)t {
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_ASYNC) {
    if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:t]) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      [self onErrorWithJavaLangThrowable:create_JavaLangIllegalStateException_initWithNSString_(@"Queue full?!")];
      return;
    }
  }
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)innerComplete {
  JreAssignVolatileBoolean(&active_, false);
  [self drain];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(inner_);
  RELEASE_(mapper_);
  RELEASE_(s_);
  RELEASE_(queue_);
  RELEASE_(errors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(drain);
  methods[3].selector = @selector(subscribeActual);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(innerComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "inner_", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumed_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFunctionsFunction;I", "(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner<TR;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport<TR;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber = { "BaseConcatMapSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 7, 13, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_initWithIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber *self, id<IoReactivexFunctionsFunction> mapper, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->mapper_, mapper);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
  JreStrongAssignAndConsume(&self->inner_, new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_(self));
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_(self, actual, mapper, prefetch);
  return self;
}

- (void)subscribeActual {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    [((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) cancel];
    if ([self getAndIncrement] == 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)innerNextWithId:(id)value {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
    if ([self compareAndSetWithInt:1 withInt:0]) {
      return;
    }
    [actual_ onErrorWithJavaLangThrowable:[((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate]];
  }
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    if ([self getAndIncrement] == 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)requestWithLong:(jlong)n {
  [((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) requestWithLong:n];
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) cancel];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
}

- (void)drain {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (!JreLoadVolatileBoolean(&active_)) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v;
        @try {
          v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) poll];
        }
        @catch (JavaLangThrowable *e) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
          [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
          return;
        }
        jboolean empty = v == nil;
        if (d && empty) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
          return;
        }
        if (!empty) {
          id<OrgReactivestreamsPublisher> p;
          @try {
            p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:v], @"The mapper returned a null Publisher");
          }
          @catch (JavaLangThrowable *e) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
            return;
          }
          if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
            jint c = consumed_ + 1;
            if (c == limit_) {
              consumed_ = 0;
              [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:c];
            }
            else {
              consumed_ = c;
            }
          }
          if ([JavaUtilConcurrentCallable_class_() isInstance:p]) {
            id<JavaUtilConcurrentCallable> callable = (id<JavaUtilConcurrentCallable>) cast_check(p, JavaUtilConcurrentCallable_class_());
            id vr;
            @try {
              vr = [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
            }
            @catch (JavaLangThrowable *e) {
              IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
              [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
              [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
            if (vr == nil) {
              continue;
            }
            if ([((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) isUnbounded]) {
              if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
                [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:vr];
                if (![self compareAndSetWithInt:1 withInt:0]) {
                  [actual_ onErrorWithJavaLangThrowable:[((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate]];
                  return;
                }
              }
              continue;
            }
            else {
              JreAssignVolatileBoolean(&active_, true);
              [inner_ setSubscriptionWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(vr, inner_)];
            }
          }
          else {
            JreAssignVolatileBoolean(&active_, true);
            [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:inner_];
          }
        }
      }
      if ([wip_ decrementAndGet] == 0) {
        break;
      }
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(subscribeActual);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(innerNextWithId:);
  methods[4].selector = @selector(innerErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;I", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;I)V", "onError", "LJavaLangThrowable;", "innerNext", "LNSObject;", "(TR;)V", "innerError", "request", "J", "Lorg/reactivestreams/Subscriber<-TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate = { "ConcatMapImmediate", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch) {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_initWithIoReactivexFunctionsFunction_withInt_(self, mapper, prefetch);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate *new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_, actual, mapper, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate *create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_, actual, mapper, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapImmediate)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription

- (instancetype)initWithId:(id)value
withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(self, value, actual);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n > 0 && !once_) {
    once_ = true;
    id<OrgReactivestreamsSubscriber> a = actual_;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:value_];
    [a onComplete];
  }
}

- (void)cancel {
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "once_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LOrgReactivestreamsSubscriber;", "(TT;Lorg/reactivestreams/Subscriber<-TT;>;)V", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "TT;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription = { "WeakScalarSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 3, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription *self, id value, id<OrgReactivestreamsSubscriber> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, value);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription *new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(id value, id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription, initWithId_withOrgReactivestreamsSubscriber_, value, actual)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription *create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(id value, id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription, initWithId_withOrgReactivestreamsSubscriber_, value, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)prefetch
                                         withBoolean:(jboolean)veryEnd {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, mapper, prefetch, veryEnd);
  return self;
}

- (void)subscribeActual {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)innerNextWithId:(id)value {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    if (!veryEnd_) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      JreAssignVolatileBoolean(&done_, true);
    }
    JreAssignVolatileBoolean(&active_, false);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)requestWithLong:(jlong)n {
  [((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) requestWithLong:n];
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) cancel];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (!JreLoadVolatileBoolean(&active_)) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        if (d && !veryEnd_) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
          if (ex != nil) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
            return;
          }
        }
        id v;
        @try {
          v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) poll];
        }
        @catch (JavaLangThrowable *e) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
          [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
          return;
        }
        jboolean empty = v == nil;
        if (d && empty) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
          if (ex != nil) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
          }
          else {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
          }
          return;
        }
        if (!empty) {
          id<OrgReactivestreamsPublisher> p;
          @try {
            p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:v], @"The mapper returned a null Publisher");
          }
          @catch (JavaLangThrowable *e) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
            return;
          }
          if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
            jint c = consumed_ + 1;
            if (c == limit_) {
              consumed_ = 0;
              [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:c];
            }
            else {
              consumed_ = c;
            }
          }
          if ([JavaUtilConcurrentCallable_class_() isInstance:p]) {
            id<JavaUtilConcurrentCallable> supplier = (id<JavaUtilConcurrentCallable>) cast_check(p, JavaUtilConcurrentCallable_class_());
            id vr;
            @try {
              vr = [((id<JavaUtilConcurrentCallable>) nil_chk(supplier)) call];
            }
            @catch (JavaLangThrowable *e) {
              IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
              [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
              [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
            if (vr == nil) {
              continue;
            }
            if ([((IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *) nil_chk(inner_)) isUnbounded]) {
              [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:vr];
              continue;
            }
            else {
              JreAssignVolatileBoolean(&active_, true);
              [inner_ setSubscriptionWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_WeakScalarSubscription_initWithId_withOrgReactivestreamsSubscriber_(vr, inner_)];
            }
          }
          else {
            JreAssignVolatileBoolean(&active_, true);
            [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:inner_];
          }
        }
      }
      if ([self decrementAndGet] == 0) {
        break;
      }
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActual);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(innerNextWithId:);
  methods[4].selector = @selector(innerErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "veryEnd_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;IZ", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IZ)V", "onError", "LJavaLangThrowable;", "innerNext", "LNSObject;", "(TR;)V", "innerError", "request", "J", "Lorg/reactivestreams/Subscriber<-TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed = { "ConcatMapDelayed", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch, jboolean veryEnd) {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_BaseConcatMapSubscriber_initWithIoReactivexFunctionsFunction_withInt_(self, mapper, prefetch);
  JreStrongAssign(&self->actual_, actual);
  self->veryEnd_ = veryEnd;
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed *new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch, jboolean veryEnd) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, prefetch, veryEnd)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed *create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint prefetch, jboolean veryEnd) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, prefetch, veryEnd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapDelayed)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport:(id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport>)parent {
  IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_(self, parent);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  [self setSubscriptionWithOrgReactivestreamsSubscription:s];
}

- (void)onNextWithId:(id)t {
  produced_++;
  [((id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport>) nil_chk(parent_)) innerNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  jlong p = produced_;
  if (p != 0LL) {
    produced_ = 0LL;
    [self producedWithLong:p];
  }
  [((id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport>) nil_chk(parent_)) innerErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  jlong p = produced_;
  if (p != 0LL) {
    produced_ = 0LL;
    [self producedWithLong:p];
  }
  [((id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport>) nil_chk(parent_)) innerComplete];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport;", "(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport<TR;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapSupport<TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMap;", "<R:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lio/reactivex/FlowableSubscriber<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner = { "ConcatMapInner", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *self, id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport> parent) {
  IoReactivexInternalSubscriptionsSubscriptionArbiter_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *new_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_(id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport> parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner, initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner *create_IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner_initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_(id<IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport> parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner, initWithIoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapSupport_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMap_ConcatMapInner)
