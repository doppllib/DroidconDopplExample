//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableObservableReplay.h"
#include "IoReactivexInternalOperatorsObservableObserverResourceWrapper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObservablesConnectableObservable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersTimed.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableReplay ()

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)onSubscribe
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:(id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)bufferFactory;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(IoReactivexInternalOperatorsObservableObservableReplay *self, id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableReplay *new_IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableReplay *create_IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory);

@interface IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier : NSObject

@end

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_serialVersionUID -533785617179540163LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_serialVersionUID 2728361546769921047LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer : NSObject

@end

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_serialVersionUID 7063189396499112664LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_Node_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_Node_serialVersionUID 245354315435971818LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_Node, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_serialVersionUID 2346567790059478686LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsObservableObservableReplay_Node *n);

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_removeFirst(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self);

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsObservableObservableReplay_Node *n);

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_serialVersionUID -5898283885385201806LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_serialVersionUID 3457957419649567404LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer () {
 @public
  IoReactivexInternalOperatorsObservableObserverResourceWrapper *srw_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer, srw_, IoReactivexInternalOperatorsObservableObserverResourceWrapper *)

@interface IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier () {
 @public
  jint bufferSize_;
}

@end

@interface IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier () {
 @public
  jint bufferSize_;
  jlong maxAge_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier, scheduler_, IoReactivexScheduler *)

@interface IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *curr_;
  id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource, curr_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource, bufferFactory_, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)

@interface IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay () {
 @public
  id<JavaUtilConcurrentCallable> connectableFactory_;
  id<IoReactivexFunctionsFunction> selector_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay, connectableFactory_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay, selector_, id<IoReactivexFunctionsFunction>)

@interface IoReactivexInternalOperatorsObservableObservableReplay_Replay () {
 @public
  IoReactivexObservablesConnectableObservable *co_;
  IoReactivexObservable *observable_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_Replay, co_, IoReactivexObservablesConnectableObservable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableReplay_Replay, observable_, IoReactivexObservable *)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableReplay)

id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> IoReactivexInternalOperatorsObservableObservableReplay_DEFAULT_UNBOUNDED_FACTORY;

@implementation IoReactivexInternalOperatorsObservableObservableReplay

+ (id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)DEFAULT_UNBOUNDED_FACTORY {
  return IoReactivexInternalOperatorsObservableObservableReplay_DEFAULT_UNBOUNDED_FACTORY;
}

+ (IoReactivexObservable *)multicastSelectorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)connectableFactory
                                          withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector {
  return IoReactivexInternalOperatorsObservableObservableReplay_multicastSelectorWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(connectableFactory, selector);
}

+ (IoReactivexObservablesConnectableObservable *)observeOnWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)co
                                                                                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexInternalOperatorsObservableObservableReplay_observeOnWithIoReactivexObservablesConnectableObservable_withIoReactivexScheduler_(co, scheduler);
}

+ (IoReactivexObservablesConnectableObservable *)createFromWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source {
  return IoReactivexInternalOperatorsObservableObservableReplay_createFromWithIoReactivexObservableSource_(source);
}

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                                                               withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withInt_(source, bufferSize);
}

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                                                              withLong:(jlong)maxAge
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(source, maxAge, unit, scheduler);
}

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                                                              withLong:(jlong)maxAge
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                                               withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(source, maxAge, unit, scheduler, bufferSize);
}

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
             withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:(id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)bufferFactory {
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(source, bufferFactory);
}

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)onSubscribe
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:(id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)bufferFactory {
  IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(self, onSubscribe, source, current, bufferFactory);
  return self;
}

- (id<IoReactivexObservableSource>)source {
  return source_;
}

- (void)dispose {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) lazySetWithId:nil];
}

- (jboolean)isDisposed {
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
  return d == nil || [d isDisposed];
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((id<IoReactivexObservableSource>) nil_chk(onSubscribe_)) subscribeWithIoReactivexObserver:observer];
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  jboolean doConnect;
  IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *ps;
  for (; ; ) {
    ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
    if (ps == nil || [ps isDisposed]) {
      id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer> buf = [((id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>) nil_chk(bufferFactory_)) call];
      IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *u = create_IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(buf);
      if (![current_ compareAndSetWithId:ps withId:u]) {
        continue;
      }
      ps = u;
    }
    doConnect = (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ps->shouldConnect_)) get] && [ps->shouldConnect_ compareAndSetWithBoolean:false withBoolean:true]);
    break;
  }
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(connection)) acceptWithId:ps];
  }
  @catch (JavaLangThrowable *ex) {
    if (doConnect) {
      [ps->shouldConnect_ compareAndSetWithBoolean:true withBoolean:false];
    }
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  if (doConnect) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:ps];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(current_);
  RELEASE_(bufferFactory_);
  RELEASE_(onSubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexObservable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 9, 10, -1, 11, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 9, 12, -1, 13, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 9, 14, -1, 15, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x8, 9, 16, -1, 17, -1, -1 },
    { NULL, NULL, 0x2, -1, 18, -1, 19, -1, -1 },
    { NULL, "LIoReactivexObservableSource;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(multicastSelectorWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(observeOnWithIoReactivexObservablesConnectableObservable:withIoReactivexScheduler:);
  methods[2].selector = @selector(createFromWithIoReactivexObservableSource:);
  methods[3].selector = @selector(createWithIoReactivexObservableSource:withInt:);
  methods[4].selector = @selector(createWithIoReactivexObservableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[5].selector = @selector(createWithIoReactivexObservableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[6].selector = @selector(createWithIoReactivexObservableSource:withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:);
  methods[7].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withJavaUtilConcurrentAtomicAtomicReference:withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:);
  methods[8].selector = @selector(source);
  methods[9].selector = @selector(dispose);
  methods[10].selector = @selector(isDisposed);
  methods[11].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[12].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 28, -1 },
    { "bufferFactory_", "LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", .constantValue.asLong = 0, 0x10, -1, -1, 29, -1 },
    { "onSubscribe_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
    { "DEFAULT_UNBOUNDED_FACTORY", "LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
  };
  static const void *ptrTable[] = { "multicastSelector", "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;", "<U:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<+Lio/reactivex/observables/ConnectableObservable<TU;>;>;Lio/reactivex/functions/Function<-Lio/reactivex/Observable<TU;>;+Lio/reactivex/ObservableSource<TR;>;>;)Lio/reactivex/Observable<TR;>;", "observeOn", "LIoReactivexObservablesConnectableObservable;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(Lio/reactivex/observables/ConnectableObservable<TT;>;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "createFrom", "LIoReactivexObservableSource;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<+TT;>;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "create", "LIoReactivexObservableSource;I", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;I)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexObservableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexObservableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexObservableSource;LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexObservableSource;LIoReactivexObservableSource;LJavaUtilConcurrentAtomicAtomicReference;LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;>;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;)V", "()Lio/reactivex/ObservableSource<TT;>;", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "Lio/reactivex/ObservableSource<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;>;", "Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;", &IoReactivexInternalOperatorsObservableObservableReplay_DEFAULT_UNBOUNDED_FACTORY, "LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;LIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver;LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;LIoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer;LIoReactivexInternalOperatorsObservableObservableReplay_Node;LIoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer;LIoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer;LIoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer;LIoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory;LIoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer;LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier;LIoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier;LIoReactivexInternalOperatorsObservableObservableReplay_ReplaySource;LIoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay;LIoReactivexInternalOperatorsObservableObservableReplay_Replay;", "<T:Ljava/lang/Object;>Lio/reactivex/observables/ConnectableObservable<TT;>;Lio/reactivex/internal/fuseable/HasUpstreamObservableSource<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay = { "ObservableReplay", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 13, 5, -1, 31, -1, 32, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableReplay class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableReplay_DEFAULT_UNBOUNDED_FACTORY, new_IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableReplay)
  }
}

@end

IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableReplay_multicastSelectorWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(connectableFactory, selector));
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_observeOnWithIoReactivexObservablesConnectableObservable_withIoReactivexScheduler_(IoReactivexObservablesConnectableObservable *co, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  IoReactivexObservable *observable = [((IoReactivexObservablesConnectableObservable *) nil_chk(co)) observeOnWithIoReactivexScheduler:scheduler];
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservablesConnectableObservable_(create_IoReactivexInternalOperatorsObservableObservableReplay_Replay_initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_(co, observable));
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_createFromWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(source, IoReactivexInternalOperatorsObservableObservableReplay_DEFAULT_UNBOUNDED_FACTORY);
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint bufferSize) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  if (bufferSize == JavaLangInteger_MAX_VALUE) {
    return IoReactivexInternalOperatorsObservableObservableReplay_createFromWithIoReactivexObservableSource_(source);
  }
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(source, create_IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier_initWithInt_(bufferSize));
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(source, maxAge, unit, scheduler, JavaLangInteger_MAX_VALUE);
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<IoReactivexObservableSource> source, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  return IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(source, create_IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(bufferSize, maxAge, unit, scheduler));
}

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservableReplay_createWithIoReactivexObservableSource_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(id<IoReactivexObservableSource> source, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  IoReactivexInternalOperatorsObservableObservableReplay_initialize();
  JavaUtilConcurrentAtomicAtomicReference *curr = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<IoReactivexObservableSource> onSubscribe = create_IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(curr, bufferFactory);
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservablesConnectableObservable_(create_IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(onSubscribe, source, curr, bufferFactory));
}

void IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(IoReactivexInternalOperatorsObservableObservableReplay *self, id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  IoReactivexObservablesConnectableObservable_init(self);
  JreStrongAssign(&self->onSubscribe_, onSubscribe);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->current_, current);
  JreStrongAssign(&self->bufferFactory_, bufferFactory);
}

IoReactivexInternalOperatorsObservableObservableReplay *new_IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_, onSubscribe, source, current, bufferFactory)
}

IoReactivexInternalOperatorsObservableObservableReplay *create_IoReactivexInternalOperatorsObservableObservableReplay_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_, onSubscribe, source, current, bufferFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", 0x401, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier = { "BufferSupplier", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x608, 1, 0, 1, -1, -1, 2, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver)

IOSObjectArray *IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED;

@implementation IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED;
}

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer:(id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>)buffer {
  IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(self, buffer);
  return self;
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED;
}

- (void)dispose {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) setWithId:IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)addWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (c == IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    IOSObjectArray *u = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, len);
    IOSObjectArray_Set(u, len, producer);
    if ([observers_ compareAndSetWithId:c withId:u]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    if (len == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if ([((IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *) nil_chk(IOSObjectArray_Get(c, i))) isEqual:producer]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *u;
    if (len == 1) {
      u = IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY;
    }
    else {
      u = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, j + 1, u, j, len - j - 1);
    }
    if ([observers_ compareAndSetWithId:c withId:u]) {
      return;
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)p {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, p)) {
    [self replay];
  }
}

- (void)onNextWithId:(id)t {
  if (!done_) {
    [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(buffer_)) nextWithId:t];
    [self replay];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(buffer_)) errorWithJavaLangThrowable:e];
    [self replayFinal];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(buffer_)) complete];
    [self replayFinal];
  }
}

- (void)replay {
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
  {
    IOSObjectArray *a__ = a;
    IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *rp = *b__++;
      [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(buffer_)) replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:rp];
    }
  }
}

- (void)replayFinal {
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED];
  {
    IOSObjectArray *a__ = a;
    IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *rp = *b__++;
      [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(buffer_)) replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:rp];
    }
  }
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(observers_);
  RELEASE_(shouldConnect_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(addWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:);
  methods[4].selector = @selector(removeWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:);
  methods[5].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(onNextWithId:);
  methods[7].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[8].selector = @selector(onComplete);
  methods[9].selector = @selector(replay);
  methods[10].selector = @selector(replayFinal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "shouldConnect_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;)V", "add", "LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;", &IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY, &IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver = { "ReplayObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 11, 7, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *self, id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer> buffer) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->buffer_, buffer);
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_EMPTY));
  JreStrongAssignAndConsume(&self->shouldConnect_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *new_IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer> buffer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver, initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_, buffer)
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *create_IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer> buffer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver, initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_, buffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver:(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *)parent
                                                                      withIoReactivexObserver:(id<IoReactivexObserver>)child {
  IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_(self, parent, child);
  return self;
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *) nil_chk(parent_)) removeWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:self];
  }
}

- (id)index {
  return index_;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(child_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver:withIoReactivexObserver:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(index);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "child_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "index_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver;LIoReactivexObserver;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;Lio/reactivex/Observer<-TT;>;)V", "<U:Ljava/lang/Object;>()TU;", "Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable = { "InnerDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 5, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *self, IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *parent, id<IoReactivexObserver> child) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->child_, child);
}

IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *new_IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *parent, id<IoReactivexObserver> child) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable, initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_, parent, child)
}

IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *create_IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *parent, id<IoReactivexObserver> child) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable, initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_, parent, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(nextWithId:);
  methods[1].selector = @selector(errorWithJavaLangThrowable:);
  methods[2].selector = @selector(complete);
  methods[3].selector = @selector(replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable<TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer = { "ReplayBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x608, 4, 0, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_initWithInt_(self, capacityHint);
  return self;
}

- (void)nextWithId:(id)value {
  [self addWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(value)];
  size_UnboundedReplayBuffer_++;
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [self addWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e)];
  size_UnboundedReplayBuffer_++;
}

- (void)complete {
  [self addWithId:IoReactivexInternalUtilNotificationLite_complete()];
  size_UnboundedReplayBuffer_++;
}

- (void)replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *)output {
  if ([((IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *) nil_chk(output)) getAndIncrement] != 0) {
    return;
  }
  id<IoReactivexObserver> child = output->child_;
  jint missed = 1;
  for (; ; ) {
    if ([output isDisposed]) {
      return;
    }
    jint sourceIndex = JreLoadVolatileInt(&size_UnboundedReplayBuffer_);
    JavaLangInteger *destinationIndexObject = [output index];
    jint destinationIndex = destinationIndexObject != nil ? [destinationIndexObject intValue] : 0;
    while (destinationIndex < sourceIndex) {
      id o = [self getWithInt:destinationIndex];
      if (IoReactivexInternalUtilNotificationLite_acceptWithId_withIoReactivexObserver_(o, child)) {
        return;
      }
      if ([output isDisposed]) {
        return;
      }
      destinationIndex++;
    }
    JreStrongAssign(&output->index_, JavaLangInteger_valueOfWithInt_(destinationIndex));
    missed = [output addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(nextWithId:);
  methods[2].selector = @selector(errorWithJavaLangThrowable:);
  methods[3].selector = @selector(complete);
  methods[4].selector = @selector(replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "size_UnboundedReplayBuffer_", "I", .constantValue.asLong = 0, 0x40, 9, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable<TT;>;)V", "size", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/util/ArrayList<Ljava/lang/Object;>;Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer = { "UnboundedReplayBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_initWithInt_(IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer *self, jint capacityHint) {
  JavaUtilArrayList_initWithInt_(self, capacityHint);
}

IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer *new_IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer *create_IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer, initWithInt_, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_Node

- (instancetype)initWithId:(id)value {
  IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(self, value);
  return self;
}

- (void)dealloc {
  RELEASE_(value_Node_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_Node_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_Node_", "LNSObject;", .constantValue.asLong = 0, 0x10, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "value", "LIoReactivexInternalOperatorsObservableObservableReplay;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$Node;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_Node = { "Node", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 1, 2, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_Node;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(IoReactivexInternalOperatorsObservableObservableReplay_Node *self, id value) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->value_Node_, value);
}

IoReactivexInternalOperatorsObservableObservableReplay_Node *new_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(id value) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_Node, initWithId_, value)
}

IoReactivexInternalOperatorsObservableObservableReplay_Node *create_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_Node, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_Node)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node:(IoReactivexInternalOperatorsObservableObservableReplay_Node *)n {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, n);
}

- (void)removeFirst {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_removeFirst(self);
}

- (void)removeSomeWithInt:(jint)n {
  IoReactivexInternalOperatorsObservableObservableReplay_Node *head = [self get];
  while (n > 0) {
    head = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(head)) get];
    n--;
    size_--;
  }
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, head);
}

- (void)setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node:(IoReactivexInternalOperatorsObservableObservableReplay_Node *)n {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, n);
}

- (void)nextWithId:(id)value {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(value)];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *n = create_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(o);
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, n);
  [self truncate];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e)];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *n = create_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(o);
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, n);
  [self truncateFinal];
}

- (void)complete {
  id o = [self enterTransformWithId:IoReactivexInternalUtilNotificationLite_complete()];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *n = create_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(o);
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, n);
  [self truncateFinal];
}

- (void)replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:(IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *)output {
  if ([((IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *) nil_chk(output)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  for (; ; ) {
    IoReactivexInternalOperatorsObservableObservableReplay_Node *node = [output index];
    if (node == nil) {
      node = [self getHead];
      JreStrongAssign(&output->index_, node);
    }
    for (; ; ) {
      if ([output isDisposed]) {
        return;
      }
      IoReactivexInternalOperatorsObservableObservableReplay_Node *v = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(node)) get];
      if (v != nil) {
        id o = [self leaveTransformWithId:v->value_Node_];
        if (IoReactivexInternalUtilNotificationLite_acceptWithId_withIoReactivexObserver_(o, output->child_)) {
          JreStrongAssign(&output->index_, nil);
          return;
        }
        node = v;
      }
      else {
        break;
      }
    }
    JreStrongAssign(&output->index_, node);
    missed = [output addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (id)enterTransformWithId:(id)value {
  return value;
}

- (id)leaveTransformWithId:(id)value {
  return value;
}

- (void)truncate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)truncateFinal {
}

- (void)collectWithJavaUtilCollection:(id<JavaUtilCollection>)output {
  IoReactivexInternalOperatorsObservableObservableReplay_Node *n = [self getHead];
  for (; ; ) {
    IoReactivexInternalOperatorsObservableObservableReplay_Node *next = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(n)) get];
    if (next != nil) {
      id o = next->value_Node_;
      id v = [self leaveTransformWithId:o];
      if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(v) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(v)) {
        break;
      }
      [((id<JavaUtilCollection>) nil_chk(output)) addWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(v)];
      n = next;
    }
    else {
      break;
    }
  }
}

- (jboolean)hasError {
  return ((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(tail_))->value_Node_ != nil && IoReactivexInternalUtilNotificationLite_isErrorWithId_([self leaveTransformWithId:tail_->value_Node_]);
}

- (jboolean)hasCompleted {
  return ((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(tail_))->value_Node_ != nil && IoReactivexInternalUtilNotificationLite_isCompleteWithId_([self leaveTransformWithId:tail_->value_Node_]);
}

- (IoReactivexInternalOperatorsObservableObservableReplay_Node *)getHead {
  return [self get];
}

- (void)dealloc {
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x0, 13, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 14, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 15, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_Node;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node:);
  methods[2].selector = @selector(removeFirst);
  methods[3].selector = @selector(removeSomeWithInt:);
  methods[4].selector = @selector(setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node:);
  methods[5].selector = @selector(nextWithId:);
  methods[6].selector = @selector(errorWithJavaLangThrowable:);
  methods[7].selector = @selector(complete);
  methods[8].selector = @selector(replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:);
  methods[9].selector = @selector(enterTransformWithId:);
  methods[10].selector = @selector(leaveTransformWithId:);
  methods[11].selector = @selector(truncate);
  methods[12].selector = @selector(truncateFinal);
  methods[13].selector = @selector(collectWithJavaUtilCollection:);
  methods[14].selector = @selector(hasError);
  methods[15].selector = @selector(hasCompleted);
  methods[16].selector = @selector(getHead);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tail_", "LIoReactivexInternalOperatorsObservableObservableReplay_Node;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addLast", "LIoReactivexInternalOperatorsObservableObservableReplay_Node;", "removeSome", "I", "setFirst", "next", "LNSObject;", "(TT;)V", "error", "LJavaLangThrowable;", "replay", "LIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable;", "(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable<TT;>;)V", "enterTransform", "leaveTransform", "collect", "LJavaUtilCollection;", "(Ljava/util/Collection<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$Node;>;Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer = { "BoundedReplayBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x408, 17, 3, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_init(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  IoReactivexInternalOperatorsObservableObservableReplay_Node *n = create_IoReactivexInternalOperatorsObservableObservableReplay_Node_initWithId_(nil);
  JreStrongAssign(&self->tail_, n);
  [self setWithId:n];
}

void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_addLastWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsObservableObservableReplay_Node *n) {
  [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(self->tail_)) setWithId:n];
  JreStrongAssign(&self->tail_, n);
  self->size_++;
}

void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_removeFirst(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self) {
  IoReactivexInternalOperatorsObservableObservableReplay_Node *head = [self get];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *next = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(head)) get];
  self->size_--;
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, next);
}

void IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer *self, IoReactivexInternalOperatorsObservableObservableReplay_Node *n) {
  [self setWithId:n];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer

- (instancetype)initWithInt:(jint)limit {
  IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_initWithInt_(self, limit);
  return self;
}

- (void)truncate {
  if (size_ > limit_) {
    IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_removeFirst(self);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(truncate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer = { "SizeBoundReplayBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 2, 1, -1, -1, 2, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_initWithInt_(IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer *self, jint limit) {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_init(self);
  self->limit_ = limit;
}

IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer *new_IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer, initWithInt_, limit)
}

IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer *create_IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer, initWithInt_, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer

- (instancetype)initWithInt:(jint)limit
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, limit, maxAge, unit, scheduler);
  return self;
}

- (id)enterTransformWithId:(id)value {
  return create_IoReactivexSchedulersTimed_initWithId_withLong_withJavaUtilConcurrentTimeUnit_(value, [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_], unit_);
}

- (id)leaveTransformWithId:(id)value {
  return [((IoReactivexSchedulersTimed *) nil_chk(((IoReactivexSchedulersTimed *) cast_chk(value, [IoReactivexSchedulersTimed class])))) value];
}

- (void)truncate {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsObservableObservableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *next = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(prev)) get];
  jint e = 0;
  for (; ; ) {
    if (next != nil) {
      if (size_ > limit_) {
        e++;
        size_--;
        prev = next;
        next = [next get];
      }
      else {
        IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
        if ([((IoReactivexSchedulersTimed *) nil_chk(v)) time] <= timeLimit) {
          e++;
          size_--;
          prev = next;
          next = [next get];
        }
        else {
          break;
        }
      }
    }
    else {
      break;
    }
  }
  if (e != 0) {
    IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, prev);
  }
}

- (void)truncateFinal {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsObservableObservableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *next = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(prev)) get];
  jint e = 0;
  for (; ; ) {
    if (next != nil && size_ > 1) {
      IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
      if ([((IoReactivexSchedulersTimed *) nil_chk(v)) time] <= timeLimit) {
        e++;
        size_--;
        prev = next;
        next = [next get];
      }
      else {
        break;
      }
    }
    else {
      break;
    }
  }
  if (e != 0) {
    IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_setFirstWithIoReactivexInternalOperatorsObservableObservableReplay_Node_(self, prev);
  }
}

- (IoReactivexInternalOperatorsObservableObservableReplay_Node *)getHead {
  jlong timeLimit = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - maxAge_;
  IoReactivexInternalOperatorsObservableObservableReplay_Node *prev = [self get];
  IoReactivexInternalOperatorsObservableObservableReplay_Node *next = [((IoReactivexInternalOperatorsObservableObservableReplay_Node *) nil_chk(prev)) get];
  for (; ; ) {
    if (next == nil) {
      break;
    }
    IoReactivexSchedulersTimed *v = (IoReactivexSchedulersTimed *) cast_chk(next->value_Node_, [IoReactivexSchedulersTimed class]);
    if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_([((IoReactivexSchedulersTimed *) nil_chk(v)) value]) || IoReactivexInternalUtilNotificationLite_isErrorWithId_([v value])) {
      break;
    }
    if ([v time] <= timeLimit) {
      prev = next;
      next = [next get];
    }
    else {
      break;
    }
  }
  return prev;
}

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_Node;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(enterTransformWithId:);
  methods[2].selector = @selector(leaveTransformWithId:);
  methods[3].selector = @selector(truncate);
  methods[4].selector = @selector(truncateFinal);
  methods[5].selector = @selector(getHead);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "enterTransform", "LNSObject;", "leaveTransform", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer = { "SizeAndTimeBoundReplayBuffer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 5, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer *self, jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableObservableReplay_BoundedReplayBuffer_init(self);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->limit_ = limit;
  self->maxAge_ = maxAge;
  JreStrongAssign(&self->unit_, unit);
}

IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer *new_IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, limit, maxAge, unit, scheduler)
}

IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer *create_IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint limit, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, limit, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>)call {
  return create_IoReactivexInternalOperatorsObservableObservableReplay_UnboundedReplayBuffer_initWithInt_(16);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory = { "UnBoundedFactory", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x18, 2, 0, 1, -1, -1, 2, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory_init(IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory *self) {
  NSObject_init(self);
}

IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory *new_IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory, init)
}

IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory *create_IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_UnBoundedFactory)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer

- (instancetype)initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper:(IoReactivexInternalOperatorsObservableObserverResourceWrapper *)srw {
  IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_(self, srw);
  return self;
}

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)r {
  [((IoReactivexInternalOperatorsObservableObserverResourceWrapper *) nil_chk(srw_)) setResourceWithIoReactivexDisposablesDisposable:r];
}

- (void)dealloc {
  RELEASE_(srw_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper:);
  methods[1].selector = @selector(acceptWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "srw_", "LIoReactivexInternalOperatorsObservableObserverResourceWrapper;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObserverResourceWrapper;", "(Lio/reactivex/internal/operators/observable/ObserverResourceWrapper<TR;>;)V", "accept", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/operators/observable/ObserverResourceWrapper<TR;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer = { "DisposeConsumer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 1, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_(IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer *self, IoReactivexInternalOperatorsObservableObserverResourceWrapper *srw) {
  NSObject_init(self);
  JreStrongAssign(&self->srw_, srw);
}

IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer *new_IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_(IoReactivexInternalOperatorsObservableObserverResourceWrapper *srw) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer, initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_, srw)
}

IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer *create_IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_(IoReactivexInternalOperatorsObservableObserverResourceWrapper *srw) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer, initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_, srw)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier

- (instancetype)initWithInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier_initWithInt_(self, bufferSize);
  return self;
}

- (id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>)call {
  return create_IoReactivexInternalOperatorsObservableObservableReplay_SizeBoundReplayBuffer_initWithInt_(bufferSize_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier = { "ReplayBufferSupplier", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 1, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier_initWithInt_(IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier *self, jint bufferSize) {
  NSObject_init(self);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier *new_IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier_initWithInt_(jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier, initWithInt_, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier *create_IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier_initWithInt_(jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier, initWithInt_, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_ReplayBufferSupplier)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier

- (instancetype)initWithInt:(jint)bufferSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, bufferSize, maxAge, unit, scheduler);
  return self;
}

- (id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>)call {
  return create_IoReactivexInternalOperatorsObservableObservableReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(bufferSize_, maxAge_, unit_, scheduler_);
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxAge_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "()Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayBuffer<TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier = { "ScheduledReplaySupplier", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 4, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier *self, jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  NSObject_init(self);
  self->bufferSize_ = bufferSize;
  self->maxAge_ = maxAge;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier *new_IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, bufferSize, maxAge, unit, scheduler)
}

IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier *create_IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint bufferSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, bufferSize, maxAge, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_ScheduledReplaySupplier)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)curr
withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:(id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>)bufferFactory {
  IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(self, curr, bufferFactory);
  return self;
}

- (void)subscribeWithIoReactivexObserver:(id<IoReactivexObserver>)child {
  for (; ; ) {
    IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(curr_)) get];
    if (r == nil) {
      id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer> buf = [((id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier>) nil_chk(bufferFactory_)) call];
      IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver *u = create_IoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer_(buf);
      if (![curr_ compareAndSetWithId:nil withId:u]) {
        continue;
      }
      r = u;
    }
    IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable *inner = create_IoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable_initWithIoReactivexInternalOperatorsObservableObservableReplay_ReplayObserver_withIoReactivexObserver_(r, child);
    [((id<IoReactivexObserver>) nil_chk(child)) onSubscribeWithIoReactivexDisposablesDisposable:inner];
    [r addWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:inner];
    if ([inner isDisposed]) {
      [r removeWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:inner];
      return;
    }
    [((id<IoReactivexInternalOperatorsObservableObservableReplay_ReplayBuffer>) nil_chk(r->buffer_)) replayWithIoReactivexInternalOperatorsObservableObservableReplay_InnerDisposable:inner];
    break;
  }
}

- (void)dealloc {
  RELEASE_(curr_);
  RELEASE_(bufferFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier:);
  methods[1].selector = @selector(subscribeWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curr_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "bufferFactory_", "LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;LIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;>;Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;)V", "subscribe", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver<TT;>;>;", "Lio/reactivex/internal/operators/observable/ObservableReplay$BufferSupplier<TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/ObservableSource<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource = { "ReplaySource", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource *self, JavaUtilConcurrentAtomicAtomicReference *curr, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->curr_, curr);
  JreStrongAssign(&self->bufferFactory_, bufferFactory);
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource *new_IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(JavaUtilConcurrentAtomicAtomicReference *curr, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource, initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_, curr, bufferFactory)
}

IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource *create_IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_(JavaUtilConcurrentAtomicAtomicReference *curr, id<IoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier> bufferFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource, initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexInternalOperatorsObservableObservableReplay_BufferSupplier_, curr, bufferFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_ReplaySource)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)connectableFactory
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector {
  IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(self, connectableFactory, selector);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)child {
  IoReactivexObservablesConnectableObservable *co;
  id<IoReactivexObservableSource> observable;
  @try {
    co = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(connectableFactory_)) call], @"The connectableFactory returned a null ConnectableObservable");
    observable = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(selector_)) applyWithId:co], @"The selector returned a null ObservableSource");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, child);
    return;
  }
  IoReactivexInternalOperatorsObservableObserverResourceWrapper *srw = create_IoReactivexInternalOperatorsObservableObserverResourceWrapper_initWithIoReactivexObserver_(child);
  [((id<IoReactivexObservableSource>) nil_chk(observable)) subscribeWithIoReactivexObserver:srw];
  [((IoReactivexObservablesConnectableObservable *) nil_chk(co)) connectWithIoReactivexFunctionsConsumer:create_IoReactivexInternalOperatorsObservableObservableReplay_DisposeConsumer_initWithIoReactivexInternalOperatorsObservableObserverResourceWrapper_(srw)];
}

- (void)dealloc {
  RELEASE_(connectableFactory_);
  RELEASE_(selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "connectableFactory_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "selector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;", "(Ljava/util/concurrent/Callable<+Lio/reactivex/observables/ConnectableObservable<TU;>;>;Lio/reactivex/functions/Function<-Lio/reactivex/Observable<TU;>;+Lio/reactivex/ObservableSource<TR;>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "Ljava/util/concurrent/Callable<+Lio/reactivex/observables/ConnectableObservable<TU;>;>;", "Lio/reactivex/functions/Function<-Lio/reactivex/Observable<TU;>;+Lio/reactivex/ObservableSource<TR;>;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<R:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Observable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay = { "MulticastReplay", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay *self, id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->connectableFactory_, connectableFactory);
  JreStrongAssign(&self->selector_, selector);
}

IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay *new_IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_, connectableFactory, selector)
}

IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay *create_IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_(id<JavaUtilConcurrentCallable> connectableFactory, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_, connectableFactory, selector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_MulticastReplay)

@implementation IoReactivexInternalOperatorsObservableObservableReplay_Replay

- (instancetype)initWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)co
                                          withIoReactivexObservable:(IoReactivexObservable *)observable {
  IoReactivexInternalOperatorsObservableObservableReplay_Replay_initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_(self, co, observable);
  return self;
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  [((IoReactivexObservablesConnectableObservable *) nil_chk(co_)) connectWithIoReactivexFunctionsConsumer:connection];
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((IoReactivexObservable *) nil_chk(observable_)) subscribeWithIoReactivexObserver:observer];
}

- (void)dealloc {
  RELEASE_(co_);
  RELEASE_(observable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservablesConnectableObservable:withIoReactivexObservable:);
  methods[1].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  methods[2].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "co_", "LIoReactivexObservablesConnectableObservable;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "observable_", "LIoReactivexObservable;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservablesConnectableObservable;LIoReactivexObservable;", "(Lio/reactivex/observables/ConnectableObservable<TT;>;Lio/reactivex/Observable<TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/observables/ConnectableObservable<TT;>;", "Lio/reactivex/Observable<TT;>;", "LIoReactivexInternalOperatorsObservableObservableReplay;", "<T:Ljava/lang/Object;>Lio/reactivex/observables/ConnectableObservable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableReplay_Replay = { "Replay", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 3, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableReplay_Replay;
}

@end

void IoReactivexInternalOperatorsObservableObservableReplay_Replay_initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_(IoReactivexInternalOperatorsObservableObservableReplay_Replay *self, IoReactivexObservablesConnectableObservable *co, IoReactivexObservable *observable) {
  IoReactivexObservablesConnectableObservable_init(self);
  JreStrongAssign(&self->co_, co);
  JreStrongAssign(&self->observable_, observable);
}

IoReactivexInternalOperatorsObservableObservableReplay_Replay *new_IoReactivexInternalOperatorsObservableObservableReplay_Replay_initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_(IoReactivexObservablesConnectableObservable *co, IoReactivexObservable *observable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_Replay, initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_, co, observable)
}

IoReactivexInternalOperatorsObservableObservableReplay_Replay *create_IoReactivexInternalOperatorsObservableObservableReplay_Replay_initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_(IoReactivexObservablesConnectableObservable *co, IoReactivexObservable *observable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableReplay_Replay, initWithIoReactivexObservablesConnectableObservable_withIoReactivexObservable_, co, observable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableReplay_Replay)
