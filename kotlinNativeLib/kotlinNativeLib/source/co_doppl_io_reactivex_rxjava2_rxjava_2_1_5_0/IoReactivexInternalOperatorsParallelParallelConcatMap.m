//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableConcatMap.h"
#include "IoReactivexInternalOperatorsParallelParallelConcatMap.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"

@implementation IoReactivexInternalOperatorsParallelParallelConcatMap

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                    withInt:(jint)prefetch
                       withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(self, source, mapper, prefetch, errorMode);
  return self;
}

- (jint)parallelism {
  return [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism];
}

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  if (![self validateWithOrgReactivestreamsSubscriberArray:subscribers]) {
    return;
  }
  jint n = ((IOSObjectArray *) nil_chk(subscribers))->size_;
  IOSObjectArray *parents = [IOSObjectArray arrayWithLength:n type:OrgReactivestreamsSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_Set(parents, i, IoReactivexInternalOperatorsFlowableFlowableConcatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IOSObjectArray_Get(subscribers, i), mapper_, prefetch_, errorMode_));
  }
  [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriberArray:parents];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexParallelParallelFlowable:withIoReactivexFunctionsFunction:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(parallelism);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexParallelParallelFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexParallelParallelFlowable;LIoReactivexFunctionsFunction;ILIoReactivexInternalUtilErrorMode;", "(Lio/reactivex/parallel/ParallelFlowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;ILio/reactivex/internal/util/ErrorMode;)V", "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/parallel/ParallelFlowable<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/parallel/ParallelFlowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelConcatMap = { "ParallelConcatMap", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelConcatMap;
}

@end

void IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsParallelParallelConcatMap *self, IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  IoReactivexParallelParallelFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(mapper, @"mapper"));
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(errorMode, @"errorMode"));
}

IoReactivexInternalOperatorsParallelParallelConcatMap *new_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelConcatMap, initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, prefetch, errorMode)
}

IoReactivexInternalOperatorsParallelParallelConcatMap *create_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelConcatMap, initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, prefetch, errorMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelConcatMap)
