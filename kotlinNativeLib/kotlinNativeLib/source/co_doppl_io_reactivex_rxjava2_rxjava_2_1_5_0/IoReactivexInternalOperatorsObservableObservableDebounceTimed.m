//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableDebounceTimed.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_serialVersionUID 6812032969491025141LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableDebounceTimed

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableDebounceTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, source, timeout, unit, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), timeout_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker])];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lio/reactivex/ObservableSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver;LIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDebounceTimed = { "ObservableDebounceTimed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDebounceTimed;
}

@end

void IoReactivexInternalOperatorsObservableObservableDebounceTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableDebounceTimed *self, id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed *new_IoReactivexInternalOperatorsObservableObservableDebounceTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed, initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, source, timeout, unit, scheduler)
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed *create_IoReactivexInternalOperatorsObservableObservableDebounceTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed, initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, source, timeout, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDebounceTimed)

@implementation IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(self, actual, timeout, unit, worker);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get];
  if (d != nil) {
    [d dispose];
  }
  IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *de = create_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_(t, idx, self);
  if ([timer_ compareAndSetWithId:d withId:de]) {
    d = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:de withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
    [de setResourceWithIoReactivexDisposablesDisposable:d];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get];
  if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *de = (IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *) cast_chk(d, [IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter class]);
    if (de != nil) {
      [de run];
    }
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
    [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(worker_)) isDisposed];
}

- (void)emitWithLong:(jlong)idx
              withId:(id)t
withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter:(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *)emitter {
  if (idx == JreLoadVolatileLong(&index_)) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
    [((IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *) nil_chk(emitter)) dispose];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(s_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(emitWithLong:withId:withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "timer_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;", "(Lio/reactivex/Observer<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "emit", "JLNSObject;LIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter;", "(JTT;Lio/reactivex/internal/operators/observable/ObservableDebounceTimed$DebounceEmitter<TT;>;)V", "Lio/reactivex/Observer<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservableDebounceTimed;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver = { "DebounceTimedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 8, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *new_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *create_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter

- (instancetype)initWithId:(id)value
                  withLong:(jlong)idx
withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver:(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_(self, value, idx, parent);
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *) nil_chk(parent_)) emitWithLong:idx_ withId:value_DebounceEmitter_ withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter:self];
  }
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return [self get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (void)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)dealloc {
  RELEASE_(value_DebounceEmitter_);
  RELEASE_(parent_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withLong:withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(setResourceWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_DebounceEmitter_", "LNSObject;", .constantValue.asLong = 0, 0x10, 4, -1, 5, -1 },
    { "idx_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;JLIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver;", "(TT;JLio/reactivex/internal/operators/observable/ObservableDebounceTimed$DebounceTimedObserver<TT;>;)V", "setResource", "LIoReactivexDisposablesDisposable;", "value", "TT;", "Lio/reactivex/internal/operators/observable/ObservableDebounceTimed$DebounceTimedObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableDebounceTimed;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter = { "DebounceEmitter", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 5, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter;
}

@end

void IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *self, id value, jlong idx, IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssign(&self->value_DebounceEmitter_, value);
  self->idx_ = idx;
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *new_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_(id value, jlong idx, IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter, initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_, value, idx, parent)
}

IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter *create_IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter_initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_(id value, jlong idx, IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter, initWithId_withLong_withIoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceTimedObserver_, value, idx, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDebounceTimed_DebounceEmitter)
