//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableMergeIterable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_serialVersionUID -7730517613164279224LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources {
  IoReactivexInternalOperatorsCompletableCompletableMergeIterable_initWithJavaLangIterable_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  id<JavaUtilIterator> iterator;
  @try {
    iterator = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaLangIterable>) nil_chk(sources_)) iterator], @"The source iterator returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [s onErrorWithJavaLangThrowable:e];
    return;
  }
  JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1);
  IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver *shared = create_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_(s, set, wip);
  for (; ; ) {
    if ([set isDisposed]) {
      return;
    }
    jboolean b;
    @try {
      b = [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [set dispose];
      [shared onErrorWithJavaLangThrowable:e];
      return;
    }
    if (!b) {
      break;
    }
    if ([set isDisposed]) {
      return;
    }
    id<IoReactivexCompletableSource> c;
    @try {
      c = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([iterator next], @"The iterator returned a null CompletableSource");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [set dispose];
      [shared onErrorWithJavaLangThrowable:e];
      return;
    }
    if ([set isDisposed]) {
      return;
    }
    [wip getAndIncrement];
    [((id<IoReactivexCompletableSource>) nil_chk(c)) subscribeWithIoReactivexCompletableObserver:shared];
  }
  [shared onComplete];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeIterable = { "CompletableMergeIterable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeIterable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsCompletableCompletableMergeIterable *self, id<JavaLangIterable> sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableMergeIterable *new_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeIterable, initWithJavaLangIterable_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableMergeIterable *create_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeIterable, initWithJavaLangIterable_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeIterable)

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
         withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
             withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)wip {
  IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_(self, actual, set, wip);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] == 0) {
    if ([self compareAndSetWithBoolean:false withBoolean:true]) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
    }
  }
}

- (void)dealloc {
  RELEASE_(set_);
  RELEASE_(actual_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexDisposablesCompositeDisposable:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexDisposablesCompositeDisposable;LJavaUtilConcurrentAtomicAtomicInteger;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableMergeIterable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver = { "MergeCompletableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 4, 4, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_(IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver *self, id<IoReactivexCompletableObserver> actual, IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->set_, set);
  JreStrongAssign(&self->wip_, wip);
}

IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver *new_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_(id<IoReactivexCompletableObserver> actual, IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_, actual, set, wip)
}

IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver *create_IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_(id<IoReactivexCompletableObserver> actual, IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicInteger_, actual, set, wip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeIterable_MergeCompletableObserver)
