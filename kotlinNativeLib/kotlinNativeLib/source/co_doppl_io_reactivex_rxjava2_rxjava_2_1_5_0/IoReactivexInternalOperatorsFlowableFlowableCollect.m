//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsBiConsumer.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCollect.h"
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_serialVersionUID -3589550218733891694LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableCollect

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
         withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector {
  IoReactivexInternalOperatorsFlowableFlowableCollect_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(self, source, initialSupplier, collector);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  id u;
  @try {
    u = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(initialSupplier_)) call], @"The initial value supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(s, u, collector_)];
}

- (void)dealloc {
  RELEASE_(initialSupplier_);
  RELEASE_(collector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withJavaUtilConcurrentCallable:withIoReactivexFunctionsBiConsumer:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initialSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "collector_", "LIoReactivexFunctionsBiConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiConsumer;", "(Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<+TU;>;Lio/reactivex/functions/BiConsumer<-TU;-TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Ljava/util/concurrent/Callable<+TU;>;", "Lio/reactivex/functions/BiConsumer<-TU;-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCollect = { "FlowableCollect", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCollect;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCollect_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollect *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->initialSupplier_, initialSupplier);
  JreStrongAssign(&self->collector_, collector);
}

IoReactivexInternalOperatorsFlowableFlowableCollect *new_IoReactivexInternalOperatorsFlowableFlowableCollect_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollect, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_, source, initialSupplier, collector)
}

IoReactivexInternalOperatorsFlowableFlowableCollect *create_IoReactivexInternalOperatorsFlowableFlowableCollect_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollect, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_, source, initialSupplier, collector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCollect)

@implementation IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                              withId:(id)u
                  withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector {
  IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(self, actual, u, collector);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  @try {
    [((id<IoReactivexFunctionsBiConsumer>) nil_chk(collector_)) acceptWithId:u_ withId:t];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:e];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [self completeWithId:u_];
}

- (void)cancel {
  [super cancel];
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(collector_);
  RELEASE_(u_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withId:withIoReactivexFunctionsBiConsumer:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "collector_", "LIoReactivexFunctionsBiConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "u_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LNSObject;LIoReactivexFunctionsBiConsumer;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;Lio/reactivex/functions/BiConsumer<-TU;-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/functions/BiConsumer<-TU;-TT;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableCollect;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/DeferredScalarSubscription<TU;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber = { "CollectSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  IoReactivexInternalSubscriptionsDeferredScalarSubscription_initWithOrgReactivestreamsSubscriber_(self, actual);
  JreStrongAssign(&self->collector_, collector);
  JreStrongAssign(&self->u_, u);
}

IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_, actual, u, collector)
}

IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_, actual, u, collector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber)
