//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableSubscribeOn.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_serialVersionUID 7000911171163930287LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsCompletableCompletableSubscribeOn

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *parent = create_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(s, source_);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  id<IoReactivexDisposablesDisposable> f = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:parent];
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(parent->task_)) replaceWithIoReactivexDisposablesDisposable:f];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;LIoReactivexScheduler;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableSubscribeOn = { "CompletableSubscribeOn", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *self, id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *new_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn, initWithIoReactivexCompletableSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *create_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn, initWithIoReactivexCompletableSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn)

@implementation IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                      withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source {
  IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(self, actual, source);
  return self;
}

- (void)run {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:self];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(task_)) dispose];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(task_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexCompletableSource:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "task_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexCompletableSource;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableSubscribeOn;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver = { "SubscribeOnObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 7, 4, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *self, id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->task_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *new_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_, actual, source)
}

IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *create_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_, actual, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver)
