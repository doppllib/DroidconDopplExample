//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableToList.h"
#include "IoReactivexInternalOperatorsFlowableFlowableToListSingle.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilArrayListSupplier.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsFlowableFlowableToListSingle

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_(self, source);
  return self;
}

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier {
  IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(self, source, collectionSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  id<JavaUtilCollection> coll;
  @try {
    coll = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(collectionSupplier_)) call], @"The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(e, s);
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber_initWithIoReactivexSingleObserver_withJavaUtilCollection_(s, coll)];
}

- (IoReactivexFlowable *)fuseToFlowable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableToList_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(source_, collectionSupplier_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(collectionSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, 6, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:);
  methods[1].selector = @selector(initWithIoReactivexFlowable:withJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  methods[3].selector = @selector(fuseToFlowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "collectionSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;", "(Lio/reactivex/Flowable<TT;>;)V", "LIoReactivexFlowable;LJavaUtilConcurrentCallable;", "(Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TU;>;)V", "()Lio/reactivex/Flowable<TU;>;", "Lio/reactivex/Flowable<TT;>;", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/Single<TU;>;Lio/reactivex/internal/fuseable/FuseToFlowable<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableToListSingle = { "FlowableToListSingle", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, 10, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableToListSingle;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableToListSingle *self, IoReactivexFlowable *source) {
  IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(self, source, IoReactivexInternalUtilArrayListSupplier_asCallable());
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle *new_IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle, initWithIoReactivexFlowable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle *create_IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle, initWithIoReactivexFlowable_, source)
}

void IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableToListSingle *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->collectionSupplier_, collectionSupplier);
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle *new_IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_, source, collectionSupplier)
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle *create_IoReactivexInternalOperatorsFlowableFlowableToListSingle_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_, source, collectionSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableToListSingle)

@implementation IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                           withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber_initWithIoReactivexSingleObserver_withJavaUtilCollection_(self, actual, collection);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(JreLoadVolatileId(&self->s_), s)) {
    JreVolatileStrongAssign(&self->s_, s);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilCollection>) nil_chk(value_)) addWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&value_, nil);
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value_];
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
}

- (jboolean)isDisposed {
  return JreLoadVolatileId(&s_) == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&s_, &original->s_);
}

- (void)dealloc {
  RELEASE_(actual_);
  JreReleaseVolatile(&s_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withJavaUtilCollection:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "value_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LJavaUtilCollection;", "(Lio/reactivex/SingleObserver<-TU;>;TU;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TU;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableToListSingle;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber = { "ToListSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber_initWithIoReactivexSingleObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber *self, id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->value_, collection);
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber, initWithIoReactivexSingleObserver_withJavaUtilCollection_, actual, collection)
}

IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber, initWithIoReactivexSingleObserver_withJavaUtilCollection_, actual, collection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableToListSingle_ToListSubscriber)
