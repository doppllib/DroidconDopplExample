//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeErrorCallable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeErrorCallable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeErrorCallable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeErrorCallable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeErrorCallable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeErrorCallable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeErrorCallable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeErrorCallable))
#define IoReactivexInternalOperatorsMaybeMaybeErrorCallable_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

@protocol IoReactivexMaybeObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsMaybeMaybeErrorCallable : IoReactivexMaybe {
 @public
  id<JavaUtilConcurrentCallable> errorSupplier_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)errorSupplier;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeErrorCallable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeErrorCallable, errorSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeErrorCallable_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsMaybeMaybeErrorCallable *self, id<JavaUtilConcurrentCallable> errorSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeErrorCallable *new_IoReactivexInternalOperatorsMaybeMaybeErrorCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeErrorCallable *create_IoReactivexInternalOperatorsMaybeMaybeErrorCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeErrorCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeErrorCallable")
