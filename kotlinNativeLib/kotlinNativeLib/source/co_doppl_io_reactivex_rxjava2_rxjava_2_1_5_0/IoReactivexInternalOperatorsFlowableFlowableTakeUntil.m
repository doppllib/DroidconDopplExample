//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableTakeUntil.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilHalfSerializer.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_serialVersionUID -4945480365982832967LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_serialVersionUID -3592821756711087922LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableTakeUntil

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(self, source, other);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *parent = create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(child);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onSubscribeWithOrgReactivestreamsSubscription:parent];
  [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:parent->other_];
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:parent];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<+TU;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTakeUntil = { "FlowableTakeUntil", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTakeUntil;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_, source, other)
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTakeUntil)

@implementation IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredSetOnceWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withOrgReactivestreamsSubscription_(self->s_, requested_, s);
}

- (void)onNextWithId:(id)t {
  IoReactivexInternalUtilHalfSerializer_onNextWithOrgReactivestreamsSubscriber_withId_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, t, self, error_);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  IoReactivexInternalUtilHalfSerializer_onErrorWithOrgReactivestreamsSubscriber_withJavaLangThrowable_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, t, self, error_);
}

- (void)onComplete {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  IoReactivexInternalUtilHalfSerializer_onCompleteWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, self, error_);
}

- (void)requestWithLong:(jlong)n {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredRequestWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withLong_(s_, requested_, n);
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(s_);
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(requested_);
  RELEASE_(s_);
  RELEASE_(error_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil;", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber = { "TakeUntilMainSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 6, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->other_, new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(self));
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(self, outer$);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [self onComplete];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(this$0_->s_);
  IoReactivexInternalUtilHalfSerializer_onErrorWithOrgReactivestreamsSubscriber_withJavaLangThrowable_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(this$0_->actual_, t, this$0_, this$0_->error_);
}

- (void)onComplete {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(this$0_->s_);
  IoReactivexInternalUtilHalfSerializer_onCompleteWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(this$0_->actual_, this$0_, this$0_->error_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber = { "OtherSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 5, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber)
