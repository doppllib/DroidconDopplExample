//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableObservablePublish.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObservablesConnectableObservable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalOperatorsObservableObservablePublish ()

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)onSubscribe
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish *self, id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservablePublish *new_IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservablePublish *create_IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current);

inline jlong IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_serialVersionUID -1100270633763673112LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservablePublish_PublishSource () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *curr_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource, curr_, JavaUtilConcurrentAtomicAtomicReference *)

@implementation IoReactivexInternalOperatorsObservableObservablePublish

+ (IoReactivexObservablesConnectableObservable *)createWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source {
  return IoReactivexInternalOperatorsObservableObservablePublish_createWithIoReactivexObservableSource_(source);
}

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)onSubscribe
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current {
  IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(self, onSubscribe, source, current);
  return self;
}

- (id<IoReactivexObservableSource>)source {
  return source_;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((id<IoReactivexObservableSource>) nil_chk(onSubscribe_)) subscribeWithIoReactivexObserver:observer];
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  jboolean doConnect;
  IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *ps;
  for (; ; ) {
    ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
    if (ps == nil || [ps isDisposed]) {
      IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *u = create_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(current_);
      if (![current_ compareAndSetWithId:ps withId:u]) {
        continue;
      }
      ps = u;
    }
    doConnect = (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ps->shouldConnect_)) get] && [ps->shouldConnect_ compareAndSetWithBoolean:false withBoolean:true]);
    break;
  }
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(connection)) acceptWithId:ps];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  if (doConnect) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:ps];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(current_);
  RELEASE_(onSubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexObservableSource;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithIoReactivexObservableSource:);
  methods[1].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[2].selector = @selector(source);
  methods[3].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[4].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "onSubscribe_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "create", "LIoReactivexObservableSource;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexObservableSource;LIoReactivexObservableSource;LJavaUtilConcurrentAtomicAtomicReference;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;)V", "()Lio/reactivex/ObservableSource<TT;>;", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "Lio/reactivex/ObservableSource<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;", "LIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver;LIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;LIoReactivexInternalOperatorsObservableObservablePublish_PublishSource;", "<T:Ljava/lang/Object;>Lio/reactivex/observables/ConnectableObservable<TT;>;Lio/reactivex/internal/fuseable/HasUpstreamObservableSource<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublish = { "ObservablePublish", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 5, 3, -1, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublish;
}

@end

IoReactivexObservablesConnectableObservable *IoReactivexInternalOperatorsObservableObservablePublish_createWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) {
  IoReactivexInternalOperatorsObservableObservablePublish_initialize();
  JavaUtilConcurrentAtomicAtomicReference *curr = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<IoReactivexObservableSource> onSubscribe = create_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(curr);
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservablesConnectableObservable_(create_IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(onSubscribe, source, curr));
}

void IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish *self, id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current) {
  IoReactivexObservablesConnectableObservable_init(self);
  JreStrongAssign(&self->onSubscribe_, onSubscribe);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->current_, current);
}

IoReactivexInternalOperatorsObservableObservablePublish *new_IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublish, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_, onSubscribe, source, current)
}

IoReactivexInternalOperatorsObservableObservablePublish *create_IoReactivexInternalOperatorsObservableObservablePublish_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexObservableSource> onSubscribe, id<IoReactivexObservableSource> source, JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublish, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withJavaUtilConcurrentAtomicAtomicReference_, onSubscribe, source, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublish)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver)

IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED;

@implementation IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current {
  IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(self, current);
  return self;
}

- (void)dispose {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] != IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED) {
    IOSObjectArray *ps = [observers_ getAndSetWithId:IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED];
    if (ps != IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
      IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(s_);
    }
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self->s_, s);
}

- (void)onNextWithId:(id)t {
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *inner = *b__++;
      [((id<IoReactivexObserver>) nil_chk(((IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *) nil_chk(inner))->child_)) onNextWithId:t];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED];
  if (((IOSObjectArray *) nil_chk(a))->size_ != 0) {
    {
      IOSObjectArray *a__ = a;
      IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *b__ = a__->buffer_;
      IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *inner = *b__++;
        [((id<IoReactivexObserver>) nil_chk(((IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *) nil_chk(inner))->child_)) onErrorWithJavaLangThrowable:e];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED];
    IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *inner = *b__++;
      [((id<IoReactivexObserver>) nil_chk(((IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *) nil_chk(inner))->child_)) onComplete];
    }
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (c == IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    IOSObjectArray *u = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, len);
    IOSObjectArray_Set(u, len, producer);
    if ([observers_ compareAndSetWithId:c withId:u]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    if (len == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if ([((IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *) nil_chk(IOSObjectArray_Get(c, i))) isEqual:producer]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *u;
    if (len == 1) {
      u = IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY;
    }
    else {
      u = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, j + 1, u, j, len - j - 1);
    }
    if ([observers_ compareAndSetWithId:c withId:u]) {
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(current_);
  RELEASE_(observers_);
  RELEASE_(shouldConnect_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 12, 10, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(addWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:);
  methods[8].selector = @selector(removeWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "shouldConnect_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "add", "LIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;", "(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable<TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;", &IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY, &IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable<TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservablePublish;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver = { "PublishObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 6, 19, -1, -1, 20, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *self, JavaUtilConcurrentAtomicAtomicReference *current) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_EMPTY));
  JreStrongAssign(&self->current_, current);
  JreStrongAssignAndConsume(&self->shouldConnect_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *new_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, initWithJavaUtilConcurrentAtomicAtomicReference_, current)
}

IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *create_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *current) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver, initWithJavaUtilConcurrentAtomicAtomicReference_, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver)

@implementation IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)child {
  IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(self, child);
  return self;
}

- (jboolean)isDisposed {
  return [self get] == self;
}

- (void)dispose {
  id o = [self getAndSetWithId:self];
  if (o != nil && o != self) {
    [((IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *) cast_chk(o, [IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver class])) removeWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:self];
  }
}

- (void)setParentWithIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver:(IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *)p {
  if (![self compareAndSetWithId:nil withId:p]) {
    [((IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *) nil_chk(p)) removeWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:self];
  }
}

- (void)dealloc {
  RELEASE_(child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(setParentWithIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "child_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "setParent", "LIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver;", "(Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;)V", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservablePublish;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable = { "InnerDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 2, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *self, id<IoReactivexObserver> child) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->child_, child);
}

IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *new_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> child) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable, initWithIoReactivexObserver_, child)
}

IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *create_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(id<IoReactivexObserver> child) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable, initWithIoReactivexObserver_, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable)

@implementation IoReactivexInternalOperatorsObservableObservablePublish_PublishSource

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)curr {
  IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(self, curr);
  return self;
}

- (void)subscribeWithIoReactivexObserver:(id<IoReactivexObserver>)child {
  IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable *inner = create_IoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable_initWithIoReactivexObserver_(child);
  [((id<IoReactivexObserver>) nil_chk(child)) onSubscribeWithIoReactivexDisposablesDisposable:inner];
  for (; ; ) {
    IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(curr_)) get];
    if (r == nil || [r isDisposed]) {
      IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver *u = create_IoReactivexInternalOperatorsObservableObservablePublish_PublishObserver_initWithJavaUtilConcurrentAtomicAtomicReference_(curr_);
      if (![curr_ compareAndSetWithId:r withId:u]) {
        continue;
      }
      r = u;
    }
    if ([r addWithIoReactivexInternalOperatorsObservableObservablePublish_InnerDisposable:inner]) {
      [inner setParentWithIoReactivexInternalOperatorsObservableObservablePublish_PublishObserver:r];
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(curr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(subscribeWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curr_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;)V", "subscribe", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservablePublish$PublishObserver<TT;>;>;", "LIoReactivexInternalOperatorsObservableObservablePublish;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/ObservableSource<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublish_PublishSource = { "PublishSource", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 1, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource;
}

@end

void IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *self, JavaUtilConcurrentAtomicAtomicReference *curr) {
  NSObject_init(self);
  JreStrongAssign(&self->curr_, curr);
}

IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *new_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *curr) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource, initWithJavaUtilConcurrentAtomicAtomicReference_, curr)
}

IoReactivexInternalOperatorsObservableObservablePublish_PublishSource *create_IoReactivexInternalOperatorsObservableObservablePublish_PublishSource_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *curr) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource, initWithJavaUtilConcurrentAtomicAtomicReference_, curr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublish_PublishSource)
