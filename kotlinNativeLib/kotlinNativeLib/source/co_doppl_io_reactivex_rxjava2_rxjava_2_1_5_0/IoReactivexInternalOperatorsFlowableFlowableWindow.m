//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableWindow.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsProcessor.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_serialVersionUID -2365647875069161133LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_serialVersionUID -8792836352386833856LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_serialVersionUID 2428527070996323976LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindow

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)size
                                   withLong:(jlong)skip
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindow_initWithIoReactivexFlowable_withLong_withLong_withInt_(self, source, size, skip, bufferSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (skip_ == size_) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withInt_(s, size_, bufferSize_)];
  }
  else if (skip_ > size_) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(s, size_, skip_, bufferSize_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(s, size_, skip_, bufferSize_)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withLong:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JJI", "(Lio/reactivex/Flowable<TT;>;JJI)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Flowable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindow = { "FlowableWindow", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindow;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindow_initWithIoReactivexFlowable_withLong_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindow *self, IoReactivexFlowable *source, jlong size, jlong skip, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->size_ = size;
  self->skip_ = skip;
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindow *new_IoReactivexInternalOperatorsFlowableFlowableWindow_initWithIoReactivexFlowable_withLong_withLong_withInt_(IoReactivexFlowable *source, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow, initWithIoReactivexFlowable_withLong_withLong_withInt_, source, size, skip, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindow *create_IoReactivexInternalOperatorsFlowableFlowableWindow_initWithIoReactivexFlowable_withLong_withLong_withInt_(IoReactivexFlowable *source, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow, initWithIoReactivexFlowable_withLong_withLong_withInt_, source, size, skip, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindow)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)size
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withInt_(self, actual, size, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  jlong i = index_;
  IoReactivexProcessorsUnicastProcessor *w = window_;
  if (i == 0) {
    [self getAndIncrement];
    w = IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(bufferSize_, self);
    JreStrongAssign(&window_, w);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:w];
  }
  i++;
  [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:t];
  if (i == size_) {
    index_ = 0;
    JreStrongAssign(&window_, nil);
    [w onComplete];
  }
  else {
    index_ = i;
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  id<OrgReactivestreamsProcessor> w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onErrorWithJavaLangThrowable:t];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<OrgReactivestreamsProcessor> w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onComplete];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    jlong u = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(size_, n);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:u];
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [self run];
  }
}

- (void)run {
  if ([self decrementAndGet] == 0) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(once_);
  RELEASE_(s_);
  RELEASE_(window_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JI", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindow;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber = { "WindowExactSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 8, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong size, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(self, 1);
  JreStrongAssign(&self->actual_, actual);
  self->size_ = size;
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withInt_, actual, size, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withInt_, actual, size, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowExactSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)size
                                            withLong:(jlong)skip
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(self, actual, size, skip, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  jlong i = index_;
  IoReactivexProcessorsUnicastProcessor *w = window_;
  if (i == 0) {
    [self getAndIncrement];
    w = IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(bufferSize_, self);
    JreStrongAssign(&window_, w);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:w];
  }
  i++;
  if (w != nil) {
    [w onNextWithId:t];
  }
  if (i == size_) {
    JreStrongAssign(&window_, nil);
    [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
  }
  if (i == skip_) {
    index_ = 0;
  }
  else {
    index_ = i;
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  id<OrgReactivestreamsProcessor> w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onErrorWithJavaLangThrowable:t];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<OrgReactivestreamsProcessor> w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onComplete];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(firstRequest_)) get] && [firstRequest_ compareAndSetWithBoolean:false withBoolean:true]) {
      jlong u = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(size_, n);
      jlong v = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(skip_ - size_, n - 1);
      jlong w = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(u, v);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:w];
    }
    else {
      jlong u = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(skip_, n);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:u];
    }
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [self run];
  }
}

- (void)run {
  if ([self decrementAndGet] == 0) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(once_);
  RELEASE_(firstRequest_);
  RELEASE_(s_);
  RELEASE_(window_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "firstRequest_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JJI", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JJI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindow;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber = { "WindowSkipSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 10, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(self, 1);
  JreStrongAssign(&self->actual_, actual);
  self->size_ = size;
  self->skip_ = skip;
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->firstRequest_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_, actual, size, skip, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_, actual, size, skip, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowSkipSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)size
                                            withLong:(jlong)skip
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(self, actual, size, skip, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong i = index_;
  if (i == 0) {
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      [self getAndIncrement];
      IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(bufferSize_, self);
      [((JavaUtilArrayDeque *) nil_chk(windows_)) offerWithId:w];
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:w];
      [self drain];
    }
  }
  i++;
  for (id<OrgReactivestreamsProcessor> __strong w in nil_chk(windows_)) {
    [((id<OrgReactivestreamsProcessor>) nil_chk(w)) onNextWithId:t];
  }
  jlong p = produced_ + 1;
  if (p == size_) {
    produced_ = p - skip_;
    id<OrgReactivestreamsProcessor> w = [windows_ poll];
    if (w != nil) {
      [w onComplete];
    }
  }
  else {
    produced_ = p;
  }
  if (i == skip_) {
    index_ = 0;
  }
  else {
    index_ = i;
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  for (id<OrgReactivestreamsProcessor> __strong w in nil_chk(windows_)) {
    [((id<OrgReactivestreamsProcessor>) nil_chk(w)) onErrorWithJavaLangThrowable:t];
  }
  [windows_ clear];
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  for (id<OrgReactivestreamsProcessor> __strong w in nil_chk(windows_)) {
    [((id<OrgReactivestreamsProcessor>) nil_chk(w)) onComplete];
  }
  [windows_ clear];
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)drain {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jint missed = 1;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0;
    while (e != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      IoReactivexProcessorsUnicastProcessor *t = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      jboolean empty = t == nil;
      if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
      e++;
    }
    if (e == r) {
      if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
    return true;
  }
  if (d) {
    JavaLangThrowable *e = error_;
    if (e != nil) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
      return true;
    }
    else if (empty) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      return true;
    }
  }
  return false;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(firstRequest_)) get] && [firstRequest_ compareAndSetWithBoolean:false withBoolean:true]) {
      jlong u = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(skip_, n - 1);
      jlong v = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(size_, u);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:v];
    }
    else {
      jlong u = IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(skip_, n);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:u];
    }
    [self drain];
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [self run];
  }
}

- (void)run {
  if ([self decrementAndGet] == 0) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(queue_);
  RELEASE_(windows_);
  RELEASE_(once_);
  RELEASE_(firstRequest_);
  RELEASE_(requested_);
  RELEASE_(wip_);
  RELEASE_(s_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(drain);
  methods[6].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:withIoReactivexInternalQueueSpscLinkedArrayQueue:);
  methods[7].selector = @selector(requestWithLong:);
  methods[8].selector = @selector(cancel);
  methods[9].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "windows_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "firstRequest_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JJI", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JJI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;LIoReactivexInternalQueueSpscLinkedArrayQueue;", "(ZZLorg/reactivestreams/Subscriber<*>;Lio/reactivex/internal/queue/SpscLinkedArrayQueue<*>;)Z", "request", "J", "Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Lio/reactivex/processors/UnicastProcessor<TT;>;>;", "Ljava/util/ArrayDeque<Lio/reactivex/processors/UnicastProcessor<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindow;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber = { "WindowOverlapSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 10, 17, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(self, 1);
  JreStrongAssign(&self->actual_, actual);
  self->size_ = size;
  self->skip_ = skip;
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->firstRequest_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_, actual, size, skip, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong size, jlong skip, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withInt_, actual, size, skip, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindow_WindowOverlapSubscriber)
