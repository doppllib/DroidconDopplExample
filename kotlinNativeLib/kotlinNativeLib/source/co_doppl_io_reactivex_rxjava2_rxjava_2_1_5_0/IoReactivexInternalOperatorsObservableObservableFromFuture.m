//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalObserversDeferredScalarDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableFromFuture.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation IoReactivexInternalOperatorsObservableObservableFromFuture

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                        withLong:(jlong)timeout
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  IoReactivexInternalOperatorsObservableObservableFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(self, future, timeout, unit);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  IoReactivexInternalObserversDeferredScalarDisposable *d = create_IoReactivexInternalObserversDeferredScalarDisposable_initWithIoReactivexObserver_(s);
  [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (![d isDisposed]) {
    id v;
    @try {
      v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(unit_ != nil ? [((id<JavaUtilConcurrentFuture>) nil_chk(future_)) getWithLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_] : [((id<JavaUtilConcurrentFuture>) nil_chk(future_)) get], @"Future returned null");
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      if (![d isDisposed]) {
        [s onErrorWithJavaLangThrowable:ex];
      }
      return;
    }
    [d completeWithId:v];
  }
}

- (void)dealloc {
  RELEASE_(future_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "future_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;JLJavaUtilConcurrentTimeUnit;", "(Ljava/util/concurrent/Future<+TT;>;JLjava/util/concurrent/TimeUnit;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/util/concurrent/Future<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFromFuture = { "ObservableFromFuture", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFromFuture;
}

@end

void IoReactivexInternalOperatorsObservableObservableFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(IoReactivexInternalOperatorsObservableObservableFromFuture *self, id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->future_, future);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
}

IoReactivexInternalOperatorsObservableObservableFromFuture *new_IoReactivexInternalOperatorsObservableObservableFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

IoReactivexInternalOperatorsObservableObservableFromFuture *create_IoReactivexInternalOperatorsObservableObservableFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFromFuture)
