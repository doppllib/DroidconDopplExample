//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsPredicate.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicFuseableObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableFilter.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableFilter

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                  withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate {
  IoReactivexInternalOperatorsObservableObservableFilter_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(self, source, predicate);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(s, predicate_)];
}

- (void)dealloc {
  RELEASE_(predicate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsPredicate:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "predicate_", "LIoReactivexFunctionsPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsPredicate;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Predicate<-TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/functions/Predicate<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableFilter_FilterObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFilter = { "ObservableFilter", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFilter;
}

@end

void IoReactivexInternalOperatorsObservableObservableFilter_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsObservableObservableFilter *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->predicate_, predicate);
}

IoReactivexInternalOperatorsObservableObservableFilter *new_IoReactivexInternalOperatorsObservableObservableFilter_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFilter, initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_, source, predicate)
}

IoReactivexInternalOperatorsObservableObservableFilter *create_IoReactivexInternalOperatorsObservableObservableFilter_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFilter, initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_, source, predicate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFilter)

@implementation IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
          withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)filter {
  IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(self, actual, filter);
  return self;
}

- (void)onNextWithId:(id)t {
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    jboolean b;
    @try {
      b = [((id<IoReactivexFunctionsPredicate>) nil_chk(filter_)) testWithId:t];
    }
    @catch (JavaLangThrowable *e) {
      [self failWithJavaLangThrowable:e];
      return;
    }
    if (b) {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
    }
  }
  else {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:nil];
  }
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  for (; ; ) {
    id v = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) poll];
    if (v == nil || [((id<IoReactivexFunctionsPredicate>) nil_chk(filter_)) testWithId:v]) {
      return v;
    }
  }
}

- (void)dealloc {
  RELEASE_(filter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsPredicate:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LIoReactivexFunctionsPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsPredicate;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/functions/Predicate<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Predicate<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableFilter;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicFuseableObserver<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver = { "FilterObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> filter) {
  IoReactivexInternalObserversBasicFuseableObserver_initWithIoReactivexObserver_(self, actual);
  JreStrongAssign(&self->filter_, filter);
}

IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver *new_IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> filter) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver, initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_, actual, filter)
}

IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver *create_IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> filter) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver, initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_, actual, filter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFilter_FilterObserver)
