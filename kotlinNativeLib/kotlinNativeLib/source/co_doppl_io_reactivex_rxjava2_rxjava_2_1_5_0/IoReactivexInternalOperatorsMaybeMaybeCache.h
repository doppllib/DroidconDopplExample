//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeCache
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeCache

#if !defined (IoReactivexInternalOperatorsMaybeMaybeCache_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeCache))
#define IoReactivexInternalOperatorsMaybeMaybeCache_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeCache : IoReactivexMaybe < IoReactivexMaybeObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *source_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  id value_;
  JavaLangThrowable *error_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

#pragma mark Package-Private

- (jboolean)addWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *)inner;

- (void)removeWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *)inner;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeCache)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCache, source_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCache, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCache, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCache, error_, JavaLangThrowable *)

inline IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsMaybeMaybeCache, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsMaybeMaybeCache, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeCache *self, id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCache *new_IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCache *create_IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeCache)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable))
#define IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsMaybeMaybeCache;
@protocol IoReactivexMaybeObserver;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
}

#pragma mark Public

- (IoReactivexInternalOperatorsMaybeMaybeCache *)accumulateAndGetWithId:(IoReactivexInternalOperatorsMaybeMaybeCache *)arg0
                                     withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (IoReactivexInternalOperatorsMaybeMaybeCache *)get;

- (IoReactivexInternalOperatorsMaybeMaybeCache *)getAndAccumulateWithId:(IoReactivexInternalOperatorsMaybeMaybeCache *)arg0
                                     withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexInternalOperatorsMaybeMaybeCache *)getAndSetWithId:(IoReactivexInternalOperatorsMaybeMaybeCache *)arg0;

- (IoReactivexInternalOperatorsMaybeMaybeCache *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (IoReactivexInternalOperatorsMaybeMaybeCache *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
 withIoReactivexInternalOperatorsMaybeMaybeCache:(IoReactivexInternalOperatorsMaybeMaybeCache *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable, actual_, id<IoReactivexMaybeObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *self, id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *new_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *create_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCache")
