//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCount.h"
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_serialVersionUID 4973004223787171406LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableCount

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  IoReactivexInternalOperatorsFlowableFlowableCount_initWithIoReactivexFlowable_(self, source);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_initWithOrgReactivestreamsSubscriber_(s)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexFlowable;", "(Lio/reactivex/Flowable<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Long;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCount = { "FlowableCount", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCount;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCount_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableCount *self, IoReactivexFlowable *source) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
}

IoReactivexInternalOperatorsFlowableFlowableCount *new_IoReactivexInternalOperatorsFlowableFlowableCount_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCount, initWithIoReactivexFlowable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableCount *create_IoReactivexInternalOperatorsFlowableFlowableCount_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCount, initWithIoReactivexFlowable_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCount)

@implementation IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  count_++;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [self completeWithId:JavaLangLong_valueOfWithLong_(count_)];
}

- (void)cancel {
  [super cancel];
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Long;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsFlowableFlowableCount;", "Lio/reactivex/internal/subscriptions/DeferredScalarSubscription<Ljava/lang/Long;>;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber = { "CountSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 3, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber *self, id<OrgReactivestreamsSubscriber> actual) {
  IoReactivexInternalSubscriptionsDeferredScalarSubscription_initWithOrgReactivestreamsSubscriber_(self, actual);
}

IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCount_CountSubscriber)
