//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableScalarXMap.h"
#include "IoReactivexInternalOperatorsObservableObservableSwitchMap.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_serialVersionUID -3491074160481096299LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_serialVersionUID 3837284832786408377LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableSwitchMap

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsObservableObservableSwitchMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, source, mapper, bufferSize, delayErrors);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (IoReactivexInternalOperatorsObservableObservableScalarXMap_tryScalarXMapSubscribeWithIoReactivexObservableSource_withIoReactivexObserver_withIoReactivexFunctionsFunction_(source_, t, mapper_)) {
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(t, mapper_, bufferSize_, delayErrors_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;IZ)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver;LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSwitchMap = { "ObservableSwitchMap", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSwitchMap;
}

@end

void IoReactivexInternalOperatorsObservableObservableSwitchMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableSwitchMap *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsObservableObservableSwitchMap *new_IoReactivexInternalOperatorsObservableObservableSwitchMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, mapper, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsObservableObservableSwitchMap *create_IoReactivexInternalOperatorsObservableObservableSwitchMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, mapper, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSwitchMap)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver)

IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED;

@implementation IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver

+ (IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *)CANCELLED {
  return IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, mapper, bufferSize, delayErrors);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  jlong c = JreLoadVolatileLong(&unique_) + 1;
  JreAssignVolatileLong(&unique_, c);
  IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
  if (inner != nil) {
    [inner cancel];
  }
  id<IoReactivexObservableSource> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The ObservableSource returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *nextInner = create_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(self, c, bufferSize_);
  for (; ; ) {
    inner = [active_ get];
    if (inner == IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED) {
      break;
    }
    if ([active_ compareAndSetWithId:inner withId:nextInner]) {
      [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:nextInner];
      break;
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_) || ![((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    if (!delayErrors_) {
      [self disposeInner];
    }
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  if (!JreLoadVolatileBoolean(&done_)) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self disposeInner];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeInner {
  IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
  if (a != IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED) {
    a = [active_ getAndSetWithId:IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED];
    if (a != IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED && a != nil) {
      [a cancel];
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<IoReactivexObserver> a = actual_;
  jint missing = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if (JreLoadVolatileBoolean(&done_)) {
      jboolean empty = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get] == nil;
      if (delayErrors_) {
        if (empty) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
          if (ex != nil) {
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          }
          else {
            [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          }
          return;
        }
      }
      else {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
          return;
        }
        if (empty) {
          [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          return;
        }
      }
    }
    IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(active_)) get];
    if (inner != nil) {
      IoReactivexInternalQueueSpscLinkedArrayQueue *q = inner->queue_;
      if (JreLoadVolatileBoolean(&inner->done_)) {
        jboolean empty = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty];
        if (delayErrors_) {
          if (empty) {
            [active_ compareAndSetWithId:inner withId:nil];
            continue;
          }
        }
        else {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
          if (ex != nil) {
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
            return;
          }
          if (empty) {
            [active_ compareAndSetWithId:inner withId:nil];
            continue;
          }
        }
      }
      jboolean retry = false;
      for (; ; ) {
        if (JreLoadVolatileBoolean(&cancelled_)) {
          return;
        }
        if (inner != [active_ get]) {
          retry = true;
          break;
        }
        if (!delayErrors_) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
          if (ex != nil) {
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
            return;
          }
        }
        jboolean d = JreLoadVolatileBoolean(&inner->done_);
        id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
        jboolean empty = v == nil;
        if (d && empty) {
          [active_ compareAndSetWithId:inner withId:nil];
          retry = true;
          break;
        }
        if (empty) {
          break;
        }
        [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
      }
      if (retry) {
        continue;
      }
    }
    missing = [self addAndGetWithInt:-missing];
    if (missing == 0) {
      break;
    }
  }
}

- (void)innerErrorWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver:(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *)inner
                                                                                 withJavaLangThrowable:(JavaLangThrowable *)ex {
  if (((IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *) nil_chk(inner))->index_ == JreLoadVolatileLong(&unique_) && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex]) {
    if (!delayErrors_) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    }
    JreAssignVolatileBoolean(&inner->done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(errors_);
  RELEASE_(s_);
  RELEASE_(active_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(disposeInner);
  methods[8].selector = @selector(drain);
  methods[9].selector = @selector(innerErrorWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "active_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "CANCELLED", "LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver;", .constantValue.asLong = 0, 0x18, -1, 15, 16, -1 },
    { "unique_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Observer<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;IZ)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerError", "LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver;LJavaLangThrowable;", "(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver<TT;TR;>;Ljava/lang/Throwable;)V", "Lio/reactivex/Observer<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver<TT;TR;>;>;", &IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED, "Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver<Ljava/lang/Object;Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsObservableObservableSwitchMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver = { "SwitchMapObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 10, 12, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver class]) {
    {
      JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED, new_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(nil, -1LL, 1));
      [IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_CANCELLED cancel];
    }
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->active_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
}

IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *new_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *create_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver)

@implementation IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver:(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *)parent
                                                                                           withLong:(jlong)index
                                                                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(self, parent, index, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, s);
}

- (void)onNextWithId:(id)t {
  if (index_ == JreLoadVolatileLong(&((IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *) nil_chk(parent_))->unique_)) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:t];
    [parent_ drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *) nil_chk(parent_)) innerErrorWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver:self withJavaLangThrowable:t];
}

- (void)onComplete {
  if (index_ == JreLoadVolatileLong(&((IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *) nil_chk(parent_))->unique_)) {
    JreAssignVolatileBoolean(&done_, true);
    [parent_ drain];
  }
}

- (void)cancel {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver;JI", "(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver<TT;TR;>;JI)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver<TT;TR;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TR;>;", "LIoReactivexInternalOperatorsObservableObservableSwitchMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver = { "SwitchMapInnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *self, IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *parent, jlong index, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
}

IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *new_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *parent, jlong index, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_, parent, index, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver *create_IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver *parent, jlong index, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapObserver_withLong_withInt_, parent, index, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSwitchMap_SwitchMapInnerObserver)
