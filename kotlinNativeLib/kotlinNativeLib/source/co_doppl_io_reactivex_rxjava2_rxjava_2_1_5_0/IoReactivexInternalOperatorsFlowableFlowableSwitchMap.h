//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchMap

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jint bufferSize_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayErrors;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
  jint bufferSize_;
  jboolean delayErrors_;
  volatile_jboolean done_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  volatile_jboolean cancelled_;
  id<OrgReactivestreamsSubscription> s_;
  JavaUtilConcurrentAtomicAtomicReference *active_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jlong unique_;
}

+ (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *)CANCELLED;

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)delayErrors;

- (void)disposeInner;

- (void)drain;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, active_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)

inline IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_get_CANCELLED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, CANCELLED, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;
@class JavaLangThrowable;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent_;
  jlong index_;
  jint bufferSize_;
  volatile_id queue_;
  volatile_jboolean done_;
  jint fusionMode_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber:(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *)parent
                                                                                         withLong:(jlong)index
                                                                                          withInt:(jint)bufferSize;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap")
