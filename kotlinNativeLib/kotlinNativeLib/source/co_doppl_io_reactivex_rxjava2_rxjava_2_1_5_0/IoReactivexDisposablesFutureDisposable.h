//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexDisposablesFutureDisposable")
#ifdef RESTRICT_IoReactivexDisposablesFutureDisposable
#define INCLUDE_ALL_IoReactivexDisposablesFutureDisposable 0
#else
#define INCLUDE_ALL_IoReactivexDisposablesFutureDisposable 1
#endif
#undef RESTRICT_IoReactivexDisposablesFutureDisposable

#if !defined (IoReactivexDisposablesFutureDisposable_) && (INCLUDE_ALL_IoReactivexDisposablesFutureDisposable || defined(INCLUDE_IoReactivexDisposablesFutureDisposable))
#define IoReactivexDisposablesFutureDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexDisposablesFutureDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable >

#pragma mark Public

- (id<JavaUtilConcurrentFuture>)accumulateAndGetWithId:(id<JavaUtilConcurrentFuture>)arg0
                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<JavaUtilConcurrentFuture>)get;

- (id<JavaUtilConcurrentFuture>)getAndAccumulateWithId:(id<JavaUtilConcurrentFuture>)arg0
                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<JavaUtilConcurrentFuture>)getAndSetWithId:(id<JavaUtilConcurrentFuture>)arg0;

- (id<JavaUtilConcurrentFuture>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (id<JavaUtilConcurrentFuture>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)run
                                     withBoolean:(jboolean)allowInterrupt;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexDisposablesFutureDisposable)

FOUNDATION_EXPORT void IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(IoReactivexDisposablesFutureDisposable *self, id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt);

FOUNDATION_EXPORT IoReactivexDisposablesFutureDisposable *new_IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexDisposablesFutureDisposable *create_IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexDisposablesFutureDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexDisposablesFutureDisposable")
