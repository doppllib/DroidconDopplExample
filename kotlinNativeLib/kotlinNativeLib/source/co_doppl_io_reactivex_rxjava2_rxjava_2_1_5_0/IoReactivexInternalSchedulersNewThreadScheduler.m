//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalSchedulersNewThreadScheduler.h"
#include "IoReactivexInternalSchedulersNewThreadWorker.h"
#include "IoReactivexInternalSchedulersRxThreadFactory.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ThreadFactory.h"

inline NSString *IoReactivexInternalSchedulersNewThreadScheduler_get_THREAD_NAME_PREFIX();
static NSString *IoReactivexInternalSchedulersNewThreadScheduler_THREAD_NAME_PREFIX = @"RxNewThreadScheduler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersNewThreadScheduler, THREAD_NAME_PREFIX, NSString *)

inline IoReactivexInternalSchedulersRxThreadFactory *IoReactivexInternalSchedulersNewThreadScheduler_get_THREAD_FACTORY();
static IoReactivexInternalSchedulersRxThreadFactory *IoReactivexInternalSchedulersNewThreadScheduler_THREAD_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersNewThreadScheduler, THREAD_FACTORY, IoReactivexInternalSchedulersRxThreadFactory *)

inline NSString *IoReactivexInternalSchedulersNewThreadScheduler_get_KEY_NEWTHREAD_PRIORITY();
static NSString *IoReactivexInternalSchedulersNewThreadScheduler_KEY_NEWTHREAD_PRIORITY = @"rx2.newthread-priority";
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersNewThreadScheduler, KEY_NEWTHREAD_PRIORITY, NSString *)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalSchedulersNewThreadScheduler)

@implementation IoReactivexInternalSchedulersNewThreadScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSchedulersNewThreadScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

- (IoReactivexScheduler_Worker * __nonnull)createWorker {
  return create_IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(threadFactory_);
}

- (void)dealloc {
  RELEASE_(threadFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilConcurrentThreadFactory:);
  methods[2].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "THREAD_NAME_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "THREAD_FACTORY", "LIoReactivexInternalSchedulersRxThreadFactory;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "KEY_NEWTHREAD_PRIORITY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentThreadFactory;", &IoReactivexInternalSchedulersNewThreadScheduler_THREAD_NAME_PREFIX, &IoReactivexInternalSchedulersNewThreadScheduler_THREAD_FACTORY, &IoReactivexInternalSchedulersNewThreadScheduler_KEY_NEWTHREAD_PRIORITY };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersNewThreadScheduler = { "NewThreadScheduler", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersNewThreadScheduler;
}

+ (void)initialize {
  if (self == [IoReactivexInternalSchedulersNewThreadScheduler class]) {
    {
      jint priority = JavaLangMath_maxWithInt_withInt_(JavaLangThread_MIN_PRIORITY, JavaLangMath_minWithInt_withInt_(JavaLangThread_MAX_PRIORITY, [((JavaLangInteger *) nil_chk(JavaLangInteger_getIntegerWithNSString_withInt_(IoReactivexInternalSchedulersNewThreadScheduler_KEY_NEWTHREAD_PRIORITY, JavaLangThread_NORM_PRIORITY))) intValue]));
      JreStrongAssignAndConsume(&IoReactivexInternalSchedulersNewThreadScheduler_THREAD_FACTORY, new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(IoReactivexInternalSchedulersNewThreadScheduler_THREAD_NAME_PREFIX, priority));
    }
    J2OBJC_SET_INITIALIZED(IoReactivexInternalSchedulersNewThreadScheduler)
  }
}

@end

void IoReactivexInternalSchedulersNewThreadScheduler_init(IoReactivexInternalSchedulersNewThreadScheduler *self) {
  IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(self, IoReactivexInternalSchedulersNewThreadScheduler_THREAD_FACTORY);
}

IoReactivexInternalSchedulersNewThreadScheduler *new_IoReactivexInternalSchedulersNewThreadScheduler_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersNewThreadScheduler, init)
}

IoReactivexInternalSchedulersNewThreadScheduler *create_IoReactivexInternalSchedulersNewThreadScheduler_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersNewThreadScheduler, init)
}

void IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersNewThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexScheduler_init(self);
  JreStrongAssign(&self->threadFactory_, threadFactory);
}

IoReactivexInternalSchedulersNewThreadScheduler *new_IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersNewThreadScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

IoReactivexInternalSchedulersNewThreadScheduler *create_IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersNewThreadScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersNewThreadScheduler)
