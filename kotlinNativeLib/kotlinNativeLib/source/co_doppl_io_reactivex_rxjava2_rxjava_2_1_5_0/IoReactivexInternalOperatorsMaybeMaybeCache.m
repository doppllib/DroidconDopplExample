//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsMaybeMaybeCache.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_serialVersionUID -5791853038359966195LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsMaybeMaybeCache)

IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED;

@implementation IoReactivexInternalOperatorsMaybeMaybeCache

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED;
}

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source {
  IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *parent = create_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(observer, self);
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  if ([self addWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:parent]) {
    if ([parent isDisposed]) {
      [self removeWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:parent];
      return;
    }
  }
  else {
    if (![parent isDisposed]) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [observer onErrorWithJavaLangThrowable:ex];
      }
      else {
        id v = value_;
        if (v != nil) {
          [observer onSuccessWithId:v];
        }
        else {
          [observer onComplete];
        }
      }
    }
    return;
  }
  id<IoReactivexMaybeSource> src = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(source_)) getAndSetWithId:nil];
  if (src != nil) {
    [src subscribeWithIoReactivexMaybeObserver:self];
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
}

- (void)onSuccessWithId:(id)value {
  JreStrongAssign(&self->value_, value);
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED];
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *inner = *b__++;
      if (![((IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *) nil_chk(inner)) isDisposed]) {
        [((id<IoReactivexMaybeObserver>) nil_chk(inner->actual_)) onSuccessWithId:value];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&self->error_, e);
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED];
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *inner = *b__++;
      if (![((IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *) nil_chk(inner)) isDisposed]) {
        [((id<IoReactivexMaybeObserver>) nil_chk(inner->actual_)) onErrorWithJavaLangThrowable:e];
      }
    }
  }
}

- (void)onComplete {
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED];
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *inner = *b__++;
      if (![((IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *) nil_chk(inner)) isDisposed]) {
        [((id<IoReactivexMaybeObserver>) nil_chk(inner->actual_)) onComplete];
      }
    }
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(observers_);
  RELEASE_(value_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 13, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(addWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:);
  methods[7].selector = @selector(removeWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "[LIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "source_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;", "(Lio/reactivex/MaybeSource<TT;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "add", "LIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable;", "(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable<TT;>;)V", &IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY, &IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/MaybeSource<TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable<TT;>;>;", "TT;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;Lio/reactivex/MaybeObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeCache = { "MaybeCache", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 8, 6, -1, 13, -1, 22, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeCache;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsMaybeMaybeCache class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsMaybeMaybeCache_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsMaybeMaybeCache)
  }
}

@end

void IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeCache *self, id<IoReactivexMaybeSource> source) {
  IoReactivexMaybe_init(self);
  JreStrongAssignAndConsume(&self->source_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(source));
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsMaybeMaybeCache_EMPTY));
}

IoReactivexInternalOperatorsMaybeMaybeCache *new_IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeCache, initWithIoReactivexMaybeSource_, source)
}

IoReactivexInternalOperatorsMaybeMaybeCache *create_IoReactivexInternalOperatorsMaybeMaybeCache_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeCache, initWithIoReactivexMaybeSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeCache)

@implementation IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
 withIoReactivexInternalOperatorsMaybeMaybeCache:(IoReactivexInternalOperatorsMaybeMaybeCache *)parent {
  IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(self, actual, parent);
  return self;
}

- (void)dispose {
  IoReactivexInternalOperatorsMaybeMaybeCache *mc = [self getAndSetWithId:nil];
  if (mc != nil) {
    [mc removeWithIoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable:self];
  }
}

- (jboolean)isDisposed {
  return [self get] == nil;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withIoReactivexInternalOperatorsMaybeMaybeCache:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LIoReactivexInternalOperatorsMaybeMaybeCache;", "(Lio/reactivex/MaybeObserver<-TT;>;Lio/reactivex/internal/operators/maybe/MaybeCache<TT;>;)V", "Lio/reactivex/MaybeObserver<-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeCache;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/maybe/MaybeCache<TT;>;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable = { "CacheDisposable", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 3, 2, 3, -1, -1, 4, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *self, id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent) {
  JavaUtilConcurrentAtomicAtomicReference_initWithId_(self, parent);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *new_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable, initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_, actual, parent)
}

IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable *create_IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable_initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_(id<IoReactivexMaybeObserver> actual, IoReactivexInternalOperatorsMaybeMaybeCache *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable, initWithIoReactivexMaybeObserver_withIoReactivexInternalOperatorsMaybeMaybeCache_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeCache_CacheDisposable)
