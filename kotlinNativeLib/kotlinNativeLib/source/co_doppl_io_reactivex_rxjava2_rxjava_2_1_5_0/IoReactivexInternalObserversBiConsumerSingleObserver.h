//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalObserversBiConsumerSingleObserver")
#ifdef RESTRICT_IoReactivexInternalObserversBiConsumerSingleObserver
#define INCLUDE_ALL_IoReactivexInternalObserversBiConsumerSingleObserver 0
#else
#define INCLUDE_ALL_IoReactivexInternalObserversBiConsumerSingleObserver 1
#endif
#undef RESTRICT_IoReactivexInternalObserversBiConsumerSingleObserver

#if !defined (IoReactivexInternalObserversBiConsumerSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalObserversBiConsumerSingleObserver || defined(INCLUDE_IoReactivexInternalObserversBiConsumerSingleObserver))
#define IoReactivexInternalObserversBiConsumerSingleObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsBiConsumer;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalObserversBiConsumerSingleObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexFunctionsBiConsumer> onCallback_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)onCallback;

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalObserversBiConsumerSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalObserversBiConsumerSingleObserver, onCallback_, id<IoReactivexFunctionsBiConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalObserversBiConsumerSingleObserver_initWithIoReactivexFunctionsBiConsumer_(IoReactivexInternalObserversBiConsumerSingleObserver *self, id<IoReactivexFunctionsBiConsumer> onCallback);

FOUNDATION_EXPORT IoReactivexInternalObserversBiConsumerSingleObserver *new_IoReactivexInternalObserversBiConsumerSingleObserver_initWithIoReactivexFunctionsBiConsumer_(id<IoReactivexFunctionsBiConsumer> onCallback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalObserversBiConsumerSingleObserver *create_IoReactivexInternalObserversBiConsumerSingleObserver_initWithIoReactivexFunctionsBiConsumer_(id<IoReactivexFunctionsBiConsumer> onCallback);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalObserversBiConsumerSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalObserversBiConsumerSingleObserver")
