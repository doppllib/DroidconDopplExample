//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableScanSeed.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsObservableObservableScanSeed

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)seedSupplier
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator {
  IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(self, source, seedSupplier, accumulator);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  id r;
  @try {
    r = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(seedSupplier_)) call], @"The seed supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, t);
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(t, accumulator_, r)];
}

- (void)dealloc {
  RELEASE_(accumulator_);
  RELEASE_(seedSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withJavaUtilConcurrentCallable:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "accumulator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "seedSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/ObservableSource<TT;>;Ljava/util/concurrent/Callable<TR;>;Lio/reactivex/functions/BiFunction<TR;-TT;TR;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "Lio/reactivex/functions/BiFunction<TR;-TT;TR;>;", "Ljava/util/concurrent/Callable<TR;>;", "LIoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableScanSeed = { "ObservableScanSeed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableScanSeed;
}

@end

void IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsObservableObservableScanSeed *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->accumulator_, accumulator);
  JreStrongAssign(&self->seedSupplier_, seedSupplier);
}

IoReactivexInternalOperatorsObservableObservableScanSeed *new_IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableScanSeed, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_, source, seedSupplier, accumulator)
}

IoReactivexInternalOperatorsObservableObservableScanSeed *create_IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableScanSeed, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_, source, seedSupplier, accumulator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableScanSeed)

@implementation IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator
                                     withId:(id)value {
  IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(self, actual, accumulator, value);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [actual_ onNextWithId:value_];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  id v = value_;
  id u;
  @try {
    u = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsBiFunction>) nil_chk(accumulator_)) applyWithId:v withId:t], @"The accumulator returned a null value");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  JreStrongAssign(&value_, u);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:u];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(accumulator_);
  RELEASE_(value_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsBiFunction:withId:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "accumulator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsBiFunction;LNSObject;", "(Lio/reactivex/Observer<-TR;>;Lio/reactivex/functions/BiFunction<TR;-TT;TR;>;TR;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TR;>;", "Lio/reactivex/functions/BiFunction<TR;-TT;TR;>;", "TR;", "LIoReactivexInternalOperatorsObservableObservableScanSeed;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver = { "ScanSeedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 5, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->accumulator_, accumulator);
  JreStrongAssign(&self->value_, value);
}

IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *new_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_, actual, accumulator, value)
}

IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *create_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_, actual, accumulator, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver)
