//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsProtocolViolationException.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilEndConsumerHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalUtilEndConsumerHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalUtilEndConsumerHelper_init(IoReactivexInternalUtilEndConsumerHelper *self);

__attribute__((unused)) static IoReactivexInternalUtilEndConsumerHelper *new_IoReactivexInternalUtilEndConsumerHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalUtilEndConsumerHelper *create_IoReactivexInternalUtilEndConsumerHelper_init();

@implementation IoReactivexInternalUtilEndConsumerHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilEndConsumerHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)validateWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)upstream
                    withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)next
                                            withIOSClass:(IOSClass *)observer {
  return IoReactivexInternalUtilEndConsumerHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_withIOSClass_(upstream, next, observer);
}

+ (jboolean)setOnceWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)upstream
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)next
                                                  withIOSClass:(IOSClass *)observer {
  return IoReactivexInternalUtilEndConsumerHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_withIOSClass_(upstream, next, observer);
}

+ (jboolean)validateWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)upstream
                    withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)next
                                          withIOSClass:(IOSClass *)subscriber {
  return IoReactivexInternalUtilEndConsumerHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_withIOSClass_(upstream, next, subscriber);
}

+ (jboolean)setOnceWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)upstream
                            withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)next
                                                  withIOSClass:(IOSClass *)subscriber {
  return IoReactivexInternalUtilEndConsumerHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_withIOSClass_(upstream, next, subscriber);
}

+ (NSString *)composeMessageWithNSString:(NSString *)consumer {
  return IoReactivexInternalUtilEndConsumerHelper_composeMessageWithNSString_(consumer);
}

+ (void)reportDoubleSubscriptionWithIOSClass:(IOSClass *)consumer {
  IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(consumer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x9, 0, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x9, 3, 8, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(validateWithIoReactivexDisposablesDisposable:withIoReactivexDisposablesDisposable:withIOSClass:);
  methods[2].selector = @selector(setOnceWithJavaUtilConcurrentAtomicAtomicReference:withIoReactivexDisposablesDisposable:withIOSClass:);
  methods[3].selector = @selector(validateWithOrgReactivestreamsSubscription:withOrgReactivestreamsSubscription:withIOSClass:);
  methods[4].selector = @selector(setOnceWithJavaUtilConcurrentAtomicAtomicReference:withOrgReactivestreamsSubscription:withIOSClass:);
  methods[5].selector = @selector(composeMessageWithNSString:);
  methods[6].selector = @selector(reportDoubleSubscriptionWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "validate", "LIoReactivexDisposablesDisposable;LIoReactivexDisposablesDisposable;LIOSClass;", "(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;Ljava/lang/Class<*>;)Z", "setOnce", "LJavaUtilConcurrentAtomicAtomicReference;LIoReactivexDisposablesDisposable;LIOSClass;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Class<*>;)Z", "LOrgReactivestreamsSubscription;LOrgReactivestreamsSubscription;LIOSClass;", "(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;Ljava/lang/Class<*>;)Z", "LJavaUtilConcurrentAtomicAtomicReference;LOrgReactivestreamsSubscription;LIOSClass;", "(Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lorg/reactivestreams/Subscription;Ljava/lang/Class<*>;)Z", "composeMessage", "LNSString;", "reportDoubleSubscription", "LIOSClass;", "(Ljava/lang/Class<*>;)V" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilEndConsumerHelper = { "EndConsumerHelper", "io.reactivex.internal.util", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalUtilEndConsumerHelper;
}

@end

void IoReactivexInternalUtilEndConsumerHelper_init(IoReactivexInternalUtilEndConsumerHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalUtilEndConsumerHelper *new_IoReactivexInternalUtilEndConsumerHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilEndConsumerHelper, init)
}

IoReactivexInternalUtilEndConsumerHelper *create_IoReactivexInternalUtilEndConsumerHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilEndConsumerHelper, init)
}

jboolean IoReactivexInternalUtilEndConsumerHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_withIOSClass_(id<IoReactivexDisposablesDisposable> upstream, id<IoReactivexDisposablesDisposable> next, IOSClass *observer) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(next, @"next is null");
  if (upstream != nil) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(next)) dispose];
    if (upstream != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(observer);
    }
    return false;
  }
  return true;
}

jboolean IoReactivexInternalUtilEndConsumerHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_withIOSClass_(JavaUtilConcurrentAtomicAtomicReference *upstream, id<IoReactivexDisposablesDisposable> next, IOSClass *observer) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(next, @"next is null");
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream)) compareAndSetWithId:nil withId:next]) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(next)) dispose];
    if ([upstream get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(observer);
    }
    return false;
  }
  return true;
}

jboolean IoReactivexInternalUtilEndConsumerHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_withIOSClass_(id<OrgReactivestreamsSubscription> upstream, id<OrgReactivestreamsSubscription> next, IOSClass *subscriber) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(next, @"next is null");
  if (upstream != nil) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(next)) cancel];
    if (upstream != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(subscriber);
    }
    return false;
  }
  return true;
}

jboolean IoReactivexInternalUtilEndConsumerHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_withIOSClass_(JavaUtilConcurrentAtomicAtomicReference *upstream, id<OrgReactivestreamsSubscription> next, IOSClass *subscriber) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(next, @"next is null");
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(upstream)) compareAndSetWithId:nil withId:next]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(next)) cancel];
    if ([upstream get] != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(subscriber);
    }
    return false;
  }
  return true;
}

NSString *IoReactivexInternalUtilEndConsumerHelper_composeMessageWithNSString_(NSString *consumer) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  return JreStrcat("$$$$$", @"It is not allowed to subscribe with a(n) ", consumer, @" multiple times. Please create a fresh instance of ", consumer, @" and subscribe that to the target source instead.");
}

void IoReactivexInternalUtilEndConsumerHelper_reportDoubleSubscriptionWithIOSClass_(IOSClass *consumer) {
  IoReactivexInternalUtilEndConsumerHelper_initialize();
  IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsProtocolViolationException_initWithNSString_(IoReactivexInternalUtilEndConsumerHelper_composeMessageWithNSString_([((IOSClass *) nil_chk(consumer)) getName])));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilEndConsumerHelper)
