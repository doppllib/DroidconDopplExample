//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalObserversDisposableLambdaObserver.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalObserversDisposableLambdaObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe
             withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onDispose {
  IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(self, actual, onSubscribe, onDispose);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(onSubscribe_)) acceptWithId:s];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
    JreStrongAssign(&self->s_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, actual_);
    return;
  }
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (s_ != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  if (s_ != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dispose {
  @try {
    [((id<IoReactivexFunctionsAction>) nil_chk(onDispose_)) run];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(onSubscribe_);
  RELEASE_(onDispose_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsConsumer:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "onSubscribe_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "onDispose_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsConsumer;LIoReactivexFunctionsAction;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;Lio/reactivex/functions/Action;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversDisposableLambdaObserver = { "DisposableLambdaObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x11, 7, 4, -1, -1, -1, 11, -1 };
  return &_IoReactivexInternalObserversDisposableLambdaObserver;
}

@end

void IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(IoReactivexInternalObserversDisposableLambdaObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onSubscribe_, onSubscribe);
  JreStrongAssign(&self->onDispose_, onDispose);
}

IoReactivexInternalObserversDisposableLambdaObserver *new_IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversDisposableLambdaObserver, initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_, actual, onSubscribe, onDispose)
}

IoReactivexInternalObserversDisposableLambdaObserver *create_IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversDisposableLambdaObserver, initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_, actual, onSubscribe, onDispose)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversDisposableLambdaObserver)
