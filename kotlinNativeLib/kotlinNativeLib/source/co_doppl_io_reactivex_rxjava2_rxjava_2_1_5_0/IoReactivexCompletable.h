//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexCompletable")
#ifdef RESTRICT_IoReactivexCompletable
#define INCLUDE_ALL_IoReactivexCompletable 0
#else
#define INCLUDE_ALL_IoReactivexCompletable 1
#endif
#undef RESTRICT_IoReactivexCompletable

#if !defined (IoReactivexCompletable_) && (INCLUDE_ALL_IoReactivexCompletable || defined(INCLUDE_IoReactivexCompletable))
#define IoReactivexCompletable_

#define RESTRICT_IoReactivexCompletableSource 1
#define INCLUDE_IoReactivexCompletableSource 1
#include "IoReactivexCompletableSource.h"

@class IOSObjectArray;
@class IoReactivexFlowable;
@class IoReactivexMaybe;
@class IoReactivexObservable;
@class IoReactivexObserversTestObserver;
@class IoReactivexScheduler;
@class IoReactivexSingle;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableOnSubscribe;
@protocol IoReactivexCompletableOperator;
@protocol IoReactivexCompletableTransformer;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsBiPredicate;
@protocol IoReactivexFunctionsBooleanSupplier;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexFunctionsPredicate;
@protocol IoReactivexMaybeSource;
@protocol IoReactivexObservableSource;
@protocol IoReactivexSingleSource;
@protocol JavaLangIterable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexCompletable : NSObject < IoReactivexCompletableSource >

#pragma mark Public

- (instancetype)init;

+ (IoReactivexCompletable *)ambWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexCompletable *)ambArrayWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources;

- (IoReactivexCompletable *)ambWithWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (IoReactivexCompletable *)andThenWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)next;

- (IoReactivexMaybe *)andThenWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)next;

- (IoReactivexObservable *)andThenWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)next;

- (IoReactivexFlowable *)andThenWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)next;

- (IoReactivexSingle *)andThenWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)next;

- (void)blockingAwait;

- (jboolean)blockingAwaitWithLong:(jlong)timeout
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (JavaLangThrowable *)blockingGet;

- (JavaLangThrowable *)blockingGetWithLong:(jlong)timeout
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexCompletable *)cache;

+ (IoReactivexCompletable *)complete;

- (IoReactivexCompletable *)composeWithIoReactivexCompletableTransformer:(id<IoReactivexCompletableTransformer>)transformer;

+ (IoReactivexCompletable *)concatWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexCompletable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexCompletable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                          withInt:(jint)prefetch;

+ (IoReactivexCompletable *)concatArrayWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources;

- (IoReactivexCompletable *)concatWithWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

+ (IoReactivexCompletable *)createWithIoReactivexCompletableOnSubscribe:(id<IoReactivexCompletableOnSubscribe>)source;

+ (IoReactivexCompletable *)deferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)completableSupplier;

- (IoReactivexCompletable *)delayWithLong:(jlong)delay
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexCompletable *)delayWithLong:(jlong)delay
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexCompletable *)delayWithLong:(jlong)delay
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError;

- (IoReactivexCompletable *)doAfterTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onAfterTerminate;

- (IoReactivexCompletable *)doFinallyWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally;

- (IoReactivexCompletable *)doOnCompleteWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (IoReactivexCompletable *)doOnDisposeWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onDispose;

- (IoReactivexCompletable *)doOnErrorWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (IoReactivexCompletable *)doOnEventWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onEvent;

- (IoReactivexCompletable *)doOnSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe;

- (IoReactivexCompletable *)doOnTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onTerminate;

+ (IoReactivexCompletable *)errorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)errorSupplier;

+ (IoReactivexCompletable *)errorWithJavaLangThrowable:(JavaLangThrowable *)error;

+ (IoReactivexCompletable *)fromActionWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)run;

+ (IoReactivexCompletable *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

+ (IoReactivexCompletable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (IoReactivexCompletable *)fromObservableWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)observable;

+ (IoReactivexCompletable *)fromPublisherWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)publisher;

+ (IoReactivexCompletable *)fromRunnableWithJavaLangRunnable:(id<JavaLangRunnable>)run;

+ (IoReactivexCompletable *)fromSingleWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)single;

- (IoReactivexCompletable *)hide;

- (IoReactivexCompletable *)liftWithIoReactivexCompletableOperator:(id<IoReactivexCompletableOperator>)onLift;

+ (IoReactivexCompletable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexCompletable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexCompletable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                         withInt:(jint)maxConcurrency;

+ (IoReactivexCompletable *)mergeArrayWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexCompletable *)mergeArrayDelayErrorWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexCompletable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexCompletable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexCompletable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                                   withInt:(jint)maxConcurrency;

- (IoReactivexCompletable *)mergeWithWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

+ (IoReactivexCompletable *)never;

- (IoReactivexCompletable *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexCompletable *)onErrorComplete;

- (IoReactivexCompletable *)onErrorCompleteWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexCompletable *)onErrorResumeNextWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)errorMapper;

- (IoReactivexCompletable *)onTerminateDetach;

- (IoReactivexCompletable *)repeat;

- (IoReactivexCompletable *)repeatWithLong:(jlong)times;

- (IoReactivexCompletable *)repeatUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexCompletable *)repeatWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (IoReactivexCompletable *)retry;

- (IoReactivexCompletable *)retryWithIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)predicate;

- (IoReactivexCompletable *)retryWithLong:(jlong)times;

- (IoReactivexCompletable *)retryWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexCompletable *)retryWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (IoReactivexCompletable *)startWithWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (IoReactivexObservable *)startWithWithIoReactivexObservable:(IoReactivexObservable *)other;

- (IoReactivexFlowable *)startWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (id<IoReactivexDisposablesDisposable>)subscribe;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete
                                               withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (void)subscribeWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

- (IoReactivexCompletable *)subscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id<IoReactivexCompletableObserver>)subscribeWithWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer;

- (IoReactivexObserversTestObserver *)test;

- (IoReactivexObserversTestObserver *)testWithBoolean:(jboolean)cancelled;

- (IoReactivexCompletable *)timeoutWithLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexCompletable *)timeoutWithLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
           withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (IoReactivexCompletable *)timeoutWithLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexCompletable *)timeoutWithLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
           withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

+ (IoReactivexCompletable *)timerWithLong:(jlong)delay
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexCompletable *)timerWithLong:(jlong)delay
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id)toWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)converter;

- (IoReactivexFlowable *)toFlowable;

- (IoReactivexMaybe *)toMaybe;

- (IoReactivexObservable *)toObservable;

- (IoReactivexSingle *)toSingleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)completionValueSupplier;

- (IoReactivexSingle *)toSingleDefaultWithId:(id)completionValue;

+ (IoReactivexCompletable *)unsafeCreateWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source;

- (IoReactivexCompletable *)unsubscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexCompletable *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)completableFunction
                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer;

+ (IoReactivexCompletable *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)completableFunction
                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                                      withBoolean:(jboolean)eager;

+ (IoReactivexCompletable *)wrapWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexCompletable)

FOUNDATION_EXPORT void IoReactivexCompletable_init(IoReactivexCompletable *self);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_ambArrayWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_ambWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_complete();

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_concatArrayWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_concatWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_concatWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_concatWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_createWithIoReactivexCompletableOnSubscribe_(id<IoReactivexCompletableOnSubscribe> source);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_unsafeCreateWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_deferWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> completableSupplier);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_errorWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_errorWithJavaLangThrowable_(JavaLangThrowable *error);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromActionWithIoReactivexFunctionsAction_(id<IoReactivexFunctionsAction> run);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromRunnableWithJavaLangRunnable_(id<JavaLangRunnable> run);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromObservableWithIoReactivexObservableSource_(id<IoReactivexObservableSource> observable);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromPublisherWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_fromSingleWithIoReactivexSingleSource_(id<IoReactivexSingleSource> single);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeArrayWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeArrayDelayErrorWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_mergeDelayErrorWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_never();

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> completableFunction, id<IoReactivexFunctionsConsumer> disposer);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> completableFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexCompletable *IoReactivexCompletable_wrapWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexCompletable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexCompletable")
