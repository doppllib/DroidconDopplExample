//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableOnErrorNext.h"
#include "IoReactivexInternalSubscriptionsSubscriptionArbiter.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableOnErrorNext

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)nextSupplier
                                withBoolean:(jboolean)allowFatal {
  IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_(self, source, nextSupplier, allowFatal);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber *parent = create_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_(s, nextSupplier_, allowFatal_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent->arbiter_];
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:parent];
}

- (void)dealloc {
  RELEASE_(nextSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextSupplier_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "allowFatal_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;Z", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-Ljava/lang/Throwable;+Lorg/reactivestreams/Publisher<+TT;>;>;Z)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Function<-Ljava/lang/Throwable;+Lorg/reactivestreams/Publisher<+TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnErrorNext = { "FlowableOnErrorNext", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->nextSupplier_, nextSupplier);
  self->allowFatal_ = allowFatal;
}

IoReactivexInternalOperatorsFlowableFlowableOnErrorNext *new_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_, source, nextSupplier, allowFatal)
}

IoReactivexInternalOperatorsFlowableFlowableOnErrorNext *create_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_, source, nextSupplier, allowFatal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)nextSupplier
                                         withBoolean:(jboolean)allowFatal {
  IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_(self, actual, nextSupplier, allowFatal);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  [((IoReactivexInternalSubscriptionsSubscriptionArbiter *) nil_chk(arbiter_)) setSubscriptionWithOrgReactivestreamsSubscription:s];
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  if (!once_) {
    [((IoReactivexInternalSubscriptionsSubscriptionArbiter *) nil_chk(arbiter_)) producedWithLong:1LL];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (once_) {
    if (done_) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
      return;
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
    return;
  }
  once_ = true;
  if (allowFatal_ && !([t isKindOfClass:[JavaLangException class]])) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
    return;
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = [((id<IoReactivexFunctionsFunction>) nil_chk(nextSupplier_)) applyWithId:t];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ t, e } count:2 type:JavaLangThrowable_class_()])];
    return;
  }
  if (p == nil) {
    JavaLangNullPointerException *npe = create_JavaLangNullPointerException_initWithNSString_(@"Publisher is null");
    [npe initCauseWithJavaLangThrowable:t];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:npe];
    return;
  }
  [p subscribeWithOrgReactivestreamsSubscriber:self];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  once_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(nextSupplier_);
  RELEASE_(arbiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "nextSupplier_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "allowFatal_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "arbiter_", "LIoReactivexInternalSubscriptionsSubscriptionArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "once_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;Z", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Function<-Ljava/lang/Throwable;+Lorg/reactivestreams/Publisher<+TT;>;>;Z)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/functions/Function<-Ljava/lang/Throwable;+Lorg/reactivestreams/Publisher<+TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnErrorNext;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber = { "OnErrorNextSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 6, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->nextSupplier_, nextSupplier);
  self->allowFatal_ = allowFatal;
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalSubscriptionsSubscriptionArbiter_init());
}

IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_, actual, nextSupplier, allowFatal)
}

IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> nextSupplier, jboolean allowFatal) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_, actual, nextSupplier, allowFatal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnErrorNext_OnErrorNextSubscriber)
