//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<OrgReactivestreamsPublisher> other_;
}

+ (id<IoReactivexDisposablesDisposable>)NEW_TIMER;

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, other_, id<OrgReactivestreamsPublisher>)

inline id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_get_NEW_TIMER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_NEW_TIMER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, NEW_TIMER, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *self, IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalSubscriptionsFullArbiter;
@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  id<OrgReactivestreamsPublisher> other_;
  id<OrgReactivestreamsSubscription> s_;
  IoReactivexInternalSubscriptionsFullArbiter *arbiter_;
  id<IoReactivexDisposablesDisposable> timer_;
  volatile_jlong index_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (void)scheduleTimeoutWithLong:(jlong)idx;

- (void)subscribeNext;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, other_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, arbiter_, IoReactivexInternalSubscriptionsFullArbiter *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, timer_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *)outer$
                                                                                                    withLong:(jlong)idx;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *self, IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  id<OrgReactivestreamsSubscription> s_;
  id<IoReactivexDisposablesDisposable> timer_;
  volatile_jlong index_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

- (void)scheduleTimeoutWithLong:(jlong)idx;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, timer_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *)outer$
                                                                                               withLong:(jlong)idx;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *self, IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose))
#define IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose : NSObject < IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *self);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed")
