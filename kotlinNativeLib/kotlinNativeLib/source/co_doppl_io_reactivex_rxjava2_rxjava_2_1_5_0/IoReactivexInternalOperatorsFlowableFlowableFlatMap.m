//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFlowableSubscriber.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMap.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScalarXMap.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_serialVersionUID -2117620485640801370LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_serialVersionUID -4606175640614850599LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMap

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors
                                    withInt:(jint)maxConcurrency
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, source, mapper, delayErrors, maxConcurrency, bufferSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(source_, s, mapper_)) {
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:IoReactivexInternalOperatorsFlowableFlowableFlatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(s, mapper_, delayErrors_, maxConcurrency_, bufferSize_)];
}

+ (id<IoReactivexFlowableSubscriber>)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                                              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                   withBoolean:(jboolean)delayErrors
                                                                       withInt:(jint)maxConcurrency
                                                                       withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsFlowableFlowableFlatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(s, mapper, delayErrors, maxConcurrency, bufferSize);
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFlowableSubscriber;", 0x9, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;ZII", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;ZII)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "subscribe", "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;ZII", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(Lorg/reactivestreams/Subscriber<-TU;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;ZII)Lio/reactivex/FlowableSubscriber<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber;LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMap = { "FlowableFlatMap", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, 9, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMap;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMap *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

id<IoReactivexFlowableSubscriber> IoReactivexInternalOperatorsFlowableFlowableFlatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> s, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableFlowableFlatMap_initialize();
  return create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(s, mapper, delayErrors, maxConcurrency, bufferSize);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMap)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber)

IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED;

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY;
}

+ (IOSObjectArray *)CANCELLED {
  return IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED;
}

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                         withBoolean:(jboolean)delayErrors
                                             withInt:(jint)maxConcurrency
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, actual, mapper, delayErrors, maxConcurrency, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      if (maxConcurrency_ == JavaLangInteger_MAX_VALUE) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      }
      else {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:maxConcurrency_];
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper returned a null Publisher");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  if ([JavaUtilConcurrentCallable_class_() isInstance:p]) {
    id u;
    @try {
      u = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(p, JavaUtilConcurrentCallable_class_())))) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) addThrowableWithJavaLangThrowable:ex];
      [self drain];
      return;
    }
    if (u != nil) {
      [self tryEmitScalarWithId:u];
    }
    else {
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE && !JreLoadVolatileBoolean(&cancelled_) && ++scalarEmitted_ == scalarLimit_) {
        scalarEmitted_ = 0;
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:scalarLimit_];
      }
    }
  }
  else {
    IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *inner = create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(self, uniqueId_++);
    if ([self addInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:inner]) {
      [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:inner];
    }
  }
}

- (jboolean)addInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED) {
      [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner)) dispose];
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED || a == IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY) {
      return;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (id<IoReactivexInternalFuseableSimpleQueue>)getMainQueue {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = JreLoadVolatileId(&queue_);
  if (q == nil) {
    if (maxConcurrency_ == JavaLangInteger_MAX_VALUE) {
      q = create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize_);
    }
    else {
      q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(maxConcurrency_);
    }
    JreVolatileStrongAssign(&queue_, q);
  }
  return q;
}

- (void)tryEmitScalarWithId:(id)value {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
    if (r != 0LL && (q == nil || [q isEmpty])) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      if (r != JavaLangLong_MAX_VALUE) {
        [requested_ decrementAndGet];
      }
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE && !JreLoadVolatileBoolean(&cancelled_) && ++scalarEmitted_ == scalarLimit_) {
        scalarEmitted_ = 0;
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:scalarLimit_];
      }
    }
    else {
      if (q == nil) {
        q = [self getMainQueue];
      }
      if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:value]) {
        [self onErrorWithJavaLangThrowable:create_JavaLangIllegalStateException_initWithNSString_(@"Scalar queue full?!")];
        return;
      }
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimpleQueue> q = [self getMainQueue];
    if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:value]) {
      [self onErrorWithJavaLangThrowable:create_JavaLangIllegalStateException_initWithNSString_(@"Scalar queue full?!")];
      return;
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (id<IoReactivexInternalFuseableSimpleQueue>)getInnerQueueWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner {
  id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner))->queue_);
  if (q == nil) {
    q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(bufferSize_);
    JreVolatileStrongAssign(&inner->queue_, q);
  }
  return q;
}

- (void)tryEmitWithId:(id)value
withIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner))->queue_);
    if (r != 0LL && (q == nil || [q isEmpty])) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      if (r != JavaLangLong_MAX_VALUE) {
        [requested_ decrementAndGet];
      }
      [inner requestMoreWithLong:1];
    }
    else {
      if (q == nil) {
        q = [self getInnerQueueWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:inner];
      }
      if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:value]) {
        [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Inner queue full?!")];
        return;
      }
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner))->queue_);
    if (q == nil) {
      q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(bufferSize_);
      JreVolatileStrongAssign(&inner->queue_, q);
    }
    if (![q offerWithId:value]) {
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Inner queue full?!")];
      return;
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) addThrowableWithJavaLangThrowable:t]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self disposeAll];
    if ([self getAndIncrement] == 0) {
      id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
      if (q != nil) {
        [q clear];
      }
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  id<OrgReactivestreamsSubscriber> child = self->actual_;
  jint missed = 1;
  for (; ; ) {
    if ([self checkTerminate]) {
      return;
    }
    id<IoReactivexInternalFuseableSimplePlainQueue> svq = JreLoadVolatileId(&queue_);
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jboolean unbounded = r == JavaLangLong_MAX_VALUE;
    jlong replenishMain = 0;
    if (svq != nil) {
      for (; ; ) {
        jlong scalarEmission = 0;
        id o = nil;
        while (r != 0LL) {
          o = [svq poll];
          if ([self checkTerminate]) {
            return;
          }
          if (o == nil) {
            break;
          }
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onNextWithId:o];
          replenishMain++;
          scalarEmission++;
          r--;
        }
        if (scalarEmission != 0LL) {
          if (unbounded) {
            r = JavaLangLong_MAX_VALUE;
          }
          else {
            r = [requested_ addAndGetWithLong:-scalarEmission];
          }
        }
        if (r == 0LL || o == nil) {
          break;
        }
      }
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    svq = JreLoadVolatileId(&queue_);
    IOSObjectArray *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(inner))->size_;
    if (d && (svq == nil || [svq isEmpty]) && n == 0) {
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) terminate];
      if (ex != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
        if (ex == nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onComplete];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onErrorWithJavaLangThrowable:ex];
        }
      }
      return;
    }
    jboolean innerCompleted = false;
    if (n != 0) {
      jlong startId = lastId_;
      jint index = lastIndex_;
      if (n <= index || ((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, index)))->id__ != startId) {
        if (n <= index) {
          index = 0;
        }
        jint j = index;
        for (jint i = 0; i < n; i++) {
          if (((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__ == startId) {
            break;
          }
          j++;
          if (j == n) {
            j = 0;
          }
        }
        index = j;
        lastIndex_ = j;
        lastId_ = ((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
      }
      jint j = index;
      for (jint i = 0; i < n; i++) {
        {
          if ([self checkTerminate]) {
            return;
          }
          IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *is = IOSObjectArray_Get(inner, j);
          id o = nil;
          for (; ; ) {
            if ([self checkTerminate]) {
              return;
            }
            id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(is))->queue_);
            if (q == nil) {
              break;
            }
            jlong produced = 0;
            while (r != 0LL) {
              @try {
                o = [q poll];
              }
              @catch (JavaLangThrowable *ex) {
                IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
                [is dispose];
                [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) addThrowableWithJavaLangThrowable:ex];
                if ([self checkTerminate]) {
                  return;
                }
                [self removeInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:is];
                innerCompleted = true;
                i++;
                goto continue_sourceLoop;
              }
              if (o == nil) {
                break;
              }
              [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onNextWithId:o];
              if ([self checkTerminate]) {
                return;
              }
              r--;
              produced++;
            }
            if (produced != 0LL) {
              if (!unbounded) {
                r = [requested_ addAndGetWithLong:-produced];
              }
              else {
                r = JavaLangLong_MAX_VALUE;
              }
              [is requestMoreWithLong:produced];
            }
            if (r == 0 || o == nil) {
              break;
            }
          }
          jboolean innerDone = JreLoadVolatileBoolean(&is->done_);
          id<IoReactivexInternalFuseableSimpleQueue> innerQueue = JreLoadVolatileId(&is->queue_);
          if (innerDone && (innerQueue == nil || [innerQueue isEmpty])) {
            [self removeInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:is];
            if ([self checkTerminate]) {
              return;
            }
            replenishMain++;
            innerCompleted = true;
          }
          if (r == 0LL) {
            break;
          }
          j++;
          if (j == n) {
            j = 0;
          }
        }
        continue_sourceLoop: ;
      }
      lastIndex_ = j;
      lastId_ = ((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
    }
    if (replenishMain != 0LL && !JreLoadVolatileBoolean(&cancelled_)) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:replenishMain];
    }
    if (innerCompleted) {
      continue;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)checkTerminate {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [self clearScalarQueue];
    return true;
  }
  if (!delayErrors_ && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) get] != nil) {
    [self clearScalarQueue];
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) terminate];
    if (ex != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    }
    return true;
  }
  return false;
}

- (void)clearScalarQueue {
  id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
  if (q != nil) {
    [q clear];
  }
}

- (void)disposeAll {
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
  if (a != IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED) {
    a = [subscribers_ getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED];
    if (a != IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED) {
      {
        IOSObjectArray *a__ = a;
        IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *inner = *b__++;
          [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner)) dispose];
        }
      }
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) terminate];
      if (ex != nil && ex != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
      }
    }
  }
}

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner
                                                                    withJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errs_)) addThrowableWithJavaLangThrowable:t]) {
    JreAssignVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(inner))->done_, true);
    if (!delayErrors_) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      {
        IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED];
        IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *a = *b__++;
          [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *) nil_chk(a)) dispose];
        }
      }
    }
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  JreReleaseVolatile(&queue_);
  RELEASE_(errs_);
  RELEASE_(subscribers_);
  RELEASE_(requested_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, 11, -1, -1 },
    { NULL, "LIoReactivexInternalFuseableSimpleQueue;", 0x0, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 5, -1, 14, -1, -1 },
    { NULL, "LIoReactivexInternalFuseableSimpleQueue;", 0x0, 15, 8, -1, 16, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(addInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:);
  methods[4].selector = @selector(removeInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:);
  methods[5].selector = @selector(getMainQueue);
  methods[6].selector = @selector(tryEmitScalarWithId:);
  methods[7].selector = @selector(getInnerQueueWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:);
  methods[8].selector = @selector(tryEmitWithId:withIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:);
  methods[9].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[10].selector = @selector(onComplete);
  methods[11].selector = @selector(requestWithLong:);
  methods[12].selector = @selector(cancel);
  methods[13].selector = @selector(drain);
  methods[14].selector = @selector(drainLoop);
  methods[15].selector = @selector(checkTerminate);
  methods[16].selector = @selector(clearScalarQueue);
  methods[17].selector = @selector(disposeAll);
  methods[18].selector = @selector(innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 27, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 28, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimplePlainQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 29, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "errs_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 30, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 31, 32, -1 },
    { "CANCELLED", "[LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 33, 32, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "uniqueId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "scalarEmitted_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "scalarLimit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;ZII", "(Lorg/reactivestreams/Subscriber<-TU;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;ZII)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "addInner", "LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<TT;TU;>;)Z", "removeInner", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<TT;TU;>;)V", "()Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;", "tryEmitScalar", "(TU;)V", "getInnerQueue", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<TT;TU;>;)Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;", "tryEmit", "LNSObject;LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;", "(TU;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<TT;TU;>;)V", "onError", "LJavaLangThrowable;", "request", "J", "innerError", "LIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;LJavaLangThrowable;", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<TT;TU;>;Ljava/lang/Throwable;)V", "Lorg/reactivestreams/Subscriber<-TU;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;", "Lio/reactivex/internal/fuseable/SimplePlainQueue<TU;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<**>;>;", &IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY, "[Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber<**>;", &IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED, "LIoReactivexInternalOperatorsFlowableFlowableFlatMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber = { "MergeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 19, 20, 34, -1, -1, 35, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->errs_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  self->bufferSize_ = bufferSize;
  self->scalarLimit_ = JavaLangMath_maxWithInt_withInt_(1, JreRShift32(maxConcurrency, 1));
  [self->subscribers_ lazySetWithId:IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY];
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, actual, mapper, delayErrors, maxConcurrency, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, actual, mapper, delayErrors, maxConcurrency, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *)parent
                                                                                   withLong:(jlong)id_ {
  IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(self, parent, id_);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY | IoReactivexInternalFuseableQueueFuseable_BOUNDARY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        JreAssignVolatileBoolean(&done_, true);
        [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent_)) drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
      }
    }
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
  }
}

- (void)onNextWithId:(id)t {
  if (fusionMode_ != IoReactivexInternalFuseableQueueFuseable_ASYNC) {
    [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent_)) tryEmitWithId:t withIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:self];
  }
  else {
    [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent_)) drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self lazySetWithId:JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)];
  [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent_)) innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:self withJavaLangThrowable:t];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent_)) drain];
}

- (void)requestMoreWithLong:(jlong)n {
  if (fusionMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = produced_ + n;
    if (p >= limit_) {
      produced_ = 0;
      [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
  }
}

- (void)dispose {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return [self get] == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber:withLong:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestMoreWithLong:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "id__", "J", .constantValue.asLong = 0, 0x10, 11, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 13, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fusionMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber;J", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber<TT;TU;>;J)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TU;)V", "onError", "LJavaLangThrowable;", "requestMore", "J", "id", "Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber<TT;TU;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TU;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber = { "InnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 9, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->id__ = id_;
  JreStrongAssign(&self->parent_, parent);
  self->bufferSize_ = ((IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *) nil_chk(parent))->bufferSize_;
  self->limit_ = JreRShift32(self->bufferSize_, 2);
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_, parent, id_)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_, parent, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber)
