//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalFunctionsFunctions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalObserversBlockingObserver.h"
#include "IoReactivexInternalObserversLambdaObserver.h"
#include "IoReactivexInternalOperatorsObservableObservableBlockingSubscribe.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexInternalUtilBlockingIgnoringReceiver.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"

@interface IoReactivexInternalOperatorsObservableObservableBlockingSubscribe ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init(IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *self);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *new_IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *create_IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init();

@implementation IoReactivexInternalOperatorsObservableObservableBlockingSubscribe

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)subscribeWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)o
                         withIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_withIoReactivexObserver_(o, observer);
}

+ (void)subscribeWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)o {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_(o);
}

+ (void)subscribeWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)o
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                  withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(o, onNext, onError, onComplete);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 0, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subscribeWithIoReactivexObservableSource:withIoReactivexObserver:);
  methods[2].selector = @selector(subscribeWithIoReactivexObservableSource:);
  methods[3].selector = @selector(subscribeWithIoReactivexObservableSource:withIoReactivexFunctionsConsumer:withIoReactivexFunctionsConsumer:withIoReactivexFunctionsAction:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "subscribe", "LIoReactivexObservableSource;LIoReactivexObserver;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<+TT;>;Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexObservableSource;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<+TT;>;)V", "LIoReactivexObservableSource;LIoReactivexFunctionsConsumer;LIoReactivexFunctionsConsumer;LIoReactivexFunctionsAction;", "<T:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<+TT;>;Lio/reactivex/functions/Consumer<-TT;>;Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;Lio/reactivex/functions/Action;)V" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableBlockingSubscribe = { "ObservableBlockingSubscribe", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableBlockingSubscribe;
}

@end

void IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init(IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *new_IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableBlockingSubscribe, init)
}

IoReactivexInternalOperatorsObservableObservableBlockingSubscribe *create_IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableBlockingSubscribe, init)
}

void IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_withIoReactivexObserver_(id<IoReactivexObservableSource> o, id<IoReactivexObserver> observer) {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_initialize();
  id<JavaUtilConcurrentBlockingQueue> queue = create_JavaUtilConcurrentLinkedBlockingQueue_init();
  IoReactivexInternalObserversBlockingObserver *bs = create_IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(queue);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:bs];
  [((id<IoReactivexObservableSource>) nil_chk(o)) subscribeWithIoReactivexObserver:bs];
  for (; ; ) {
    if ([bs isDisposed]) {
      break;
    }
    id v = [queue poll];
    if (v == nil) {
      @try {
        v = [queue take];
      }
      @catch (JavaLangInterruptedException *ex) {
        [bs dispose];
        [observer onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    if ([bs isDisposed] || o == JreLoadStatic(IoReactivexInternalObserversBlockingObserver, TERMINATED) || IoReactivexInternalUtilNotificationLite_acceptFullWithId_withIoReactivexObserver_(v, observer)) {
      break;
    }
  }
}

void IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_(id<IoReactivexObservableSource> o) {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_initialize();
  IoReactivexInternalUtilBlockingIgnoringReceiver *callback = create_IoReactivexInternalUtilBlockingIgnoringReceiver_init();
  IoReactivexInternalObserversLambdaObserver *ls = create_IoReactivexInternalObserversLambdaObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_(IoReactivexInternalFunctionsFunctions_emptyConsumer(), callback, callback, IoReactivexInternalFunctionsFunctions_emptyConsumer());
  [((id<IoReactivexObservableSource>) nil_chk(o)) subscribeWithIoReactivexObserver:ls];
  IoReactivexInternalUtilBlockingHelper_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withIoReactivexDisposablesDisposable_(callback, ls);
  JavaLangThrowable *e = callback->error_;
  if (e != nil) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(e));
  }
}

void IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexObservableSource> o, id<IoReactivexFunctionsConsumer> onNext, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) {
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onNext, @"onNext is null");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onError, @"onError is null");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onComplete, @"onComplete is null");
  IoReactivexInternalOperatorsObservableObservableBlockingSubscribe_subscribeWithIoReactivexObservableSource_withIoReactivexObserver_(o, create_IoReactivexInternalObserversLambdaObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_(onNext, onError, onComplete, IoReactivexInternalFunctionsFunctions_emptyConsumer()));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableBlockingSubscribe)
