//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber 1
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen))
#define IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRepeatWhen : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> handler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen, handler_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen *new_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen *create_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> handler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver))
#define IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsPublisher> source_;
  JavaUtilConcurrentAtomicAtomicReference *subscription_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber *subscriber_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver, subscription_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver, subscriber_, IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver *self, id<OrgReactivestreamsPublisher> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver *new_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver *create_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenReceiver)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber_

#define RESTRICT_IoReactivexInternalSubscriptionsSubscriptionArbiter 1
#define INCLUDE_IoReactivexInternalSubscriptionsSubscriptionArbiter 1
#include "IoReactivexInternalSubscriptionsSubscriptionArbiter.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IoReactivexProcessorsFlowableProcessor;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber : IoReactivexInternalSubscriptionsSubscriptionArbiter < IoReactivexFlowableSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_WhenSourceSubscriber_;
  IoReactivexProcessorsFlowableProcessor *processor_;
  id<OrgReactivestreamsSubscription> receiver_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)againWithId:(id)signal;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
          withIoReactivexProcessorsFlowableProcessor:(IoReactivexProcessorsFlowableProcessor *)processor
                  withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)receiver;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber, actual_WhenSourceSubscriber_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber, processor_, IoReactivexProcessorsFlowableProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber, receiver_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber_

@class IoReactivexProcessorsFlowableProcessor;
@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber : IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
          withIoReactivexProcessorsFlowableProcessor:(IoReactivexProcessorsFlowableProcessor *)processor
                  withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)receiver;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_RepeatWhenSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen")
