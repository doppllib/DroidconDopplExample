//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleObserveOn.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_serialVersionUID 3528003840217436037LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleObserveOn

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(s, scheduler_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexScheduler;", "(Lio/reactivex/SingleSource<TT;>;Lio/reactivex/Scheduler;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleSource<TT;>;", "LIoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleObserveOn = { "SingleObserveOn", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleObserveOn;
}

@end

void IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleObserveOn *self, id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsSingleSingleObserveOn *new_IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleObserveOn, initWithIoReactivexSingleSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsSingleSingleObserveOn *create_IoReactivexInternalOperatorsSingleSingleObserveOn_initWithIoReactivexSingleSource_withIoReactivexScheduler_(id<IoReactivexSingleSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleObserveOn, initWithIoReactivexSingleSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleObserveOn)

@implementation IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                         withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(self, actual, scheduler);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d)) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  JreStrongAssign(&self->value_ObserveOnSingleObserver_, value);
  id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:self];
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&self->error_, e);
  id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:self];
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)run {
  JavaLangThrowable *ex = error_;
  if (ex != nil) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
  }
  else {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value_ObserveOnSingleObserver_];
  }
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(scheduler_);
  RELEASE_(value_ObserveOnSingleObserver_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "value_ObserveOnSingleObserver_", "LNSObject;", .constantValue.asLong = 0, 0x0, 10, -1, 11, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexScheduler;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/Scheduler;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "value", "TT;", "LIoReactivexInternalOperatorsSingleSingleObserveOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver = { "ObserveOnSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 7, 5, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *self, id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *new_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, initWithIoReactivexSingleObserver_withIoReactivexScheduler_, actual, scheduler)
}

IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver *create_IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexScheduler_(id<IoReactivexSingleObserver> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver, initWithIoReactivexSingleObserver_withIoReactivexScheduler_, actual, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleObserveOn_ObserveOnSingleObserver)
