//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableBuffer
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableBuffer

#if !defined (IoReactivexInternalOperatorsObservableObservableBuffer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBuffer))
#define IoReactivexInternalOperatorsObservableObservableBuffer_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableBuffer : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jint count_;
  jint skip_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)count
                                            withInt:(jint)skip
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBuffer)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer, bufferSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer *self, id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer *new_IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer *create_IoReactivexInternalOperatorsObservableObservableBuffer_initWithIoReactivexObservableSource_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBuffer)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver))
#define IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jint count_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  id<JavaUtilCollection> buffer_;
  jint size_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (jboolean)createBuffer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, buffer_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *self, id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *new_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver *create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver_initWithIoReactivexObserver_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferExactObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver))
#define IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@class JavaUtilArrayDeque;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jint count_;
  jint skip_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  id<IoReactivexDisposablesDisposable> s_;
  JavaUtilArrayDeque *buffers_;
  jlong index_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)count
                                    withInt:(jint)skip
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver, buffers_, JavaUtilArrayDeque *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *self, id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *new_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver *create_IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver_initWithIoReactivexObserver_withInt_withInt_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, jint count, jint skip, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableBuffer_BufferSkipObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableBuffer")
