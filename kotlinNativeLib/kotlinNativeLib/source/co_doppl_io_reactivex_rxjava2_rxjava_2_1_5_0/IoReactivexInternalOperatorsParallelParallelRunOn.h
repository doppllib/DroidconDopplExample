//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelRunOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelRunOn
#ifdef INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber
#define INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber
#define INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber 1
#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelRunOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn))
#define IoReactivexInternalOperatorsParallelParallelRunOn_

#define RESTRICT_IoReactivexParallelParallelFlowable 1
#define INCLUDE_IoReactivexParallelParallelFlowable 1
#include "IoReactivexParallelParallelFlowable.h"

@class IOSObjectArray;
@class IoReactivexScheduler;

@interface IoReactivexInternalOperatorsParallelParallelRunOn : IoReactivexParallelParallelFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  IoReactivexScheduler *scheduler_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)parent
                                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                    withInt:(jint)prefetch;

- (jint)parallelism;

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelRunOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn, source_, IoReactivexParallelParallelFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsParallelParallelRunOn *self, IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn *new_IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn *create_IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelRunOn)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber))
#define IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalQueueSpscArrayQueue;
@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;

@interface IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  jint prefetch_;
  jint limit_;
  IoReactivexInternalQueueSpscArrayQueue *queue_;
  IoReactivexScheduler_Worker *worker_;
  id<OrgReactivestreamsSubscription> s_;
  volatile_jboolean done_;
  JavaLangThrowable *error_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jboolean cancelled_;
  jint consumed_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)prefetch
withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

- (void)schedule;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, queue_, IoReactivexInternalQueueSpscArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_initWithInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber))
#define IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_

@class IoReactivexInternalQueueSpscArrayQueue;
@class IoReactivexScheduler_Worker;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber : IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)prefetch
          withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)arg1
withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber, actual_, id<OrgReactivestreamsSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *create_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber))
#define IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_

@class IoReactivexInternalQueueSpscArrayQueue;
@class IoReactivexScheduler_Worker;
@protocol IoReactivexInternalFuseableConditionalSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber : IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber {
 @public
  id<IoReactivexInternalFuseableConditionalSubscriber> actual_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                                 withInt:(jint)prefetch
                              withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
                                         withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)arg1
withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber, actual_, id<IoReactivexInternalFuseableConditionalSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *create_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelRunOn")
