//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe))
#define IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "IoReactivexInternalFuseableFuseToFlowable.h"

@class IoReactivexFlowable;
@protocol IoReactivexMaybeObserver;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleMaybe : IoReactivexMaybe < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  IoReactivexFlowable *source_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe, source_, IoReactivexFlowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *self, IoReactivexFlowable *source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *new_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithIoReactivexFlowable_(IoReactivexFlowable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *create_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithIoReactivexFlowable_(IoReactivexFlowable *source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexMaybeObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  volatile_id s_;
  jboolean done_;
  id value_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, value_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *self, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe")
