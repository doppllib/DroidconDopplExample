//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleUsing
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleUsing

#if !defined (IoReactivexInternalOperatorsSingleSingleUsing_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleUsing))
#define IoReactivexInternalOperatorsSingleSingleUsing_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsSingleSingleUsing : IoReactivexSingle {
 @public
  id<JavaUtilConcurrentCallable> resourceSupplier_;
  id<IoReactivexFunctionsFunction> singleFunction_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)singleFunction
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                       withBoolean:(jboolean)eager;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleUsing)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing, resourceSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing, singleFunction_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing, disposer_, id<IoReactivexFunctionsConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsSingleSingleUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUsing *new_IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUsing *create_IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleUsing)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver))
#define IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsConsumer;

@interface IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
  volatile_id d_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)resource
                                      withBoolean:(jboolean)eager
                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer;

- (void)disposeAfter;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, disposer_, id<IoReactivexFunctionsConsumer>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *self, id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *new_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *create_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleUsing")
