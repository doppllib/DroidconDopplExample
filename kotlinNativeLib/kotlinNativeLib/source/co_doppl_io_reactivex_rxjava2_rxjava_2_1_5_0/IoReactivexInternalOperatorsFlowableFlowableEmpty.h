//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableEmpty")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableEmpty
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableEmpty 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableEmpty 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableEmpty

#if !defined (IoReactivexInternalOperatorsFlowableFlowableEmpty_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableEmpty || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableEmpty))
#define IoReactivexInternalOperatorsFlowableFlowableEmpty_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

#define RESTRICT_IoReactivexInternalFuseableScalarCallable 1
#define INCLUDE_IoReactivexInternalFuseableScalarCallable 1
#include "IoReactivexInternalFuseableScalarCallable.h"

@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableEmpty : IoReactivexFlowable < IoReactivexInternalFuseableScalarCallable >

+ (IoReactivexFlowable *)INSTANCE;

#pragma mark Public

- (id)call;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableEmpty)

inline IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableEmpty_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableEmpty_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableEmpty, INSTANCE, IoReactivexFlowable *)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableEmpty)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableEmpty")
