//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsUnicastSubject")
#ifdef RESTRICT_IoReactivexSubjectsUnicastSubject
#define INCLUDE_ALL_IoReactivexSubjectsUnicastSubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsUnicastSubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsUnicastSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexSubjectsUnicastSubject_) && (INCLUDE_ALL_IoReactivexSubjectsUnicastSubject || defined(INCLUDE_IoReactivexSubjectsUnicastSubject))
#define IoReactivexSubjectsUnicastSubject_

#define RESTRICT_IoReactivexSubjectsSubject 1
#define INCLUDE_IoReactivexSubjectsSubject 1
#include "IoReactivexSubjectsSubject.h"

@class IoReactivexInternalObserversBasicIntQueueDisposable;
@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol IoReactivexObserver;
@protocol JavaLangRunnable;

@interface IoReactivexSubjectsUnicastSubject : IoReactivexSubjectsSubject {
 @public
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  JavaUtilConcurrentAtomicAtomicReference *actual_;
  JavaUtilConcurrentAtomicAtomicReference *onTerminate_;
  jboolean delayError_;
  volatile_jboolean disposed_;
  volatile_jboolean done_;
  JavaLangThrowable *error_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  IoReactivexInternalObserversBasicIntQueueDisposable *wip_;
  jboolean enableOperatorFusion_;
}

#pragma mark Public

+ (IoReactivexSubjectsUnicastSubject *)create;

+ (IoReactivexSubjectsUnicastSubject *)createWithBoolean:(jboolean)delayError;

+ (IoReactivexSubjectsUnicastSubject *)createWithInt:(jint)capacityHint;

+ (IoReactivexSubjectsUnicastSubject *)createWithInt:(jint)capacityHint
                                withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate;

+ (IoReactivexSubjectsUnicastSubject *)createWithInt:(jint)capacityHint
                                withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate
                                         withBoolean:(jboolean)delayError;

- (JavaLangThrowable *)getThrowable;

- (jboolean)hasComplete;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)capacityHint
                withBoolean:(jboolean)delayError;

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate;

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate
                withBoolean:(jboolean)delayError;

- (void)doTerminate;

- (void)drain;

- (void)drainFusedWithIoReactivexObserver:(id<IoReactivexObserver>)a;

- (void)drainNormalWithIoReactivexObserver:(id<IoReactivexObserver>)a;

- (void)errorOrCompleteWithIoReactivexObserver:(id<IoReactivexObserver>)a;

- (jboolean)failedFastWithIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
                                         withIoReactivexObserver:(id<IoReactivexObserver>)a;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsUnicastSubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, actual_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, onTerminate_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsUnicastSubject, wip_, IoReactivexInternalObserversBasicIntQueueDisposable *)

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_create();

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithInt_(jint capacityHint);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithBoolean_(jboolean delayError);

FOUNDATION_EXPORT void IoReactivexSubjectsUnicastSubject_initWithInt_withBoolean_(IoReactivexSubjectsUnicastSubject *self, jint capacityHint, jboolean delayError);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *new_IoReactivexSubjectsUnicastSubject_initWithInt_withBoolean_(jint capacityHint, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *create_IoReactivexSubjectsUnicastSubject_initWithInt_withBoolean_(jint capacityHint, jboolean delayError);

FOUNDATION_EXPORT void IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(IoReactivexSubjectsUnicastSubject *self, jint capacityHint, id<JavaLangRunnable> onTerminate);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *new_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *create_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate);

FOUNDATION_EXPORT void IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_withBoolean_(IoReactivexSubjectsUnicastSubject *self, jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *new_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject *create_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsUnicastSubject)

#endif

#if !defined (IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsUnicastSubject || defined(INCLUDE_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable))
#define IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_

#define RESTRICT_IoReactivexInternalObserversBasicIntQueueDisposable 1
#define INCLUDE_IoReactivexInternalObserversBasicIntQueueDisposable 1
#include "IoReactivexInternalObserversBasicIntQueueDisposable.h"

@class IoReactivexSubjectsUnicastSubject;

@interface IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable : IoReactivexInternalObserversBasicIntQueueDisposable

#pragma mark Public

- (void)clear;

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (jboolean)isEqual:(id)obj;

- (id __nullable)poll;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable)

FOUNDATION_EXPORT void IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *self, IoReactivexSubjectsUnicastSubject *outer$);

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *new_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *create_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsUnicastSubject")
