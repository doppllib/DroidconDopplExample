//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableToList
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableToList

#if !defined (IoReactivexInternalOperatorsObservableObservableToList_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableToList))
#define IoReactivexInternalOperatorsObservableObservableToList_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableToList : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> collectionSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier;

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)defaultCapacityHint;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableToList)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToList, collectionSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableObservableToList *self, id<IoReactivexObservableSource> source, jint defaultCapacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList *new_IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList *create_IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint);

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableToList *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList *new_IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList *create_IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableToList)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableToList_ToListObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableToList_ToListObserver))
#define IoReactivexInternalOperatorsObservableObservableToList_ToListObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol JavaUtilCollection;

@interface IoReactivexInternalOperatorsObservableObservableToList_ToListObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<JavaUtilCollection> collection_;
  id<IoReactivexObserver> actual_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                     withJavaUtilCollection:(id<JavaUtilCollection>)collection;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver, collection_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToList_ToListObserver_initWithIoReactivexObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver *self, id<IoReactivexObserver> actual, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList_ToListObserver *new_IoReactivexInternalOperatorsObservableObservableToList_ToListObserver_initWithIoReactivexObserver_withJavaUtilCollection_(id<IoReactivexObserver> actual, id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToList_ToListObserver *create_IoReactivexInternalOperatorsObservableObservableToList_ToListObserver_initWithIoReactivexObserver_withJavaUtilCollection_(id<IoReactivexObserver> actual, id<JavaUtilCollection> collection);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableToList_ToListObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToList")
