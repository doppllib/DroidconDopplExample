//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableCache.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache () {
 @public
  IoReactivexInternalOperatorsCompletableCompletableCache *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_serialVersionUID 8943152917179642732LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsCompletableCompletableCache)

IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED;

@implementation IoReactivexInternalOperatorsCompletableCompletableCache

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED;
}

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source {
  IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *inner = create_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(self, s);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:inner];
  if ([self addWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:inner]) {
    if ([inner isDisposed]) {
      [self removeWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:inner];
    }
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
      [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:self];
    }
  }
  else {
    JavaLangThrowable *ex = error_;
    if (ex != nil) {
      [s onErrorWithJavaLangThrowable:ex];
    }
    else {
      [s onComplete];
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&error_, e);
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED];
    IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *inner = *b__++;
      if (![((IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *) nil_chk(inner)) get]) {
        [((id<IoReactivexCompletableObserver>) nil_chk(inner->actual_)) onErrorWithJavaLangThrowable:e];
      }
    }
  }
}

- (void)onComplete {
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED];
    IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *inner = *b__++;
      if (![((IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *) nil_chk(inner)) get]) {
        [((id<IoReactivexCompletableObserver>) nil_chk(inner->actual_)) onComplete];
      }
    }
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(observers_);
  RELEASE_(once_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(addWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:);
  methods[6].selector = @selector(removeWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "[LIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "add", "LIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache;", "remove", &IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY, &IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableCache = { "CompletableCache", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 7, 6, -1, 8, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableCache;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsCompletableCompletableCache class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsCompletableCompletableCache)
  }
}

@end

void IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableCache *self, id<IoReactivexCompletableSource> source) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY));
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsCompletableCompletableCache *new_IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableCache, initWithIoReactivexCompletableSource_, source)
}

IoReactivexInternalOperatorsCompletableCompletableCache *create_IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableCache, initWithIoReactivexCompletableSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableCache)

@implementation IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache *)outer$
                                             withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual {
  IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(self, outer$, actual);
  return self;
}

- (jboolean)isDisposed {
  return [self get];
}

- (void)dispose {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [this$0_ removeWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:self];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableCache:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableCache;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache = { "InnerCompletableCache", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x10, 3, 3, 1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *self, IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *new_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache, initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_, outer$, actual)
}

IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *create_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache, initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_, outer$, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache)
