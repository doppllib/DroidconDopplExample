//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"
#include "IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_serialVersionUID 706635022205076709LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(self, source, other);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(observer, source_)];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LOrgReactivestreamsPublisher;", "(Lio/reactivex/MaybeSource<TT;>;Lorg/reactivestreams/Publisher<TU;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "Lorg/reactivestreams/Publisher<TU;>;", "LIoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber;LIoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher = { "MaybeDelaySubscriptionOtherPublisher", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher *self, id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream_initWithIoReactivexMaybeSource_(self, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher *new_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher, initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_, source, other)
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher *create_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher, initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                      withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source {
  IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(self, actual, source);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(JreLoadVolatileId(&self->s_), s)) {
    JreVolatileStrongAssign(&self->s_, s);
    [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *) nil_chk(main_))->actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileId(&s_) != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
    JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
    [self subscribeNext];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileId(&s_) != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
    [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *) nil_chk(main_))->actual_)) onErrorWithJavaLangThrowable:t];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  if (JreLoadVolatileId(&s_) != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
    [self subscribeNext];
  }
}

- (void)subscribeNext {
  id<IoReactivexMaybeSource> src = source_;
  JreStrongAssign(&source_, nil);
  [((id<IoReactivexMaybeSource>) nil_chk(src)) subscribeWithIoReactivexMaybeObserver:main_];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *) nil_chk(main_)) get]);
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(main_);
}

- (void)__javaClone:(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&s_, &original->s_);
}

- (void)dealloc {
  RELEASE_(main_);
  RELEASE_(source_);
  JreReleaseVolatile(&s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withIoReactivexMaybeSource:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(subscribeNext);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "main_", "LIoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "source_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LIoReactivexMaybeSource;", "(Lio/reactivex/MaybeObserver<-TT;>;Lio/reactivex/MaybeSource<TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver<TT;>;", "Lio/reactivex/MaybeSource<TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber = { "OtherSubscriber", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 8, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->main_, new_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_(actual));
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber *new_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber, initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_, actual, source)
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber *create_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber, initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_, actual, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_OtherSubscriber)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual {
  IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver = { "DelayMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 5, 2, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *self, id<IoReactivexMaybeObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelaySubscriptionOtherPublisher_DelayMaybeObserver)
