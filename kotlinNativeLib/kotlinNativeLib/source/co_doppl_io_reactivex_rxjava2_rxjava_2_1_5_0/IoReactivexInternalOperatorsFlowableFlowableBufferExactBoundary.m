//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "IoReactivexSubscribersDisposableSubscriber.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundary
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier {
  IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_(self, source, boundary, bufferSupplier);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), bufferSupplier_, boundary_)];
}

- (void)dealloc {
  RELEASE_(boundary_);
  RELEASE_(bufferSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundary_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;LJavaUtilConcurrentCallable;", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<TB;>;Ljava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Lorg/reactivestreams/Publisher<TB;>;", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber;LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;B:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary = { "FlowableBufferExactBoundary", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> boundary, id<JavaUtilConcurrentCallable> bufferSupplier) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->boundary_, boundary);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary *new_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> boundary, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_, source, boundary, bufferSupplier)
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary *create_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> boundary, id<JavaUtilConcurrentCallable> bufferSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_, source, boundary, bufferSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundary {
  IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_(self, actual, bufferSupplier, boundary);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    return;
  }
  JreStrongAssign(&self->s_, s);
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, actual_);
    return;
  }
  JreStrongAssign(&buffer_, b);
  IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber *bs = create_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_(self);
  JreStrongAssign(&other_, bs);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    [((id<OrgReactivestreamsPublisher>) nil_chk(boundary_)) subscribeWithOrgReactivestreamsSubscriber:bs];
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    id<JavaUtilCollection> b = buffer_;
    if (b == nil) {
      return;
    }
    [b addWithId:t];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self cancel];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = JreRetainedLocalValue(buffer_);
    if (b == nil) {
      return;
    }
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimplePlainQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(queue_, actual_, false, self, self);
  }
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(other_)) dispose];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    if ([self enter]) {
      [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
    }
  }
}

- (void)next {
  id<JavaUtilCollection> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The buffer supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    return;
  }
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = JreRetainedLocalValue(buffer_);
    if (b == nil) {
      return;
    }
    JreStrongAssign(&buffer_, next);
  }
  [self fastPathEmitMaxWithId:b withBoolean:false withIoReactivexDisposablesDisposable:self];
}

- (void)dispose {
  [self cancel];
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:v];
  return true;
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(boundary_);
  RELEASE_(s_);
  RELEASE_(other_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentCallable:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(next);
  methods[8].selector = @selector(dispose);
  methods[9].selector = @selector(isDisposed);
  methods[10].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "boundary_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "other_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentCallable;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TU;>;Ljava/util/concurrent/Callable<TU;>;Lorg/reactivestreams/Publisher<TB;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "accept", "LOrgReactivestreamsSubscriber;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;)Z", "Ljava/util/concurrent/Callable<TU;>;", "Lorg/reactivestreams/Publisher<TB;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;B:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;TU;TU;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber = { "BufferExactBoundarySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 11, 5, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<OrgReactivestreamsPublisher> boundary) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  JreStrongAssign(&self->boundary_, boundary);
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<OrgReactivestreamsPublisher> boundary) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_, actual, bufferSupplier, boundary)
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<OrgReactivestreamsPublisher> boundary) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withOrgReactivestreamsPublisher_, actual, bufferSupplier, boundary)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *) nil_chk(parent_)) next];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *) nil_chk(parent_)) onComplete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber<TT;TU;TB;>;)V", "onNext", "LNSObject;", "(TB;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$BufferExactBoundarySubscriber<TT;TU;TB;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;B:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TB;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber = { "BufferBoundarySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 1, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber *self, IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *parent) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferExactBoundarySubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferExactBoundary_BufferBoundarySubscriber)
