//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadScheduler")
#ifdef RESTRICT_IoReactivexInternalSchedulersNewThreadScheduler
#define INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadScheduler 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadScheduler 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersNewThreadScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersNewThreadScheduler_) && (INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadScheduler || defined(INCLUDE_IoReactivexInternalSchedulersNewThreadScheduler))
#define IoReactivexInternalSchedulersNewThreadScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "IoReactivexScheduler.h"

@class IoReactivexScheduler_Worker;
@protocol JavaUtilConcurrentThreadFactory;

@interface IoReactivexInternalSchedulersNewThreadScheduler : IoReactivexScheduler {
 @public
  id<JavaUtilConcurrentThreadFactory> threadFactory_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (IoReactivexScheduler_Worker * __nonnull)createWorker;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersNewThreadScheduler)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersNewThreadScheduler, threadFactory_, id<JavaUtilConcurrentThreadFactory>)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersNewThreadScheduler_init(IoReactivexInternalSchedulersNewThreadScheduler *self);

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadScheduler *new_IoReactivexInternalSchedulersNewThreadScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadScheduler *create_IoReactivexInternalSchedulersNewThreadScheduler_init();

FOUNDATION_EXPORT void IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersNewThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadScheduler *new_IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadScheduler *create_IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersNewThreadScheduler)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadScheduler")
