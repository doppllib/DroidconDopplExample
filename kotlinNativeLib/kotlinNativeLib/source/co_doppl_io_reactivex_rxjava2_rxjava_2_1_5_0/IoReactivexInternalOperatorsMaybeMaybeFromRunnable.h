//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromRunnable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFromRunnable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromRunnable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromRunnable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFromRunnable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFromRunnable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromRunnable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFromRunnable))
#define IoReactivexInternalOperatorsMaybeMaybeFromRunnable_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

#define RESTRICT_JavaUtilConcurrentCallable 1
#define INCLUDE_JavaUtilConcurrentCallable 1
#include "java/util/concurrent/Callable.h"

@protocol IoReactivexMaybeObserver;
@protocol JavaLangRunnable;

@interface IoReactivexInternalOperatorsMaybeMaybeFromRunnable : IoReactivexMaybe < JavaUtilConcurrentCallable > {
 @public
  id<JavaLangRunnable> runnable_;
}

#pragma mark Public

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (id)call;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFromRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFromRunnable, runnable_, id<JavaLangRunnable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(IoReactivexInternalOperatorsMaybeMaybeFromRunnable *self, id<JavaLangRunnable> runnable);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFromRunnable *new_IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFromRunnable *create_IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFromRunnable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFromRunnable")
