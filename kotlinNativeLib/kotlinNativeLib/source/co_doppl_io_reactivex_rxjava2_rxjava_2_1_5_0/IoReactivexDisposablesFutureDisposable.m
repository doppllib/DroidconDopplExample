//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesFutureDisposable.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexDisposablesFutureDisposable () {
 @public
  jboolean allowInterrupt_;
}

@end

inline jlong IoReactivexDisposablesFutureDisposable_get_serialVersionUID();
#define IoReactivexDisposablesFutureDisposable_serialVersionUID 6545242830671168775LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexDisposablesFutureDisposable, serialVersionUID, jlong)

@implementation IoReactivexDisposablesFutureDisposable

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)run
                                     withBoolean:(jboolean)allowInterrupt {
  IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(self, run, allowInterrupt);
  return self;
}

- (jboolean)isDisposed {
  id<JavaUtilConcurrentFuture> f = [self get];
  return f == nil || [f isDone];
}

- (void)dispose {
  id<JavaUtilConcurrentFuture> f = [self getAndSetWithId:nil];
  if (f != nil) {
    [f cancelWithBoolean:allowInterrupt_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:withBoolean:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexDisposablesFutureDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "allowInterrupt_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;Z", "(Ljava/util/concurrent/Future<*>;Z)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/util/concurrent/Future<*>;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexDisposablesFutureDisposable = { "FutureDisposable", "io.reactivex.disposables", ptrTable, methods, fields, 7, 0x10, 3, 2, -1, -1, -1, 2, -1 };
  return &_IoReactivexDisposablesFutureDisposable;
}

@end

void IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(IoReactivexDisposablesFutureDisposable *self, id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt) {
  JavaUtilConcurrentAtomicAtomicReference_initWithId_(self, run);
  self->allowInterrupt_ = allowInterrupt;
}

IoReactivexDisposablesFutureDisposable *new_IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt) {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesFutureDisposable, initWithJavaUtilConcurrentFuture_withBoolean_, run, allowInterrupt)
}

IoReactivexDisposablesFutureDisposable *create_IoReactivexDisposablesFutureDisposable_initWithJavaUtilConcurrentFuture_withBoolean_(id<JavaUtilConcurrentFuture> run, jboolean allowInterrupt) {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesFutureDisposable, initWithJavaUtilConcurrentFuture_withBoolean_, run, allowInterrupt)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexDisposablesFutureDisposable)
