//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_serialVersionUID -2514538129242366402LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)unbounded
                                withBoolean:(jboolean)delayError
             withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(self, source, bufferSize, unbounded, delayError, onOverflow);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(s, bufferSize_, unbounded_, delayError_, onOverflow_)];
}

- (void)dealloc {
  RELEASE_(onOverflow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withInt:withBoolean:withBoolean:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unbounded_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onOverflow_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;IZZLIoReactivexFunctionsAction;", "(Lio/reactivex/Flowable<TT;>;IZZLio/reactivex/functions/Action;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer = { "FlowableOnBackpressureBuffer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *self, IoReactivexFlowable *source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->bufferSize_ = bufferSize;
  self->unbounded_ = unbounded;
  self->delayError_ = delayError;
  JreStrongAssign(&self->onOverflow_, onOverflow);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexFlowable *source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer, initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_, source, bufferSize, unbounded, delayError, onOverflow)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexFlowable *source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer, initWithIoReactivexFlowable_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_, source, bufferSize, unbounded, delayError, onOverflow)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)unbounded
                                         withBoolean:(jboolean)delayError
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(self, actual, bufferSize, unbounded, delayError, onOverflow);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (![((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    IoReactivexExceptionsMissingBackpressureException *ex = create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Buffer is full");
    @try {
      [((id<IoReactivexFunctionsAction>) nil_chk(onOverflow_)) run];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [ex initCauseWithJavaLangThrowable:e];
    }
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  if (outputFused_) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:nil];
  }
  else {
    [self drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if (outputFused_) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  else {
    [self drain];
  }
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if (outputFused_) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
  else {
    [self drain];
  }
}

- (void)requestWithLong:(jlong)n {
  if (!outputFused_) {
    if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
      IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
      [self drain];
    }
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    if ([self getAndIncrement] == 0) {
      [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    jint missed = 1;
    id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
    id<OrgReactivestreamsSubscriber> a = actual_;
    for (; ; ) {
      if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a]) {
        return;
      }
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong e = 0LL;
      while (e != r) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v = [q poll];
        jboolean empty = v == nil;
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a]) {
          return;
        }
        if (empty) {
          break;
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
        e++;
      }
      if (e == r) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        jboolean empty = [q isEmpty];
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a]) {
          return;
        }
      }
      if (e != 0LL) {
        if (r != JavaLangLong_MAX_VALUE) {
          [requested_ addAndGetWithLong:-e];
        }
      }
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
    return true;
  }
  if (d) {
    if (delayError_) {
      if (empty) {
        JavaLangThrowable *e = error_;
        if (e != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return true;
      }
    }
    else {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        return true;
      }
      else if (empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return true;
      }
    }
  }
  return false;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id __nullable)poll {
  return [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) poll];
}

- (void)clear {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
}

- (jboolean)isEmpty {
  return [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) isEmpty];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(queue_);
  RELEASE_(onOverflow_);
  RELEASE_(s_);
  RELEASE_(error_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 16, 17, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withBoolean:withBoolean:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(drain);
  methods[8].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:);
  methods[9].selector = @selector(requestFusionWithInt:);
  methods[10].selector = @selector(poll);
  methods[11].selector = @selector(clear);
  methods[12].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimplePlainQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onOverflow_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;IZZLIoReactivexFunctionsAction;", "(Lorg/reactivestreams/Subscriber<-TT;>;IZZLio/reactivex/functions/Action;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;", "(ZZLorg/reactivestreams/Subscriber<-TT;>;)Z", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/fuseable/SimplePlainQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber = { "BackpressureBufferSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 11, 20, -1, -1, 21, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onOverflow_, onOverflow);
  self->delayError_ = delayError;
  id<IoReactivexInternalFuseableSimplePlainQueue> q;
  if (unbounded) {
    q = create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize);
  }
  else {
    q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(bufferSize);
  }
  JreStrongAssign(&self->queue_, q);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_, actual, bufferSize, unbounded, delayError, onOverflow)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_, actual, bufferSize, unbounded, delayError, onOverflow)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber)
