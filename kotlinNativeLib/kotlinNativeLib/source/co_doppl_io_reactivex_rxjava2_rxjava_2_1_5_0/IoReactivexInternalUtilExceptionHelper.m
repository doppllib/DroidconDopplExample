//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalUtilExceptionHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalUtilExceptionHelper_init(IoReactivexInternalUtilExceptionHelper *self);

__attribute__((unused)) static IoReactivexInternalUtilExceptionHelper *new_IoReactivexInternalUtilExceptionHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalUtilExceptionHelper *create_IoReactivexInternalUtilExceptionHelper_init();

inline jlong IoReactivexInternalUtilExceptionHelper_Termination_get_serialVersionUID();
#define IoReactivexInternalUtilExceptionHelper_Termination_serialVersionUID -4649703670690200604LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalUtilExceptionHelper_Termination, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalUtilExceptionHelper)

JavaLangThrowable *IoReactivexInternalUtilExceptionHelper_TERMINATED;

@implementation IoReactivexInternalUtilExceptionHelper

+ (JavaLangThrowable *)TERMINATED {
  return IoReactivexInternalUtilExceptionHelper_TERMINATED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilExceptionHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangRuntimeException *)wrapOrThrowWithJavaLangThrowable:(JavaLangThrowable *)error {
  return IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(error);
}

+ (jboolean)addThrowableWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                                              withJavaLangThrowable:(JavaLangThrowable *)exception {
  return IoReactivexInternalUtilExceptionHelper_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withJavaLangThrowable_(field, exception);
}

+ (JavaLangThrowable *)terminateWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field {
  return IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(field);
}

+ (id<JavaUtilList>)flattenWithJavaLangThrowable:(JavaLangThrowable *)t {
  return IoReactivexInternalUtilExceptionHelper_flattenWithJavaLangThrowable_(t);
}

+ (JavaLangException *)throwIfThrowableWithJavaLangThrowable:(JavaLangThrowable *)e {
  return IoReactivexInternalUtilExceptionHelper_throwIfThrowableWithJavaLangThrowable_(e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 8, 1, -1, 9, -1, -1 },
    { NULL, "LJavaLangException;", 0x9, 10, 1, 1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(wrapOrThrowWithJavaLangThrowable:);
  methods[2].selector = @selector(addThrowableWithJavaUtilConcurrentAtomicAtomicReference:withJavaLangThrowable:);
  methods[3].selector = @selector(terminateWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[4].selector = @selector(flattenWithJavaLangThrowable:);
  methods[5].selector = @selector(throwIfThrowableWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TERMINATED", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "wrapOrThrow", "LJavaLangThrowable;", "addThrowable", "LJavaUtilConcurrentAtomicAtomicReference;LJavaLangThrowable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/lang/Throwable;)Z", "terminate", "LJavaUtilConcurrentAtomicAtomicReference;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)Ljava/lang/Throwable;", "flatten", "(Ljava/lang/Throwable;)Ljava/util/List<Ljava/lang/Throwable;>;", "throwIfThrowable", "<E:Ljava/lang/Throwable;>(Ljava/lang/Throwable;)Ljava/lang/Exception;^TE;", &IoReactivexInternalUtilExceptionHelper_TERMINATED, "LIoReactivexInternalUtilExceptionHelper_Termination;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilExceptionHelper = { "ExceptionHelper", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 6, 1, -1, 13, -1, -1, -1 };
  return &_IoReactivexInternalUtilExceptionHelper;
}

+ (void)initialize {
  if (self == [IoReactivexInternalUtilExceptionHelper class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalUtilExceptionHelper_TERMINATED, new_IoReactivexInternalUtilExceptionHelper_Termination_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalUtilExceptionHelper)
  }
}

@end

void IoReactivexInternalUtilExceptionHelper_init(IoReactivexInternalUtilExceptionHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalUtilExceptionHelper *new_IoReactivexInternalUtilExceptionHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilExceptionHelper, init)
}

IoReactivexInternalUtilExceptionHelper *create_IoReactivexInternalUtilExceptionHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilExceptionHelper, init)
}

JavaLangRuntimeException *IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(JavaLangThrowable *error) {
  IoReactivexInternalUtilExceptionHelper_initialize();
  if ([error isKindOfClass:[JavaLangError class]]) {
    @throw nil_chk((JavaLangError *) cast_chk(error, [JavaLangError class]));
  }
  if ([error isKindOfClass:[JavaLangRuntimeException class]]) {
    return (JavaLangRuntimeException *) cast_chk(error, [JavaLangRuntimeException class]);
  }
  return create_JavaLangRuntimeException_initWithJavaLangThrowable_(error);
}

jboolean IoReactivexInternalUtilExceptionHelper_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withJavaLangThrowable_(JavaUtilConcurrentAtomicAtomicReference *field, JavaLangThrowable *exception) {
  IoReactivexInternalUtilExceptionHelper_initialize();
  for (; ; ) {
    JavaLangThrowable *current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(field)) get];
    if (current == IoReactivexInternalUtilExceptionHelper_TERMINATED) {
      return false;
    }
    JavaLangThrowable *update;
    if (current == nil) {
      update = exception;
    }
    else {
      update = create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ current, exception } count:2 type:JavaLangThrowable_class_()]);
    }
    if ([field compareAndSetWithId:current withId:update]) {
      return true;
    }
  }
}

JavaLangThrowable *IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *field) {
  IoReactivexInternalUtilExceptionHelper_initialize();
  JavaLangThrowable *current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(field)) get];
  if (current != IoReactivexInternalUtilExceptionHelper_TERMINATED) {
    current = [field getAndSetWithId:IoReactivexInternalUtilExceptionHelper_TERMINATED];
  }
  return current;
}

id<JavaUtilList> IoReactivexInternalUtilExceptionHelper_flattenWithJavaLangThrowable_(JavaLangThrowable *t) {
  IoReactivexInternalUtilExceptionHelper_initialize();
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  JavaUtilArrayDeque *deque = create_JavaUtilArrayDeque_init();
  [deque offerWithId:t];
  while (![deque isEmpty]) {
    JavaLangThrowable *e = [deque removeFirst];
    if ([e isKindOfClass:[IoReactivexExceptionsCompositeException class]]) {
      IoReactivexExceptionsCompositeException *ce = (IoReactivexExceptionsCompositeException *) cast_chk(e, [IoReactivexExceptionsCompositeException class]);
      id<JavaUtilList> exceptions = [((IoReactivexExceptionsCompositeException *) nil_chk(ce)) getExceptions];
      for (jint i = [((id<JavaUtilList>) nil_chk(exceptions)) size] - 1; i >= 0; i--) {
        [deque offerFirstWithId:[exceptions getWithInt:i]];
      }
    }
    else {
      [list addWithId:e];
    }
  }
  return list;
}

JavaLangException *IoReactivexInternalUtilExceptionHelper_throwIfThrowableWithJavaLangThrowable_(JavaLangThrowable *e) {
  IoReactivexInternalUtilExceptionHelper_initialize();
  if ([e isKindOfClass:[JavaLangException class]]) {
    return (JavaLangException *) cast_chk(e, [JavaLangException class]);
  }
  @throw nil_chk(e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilExceptionHelper)

@implementation IoReactivexInternalUtilExceptionHelper_Termination

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilExceptionHelper_Termination_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThrowable *)fillInStackTrace {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fillInStackTrace);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalUtilExceptionHelper_Termination_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalUtilExceptionHelper;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilExceptionHelper_Termination = { "Termination", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x18, 2, 1, 0, -1, -1, -1, -1 };
  return &_IoReactivexInternalUtilExceptionHelper_Termination;
}

@end

void IoReactivexInternalUtilExceptionHelper_Termination_init(IoReactivexInternalUtilExceptionHelper_Termination *self) {
  JavaLangThrowable_initWithNSString_(self, @"No further exceptions");
}

IoReactivexInternalUtilExceptionHelper_Termination *new_IoReactivexInternalUtilExceptionHelper_Termination_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilExceptionHelper_Termination, init)
}

IoReactivexInternalUtilExceptionHelper_Termination *create_IoReactivexInternalUtilExceptionHelper_Termination_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilExceptionHelper_Termination, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilExceptionHelper_Termination)
