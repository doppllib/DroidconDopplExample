//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicQueueDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableFromArray.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"

@implementation IoReactivexInternalOperatorsObservableObservableFromArray

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)array {
  IoReactivexInternalOperatorsObservableObservableFromArray_initWithNSObjectArray_(self, array);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable *d = create_IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable_initWithIoReactivexObserver_withNSObjectArray_(s, array_);
  [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (d->fusionMode_) {
    return;
  }
  [d run];
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "array_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "([TT;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "[TT;", "LIoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFromArray = { "ObservableFromArray", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFromArray;
}

@end

void IoReactivexInternalOperatorsObservableObservableFromArray_initWithNSObjectArray_(IoReactivexInternalOperatorsObservableObservableFromArray *self, IOSObjectArray *array) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->array_, array);
}

IoReactivexInternalOperatorsObservableObservableFromArray *new_IoReactivexInternalOperatorsObservableObservableFromArray_initWithNSObjectArray_(IOSObjectArray *array) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFromArray, initWithNSObjectArray_, array)
}

IoReactivexInternalOperatorsObservableObservableFromArray *create_IoReactivexInternalOperatorsObservableObservableFromArray_initWithNSObjectArray_(IOSObjectArray *array) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFromArray, initWithNSObjectArray_, array)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFromArray)

@implementation IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                          withNSObjectArray:(IOSObjectArray *)array {
  IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable_initWithIoReactivexObserver_withNSObjectArray_(self, actual, array);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_SYNC) != 0) {
    fusionMode_ = true;
    return IoReactivexInternalFuseableQueueFuseable_SYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id __nullable)poll {
  jint i = index_;
  IOSObjectArray *a = array_;
  if (i != ((IOSObjectArray *) nil_chk(a))->size_) {
    index_ = i + 1;
    return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(IOSObjectArray_Get(a, i), @"The array element is null");
  }
  return nil;
}

- (jboolean)isEmpty {
  return index_ == ((IOSObjectArray *) nil_chk(array_))->size_;
}

- (void)clear {
  index_ = ((IOSObjectArray *) nil_chk(array_))->size_;
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)run {
  IOSObjectArray *a = array_;
  jint n = ((IOSObjectArray *) nil_chk(a))->size_;
  for (jint i = 0; i < n && ![self isDisposed]; i++) {
    id value = IOSObjectArray_Get(a, i);
    if (value == nil) {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$I$", @"The ", i, @"th element is null"))];
      return;
    }
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:value];
  }
  if (![self isDisposed]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withNSObjectArray:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "array_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fusionMode_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;[LNSObject;", "(Lio/reactivex/Observer<-TT;>;[TT;)V", "requestFusion", "I", "()TT;", "Lio/reactivex/Observer<-TT;>;", "[TT;", "LIoReactivexInternalOperatorsObservableObservableFromArray;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicQueueDisposable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable = { "FromArrayDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 5, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable_initWithIoReactivexObserver_withNSObjectArray_(IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable *self, id<IoReactivexObserver> actual, IOSObjectArray *array) {
  IoReactivexInternalObserversBasicQueueDisposable_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->array_, array);
}

IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable *new_IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable_initWithIoReactivexObserver_withNSObjectArray_(id<IoReactivexObserver> actual, IOSObjectArray *array) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable, initWithIoReactivexObserver_withNSObjectArray_, actual, array)
}

IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable *create_IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable_initWithIoReactivexObserver_withNSObjectArray_(id<IoReactivexObserver> actual, IOSObjectArray *array) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable, initWithIoReactivexObserver_withNSObjectArray_, actual, array)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFromArray_FromArrayDisposable)
