//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableTimeout.h"
#include "IoReactivexInternalSubscribersFullArbiterSubscriber.h"
#include "IoReactivexInternalSubscriptionsFullArbiter.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubscribersDisposableSubscriber.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@interface IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout : NSObject

@end

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeout

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)firstTimeoutIndicator
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableTimeout_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(self, source, firstTimeoutIndicator, itemTimeoutIndicator, other);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (other_ == nil) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), firstTimeoutIndicator_, itemTimeoutIndicator_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(s, firstTimeoutIndicator_, itemTimeoutIndicator_, other_)];
  }
}

- (void)dealloc {
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "firstTimeoutIndicator_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;LOrgReactivestreamsPublisher;", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<TU;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;Lorg/reactivestreams/Publisher<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;", "Lorg/reactivestreams/Publisher<+TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber;LIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout;LIoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber;LIoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeout = { "FlowableTimeout", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeout;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeout_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeout *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsFlowableFlowableTimeout *new_IoReactivexInternalOperatorsFlowableFlowableTimeout_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_, source, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

IoReactivexInternalOperatorsFlowableFlowableTimeout *create_IoReactivexInternalOperatorsFlowableFlowableTimeout_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_, source, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeout)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(timeoutWithLong:);
  methods[1].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "timeout", "J", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsFlowableFlowableTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout = { "OnTimeout", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x608, 2, 0, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)firstTimeoutIndicator
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator {
  IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(self, actual, firstTimeoutIndicator, itemTimeoutIndicator);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    return;
  }
  JreStrongAssign(&self->s_, s);
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<OrgReactivestreamsPublisher> p = firstTimeoutIndicator_;
  if (p != nil) {
    IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *tis = create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(self, 0);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timeout_)) compareAndSetWithId:nil withId:tis]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:self];
      [p subscribeWithOrgReactivestreamsSubscriber:tis];
    }
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timeout_)) get];
  if (d != nil) {
    [d dispose];
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(itemTimeoutIndicator_)) applyWithId:t], @"The publisher returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [self cancel];
    [actual_ onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *tis = create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(self, idx);
  if ([timeout_ compareAndSetWithId:d withId:tis]) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:tis];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self cancel];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [self cancel];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timeout_);
}

- (void)timeoutWithLong:(jlong)idx {
  if (idx == JreLoadVolatileLong(&index_)) {
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(s_);
  RELEASE_(timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(timeoutWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "firstTimeoutIndicator_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "timeout_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<TU;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "timeout", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lorg/reactivestreams/Publisher<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Lio/reactivex/internal/operators/flowable/FlowableTimeout$OnTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber = { "TimeoutSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 7, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_, actual, firstTimeoutIndicator, itemTimeoutIndicator)
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_, actual, firstTimeoutIndicator, itemTimeoutIndicator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout:(id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout>)parent
                                                                             withLong:(jlong)index {
  IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(self, parent, index);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self cancel];
  [((id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout>) nil_chk(parent_)) timeoutWithLong:index_];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout>) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout>) nil_chk(parent_)) timeoutWithLong:index_];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout:withLong:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout;J", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsFlowableFlowableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber = { "TimeoutInnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *self, id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout> parent, jlong index) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout> parent, jlong index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_, parent, index)
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(id<IoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout> parent, jlong index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_, parent, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)firstTimeoutIndicator
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(self, actual, firstTimeoutIndicator, itemTimeoutIndicator, other);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    return;
  }
  JreStrongAssign(&self->s_, s);
  if (![((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) setSubscriptionWithOrgReactivestreamsSubscription:s]) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<OrgReactivestreamsPublisher> p = firstTimeoutIndicator_;
  if (p != nil) {
    IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *tis = create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(self, 0);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timeout_)) compareAndSetWithId:nil withId:tis]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:arbiter_];
      [p subscribeWithOrgReactivestreamsSubscriber:tis];
    }
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:arbiter_];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  if (![((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onNextWithId:t withOrgReactivestreamsSubscription:s_]) {
    return;
  }
  id<IoReactivexDisposablesDisposable> d = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timeout_)) get];
  if (d != nil) {
    [d dispose];
  }
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(itemTimeoutIndicator_)) applyWithId:t], @"The publisher returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber *tis = create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTimeout_OnTimeout_withLong_(self, idx);
  if ([timeout_ compareAndSetWithId:d withId:tis]) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:tis];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onErrorWithJavaLangThrowable:t withOrgReactivestreamsSubscription:s_];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onCompleteWithOrgReactivestreamsSubscription:s_];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timeout_);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)timeoutWithLong:(jlong)idx {
  if (idx == JreLoadVolatileLong(&index_)) {
    [self dispose];
    [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalSubscribersFullArbiterSubscriber_initWithIoReactivexInternalSubscriptionsFullArbiter_(arbiter_)];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(firstTimeoutIndicator_);
  RELEASE_(itemTimeoutIndicator_);
  RELEASE_(other_);
  RELEASE_(arbiter_);
  RELEASE_(s_);
  RELEASE_(timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(timeoutWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "firstTimeoutIndicator_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "itemTimeoutIndicator_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "arbiter_", "LIoReactivexInternalSubscriptionsFullArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "timeout_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<TU;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;Lorg/reactivestreams/Publisher<+TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "timeout", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lorg/reactivestreams/Publisher<TU;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<TV;>;>;", "Lorg/reactivestreams/Publisher<+TT;>;", "Lio/reactivex/internal/subscriptions/FullArbiter<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeout;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/operators/flowable/FlowableTimeout$OnTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber = { "TimeoutOtherSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 10, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->firstTimeoutIndicator_, firstTimeoutIndicator);
  JreStrongAssign(&self->itemTimeoutIndicator_, itemTimeoutIndicator);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalSubscriptionsFullArbiter_initWithOrgReactivestreamsSubscriber_withIoReactivexDisposablesDisposable_withInt_(actual, self, 8));
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_, actual, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> firstTimeoutIndicator, id<IoReactivexFunctionsFunction> itemTimeoutIndicator, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withOrgReactivestreamsPublisher_, actual, firstTimeoutIndicator, itemTimeoutIndicator, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeout_TimeoutOtherSubscriber)
