//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableRepeatWhen.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilHalfSerializer.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexSubjectsPublishSubject.h"
#include "IoReactivexSubjectsSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_serialVersionUID 802743776666017014LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver () {
 @public
  IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_serialVersionUID 3254781284376480842LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableRepeatWhen

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexInternalOperatorsObservableObservableRepeatWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(self, source, handler);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexSubjectsSubject *signaller = [((IoReactivexSubjectsPublishSubject *) nil_chk(IoReactivexSubjectsPublishSubject_create())) toSerialized];
  id<IoReactivexObservableSource> other;
  @try {
    other = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(handler_)) applyWithId:signaller], @"The handler returned a null ObservableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, observer);
    return;
  }
  IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *parent = create_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(observer, signaller, source_);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [((id<IoReactivexObservableSource>) nil_chk(other)) subscribeWithIoReactivexObserver:parent->inner_];
  [parent subscribeNext];
}

- (void)dealloc {
  RELEASE_(handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "handler_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-Lio/reactivex/Observable<Ljava/lang/Object;>;+Lio/reactivex/ObservableSource<*>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/functions/Function<-Lio/reactivex/Observable<Ljava/lang/Object;>;+Lio/reactivex/ObservableSource<*>;>;", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRepeatWhen = { "ObservableRepeatWhen", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRepeatWhen;
}

@end

void IoReactivexInternalOperatorsObservableObservableRepeatWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableRepeatWhen *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->handler_, handler);
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen *new_IoReactivexInternalOperatorsObservableObservableRepeatWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, handler)
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen *create_IoReactivexInternalOperatorsObservableObservableRepeatWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, handler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRepeatWhen)

@implementation IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withIoReactivexSubjectsSubject:(IoReactivexSubjectsSubject *)signaller
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source {
  IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(self, actual, signaller, source);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self->d_, d);
}

- (void)onNextWithId:(id)t {
  IoReactivexInternalUtilHalfSerializer_onNextWithIoReactivexObserver_withId_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, t, self, error_);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(inner_);
  IoReactivexInternalUtilHalfSerializer_onErrorWithIoReactivexObserver_withJavaLangThrowable_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, e, self, error_);
}

- (void)onComplete {
  JreAssignVolatileBoolean(&active_, false);
  [((IoReactivexSubjectsSubject *) nil_chk(signaller_)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(d_)) get]);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(d_);
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(inner_);
}

- (void)innerNext {
  [self subscribeNext];
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(d_);
  IoReactivexInternalUtilHalfSerializer_onErrorWithIoReactivexObserver_withJavaLangThrowable_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, ex, self, error_);
}

- (void)innerComplete {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(d_);
  IoReactivexInternalUtilHalfSerializer_onCompleteWithIoReactivexObserver_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexInternalUtilAtomicThrowable_(actual_, self, error_);
}

- (void)subscribeNext {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    do {
      if ([self isDisposed]) {
        return;
      }
      if (!JreLoadVolatileBoolean(&active_)) {
        JreAssignVolatileBoolean(&active_, true);
        [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:self];
      }
    }
    while ([wip_ decrementAndGet] != 0);
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(wip_);
  RELEASE_(error_);
  RELEASE_(signaller_);
  RELEASE_(inner_);
  RELEASE_(d_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexSubjectsSubject:withIoReactivexObservableSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(innerNext);
  methods[8].selector = @selector(innerErrorWithJavaLangThrowable:);
  methods[9].selector = @selector(innerComplete);
  methods[10].selector = @selector(subscribeNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "signaller_", "LIoReactivexSubjectsSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "inner_", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexSubjectsSubject;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/subjects/Subject<Ljava/lang/Object;>;Lio/reactivex/ObservableSource<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerError", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/subjects/Subject<Ljava/lang/Object;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/ObservableSource<TT;>;", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen;", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver = { "RepeatWhenObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 11, 9, 14, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *self, id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->signaller_, signaller);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->inner_, new_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_(self));
  JreStrongAssignAndConsume(&self->d_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *new_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver, initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_, actual, signaller, source)
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *create_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver, initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_, actual, signaller, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver)

@implementation IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver:(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *)outer$ {
  IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onNextWithId:(id)t {
  [this$0_ innerNext];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [this$0_ innerErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [this$0_ innerComplete];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver = { "InnerRepeatObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 5, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver *self, IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver *new_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver, initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_, outer$)
}

IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver *create_IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver, initWithIoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableRepeatWhen_RepeatWhenObserver_InnerRepeatObserver)
