//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableConcatArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_serialVersionUID -7965400327305809232LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsCompletableCompletableConcatArray

- (instancetype)initWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsCompletableCompletableConcatArray_initWithIoReactivexCompletableSourceArray_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver *inner = create_IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_(s, sources_);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:inner->sd_];
  [inner next];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSourceArray:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableConcatArray = { "CompletableConcatArray", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableConcatArray;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableConcatArray_initWithIoReactivexCompletableSourceArray_(IoReactivexInternalOperatorsCompletableCompletableConcatArray *self, IOSObjectArray *sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableConcatArray *new_IoReactivexInternalOperatorsCompletableCompletableConcatArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatArray, initWithIoReactivexCompletableSourceArray_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableConcatArray *create_IoReactivexInternalOperatorsCompletableCompletableConcatArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatArray, initWithIoReactivexCompletableSourceArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableConcatArray)

@implementation IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                 withIoReactivexCompletableSourceArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_(self, actual, sources);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sd_)) updateWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [self next];
}

- (void)next {
  if ([((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sd_)) isDisposed]) {
    return;
  }
  if ([self getAndIncrement] != 0) {
    return;
  }
  IOSObjectArray *a = sources_;
  do {
    if ([sd_ isDisposed]) {
      return;
    }
    jint idx = index_++;
    if (idx == ((IOSObjectArray *) nil_chk(a))->size_) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
      return;
    }
    [((id<IoReactivexCompletableSource>) nil_chk(IOSObjectArray_Get(a, idx))) subscribeWithIoReactivexCompletableObserver:self];
  }
  while ([self decrementAndGet] != 0);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sources_);
  RELEASE_(sd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexCompletableSourceArray:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sources_", "[LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sd_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;[LIoReactivexCompletableSource;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableConcatArray;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver = { "ConcatInnerObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 5, 5, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_(IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver *self, id<IoReactivexCompletableObserver> actual, IOSObjectArray *sources) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssignAndConsume(&self->sd_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver *new_IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_(id<IoReactivexCompletableObserver> actual, IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver, initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_, actual, sources)
}

IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver *create_IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_(id<IoReactivexCompletableObserver> actual, IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver, initWithIoReactivexCompletableObserver_withIoReactivexCompletableSourceArray_, actual, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableConcatArray_ConcatInnerObserver)
