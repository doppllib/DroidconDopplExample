//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScalarXMap.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsScalarSubscription.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@interface IoReactivexInternalOperatorsFlowableFlowableScalarXMap ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init(IoReactivexInternalOperatorsFlowableFlowableScalarXMap *self);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableScalarXMap *new_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableScalarXMap *create_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init();

@implementation IoReactivexInternalOperatorsFlowableFlowableScalarXMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)tryScalarXMapSubscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                 withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(source, subscriber, mapper);
}

+ (IoReactivexFlowable *)scalarXMapWithId:(id)value
         withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexInternalOperatorsFlowableFlowableScalarXMap_scalarXMapWithId_withIoReactivexFunctionsFunction_(value, mapper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x9, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(tryScalarXMapSubscribeWithOrgReactivestreamsPublisher:withOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:);
  methods[2].selector = @selector(scalarXMapWithId:withIoReactivexFunctionsFunction:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "tryScalarXMapSubscribe", "LOrgReactivestreamsPublisher;LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<TT;>;Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;)Z", "scalarXMap", "LNSObject;LIoReactivexFunctionsFunction;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(TT;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;)Lio/reactivex/Flowable<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableScalarXMap = { "FlowableScalarXMap", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, 6, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableScalarXMap;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init(IoReactivexInternalOperatorsFlowableFlowableScalarXMap *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalOperatorsFlowableFlowableScalarXMap *new_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableScalarXMap, init)
}

IoReactivexInternalOperatorsFlowableFlowableScalarXMap *create_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableScalarXMap, init)
}

jboolean IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsSubscriber> subscriber, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalOperatorsFlowableFlowableScalarXMap_initialize();
  if ([JavaUtilConcurrentCallable_class_() isInstance:source]) {
    id t;
    @try {
      t = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(source, JavaUtilConcurrentCallable_class_())))) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, subscriber);
      return true;
    }
    if (t == nil) {
      IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(subscriber);
      return true;
    }
    id<OrgReactivestreamsPublisher> r;
    @try {
      r = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper)) applyWithId:t], @"The mapper returned a null Publisher");
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, subscriber);
      return true;
    }
    if ([JavaUtilConcurrentCallable_class_() isInstance:r]) {
      id u;
      @try {
        u = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(r, JavaUtilConcurrentCallable_class_())))) call];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, subscriber);
        return true;
      }
      if (u == nil) {
        IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(subscriber);
        return true;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalSubscriptionsScalarSubscription_initWithOrgReactivestreamsSubscriber_withId_(subscriber, u)];
    }
    else {
      [((id<OrgReactivestreamsPublisher>) nil_chk(r)) subscribeWithOrgReactivestreamsSubscriber:subscriber];
    }
    return true;
  }
  return false;
}

IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableScalarXMap_scalarXMapWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalOperatorsFlowableFlowableScalarXMap_initialize();
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(value, mapper));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableScalarXMap)

@implementation IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable

- (instancetype)initWithId:(id)value
withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(self, value, mapper);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  id<OrgReactivestreamsPublisher> other;
  @try {
    other = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value_], @"The mapper returned a null Publisher");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
    return;
  }
  if ([JavaUtilConcurrentCallable_class_() isInstance:other]) {
    id u;
    @try {
      u = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(other, JavaUtilConcurrentCallable_class_())))) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, s);
      return;
    }
    if (u == nil) {
      IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(s);
      return;
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalSubscriptionsScalarSubscription_initWithOrgReactivestreamsSubscriber_withId_(s, u)];
  }
  else {
    [((id<OrgReactivestreamsPublisher>) nil_chk(other)) subscribeWithOrgReactivestreamsSubscriber:s];
  }
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LIoReactivexFunctionsFunction;", "(TT;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "TT;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableScalarXMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable = { "ScalarXMapFlowable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *self, id value, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->value_, value);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *new_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable, initWithId_withIoReactivexFunctionsFunction_, value, mapper)
}

IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *create_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable, initWithId_withIoReactivexFunctionsFunction_, value, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable)
