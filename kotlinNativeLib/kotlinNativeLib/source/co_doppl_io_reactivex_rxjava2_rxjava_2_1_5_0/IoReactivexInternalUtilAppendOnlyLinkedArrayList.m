//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexInternalUtilAppendOnlyLinkedArrayList.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"

@interface IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate : NSObject

@end

@implementation IoReactivexInternalUtilAppendOnlyLinkedArrayList

- (void)java_finalize {
  jint c = capacity_;
  IOSObjectArray *me = head_;
  while (me != nil) {
    IOSObjectArray *next = (IOSObjectArray *) cast_check(IOSObjectArray_Get(me, c), IOSClass_arrayType(NSObject_class_(), 1));
    IOSObjectArray_Set(me, c, nil);
    me = next;
  }
  [super java_finalize];
}

- (instancetype)initWithInt:(jint)capacity {
  IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(self, capacity);
  return self;
}

- (void)addWithId:(id)value {
  jint c = capacity_;
  jint o = offset_;
  if (o == c) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:c + 1 type:NSObject_class_()];
    IOSObjectArray_Set(nil_chk(tail_), c, next);
    JreStrongAssign(&tail_, next);
    o = 0;
  }
  IOSObjectArray_Set(nil_chk(tail_), o, value);
  offset_ = o + 1;
}

- (void)setFirstWithId:(id)value {
  IOSObjectArray_Set(nil_chk(head_), 0, value);
}

- (void)forEachWhileWithIoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate:(id<IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate>)consumer {
  IOSObjectArray *a = head_;
  jint c = capacity_;
  while (a != nil) {
    for (jint i = 0; i < c; i++) {
      id o = IOSObjectArray_Get(a, i);
      if (o == nil) {
        break;
      }
      if ([((id<IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate>) nil_chk(consumer)) testWithId:o]) {
        break;
      }
    }
    a = (IOSObjectArray *) cast_check(IOSObjectArray_Get(a, c), IOSClass_arrayType(NSObject_class_(), 1));
  }
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber {
  IOSObjectArray *a = head_;
  jint c = capacity_;
  while (a != nil) {
    for (jint i = 0; i < c; i++) {
      id o = IOSObjectArray_Get(a, i);
      if (o == nil) {
        break;
      }
      if (IoReactivexInternalUtilNotificationLite_acceptFullWithId_withOrgReactivestreamsSubscriber_(o, subscriber)) {
        return true;
      }
    }
    a = (IOSObjectArray *) cast_check(IOSObjectArray_Get(a, c), IOSClass_arrayType(NSObject_class_(), 1));
  }
  return false;
}

- (jboolean)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IOSObjectArray *a = head_;
  jint c = capacity_;
  while (a != nil) {
    for (jint i = 0; i < c; i++) {
      id o = IOSObjectArray_Get(a, i);
      if (o == nil) {
        break;
      }
      if (IoReactivexInternalUtilNotificationLite_acceptFullWithId_withIoReactivexObserver_(o, observer)) {
        return true;
      }
    }
    a = (IOSObjectArray *) cast_check(IOSObjectArray_Get(a, c), IOSClass_arrayType(NSObject_class_(), 1));
  }
  return false;
}

- (void)forEachWhileWithId:(id)state
withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)consumer {
  IOSObjectArray *a = head_;
  jint c = capacity_;
  for (; ; ) {
    for (jint i = 0; i < c; i++) {
      id o = IOSObjectArray_Get(nil_chk(a), i);
      if (o == nil) {
        return;
      }
      if ([((id<IoReactivexFunctionsBiPredicate>) nil_chk(consumer)) testWithId:state withId:o]) {
        return;
      }
    }
    a = (IOSObjectArray *) cast_check(IOSObjectArray_Get(nil_chk(a), c), IOSClass_arrayType(NSObject_class_(), 1));
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexInternalUtilAppendOnlyLinkedArrayList class]);
  RELEASE_(head_);
  RELEASE_(tail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, -1, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, 10, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 7, 15, 16, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(java_finalize);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(addWithId:);
  methods[3].selector = @selector(setFirstWithId:);
  methods[4].selector = @selector(forEachWhileWithIoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate:);
  methods[5].selector = @selector(acceptWithOrgReactivestreamsSubscriber:);
  methods[6].selector = @selector(acceptWithIoReactivexObserver:);
  methods[7].selector = @selector(forEachWhileWithId:withIoReactivexFunctionsBiPredicate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "capacity_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "head_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tail_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "finalize", "LJavaLangThrowable;", "I", "add", "LNSObject;", "(TT;)V", "setFirst", "forEachWhile", "LIoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate;", "(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate<-TT;>;)V", "accept", "LOrgReactivestreamsSubscriber;", "<U:Ljava/lang/Object;>(Lorg/reactivestreams/Subscriber<-TU;>;)Z", "LIoReactivexObserver;", "<U:Ljava/lang/Object;>(Lio/reactivex/Observer<-TU;>;)Z", "LNSObject;LIoReactivexFunctionsBiPredicate;", "LJavaLangException;", "<S:Ljava/lang/Object;>(TS;Lio/reactivex/functions/BiPredicate<-TS;-TT;>;)V", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilAppendOnlyLinkedArrayList = { "AppendOnlyLinkedArrayList", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, 8, -1, 18, -1 };
  return &_IoReactivexInternalUtilAppendOnlyLinkedArrayList;
}

@end

void IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(IoReactivexInternalUtilAppendOnlyLinkedArrayList *self, jint capacity) {
  NSObject_init(self);
  self->capacity_ = capacity;
  JreStrongAssignAndConsume(&self->head_, [IOSObjectArray newArrayWithLength:capacity + 1 type:NSObject_class_()]);
  JreStrongAssign(&self->tail_, self->head_);
}

IoReactivexInternalUtilAppendOnlyLinkedArrayList *new_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilAppendOnlyLinkedArrayList, initWithInt_, capacity)
}

IoReactivexInternalUtilAppendOnlyLinkedArrayList *create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilAppendOnlyLinkedArrayList, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilAppendOnlyLinkedArrayList)

@implementation IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "test", "LNSObject;", "(TT;)Z", "LIoReactivexInternalUtilAppendOnlyLinkedArrayList;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/functions/Predicate<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate = { "NonThrowingPredicate", "io.reactivex.internal.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate)
