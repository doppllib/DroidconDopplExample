//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleTakeUntil
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleTakeUntil

#if !defined (IoReactivexInternalOperatorsSingleSingleTakeUntil_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTakeUntil))
#define IoReactivexInternalOperatorsSingleSingleTakeUntil_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsSingleSingleTakeUntil : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> source_;
  id<OrgReactivestreamsPublisher> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTakeUntil)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTakeUntil, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTakeUntil, other_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsSingleSingleTakeUntil *self, id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTakeUntil)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver))
#define IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *other_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

- (void)otherErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver, other_, IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber))
#define IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber > {
 @public
  IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver:(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber, parent_, IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *self, IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTakeUntil")
