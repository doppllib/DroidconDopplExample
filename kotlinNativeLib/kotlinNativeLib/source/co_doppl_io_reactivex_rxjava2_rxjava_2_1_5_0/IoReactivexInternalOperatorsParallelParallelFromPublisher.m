//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsParallelParallelFromPublisher.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"

inline jlong IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_serialVersionUID -4470634016609963609LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription () {
 @public
  IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *this$0_;
}

@end

@implementation IoReactivexInternalOperatorsParallelParallelFromPublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                            withInt:(jint)parallelism
                                            withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelFromPublisher_initWithOrgReactivestreamsPublisher_withInt_withInt_(self, source, parallelism, prefetch);
  return self;
}

- (jint)parallelism {
  return parallelism_;
}

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  if (![self validateWithOrgReactivestreamsSubscriberArray:subscribers]) {
    return;
  }
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_initWithOrgReactivestreamsSubscriberArray_withInt_(subscribers, prefetch_)];
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withInt:withInt:);
  methods[1].selector = @selector(parallelism);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "parallelism_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;II", "(Lorg/reactivestreams/Publisher<+TT;>;II)V", "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TT;>;", "LIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher;", "<T:Ljava/lang/Object;>Lio/reactivex/parallel/ParallelFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFromPublisher = { "ParallelFromPublisher", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFromPublisher;
}

@end

void IoReactivexInternalOperatorsParallelParallelFromPublisher_initWithOrgReactivestreamsPublisher_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelFromPublisher *self, id<OrgReactivestreamsPublisher> source, jint parallelism, jint prefetch) {
  IoReactivexParallelParallelFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  self->parallelism_ = parallelism;
  self->prefetch_ = prefetch;
}

IoReactivexInternalOperatorsParallelParallelFromPublisher *new_IoReactivexInternalOperatorsParallelParallelFromPublisher_initWithOrgReactivestreamsPublisher_withInt_withInt_(id<OrgReactivestreamsPublisher> source, jint parallelism, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher, initWithOrgReactivestreamsPublisher_withInt_withInt_, source, parallelism, prefetch)
}

IoReactivexInternalOperatorsParallelParallelFromPublisher *create_IoReactivexInternalOperatorsParallelParallelFromPublisher_initWithOrgReactivestreamsPublisher_withInt_withInt_(id<OrgReactivestreamsPublisher> source, jint parallelism, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher, initWithOrgReactivestreamsPublisher_withInt_withInt_, source, parallelism, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFromPublisher)

@implementation IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher

- (instancetype)initWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers
                                                  withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_initWithOrgReactivestreamsSubscriberArray_withInt_(self, subscribers, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qs);
        JreAssignVolatileBoolean(&done_, true);
        [self setupSubscribers];
        [self drain];
        return;
      }
      else if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qs);
        [self setupSubscribers];
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_));
    [self setupSubscribers];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)setupSubscribers {
  IOSObjectArray *subs = subscribers_;
  jint m = ((IOSObjectArray *) nil_chk(subs))->size_;
  for (jint i = 0; i < m; i++) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(subscriberCount_)) lazySetWithInt:i + 1];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(IOSObjectArray_Get(subs, i))) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription_initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_(self, i, m)];
  }
}

- (void)onNextWithId:(id)t {
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:t]) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue is full?")];
      return;
    }
  }
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)cancelWithInt:(jint)m {
  if ([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(requests_)) decrementAndGetWithInt:m] == 0LL) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(self->s_)) cancel];
    if ([self getAndIncrement] == 0) {
      [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
    }
  }
}

- (void)drainAsync {
  jint missed = 1;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  IOSObjectArray *a = self->subscribers_;
  JavaUtilConcurrentAtomicAtomicLongArray *r = self->requests_;
  IOSLongArray *e = self->emissions_;
  jint n = ((IOSLongArray *) nil_chk(e))->size_;
  jint idx = index_;
  jint consumed = produced_;
  for (; ; ) {
    jint notReady = 0;
    for (; ; ) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
          {
            IOSObjectArray *a__ = a;
            id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              id<OrgReactivestreamsSubscriber> s = *b__++;
              [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onErrorWithJavaLangThrowable:ex];
            }
          }
          return;
        }
      }
      jboolean empty = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty];
      if (d && empty) {
        {
          IOSObjectArray *a__ = a;
          id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<OrgReactivestreamsSubscriber> s = *b__++;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onComplete];
          }
        }
        return;
      }
      if (empty) {
        break;
      }
      jlong requestAtIndex = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(r)) getWithInt:idx];
      jlong emissionAtIndex = IOSLongArray_Get(e, idx);
      if (requestAtIndex != emissionAtIndex && [r getWithInt:n + idx] == 0) {
        id v;
        @try {
          v = [q poll];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
          {
            IOSObjectArray *a__ = a;
            id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              id<OrgReactivestreamsSubscriber> s = *b__++;
              [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onErrorWithJavaLangThrowable:ex];
            }
          }
          return;
        }
        if (v == nil) {
          break;
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(IOSObjectArray_Get(nil_chk(a), idx))) onNextWithId:v];
        *IOSLongArray_GetRef(e, idx) = emissionAtIndex + 1;
        jint c = ++consumed;
        if (c == limit_) {
          consumed = 0;
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:c];
        }
        notReady = 0;
      }
      else {
        notReady++;
      }
      idx++;
      if (idx == n) {
        idx = 0;
      }
      if (notReady == n) {
        break;
      }
    }
    jint w = [self get];
    if (w == missed) {
      index_ = idx;
      produced_ = consumed;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)drainSync {
  jint missed = 1;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  IOSObjectArray *a = self->subscribers_;
  JavaUtilConcurrentAtomicAtomicLongArray *r = self->requests_;
  IOSLongArray *e = self->emissions_;
  jint n = ((IOSLongArray *) nil_chk(e))->size_;
  jint idx = index_;
  for (; ; ) {
    jint notReady = 0;
    for (; ; ) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        return;
      }
      jboolean empty = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty];
      if (empty) {
        {
          IOSObjectArray *a__ = a;
          id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<OrgReactivestreamsSubscriber> s = *b__++;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onComplete];
          }
        }
        return;
      }
      jlong requestAtIndex = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(r)) getWithInt:idx];
      jlong emissionAtIndex = IOSLongArray_Get(e, idx);
      if (requestAtIndex != emissionAtIndex && [r getWithInt:n + idx] == 0) {
        id v;
        @try {
          v = [q poll];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
          {
            IOSObjectArray *a__ = a;
            id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              id<OrgReactivestreamsSubscriber> s = *b__++;
              [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onErrorWithJavaLangThrowable:ex];
            }
          }
          return;
        }
        if (v == nil) {
          {
            IOSObjectArray *a__ = a;
            id<OrgReactivestreamsSubscriber> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              id<OrgReactivestreamsSubscriber> s = *b__++;
              [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onComplete];
            }
          }
          return;
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(IOSObjectArray_Get(nil_chk(a), idx))) onNextWithId:v];
        *IOSLongArray_GetRef(e, idx) = emissionAtIndex + 1;
        notReady = 0;
      }
      else {
        notReady++;
      }
      idx++;
      if (idx == n) {
        idx = 0;
      }
      if (notReady == n) {
        break;
      }
    }
    jint w = [self get];
    if (w == missed) {
      index_ = idx;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_SYNC) {
    [self drainSync];
  }
  else {
    [self drainAsync];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(subscribers_);
  RELEASE_(requests_);
  RELEASE_(emissions_);
  RELEASE_(s_);
  RELEASE_(queue_);
  RELEASE_(error_);
  RELEASE_(subscriberCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriberArray:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(setupSubscribers);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(cancelWithInt:);
  methods[7].selector = @selector(drainAsync);
  methods[8].selector = @selector(drainSync);
  methods[9].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "subscribers_", "[LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "requests_", "LJavaUtilConcurrentAtomicAtomicLongArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "emissions_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscriberCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "produced_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgReactivestreamsSubscriber;I", "([Lorg/reactivestreams/Subscriber<-TT;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "cancel", "I", "[Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsParallelParallelFromPublisher;", "LIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher = { "ParallelDispatcher", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 10, 15, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher;
}

@end

void IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_initWithOrgReactivestreamsSubscriberArray_withInt_(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *self, IOSObjectArray *subscribers, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->subscriberCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->subscribers_, subscribers);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
  jint m = ((IOSObjectArray *) nil_chk(subscribers))->size_;
  JreStrongAssignAndConsume(&self->requests_, new_JavaUtilConcurrentAtomicAtomicLongArray_initWithInt_(m + m + 1));
  [self->requests_ lazySetWithInt:m + m withLong:m];
  JreStrongAssignAndConsume(&self->emissions_, [IOSLongArray newArrayWithLength:m]);
}

IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *new_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_initWithOrgReactivestreamsSubscriberArray_withInt_(IOSObjectArray *subscribers, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher, initWithOrgReactivestreamsSubscriberArray_withInt_, subscribers, prefetch)
}

IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *create_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_initWithOrgReactivestreamsSubscriberArray_withInt_(IOSObjectArray *subscribers, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher, initWithOrgReactivestreamsSubscriberArray_withInt_, subscribers, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher)

@implementation IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription

- (instancetype)initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher:(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *)outer$
                                                                                             withInt:(jint)j
                                                                                             withInt:(jint)m {
  IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription_initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_(self, outer$, j, m);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    JavaUtilConcurrentAtomicAtomicLongArray *ra = this$0_->requests_;
    for (; ; ) {
      jlong r = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(ra)) getWithInt:j_];
      if (r == JavaLangLong_MAX_VALUE) {
        return;
      }
      jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
      if ([ra compareAndSetWithInt:j_ withLong:r withLong:u]) {
        break;
      }
    }
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriberCount_)) get] == m_) {
      [this$0_ drain];
    }
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(this$0_->requests_)) compareAndSetWithInt:m_ + j_ withLong:0LL withLong:1LL]) {
    [this$0_ cancelWithInt:m_ + m_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher:withInt:withInt:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "j_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "request", "J", "Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher<TT;>;", "LIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription = { "RailSubscription", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x10, 3, 3, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription;
}

@end

void IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription_initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription *self, IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *outer$, jint j, jint m) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->j_ = j;
  self->m_ = m;
}

IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription *new_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription_initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *outer$, jint j, jint m) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription, initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_, outer$, j, m)
}

IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription *create_IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription_initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher *outer$, jint j, jint m) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription, initWithIoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_withInt_withInt_, outer$, j, m)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFromPublisher_ParallelDispatcher_RailSubscription)
