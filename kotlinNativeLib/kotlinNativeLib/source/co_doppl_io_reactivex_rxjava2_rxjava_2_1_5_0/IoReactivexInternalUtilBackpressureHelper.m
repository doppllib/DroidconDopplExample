//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

@interface IoReactivexInternalUtilBackpressureHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalUtilBackpressureHelper_init(IoReactivexInternalUtilBackpressureHelper *self);

__attribute__((unused)) static IoReactivexInternalUtilBackpressureHelper *new_IoReactivexInternalUtilBackpressureHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalUtilBackpressureHelper *create_IoReactivexInternalUtilBackpressureHelper_init();

@implementation IoReactivexInternalUtilBackpressureHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilBackpressureHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)addCapWithLong:(jlong)a
               withLong:(jlong)b {
  return IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(a, b);
}

+ (jlong)multiplyCapWithLong:(jlong)a
                    withLong:(jlong)b {
  return IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(a, b);
}

+ (jlong)addWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                          withLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested, n);
}

+ (jlong)addCancelWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                                withLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_addCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested, n);
}

+ (jlong)producedWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                               withLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested, n);
}

+ (jlong)producedCancelWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                                     withLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_producedCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addCapWithLong:withLong:);
  methods[2].selector = @selector(multiplyCapWithLong:withLong:);
  methods[3].selector = @selector(addWithJavaUtilConcurrentAtomicAtomicLong:withLong:);
  methods[4].selector = @selector(addCancelWithJavaUtilConcurrentAtomicAtomicLong:withLong:);
  methods[5].selector = @selector(producedWithJavaUtilConcurrentAtomicAtomicLong:withLong:);
  methods[6].selector = @selector(producedCancelWithJavaUtilConcurrentAtomicAtomicLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addCap", "JJ", "multiplyCap", "add", "LJavaUtilConcurrentAtomicAtomicLong;J", "addCancel", "produced", "producedCancel" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilBackpressureHelper = { "BackpressureHelper", "io.reactivex.internal.util", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalUtilBackpressureHelper;
}

@end

void IoReactivexInternalUtilBackpressureHelper_init(IoReactivexInternalUtilBackpressureHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalUtilBackpressureHelper *new_IoReactivexInternalUtilBackpressureHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilBackpressureHelper, init)
}

IoReactivexInternalUtilBackpressureHelper *create_IoReactivexInternalUtilBackpressureHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilBackpressureHelper, init)
}

jlong IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(jlong a, jlong b) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  jlong u = a + b;
  if (u < 0LL) {
    return JavaLangLong_MAX_VALUE;
  }
  return u;
}

jlong IoReactivexInternalUtilBackpressureHelper_multiplyCapWithLong_withLong_(jlong a, jlong b) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  jlong u = a * b;
  if ((JreURShift64((a | b), 31)) != 0) {
    if (u / a != b) {
      return JavaLangLong_MAX_VALUE;
    }
  }
  return u;
}

jlong IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested)) get];
    if (r == JavaLangLong_MAX_VALUE) {
      return JavaLangLong_MAX_VALUE;
    }
    jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
    if ([requested compareAndSetWithLong:r withLong:u]) {
      return r;
    }
  }
}

jlong IoReactivexInternalUtilBackpressureHelper_addCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested)) get];
    if (r == JavaLangLong_MIN_VALUE) {
      return JavaLangLong_MIN_VALUE;
    }
    if (r == JavaLangLong_MAX_VALUE) {
      return JavaLangLong_MAX_VALUE;
    }
    jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
    if ([requested compareAndSetWithLong:r withLong:u]) {
      return r;
    }
  }
}

jlong IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  for (; ; ) {
    jlong current = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested)) get];
    if (current == JavaLangLong_MAX_VALUE) {
      return JavaLangLong_MAX_VALUE;
    }
    jlong update = current - n;
    if (update < 0LL) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J", @"More produced than requested: ", update)));
      update = 0LL;
    }
    if ([requested compareAndSetWithLong:current withLong:update]) {
      return update;
    }
  }
}

jlong IoReactivexInternalUtilBackpressureHelper_producedCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(JavaUtilConcurrentAtomicAtomicLong *requested, jlong n) {
  IoReactivexInternalUtilBackpressureHelper_initialize();
  for (; ; ) {
    jlong current = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested)) get];
    if (current == JavaLangLong_MIN_VALUE) {
      return JavaLangLong_MIN_VALUE;
    }
    if (current == JavaLangLong_MAX_VALUE) {
      return JavaLangLong_MAX_VALUE;
    }
    jlong update = current - n;
    if (update < 0LL) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J", @"More produced than requested: ", update)));
      update = 0LL;
    }
    if ([requested compareAndSetWithLong:current withLong:update]) {
      return update;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilBackpressureHelper)
