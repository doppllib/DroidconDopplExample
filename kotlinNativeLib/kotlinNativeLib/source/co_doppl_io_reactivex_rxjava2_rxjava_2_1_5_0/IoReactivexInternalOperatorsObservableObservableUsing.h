//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableUsing
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableUsing

#if !defined (IoReactivexInternalOperatorsObservableObservableUsing_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableUsing))
#define IoReactivexInternalOperatorsObservableObservableUsing_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableUsing : IoReactivexObservable {
 @public
  id<JavaUtilConcurrentCallable> resourceSupplier_;
  id<IoReactivexFunctionsFunction> sourceSupplier_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                       withBoolean:(jboolean)eager;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUsing)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing, resourceSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing, sourceSupplier_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing, disposer_, id<IoReactivexFunctionsConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsObservableObservableUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUsing *new_IoReactivexInternalOperatorsObservableObservableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUsing *create_IoReactivexInternalOperatorsObservableObservableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableUsing)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver))
#define IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsConsumer;

@interface IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id resource_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                     withId:(id)resource
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                withBoolean:(jboolean)eager;

- (void)disposeAfter;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver, resource_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver, disposer_, id<IoReactivexFunctionsConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver *self, id<IoReactivexObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver *new_IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver *create_IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableUsing_UsingObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUsing")
