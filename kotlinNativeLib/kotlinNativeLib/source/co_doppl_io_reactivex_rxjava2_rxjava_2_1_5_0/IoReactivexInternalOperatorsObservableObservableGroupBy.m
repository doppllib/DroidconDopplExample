//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableGroupBy.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObservablesGroupedObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_serialVersionUID -3688291656102519502LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableGroupBy_State_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableGroupBy_State_serialVersionUID -3852313036005250360LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableGroupBy_State, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableGroupBy

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsObservableObservableGroupBy_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, source, keySelector, valueSelector, bufferSize, delayError);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(t, keySelector_, valueSelector_, bufferSize_, delayError_)];
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "valueSelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+TK;>;Lio/reactivex/functions/Function<-TT;+TV;>;IZ)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Lio/reactivex/observables/GroupedObservable<TK;TV;>;>;)V", "Lio/reactivex/functions/Function<-TT;+TK;>;", "Lio/reactivex/functions/Function<-TT;+TV;>;", "LIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver;LIoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast;LIoReactivexInternalOperatorsObservableObservableGroupBy_State;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;Lio/reactivex/observables/GroupedObservable<TK;TV;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGroupBy = { "ObservableGroupBy", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGroupBy;
}

@end

void IoReactivexInternalOperatorsObservableObservableGroupBy_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableGroupBy *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsObservableObservableGroupBy *new_IoReactivexInternalOperatorsObservableObservableGroupBy_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, keySelector, valueSelector, bufferSize, delayError)
}

IoReactivexInternalOperatorsObservableObservableGroupBy *create_IoReactivexInternalOperatorsObservableObservableGroupBy_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, keySelector, valueSelector, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGroupBy)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver)

id IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY;

@implementation IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver

+ (id)NULL_KEY {
  return IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, keySelector, valueSelector, bufferSize, delayError);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  id key;
  @try {
    key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:t];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  id mapKey = key != nil ? key : IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY;
  IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *group = [((id<JavaUtilMap>) nil_chk(groups_)) getWithId:mapKey];
  if (group == nil) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
      return;
    }
    group = IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withBoolean_(key, bufferSize_, self, delayError_);
    [groups_ putWithId:mapKey withId:group];
    [self getAndIncrement];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:group];
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(valueSelector_)) applyWithId:t], @"The value supplied is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  [((IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *) nil_chk(group)) onNextWithId:v];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(groups_)) values]);
  [groups_ clear];
  for (IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast * __strong e in list) {
    [((IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *) nil_chk(e)) onErrorWithJavaLangThrowable:t];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(groups_)) values]);
  [groups_ clear];
  for (IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast * __strong e in list) {
    [((IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *) nil_chk(e)) onComplete];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([self decrementAndGet] == 0) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    }
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get];
}

- (void)cancelWithId:(id)key {
  id mapKey = key != nil ? key : IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY;
  [((id<JavaUtilMap>) nil_chk(groups_)) removeWithId:mapKey];
  if ([self decrementAndGet] == 0) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  RELEASE_(groups_);
  RELEASE_(s_);
  RELEASE_(cancelled_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(cancelWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "valueSelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "groups_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "NULL_KEY", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Observer<-Lio/reactivex/observables/GroupedObservable<TK;TV;>;>;Lio/reactivex/functions/Function<-TT;+TK;>;Lio/reactivex/functions/Function<-TT;+TV;>;IZ)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "cancel", "(TK;)V", "Lio/reactivex/Observer<-Lio/reactivex/observables/GroupedObservable<TK;TV;>;>;", "Lio/reactivex/functions/Function<-TT;+TK;>;", "Lio/reactivex/functions/Function<-TT;+TV;>;", "Ljava/util/Map<Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast<TK;TV;>;>;", &IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY, "LIoReactivexInternalOperatorsObservableObservableGroupBy;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver = { "GroupByObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x19, 8, 10, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_NULL_KEY, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->groups_, new_JavaUtilConcurrentConcurrentHashMap_init());
  [self lazySetWithInt:1];
}

IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *new_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, keySelector, valueSelector, bufferSize, delayError)
}

IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *create_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, keySelector, valueSelector, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver)

@implementation IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast

+ (IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *)createWithWithId:(id)key
                                                                                     withInt:(jint)bufferSize
                 withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver:(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *)parent
                                                                                 withBoolean:(jboolean)delayError {
  return IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withBoolean_(key, bufferSize, parent, delayError);
}

- (instancetype)initWithId:(id)key
withIoReactivexInternalOperatorsObservableObservableGroupBy_State:(IoReactivexInternalOperatorsObservableObservableGroupBy_State *)state {
  IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_(self, key, state);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((IoReactivexInternalOperatorsObservableObservableGroupBy_State *) nil_chk(state_)) subscribeWithIoReactivexObserver:observer];
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsObservableObservableGroupBy_State *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexInternalOperatorsObservableObservableGroupBy_State *) nil_chk(state_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsObservableObservableGroupBy_State *) nil_chk(state_)) onComplete];
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithWithId:withInt:withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver:withBoolean:);
  methods[1].selector = @selector(initWithId:withIoReactivexInternalOperatorsObservableObservableGroupBy_State:);
  methods[2].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LIoReactivexInternalOperatorsObservableObservableGroupBy_State;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "createWith", "LNSObject;ILIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver;Z", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(TK;ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver<*TK;TT;>;Z)Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupedUnicast<TK;TT;>;", "LNSObject;LIoReactivexInternalOperatorsObservableObservableGroupBy_State;", "(TK;Lio/reactivex/internal/operators/observable/ObservableGroupBy$State<TT;TK;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableGroupBy$State<TT;TK;>;", "LIoReactivexInternalOperatorsObservableObservableGroupBy;", "<K:Ljava/lang/Object;T:Ljava/lang/Object;>Lio/reactivex/observables/GroupedObservable<TK;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast = { "GroupedUnicast", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 1, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast;
}

@end

IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withBoolean_(id key, jint bufferSize, IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *parent, jboolean delayError) {
  IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initialize();
  IoReactivexInternalOperatorsObservableObservableGroupBy_State *state = create_IoReactivexInternalOperatorsObservableObservableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_(bufferSize, parent, key, delayError);
  return create_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_(key, state);
}

void IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *self, id key, IoReactivexInternalOperatorsObservableObservableGroupBy_State *state) {
  IoReactivexObservablesGroupedObservable_initWithId_(self, key);
  JreStrongAssign(&self->state_, state);
}

IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *new_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_(id key, IoReactivexInternalOperatorsObservableObservableGroupBy_State *state) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast, initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_, key, state)
}

IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast *create_IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_(id key, IoReactivexInternalOperatorsObservableObservableGroupBy_State *state) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast, initWithId_withIoReactivexInternalOperatorsObservableObservableGroupBy_State_, key, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupedUnicast)

@implementation IoReactivexInternalOperatorsObservableObservableGroupBy_State

- (instancetype)initWithInt:(jint)bufferSize
withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver:(IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *)parent
                     withId:(id)key
                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsObservableObservableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_(self, bufferSize, parent, key, delayError);
  return self;
}

- (void)dispose {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([self getAndIncrement] == 0) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      [((IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *) nil_chk(parent_)) cancelWithId:key_];
    }
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get];
}

- (void)subscribeWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:s];
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
      [actual_ lazySetWithId:nil];
    }
    else {
      [self drain];
    }
  }
  else {
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(create_JavaLangIllegalStateException_initWithNSString_(@"Only one Observer allowed!"), s);
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:t];
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&error_, e);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jboolean delayError = self->delayError_;
  id<IoReactivexObserver> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get];
  for (; ; ) {
    if (a != nil) {
      for (; ; ) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
        jboolean empty = v == nil;
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withIoReactivexObserver:a withBoolean:delayError]) {
          return;
        }
        if (empty) {
          break;
        }
        [a onNextWithId:v];
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    if (a == nil) {
      a = [actual_ get];
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
               withIoReactivexObserver:(id<IoReactivexObserver>)a
                           withBoolean:(jboolean)delayError {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
    [((IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *) nil_chk(parent_)) cancelWithId:key_];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
    return true;
  }
  if (d) {
    if (delayError) {
      if (empty) {
        JavaLangThrowable *e = error_;
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
        if (e != nil) {
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
        }
        return true;
      }
    }
    else {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
        [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        return true;
      }
      else if (empty) {
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
        [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
        return true;
      }
    }
  }
  return false;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(queue_);
  RELEASE_(parent_);
  RELEASE_(error_);
  RELEASE_(cancelled_);
  RELEASE_(once_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver:withId:withBoolean:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(subscribeWithIoReactivexObserver:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(drain);
  methods[8].selector = @selector(checkTerminatedWithBoolean:withBoolean:withIoReactivexObserver:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableGroupBy_State_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "ILIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver;LNSObject;Z", "(ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver<*TK;TT;>;TK;Z)V", "subscribe", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "checkTerminated", "ZZLIoReactivexObserver;Z", "(ZZLio/reactivex/Observer<-TT;>;Z)Z", "TK;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;", "Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver<*TK;TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/Observer<-TT;>;>;", "LIoReactivexInternalOperatorsObservableObservableGroupBy;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;Lio/reactivex/ObservableSource<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGroupBy_State = { "State", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 10, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGroupBy_State;
}

@end

void IoReactivexInternalOperatorsObservableObservableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_(IoReactivexInternalOperatorsObservableObservableGroupBy_State *self, jint bufferSize, IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *parent, id key, jboolean delayError) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->key_, key);
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsObservableObservableGroupBy_State *new_IoReactivexInternalOperatorsObservableObservableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_(jint bufferSize, IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *parent, id key, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_State, initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_, bufferSize, parent, key, delayError)
}

IoReactivexInternalOperatorsObservableObservableGroupBy_State *create_IoReactivexInternalOperatorsObservableObservableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_(jint bufferSize, IoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver *parent, id key, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGroupBy_State, initWithInt_withIoReactivexInternalOperatorsObservableObservableGroupBy_GroupByObserver_withId_withBoolean_, bufferSize, parent, key, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGroupBy_State)
