//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable : IoReactivexObservable {
 @public
  id<IoReactivexMaybeSource> source_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable, source_, id<IoReactivexMaybeSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver_

#define RESTRICT_IoReactivexInternalObserversBasicQueueDisposable 1
#define INCLUDE_IoReactivexInternalObserversBasicQueueDisposable 1
#include "IoReactivexInternalObserversBasicQueueDisposable.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObserver;
@protocol JavaUtilIterator;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver : IoReactivexInternalObserversBasicQueueDisposable < IoReactivexMaybeObserver > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
  id<IoReactivexDisposablesDisposable> d_;
  volatile_id it_;
  volatile_jboolean cancelled_;
  jboolean outputFused_;
}

#pragma mark Public

- (void)clear;

- (void)dispose;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id __nullable)poll;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver, d_, id<IoReactivexDisposablesDisposable>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver, it_, id<JavaUtilIterator>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable_FlatMapIterableObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapIterableObservable")
