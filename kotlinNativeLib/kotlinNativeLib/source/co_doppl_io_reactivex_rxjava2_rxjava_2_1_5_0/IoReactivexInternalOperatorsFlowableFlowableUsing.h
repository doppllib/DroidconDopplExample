//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableUsing
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableUsing

#if !defined (IoReactivexInternalOperatorsFlowableFlowableUsing_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableUsing))
#define IoReactivexInternalOperatorsFlowableFlowableUsing_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableUsing : IoReactivexFlowable {
 @public
  id<JavaUtilConcurrentCallable> resourceSupplier_;
  id<IoReactivexFunctionsFunction> sourceSupplier_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                       withBoolean:(jboolean)eager;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableUsing)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing, resourceSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing, sourceSupplier_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing, disposer_, id<IoReactivexFunctionsConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUsing *new_IoReactivexInternalOperatorsFlowableFlowableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUsing *create_IoReactivexInternalOperatorsFlowableFlowableUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableUsing)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsConsumer;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id resource_;
  id<IoReactivexFunctionsConsumer> disposer_;
  jboolean eager_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                              withId:(id)resource
                    withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                         withBoolean:(jboolean)eager;

- (void)disposeAfter;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber, resource_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber, disposer_, id<IoReactivexFunctionsConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableUsing_UsingSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUsing")
