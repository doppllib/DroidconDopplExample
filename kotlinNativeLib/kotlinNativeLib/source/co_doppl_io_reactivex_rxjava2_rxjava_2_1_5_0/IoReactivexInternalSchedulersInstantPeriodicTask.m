//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalFunctionsFunctions.h"
#include "IoReactivexInternalSchedulersInstantPeriodicTask.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/FutureTask.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalSchedulersInstantPeriodicTask)

JavaUtilConcurrentFutureTask *IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED;

@implementation IoReactivexInternalSchedulersInstantPeriodicTask

+ (JavaUtilConcurrentFutureTask *)CANCELLED {
  return IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task
   withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor {
  IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(self, task, executor);
  return self;
}

- (JavaLangVoid *)call {
  @try {
    JreStrongAssign(&runner_, JavaLangThread_currentThread());
    @try {
      [((id<JavaLangRunnable>) nil_chk(task_)) run];
      [self setRestWithJavaUtilConcurrentFuture:[((id<JavaUtilConcurrentExecutorService>) nil_chk(executor_)) submitWithJavaUtilConcurrentCallable:self]];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    }
  }
  @finally {
    JreStrongAssign(&runner_, nil);
  }
  return nil;
}

- (void)dispose {
  id<JavaUtilConcurrentFuture> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(first_)) getAndSetWithId:IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED];
  if (current != nil && current != IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED) {
    [current cancelWithBoolean:runner_ != JavaLangThread_currentThread()];
  }
  current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(rest_)) getAndSetWithId:IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED];
  if (current != nil && current != IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED) {
    [current cancelWithBoolean:runner_ != JavaLangThread_currentThread()];
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(first_)) get] == IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED;
}

- (void)setFirstWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  for (; ; ) {
    id<JavaUtilConcurrentFuture> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(first_)) get];
    if (current == IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED) {
      [((id<JavaUtilConcurrentFuture>) nil_chk(f)) cancelWithBoolean:runner_ != JavaLangThread_currentThread()];
    }
    if ([first_ compareAndSetWithId:current withId:f]) {
      return;
    }
  }
}

- (void)setRestWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  for (; ; ) {
    id<JavaUtilConcurrentFuture> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(rest_)) get];
    if (current == IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED) {
      [((id<JavaUtilConcurrentFuture>) nil_chk(f)) cancelWithBoolean:runner_ != JavaLangThread_currentThread()];
    }
    if ([rest_ compareAndSetWithId:current withId:f]) {
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(task_);
  RELEASE_(rest_);
  RELEASE_(first_);
  RELEASE_(executor_);
  RELEASE_(runner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:withJavaUtilConcurrentExecutorService:);
  methods[1].selector = @selector(call);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(setFirstWithJavaUtilConcurrentFuture:);
  methods[5].selector = @selector(setRestWithJavaUtilConcurrentFuture:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "task_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rest_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "first_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "executor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "runner_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "CANCELLED", "LJavaUtilConcurrentFutureTask;", .constantValue.asLong = 0, 0x18, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;LJavaUtilConcurrentExecutorService;", "LJavaLangException;", "setFirst", "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<*>;)V", "setRest", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/util/concurrent/Future<*>;>;", &IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED, "Ljava/util/concurrent/FutureTask<Ljava/lang/Void;>;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersInstantPeriodicTask = { "InstantPeriodicTask", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x10, 6, 6, -1, -1, -1, 9, -1 };
  return &_IoReactivexInternalSchedulersInstantPeriodicTask;
}

+ (void)initialize {
  if (self == [IoReactivexInternalSchedulersInstantPeriodicTask class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalSchedulersInstantPeriodicTask_CANCELLED, new_JavaUtilConcurrentFutureTask_initWithJavaLangRunnable_withId_(JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_RUNNABLE), nil));
    J2OBJC_SET_INITIALIZED(IoReactivexInternalSchedulersInstantPeriodicTask)
  }
}

@end

void IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(IoReactivexInternalSchedulersInstantPeriodicTask *self, id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutorService> executor) {
  NSObject_init(self);
  JreStrongAssign(&self->task_, task);
  JreStrongAssignAndConsume(&self->first_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->rest_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->executor_, executor);
}

IoReactivexInternalSchedulersInstantPeriodicTask *new_IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutorService> executor) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersInstantPeriodicTask, initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_, task, executor)
}

IoReactivexInternalSchedulersInstantPeriodicTask *create_IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutorService> executor) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersInstantPeriodicTask, initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_, task, executor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersInstantPeriodicTask)
