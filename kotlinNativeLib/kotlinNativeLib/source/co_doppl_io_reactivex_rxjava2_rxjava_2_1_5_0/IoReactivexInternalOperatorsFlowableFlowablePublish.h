//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublish
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublish

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_

#define RESTRICT_IoReactivexFlowablesConnectableFlowable 1
#define INCLUDE_IoReactivexFlowablesConnectableFlowable 1
#include "IoReactivexFlowablesConnectableFlowable.h"

#define RESTRICT_IoReactivexInternalFuseableHasUpstreamPublisher 1
#define INCLUDE_IoReactivexInternalFuseableHasUpstreamPublisher 1
#include "IoReactivexInternalFuseableHasUpstreamPublisher.h"

@class IoReactivexFlowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsConsumer;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish : IoReactivexFlowablesConnectableFlowable < IoReactivexInternalFuseableHasUpstreamPublisher > {
 @public
  IoReactivexFlowable *source_;
  JavaUtilConcurrentAtomicAtomicReference *current_;
  jint bufferSize_;
  id<OrgReactivestreamsPublisher> onSubscribe_;
}

+ (jlong)CANCELLED;

#pragma mark Public

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection;

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                   withInt:(jint)bufferSize;

- (id<OrgReactivestreamsPublisher>)source;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, source_, IoReactivexFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, onSubscribe_, id<OrgReactivestreamsPublisher>)

inline jlong IoReactivexInternalOperatorsFlowableFlowablePublish_get_CANCELLED();
#define IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowablePublish, CANCELLED, jlong)

FOUNDATION_EXPORT IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowablePublish_createWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *current_;
  jint bufferSize_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaUtilConcurrentAtomicAtomicBoolean *shouldConnect_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  volatile_id terminalEvent_;
  jint sourceMode_;
  volatile_id queue_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                                                        withInt:(jint)bufferSize;

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer;

- (jboolean)checkTerminatedWithId:(id)term
                      withBoolean:(jboolean)empty;

- (void)dispatch;

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, shouldConnect_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, terminalEvent_, id)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *self, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber : JavaUtilConcurrentAtomicAtomicLong < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> child_;
  volatile_id parent_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (jlong)producedWithLong:(jlong)n;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, child_, id<OrgReactivestreamsSubscriber>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *self, id<OrgReactivestreamsSubscriber> child);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher_

#define RESTRICT_OrgReactivestreamsPublisher 1
#define INCLUDE_OrgReactivestreamsPublisher 1
#include "OrgReactivestreamsPublisher.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher : NSObject < OrgReactivestreamsPublisher >

#pragma mark Public

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)curr
                                                        withInt:(jint)bufferSize;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher *self, JavaUtilConcurrentAtomicAtomicReference *curr, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher *new_IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *curr, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher *create_IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *curr, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish_FlowablePublisher)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish")
