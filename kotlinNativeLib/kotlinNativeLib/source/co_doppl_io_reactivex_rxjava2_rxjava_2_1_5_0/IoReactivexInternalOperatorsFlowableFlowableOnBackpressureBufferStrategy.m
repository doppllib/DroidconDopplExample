//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexBackpressureOverflowStrategy.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_serialVersionUID 3240706908776709697LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)bufferSize
             withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow
withIoReactivexBackpressureOverflowStrategy:(IoReactivexBackpressureOverflowStrategy *)strategy {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_(self, source, bufferSize, onOverflow, strategy);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_(s, onOverflow_, strategy_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(onOverflow_);
  RELEASE_(strategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withIoReactivexFunctionsAction:withIoReactivexBackpressureOverflowStrategy:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onOverflow_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "strategy_", "LIoReactivexBackpressureOverflowStrategy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JLIoReactivexFunctionsAction;LIoReactivexBackpressureOverflowStrategy;", "(Lio/reactivex/Flowable<TT;>;JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy = { "FlowableOnBackpressureBufferStrategy", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy *self, IoReactivexFlowable *source, jlong bufferSize, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->bufferSize_ = bufferSize;
  JreStrongAssign(&self->onOverflow_, onOverflow);
  JreStrongAssign(&self->strategy_, strategy);
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_(IoReactivexFlowable *source, jlong bufferSize, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy, initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_, source, bufferSize, onOverflow, strategy)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_(IoReactivexFlowable *source, jlong bufferSize, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy, initWithIoReactivexFlowable_withLong_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_, source, bufferSize, onOverflow, strategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy)

@implementation IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow
         withIoReactivexBackpressureOverflowStrategy:(IoReactivexBackpressureOverflowStrategy *)strategy
                                            withLong:(jlong)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_(self, actual, onOverflow, strategy, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jboolean callOnOverflow = false;
  jboolean callError = false;
  id<JavaUtilDeque> dq = deque_;
  @synchronized(dq) {
    if ([((id<JavaUtilDeque>) nil_chk(dq)) size] == bufferSize_) {
      switch ([strategy_ ordinal]) {
        case IoReactivexBackpressureOverflowStrategy_Enum_DROP_LATEST:
        [dq pollLast];
        [dq offerWithId:t];
        callOnOverflow = true;
        break;
        case IoReactivexBackpressureOverflowStrategy_Enum_DROP_OLDEST:
        [dq poll];
        [dq offerWithId:t];
        callOnOverflow = true;
        break;
        default:
        callError = true;
        break;
      }
    }
    else {
      [dq offerWithId:t];
    }
  }
  if (callOnOverflow) {
    if (onOverflow_ != nil) {
      @try {
        [onOverflow_ run];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [self onErrorWithJavaLangThrowable:ex];
      }
    }
  }
  else if (callError) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_init()];
  }
  else {
    [self drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  if ([self getAndIncrement] == 0) {
    [self clearWithJavaUtilDeque:deque_];
  }
}

- (void)clearWithJavaUtilDeque:(id<JavaUtilDeque>)dq {
  @synchronized(dq) {
    [((id<JavaUtilDeque>) nil_chk(dq)) clear];
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<JavaUtilDeque> dq = deque_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self clearWithJavaUtilDeque:dq];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v;
      @synchronized(dq) {
        v = JreRetainedLocalValue([((id<JavaUtilDeque>) nil_chk(dq)) poll]);
      }
      jboolean empty = v == nil;
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [self clearWithJavaUtilDeque:dq];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          return;
        }
        if (empty) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
          return;
        }
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self clearWithJavaUtilDeque:dq];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty;
      @synchronized(dq) {
        empty = [((id<JavaUtilDeque>) nil_chk(dq)) isEmpty];
      }
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [self clearWithJavaUtilDeque:dq];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          return;
        }
        if (empty) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
          return;
        }
      }
    }
    if (e != 0LL) {
      IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, e);
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(onOverflow_);
  RELEASE_(strategy_);
  RELEASE_(requested_);
  RELEASE_(deque_);
  RELEASE_(s_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsAction:withIoReactivexBackpressureOverflowStrategy:withLong:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(clearWithJavaUtilDeque:);
  methods[8].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "onOverflow_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "strategy_", "LIoReactivexBackpressureOverflowStrategy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "deque_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsAction;LIoReactivexBackpressureOverflowStrategy;J", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;J)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "clear", "LJavaUtilDeque;", "(Ljava/util/Deque<TT;>;)V", "Lorg/reactivestreams/Subscriber<-TT;>;", "Ljava/util/Deque<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber = { "OnBackpressureBufferStrategySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 11, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy, jlong bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onOverflow_, onOverflow);
  JreStrongAssign(&self->strategy_, strategy);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->deque_, new_JavaUtilArrayDeque_init());
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy, jlong bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_, actual, onOverflow, strategy, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onOverflow, IoReactivexBackpressureOverflowStrategy *strategy, jlong bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_withIoReactivexBackpressureOverflowStrategy_withLong_, actual, onOverflow, strategy, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBufferStrategy_OnBackpressureBufferStrategySubscriber)
