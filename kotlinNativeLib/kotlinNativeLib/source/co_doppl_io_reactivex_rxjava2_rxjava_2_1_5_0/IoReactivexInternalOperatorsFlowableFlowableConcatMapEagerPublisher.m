//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalOperatorsFlowableFlowableConcatMapEager.h"
#include "IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)prefetch
               withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(self, source, mapper, maxConcurrency, prefetch, errorMode);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(s, mapper_, maxConcurrency_, prefetch_, errorMode_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withInt:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;IILIoReactivexInternalUtilErrorMode;", "(Lorg/reactivestreams/Publisher<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IILio/reactivex/internal/util/ErrorMode;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lorg/reactivestreams/Publisher<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher = { "FlowableConcatMapEagerPublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->maxConcurrency_ = maxConcurrency;
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, errorMode);
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher *new_IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher, initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, maxConcurrency, prefetch, errorMode)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher *create_IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher, initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, maxConcurrency, prefetch, errorMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMapEagerPublisher)
