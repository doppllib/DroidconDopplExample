//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalSubscriptionsArrayCompositeSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalSubscriptionsArrayCompositeSubscription_get_serialVersionUID();
#define IoReactivexInternalSubscriptionsArrayCompositeSubscription_serialVersionUID 2746389416410565408LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscriptionsArrayCompositeSubscription, serialVersionUID, jlong)

@implementation IoReactivexInternalSubscriptionsArrayCompositeSubscription

- (instancetype)initWithInt:(jint)capacity {
  IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(self, capacity);
  return self;
}

- (jboolean)setResourceWithInt:(jint)index
withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)resource {
  for (; ; ) {
    id<OrgReactivestreamsSubscription> o = [self getWithInt:index];
    if (o == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      if (resource != nil) {
        [resource cancel];
      }
      return false;
    }
    if ([self compareAndSetWithInt:index withId:o withId:resource]) {
      if (o != nil) {
        [o cancel];
      }
      return true;
    }
  }
}

- (id<OrgReactivestreamsSubscription>)replaceResourceWithInt:(jint)index
                          withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)resource {
  for (; ; ) {
    id<OrgReactivestreamsSubscription> o = [self getWithInt:index];
    if (o == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      if (resource != nil) {
        [resource cancel];
      }
      return nil;
    }
    if ([self compareAndSetWithInt:index withId:o withId:resource]) {
      return o;
    }
  }
}

- (void)dispose {
  if ([self getWithInt:0] != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    jint s = [self length];
    for (jint i = 0; i < s; i++) {
      id<OrgReactivestreamsSubscription> o = [self getWithInt:i];
      if (o != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
        o = [self getAndSetWithInt:i withId:JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)];
        if (o != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED) && o != nil) {
          [o cancel];
        }
      }
    }
  }
}

- (jboolean)isDisposed {
  return [self getWithInt:0] == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgReactivestreamsSubscription;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setResourceWithInt:withOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(replaceResourceWithInt:withOrgReactivestreamsSubscription:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalSubscriptionsArrayCompositeSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setResource", "ILOrgReactivestreamsSubscription;", "replaceResource", "Ljava/util/concurrent/atomic/AtomicReferenceArray<Lorg/reactivestreams/Subscription;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscriptionsArrayCompositeSubscription = { "ArrayCompositeSubscription", "io.reactivex.internal.subscriptions", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, 4, -1 };
  return &_IoReactivexInternalSubscriptionsArrayCompositeSubscription;
}

@end

void IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(IoReactivexInternalSubscriptionsArrayCompositeSubscription *self, jint capacity) {
  JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(self, capacity);
}

IoReactivexInternalSubscriptionsArrayCompositeSubscription *new_IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscriptionsArrayCompositeSubscription, initWithInt_, capacity)
}

IoReactivexInternalSubscriptionsArrayCompositeSubscription *create_IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscriptionsArrayCompositeSubscription, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscriptionsArrayCompositeSubscription)
