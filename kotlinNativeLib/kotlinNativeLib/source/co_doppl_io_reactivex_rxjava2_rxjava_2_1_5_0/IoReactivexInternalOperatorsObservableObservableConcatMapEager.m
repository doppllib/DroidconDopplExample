//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalObserversInnerQueuedObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableConcatMapEager.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_serialVersionUID 8080567949447303262LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMapEager

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
               withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)prefetch {
  IoReactivexInternalOperatorsObservableObservableConcatMapEager_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_(self, source, mapper, errorMode, maxConcurrency, prefetch);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(observer, mapper_, maxConcurrency_, prefetch_, errorMode_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withIoReactivexInternalUtilErrorMode:withInt:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LIoReactivexInternalUtilErrorMode;II", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;Lio/reactivex/internal/util/ErrorMode;II)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMapEager = { "ObservableConcatMapEager", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMapEager;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMapEager_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_(IoReactivexInternalOperatorsObservableObservableConcatMapEager *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, IoReactivexInternalUtilErrorMode *errorMode, jint maxConcurrency, jint prefetch) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  JreStrongAssign(&self->errorMode_, errorMode);
  self->maxConcurrency_ = maxConcurrency;
  self->prefetch_ = prefetch;
}

IoReactivexInternalOperatorsObservableObservableConcatMapEager *new_IoReactivexInternalOperatorsObservableObservableConcatMapEager_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, IoReactivexInternalUtilErrorMode *errorMode, jint maxConcurrency, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMapEager, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_, source, mapper, errorMode, maxConcurrency, prefetch)
}

IoReactivexInternalOperatorsObservableObservableConcatMapEager *create_IoReactivexInternalOperatorsObservableObservableConcatMapEager_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, IoReactivexInternalUtilErrorMode *errorMode, jint maxConcurrency, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMapEager, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexInternalUtilErrorMode_withInt_withInt_, source, mapper, errorMode, maxConcurrency, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMapEager)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)maxConcurrency
                                    withInt:(jint)prefetch
       withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(self, actual, mapper, maxConcurrency, prefetch, errorMode);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    if ([IoReactivexInternalFuseableQueueDisposable_class_() isInstance:d]) {
      id<IoReactivexInternalFuseableQueueDisposable> qd = (id<IoReactivexInternalFuseableQueueDisposable>) cast_check(d, IoReactivexInternalFuseableQueueDisposable_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qd)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qd);
        JreAssignVolatileBoolean(&done_, true);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        [self drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qd);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(prefetch_));
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)value {
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:value];
  }
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:e]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
  if ([self getAndIncrement] == 0) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
    [self disposeAll];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeAll {
  IoReactivexInternalObserversInnerQueuedObserver *inner = current_;
  if (inner != nil) {
    [inner dispose];
  }
  for (; ; ) {
    inner = [((JavaUtilArrayDeque *) nil_chk(observers_)) poll];
    if (inner == nil) {
      return;
    }
    [inner dispose];
  }
}

- (void)innerNextWithIoReactivexInternalObserversInnerQueuedObserver:(IoReactivexInternalObserversInnerQueuedObserver *)inner
                                                              withId:(id)value {
  [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk([((IoReactivexInternalObserversInnerQueuedObserver *) nil_chk(inner)) queue])) offerWithId:value];
  [self drain];
}

- (void)innerErrorWithIoReactivexInternalObserversInnerQueuedObserver:(IoReactivexInternalObserversInnerQueuedObserver *)inner
                                                withJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:e]) {
    if (errorMode_ == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
    }
    [((IoReactivexInternalObserversInnerQueuedObserver *) nil_chk(inner)) setDone];
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)innerCompleteWithIoReactivexInternalObserversInnerQueuedObserver:(IoReactivexInternalObserversInnerQueuedObserver *)inner {
  [((IoReactivexInternalObserversInnerQueuedObserver *) nil_chk(inner)) setDone];
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  JavaUtilArrayDeque *observers = self->observers_;
  id<IoReactivexObserver> a = self->actual_;
  IoReactivexInternalUtilErrorMode *errorMode = self->errorMode_;
  for (; ; ) {
    {
      jint ac = activeCount_;
      while (ac != maxConcurrency_) {
        if (JreLoadVolatileBoolean(&cancelled_)) {
          [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
          [self disposeAll];
          return;
        }
        if (errorMode == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
          if (ex != nil) {
            [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
            [self disposeAll];
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
            return;
          }
        }
        id v;
        id<IoReactivexObservableSource> source;
        @try {
          v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
          if (v == nil) {
            break;
          }
          source = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:v], @"The mapper returned a null ObservableSource");
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
          [q clear];
          [self disposeAll];
          [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:ex];
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
          return;
        }
        IoReactivexInternalObserversInnerQueuedObserver *inner = create_IoReactivexInternalObserversInnerQueuedObserver_initWithIoReactivexInternalObserversInnerQueuedObserverSupport_withInt_(self, prefetch_);
        [((JavaUtilArrayDeque *) nil_chk(observers)) offerWithId:inner];
        [((id<IoReactivexObservableSource>) nil_chk(source)) subscribeWithIoReactivexObserver:inner];
        ac++;
      }
      activeCount_ = ac;
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        [self disposeAll];
        return;
      }
      if (errorMode == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
        if (ex != nil) {
          [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
          [self disposeAll];
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
          return;
        }
      }
      IoReactivexInternalObserversInnerQueuedObserver *active = current_;
      if (active == nil) {
        if (errorMode == JreLoadEnum(IoReactivexInternalUtilErrorMode, BOUNDARY)) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
          if (ex != nil) {
            [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
            [self disposeAll];
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
            return;
          }
        }
        jboolean d = JreLoadVolatileBoolean(&done_);
        active = [((JavaUtilArrayDeque *) nil_chk(observers)) poll];
        jboolean empty = active == nil;
        if (d && empty) {
          JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
          if (ex != nil) {
            [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
            [self disposeAll];
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
          }
          else {
            [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          }
          return;
        }
        if (!empty) {
          JreStrongAssign(&current_, active);
        }
      }
      if (active != nil) {
        id<IoReactivexInternalFuseableSimpleQueue> aq = [active queue];
        for (; ; ) {
          if (JreLoadVolatileBoolean(&cancelled_)) {
            [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
            [self disposeAll];
            return;
          }
          jboolean d = [active isDone];
          if (errorMode == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
            JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) get];
            if (ex != nil) {
              [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
              [self disposeAll];
              [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ terminate]];
              return;
            }
          }
          id w;
          @try {
            w = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(aq)) poll];
          }
          @catch (JavaLangThrowable *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:ex];
            JreStrongAssign(&current_, nil);
            activeCount_--;
            goto continue_outer;
          }
          jboolean empty = w == nil;
          if (d && empty) {
            JreStrongAssign(&current_, nil);
            activeCount_--;
            goto continue_outer;
          }
          if (empty) {
            break;
          }
          [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
        }
      }
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    continue_outer: ;
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  RELEASE_(error_);
  RELEASE_(observers_);
  RELEASE_(queue_);
  RELEASE_(d_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withInt:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(disposeAll);
  methods[8].selector = @selector(innerNextWithIoReactivexInternalObserversInnerQueuedObserver:withId:);
  methods[9].selector = @selector(innerErrorWithIoReactivexInternalObserversInnerQueuedObserver:withJavaLangThrowable:);
  methods[10].selector = @selector(innerCompleteWithIoReactivexInternalObserversInnerQueuedObserver:);
  methods[11].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "observers_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "current_", "LIoReactivexInternalObserversInnerQueuedObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 22, -1 },
    { "activeCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;IILIoReactivexInternalUtilErrorMode;", "(Lio/reactivex/Observer<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;IILio/reactivex/internal/util/ErrorMode;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerNext", "LIoReactivexInternalObserversInnerQueuedObserver;LNSObject;", "(Lio/reactivex/internal/observers/InnerQueuedObserver<TR;>;TR;)V", "innerError", "LIoReactivexInternalObserversInnerQueuedObserver;LJavaLangThrowable;", "(Lio/reactivex/internal/observers/InnerQueuedObserver<TR;>;Ljava/lang/Throwable;)V", "innerComplete", "LIoReactivexInternalObserversInnerQueuedObserver;", "(Lio/reactivex/internal/observers/InnerQueuedObserver<TR;>;)V", "Lio/reactivex/Observer<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "Ljava/util/ArrayDeque<Lio/reactivex/internal/observers/InnerQueuedObserver<TR;>;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "Lio/reactivex/internal/observers/InnerQueuedObserver<TR;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMapEager;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/observers/InnerQueuedObserverSupport<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver = { "ConcatMapEagerMainObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 12, 15, 23, -1, -1, 24, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->maxConcurrency_ = maxConcurrency;
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, errorMode);
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilArrayDeque_init());
}

IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver *new_IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, actual, mapper, maxConcurrency, prefetch, errorMode)
}

IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver *create_IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, actual, mapper, maxConcurrency, prefetch, errorMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMapEager_ConcatMapEagerMainObserver)
