//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableConcatMap.h"
#include "IoReactivexInternalOperatorsObservableObservableScalarXMap.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_serialVersionUID 8828587559905699186LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_serialVersionUID -6951100001833242599LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMap

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                            withInt:(jint)bufferSize
               withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)delayErrors {
  IoReactivexInternalOperatorsObservableObservableConcatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(self, source, mapper, bufferSize, delayErrors);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  if (IoReactivexInternalOperatorsObservableObservableScalarXMap_tryScalarXMapSubscribeWithIoReactivexObservableSource_withIoReactivexObserver_withIoReactivexFunctionsFunction_(source_, s, mapper_)) {
    return;
  }
  if (delayErrors_ == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
    IoReactivexObserversSerializedObserver *serial = create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(s);
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_(serial, mapper_, bufferSize_)];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(s, mapper_, bufferSize_, delayErrors_ == JreLoadEnum(IoReactivexInternalUtilErrorMode, END))];
  }
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(delayErrors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;ILIoReactivexInternalUtilErrorMode;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;ILio/reactivex/internal/util/ErrorMode;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver;LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMap = { "ObservableConcatMap", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMap;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsObservableObservableConcatMap *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, IoReactivexInternalUtilErrorMode *delayErrors) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  JreStrongAssign(&self->delayErrors_, delayErrors);
  self->bufferSize_ = JavaLangMath_maxWithInt_withInt_(8, bufferSize);
}

IoReactivexInternalOperatorsObservableObservableConcatMap *new_IoReactivexInternalOperatorsObservableObservableConcatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, IoReactivexInternalUtilErrorMode *delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsObservableObservableConcatMap *create_IoReactivexInternalOperatorsObservableObservableConcatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, IoReactivexInternalUtilErrorMode *delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMap)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_(self, actual, mapper, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueDisposable_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueDisposable> qd = (id<IoReactivexInternalFuseableQueueDisposable>) cast_check(s, IoReactivexInternalFuseableQueueDisposable_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qd)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        fusionMode_ = m;
        JreStrongAssign(&queue_, qd);
        JreAssignVolatileBoolean(&done_, true);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        [self drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        fusionMode_ = m;
        JreStrongAssign(&queue_, qd);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize_));
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (fusionMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:t];
  }
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)innerComplete {
  JreAssignVolatileBoolean(&active_, false);
  [self drain];
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sa_)) dispose];
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  if ([self getAndIncrement] == 0) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
  }
}

- (void)innerSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(sa_)) updateWithIoReactivexDisposablesDisposable:s];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  for (; ; ) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
      return;
    }
    if (!JreLoadVolatileBoolean(&active_)) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id t;
      @try {
        t = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [self dispose];
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
        [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      jboolean empty = t == nil;
      if (d && empty) {
        JreAssignVolatileBoolean(&disposed_, true);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
        return;
      }
      if (!empty) {
        id<IoReactivexObservableSource> o;
        @try {
          o = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper returned a null ObservableSource");
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [self dispose];
          [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
          [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
          return;
        }
        JreAssignVolatileBoolean(&active_, true);
        [((id<IoReactivexObservableSource>) nil_chk(o)) subscribeWithIoReactivexObserver:inner_];
      }
    }
    if ([self decrementAndGet] == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sa_);
  RELEASE_(mapper_);
  RELEASE_(inner_);
  RELEASE_(queue_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(innerComplete);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(innerSubscribeWithIoReactivexDisposablesDisposable:);
  methods[9].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "sa_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "inner_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "fusionMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;I", "(Lio/reactivex/Observer<-TU;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerSubscribe", "Lio/reactivex/Observer<-TU;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;", "Lio/reactivex/Observer<TU;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMap;", "LIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver = { "SourceObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 10, 12, 14, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->inner_, new_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_(actual, self));
  JreStrongAssignAndConsume(&self->sa_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *new_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_, actual, mapper, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *create_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_, actual, mapper, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver:(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_(self, actual, parent);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *) nil_chk(parent_)) innerSubscribeWithIoReactivexDisposablesDisposable:s];
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *) nil_chk(parent_)) dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *) nil_chk(parent_)) innerComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver;", "(Lio/reactivex/Observer<-TU;>;Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver<**>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TU;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TU;>;", "Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver<**>;", "LIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver;", "<U:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver *self, id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver *new_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_(id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_, actual, parent)
}

IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver *create_IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_(id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMap_SourceObserver_InnerObserver)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)tillTheEnd {
  IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, mapper, bufferSize, tillTheEnd);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    if ([IoReactivexInternalFuseableQueueDisposable_class_() isInstance:d]) {
      id<IoReactivexInternalFuseableQueueDisposable> qd = (id<IoReactivexInternalFuseableQueueDisposable>) cast_check(d, IoReactivexInternalFuseableQueueDisposable_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qd)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qd);
        JreAssignVolatileBoolean(&done_, true);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        [self drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, qd);
        [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize_));
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)value {
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:value];
  }
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:e]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(arbiter_)) dispose];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<IoReactivexObserver> actual = self->actual_;
  id<IoReactivexInternalFuseableSimpleQueue> queue = self->queue_;
  IoReactivexInternalUtilAtomicThrowable *error = self->error_;
  for (; ; ) {
    if (!JreLoadVolatileBoolean(&active_)) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue)) clear];
        return;
      }
      if (!tillTheEnd_) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) get];
        if (ex != nil) {
          [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue)) clear];
          JreAssignVolatileBoolean(&cancelled_, true);
          [((id<IoReactivexObserver>) nil_chk(actual)) onErrorWithJavaLangThrowable:[error terminate]];
          return;
        }
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        JreAssignVolatileBoolean(&cancelled_, true);
        [((id<IoReactivexDisposablesDisposable>) nil_chk(self->d_)) dispose];
        [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) addThrowableWithJavaLangThrowable:ex];
        [((id<IoReactivexObserver>) nil_chk(actual)) onErrorWithJavaLangThrowable:[error terminate]];
        return;
      }
      jboolean empty = v == nil;
      if (d && empty) {
        JreAssignVolatileBoolean(&cancelled_, true);
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) terminate];
        if (ex != nil) {
          [((id<IoReactivexObserver>) nil_chk(actual)) onErrorWithJavaLangThrowable:ex];
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(actual)) onComplete];
        }
        return;
      }
      if (!empty) {
        id<IoReactivexObservableSource> o;
        @try {
          o = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:v], @"The mapper returned a null ObservableSource");
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          JreAssignVolatileBoolean(&cancelled_, true);
          [((id<IoReactivexDisposablesDisposable>) nil_chk(self->d_)) dispose];
          [queue clear];
          [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) addThrowableWithJavaLangThrowable:ex];
          [((id<IoReactivexObserver>) nil_chk(actual)) onErrorWithJavaLangThrowable:[error terminate]];
          return;
        }
        if ([JavaUtilConcurrentCallable_class_() isInstance:o]) {
          id w;
          @try {
            w = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(o, JavaUtilConcurrentCallable_class_())))) call];
          }
          @catch (JavaLangThrowable *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) addThrowableWithJavaLangThrowable:ex];
            continue;
          }
          if (w != nil && !JreLoadVolatileBoolean(&cancelled_)) {
            [((id<IoReactivexObserver>) nil_chk(actual)) onNextWithId:w];
          }
          continue;
        }
        else {
          JreAssignVolatileBoolean(&active_, true);
          [((id<IoReactivexObservableSource>) nil_chk(o)) subscribeWithIoReactivexObserver:observer_];
        }
      }
    }
    if ([self decrementAndGet] == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(error_);
  RELEASE_(observer_);
  RELEASE_(arbiter_);
  RELEASE_(queue_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "observer_", "LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "arbiter_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tillTheEnd_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Observer<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;IZ)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver<TR;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMap;", "LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver = { "ConcatMapDelayErrorObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 14, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean tillTheEnd) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->bufferSize_ = bufferSize;
  self->tillTheEnd_ = tillTheEnd;
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->observer_, new_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_(actual, self));
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *new_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean tillTheEnd) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, tillTheEnd)
}

IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *create_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean tillTheEnd) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, mapper, bufferSize, tillTheEnd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver)

@implementation IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver:(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_(self, actual, parent);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(((IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *) nil_chk(parent_))->arbiter_)) replaceWithIoReactivexDisposablesDisposable:d];
}

- (void)onNextWithId:(id)value {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *p = parent_;
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(((IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *) nil_chk(p))->error_)) addThrowableWithJavaLangThrowable:e]) {
    if (!p->tillTheEnd_) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(p->d_)) dispose];
    }
    JreAssignVolatileBoolean(&p->active_, false);
    [p drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *p = parent_;
  JreAssignVolatileBoolean(&((IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *) nil_chk(p))->active_, false);
  [p drain];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver;", "(Lio/reactivex/Observer<-TR;>;Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver<*TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TR;>;", "Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver<*TR;>;", "LIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver;", "<R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver = { "DelayErrorInnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver *self, id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver *new_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_(id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_, actual, parent)
}

IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver *create_IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver_initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_(id<IoReactivexObserver> actual, IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver, initWithIoReactivexObserver_withIoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableConcatMap_ConcatMapDelayErrorObserver_DelayErrorInnerObserver)
