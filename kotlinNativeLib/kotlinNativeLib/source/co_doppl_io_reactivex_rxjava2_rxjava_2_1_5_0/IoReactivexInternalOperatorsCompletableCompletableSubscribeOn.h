//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn

#if !defined (IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn))
#define IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

@class IoReactivexScheduler;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;

@interface IoReactivexInternalOperatorsCompletableCompletableSubscribeOn : IoReactivexCompletable {
 @public
  id<IoReactivexCompletableSource> source_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *self, id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *new_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableSubscribeOn *create_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver))
#define IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class JavaLangThrowable;
@protocol IoReactivexCompletableSource;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  IoReactivexInternalDisposablesSequentialDisposable *task_;
  id<IoReactivexCompletableSource> source_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                      withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, task_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver, source_, id<IoReactivexCompletableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *self, id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *new_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver *create_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver_initWithIoReactivexCompletableObserver_withIoReactivexCompletableSource_(id<IoReactivexCompletableObserver> actual, id<IoReactivexCompletableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableSubscribeOn_SubscribeOnObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableSubscribeOn")
