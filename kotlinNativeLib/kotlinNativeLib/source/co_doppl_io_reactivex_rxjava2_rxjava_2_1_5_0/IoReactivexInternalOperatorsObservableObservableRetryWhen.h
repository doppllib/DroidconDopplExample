//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableRetryWhen
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableRetryWhen

#if !defined (IoReactivexInternalOperatorsObservableObservableRetryWhen_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRetryWhen))
#define IoReactivexInternalOperatorsObservableObservableRetryWhen_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRetryWhen : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> handler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRetryWhen)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen, handler_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRetryWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableRetryWhen *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen *new_IoReactivexInternalOperatorsObservableObservableRetryWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen *create_IoReactivexInternalOperatorsObservableObservableRetryWhen_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> handler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRetryWhen)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver))
#define IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver;
@class IoReactivexInternalUtilAtomicThrowable;
@class IoReactivexSubjectsSubject;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexObservableSource;

@interface IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  IoReactivexSubjectsSubject *signaller_;
  IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver *inner_;
  JavaUtilConcurrentAtomicAtomicReference *d_;
  id<IoReactivexObservableSource> source_;
  volatile_jboolean active_;
}

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withIoReactivexSubjectsSubject:(IoReactivexSubjectsSubject *)signaller
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source;

- (void)innerComplete;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerNext;

- (void)subscribeNext;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, signaller_, IoReactivexSubjectsSubject *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, inner_, IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, d_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver, source_, id<IoReactivexObservableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *self, id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *new_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *create_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_initWithIoReactivexObserver_withIoReactivexSubjectsSubject_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, IoReactivexSubjectsSubject *signaller, id<IoReactivexObservableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver))
#define IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver >

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver:(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver *self, IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver *new_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver *create_IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver_initWithIoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRetryWhen_RepeatWhenObserver_InnerRepeatObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRetryWhen")
