//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFromIterable.h"
#include "IoReactivexInternalSubscriptionsBasicQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_serialVersionUID -2252972430506210021LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_serialVersionUID -6022804456014692607LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_serialVersionUID -6022804456014692607LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableFromIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)source {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(self, source);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  id<JavaUtilIterator> it;
  @try {
    it = [((id<JavaLangIterable>) nil_chk(source_)) iterator];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_subscribeWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(s, it);
}

+ (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                             withJavaUtilIterator:(id<JavaUtilIterator>)it {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_subscribeWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(s, it);
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:withJavaUtilIterator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "subscribe", "LOrgReactivestreamsSubscriber;LJavaUtilIterator;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/Iterator<+TT;>;)V", "Ljava/lang/Iterable<+TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription;LIoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription;LIoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromIterable = { "FlowableFromIterable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, 9, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromIterable;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsFlowableFlowableFromIterable *self, id<JavaLangIterable> source) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable, initWithJavaLangIterable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable, initWithJavaLangIterable_, source)
}

void IoReactivexInternalOperatorsFlowableFlowableFromIterable_subscribeWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> s, id<JavaUtilIterator> it) {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_initialize();
  jboolean hasNext;
  @try {
    hasNext = [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
    return;
  }
  if (!hasNext) {
    IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(s);
    return;
  }
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), it)];
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(s, it)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromIterable)

@implementation IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)it {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_initWithJavaUtilIterator_(self, it);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  return mode & IoReactivexInternalFuseableQueueFuseable_SYNC;
}

- (id __nullable)poll {
  if (it_ == nil) {
    return nil;
  }
  if (!once_) {
    once_ = true;
  }
  else {
    if (![it_ hasNext]) {
      return nil;
    }
  }
  return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilIterator>) nil_chk(it_)) next], @"Iterator.next() returned a null value");
}

- (jboolean)isEmpty {
  return it_ == nil || ![it_ hasNext];
}

- (void)clear {
  JreStrongAssign(&it_, nil);
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    if (IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n) == 0LL) {
      if (n == JavaLangLong_MAX_VALUE) {
        [self fastPath];
      }
      else {
        [self slowPathWithLong:n];
      }
    }
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)fastPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)slowPathWithLong:(jlong)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(it_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilIterator:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(fastPath);
  methods[8].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "once_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilIterator;", "(Ljava/util/Iterator<+TT;>;)V", "requestFusion", "I", "()TT;", "request", "J", "slowPath", "Ljava/util/Iterator<+TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFromIterable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicQueueSubscription<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription = { "BaseRangeSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 9, 4, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_initWithJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription *self, id<JavaUtilIterator> it) {
  IoReactivexInternalSubscriptionsBasicQueueSubscription_init(self);
  JreStrongAssign(&self->it_, it);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                withJavaUtilIterator:(id<JavaUtilIterator>)it {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(self, actual, it);
  return self;
}

- (void)fastPath {
  id<JavaUtilIterator> it = self->it_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id t;
    @try {
      t = [((id<JavaUtilIterator>) nil_chk(it)) next];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if (t == nil) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"Iterator.next() returned a null value")];
      return;
    }
    else {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jboolean b;
    @try {
      b = [it hasNext];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [a onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (!b) {
      if (!JreLoadVolatileBoolean(&cancelled_)) {
        [a onComplete];
      }
      return;
    }
  }
}

- (void)slowPathWithLong:(jlong)r {
  jlong e = 0LL;
  id<JavaUtilIterator> it = self->it_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (; ; ) {
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      id t;
      @try {
        t = [((id<JavaUtilIterator>) nil_chk(it)) next];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (t == nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"Iterator.next() returned a null value")];
        return;
      }
      else {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      jboolean b;
      @try {
        b = [it hasNext];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [a onErrorWithJavaLangThrowable:ex];
        return;
      }
      if (!b) {
        if (!JreLoadVolatileBoolean(&cancelled_)) {
          [a onComplete];
        }
        return;
      }
      e++;
    }
    r = [self get];
    if (e == r) {
      r = [self addAndGetWithLong:-e];
      if (r == 0LL) {
        return;
      }
      e = 0LL;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilIterator:);
  methods[1].selector = @selector(fastPath);
  methods[2].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilIterator;", "(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/Iterator<+TT;>;)V", "slowPath", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFromIterable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription = { "IteratorSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it) {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_initWithJavaUtilIterator_(self, it);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription, initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_, actual, it)
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> it) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription, initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_, actual, it)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                    withJavaUtilIterator:(id<JavaUtilIterator>)it {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(self, actual, it);
  return self;
}

- (void)fastPath {
  id<JavaUtilIterator> it = self->it_;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id t;
    @try {
      t = [((id<JavaUtilIterator>) nil_chk(it)) next];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if (t == nil) {
      [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"Iterator.next() returned a null value")];
      return;
    }
    else {
      [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:t];
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jboolean b;
    @try {
      b = [it hasNext];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [a onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (!b) {
      if (!JreLoadVolatileBoolean(&cancelled_)) {
        [a onComplete];
      }
      return;
    }
  }
}

- (void)slowPathWithLong:(jlong)r {
  jlong e = 0LL;
  id<JavaUtilIterator> it = self->it_;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  for (; ; ) {
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      id t;
      @try {
        t = [((id<JavaUtilIterator>) nil_chk(it)) next];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      jboolean b;
      if (t == nil) {
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"Iterator.next() returned a null value")];
        return;
      }
      else {
        b = [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:t];
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      jboolean hasNext;
      @try {
        hasNext = [it hasNext];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [a onErrorWithJavaLangThrowable:ex];
        return;
      }
      if (!hasNext) {
        if (!JreLoadVolatileBoolean(&cancelled_)) {
          [a onComplete];
        }
        return;
      }
      if (b) {
        e++;
      }
    }
    r = [self get];
    if (e == r) {
      r = [self addAndGetWithLong:-e];
      if (r == 0LL) {
        return;
      }
      e = 0LL;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withJavaUtilIterator:);
  methods[1].selector = @selector(fastPath);
  methods[2].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LJavaUtilIterator;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Ljava/util/Iterator<+TT;>;)V", "slowPath", "J", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFromIterable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription = { "IteratorConditionalSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it) {
  IoReactivexInternalOperatorsFlowableFlowableFromIterable_BaseRangeSubscription_initWithJavaUtilIterator_(self, it);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *new_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription, initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_, actual, it)
}

IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription *create_IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<JavaUtilIterator> it) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription, initWithIoReactivexInternalFuseableConditionalSubscriber_withJavaUtilIterator_, actual, it)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromIterable_IteratorConditionalSubscription)
