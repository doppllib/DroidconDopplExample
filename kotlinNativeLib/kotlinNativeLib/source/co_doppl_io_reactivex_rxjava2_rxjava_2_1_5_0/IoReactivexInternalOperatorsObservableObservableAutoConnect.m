//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalOperatorsObservableObservableAutoConnect.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservablesConnectableObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation IoReactivexInternalOperatorsObservableObservableAutoConnect

- (instancetype)initWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)source
                                                            withInt:(jint)numberOfObservers
                                   withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  IoReactivexInternalOperatorsObservableObservableAutoConnect_initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_(self, source, numberOfObservers, connection);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)child {
  [((IoReactivexObservablesConnectableObservable *) nil_chk(source_)) subscribeWithIoReactivexObserver:child];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(clients_)) incrementAndGet] == numberOfObservers_) {
    [source_ connectWithIoReactivexFunctionsConsumer:connection_];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(connection_);
  RELEASE_(clients_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservablesConnectableObservable:withInt:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservablesConnectableObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "numberOfObservers_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "connection_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "clients_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservablesConnectableObservable;ILIoReactivexFunctionsConsumer;", "(Lio/reactivex/observables/ConnectableObservable<+TT;>;ILio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/observables/ConnectableObservable<+TT;>;", "Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableAutoConnect = { "ObservableAutoConnect", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableAutoConnect;
}

@end

void IoReactivexInternalOperatorsObservableObservableAutoConnect_initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsObservableObservableAutoConnect *self, IoReactivexObservablesConnectableObservable *source, jint numberOfObservers, id<IoReactivexFunctionsConsumer> connection) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->source_, source);
  self->numberOfObservers_ = numberOfObservers;
  JreStrongAssign(&self->connection_, connection);
  JreStrongAssignAndConsume(&self->clients_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsObservableObservableAutoConnect *new_IoReactivexInternalOperatorsObservableObservableAutoConnect_initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexObservablesConnectableObservable *source, jint numberOfObservers, id<IoReactivexFunctionsConsumer> connection) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableAutoConnect, initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_, source, numberOfObservers, connection)
}

IoReactivexInternalOperatorsObservableObservableAutoConnect *create_IoReactivexInternalOperatorsObservableObservableAutoConnect_initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_(IoReactivexObservablesConnectableObservable *source, jint numberOfObservers, id<IoReactivexFunctionsConsumer> connection) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableAutoConnect, initWithIoReactivexObservablesConnectableObservable_withInt_withIoReactivexFunctionsConsumer_, source, numberOfObservers, connection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableAutoConnect)
