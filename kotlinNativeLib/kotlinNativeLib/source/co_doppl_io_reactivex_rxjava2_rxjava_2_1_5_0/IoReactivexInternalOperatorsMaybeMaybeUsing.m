//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsMaybeMaybeUsing.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_serialVersionUID -674404550052917487LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeUsing

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer
                                       withBoolean:(jboolean)eager {
  IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(self, resourceSupplier, sourceSupplier, resourceDisposer, eager);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  id resource;
  @try {
    resource = [((id<JavaUtilConcurrentCallable>) nil_chk(resourceSupplier_)) call];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexMaybeObserver_(ex, observer);
    return;
  }
  id<IoReactivexMaybeSource> source;
  @try {
    source = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(sourceSupplier_)) applyWithId:resource], @"The sourceSupplier returned a null MaybeSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    if (eager_) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(resourceDisposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *exc) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
        IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexMaybeObserver_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, exc } count:2 type:JavaLangThrowable_class_()]), observer);
        return;
      }
    }
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexMaybeObserver_(ex, observer);
    if (!eager_) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(resourceDisposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *exc) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(exc);
      }
    }
    return;
  }
  [((id<IoReactivexMaybeSource>) nil_chk(source)) subscribeWithIoReactivexMaybeObserver:create_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(observer, resource, resourceDisposer_, eager_)];
}

- (void)dealloc {
  RELEASE_(resourceSupplier_);
  RELEASE_(sourceSupplier_);
  RELEASE_(resourceDisposer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:withIoReactivexFunctionsConsumer:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "sourceSupplier_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "resourceDisposer_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "eager_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;LIoReactivexFunctionsConsumer;Z", "(Ljava/util/concurrent/Callable<+TD;>;Lio/reactivex/functions/Function<-TD;+Lio/reactivex/MaybeSource<+TT;>;>;Lio/reactivex/functions/Consumer<-TD;>;Z)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "Ljava/util/concurrent/Callable<+TD;>;", "Lio/reactivex/functions/Function<-TD;+Lio/reactivex/MaybeSource<+TT;>;>;", "Lio/reactivex/functions/Consumer<-TD;>;", "LIoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver;", "<T:Ljava/lang/Object;D:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeUsing = { "MaybeUsing", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeUsing;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->resourceSupplier_, resourceSupplier);
  JreStrongAssign(&self->sourceSupplier_, sourceSupplier);
  JreStrongAssign(&self->resourceDisposer_, resourceDisposer);
  self->eager_ = eager;
}

IoReactivexInternalOperatorsMaybeMaybeUsing *new_IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeUsing, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_, resourceSupplier, sourceSupplier, resourceDisposer, eager)
}

IoReactivexInternalOperatorsMaybeMaybeUsing *create_IoReactivexInternalOperatorsMaybeMaybeUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeUsing, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_, resourceSupplier, sourceSupplier, resourceDisposer, eager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeUsing)

@implementation IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                                          withId:(id)resource
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                     withBoolean:(jboolean)eager {
  IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(self, actual, resource, disposer, eager);
  return self;
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(JreLoadVolatileId(&d_))) dispose];
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  [self disposeResourceAfter];
}

- (void)disposeResourceAfter {
  id resource = [self getAndSetWithId:self];
  if (resource != self) {
    @try {
      [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    }
  }
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(JreLoadVolatileId(&d_))) isDisposed];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(JreLoadVolatileId(&self->d_), d)) {
    JreVolatileStrongAssign(&self->d_, d);
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  if (eager_) {
    id resource = [self getAndSetWithId:self];
    if (resource != self) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    else {
      return;
    }
  }
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:value];
  if (!eager_) {
    [self disposeResourceAfter];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  if (eager_) {
    id resource = [self getAndSetWithId:self];
    if (resource != self) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        e = create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ e, ex } count:2 type:JavaLangThrowable_class_()]);
      }
    }
    else {
      return;
    }
  }
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  if (!eager_) {
    [self disposeResourceAfter];
  }
}

- (void)onComplete {
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  if (eager_) {
    id resource = [self getAndSetWithId:self];
    if (resource != self) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    else {
      return;
    }
  }
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
  if (!eager_) {
    [self disposeResourceAfter];
  }
}

- (void)__javaClone:(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&d_, &original->d_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(disposer_);
  JreReleaseVolatile(&d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withId:withIoReactivexFunctionsConsumer:withBoolean:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(disposeResourceAfter);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(onSuccessWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "disposer_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "eager_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LNSObject;LIoReactivexFunctionsConsumer;Z", "(Lio/reactivex/MaybeObserver<-TT;>;TD;Lio/reactivex/functions/Consumer<-TD;>;Z)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TT;>;", "Lio/reactivex/functions/Consumer<-TD;>;", "LIoReactivexInternalOperatorsMaybeMaybeUsing;", "<T:Ljava/lang/Object;D:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver = { "UsingObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 8, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *self, id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  JavaUtilConcurrentAtomicAtomicReference_initWithId_(self, resource);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->disposer_, disposer);
  self->eager_ = eager;
}

IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *new_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_, actual, resource, disposer, eager)
}

IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver *create_IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver_initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_(id<IoReactivexMaybeObserver> actual, id resource, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver, initWithIoReactivexMaybeObserver_withId_withIoReactivexFunctionsConsumer_withBoolean_, actual, resource, disposer, eager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeUsing_UsingObserver)
