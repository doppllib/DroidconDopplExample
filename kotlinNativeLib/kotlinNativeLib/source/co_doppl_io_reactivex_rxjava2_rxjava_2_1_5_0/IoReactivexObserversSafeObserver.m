//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSafeObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexObserversSafeObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver> __nonnull)actual {
  IoReactivexObserversSafeObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    @try {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      done_ = true;
      @try {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
      }
      @catch (JavaLangThrowable *e1) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e1);
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ e, e1 } count:2 type:JavaLangThrowable_class_()]));
        return;
      }
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
    }
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id __nonnull)t {
  if (done_) {
    return;
  }
  if (s_ == nil) {
    [self onNextNoSubscription];
    return;
  }
  if (t == nil) {
    JavaLangThrowable *ex = create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
    @try {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    }
    @catch (JavaLangThrowable *e1) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e1);
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e1 } count:2 type:JavaLangThrowable_class_()])];
      return;
    }
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  @try {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    @try {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    }
    @catch (JavaLangThrowable *e1) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e1);
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ e, e1 } count:2 type:JavaLangThrowable_class_()])];
      return;
    }
    [self onErrorWithJavaLangThrowable:e];
  }
}

- (void)onNextNoSubscription {
  done_ = true;
  JavaLangThrowable *ex = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
  @try {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE)];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:JavaLangThrowable_class_()]));
    return;
  }
  @try {
    [actual_ onErrorWithJavaLangThrowable:ex];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:JavaLangThrowable_class_()]));
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  if (s_ == nil) {
    JavaLangThrowable *npe = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
    @try {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE)];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe, e } count:3 type:JavaLangThrowable_class_()]));
      return;
    }
    @try {
      [actual_ onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe } count:2 type:JavaLangThrowable_class_()])];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe, e } count:3 type:JavaLangThrowable_class_()]));
    }
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  @try {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ t, ex } count:2 type:JavaLangThrowable_class_()]));
  }
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  if (s_ == nil) {
    [self onCompleteNoSubscription];
    return;
  }
  @try {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onCompleteNoSubscription {
  JavaLangThrowable *ex = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
  @try {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE)];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:JavaLangThrowable_class_()]));
    return;
  }
  @try {
    [actual_ onErrorWithJavaLangThrowable:ex];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:JavaLangThrowable_class_()]));
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onNextNoSubscription);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  methods[8].selector = @selector(onCompleteNoSubscription);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexObserversSafeObserver = { "SafeObserver", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x11, 9, 3, -1, -1, -1, 10, -1 };
  return &_IoReactivexObserversSafeObserver;
}

@end

void IoReactivexObserversSafeObserver_initWithIoReactivexObserver_(IoReactivexObserversSafeObserver *self, id<IoReactivexObserver> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexObserversSafeObserver *new_IoReactivexObserversSafeObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexObserversSafeObserver, initWithIoReactivexObserver_, actual)
}

IoReactivexObserversSafeObserver *create_IoReactivexObserversSafeObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexObserversSafeObserver, initWithIoReactivexObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversSafeObserver)
