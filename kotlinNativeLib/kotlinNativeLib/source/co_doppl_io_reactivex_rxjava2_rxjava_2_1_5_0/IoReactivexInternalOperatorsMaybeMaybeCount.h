//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeCount
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeCount

#if !defined (IoReactivexInternalOperatorsMaybeMaybeCount_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeCount))
#define IoReactivexInternalOperatorsMaybeMaybeCount_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

#define RESTRICT_IoReactivexInternalFuseableHasUpstreamMaybeSource 1
#define INCLUDE_IoReactivexInternalFuseableHasUpstreamMaybeSource 1
#include "IoReactivexInternalFuseableHasUpstreamMaybeSource.h"

@class JavaLangLong;
@protocol IoReactivexMaybeSource;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeCount : IoReactivexSingle < IoReactivexInternalFuseableHasUpstreamMaybeSource > {
 @public
  id<IoReactivexMaybeSource> source_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

- (JavaLangLong *)blockingGet;

- (id<IoReactivexMaybeSource>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeCount)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCount, source_, id<IoReactivexMaybeSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeCount_initWithIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeCount *self, id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCount *new_IoReactivexInternalOperatorsMaybeMaybeCount_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCount *create_IoReactivexInternalOperatorsMaybeMaybeCount_initWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeCount)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver : NSObject < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<IoReactivexDisposablesDisposable> d_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeCount_CountMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeCount")
