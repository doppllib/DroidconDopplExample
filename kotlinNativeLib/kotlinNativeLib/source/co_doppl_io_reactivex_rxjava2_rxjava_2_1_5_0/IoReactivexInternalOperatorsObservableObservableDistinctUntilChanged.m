//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalObserversBasicFuseableObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(self, source, keySelector, comparer);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(s, keySelector_, comparer_)];
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(comparer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Lio/reactivex/functions/BiPredicate<-TK;-TK;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/functions/Function<-TT;TK;>;", "Lio/reactivex/functions/BiPredicate<-TK;-TK;>;", "LIoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged = { "ObservableDistinctUntilChanged", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged;
}

@end

void IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged *new_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, source, keySelector, comparer)
}

IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged *create_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, source, keySelector, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged)

@implementation IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
        withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer {
  IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(self, actual, keySelector, comparer);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
    return;
  }
  id key;
  @try {
    key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:t];
    if (hasValue_) {
      jboolean equal = [((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key];
      JreStrongAssign(&last_, key);
      if (equal) {
        return;
      }
    }
    else {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
    }
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  for (; ; ) {
    id v = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) poll];
    if (v == nil) {
      return nil;
    }
    id key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:v];
    if (!hasValue_) {
      hasValue_ = true;
      JreStrongAssign(&last_, key);
      return v;
    }
    if (![((id<IoReactivexFunctionsBiPredicate>) nil_chk(comparer_)) testWithId:last_ withId:key]) {
      JreStrongAssign(&last_, key);
      return v;
    }
    JreStrongAssign(&last_, key);
  }
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(comparer_);
  RELEASE_(last_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "comparer_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "last_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "hasValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Lio/reactivex/functions/BiPredicate<-TK;-TK;>;)V", "onNext", "LNSObject;", "(TT;)V", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Function<-TT;TK;>;", "Lio/reactivex/functions/BiPredicate<-TK;-TK;>;", "TK;", "LIoReactivexInternalOperatorsObservableObservableDistinctUntilChanged;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/observers/BasicFuseableObserver<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver = { "DistinctUntilChangedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 4, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  IoReactivexInternalObserversBasicFuseableObserver_initWithIoReactivexObserver_(self, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->comparer_, comparer);
}

IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver *new_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver *create_IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsBiPredicate> comparer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiPredicate_, actual, keySelector, comparer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDistinctUntilChanged_DistinctUntilChangedObserver)
