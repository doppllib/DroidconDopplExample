//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexInternalUtilOpenHashSet.h"
#include "IoReactivexInternalUtilPow2.h"
#include "J2ObjC_source.h"

inline jint IoReactivexInternalUtilOpenHashSet_get_INT_PHI();
#define IoReactivexInternalUtilOpenHashSet_INT_PHI -1640531527
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalUtilOpenHashSet, INT_PHI, jint)

@implementation IoReactivexInternalUtilOpenHashSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilOpenHashSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  IoReactivexInternalUtilOpenHashSet_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
                  withFloat:(jfloat)loadFactor {
  IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(self, capacity, loadFactor);
  return self;
}

- (jboolean)addWithId:(id)value {
  IOSObjectArray *a = keys_;
  jint m = mask_;
  jint pos = IoReactivexInternalUtilOpenHashSet_mixWithInt_(((jint) [nil_chk(value) hash])) & m;
  id curr = IOSObjectArray_Get(nil_chk(a), pos);
  if (curr != nil) {
    if ([curr isEqual:value]) {
      return false;
    }
    for (; ; ) {
      pos = (pos + 1) & m;
      curr = IOSObjectArray_Get(a, pos);
      if (curr == nil) {
        break;
      }
      if ([curr isEqual:value]) {
        return false;
      }
    }
  }
  IOSObjectArray_Set(a, pos, value);
  if (++size_ >= maxSize_) {
    [self rehash];
  }
  return true;
}

- (jboolean)removeWithId:(id)value {
  IOSObjectArray *a = keys_;
  jint m = mask_;
  jint pos = IoReactivexInternalUtilOpenHashSet_mixWithInt_(((jint) [nil_chk(value) hash])) & m;
  id curr = IOSObjectArray_Get(nil_chk(a), pos);
  if (curr == nil) {
    return false;
  }
  if ([curr isEqual:value]) {
    return [self removeEntryWithInt:pos withNSObjectArray:a withInt:m];
  }
  for (; ; ) {
    pos = (pos + 1) & m;
    curr = IOSObjectArray_Get(a, pos);
    if (curr == nil) {
      return false;
    }
    if ([curr isEqual:value]) {
      return [self removeEntryWithInt:pos withNSObjectArray:a withInt:m];
    }
  }
}

- (jboolean)removeEntryWithInt:(jint)pos
             withNSObjectArray:(IOSObjectArray *)a
                       withInt:(jint)m {
  size_--;
  jint last;
  jint slot;
  id curr;
  for (; ; ) {
    last = pos;
    pos = (pos + 1) & m;
    for (; ; ) {
      curr = IOSObjectArray_Get(nil_chk(a), pos);
      if (curr == nil) {
        IOSObjectArray_Set(a, last, nil);
        return true;
      }
      slot = IoReactivexInternalUtilOpenHashSet_mixWithInt_(((jint) [curr hash])) & m;
      if (last <= pos ? last >= slot || slot > pos : last >= slot && slot > pos) {
        break;
      }
      pos = (pos + 1) & m;
    }
    IOSObjectArray_Set(a, last, curr);
  }
}

- (void)rehash {
  IOSObjectArray *a = keys_;
  jint i = ((IOSObjectArray *) nil_chk(a))->size_;
  jint newCap = JreLShift32(i, 1);
  jint m = newCap - 1;
  IOSObjectArray *b = [IOSObjectArray arrayWithLength:newCap type:NSObject_class_()];
  for (jint j = size_; j-- != 0; ) {
    while (IOSObjectArray_Get(a, --i) == nil) {
    }
    jint pos = IoReactivexInternalUtilOpenHashSet_mixWithInt_(((jint) [nil_chk(IOSObjectArray_Get(a, i)) hash])) & m;
    if (IOSObjectArray_Get(b, pos) != nil) {
      for (; ; ) {
        pos = (pos + 1) & m;
        if (IOSObjectArray_Get(b, pos) == nil) {
          break;
        }
      }
    }
    IOSObjectArray_Set(b, pos, IOSObjectArray_Get(a, i));
  }
  self->mask_ = m;
  self->maxSize_ = JreFpToInt((newCap * loadFactor_));
  JreStrongAssign(&self->keys_, b);
}

+ (jint)mixWithInt:(jint)x {
  return IoReactivexInternalUtilOpenHashSet_mixWithInt_(x);
}

- (IOSObjectArray *)keys {
  return keys_;
}

- (jint)size {
  return size_;
}

- (void)dealloc {
  RELEASE_(keys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 9, 0, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithInt:withFloat:);
  methods[3].selector = @selector(addWithId:);
  methods[4].selector = @selector(removeWithId:);
  methods[5].selector = @selector(removeEntryWithInt:withNSObjectArray:withInt:);
  methods[6].selector = @selector(rehash);
  methods[7].selector = @selector(mixWithInt:);
  methods[8].selector = @selector(keys);
  methods[9].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT_PHI", "I", .constantValue.asInt = IoReactivexInternalUtilOpenHashSet_INT_PHI, 0x1a, -1, -1, -1, -1 },
    { "loadFactor_", "F", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mask_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keys_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "I", "IF", "add", "LNSObject;", "(TT;)Z", "remove", "removeEntry", "I[LNSObject;I", "(I[TT;I)Z", "mix", "[TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilOpenHashSet = { "OpenHashSet", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 10, 6, -1, -1, -1, 11, -1 };
  return &_IoReactivexInternalUtilOpenHashSet;
}

@end

void IoReactivexInternalUtilOpenHashSet_init(IoReactivexInternalUtilOpenHashSet *self) {
  IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(self, 16, 0.75f);
}

IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilOpenHashSet, init)
}

IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilOpenHashSet, init)
}

void IoReactivexInternalUtilOpenHashSet_initWithInt_(IoReactivexInternalUtilOpenHashSet *self, jint capacity) {
  IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(self, capacity, 0.75f);
}

IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilOpenHashSet, initWithInt_, capacity)
}

IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilOpenHashSet, initWithInt_, capacity)
}

void IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(IoReactivexInternalUtilOpenHashSet *self, jint capacity, jfloat loadFactor) {
  NSObject_init(self);
  self->loadFactor_ = loadFactor;
  jint c = IoReactivexInternalUtilPow2_roundToPowerOfTwoWithInt_(capacity);
  self->mask_ = c - 1;
  self->maxSize_ = JreFpToInt((loadFactor * c));
  JreStrongAssign(&self->keys_, [IOSObjectArray arrayWithLength:c type:NSObject_class_()]);
}

IoReactivexInternalUtilOpenHashSet *new_IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor) {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilOpenHashSet, initWithInt_withFloat_, capacity, loadFactor)
}

IoReactivexInternalUtilOpenHashSet *create_IoReactivexInternalUtilOpenHashSet_initWithInt_withFloat_(jint capacity, jfloat loadFactor) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilOpenHashSet, initWithInt_withFloat_, capacity, loadFactor)
}

jint IoReactivexInternalUtilOpenHashSet_mixWithInt_(jint x) {
  IoReactivexInternalUtilOpenHashSet_initialize();
  jint h = x * IoReactivexInternalUtilOpenHashSet_INT_PHI;
  return h ^ (JreURShift32(h, 16));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilOpenHashSet)
