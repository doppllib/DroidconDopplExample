//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleTakeUntil.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_serialVersionUID -622603812305745221LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_serialVersionUID 5170026210238877381LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleTakeUntil

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(self, source, other);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent = create_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(observer);
  [((id<IoReactivexSingleObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:parent->other_];
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LOrgReactivestreamsPublisher;", "(Lio/reactivex/SingleSource<TT;>;Lorg/reactivestreams/Publisher<TU;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lorg/reactivestreams/Publisher<TU;>;", "LIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver;LIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTakeUntil = { "SingleTakeUntil", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTakeUntil;
}

@end

void IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsSingleSingleTakeUntil *self, id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsSingleSingleTakeUntil *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil, initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_, source, other)
}

IoReactivexInternalOperatorsSingleSingleTakeUntil *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_(id<IoReactivexSingleSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil, initWithIoReactivexSingleSource_withOrgReactivestreamsPublisher_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTakeUntil)

@implementation IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(self, actual);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  [((IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *) nil_chk(other_)) dispose];
  id<IoReactivexDisposablesDisposable> a = [self get];
  if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    a = [self getAndSetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
    if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *) nil_chk(other_)) dispose];
  id<IoReactivexDisposablesDisposable> a = [self get];
  if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    a = [self getAndSetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
    if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
      return;
    }
  }
  IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
}

- (void)otherErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  id<IoReactivexDisposablesDisposable> a = [self get];
  if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    a = [self getAndSetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
    if (a != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      if (a != nil) {
        [a dispose];
      }
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
      return;
    }
  }
  IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(otherErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "other_", "LIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "otherError", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleTakeUntil;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver = { "TakeUntilMainObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 7, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *self, id<IoReactivexSingleObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->other_, new_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(self));
}

IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver, initWithIoReactivexSingleObserver_, actual)
}

IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver, initWithIoReactivexSingleObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver)

@implementation IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver:(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *)parent {
  IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(self, parent);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self)) {
    [((IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *) nil_chk(parent_)) otherErrorWithJavaLangThrowable:create_JavaUtilConcurrentCancellationException_init()];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *) nil_chk(parent_)) otherErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if ([self get] != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    [self lazySetWithId:JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)];
    [((IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *) nil_chk(parent_)) otherErrorWithJavaLangThrowable:create_JavaUtilConcurrentCancellationException_init()];
  }
}

- (void)dispose {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver;", "(Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver<*>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver<*>;", "LIoReactivexInternalOperatorsSingleSingleTakeUntil;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber = { "TakeUntilOtherSubscriber", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 6, 2, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber;
}

@end

void IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *self, IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *new_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber, initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_, parent)
}

IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber *create_IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber_initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber, initWithIoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilMainObserver_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTakeUntil_TakeUntilOtherSubscriber)
