//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_serialVersionUID 8600231336733376951LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_serialVersionUID -502562646270949838LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayError
                                    withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, source, mapper, delayError, maxConcurrency);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(s, mapper_, delayErrors_, maxConcurrency_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;ZI", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TR;>;>;ZI)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe = { "FlowableFlatMapMaybe", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayError;
  self->maxConcurrency_ = maxConcurrency;
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayError, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayError, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                         withBoolean:(jboolean)delayErrors
                                             withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, actual, mapper, delayErrors, maxConcurrency);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    jint m = maxConcurrency_;
    if (m == JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:maxConcurrency_];
    }
  }
}

- (void)onNextWithId:(id)t {
  id<IoReactivexMaybeSource> ms;
  @try {
    ms = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper returned a null MaybeSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) getAndIncrement];
  IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *inner = create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(self);
  if (!JreLoadVolatileBoolean(&cancelled_) && [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:inner]) {
    [((id<IoReactivexMaybeSource>) nil_chk(ms)) subscribeWithIoReactivexMaybeObserver:inner];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet];
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    if (!delayErrors_) {
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    }
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet];
  [self drain];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)innerSuccessWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner
                                                                                                               withId:(id)value {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet] == 0;
    if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get] != 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      IoReactivexInternalQueueSpscLinkedArrayQueue *q = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(queue_)) get];
      if (d && (q == nil || [q isEmpty])) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
        if (ex != nil) {
          [actual_ onErrorWithJavaLangThrowable:ex];
        }
        else {
          [actual_ onComplete];
        }
        return;
      }
      IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, 1);
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
      }
    }
    else {
      IoReactivexInternalQueueSpscLinkedArrayQueue *q = [self getOrCreateQueue];
      @synchronized(q) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) offerWithId:value];
      }
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    IoReactivexInternalQueueSpscLinkedArrayQueue *q = [self getOrCreateQueue];
    @synchronized(q) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) offerWithId:value];
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet];
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (IoReactivexInternalQueueSpscLinkedArrayQueue *)getOrCreateQueue {
  for (; ; ) {
    IoReactivexInternalQueueSpscLinkedArrayQueue *current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(queue_)) get];
    if (current != nil) {
      return current;
    }
    current = create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(IoReactivexFlowable_bufferSize());
    if ([queue_ compareAndSetWithId:nil withId:current]) {
      return current;
    }
  }
}

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner
                                                                                              withJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    if (!delayErrors_) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
      [set_ dispose];
    }
    else {
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
      }
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet];
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet] == 0;
    IoReactivexInternalQueueSpscLinkedArrayQueue *q = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(queue_)) get];
    if (d && (q == nil || [q isEmpty])) {
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
      if (ex != nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
      else {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
      }
      return;
    }
    if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
    [self drainLoop];
  }
  else {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) decrementAndGet];
    if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
    [self drain];
  }
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    [self drainLoop];
  }
}

- (void)clear {
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(queue_)) get];
  if (q != nil) {
    [q clear];
  }
}

- (void)drainLoop {
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  JavaUtilConcurrentAtomicAtomicInteger *n = active_;
  JavaUtilConcurrentAtomicAtomicReference *qr = queue_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self clear];
        return;
      }
      if (!delayErrors_) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          ex = [errors_ terminate];
          [self clear];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          return;
        }
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(n)) get] == 0;
      IoReactivexInternalQueueSpscLinkedArrayQueue *q = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(qr)) get];
      id v = q != nil ? [q poll] : nil;
      jboolean empty = v == nil;
      if (d && empty) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
        if (ex != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self clear];
        return;
      }
      if (!delayErrors_) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          ex = [errors_ terminate];
          [self clear];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          return;
        }
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(n)) get] == 0;
      IoReactivexInternalQueueSpscLinkedArrayQueue *q = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(qr)) get];
      jboolean empty = q == nil || [q isEmpty];
      if (d && empty) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
        if (ex != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return;
      }
    }
    if (e != 0LL) {
      IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, e);
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:e];
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(requested_);
  RELEASE_(set_);
  RELEASE_(active_);
  RELEASE_(errors_);
  RELEASE_(mapper_);
  RELEASE_(queue_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "LIoReactivexInternalQueueSpscLinkedArrayQueue;", 0x0, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(innerSuccessWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:withId:);
  methods[8].selector = @selector(getOrCreateQueue);
  methods[9].selector = @selector(innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:withJavaLangThrowable:);
  methods[10].selector = @selector(innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:);
  methods[11].selector = @selector(drain);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "active_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "queue_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;ZI", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TR;>;>;ZI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "innerSuccess", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver;LNSObject;", "(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;TR;)V", "()Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TR;>;", "innerError", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver;LJavaLangThrowable;", "innerComplete", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver;", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TR;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber = { "FlatMapMaybeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 14, 12, 22, 18, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->active_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_, actual, mapper, delayErrors, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_, actual, mapper, delayErrors, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  [this$0_ innerSuccessWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:self withId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [this$0_ innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:self withJavaLangThrowable:e];
}

- (void)onComplete {
  [this$0_ innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:self];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber<TT;TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TR;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 7, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *self, IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver)
