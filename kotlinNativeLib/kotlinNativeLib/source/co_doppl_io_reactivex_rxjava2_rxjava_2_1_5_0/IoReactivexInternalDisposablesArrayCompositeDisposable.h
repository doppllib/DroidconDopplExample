//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalDisposablesArrayCompositeDisposable")
#ifdef RESTRICT_IoReactivexInternalDisposablesArrayCompositeDisposable
#define INCLUDE_ALL_IoReactivexInternalDisposablesArrayCompositeDisposable 0
#else
#define INCLUDE_ALL_IoReactivexInternalDisposablesArrayCompositeDisposable 1
#endif
#undef RESTRICT_IoReactivexInternalDisposablesArrayCompositeDisposable

#if !defined (IoReactivexInternalDisposablesArrayCompositeDisposable_) && (INCLUDE_ALL_IoReactivexInternalDisposablesArrayCompositeDisposable || defined(INCLUDE_IoReactivexInternalDisposablesArrayCompositeDisposable))
#define IoReactivexInternalDisposablesArrayCompositeDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalDisposablesArrayCompositeDisposable : JavaUtilConcurrentAtomicAtomicReferenceArray < IoReactivexDisposablesDisposable >

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithInt:(jint)arg0
                                                         withId:(id<IoReactivexDisposablesDisposable>)arg1
                             withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg2;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithInt:(jint)arg0
                                                         withId:(id<IoReactivexDisposablesDisposable>)arg1
                             withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg2;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithInt:(jint)arg0
                                                  withId:(id<IoReactivexDisposablesDisposable>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithInt:(jint)arg0
                          withJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getWithInt:(jint)arg0;

- (jboolean)isDisposed;

- (id<IoReactivexDisposablesDisposable>)replaceResourceWithInt:(jint)index
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

- (jboolean)setResourceWithInt:(jint)index
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithInt:(jint)arg0
                          withJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg1;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalDisposablesArrayCompositeDisposable)

FOUNDATION_EXPORT void IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(IoReactivexInternalDisposablesArrayCompositeDisposable *self, jint capacity);

FOUNDATION_EXPORT IoReactivexInternalDisposablesArrayCompositeDisposable *new_IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalDisposablesArrayCompositeDisposable *create_IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalDisposablesArrayCompositeDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalDisposablesArrayCompositeDisposable")
