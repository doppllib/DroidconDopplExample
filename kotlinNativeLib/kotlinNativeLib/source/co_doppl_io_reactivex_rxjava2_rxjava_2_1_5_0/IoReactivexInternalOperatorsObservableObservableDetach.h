//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableDetach
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableDetach

#if !defined (IoReactivexInternalOperatorsObservableObservableDetach_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableDetach))
#define IoReactivexInternalOperatorsObservableObservableDetach_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableDetach : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableDetach)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableDetach_initWithIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableDetach *self, id<IoReactivexObservableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDetach *new_IoReactivexInternalOperatorsObservableObservableDetach_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDetach *create_IoReactivexInternalOperatorsObservableObservableDetach_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableDetach)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver))
#define IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver *self, id<IoReactivexObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver *new_IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver *create_IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableDetach_DetachObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDetach")
