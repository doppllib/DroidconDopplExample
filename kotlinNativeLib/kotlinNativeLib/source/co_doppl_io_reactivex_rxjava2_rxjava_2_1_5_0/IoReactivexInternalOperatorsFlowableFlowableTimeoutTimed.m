//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed.h"
#include "IoReactivexInternalSubscribersFullArbiterSubscriber.h"
#include "IoReactivexInternalSubscriptionsFullArbiter.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *this$0_;
  jlong idx_;
}

@end

@interface IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *this$0_;
  jlong idx_;
}

@end

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed)

id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_NEW_TIMER;

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed

+ (id<IoReactivexDisposablesDisposable>)NEW_TIMER {
  return IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_NEW_TIMER;
}

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (other_ == nil) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), timeout_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker])];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(s, timeout_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker], other_)];
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "NEW_TIMER", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LOrgReactivestreamsPublisher;", "(Lio/reactivex/Flowable<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TT;>;", &IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_NEW_TIMER, "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber;LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed = { "FlowableTimeoutTimed", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_NEW_TIMER, new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *self, IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withOrgReactivestreamsPublisher_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(self, actual, timeout, unit, worker, other);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) setSubscriptionWithOrgReactivestreamsSubscription:s]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:arbiter_];
      [self scheduleTimeoutWithLong:0LL];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  if ([((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onNextWithId:t withOrgReactivestreamsSubscription:s_]) {
    [self scheduleTimeoutWithLong:idx];
  }
}

- (void)scheduleTimeoutWithLong:(jlong)idx {
  if (timer_ != nil) {
    [timer_ dispose];
  }
  JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(self, idx) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_]);
}

- (void)subscribeNext {
  [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalSubscribersFullArbiterSubscriber_initWithIoReactivexInternalSubscriptionsFullArbiter_(arbiter_)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onErrorWithJavaLangThrowable:t withOrgReactivestreamsSubscription:s_];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalSubscriptionsFullArbiter *) nil_chk(arbiter_)) onCompleteWithOrgReactivestreamsSubscription:s_];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(worker_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(other_);
  RELEASE_(s_);
  RELEASE_(arbiter_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(scheduleTimeoutWithLong:);
  methods[4].selector = @selector(subscribeNext);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arbiter_", "LIoReactivexInternalSubscriptionsFullArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "timer_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher<+TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "scheduleTimeout", "J", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lorg/reactivestreams/Publisher<+TT;>;", "Lio/reactivex/internal/subscriptions/FullArbiter<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber = { "TimeoutTimedOtherSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 10, 14, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalSubscriptionsFullArbiter_initWithOrgReactivestreamsSubscriber_withIoReactivexDisposablesDisposable_withInt_(actual, self, 8));
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_, actual, timeout, unit, worker, other)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_, actual, timeout, unit, worker, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *)outer$
                                                                                                    withLong:(jlong)idx {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(self, outer$, idx);
  return self;
}

- (void)run {
  if (idx_ == JreLoadVolatileLong(&this$0_->index_)) {
    JreAssignVolatileBoolean(&this$0_->done_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(this$0_->s_)) cancel];
    [((IoReactivexScheduler_Worker *) nil_chk(this$0_->worker_)) dispose];
    [this$0_ subscribeNext];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "idx_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutTimedOtherSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask = { "TimeoutTask", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *self, IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->idx_ = idx;
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask, initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_, outer$, idx)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber *outer$, jlong idx) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask, initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_withLong_, outer$, idx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedOtherSubscriber_TimeoutTask)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(self, actual, timeout, unit, worker);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [self scheduleTimeoutWithLong:0LL];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  [self scheduleTimeoutWithLong:idx];
}

- (void)scheduleTimeoutWithLong:(jlong)idx {
  if (timer_ != nil) {
    [timer_ dispose];
  }
  JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(self, idx) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_]);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(worker_)) isDisposed];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  [self dispose];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(s_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(scheduleTimeoutWithLong:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(requestWithLong:);
  methods[9].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "timer_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "scheduleTimeout", "J", "onError", "LJavaLangThrowable;", "request", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber = { "TimeoutTimedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 10, 8, 13, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *)outer$
                                                                                               withLong:(jlong)idx {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(self, outer$, idx);
  return self;
}

- (void)run {
  if (idx_ == JreLoadVolatileLong(&this$0_->index_)) {
    JreAssignVolatileBoolean(&this$0_->done_, true);
    [this$0_ dispose];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(this$0_->actual_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "idx_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutTimedSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask = { "TimeoutTask", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *self, IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->idx_ = idx;
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask, initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_, outer$, idx)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask_initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber *outer$, jlong idx) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask, initWithIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_withLong_, outer$, idx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_TimeoutTimedSubscriber_TimeoutTask)

@implementation IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dispose {
}

- (jboolean)isDisposed {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableTimeoutTimed;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose = { "EmptyDispose", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x18, 3, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *self) {
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *new_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose, init)
}

IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose *create_IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableTimeoutTimed_EmptyDispose)
