//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSamplePublisher.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_serialVersionUID -3517602651313910099LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_serialVersionUID -3029755663834015785LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_serialVersionUID -3029755663834015785LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableSamplePublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                                        withBoolean:(jboolean)emitLast {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_(self, source, other, emitLast);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexSubscribersSerializedSubscriber *serial = create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s);
  if (emitLast_) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(serial, other_)];
  }
  else {
    [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(serial, other_)];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withOrgReactivestreamsPublisher:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "emitLast_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;LOrgReactivestreamsPublisher;Z", "(Lorg/reactivestreams/Publisher<TT;>;Lorg/reactivestreams/Publisher<*>;Z)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<TT;>;", "Lorg/reactivestreams/Publisher<*>;", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber;LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber;LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast;LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSamplePublisher = { "FlowableSamplePublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher *self, id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other, jboolean emitLast) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->other_, other);
  self->emitLast_ = emitLast;
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher *new_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other, jboolean emitLast) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher, initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_, source, other, emitLast)
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher *create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other, jboolean emitLast) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher, initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withBoolean_, source, other, emitLast)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher)

@implementation IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(other_)) get] == nil) {
      [((id<OrgReactivestreamsPublisher>) nil_chk(sampler_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_(self)];
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
  }
}

- (void)onNextWithId:(id)t {
  [self lazySetWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [self completeMain];
}

- (jboolean)setOtherWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)o {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(other_, o);
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
  }
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)complete {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [self completeOther];
}

- (void)emit {
  id value = [self getAndSetWithId:nil];
  if (value != nil) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    if (r != 0LL) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, 1);
    }
    else {
      [self cancel];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Couldn't emit value due to lack of requests!")];
    }
  }
}

- (void)completeMain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)completeOther {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sampler_);
  RELEASE_(requested_);
  RELEASE_(other_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(setOtherWithOrgReactivestreamsSubscription:);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(errorWithJavaLangThrowable:);
  methods[9].selector = @selector(complete);
  methods[10].selector = @selector(emit);
  methods[11].selector = @selector(completeMain);
  methods[12].selector = @selector(completeOther);
  methods[13].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "sampler_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<*>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "setOther", "request", "J", "error", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lorg/reactivestreams/Publisher<*>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber = { "SamplePublisherSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 14, 6, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->other_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->sampler_, other);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber:(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_(self, parent);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if ([((IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *) nil_chk(parent_)) setOtherWithOrgReactivestreamsSubscription:s]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *) nil_chk(parent_)) run];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *) nil_chk(parent_)) complete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber<TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber = { "SamplerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 1, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplerSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
  return self;
}

- (void)completeMain {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)completeOther {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)run {
  [self emit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(completeMain);
  methods[2].selector = @selector(completeOther);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<*>;)V", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast = { "SampleMainNoLast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast *new_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast *create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainNoLast)

@implementation IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
  return self;
}

- (void)completeMain {
  JreAssignVolatileBoolean(&done_, true);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self emit];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)completeOther {
  JreAssignVolatileBoolean(&done_, true);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self emit];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    do {
      jboolean d = JreLoadVolatileBoolean(&done_);
      [self emit];
      if (d) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
        return;
      }
    }
    while ([wip_ decrementAndGet] != 0);
  }
}

- (void)dealloc {
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(completeMain);
  methods[2].selector = @selector(completeOther);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<*>;)V", "LIoReactivexInternalOperatorsFlowableFlowableSamplePublisher;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast = { "SampleMainEmitLast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SamplePublisherSubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast *new_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast *create_IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSamplePublisher_SampleMainEmitLast)
