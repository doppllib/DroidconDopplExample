//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableIntervalRange
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableIntervalRange

#if !defined (IoReactivexInternalOperatorsObservableObservableIntervalRange_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableIntervalRange))
#define IoReactivexInternalOperatorsObservableObservableIntervalRange_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@class IoReactivexScheduler;
@class JavaLangLong;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableIntervalRange : IoReactivexObservable {
 @public
  IoReactivexScheduler *scheduler_;
  jlong start_;
  jlong end_;
  jlong initialDelay_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)start
                    withLong:(jlong)end
                    withLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (JavaLangLong *)blockingFirst;

- (JavaLangLong *)blockingFirstWithId:(JavaLangLong *)arg0;

- (JavaLangLong *)blockingLast;

- (JavaLangLong *)blockingLastWithId:(JavaLangLong *)arg0;

- (JavaLangLong *)blockingSingle;

- (JavaLangLong *)blockingSingleWithId:(JavaLangLong *)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableIntervalRange)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableIntervalRange, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableIntervalRange, unit_, JavaUtilConcurrentTimeUnit *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableIntervalRange *self, jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableIntervalRange *new_IoReactivexInternalOperatorsObservableObservableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableIntervalRange *create_IoReactivexInternalOperatorsObservableObservableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableIntervalRange)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver))
#define IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@protocol IoReactivexObserver;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong end_;
  jlong count_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)run;

- (void)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)start
                                   withLong:(jlong)end;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver, actual_, id<IoReactivexObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver_initWithIoReactivexObserver_withLong_withLong_(IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver *self, id<IoReactivexObserver> actual, jlong start, jlong end);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver *new_IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver_initWithIoReactivexObserver_withLong_withLong_(id<IoReactivexObserver> actual, jlong start, jlong end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver *create_IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver_initWithIoReactivexObserver_withLong_withLong_(id<IoReactivexObserver> actual, jlong start, jlong end);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableIntervalRange_IntervalRangeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableIntervalRange")
