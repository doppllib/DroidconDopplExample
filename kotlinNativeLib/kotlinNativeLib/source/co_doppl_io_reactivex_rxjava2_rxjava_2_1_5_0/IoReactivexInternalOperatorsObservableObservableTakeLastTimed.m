//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableTakeLastTimed.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

inline jlong IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_serialVersionUID -5677354903406201275LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableTakeLastTimed

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)count
                                           withLong:(jlong)time
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsObservableObservableTakeLastTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(self, source, count, time, unit, scheduler, bufferSize, delayError);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(t, count_, time_, unit_, scheduler_, bufferSize_, delayError_)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;IZ", "(Lio/reactivex/ObservableSource<TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTakeLastTimed = { "ObservableTakeLastTimed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 6, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTakeLastTimed;
}

@end

void IoReactivexInternalOperatorsObservableObservableTakeLastTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableTakeLastTimed *self, id<IoReactivexObservableSource> source, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->count_ = count;
  self->time_ = time;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsObservableObservableTakeLastTimed *new_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLastTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_, source, count, time, unit, scheduler, bufferSize, delayError)
}

IoReactivexInternalOperatorsObservableObservableTakeLastTimed *create_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLastTimed, initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_, source, count, time, unit, scheduler, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTakeLastTimed)

@implementation IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
                                   withLong:(jlong)time
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(self, actual, count, time, unit, scheduler, bufferSize, delayError);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jlong now = [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_];
  jlong time = self->time_;
  jlong c = count_;
  jboolean unbounded = c == JavaLangLong_MAX_VALUE;
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) offerWithId:JavaLangLong_valueOfWithLong_(now) withId:t];
  while (![q isEmpty]) {
    jlong ts = [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([q peek], [JavaLangLong class]))) longLongValue];
    if (ts <= now - time || (!unbounded && (JreRShift32([q size], 1)) > c)) {
      [q poll];
      [q poll];
    }
    else {
      break;
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  [self drain];
}

- (void)onComplete {
  [self drain];
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
    if ([self compareAndSetWithBoolean:false withBoolean:true]) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
    }
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)drain {
  if (![self compareAndSetWithBoolean:false withBoolean:true]) {
    return;
  }
  id<IoReactivexObserver> a = actual_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jboolean delayError = self->delayError_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      return;
    }
    if (!delayError) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    id ts = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
    jboolean empty = ts == nil;
    if (empty) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      }
      else {
        [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
      }
      return;
    }
    id o = [q poll];
    if ([((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(ts, [JavaLangLong class]))) longLongValue] < [((IoReactivexScheduler *) nil_chk(scheduler_)) nowWithJavaUtilConcurrentTimeUnit:unit_] - time_) {
      continue;
    }
    [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:o];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(queue_);
  RELEASE_(d_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;IZ", "(Lio/reactivex/Observer<-TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Ljava/lang/Object;>;", "LIoReactivexInternalOperatorsObservableObservableTakeLastTimed;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver = { "TakeLastTimedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 11, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver *self, id<IoReactivexObserver> actual, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
  self->time_ = time;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver *new_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(id<IoReactivexObserver> actual, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver, initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_, actual, count, time, unit, scheduler, bufferSize, delayError)
}

IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver *create_IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_(id<IoReactivexObserver> actual, jlong count, jlong time, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver, initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withBoolean_, actual, count, time, unit, scheduler, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTakeLastTimed_TakeLastTimedObserver)
