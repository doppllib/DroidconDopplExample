//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFromCallable")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleFromCallable
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFromCallable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFromCallable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleFromCallable

#if !defined (IoReactivexInternalOperatorsSingleSingleFromCallable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFromCallable || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFromCallable))
#define IoReactivexInternalOperatorsSingleSingleFromCallable_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@protocol IoReactivexSingleObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsSingleSingleFromCallable : IoReactivexSingle {
 @public
  id<JavaUtilConcurrentCallable> callable_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFromCallable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFromCallable, callable_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFromCallable_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsSingleSingleFromCallable *self, id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFromCallable *new_IoReactivexInternalOperatorsSingleSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFromCallable *create_IoReactivexInternalOperatorsSingleSingleFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFromCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFromCallable")
