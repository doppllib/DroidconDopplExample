//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexInternalOperatorsParallelParallelFromArray.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"

@implementation IoReactivexInternalOperatorsParallelParallelFromArray

- (instancetype)initWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsParallelParallelFromArray_initWithOrgReactivestreamsPublisherArray_(self, sources);
  return self;
}

- (jint)parallelism {
  return ((IOSObjectArray *) nil_chk(sources_))->size_;
}

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  if (![self validateWithOrgReactivestreamsSubscriberArray:subscribers]) {
    return;
  }
  jint n = ((IOSObjectArray *) nil_chk(subscribers))->size_;
  for (jint i = 0; i < n; i++) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(IOSObjectArray_Get(nil_chk(sources_), i))) subscribeWithOrgReactivestreamsSubscriber:IOSObjectArray_Get(subscribers, i)];
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisherArray:);
  methods[1].selector = @selector(parallelism);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "[LOrgReactivestreamsPublisher;", "([Lorg/reactivestreams/Publisher<TT;>;)V", "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TT;>;)V", "[Lorg/reactivestreams/Publisher<TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/parallel/ParallelFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFromArray = { "ParallelFromArray", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFromArray;
}

@end

void IoReactivexInternalOperatorsParallelParallelFromArray_initWithOrgReactivestreamsPublisherArray_(IoReactivexInternalOperatorsParallelParallelFromArray *self, IOSObjectArray *sources) {
  IoReactivexParallelParallelFlowable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsParallelParallelFromArray *new_IoReactivexInternalOperatorsParallelParallelFromArray_initWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFromArray, initWithOrgReactivestreamsPublisherArray_, sources)
}

IoReactivexInternalOperatorsParallelParallelFromArray *create_IoReactivexInternalOperatorsParallelParallelFromArray_initWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFromArray, initWithOrgReactivestreamsPublisherArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFromArray)
