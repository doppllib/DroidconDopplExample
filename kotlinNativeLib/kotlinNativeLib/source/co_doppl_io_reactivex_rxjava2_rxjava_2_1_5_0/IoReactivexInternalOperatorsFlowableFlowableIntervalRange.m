//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableIntervalRange.h"
#include "IoReactivexInternalSchedulersTrampolineScheduler.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_serialVersionUID -2809475196591179431LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableIntervalRange

- (instancetype)initWithLong:(jlong)start
                    withLong:(jlong)end
                    withLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, start, end, initialDelay, period, unit, scheduler);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *is = create_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(s, start_, end_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:is];
  IoReactivexScheduler *sch = scheduler_;
  if ([sch isKindOfClass:[IoReactivexInternalSchedulersTrampolineScheduler class]]) {
    IoReactivexScheduler_Worker *worker = [((IoReactivexScheduler *) nil_chk(sch)) createWorker];
    [is setResourceWithIoReactivexDisposablesDisposable:worker];
    [((IoReactivexScheduler_Worker *) nil_chk(worker)) schedulePeriodicallyWithJavaLangRunnable:is withLong:initialDelay_ withLong:period_ withJavaUtilConcurrentTimeUnit:unit_];
  }
  else {
    id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(sch)) schedulePeriodicallyDirectWithJavaLangRunnable:is withLong:initialDelay_ withLong:period_ withJavaUtilConcurrentTimeUnit:unit_];
    [is setResourceWithIoReactivexDisposablesDisposable:d];
  }
}

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withLong:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "start_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "end_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "initialDelay_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "period_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJJJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Long;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber;", "Lio/reactivex/Flowable<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableIntervalRange = { "FlowableIntervalRange", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 6, -1, 4, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableIntervalRange;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableIntervalRange *self, jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexFlowable_init(self);
  self->initialDelay_ = initialDelay;
  self->period_ = period;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->start_ = start;
  self->end_ = end;
}

IoReactivexInternalOperatorsFlowableFlowableIntervalRange *new_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableIntervalRange, initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, start, end, initialDelay, period, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableIntervalRange *create_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableIntervalRange, initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, start, end, initialDelay, period, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableIntervalRange)

@implementation IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)start
                                            withLong:(jlong)end {
  IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(self, actual, start, end);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
  }
}

- (void)cancel {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(resource_);
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(resource_)) get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    jlong r = [self get];
    if (r != 0LL) {
      jlong c = count_;
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:JavaLangLong_valueOfWithLong_(c)];
      if (c == end_) {
        if ([resource_ get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
          [actual_ onComplete];
        }
        IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(resource_);
        return;
      }
      count_ = c + 1;
      if (r != JavaLangLong_MAX_VALUE) {
        [self decrementAndGet];
      }
    }
    else {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(JreStrcat("$J$", @"Can't deliver value ", count_, @" due to lack of requests"))];
      IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(resource_);
    }
  }
}

- (void)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(resource_, d);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withLong:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(setResourceWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "end_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resource_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JJ", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Long;>;JJ)V", "request", "J", "setResource", "LIoReactivexDisposablesDisposable;", "Lorg/reactivestreams/Subscriber<-Ljava/lang/Long;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsFlowableFlowableIntervalRange;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber = { "IntervalRangeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 5, 8, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssignAndConsume(&self->resource_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  self->count_ = start;
  self->end_ = end;
}

IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_, actual, start, end)
}

IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_, actual, start, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber)
