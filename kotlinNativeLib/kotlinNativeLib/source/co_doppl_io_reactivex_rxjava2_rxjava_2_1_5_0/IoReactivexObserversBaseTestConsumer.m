//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexFunctionsPredicate.h"
#include "IoReactivexInternalFunctionsFunctions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilVolatileSizeArrayList.h"
#include "IoReactivexNotification.h"
#include "IoReactivexObserversBaseTestConsumer.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static id<JavaUtilList> IoReactivexObserversBaseTestConsumer_values(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static id<JavaUtilList> IoReactivexObserversBaseTestConsumer_errors(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static JavaLangAssertionError *IoReactivexObserversBaseTestConsumer_failWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_await(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static jboolean IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(IoReactivexObserversBaseTestConsumer *self, jlong time, JavaUtilConcurrentTimeUnit *unit);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertComplete(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNotComplete(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoErrors(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(IoReactivexObserversBaseTestConsumer *self, IOSClass *errorClass);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, id<IoReactivexFunctionsPredicate> errorPredicate);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, jint index, id<IoReactivexFunctionsPredicate> valuePredicate);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(IoReactivexObserversBaseTestConsumer *self, jint count);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoValues(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(IoReactivexObserversBaseTestConsumer *self, IOSObjectArray *values);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_awaitCountWithInt_withJavaLangRunnable_withLong_(IoReactivexObserversBaseTestConsumer *self, jint atLeast, id<JavaLangRunnable> waitStrategy, jlong timeoutMillis);

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 *self, NSString *__name, jint __ordinal);

@interface IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 : IoReactivexObserversBaseTestConsumer_TestWaitStrategy

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6)

__attribute__((unused)) static void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 *self, NSString *__name, jint __ordinal);

@implementation IoReactivexObserversBaseTestConsumer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexObserversBaseTestConsumer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)lastThread {
  return lastThread_;
}

- (id<JavaUtilList>)values {
  return IoReactivexObserversBaseTestConsumer_values(self);
}

- (id<JavaUtilList>)errors {
  return IoReactivexObserversBaseTestConsumer_errors(self);
}

- (jlong)completions {
  return completions_;
}

- (jboolean)isTerminated {
  return [((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] == 0;
}

- (jint)valueCount {
  return [((id<JavaUtilList>) nil_chk(values_)) size];
}

- (jint)errorCount {
  return [((id<JavaUtilList>) nil_chk(errors_)) size];
}

- (JavaLangAssertionError *)failWithNSString:(NSString *)message {
  return IoReactivexObserversBaseTestConsumer_failWithNSString_(self, message);
}

- (IoReactivexObserversBaseTestConsumer *)await {
  return IoReactivexObserversBaseTestConsumer_await(self);
}

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(self, time, unit);
}

- (IoReactivexObserversBaseTestConsumer *)assertComplete {
  return IoReactivexObserversBaseTestConsumer_assertComplete(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertNotComplete {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertNoErrors {
  return IoReactivexObserversBaseTestConsumer_assertNoErrors(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithJavaLangThrowable:(JavaLangThrowable *)error {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, IoReactivexInternalFunctionsFunctions_equalsWithWithId_(error));
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIOSClass:(IOSClass *)errorClass {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(self, errorClass);
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, errorPredicate);
}

- (IoReactivexObserversBaseTestConsumer *)assertValueWithId:(id)value {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  if (s != 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$@", @"Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @", Actual: ", values_)));
  }
  id v = [values_ getWithInt:0];
  if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(value, v)) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$$", @"Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v))));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithId:(id)value {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    if (IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(v, value)) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$", @"Value at position ", i, @" is equal to ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @"; Expected them to be different")));
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(self, 0, valuePredicate);
  if ([((id<JavaUtilList>) nil_chk(values_)) size] > 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Value present but other values as well"));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    @try {
      if ([((id<IoReactivexFunctionsPredicate>) nil_chk(valuePredicate)) testWithId:v]) {
        @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$", @"Value at position ", i, @" matches predicate ", [valuePredicate description], @", which was not expected.")));
      }
    }
    @catch (JavaLangException *ex) {
      @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueAtWithInt:(jint)index
                                                        withId:(id)value {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  if (s == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No values"));
  }
  if (index >= s) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I", @"Invalid index: ", index)));
  }
  id v = [values_ getWithInt:index];
  if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(value, v)) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$$", @"Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v))));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueAtWithInt:(jint)index
                             withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  return IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(self, index, valuePredicate);
}

+ (NSString *)valueAndClassWithId:(id)o {
  return IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(o);
}

- (IoReactivexObserversBaseTestConsumer *)assertValueCountWithInt:(jint)count {
  return IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(self, count);
}

- (IoReactivexObserversBaseTestConsumer *)assertNoValues {
  return IoReactivexObserversBaseTestConsumer_assertNoValues(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertValuesWithNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(self, values);
}

- (IoReactivexObserversBaseTestConsumer *)assertValuesOnlyWithNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoErrors(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)))));
}

- (IoReactivexObserversBaseTestConsumer *)assertValueSetWithJavaUtilCollection:(id<JavaUtilCollection>)expected {
  if ([((id<JavaUtilCollection>) nil_chk(expected)) isEmpty]) {
    IoReactivexObserversBaseTestConsumer_assertNoValues(self);
    return self;
  }
  for (id __strong v in nil_chk(self->values_)) {
    if (![expected containsWithId:v]) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$", @"Value not in the expected collection: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v))));
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueSequenceWithJavaLangIterable:(id<JavaLangIterable>)sequence {
  jint i = 0;
  id<JavaUtilIterator> actualIterator = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  id<JavaUtilIterator> expectedIterator = [((id<JavaLangIterable>) nil_chk(sequence)) iterator];
  jboolean actualNext;
  jboolean expectedNext;
  for (; ; ) {
    expectedNext = [((id<JavaUtilIterator>) nil_chk(expectedIterator)) hasNext];
    actualNext = [((id<JavaUtilIterator>) nil_chk(actualIterator)) hasNext];
    if (!actualNext || !expectedNext) {
      break;
    }
    id u = [expectedIterator next];
    id v = [actualIterator next];
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(u, v)) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$$", @"Values at position ", i, @" differ; Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(u), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v))));
    }
    i++;
  }
  if (actualNext) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC", @"More values received than expected (", i, ')')));
  }
  if (expectedNext) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC", @"Fewer values received than expected (", i, ')')));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertTerminated {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] != 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Subscriber still running!"));
  }
  jlong c = completions_;
  if (c > 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Terminated with multiple completions: ", c)));
  }
  jint s = [((id<JavaUtilList>) nil_chk(errors_)) size];
  if (s > 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I", @"Terminated with multiple errors: ", s)));
  }
  if (c != 0 && s != 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Terminated with multiple completions and errors: ", c)));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNotTerminated {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Subscriber terminated!"));
  }
  return self;
}

- (jboolean)awaitTerminalEvent {
  @try {
    IoReactivexObserversBaseTestConsumer_await(self);
    return true;
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    return false;
  }
}

- (jboolean)awaitTerminalEventWithLong:(jlong)duration
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    return IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(self, duration, unit);
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    return false;
  }
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorMessageWithNSString:(NSString *)message {
  return IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(self, message);
}

- (id<JavaUtilList>)getEvents {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  [result addWithId:IoReactivexObserversBaseTestConsumer_values(self)];
  [result addWithId:IoReactivexObserversBaseTestConsumer_errors(self)];
  id<JavaUtilList> completeList = create_JavaUtilArrayList_init();
  for (jlong i = 0; i < completions_; i++) {
    [completeList addWithId:IoReactivexNotification_createOnComplete()];
  }
  [result addWithId:completeList];
  return result;
}

- (IoReactivexObserversBaseTestConsumer *)assertSubscribed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IoReactivexObserversBaseTestConsumer *)assertNotSubscribed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IoReactivexObserversBaseTestConsumer *)assertResultWithNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoErrors(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)))));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIOSClass:(IOSClass *)error
                                                  withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), error)));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate
                                                                       withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), errorPredicate)));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureAndMessageWithIOSClass:(IOSClass *)error
                                                                 withNSString:(NSString *)message
                                                            withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), error)), message)));
}

- (IoReactivexObserversBaseTestConsumer *)awaitDoneWithLong:(jlong)time
                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) awaitWithLong:time withJavaUtilConcurrentTimeUnit:unit]) {
      timeout_ = true;
      [self dispose];
    }
  }
  @catch (JavaLangInterruptedException *ex) {
    [self dispose];
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertEmpty {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoErrors(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoValues(nil_chk([self assertSubscribed]))))));
}

- (IoReactivexObserversBaseTestConsumer *)withTagWithJavaLangCharSequence:(id<JavaLangCharSequence>)tag {
  JreStrongAssign(&self->tag_, tag);
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast {
  return IoReactivexObserversBaseTestConsumer_awaitCountWithInt_withJavaLangRunnable_withLong_(self, atLeast, JreLoadEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_10MS), 5000);
}

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast
                                       withJavaLangRunnable:(id<JavaLangRunnable>)waitStrategy {
  return IoReactivexObserversBaseTestConsumer_awaitCountWithInt_withJavaLangRunnable_withLong_(self, atLeast, waitStrategy, 5000);
}

- (IoReactivexObserversBaseTestConsumer *)awaitCountWithInt:(jint)atLeast
                                       withJavaLangRunnable:(id<JavaLangRunnable>)waitStrategy
                                                   withLong:(jlong)timeoutMillis {
  return IoReactivexObserversBaseTestConsumer_awaitCountWithInt_withJavaLangRunnable_withLong_(self, atLeast, waitStrategy, timeoutMillis);
}

- (jboolean)isTimeout {
  return timeout_;
}

- (IoReactivexObserversBaseTestConsumer *)clearTimeout {
  timeout_ = false;
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertTimeout {
  if (!timeout_) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No timeout?!"));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNoTimeout {
  if (timeout_) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Timeout?!"));
  }
  return self;
}

- (void)dealloc {
  RELEASE_(done_);
  RELEASE_(values_);
  RELEASE_(errors_);
  RELEASE_(lastThread_);
  RELEASE_(tag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x14, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, 4, 5, -1, -1 },
    { NULL, "Z", 0x11, 6, 7, 4, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 9, -1, 10, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 11, -1, 12, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 13, -1, 14, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 15, 16, -1, 17, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 18, 16, -1, 17, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 15, 13, -1, 19, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 18, 13, -1, 20, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 21, 22, -1, 23, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 21, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 16, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 27, 28, -1, 29, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 30, 31, -1, 32, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 33, 31, -1, 32, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 34, 35, -1, 36, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 37, 38, -1, 39, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 40, 7, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 41, 3, -1, 42, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 43, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 44, 31, -1, 32, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 45, 46, -1, 47, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 45, 48, -1, 49, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 50, 51, -1, 52, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 53, 7, -1, 54, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 55, 56, -1, 57, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 58, 28, -1, 29, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 58, 59, -1, 60, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 58, 61, -1, 62, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(lastThread);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(errors);
  methods[4].selector = @selector(completions);
  methods[5].selector = @selector(isTerminated);
  methods[6].selector = @selector(valueCount);
  methods[7].selector = @selector(errorCount);
  methods[8].selector = @selector(failWithNSString:);
  methods[9].selector = @selector(await);
  methods[10].selector = @selector(awaitWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[11].selector = @selector(assertComplete);
  methods[12].selector = @selector(assertNotComplete);
  methods[13].selector = @selector(assertNoErrors);
  methods[14].selector = @selector(assertErrorWithJavaLangThrowable:);
  methods[15].selector = @selector(assertErrorWithIOSClass:);
  methods[16].selector = @selector(assertErrorWithIoReactivexFunctionsPredicate:);
  methods[17].selector = @selector(assertValueWithId:);
  methods[18].selector = @selector(assertNeverWithId:);
  methods[19].selector = @selector(assertValueWithIoReactivexFunctionsPredicate:);
  methods[20].selector = @selector(assertNeverWithIoReactivexFunctionsPredicate:);
  methods[21].selector = @selector(assertValueAtWithInt:withId:);
  methods[22].selector = @selector(assertValueAtWithInt:withIoReactivexFunctionsPredicate:);
  methods[23].selector = @selector(valueAndClassWithId:);
  methods[24].selector = @selector(assertValueCountWithInt:);
  methods[25].selector = @selector(assertNoValues);
  methods[26].selector = @selector(assertValuesWithNSObjectArray:);
  methods[27].selector = @selector(assertValuesOnlyWithNSObjectArray:);
  methods[28].selector = @selector(assertValueSetWithJavaUtilCollection:);
  methods[29].selector = @selector(assertValueSequenceWithJavaLangIterable:);
  methods[30].selector = @selector(assertTerminated);
  methods[31].selector = @selector(assertNotTerminated);
  methods[32].selector = @selector(awaitTerminalEvent);
  methods[33].selector = @selector(awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[34].selector = @selector(assertErrorMessageWithNSString:);
  methods[35].selector = @selector(getEvents);
  methods[36].selector = @selector(assertSubscribed);
  methods[37].selector = @selector(assertNotSubscribed);
  methods[38].selector = @selector(assertResultWithNSObjectArray:);
  methods[39].selector = @selector(assertFailureWithIOSClass:withNSObjectArray:);
  methods[40].selector = @selector(assertFailureWithIoReactivexFunctionsPredicate:withNSObjectArray:);
  methods[41].selector = @selector(assertFailureAndMessageWithIOSClass:withNSString:withNSObjectArray:);
  methods[42].selector = @selector(awaitDoneWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[43].selector = @selector(assertEmpty);
  methods[44].selector = @selector(withTagWithJavaLangCharSequence:);
  methods[45].selector = @selector(awaitCountWithInt:);
  methods[46].selector = @selector(awaitCountWithInt:withJavaLangRunnable:);
  methods[47].selector = @selector(awaitCountWithInt:withJavaLangRunnable:withLong:);
  methods[48].selector = @selector(isTimeout);
  methods[49].selector = @selector(clearTimeout);
  methods[50].selector = @selector(assertTimeout);
  methods[51].selector = @selector(assertNoTimeout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "done_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 63, -1 },
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 64, -1 },
    { "completions_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "checkSubscriptionOnce_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "initialFusionMode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "establishedFusionMode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tag_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "timeout_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<TT;>;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "fail", "LNSString;", "LJavaLangInterruptedException;", "()TU;", "await", "JLJavaUtilConcurrentTimeUnit;", "assertError", "LJavaLangThrowable;", "(Ljava/lang/Throwable;)TU;", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)TU;", "LIoReactivexFunctionsPredicate;", "(Lio/reactivex/functions/Predicate<Ljava/lang/Throwable;>;)TU;", "assertValue", "LNSObject;", "(TT;)TU;", "assertNever", "(Lio/reactivex/functions/Predicate<TT;>;)TU;", "(Lio/reactivex/functions/Predicate<-TT;>;)TU;", "assertValueAt", "ILNSObject;", "(ITT;)TU;", "ILIoReactivexFunctionsPredicate;", "(ILio/reactivex/functions/Predicate<TT;>;)TU;", "valueAndClass", "assertValueCount", "I", "(I)TU;", "assertValues", "[LNSObject;", "([TT;)TU;", "assertValuesOnly", "assertValueSet", "LJavaUtilCollection;", "(Ljava/util/Collection<+TT;>;)TU;", "assertValueSequence", "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)TU;", "awaitTerminalEvent", "assertErrorMessage", "(Ljava/lang/String;)TU;", "()Ljava/util/List<Ljava/util/List<Ljava/lang/Object;>;>;", "assertResult", "assertFailure", "LIOSClass;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;[TT;)TU;", "LIoReactivexFunctionsPredicate;[LNSObject;", "(Lio/reactivex/functions/Predicate<Ljava/lang/Throwable;>;[TT;)TU;", "assertFailureAndMessage", "LIOSClass;LNSString;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;Ljava/lang/String;[TT;)TU;", "awaitDone", "(JLjava/util/concurrent/TimeUnit;)TU;", "withTag", "LJavaLangCharSequence;", "(Ljava/lang/CharSequence;)TU;", "awaitCount", "ILJavaLangRunnable;", "(ILjava/lang/Runnable;)TU;", "ILJavaLangRunnable;J", "(ILjava/lang/Runnable;J)TU;", "Ljava/util/List<TT;>;", "Ljava/util/List<Ljava/lang/Throwable;>;", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", "<T:Ljava/lang/Object;U:Lio/reactivex/observers/BaseTestConsumer<TT;TU;>;>Ljava/lang/Object;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer = { "BaseTestConsumer", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x401, 52, 10, -1, 65, -1, 66, -1 };
  return &_IoReactivexObserversBaseTestConsumer;
}

@end

void IoReactivexObserversBaseTestConsumer_init(IoReactivexObserversBaseTestConsumer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->values_, new_IoReactivexInternalUtilVolatileSizeArrayList_init());
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilVolatileSizeArrayList_init());
  JreStrongAssignAndConsume(&self->done_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

id<JavaUtilList> IoReactivexObserversBaseTestConsumer_values(IoReactivexObserversBaseTestConsumer *self) {
  return self->values_;
}

id<JavaUtilList> IoReactivexObserversBaseTestConsumer_errors(IoReactivexObserversBaseTestConsumer *self) {
  return self->errors_;
}

JavaLangAssertionError *IoReactivexObserversBaseTestConsumer_failWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message) {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_initWithInt_(64 + [((NSString *) nil_chk(message)) java_length]);
  [b appendWithNSString:message];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@" ("])) appendWithNSString:@"latch = "])) appendWithLong:[((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount]])) appendWithNSString:@", "])) appendWithNSString:@"values = "])) appendWithInt:[((id<JavaUtilList>) nil_chk(self->values_)) size]])) appendWithNSString:@", "])) appendWithNSString:@"errors = "])) appendWithInt:[((id<JavaUtilList>) nil_chk(self->errors_)) size]])) appendWithNSString:@", "])) appendWithNSString:@"completions = "])) appendWithLong:self->completions_];
  if (self->timeout_) {
    [b appendWithNSString:@", timeout!"];
  }
  if ([self isDisposed]) {
    [b appendWithNSString:@", disposed!"];
  }
  id<JavaLangCharSequence> tag = self->tag_;
  if (tag != nil) {
    [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@", tag = "])) appendWithJavaLangCharSequence:tag];
  }
  [b appendWithChar:')'];
  JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_([b description]);
  if (![self->errors_ isEmpty]) {
    if ([self->errors_ size] == 1) {
      [ae initCauseWithJavaLangThrowable:[self->errors_ getWithInt:0]];
    }
    else {
      IoReactivexExceptionsCompositeException *ce = create_IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(self->errors_);
      [ae initCauseWithJavaLangThrowable:ce];
    }
  }
  return ae;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_await(IoReactivexObserversBaseTestConsumer *self) {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount] == 0) {
    return self;
  }
  [self->done_ await];
  return self;
}

jboolean IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(IoReactivexObserversBaseTestConsumer *self, jlong time, JavaUtilConcurrentTimeUnit *unit) {
  jboolean d = [((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount] == 0 || ([self->done_ awaitWithLong:time withJavaUtilConcurrentTimeUnit:unit]);
  self->timeout_ = !d;
  return d;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertComplete(IoReactivexObserversBaseTestConsumer *self) {
  jlong c = self->completions_;
  if (c == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Not completed"));
  }
  else if (c > 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Multiple completions: ", c)));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNotComplete(IoReactivexObserversBaseTestConsumer *self) {
  jlong c = self->completions_;
  if (c == 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Completed!"));
  }
  else if (c > 1) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Multiple completions: ", c)));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoErrors(IoReactivexObserversBaseTestConsumer *self) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s != 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$@", @"Error(s) present: ", self->errors_)));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(IoReactivexObserversBaseTestConsumer *self, IOSClass *errorClass) {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, IoReactivexInternalFunctionsFunctions_isInstanceOfWithIOSClass_(errorClass));
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, id<IoReactivexFunctionsPredicate> errorPredicate) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No errors"));
  }
  jboolean found = false;
  for (JavaLangThrowable * __strong e in self->errors_) {
    @try {
      if ([((id<IoReactivexFunctionsPredicate>) nil_chk(errorPredicate)) testWithId:e]) {
        found = true;
        break;
      }
    }
    @catch (JavaLangException *ex) {
      @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
    }
  }
  if (found) {
    if (s != 1) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Error present but other errors as well"));
    }
  }
  else {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Error not present"));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, jint index, id<IoReactivexFunctionsPredicate> valuePredicate) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No values"));
  }
  if (index >= [self->values_ size]) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I", @"Invalid index: ", index)));
  }
  jboolean found = false;
  @try {
    if ([((id<IoReactivexFunctionsPredicate>) nil_chk(valuePredicate)) testWithId:[self->values_ getWithInt:index]]) {
      found = true;
    }
  }
  @catch (JavaLangException *ex) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  if (!found) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Value not present"));
  }
  return self;
}

NSString *IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(id o) {
  IoReactivexObserversBaseTestConsumer_initialize();
  if (o != nil) {
    return JreStrcat("@$$C", o, @" (class: ", [[o java_getClass] getSimpleName], ')');
  }
  return @"null";
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(IoReactivexObserversBaseTestConsumer *self, jint count) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s != count) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$I", @"Value counts differ; Expected: ", count, @", Actual: ", s)));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoValues(IoReactivexObserversBaseTestConsumer *self) {
  return IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(self, 0);
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(IoReactivexObserversBaseTestConsumer *self, IOSObjectArray *values) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s != ((IOSObjectArray *) nil_chk(values))->size_) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC$$IC@", @"Value count differs; Expected: ", values->size_, ' ', JavaUtilArrays_toStringWithNSObjectArray_(values), @", Actual: ", s, ' ', self->values_)));
  }
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    id u = IOSObjectArray_Get(values, i);
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(u, v)) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$$", @"Values at position ", i, @" differ; Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(u), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v))));
    }
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s == 0) {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No errors"));
  }
  else if (s == 1) {
    JavaLangThrowable *e = [self->errors_ getWithInt:0];
    NSString *errorMessage = [((JavaLangThrowable *) nil_chk(e)) getMessage];
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(message, errorMessage)) {
      @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$$", @"Error message differs; Expected: ", message, @", Actual: ", errorMessage)));
    }
  }
  else {
    @throw nil_chk(IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Multiple errors"));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_awaitCountWithInt_withJavaLangRunnable_withLong_(IoReactivexObserversBaseTestConsumer *self, jint atLeast, id<JavaLangRunnable> waitStrategy, jlong timeoutMillis) {
  jlong start = JavaLangSystem_currentTimeMillis();
  for (; ; ) {
    if (timeoutMillis > 0LL && JavaLangSystem_currentTimeMillis() - start >= timeoutMillis) {
      self->timeout_ = true;
      break;
    }
    if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount] == 0LL) {
      break;
    }
    if ([((id<JavaUtilList>) nil_chk(self->values_)) size] >= atLeast) {
      break;
    }
    [((id<JavaLangRunnable>) nil_chk(waitStrategy)) run];
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversBaseTestConsumer)

J2OBJC_INITIALIZED_DEFN(IoReactivexObserversBaseTestConsumer_TestWaitStrategy)

IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values_[6];

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)SPIN {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SPIN);
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)YIELD {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, YIELD);
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)SLEEP_1MS {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1MS);
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)SLEEP_10MS {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_10MS);
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)SLEEP_100MS {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_100MS);
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)SLEEP_1000MS {
  return JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1000MS);
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)sleepWithInt:(jint)millis {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(millis);
}

+ (IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values();
}

+ (IoReactivexObserversBaseTestConsumer_TestWaitStrategy *)valueOfWithNSString:(NSString *)name {
  return IoReactivexObserversBaseTestConsumer_TestWaitStrategy_valueOfWithNSString_(name);
}

- (IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum)toNSEnum {
  return (IoReactivexObserversBaseTestConsumer_TestWaitStrategy_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(sleepWithInt:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPIN", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "YIELD", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SLEEP_1MS", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SLEEP_10MS", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "SLEEP_100MS", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "SLEEP_1000MS", "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "sleep", "I", "valueOf", "LNSString;", &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SPIN), &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, YIELD), &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1MS), &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_10MS), &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_100MS), &JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1000MS), "LIoReactivexObserversBaseTestConsumer;", "Ljava/lang/Enum<Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;>;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy = { "TestWaitStrategy", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x4409, 4, 6, 10, -1, -1, 11, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy;
}

+ (void)initialize {
  if (self == [IoReactivexObserversBaseTestConsumer_TestWaitStrategy class]) {
    size_t allocSize = 0;
    size_t objSize_SPIN = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 class]);
    allocSize += objSize_SPIN;
    size_t objSize_YIELD = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 class]);
    allocSize += objSize_YIELD;
    size_t objSize_SLEEP_1MS = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 class]);
    allocSize += objSize_SLEEP_1MS;
    size_t objSize_SLEEP_10MS = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 class]);
    allocSize += objSize_SLEEP_10MS;
    size_t objSize_SLEEP_100MS = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 class]);
    allocSize += objSize_SLEEP_100MS;
    size_t objSize_SLEEP_1000MS = class_getInstanceSize([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 class]);
    allocSize += objSize_SLEEP_1000MS;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SPIN) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 class], (void *)ptr), ptr += objSize_SPIN);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1_initWithNSString_withInt_(e, @"SPIN", 0);
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, YIELD) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 class], (void *)ptr), ptr += objSize_YIELD);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2_initWithNSString_withInt_(e, @"YIELD", 1);
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1MS) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 class], (void *)ptr), ptr += objSize_SLEEP_1MS);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3_initWithNSString_withInt_(e, @"SLEEP_1MS", 2);
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_10MS) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 class], (void *)ptr), ptr += objSize_SLEEP_10MS);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4_initWithNSString_withInt_(e, @"SLEEP_10MS", 3);
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_100MS) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 class], (void *)ptr), ptr += objSize_SLEEP_100MS);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5_initWithNSString_withInt_(e, @"SLEEP_100MS", 4);
    (JreEnum(IoReactivexObserversBaseTestConsumer_TestWaitStrategy, SLEEP_1000MS) = e = objc_constructInstance([IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 class], (void *)ptr), ptr += objSize_SLEEP_1000MS);
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6_initWithNSString_withInt_(e, @"SLEEP_1000MS", 5);
    J2OBJC_SET_INITIALIZED(IoReactivexObserversBaseTestConsumer_TestWaitStrategy)
  }
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(jint millis) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initialize();
  @try {
    JavaLangThread_sleepWithLong_(millis);
  }
  @catch (JavaLangInterruptedException *ex) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(ex);
  }
}

IOSObjectArray *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values() {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initialize();
  return [IOSObjectArray arrayWithObjects:IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values_ count:6 type:IoReactivexObserversBaseTestConsumer_TestWaitStrategy_class_()];
}

IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_valueOfWithNSString_(NSString *name) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initialize();
  for (int i = 0; i < 6; i++) {
    IoReactivexObserversBaseTestConsumer_TestWaitStrategy *e = IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

IoReactivexObserversBaseTestConsumer_TestWaitStrategy *IoReactivexObserversBaseTestConsumer_TestWaitStrategy_fromOrdinal(NSUInteger ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return IoReactivexObserversBaseTestConsumer_TestWaitStrategy_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversBaseTestConsumer_TestWaitStrategy)

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1

- (void)run {
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_1 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2

- (void)run {
  JavaLangThread_yield();
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_2 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3

- (void)run {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(1);
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_3 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4

- (void)run {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(10);
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_4 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5

- (void)run {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(100);
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_5 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}

@implementation IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6

- (void)run {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_sleepWithInt_(1000);
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversBaseTestConsumer_TestWaitStrategy;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6;
}

@end

void IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6_initWithNSString_withInt_(IoReactivexObserversBaseTestConsumer_TestWaitStrategy_6 *self, NSString *__name, jint __ordinal) {
  IoReactivexObserversBaseTestConsumer_TestWaitStrategy_initWithNSString_withInt_(self, __name, __ordinal);
}
