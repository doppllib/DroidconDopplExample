//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalSchedulersRxThreadFactory.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalSchedulersRxThreadFactory_get_serialVersionUID();
#define IoReactivexInternalSchedulersRxThreadFactory_serialVersionUID -7789753024099756196LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSchedulersRxThreadFactory, serialVersionUID, jlong)

@implementation IoReactivexInternalSchedulersRxThreadFactory

- (instancetype)initWithNSString:(NSString *)prefix {
  IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(self, prefix);
  return self;
}

- (instancetype)initWithNSString:(NSString *)prefix
                         withInt:(jint)priority {
  IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(self, prefix, priority);
  return self;
}

- (instancetype)initWithNSString:(NSString *)prefix
                         withInt:(jint)priority
                     withBoolean:(jboolean)nonBlocking {
  IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(self, prefix, priority, nonBlocking);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangStringBuilder *nameBuilder = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(prefix_) appendWithChar:'-'])) appendWithLong:[self incrementAndGet]];
  NSString *name = [((JavaLangStringBuilder *) nil_chk(nameBuilder)) description];
  JavaLangThread *t = nonBlocking_ ? create_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(r, name) : create_JavaLangThread_initWithJavaLangRunnable_withNSString_(r, name);
  [t setPriorityWithInt:priority_];
  [t setDaemonWithBoolean:true];
  return t;
}

- (NSString *)description {
  return JreStrcat("$$C", @"RxThreadFactory[", prefix_, ']');
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(prefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(initWithNSString:withInt:withBoolean:);
  methods[3].selector = @selector(newThreadWithJavaLangRunnable:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalSchedulersRxThreadFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nonBlocking_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;I", "LNSString;IZ", "newThread", "LJavaLangRunnable;", "toString", "LIoReactivexInternalSchedulersRxThreadFactory_RxCustomThread;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersRxThreadFactory = { "RxThreadFactory", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, 6, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersRxThreadFactory;
}

@end

void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix) {
  IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(self, prefix, JavaLangThread_NORM_PRIORITY, false);
}

IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(NSString *prefix) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_, prefix)
}

IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(NSString *prefix) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_, prefix)
}

void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix, jint priority) {
  IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(self, prefix, priority, false);
}

IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(NSString *prefix, jint priority) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_withInt_, prefix, priority)
}

IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(NSString *prefix, jint priority) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_withInt_, prefix, priority)
}

void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix, jint priority, jboolean nonBlocking) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->prefix_, prefix);
  self->priority_ = priority;
  self->nonBlocking_ = nonBlocking;
}

IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(NSString *prefix, jint priority, jboolean nonBlocking) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_withInt_withBoolean_, prefix, priority, nonBlocking)
}

IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(NSString *prefix, jint priority, jboolean nonBlocking) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersRxThreadFactory, initWithNSString_withInt_withBoolean_, prefix, priority, nonBlocking)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersRxThreadFactory)

@implementation IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run
                            withNSString:(NSString *)name {
  IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(self, run, name);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangRunnable;LNSString;", "LIoReactivexInternalSchedulersRxThreadFactory;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread = { "RxCustomThread", "io.reactivex.internal.schedulers", ptrTable, methods, NULL, 7, 0x18, 1, 0, 1, -1, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread;
}

@end

void IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *self, id<JavaLangRunnable> run, NSString *name) {
  JavaLangThread_initWithJavaLangRunnable_withNSString_(self, run, name);
}

IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *new_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> run, NSString *name) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread, initWithJavaLangRunnable_withNSString_, run, name)
}

IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *create_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> run, NSString *name) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread, initWithJavaLangRunnable_withNSString_, run, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread)
