//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilOpenHashSet.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation IoReactivexDisposablesCompositeDisposable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexDisposablesCompositeDisposable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIoReactivexDisposablesDisposableArray:(IOSObjectArray * __nonnull)resources {
  IoReactivexDisposablesCompositeDisposable_initWithIoReactivexDisposablesDisposableArray_(self, resources);
  return self;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable> __nonnull)resources {
  IoReactivexDisposablesCompositeDisposable_initWithJavaLangIterable_(self, resources);
  return self;
}

- (void)dispose {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return;
  }
  IoReactivexInternalUtilOpenHashSet *set;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      return;
    }
    JreAssignVolatileBoolean(&disposed_, true);
    set = JreRetainedLocalValue(resources_);
    JreStrongAssign(&resources_, nil);
  }
  [self disposeWithIoReactivexInternalUtilOpenHashSet:set];
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (jboolean)addWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)d {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(d, @"d is null");
  if (!JreLoadVolatileBoolean(&disposed_)) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&disposed_)) {
        IoReactivexInternalUtilOpenHashSet *set = resources_;
        if (set == nil) {
          set = create_IoReactivexInternalUtilOpenHashSet_init();
          JreStrongAssign(&resources_, set);
        }
        [set addWithId:d];
        return true;
      }
    }
  }
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
  return false;
}

- (jboolean)addAllWithIoReactivexDisposablesDisposableArray:(IOSObjectArray * __nonnull)ds {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(ds, @"ds is null");
  if (!JreLoadVolatileBoolean(&disposed_)) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&disposed_)) {
        IoReactivexInternalUtilOpenHashSet *set = resources_;
        if (set == nil) {
          set = create_IoReactivexInternalUtilOpenHashSet_initWithInt_(((IOSObjectArray *) nil_chk(ds))->size_ + 1);
          JreStrongAssign(&resources_, set);
        }
        {
          IOSObjectArray *a__ = ds;
          id<IoReactivexDisposablesDisposable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<IoReactivexDisposablesDisposable> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<IoReactivexDisposablesDisposable> d = *b__++;
            IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(d, @"d is null");
            [set addWithId:d];
          }
        }
        return true;
      }
    }
  }
  {
    IOSObjectArray *a__ = ds;
    id<IoReactivexDisposablesDisposable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<IoReactivexDisposablesDisposable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<IoReactivexDisposablesDisposable> d = *b__++;
      [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
    }
  }
  return false;
}

- (jboolean)removeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)d {
  if ([self delete__WithIoReactivexDisposablesDisposable:d]) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
    return true;
  }
  return false;
}

- (jboolean)delete__WithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)d {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(d, @"Disposable item is null");
  if (JreLoadVolatileBoolean(&disposed_)) {
    return false;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      return false;
    }
    IoReactivexInternalUtilOpenHashSet *set = resources_;
    if (set == nil || ![set removeWithId:d]) {
      return false;
    }
  }
  return true;
}

- (void)clear {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return;
  }
  IoReactivexInternalUtilOpenHashSet *set;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      return;
    }
    set = JreRetainedLocalValue(resources_);
    JreStrongAssign(&resources_, nil);
  }
  [self disposeWithIoReactivexInternalUtilOpenHashSet:set];
}

- (jint)size {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return 0;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      return 0;
    }
    IoReactivexInternalUtilOpenHashSet *set = resources_;
    return set != nil ? [set size] : 0;
  }
}

- (void)disposeWithIoReactivexInternalUtilOpenHashSet:(IoReactivexInternalUtilOpenHashSet *)set {
  if (set == nil) {
    return;
  }
  id<JavaUtilList> errors = nil;
  IOSObjectArray *array = [set keys];
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if ([IoReactivexDisposablesDisposable_class_() isInstance:o]) {
        @try {
          [((id<IoReactivexDisposablesDisposable>) nil_chk(((id<IoReactivexDisposablesDisposable>) cast_check(o, IoReactivexDisposablesDisposable_class_())))) dispose];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          if (errors == nil) {
            errors = create_JavaUtilArrayList_init();
          }
          [errors addWithId:ex];
        }
      }
    }
  }
  if (errors != nil) {
    if ([errors size] == 1) {
      @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_([errors getWithInt:0]));
    }
    @throw create_IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(errors);
  }
}

- (void)java_finalize {
  [self dispose];
  [super java_finalize];
}

- (void)dealloc {
  JreCheckFinalize(self, [IoReactivexDisposablesCompositeDisposable class]);
  RELEASE_(resources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x81, 5, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x4, 11, -1, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIoReactivexDisposablesDisposableArray:);
  methods[2].selector = @selector(initWithJavaLangIterable:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  methods[5].selector = @selector(addWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(addAllWithIoReactivexDisposablesDisposableArray:);
  methods[7].selector = @selector(removeWithIoReactivexDisposablesDisposable:);
  methods[8].selector = @selector(delete__WithIoReactivexDisposablesDisposable:);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(disposeWithIoReactivexInternalUtilOpenHashSet:);
  methods[12].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resources_", "LIoReactivexInternalUtilOpenHashSet;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexDisposablesDisposable;", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lio/reactivex/disposables/Disposable;>;)V", "add", "LIoReactivexDisposablesDisposable;", "addAll", "remove", "delete", "dispose", "LIoReactivexInternalUtilOpenHashSet;", "(Lio/reactivex/internal/util/OpenHashSet<Lio/reactivex/disposables/Disposable;>;)V", "finalize", "LJavaLangThrowable;", "Lio/reactivex/internal/util/OpenHashSet<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexDisposablesCompositeDisposable = { "CompositeDisposable", "io.reactivex.disposables", ptrTable, methods, fields, 7, 0x11, 13, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexDisposablesCompositeDisposable;
}

@end

void IoReactivexDisposablesCompositeDisposable_init(IoReactivexDisposablesCompositeDisposable *self) {
  NSObject_init(self);
}

IoReactivexDisposablesCompositeDisposable *new_IoReactivexDisposablesCompositeDisposable_init() {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesCompositeDisposable, init)
}

IoReactivexDisposablesCompositeDisposable *create_IoReactivexDisposablesCompositeDisposable_init() {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesCompositeDisposable, init)
}

void IoReactivexDisposablesCompositeDisposable_initWithIoReactivexDisposablesDisposableArray_(IoReactivexDisposablesCompositeDisposable *self, IOSObjectArray *resources) {
  NSObject_init(self);
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(resources, @"resources is null");
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexInternalUtilOpenHashSet_initWithInt_(((IOSObjectArray *) nil_chk(resources))->size_ + 1));
  {
    IOSObjectArray *a__ = resources;
    id<IoReactivexDisposablesDisposable> const *b__ = a__->buffer_;
    id<IoReactivexDisposablesDisposable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<IoReactivexDisposablesDisposable> d = *b__++;
      IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(d, @"Disposable item is null");
      [((IoReactivexInternalUtilOpenHashSet *) nil_chk(self->resources_)) addWithId:d];
    }
  }
}

IoReactivexDisposablesCompositeDisposable *new_IoReactivexDisposablesCompositeDisposable_initWithIoReactivexDisposablesDisposableArray_(IOSObjectArray *resources) {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesCompositeDisposable, initWithIoReactivexDisposablesDisposableArray_, resources)
}

IoReactivexDisposablesCompositeDisposable *create_IoReactivexDisposablesCompositeDisposable_initWithIoReactivexDisposablesDisposableArray_(IOSObjectArray *resources) {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesCompositeDisposable, initWithIoReactivexDisposablesDisposableArray_, resources)
}

void IoReactivexDisposablesCompositeDisposable_initWithJavaLangIterable_(IoReactivexDisposablesCompositeDisposable *self, id<JavaLangIterable> resources) {
  NSObject_init(self);
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(resources, @"resources is null");
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexInternalUtilOpenHashSet_init());
  for (id<IoReactivexDisposablesDisposable> __strong d in nil_chk(resources)) {
    IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(d, @"Disposable item is null");
    [((IoReactivexInternalUtilOpenHashSet *) nil_chk(self->resources_)) addWithId:d];
  }
}

IoReactivexDisposablesCompositeDisposable *new_IoReactivexDisposablesCompositeDisposable_initWithJavaLangIterable_(id<JavaLangIterable> resources) {
  J2OBJC_NEW_IMPL(IoReactivexDisposablesCompositeDisposable, initWithJavaLangIterable_, resources)
}

IoReactivexDisposablesCompositeDisposable *create_IoReactivexDisposablesCompositeDisposable_initWithJavaLangIterable_(id<JavaLangIterable> resources) {
  J2OBJC_CREATE_IMPL(IoReactivexDisposablesCompositeDisposable, initWithJavaLangIterable_, resources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexDisposablesCompositeDisposable)
