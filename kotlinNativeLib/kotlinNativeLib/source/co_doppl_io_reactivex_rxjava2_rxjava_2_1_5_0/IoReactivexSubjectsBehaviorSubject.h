//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject")
#ifdef RESTRICT_IoReactivexSubjectsBehaviorSubject
#define INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsBehaviorSubject

#if !defined (IoReactivexSubjectsBehaviorSubject_) && (INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject || defined(INCLUDE_IoReactivexSubjectsBehaviorSubject))
#define IoReactivexSubjectsBehaviorSubject_

#define RESTRICT_IoReactivexSubjectsSubject 1
#define INCLUDE_IoReactivexSubjectsSubject 1
#include "IoReactivexSubjectsSubject.h"

@class IOSObjectArray;
@class IoReactivexSubjectsBehaviorSubject_BehaviorDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObserver;
@protocol JavaUtilConcurrentLocksLock;
@protocol JavaUtilConcurrentLocksReadWriteLock;

@interface IoReactivexSubjectsBehaviorSubject : IoReactivexSubjectsSubject {
 @public
  JavaUtilConcurrentAtomicAtomicReference *value_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  id<JavaUtilConcurrentLocksReadWriteLock> lock_;
  id<JavaUtilConcurrentLocksLock> readLock_;
  id<JavaUtilConcurrentLocksLock> writeLock_;
  JavaUtilConcurrentAtomicAtomicReference *terminalEvent_;
  jlong index_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexSubjectsBehaviorSubject *)create;

+ (IoReactivexSubjectsBehaviorSubject *)createDefaultWithId:(id)defaultValue;

- (JavaLangThrowable *)getThrowable;

- (id)getValue;

- (IOSObjectArray *)getValues;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)hasComplete;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithId:(id)defaultValue;

- (jboolean)addWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *)rs;

- (void)removeWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *)rs;

- (void)setCurrentWithId:(id)o;

- (jint)subscriberCount;

- (IOSObjectArray *)terminateWithId:(id)terminalValue;

@end

J2OBJC_STATIC_INIT(IoReactivexSubjectsBehaviorSubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, value_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, lock_, id<JavaUtilConcurrentLocksReadWriteLock>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, readLock_, id<JavaUtilConcurrentLocksLock>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, writeLock_, id<JavaUtilConcurrentLocksLock>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject, terminalEvent_, JavaUtilConcurrentAtomicAtomicReference *)

inline IOSObjectArray *IoReactivexSubjectsBehaviorSubject_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsBehaviorSubject_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsBehaviorSubject, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexSubjectsBehaviorSubject_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsBehaviorSubject_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsBehaviorSubject, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *IoReactivexSubjectsBehaviorSubject_create();

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *IoReactivexSubjectsBehaviorSubject_createDefaultWithId_(id defaultValue);

FOUNDATION_EXPORT void IoReactivexSubjectsBehaviorSubject_init(IoReactivexSubjectsBehaviorSubject *self);

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *new_IoReactivexSubjectsBehaviorSubject_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *create_IoReactivexSubjectsBehaviorSubject_init();

FOUNDATION_EXPORT void IoReactivexSubjectsBehaviorSubject_initWithId_(IoReactivexSubjectsBehaviorSubject *self, id defaultValue);

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *new_IoReactivexSubjectsBehaviorSubject_initWithId_(id defaultValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject *create_IoReactivexSubjectsBehaviorSubject_initWithId_(id defaultValue);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsBehaviorSubject)

#endif

#if !defined (IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject || defined(INCLUDE_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable))
#define IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_IoReactivexInternalUtilAppendOnlyLinkedArrayList 1
#define INCLUDE_IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate 1
#include "IoReactivexInternalUtilAppendOnlyLinkedArrayList.h"

@class IoReactivexInternalUtilAppendOnlyLinkedArrayList;
@class IoReactivexSubjectsBehaviorSubject;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsBehaviorSubject_BehaviorDisposable : NSObject < IoReactivexDisposablesDisposable, IoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexSubjectsBehaviorSubject *state_;
  jboolean next_;
  jboolean emitting_;
  IoReactivexInternalUtilAppendOnlyLinkedArrayList *queue_;
  jboolean fastPath_;
  volatile_jboolean cancelled_;
  jlong index_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (jboolean)testWithId:(id)o;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
     withIoReactivexSubjectsBehaviorSubject:(IoReactivexSubjectsBehaviorSubject *)state;

- (void)emitFirst;

- (void)emitLoop;

- (void)emitNextWithId:(id)value
              withLong:(jlong)stateIndex;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable, state_, IoReactivexSubjectsBehaviorSubject *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable, queue_, IoReactivexInternalUtilAppendOnlyLinkedArrayList *)

FOUNDATION_EXPORT void IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state);

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *new_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *create_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsBehaviorSubject")
