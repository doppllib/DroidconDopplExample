//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"
#include "IoReactivexInternalOperatorsMaybeMaybeSubscribeOn.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_serialVersionUID 8571289934935992137LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeSubscribeOn

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                      withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *parent = create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(observer);
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(parent->task_)) replaceWithIoReactivexDisposablesDisposable:[((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(parent, source_)]];
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LIoReactivexScheduler;", "(Lio/reactivex/MaybeSource<TT;>;Lio/reactivex/Scheduler;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "LIoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask;LIoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSubscribeOn = { "MaybeSubscribeOn", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *self, id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream_initWithIoReactivexMaybeSource_(self, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn, initWithIoReactivexMaybeSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn, initWithIoReactivexMaybeSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn)

@implementation IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer
                      withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source {
  IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(self, observer, source);
  return self;
}

- (void)run {
  [((id<IoReactivexMaybeSource>) nil_chk(source_)) subscribeWithIoReactivexMaybeObserver:observer_];
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withIoReactivexMaybeSource:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "source_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LIoReactivexMaybeSource;", "(Lio/reactivex/MaybeObserver<-TT;>;Lio/reactivex/MaybeSource<TT;>;)V", "Lio/reactivex/MaybeObserver<-TT;>;", "Lio/reactivex/MaybeSource<TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeSubscribeOn;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask = { "SubscribeTask", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *self, id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask, initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_, observer, source)
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask, initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_, observer, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask)

@implementation IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual {
  IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(self, actual);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(task_)) dispose];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(task_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "task_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeSubscribeOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver = { "SubscribeOnMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *self, id<IoReactivexMaybeObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->task_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver)
