//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsReplaySubject")
#ifdef RESTRICT_IoReactivexSubjectsReplaySubject
#define INCLUDE_ALL_IoReactivexSubjectsReplaySubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsReplaySubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsReplaySubject
#ifdef INCLUDE_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer
#define INCLUDE_IoReactivexSubjectsReplaySubject_ReplayBuffer 1
#endif
#ifdef INCLUDE_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer
#define INCLUDE_IoReactivexSubjectsReplaySubject_ReplayBuffer 1
#endif
#ifdef INCLUDE_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer
#define INCLUDE_IoReactivexSubjectsReplaySubject_ReplayBuffer 1
#endif

#if !defined (IoReactivexSubjectsReplaySubject_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject))
#define IoReactivexSubjectsReplaySubject_

#define RESTRICT_IoReactivexSubjectsSubject 1
#define INCLUDE_IoReactivexSubjectsSubject 1
#include "IoReactivexSubjectsSubject.h"

@class IOSObjectArray;
@class IoReactivexScheduler;
@class IoReactivexSubjectsReplaySubject_ReplayDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObserver;
@protocol IoReactivexSubjectsReplaySubject_ReplayBuffer;

@interface IoReactivexSubjectsReplaySubject : IoReactivexSubjectsSubject {
 @public
  id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  jboolean done_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexSubjectsReplaySubject *)create;

+ (IoReactivexSubjectsReplaySubject *)createWithInt:(jint)capacityHint;

+ (IoReactivexSubjectsReplaySubject *)createWithSizeWithInt:(jint)maxSize;

+ (IoReactivexSubjectsReplaySubject *)createWithTimeWithLong:(jlong)maxAge
                              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexSubjectsReplaySubject *)createWithTimeAndSizeWithLong:(jlong)maxAge
                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                            withInt:(jint)maxSize;

- (JavaLangThrowable *)getThrowable;

- (id)getValue;

- (IOSObjectArray *)getValues;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)hasComplete;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSubjectsReplaySubject_ReplayBuffer:(id<IoReactivexSubjectsReplaySubject_ReplayBuffer>)buffer;

- (jboolean)addWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

+ (IoReactivexSubjectsReplaySubject *)createUnbounded;

- (jint)observerCount;

- (void)removeWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

- (jint)size;

- (IOSObjectArray *)terminateWithId:(id)terminalValue;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexSubjectsReplaySubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject, buffer_, id<IoReactivexSubjectsReplaySubject_ReplayBuffer>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject, observers_, JavaUtilConcurrentAtomicAtomicReference *)

inline IOSObjectArray *IoReactivexSubjectsReplaySubject_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsReplaySubject_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsReplaySubject, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexSubjectsReplaySubject_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsReplaySubject_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsReplaySubject, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_create();

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithInt_(jint capacityHint);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithSizeWithInt_(jint maxSize);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createUnbounded();

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *IoReactivexSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint maxSize);

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(IoReactivexSubjectsReplaySubject *self, id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *new_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject *create_IoReactivexSubjectsReplaySubject_initWithIoReactivexSubjectsReplaySubject_ReplayBuffer_(id<IoReactivexSubjectsReplaySubject_ReplayBuffer> buffer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_ReplayBuffer_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_ReplayBuffer))
#define IoReactivexSubjectsReplaySubject_ReplayBuffer_

@class IOSObjectArray;
@class IoReactivexSubjectsReplaySubject_ReplayDisposable;

@protocol IoReactivexSubjectsReplaySubject_ReplayBuffer < JavaObject >

- (void)addWithId:(id)value;

- (void)addFinalWithId:(id)notificationLite;

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

- (jint)size;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (id)get;

- (jboolean)compareAndSetWithId:(id)expected
                         withId:(id)next;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_ReplayBuffer)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_ReplayBuffer)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_ReplayDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_ReplayDisposable))
#define IoReactivexSubjectsReplaySubject_ReplayDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexSubjectsReplaySubject;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsReplaySubject_ReplayDisposable : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexSubjectsReplaySubject *state_;
  id index_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
       withIoReactivexSubjectsReplaySubject:(IoReactivexSubjectsReplaySubject *)state;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_ReplayDisposable)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_ReplayDisposable, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_ReplayDisposable, state_, IoReactivexSubjectsReplaySubject *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_ReplayDisposable, index_, id)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(IoReactivexSubjectsReplaySubject_ReplayDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_ReplayDisposable *new_IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_ReplayDisposable *create_IoReactivexSubjectsReplaySubject_ReplayDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsReplaySubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsReplaySubject *state);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_ReplayDisposable)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer))
#define IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@class IOSObjectArray;
@class IoReactivexSubjectsReplaySubject_ReplayDisposable;
@protocol JavaUtilList;

@interface IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSubjectsReplaySubject_ReplayBuffer > {
 @public
  id<JavaUtilList> buffer_;
  volatile_jboolean done_;
  volatile_jint size_;
}

#pragma mark Public

- (void)addWithId:(id)value;

- (void)addFinalWithId:(id)notificationLite;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)capacityHint;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer, buffer_, id<JavaUtilList>)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *self, jint capacityHint);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *new_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer *create_IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer_initWithInt_(jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_UnboundedReplayBuffer)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_Node_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_Node))
#define IoReactivexSubjectsReplaySubject_Node_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexSubjectsReplaySubject_Node : JavaUtilConcurrentAtomicAtomicReference {
 @public
  id value_Node_;
}

#pragma mark Public

- (IoReactivexSubjectsReplaySubject_Node *)accumulateAndGetWithId:(IoReactivexSubjectsReplaySubject_Node *)arg0
                               withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexSubjectsReplaySubject_Node *)get;

- (IoReactivexSubjectsReplaySubject_Node *)getAndAccumulateWithId:(IoReactivexSubjectsReplaySubject_Node *)arg0
                               withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexSubjectsReplaySubject_Node *)getAndSetWithId:(IoReactivexSubjectsReplaySubject_Node *)arg0;

- (IoReactivexSubjectsReplaySubject_Node *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (IoReactivexSubjectsReplaySubject_Node *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_Node)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_Node, value_Node_, id)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_Node_initWithId_(IoReactivexSubjectsReplaySubject_Node *self, id value);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_Node *new_IoReactivexSubjectsReplaySubject_Node_initWithId_(id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_Node *create_IoReactivexSubjectsReplaySubject_Node_initWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_Node)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_TimedNode_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_TimedNode))
#define IoReactivexSubjectsReplaySubject_TimedNode_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexSubjectsReplaySubject_TimedNode : JavaUtilConcurrentAtomicAtomicReference {
 @public
  id value_TimedNode_;
  jlong time_;
}

#pragma mark Public

- (IoReactivexSubjectsReplaySubject_TimedNode *)accumulateAndGetWithId:(IoReactivexSubjectsReplaySubject_TimedNode *)arg0
                                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexSubjectsReplaySubject_TimedNode *)get;

- (IoReactivexSubjectsReplaySubject_TimedNode *)getAndAccumulateWithId:(IoReactivexSubjectsReplaySubject_TimedNode *)arg0
                                    withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexSubjectsReplaySubject_TimedNode *)getAndSetWithId:(IoReactivexSubjectsReplaySubject_TimedNode *)arg0;

- (IoReactivexSubjectsReplaySubject_TimedNode *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (IoReactivexSubjectsReplaySubject_TimedNode *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value
                  withLong:(jlong)time;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_TimedNode)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_TimedNode, value_TimedNode_, id)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(IoReactivexSubjectsReplaySubject_TimedNode *self, id value, jlong time);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_TimedNode *new_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(id value, jlong time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_TimedNode *create_IoReactivexSubjectsReplaySubject_TimedNode_initWithId_withLong_(id value, jlong time);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_TimedNode)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer))
#define IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@class IOSObjectArray;
@class IoReactivexSubjectsReplaySubject_Node;
@class IoReactivexSubjectsReplaySubject_ReplayDisposable;

@interface IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSubjectsReplaySubject_ReplayBuffer > {
 @public
  jint maxSize_;
  jint size_;
  volatile_id head_;
  IoReactivexSubjectsReplaySubject_Node *tail_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)addWithId:(id)value;

- (void)addFinalWithId:(id)notificationLite;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)maxSize;

- (void)trim;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer)

J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer, head_, IoReactivexSubjectsReplaySubject_Node *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer, tail_, IoReactivexSubjectsReplaySubject_Node *)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *self, jint maxSize);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *new_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer *create_IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer_initWithInt_(jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_SizeBoundReplayBuffer)

#endif

#if !defined (IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_) && (INCLUDE_ALL_IoReactivexSubjectsReplaySubject || defined(INCLUDE_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer))
#define IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@class IOSObjectArray;
@class IoReactivexScheduler;
@class IoReactivexSubjectsReplaySubject_ReplayDisposable;
@class IoReactivexSubjectsReplaySubject_TimedNode;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSubjectsReplaySubject_ReplayBuffer > {
 @public
  jint maxSize_;
  jlong maxAge_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint size_;
  volatile_id head_;
  IoReactivexSubjectsReplaySubject_TimedNode *tail_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)addWithId:(id)value;

- (void)addFinalWithId:(id)notificationLite;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (void)replayWithIoReactivexSubjectsReplaySubject_ReplayDisposable:(IoReactivexSubjectsReplaySubject_ReplayDisposable *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSubjectsReplaySubject_TimedNode *)getHead;

- (jint)sizeWithIoReactivexSubjectsReplaySubject_TimedNode:(IoReactivexSubjectsReplaySubject_TimedNode *)h;

- (void)trim;

- (void)trimFinal;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, scheduler_, IoReactivexScheduler *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, head_, IoReactivexSubjectsReplaySubject_TimedNode *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer, tail_, IoReactivexSubjectsReplaySubject_TimedNode *)

FOUNDATION_EXPORT void IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *self, jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *new_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer *create_IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsReplaySubject_SizeAndTimeBoundReplayBuffer)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsReplaySubject")
