//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservablePublishSelector.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexSubjectsPublishSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_serialVersionUID 854110278590336484LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservablePublishSelector

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector {
  IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(self, source, selector);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexSubjectsPublishSubject *subject = IoReactivexSubjectsPublishSubject_create();
  id<IoReactivexObservableSource> target;
  @try {
    target = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(selector_)) applyWithId:subject], @"The selector returned a null ObservableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, observer);
    return;
  }
  IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *o = create_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(observer);
  [((id<IoReactivexObservableSource>) nil_chk(target)) subscribeWithIoReactivexObserver:o];
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(subject, o)];
}

- (void)dealloc {
  RELEASE_(selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "selector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-Lio/reactivex/Observable<TT;>;+Lio/reactivex/ObservableSource<TR;>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "Lio/reactivex/functions/Function<-Lio/reactivex/Observable<TT;>;+Lio/reactivex/ObservableSource<TR;>;>;", "LIoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver;LIoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublishSelector = { "ObservablePublishSelector", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublishSelector;
}

@end

void IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservablePublishSelector *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->selector_, selector);
}

IoReactivexInternalOperatorsObservableObservablePublishSelector *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, selector)
}

IoReactivexInternalOperatorsObservableObservablePublishSelector *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> selector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_, source, selector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublishSelector)

@implementation IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver

- (instancetype)initWithIoReactivexSubjectsPublishSubject:(IoReactivexSubjectsPublishSubject *)subject
              withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)target {
  IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(self, subject, target);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(target_, d);
}

- (void)onNextWithId:(id)value {
  [((IoReactivexSubjectsPublishSubject *) nil_chk(subject_)) onNextWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexSubjectsPublishSubject *) nil_chk(subject_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((IoReactivexSubjectsPublishSubject *) nil_chk(subject_)) onComplete];
}

- (void)dealloc {
  RELEASE_(subject_);
  RELEASE_(target_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSubjectsPublishSubject:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subject_", "LIoReactivexSubjectsPublishSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "target_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSubjectsPublishSubject;LJavaUtilConcurrentAtomicAtomicReference;", "(Lio/reactivex/subjects/PublishSubject<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/subjects/PublishSubject<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservablePublishSelector;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver = { "SourceObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *self, IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target) {
  NSObject_init(self);
  JreStrongAssign(&self->subject_, subject);
  JreStrongAssign(&self->target_, target);
}

IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver, initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_, subject, target)
}

IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver_initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexSubjectsPublishSubject *subject, JavaUtilConcurrentAtomicAtomicReference *target) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver, initWithIoReactivexSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicReference_, subject, target)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublishSelector_SourceObserver)

@implementation IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)value {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TR;>;", "LIoReactivexInternalOperatorsObservableObservablePublishSelector;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TR;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver = { "TargetObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *self, id<IoReactivexObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *new_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver, initWithIoReactivexObserver_, actual)
}

IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver *create_IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver, initWithIoReactivexObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservablePublishSelector_TargetObserver)
