//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableEmpty")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableEmpty
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableEmpty 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableEmpty 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableEmpty

#if !defined (IoReactivexInternalOperatorsObservableObservableEmpty_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableEmpty || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableEmpty))
#define IoReactivexInternalOperatorsObservableObservableEmpty_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

#define RESTRICT_IoReactivexInternalFuseableScalarCallable 1
#define INCLUDE_IoReactivexInternalFuseableScalarCallable 1
#include "IoReactivexInternalFuseableScalarCallable.h"

@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableEmpty : IoReactivexObservable < IoReactivexInternalFuseableScalarCallable >

+ (IoReactivexObservable *)INSTANCE;

#pragma mark Public

- (id)call;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)o;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableEmpty)

inline IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableEmpty_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableEmpty_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableEmpty, INSTANCE, IoReactivexObservable *)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableEmpty)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableEmpty")
