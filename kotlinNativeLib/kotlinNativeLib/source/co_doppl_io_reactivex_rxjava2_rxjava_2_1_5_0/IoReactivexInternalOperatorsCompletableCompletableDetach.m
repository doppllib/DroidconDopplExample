//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableDetach.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableDetach

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source {
  IoReactivexInternalOperatorsCompletableCompletableDetach_initWithIoReactivexCompletableSource_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver_initWithIoReactivexCompletableObserver_(observer)];
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableDetach = { "CompletableDetach", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableDetach;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableDetach_initWithIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableDetach *self, id<IoReactivexCompletableSource> source) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsCompletableCompletableDetach *new_IoReactivexInternalOperatorsCompletableCompletableDetach_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableDetach, initWithIoReactivexCompletableSource_, source)
}

IoReactivexInternalOperatorsCompletableCompletableDetach *create_IoReactivexInternalOperatorsCompletableCompletableDetach_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableDetach, initWithIoReactivexCompletableSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableDetach)

@implementation IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual {
  IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver_initWithIoReactivexCompletableObserver_(self, actual);
  return self;
}

- (void)dispose {
  JreStrongAssign(&actual_, nil);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) isDisposed];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  id<IoReactivexCompletableObserver> a = actual_;
  if (a != nil) {
    JreStrongAssign(&actual_, nil);
    [a onErrorWithJavaLangThrowable:e];
  }
}

- (void)onComplete {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  id<IoReactivexCompletableObserver> a = actual_;
  if (a != nil) {
    JreStrongAssign(&actual_, nil);
    [a onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableDetach;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver = { "DetachCompletableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 6, 2, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver_initWithIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver *self, id<IoReactivexCompletableObserver> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver *new_IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver, initWithIoReactivexCompletableObserver_, actual)
}

IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver *create_IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver, initWithIoReactivexCompletableObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableDetach_DetachCompletableObserver)
