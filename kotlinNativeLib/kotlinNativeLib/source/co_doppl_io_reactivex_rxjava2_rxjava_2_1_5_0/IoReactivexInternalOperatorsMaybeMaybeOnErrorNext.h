//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext

#if !defined (IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext))
#define IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_

#define RESTRICT_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeOnErrorNext : IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> resumeFunction_;
  jboolean allowFatal_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunction
                                   withBoolean:(jboolean)allowFatal;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext, resumeFunction_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext *new_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext *create_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexFunctionsFunction> resumeFunction_;
  jboolean allowFatal_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunction
                                     withBoolean:(jboolean)allowFatal;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver, resumeFunction_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> resumeFunction, jboolean allowFatal);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver : NSObject < IoReactivexMaybeObserver > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *d_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
     withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)d;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver, d_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver *self, id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *d);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *d);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeOnErrorNext_OnErrorNextMaybeObserver_NextMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeOnErrorNext")
