//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableConcatMapEager.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscribersInnerQueuedSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilErrorMode.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_serialVersionUID -4255299542215038287LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMapEager

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                    withInt:(jint)maxConcurrency
                                    withInt:(jint)prefetch
       withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(self, source, mapper, maxConcurrency, prefetch, errorMode);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(s, mapper_, maxConcurrency_, prefetch_, errorMode_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withInt:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;IILIoReactivexInternalUtilErrorMode;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IILio/reactivex/internal/util/ErrorMode;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMapEager = { "FlowableConcatMapEager", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->maxConcurrency_ = maxConcurrency;
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, errorMode);
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEager *new_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, maxConcurrency, prefetch, errorMode)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEager *create_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, source, mapper, maxConcurrency, prefetch, errorMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager)

@implementation IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)maxConcurrency
                                             withInt:(jint)prefetch
                withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode {
  IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(self, actual, mapper, maxConcurrency, prefetch, errorMode);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:maxConcurrency_ == JavaLangInteger_MAX_VALUE ? JavaLangLong_MAX_VALUE : maxConcurrency_];
  }
}

- (void)onNextWithId:(id)t {
  id<OrgReactivestreamsPublisher> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper returned a null Publisher");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  IoReactivexInternalSubscribersInnerQueuedSubscriber *inner = create_IoReactivexInternalSubscribersInnerQueuedSubscriber_initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_(self, prefetch_);
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(subscribers_)) offerWithId:inner];
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:inner];
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [inner cancel];
    [self drainAndCancel];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)cancel {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [self drainAndCancel];
}

- (void)drainAndCancel {
  if ([self getAndIncrement] == 0) {
    do {
      [self cancelAll];
    }
    while ([self decrementAndGet] != 0);
  }
}

- (void)cancelAll {
  IoReactivexInternalSubscribersInnerQueuedSubscriber *inner;
  while ((inner = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(subscribers_)) poll]) != nil) {
    [((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) cancel];
  }
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)innerNextWithIoReactivexInternalSubscribersInnerQueuedSubscriber:(IoReactivexInternalSubscribersInnerQueuedSubscriber *)inner
                                                                  withId:(id)value {
  if ([((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk([((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) queue])) offerWithId:value]) {
    [self drain];
  }
  else {
    [inner cancel];
    [self innerErrorWithIoReactivexInternalSubscribersInnerQueuedSubscriber:inner withJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_init()];
  }
}

- (void)innerErrorWithIoReactivexInternalSubscribersInnerQueuedSubscriber:(IoReactivexInternalSubscribersInnerQueuedSubscriber *)inner
                                                    withJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    [((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) setDone];
    if (errorMode_ != JreLoadEnum(IoReactivexInternalUtilErrorMode, END)) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    }
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)innerCompleteWithIoReactivexInternalSubscribersInnerQueuedSubscriber:(IoReactivexInternalSubscribersInnerQueuedSubscriber *)inner {
  [((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) setDone];
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  IoReactivexInternalSubscribersInnerQueuedSubscriber *inner = JreLoadVolatileId(&current_);
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexInternalUtilErrorMode *em = errorMode_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    if (inner == nil) {
      if (em != JreLoadEnum(IoReactivexInternalUtilErrorMode, END)) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          [self cancelAll];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
          return;
        }
      }
      jboolean outerDone = JreLoadVolatileBoolean(&done_);
      inner = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(subscribers_)) poll];
      if (outerDone && inner == nil) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
        if (ex != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return;
      }
      if (inner != nil) {
        JreVolatileStrongAssign(&current_, inner);
      }
    }
    jboolean continueNextSource = false;
    if (inner != nil) {
      id<IoReactivexInternalFuseableSimpleQueue> q = [inner queue];
      if (q != nil) {
        while (e != r) {
          if (JreLoadVolatileBoolean(&cancelled_)) {
            [self cancelAll];
            return;
          }
          if (em == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
            JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
            if (ex != nil) {
              JreVolatileStrongAssign(&current_, nil);
              [inner cancel];
              [self cancelAll];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
          }
          jboolean d = [inner isDone];
          id v;
          @try {
            v = [q poll];
          }
          @catch (JavaLangThrowable *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
            JreVolatileStrongAssign(&current_, nil);
            [inner cancel];
            [self cancelAll];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
            return;
          }
          jboolean empty = v == nil;
          if (d && empty) {
            inner = nil;
            JreVolatileStrongAssign(&current_, nil);
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
            continueNextSource = true;
            break;
          }
          if (empty) {
            break;
          }
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
          e++;
          [inner requestOne];
        }
        if (e == r) {
          if (JreLoadVolatileBoolean(&cancelled_)) {
            [self cancelAll];
            return;
          }
          if (em == JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)) {
            JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
            if (ex != nil) {
              JreVolatileStrongAssign(&current_, nil);
              [((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) cancel];
              [self cancelAll];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
          }
          jboolean d = [((IoReactivexInternalSubscribersInnerQueuedSubscriber *) nil_chk(inner)) isDone];
          jboolean empty = [q isEmpty];
          if (d && empty) {
            inner = nil;
            JreVolatileStrongAssign(&current_, nil);
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
            continueNextSource = true;
          }
        }
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    if (continueNextSource) {
      continue;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&current_, &original->current_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(errorMode_);
  RELEASE_(errors_);
  RELEASE_(requested_);
  RELEASE_(subscribers_);
  RELEASE_(s_);
  JreReleaseVolatile(&current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withInt:withIoReactivexInternalUtilErrorMode:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(drainAndCancel);
  methods[7].selector = @selector(cancelAll);
  methods[8].selector = @selector(requestWithLong:);
  methods[9].selector = @selector(innerNextWithIoReactivexInternalSubscribersInnerQueuedSubscriber:withId:);
  methods[10].selector = @selector(innerErrorWithIoReactivexInternalSubscribersInnerQueuedSubscriber:withJavaLangThrowable:);
  methods[11].selector = @selector(innerCompleteWithIoReactivexInternalSubscribersInnerQueuedSubscriber:);
  methods[12].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorMode_", "LIoReactivexInternalUtilErrorMode;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "subscribers_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "current_", "LIoReactivexInternalSubscribersInnerQueuedSubscriber;", .constantValue.asLong = 0, 0x40, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;IILIoReactivexInternalUtilErrorMode;", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IILio/reactivex/internal/util/ErrorMode;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "innerNext", "LIoReactivexInternalSubscribersInnerQueuedSubscriber;LNSObject;", "(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber<TR;>;TR;)V", "innerError", "LIoReactivexInternalSubscribersInnerQueuedSubscriber;LJavaLangThrowable;", "(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber<TR;>;Ljava/lang/Throwable;)V", "innerComplete", "LIoReactivexInternalSubscribersInnerQueuedSubscriber;", "(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber<TR;>;)V", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Lio/reactivex/internal/subscribers/InnerQueuedSubscriber<TR;>;>;", "Lio/reactivex/internal/subscribers/InnerQueuedSubscriber<TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableConcatMapEager;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber = { "ConcatMapEagerDelayErrorSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 13, 24, -1, -1, 25, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->maxConcurrency_ = maxConcurrency;
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->errorMode_, errorMode);
  JreStrongAssignAndConsume(&self->subscribers_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(JavaLangMath_minWithInt_withInt_(prefetch, maxConcurrency)));
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, actual, mapper, maxConcurrency, prefetch, errorMode)
}

IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint maxConcurrency, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withIoReactivexInternalUtilErrorMode_, actual, mapper, maxConcurrency, prefetch, errorMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableConcatMapEager_ConcatMapEagerDelayErrorSubscriber)
