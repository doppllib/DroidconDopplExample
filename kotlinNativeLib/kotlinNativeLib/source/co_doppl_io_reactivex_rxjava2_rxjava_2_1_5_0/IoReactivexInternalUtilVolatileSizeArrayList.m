//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexInternalUtilVolatileSizeArrayList.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/UnaryOperator.h"
#include "java/util/stream/Stream.h"

inline jlong IoReactivexInternalUtilVolatileSizeArrayList_get_serialVersionUID();
#define IoReactivexInternalUtilVolatileSizeArrayList_serialVersionUID 3972397474470203923LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalUtilVolatileSizeArrayList, serialVersionUID, jlong)

@implementation IoReactivexInternalUtilVolatileSizeArrayList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilVolatileSizeArrayList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)initWithInt:(jint)initialCapacity {
  IoReactivexInternalUtilVolatileSizeArrayList_initWithInt_(self, initialCapacity);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)size {
  return [self get];
}

- (jboolean)isEmpty {
  return [self get] == 0;
}

- (jboolean)containsWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(list_)) containsWithId:o];
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilArrayList *) nil_chk(list_)) iterator];
}

- (IOSObjectArray *)toArray {
  return [((JavaUtilArrayList *) nil_chk(list_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  return [((JavaUtilArrayList *) nil_chk(list_)) toArrayWithNSObjectArray:a];
}

- (jboolean)addWithId:(id)e {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) addWithId:e];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (jboolean)removeWithId:(id)o {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) removeWithId:o];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(list_)) containsAllWithJavaUtilCollection:c];
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) addAllWithJavaUtilCollection:c];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) addAllWithInt:index withJavaUtilCollection:c];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) removeAllWithJavaUtilCollection:c];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean b = [((JavaUtilArrayList *) nil_chk(list_)) retainAllWithJavaUtilCollection:c];
  [self lazySetWithInt:[list_ size]];
  return b;
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(list_)) clear];
  [self lazySetWithInt:0];
}

- (id)getWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(list_)) getWithInt:index];
}

- (id)setWithInt:(jint)index
          withId:(id)element {
  return [((JavaUtilArrayList *) nil_chk(list_)) setWithInt:index withId:element];
}

- (void)addWithInt:(jint)index
            withId:(id)element {
  [((JavaUtilArrayList *) nil_chk(list_)) addWithInt:index withId:element];
  [self lazySetWithInt:[list_ size]];
}

- (id)removeWithInt:(jint)index {
  id v = [((JavaUtilArrayList *) nil_chk(list_)) removeWithInt:index];
  [self lazySetWithInt:[list_ size]];
  return v;
}

- (jint)indexOfWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(list_)) indexOfWithId:o];
}

- (jint)lastIndexOfWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(list_)) lastIndexOfWithId:o];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((JavaUtilArrayList *) nil_chk(list_)) listIterator];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(list_)) listIteratorWithInt:index];
}

- (id<JavaUtilList>)subListWithInt:(jint)fromIndex
                           withInt:(jint)toIndex {
  return [((JavaUtilArrayList *) nil_chk(list_)) subListWithInt:fromIndex withInt:toIndex];
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[IoReactivexInternalUtilVolatileSizeArrayList class]]) {
    return [((JavaUtilArrayList *) nil_chk(list_)) isEqual:((IoReactivexInternalUtilVolatileSizeArrayList *) nil_chk(((IoReactivexInternalUtilVolatileSizeArrayList *) cast_chk(obj, [IoReactivexInternalUtilVolatileSizeArrayList class]))))->list_];
  }
  return [((JavaUtilArrayList *) nil_chk(list_)) isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilArrayList *) nil_chk(list_)) hash]);
}

- (NSString *)description {
  return [((JavaUtilArrayList *) nil_chk(list_)) description];
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilList_spliterator(self);
}

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0 {
  JavaUtilList_replaceAllWithJavaUtilFunctionUnaryOperator_(self, arg0);
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  JavaUtilList_sortWithJavaUtilComparator_(self, arg0);
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 2, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, 13, 11, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 13, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, 17, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, 18, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 0, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 7, 22, -1, 24, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 0, -1, 20, -1, -1 },
    { NULL, "I", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 28, 0, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 30, 31, -1, 32, -1, -1 },
    { NULL, "Z", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 34, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 35, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(iterator);
  methods[6].selector = @selector(toArray);
  methods[7].selector = @selector(toArrayWithNSObjectArray:);
  methods[8].selector = @selector(addWithId:);
  methods[9].selector = @selector(removeWithId:);
  methods[10].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[11].selector = @selector(addAllWithJavaUtilCollection:);
  methods[12].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[13].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[14].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[15].selector = @selector(clear);
  methods[16].selector = @selector(getWithInt:);
  methods[17].selector = @selector(setWithInt:withId:);
  methods[18].selector = @selector(addWithInt:withId:);
  methods[19].selector = @selector(removeWithInt:);
  methods[20].selector = @selector(indexOfWithId:);
  methods[21].selector = @selector(lastIndexOfWithId:);
  methods[22].selector = @selector(listIterator);
  methods[23].selector = @selector(listIteratorWithInt:);
  methods[24].selector = @selector(subListWithInt:withInt:);
  methods[25].selector = @selector(isEqual:);
  methods[26].selector = @selector(hash);
  methods[27].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalUtilVolatileSizeArrayList_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "list_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "I", "contains", "LNSObject;", "()Ljava/util/Iterator<TT;>;", "toArray", "[LNSObject;", "<E:Ljava/lang/Object;>([TE;)[TE;", "add", "(TT;)Z", "remove", "containsAll", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Z", "addAll", "(Ljava/util/Collection<+TT;>;)Z", "ILJavaUtilCollection;", "(ILjava/util/Collection<+TT;>;)Z", "removeAll", "retainAll", "get", "(I)TT;", "set", "ILNSObject;", "(ITT;)TT;", "(ITT;)V", "indexOf", "lastIndexOf", "()Ljava/util/ListIterator<TT;>;", "listIterator", "(I)Ljava/util/ListIterator<TT;>;", "subList", "II", "(II)Ljava/util/List<TT;>;", "equals", "hashCode", "toString", "Ljava/util/ArrayList<TT;>;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/List<TT;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilVolatileSizeArrayList = { "VolatileSizeArrayList", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 28, 2, -1, -1, -1, 37, -1 };
  return &_IoReactivexInternalUtilVolatileSizeArrayList;
}

@end

void IoReactivexInternalUtilVolatileSizeArrayList_init(IoReactivexInternalUtilVolatileSizeArrayList *self) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->list_, new_JavaUtilArrayList_init());
}

IoReactivexInternalUtilVolatileSizeArrayList *new_IoReactivexInternalUtilVolatileSizeArrayList_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilVolatileSizeArrayList, init)
}

IoReactivexInternalUtilVolatileSizeArrayList *create_IoReactivexInternalUtilVolatileSizeArrayList_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilVolatileSizeArrayList, init)
}

void IoReactivexInternalUtilVolatileSizeArrayList_initWithInt_(IoReactivexInternalUtilVolatileSizeArrayList *self, jint initialCapacity) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->list_, new_JavaUtilArrayList_initWithInt_(initialCapacity));
}

IoReactivexInternalUtilVolatileSizeArrayList *new_IoReactivexInternalUtilVolatileSizeArrayList_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilVolatileSizeArrayList, initWithInt_, initialCapacity)
}

IoReactivexInternalUtilVolatileSizeArrayList *create_IoReactivexInternalUtilVolatileSizeArrayList_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilVolatileSizeArrayList, initWithInt_, initialCapacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilVolatileSizeArrayList)
