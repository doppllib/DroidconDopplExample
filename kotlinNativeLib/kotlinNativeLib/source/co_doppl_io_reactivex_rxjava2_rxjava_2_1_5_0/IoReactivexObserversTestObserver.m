//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversBaseTestConsumer.h"
#include "IoReactivexObserversTestObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexObserversTestObserver () {
 @public
  id<IoReactivexObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *subscription_;
  id<IoReactivexInternalFuseableQueueDisposable> qs_;
}

- (void)j2ojbcCleanUp;

@end

J2OBJC_FIELD_SETTER(IoReactivexObserversTestObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexObserversTestObserver, subscription_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexObserversTestObserver, qs_, id<IoReactivexInternalFuseableQueueDisposable>)

__attribute__((unused)) static void IoReactivexObserversTestObserver_j2ojbcCleanUp(IoReactivexObserversTestObserver *self);

__attribute__((unused)) static void IoReactivexObserversTestObserver_dispose(IoReactivexObserversTestObserver *self);

__attribute__((unused)) static jboolean IoReactivexObserversTestObserver_isDisposed(IoReactivexObserversTestObserver *self);

@interface IoReactivexObserversTestObserver_1 : NSObject < IoReactivexDisposablesDisposable >

- (instancetype)init;

- (void)dispose;

- (jboolean)isDisposed;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversTestObserver_1)

__attribute__((unused)) static void IoReactivexObserversTestObserver_1_init(IoReactivexObserversTestObserver_1 *self);

__attribute__((unused)) static IoReactivexObserversTestObserver_1 *new_IoReactivexObserversTestObserver_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexObserversTestObserver_1 *create_IoReactivexObserversTestObserver_1_init();

__attribute__((unused)) static void IoReactivexObserversTestObserver_EmptyObserver_initWithNSString_withInt_(IoReactivexObserversTestObserver_EmptyObserver *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(IoReactivexObserversTestObserver)

id<IoReactivexDisposablesDisposable> IoReactivexObserversTestObserver_terminalDisposable;

@implementation IoReactivexObserversTestObserver

+ (id<IoReactivexDisposablesDisposable>)terminalDisposable {
  return IoReactivexObserversTestObserver_terminalDisposable;
}

+ (void)setTerminalDisposable:(id<IoReactivexDisposablesDisposable>)value {
  JreStrongAssign(&IoReactivexObserversTestObserver_terminalDisposable, value);
}

+ (IoReactivexObserversTestObserver *)create {
  return IoReactivexObserversTestObserver_create();
}

+ (IoReactivexObserversTestObserver *)createWithIoReactivexObserver:(id<IoReactivexObserver>)delegate {
  return IoReactivexObserversTestObserver_createWithIoReactivexObserver_(delegate);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexObserversTestObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexObserversTestObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  JreStrongAssign(&lastThread_, JavaLangThread_currentThread());
  if (s == nil) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangNullPointerException_initWithNSString_(@"onSubscribe received a null Subscription")];
    return;
  }
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) compareAndSetWithId:nil withId:s]) {
    [s dispose];
    if ([subscription_ get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"onSubscribe received multiple subscriptions: ", s))];
    }
    return;
  }
  if (initialFusionMode_ != 0) {
    if ([IoReactivexInternalFuseableQueueDisposable_class_() isInstance:s]) {
      JreStrongAssign(&qs_, (id<IoReactivexInternalFuseableQueueDisposable>) cast_check(s, IoReactivexInternalFuseableQueueDisposable_class_()));
      jint m = [qs_ requestFusionWithInt:initialFusionMode_];
      establishedFusionMode_ = m;
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        checkSubscriptionOnce_ = true;
        JreStrongAssign(&lastThread_, JavaLangThread_currentThread());
        @try {
          id t;
          while ((t = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) poll]) != nil) {
            [((id<JavaUtilList>) nil_chk(values_)) addWithId:t];
          }
          completions_++;
          [subscription_ lazySetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
        }
        @catch (JavaLangThrowable *ex) {
          [((id<JavaUtilList>) nil_chk(errors_)) addWithId:ex];
        }
        return;
      }
    }
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:s];
}

- (void)onNextWithId:(id)t {
  if (!checkSubscriptionOnce_) {
    checkSubscriptionOnce_ = true;
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] == nil) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangIllegalStateException_initWithNSString_(@"onSubscribe not called in proper order")];
    }
  }
  JreStrongAssign(&lastThread_, JavaLangThread_currentThread());
  if (establishedFusionMode_ == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
    @try {
      while ((t = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) poll]) != nil) {
        [((id<JavaUtilList>) nil_chk(values_)) addWithId:t];
      }
    }
    @catch (JavaLangThrowable *ex) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:ex];
      [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qs_)) dispose];
    }
    return;
  }
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:t];
  if (t == nil) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangNullPointerException_initWithNSString_(@"onNext received a null value")];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (!checkSubscriptionOnce_) {
    checkSubscriptionOnce_ = true;
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] == nil) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangIllegalStateException_initWithNSString_(@"onSubscribe not called in proper order")];
    }
  }
  @try {
    JreStrongAssign(&lastThread_, JavaLangThread_currentThread());
    if (t == nil) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangNullPointerException_initWithNSString_(@"onError received a null Throwable")];
    }
    else {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:t];
    }
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) countDown];
  }
}

- (void)onComplete {
  if (!checkSubscriptionOnce_) {
    checkSubscriptionOnce_ = true;
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] == nil) {
      [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangIllegalStateException_initWithNSString_(@"onSubscribe not called in proper order")];
    }
  }
  @try {
    JreStrongAssign(&lastThread_, JavaLangThread_currentThread());
    completions_++;
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) countDown];
  }
}

- (void)j2ojbcCleanUp {
  IoReactivexObserversTestObserver_j2ojbcCleanUp(self);
}

- (jboolean)isCancelled {
  return IoReactivexObserversTestObserver_isDisposed(self);
}

- (void)cancel {
  IoReactivexObserversTestObserver_dispose(self);
}

- (void)dispose {
  IoReactivexObserversTestObserver_dispose(self);
}

- (jboolean)isDisposed {
  return IoReactivexObserversTestObserver_isDisposed(self);
}

- (jboolean)hasSubscription {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] != nil;
}

- (IoReactivexObserversTestObserver *)assertSubscribed {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] == nil) {
    @throw nil_chk([self failWithNSString:@"Not subscribed!"]);
  }
  return self;
}

- (IoReactivexObserversTestObserver *)assertNotSubscribed {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscription_)) get] != nil) {
    @throw nil_chk([self failWithNSString:@"Subscribed!"]);
  }
  else if (![((id<JavaUtilList>) nil_chk(errors_)) isEmpty]) {
    @throw nil_chk([self failWithNSString:@"Not subscribed but errors found"]);
  }
  return self;
}

- (IoReactivexObserversTestObserver *)assertOfWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)check {
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(check)) acceptWithId:self];
  }
  @catch (JavaLangThrowable *ex) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
  }
  return self;
}

- (IoReactivexObserversTestObserver *)setInitialFusionModeWithInt:(jint)mode {
  self->initialFusionMode_ = mode;
  return self;
}

- (IoReactivexObserversTestObserver *)assertFusionModeWithInt:(jint)mode {
  jint m = establishedFusionMode_;
  if (m != mode) {
    if (qs_ != nil) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$$$$", @"Fusion mode different. Expected: ", IoReactivexObserversTestObserver_fusionModeToStringWithInt_(mode), @", actual: ", IoReactivexObserversTestObserver_fusionModeToStringWithInt_(m)));
    }
    else {
      @throw nil_chk([self failWithNSString:@"Upstream is not fuseable"]);
    }
  }
  return self;
}

+ (NSString *)fusionModeToStringWithInt:(jint)mode {
  return IoReactivexObserversTestObserver_fusionModeToStringWithInt_(mode);
}

- (IoReactivexObserversTestObserver *)assertFuseable {
  if (qs_ == nil) {
    @throw create_JavaLangAssertionError_initWithId_(@"Upstream is not fuseable.");
  }
  return self;
}

- (IoReactivexObserversTestObserver *)assertNotFuseable {
  if (qs_ != nil) {
    @throw create_JavaLangAssertionError_initWithId_(@"Upstream is fuseable.");
  }
  return self;
}

- (void)onSuccessWithId:(id)value {
  [self onNextWithId:value];
  [self onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(subscription_);
  RELEASE_(qs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexObserversTestObserver;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x11, -1, -1, -1, 12, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x11, -1, -1, -1, 12, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x11, 13, 14, -1, 15, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x10, 16, 17, -1, 18, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x10, 19, 17, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x8, 20, 17, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x10, -1, -1, -1, 12, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver;", 0x10, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 21, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithIoReactivexObserver:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithIoReactivexObserver:);
  methods[4].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  methods[8].selector = @selector(j2ojbcCleanUp);
  methods[9].selector = @selector(isCancelled);
  methods[10].selector = @selector(cancel);
  methods[11].selector = @selector(dispose);
  methods[12].selector = @selector(isDisposed);
  methods[13].selector = @selector(hasSubscription);
  methods[14].selector = @selector(assertSubscribed);
  methods[15].selector = @selector(assertNotSubscribed);
  methods[16].selector = @selector(assertOfWithIoReactivexFunctionsConsumer:);
  methods[17].selector = @selector(setInitialFusionModeWithInt:);
  methods[18].selector = @selector(assertFusionModeWithInt:);
  methods[19].selector = @selector(fusionModeToStringWithInt:);
  methods[20].selector = @selector(assertFuseable);
  methods[21].selector = @selector(assertNotFuseable);
  methods[22].selector = @selector(onSuccessWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 22, -1 },
    { "subscription_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "qs_", "LIoReactivexInternalFuseableQueueDisposable;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "terminalDisposable", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x8, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/observers/TestObserver<TT;>;", "create", "LIoReactivexObserver;", "<T:Ljava/lang/Object;>(Lio/reactivex/Observer<-TT;>;)Lio/reactivex/observers/TestObserver<TT;>;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "()Lio/reactivex/observers/TestObserver<TT;>;", "assertOf", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/observers/TestObserver<TT;>;>;)Lio/reactivex/observers/TestObserver<TT;>;", "setInitialFusionMode", "I", "(I)Lio/reactivex/observers/TestObserver<TT;>;", "assertFusionMode", "fusionModeToString", "onSuccess", "Lio/reactivex/Observer<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/internal/fuseable/QueueDisposable<TT;>;", &IoReactivexObserversTestObserver_terminalDisposable, "LIoReactivexObserversTestObserver_EmptyObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/observers/BaseTestConsumer<TT;Lio/reactivex/observers/TestObserver<TT;>;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/SingleObserver<TT;>;Lio/reactivex/CompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexObserversTestObserver = { "TestObserver", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x1, 23, 4, -1, 26, -1, 27, -1 };
  return &_IoReactivexObserversTestObserver;
}

+ (void)initialize {
  if (self == [IoReactivexObserversTestObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexObserversTestObserver_terminalDisposable, new_IoReactivexObserversTestObserver_1_init());
    J2OBJC_SET_INITIALIZED(IoReactivexObserversTestObserver)
  }
}

@end

IoReactivexObserversTestObserver *IoReactivexObserversTestObserver_create() {
  IoReactivexObserversTestObserver_initialize();
  return create_IoReactivexObserversTestObserver_init();
}

IoReactivexObserversTestObserver *IoReactivexObserversTestObserver_createWithIoReactivexObserver_(id<IoReactivexObserver> delegate) {
  IoReactivexObserversTestObserver_initialize();
  return create_IoReactivexObserversTestObserver_initWithIoReactivexObserver_(delegate);
}

void IoReactivexObserversTestObserver_init(IoReactivexObserversTestObserver *self) {
  IoReactivexObserversTestObserver_initWithIoReactivexObserver_(self, JreLoadEnum(IoReactivexObserversTestObserver_EmptyObserver, INSTANCE));
}

IoReactivexObserversTestObserver *new_IoReactivexObserversTestObserver_init() {
  J2OBJC_NEW_IMPL(IoReactivexObserversTestObserver, init)
}

IoReactivexObserversTestObserver *create_IoReactivexObserversTestObserver_init() {
  J2OBJC_CREATE_IMPL(IoReactivexObserversTestObserver, init)
}

void IoReactivexObserversTestObserver_initWithIoReactivexObserver_(IoReactivexObserversTestObserver *self, id<IoReactivexObserver> actual) {
  IoReactivexObserversBaseTestConsumer_init(self);
  JreStrongAssignAndConsume(&self->subscription_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexObserversTestObserver *new_IoReactivexObserversTestObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexObserversTestObserver, initWithIoReactivexObserver_, actual)
}

IoReactivexObserversTestObserver *create_IoReactivexObserversTestObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexObserversTestObserver, initWithIoReactivexObserver_, actual)
}

void IoReactivexObserversTestObserver_j2ojbcCleanUp(IoReactivexObserversTestObserver *self) {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->subscription_)) get] != nil) [self->subscription_ setWithId:IoReactivexObserversTestObserver_terminalDisposable];
}

void IoReactivexObserversTestObserver_dispose(IoReactivexObserversTestObserver *self) {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self->subscription_);
}

jboolean IoReactivexObserversTestObserver_isDisposed(IoReactivexObserversTestObserver *self) {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->subscription_)) get]);
}

NSString *IoReactivexObserversTestObserver_fusionModeToStringWithInt_(jint mode) {
  IoReactivexObserversTestObserver_initialize();
  switch (mode) {
    case IoReactivexInternalFuseableQueueFuseable_NONE:
    return @"NONE";
    case IoReactivexInternalFuseableQueueFuseable_SYNC:
    return @"SYNC";
    case IoReactivexInternalFuseableQueueFuseable_ASYNC:
    return @"ASYNC";
    default:
    return JreStrcat("$IC", @"Unknown(", mode, ')');
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversTestObserver)

@implementation IoReactivexObserversTestObserver_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexObserversTestObserver_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dispose {
}

- (jboolean)isDisposed {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexObserversTestObserver;" };
  static const J2ObjcClassInfo _IoReactivexObserversTestObserver_1 = { "", "io.reactivex.observers", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexObserversTestObserver_1;
}

@end

void IoReactivexObserversTestObserver_1_init(IoReactivexObserversTestObserver_1 *self) {
  NSObject_init(self);
}

IoReactivexObserversTestObserver_1 *new_IoReactivexObserversTestObserver_1_init() {
  J2OBJC_NEW_IMPL(IoReactivexObserversTestObserver_1, init)
}

IoReactivexObserversTestObserver_1 *create_IoReactivexObserversTestObserver_1_init() {
  J2OBJC_CREATE_IMPL(IoReactivexObserversTestObserver_1, init)
}

J2OBJC_INITIALIZED_DEFN(IoReactivexObserversTestObserver_EmptyObserver)

IoReactivexObserversTestObserver_EmptyObserver *IoReactivexObserversTestObserver_EmptyObserver_values_[1];

@implementation IoReactivexObserversTestObserver_EmptyObserver

+ (IoReactivexObserversTestObserver_EmptyObserver *)INSTANCE {
  return JreEnum(IoReactivexObserversTestObserver_EmptyObserver, INSTANCE);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
}

- (void)onNextWithId:(id)t {
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
}

- (void)onComplete {
}

+ (IOSObjectArray *)values {
  return IoReactivexObserversTestObserver_EmptyObserver_values();
}

+ (IoReactivexObserversTestObserver_EmptyObserver *)valueOfWithNSString:(NSString *)name {
  return IoReactivexObserversTestObserver_EmptyObserver_valueOfWithNSString_(name);
}

- (IoReactivexObserversTestObserver_EmptyObserver_Enum)toNSEnum {
  return (IoReactivexObserversTestObserver_EmptyObserver_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LIoReactivexObserversTestObserver_EmptyObserver;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversTestObserver_EmptyObserver;", 0x9, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(values);
  methods[5].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LIoReactivexObserversTestObserver_EmptyObserver;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "valueOf", "LNSString;", &JreEnum(IoReactivexObserversTestObserver_EmptyObserver, INSTANCE), "LIoReactivexObserversTestObserver;", "Ljava/lang/Enum<Lio/reactivex/observers/TestObserver$EmptyObserver;>;Lio/reactivex/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexObserversTestObserver_EmptyObserver = { "EmptyObserver", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x4018, 6, 1, 9, -1, -1, 10, -1 };
  return &_IoReactivexObserversTestObserver_EmptyObserver;
}

+ (void)initialize {
  if (self == [IoReactivexObserversTestObserver_EmptyObserver class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 1 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 1; i++) {
      (IoReactivexObserversTestObserver_EmptyObserver_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      IoReactivexObserversTestObserver_EmptyObserver_initWithNSString_withInt_(e, JreEnumConstantName(IoReactivexObserversTestObserver_EmptyObserver_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(IoReactivexObserversTestObserver_EmptyObserver)
  }
}

@end

void IoReactivexObserversTestObserver_EmptyObserver_initWithNSString_withInt_(IoReactivexObserversTestObserver_EmptyObserver *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *IoReactivexObserversTestObserver_EmptyObserver_values() {
  IoReactivexObserversTestObserver_EmptyObserver_initialize();
  return [IOSObjectArray arrayWithObjects:IoReactivexObserversTestObserver_EmptyObserver_values_ count:1 type:IoReactivexObserversTestObserver_EmptyObserver_class_()];
}

IoReactivexObserversTestObserver_EmptyObserver *IoReactivexObserversTestObserver_EmptyObserver_valueOfWithNSString_(NSString *name) {
  IoReactivexObserversTestObserver_EmptyObserver_initialize();
  for (int i = 0; i < 1; i++) {
    IoReactivexObserversTestObserver_EmptyObserver *e = IoReactivexObserversTestObserver_EmptyObserver_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

IoReactivexObserversTestObserver_EmptyObserver *IoReactivexObserversTestObserver_EmptyObserver_fromOrdinal(NSUInteger ordinal) {
  IoReactivexObserversTestObserver_EmptyObserver_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return IoReactivexObserversTestObserver_EmptyObserver_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversTestObserver_EmptyObserver)
