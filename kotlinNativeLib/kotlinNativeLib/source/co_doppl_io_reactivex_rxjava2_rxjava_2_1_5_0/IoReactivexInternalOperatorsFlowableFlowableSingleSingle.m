//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSingle.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSingleSingle.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/NoSuchElementException.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableSingleSingle

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                     withId:(id)defaultValue {
  IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithIoReactivexFlowable_withId_(self, source, defaultValue);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(s, defaultValue_)];
}

- (IoReactivexFlowable *)fuseToFlowable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableSingle_initWithIoReactivexFlowable_withId_(source_, defaultValue_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(defaultValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withId:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  methods[2].selector = @selector(fuseToFlowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "defaultValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LNSObject;", "(Lio/reactivex/Flowable<TT;>;TT;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "()Lio/reactivex/Flowable<TT;>;", "Lio/reactivex/Flowable<TT;>;", "TT;", "LIoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;Lio/reactivex/internal/fuseable/FuseToFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSingleSingle = { "FlowableSingleSingle", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSingleSingle;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithIoReactivexFlowable_withId_(IoReactivexInternalOperatorsFlowableFlowableSingleSingle *self, IoReactivexFlowable *source, id defaultValue) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->defaultValue_, defaultValue);
}

IoReactivexInternalOperatorsFlowableFlowableSingleSingle *new_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithIoReactivexFlowable_withId_(IoReactivexFlowable *source, id defaultValue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSingleSingle, initWithIoReactivexFlowable_withId_, source, defaultValue)
}

IoReactivexInternalOperatorsFlowableFlowableSingleSingle *create_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithIoReactivexFlowable_withId_(IoReactivexFlowable *source, id defaultValue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSingleSingle, initWithIoReactivexFlowable_withId_, source, defaultValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSingleSingle)

@implementation IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)defaultValue {
  IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(self, actual, defaultValue);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(JreLoadVolatileId(&self->s_), s)) {
    JreVolatileStrongAssign(&self->s_, s);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (value_ != nil) {
    done_ = true;
    [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
    JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaLangIllegalArgumentException_initWithNSString_(@"Sequence contains more than one element!")];
    return;
  }
  JreStrongAssign(&value_, t);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
  id v = value_;
  JreStrongAssign(&value_, nil);
  if (v == nil) {
    v = defaultValue_;
  }
  if (v != nil) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:v];
  }
  else {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaUtilNoSuchElementException_init()];
  }
}

- (void)dispose {
  [((id<OrgReactivestreamsSubscription>) nil_chk(JreLoadVolatileId(&s_))) cancel];
  JreVolatileStrongAssign(&s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
}

- (jboolean)isDisposed {
  return JreLoadVolatileId(&s_) == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&s_, &original->s_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(defaultValue_);
  JreReleaseVolatile(&s_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withId:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "defaultValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LNSObject;", "(Lio/reactivex/SingleObserver<-TT;>;TT;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "TT;", "LIoReactivexInternalOperatorsFlowableFlowableSingleSingle;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber = { "SingleElementSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *self, id<IoReactivexSingleObserver> actual, id defaultValue) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->defaultValue_, defaultValue);
}

IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(id<IoReactivexSingleObserver> actual, id defaultValue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, initWithIoReactivexSingleObserver_withId_, actual, defaultValue)
}

IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(id<IoReactivexSingleObserver> actual, id defaultValue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, initWithIoReactivexSingleObserver_withId_, actual, defaultValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber)
