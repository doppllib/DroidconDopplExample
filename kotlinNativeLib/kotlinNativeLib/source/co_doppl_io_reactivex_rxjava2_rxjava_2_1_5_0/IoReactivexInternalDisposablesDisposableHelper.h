//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalDisposablesDisposableHelper")
#ifdef RESTRICT_IoReactivexInternalDisposablesDisposableHelper
#define INCLUDE_ALL_IoReactivexInternalDisposablesDisposableHelper 0
#else
#define INCLUDE_ALL_IoReactivexInternalDisposablesDisposableHelper 1
#endif
#undef RESTRICT_IoReactivexInternalDisposablesDisposableHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalDisposablesDisposableHelper_) && (INCLUDE_ALL_IoReactivexInternalDisposablesDisposableHelper || defined(INCLUDE_IoReactivexInternalDisposablesDisposableHelper))
#define IoReactivexInternalDisposablesDisposableHelper_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@class JavaUtilConcurrentAtomicAtomicReference;

typedef NS_ENUM(NSUInteger, IoReactivexInternalDisposablesDisposableHelper_Enum) {
  IoReactivexInternalDisposablesDisposableHelper_Enum_DISPOSED = 0,
};

@interface IoReactivexInternalDisposablesDisposableHelper : JavaLangEnum < IoReactivexDisposablesDisposable >

+ (IoReactivexInternalDisposablesDisposableHelper * __nonnull)DISPOSED;

#pragma mark Public

- (void)dispose;

+ (jboolean)disposeWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field;

- (jboolean)isDisposed;

+ (jboolean)isDisposedWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

+ (jboolean)replaceWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

+ (void)reportDisposableSet;

+ (jboolean)setWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                      withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

+ (jboolean)setOnceWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

+ (jboolean)trySetWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)field
                         withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

+ (jboolean)validateWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)current
                    withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)next;

+ (IoReactivexInternalDisposablesDisposableHelper *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (IoReactivexInternalDisposablesDisposableHelper_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalDisposablesDisposableHelper)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT IoReactivexInternalDisposablesDisposableHelper *IoReactivexInternalDisposablesDisposableHelper_values_[];

inline IoReactivexInternalDisposablesDisposableHelper *IoReactivexInternalDisposablesDisposableHelper_get_DISPOSED();
J2OBJC_ENUM_CONSTANT(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> d);

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(JavaUtilConcurrentAtomicAtomicReference *field, id<IoReactivexDisposablesDisposable> d);

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(JavaUtilConcurrentAtomicAtomicReference *field, id<IoReactivexDisposablesDisposable> d);

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(JavaUtilConcurrentAtomicAtomicReference *field, id<IoReactivexDisposablesDisposable> d);

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *field);

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> current, id<IoReactivexDisposablesDisposable> next);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesDisposableHelper_reportDisposableSet();

FOUNDATION_EXPORT jboolean IoReactivexInternalDisposablesDisposableHelper_trySetWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(JavaUtilConcurrentAtomicAtomicReference *field, id<IoReactivexDisposablesDisposable> d);

FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalDisposablesDisposableHelper_values();

FOUNDATION_EXPORT IoReactivexInternalDisposablesDisposableHelper *IoReactivexInternalDisposablesDisposableHelper_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT IoReactivexInternalDisposablesDisposableHelper *IoReactivexInternalDisposablesDisposableHelper_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalDisposablesDisposableHelper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalDisposablesDisposableHelper")
