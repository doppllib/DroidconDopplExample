//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_serialVersionUID 8443155186132538303LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_serialVersionUID 8606673141535671828LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors
                                    withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, source, mapper, delayErrors, maxConcurrency);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(observer, mapper_, delayErrors_, maxConcurrency_)];
}

- (IoReactivexFlowable *)fuseToFlowable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(source_, mapper_, delayErrors_, maxConcurrency_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  methods[2].selector = @selector(fuseToFlowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;ZI", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;ZI)V", "subscribeActual", "LIoReactivexCompletableObserver;", "()Lio/reactivex/Flowable<TT;>;", "Lio/reactivex/Flowable<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/Completable;Lio/reactivex/internal/fuseable/FuseToFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable = { "FlowableFlatMapCompletableCompletable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayErrors, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_, source, mapper, delayErrors, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                           withBoolean:(jboolean)delayErrors
                                               withInt:(jint)maxConcurrency {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(self, observer, mapper, delayErrors, maxConcurrency);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    jint m = maxConcurrency_;
    if (m == JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:m];
    }
  }
}

- (void)onNextWithId:(id)value {
  id<IoReactivexCompletableSource> cs;
  @try {
    cs = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The mapper returned a null CompletableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  [self getAndIncrement];
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *inner = create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(self);
  if (!JreLoadVolatileBoolean(&disposed_) && [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:inner]) {
    [((id<IoReactivexCompletableSource>) nil_chk(cs)) subscribeWithIoReactivexCompletableObserver:inner];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    if (delayErrors_) {
      if ([self decrementAndGet] == 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
      else {
        if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
        }
      }
    }
    else {
      [self dispose];
      if ([self getAndSetWithInt:0] > 0) {
        JavaLangThrowable *ex = [errors_ terminate];
        [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([self decrementAndGet] == 0) {
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
    if (ex != nil) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    }
    else {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
    }
  }
  else {
    if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
  }
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) isDisposed];
}

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *)inner {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onComplete];
}

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *)inner
                                                                                                                         withJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) delete__WithIoReactivexDisposablesDisposable:inner];
  [self onErrorWithJavaLangThrowable:e];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(errors_);
  RELEASE_(mapper_);
  RELEASE_(set_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:);
  methods[8].selector = @selector(innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexFunctionsFunction;ZI", "(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;ZI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "innerComplete", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver;", "innerError", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver;LJavaLangThrowable;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber = { "FlatMapCompletableMainSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 9, 14, 10, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *self, id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, observer);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
  self->maxConcurrency_ = maxConcurrency;
  [self lazySetWithInt:1];
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_, observer, mapper, delayErrors, maxConcurrency)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_, observer, mapper, delayErrors, maxConcurrency)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onComplete {
  [this$0_ innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [this$0_ innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:self withJavaLangThrowable:e];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onComplete);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 6, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *self, IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver, initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver)
