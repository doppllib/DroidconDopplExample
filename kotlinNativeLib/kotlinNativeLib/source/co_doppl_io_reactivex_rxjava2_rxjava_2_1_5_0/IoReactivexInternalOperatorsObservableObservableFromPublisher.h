//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableFromPublisher
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableFromPublisher

#if !defined (IoReactivexInternalOperatorsObservableObservableFromPublisher_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFromPublisher))
#define IoReactivexInternalOperatorsObservableObservableFromPublisher_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@protocol IoReactivexObserver;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsObservableObservableFromPublisher : IoReactivexObservable {
 @public
  id<OrgReactivestreamsPublisher> source_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)publisher;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)o;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFromPublisher)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFromPublisher, source_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFromPublisher_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsObservableObservableFromPublisher *self, id<OrgReactivestreamsPublisher> publisher);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFromPublisher *new_IoReactivexInternalOperatorsObservableObservableFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFromPublisher *create_IoReactivexInternalOperatorsObservableObservableFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFromPublisher)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber))
#define IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  volatile_id s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)o;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber, actual_, id<IoReactivexObserver>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber *self, id<IoReactivexObserver> o);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber *new_IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber_initWithIoReactivexObserver_(id<IoReactivexObserver> o) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber *create_IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber_initWithIoReactivexObserver_(id<IoReactivexObserver> o);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFromPublisher_PublisherSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFromPublisher")
