//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsObservableObservableScalarXMap.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface IoReactivexInternalOperatorsObservableObservableScalarXMap ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableScalarXMap_init(IoReactivexInternalOperatorsObservableObservableScalarXMap *self);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableScalarXMap *new_IoReactivexInternalOperatorsObservableObservableScalarXMap_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableScalarXMap *create_IoReactivexInternalOperatorsObservableObservableScalarXMap_init();

inline jlong IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_serialVersionUID 3880992722410194083LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableScalarXMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableScalarXMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)tryScalarXMapSubscribeWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                          withIoReactivexObserver:(id<IoReactivexObserver>)observer
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_tryScalarXMapSubscribeWithIoReactivexObservableSource_withIoReactivexObserver_withIoReactivexFunctionsFunction_(source, observer, mapper);
}

+ (IoReactivexObservable *)scalarXMapWithId:(id)value
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_scalarXMapWithId_withIoReactivexFunctionsFunction_(value, mapper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x9, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(tryScalarXMapSubscribeWithIoReactivexObservableSource:withIoReactivexObserver:withIoReactivexFunctionsFunction:);
  methods[2].selector = @selector(scalarXMapWithId:withIoReactivexFunctionsFunction:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "tryScalarXMapSubscribe", "LIoReactivexObservableSource;LIoReactivexObserver;LIoReactivexFunctionsFunction;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/Observer<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;)Z", "scalarXMap", "LNSObject;LIoReactivexFunctionsFunction;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(TT;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;)Lio/reactivex/Observable<TU;>;", "LIoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable;LIoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableScalarXMap = { "ObservableScalarXMap", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, 6, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableScalarXMap;
}

@end

void IoReactivexInternalOperatorsObservableObservableScalarXMap_init(IoReactivexInternalOperatorsObservableObservableScalarXMap *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalOperatorsObservableObservableScalarXMap *new_IoReactivexInternalOperatorsObservableObservableScalarXMap_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap, init)
}

IoReactivexInternalOperatorsObservableObservableScalarXMap *create_IoReactivexInternalOperatorsObservableObservableScalarXMap_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap, init)
}

jboolean IoReactivexInternalOperatorsObservableObservableScalarXMap_tryScalarXMapSubscribeWithIoReactivexObservableSource_withIoReactivexObserver_withIoReactivexFunctionsFunction_(id<IoReactivexObservableSource> source, id<IoReactivexObserver> observer, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalOperatorsObservableObservableScalarXMap_initialize();
  if ([JavaUtilConcurrentCallable_class_() isInstance:source]) {
    id t;
    @try {
      t = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(source, JavaUtilConcurrentCallable_class_())))) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, observer);
      return true;
    }
    if (t == nil) {
      IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(observer);
      return true;
    }
    id<IoReactivexObservableSource> r;
    @try {
      r = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper)) applyWithId:t], @"The mapper returned a null ObservableSource");
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, observer);
      return true;
    }
    if ([JavaUtilConcurrentCallable_class_() isInstance:r]) {
      id u;
      @try {
        u = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(r, JavaUtilConcurrentCallable_class_())))) call];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, observer);
        return true;
      }
      if (u == nil) {
        IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(observer);
        return true;
      }
      IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable *sd = create_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(observer, u);
      [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:sd];
      [sd run];
    }
    else {
      [((id<IoReactivexObservableSource>) nil_chk(r)) subscribeWithIoReactivexObserver:observer];
    }
    return true;
  }
  return false;
}

IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableScalarXMap_scalarXMapWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalOperatorsObservableObservableScalarXMap_initialize();
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable_initWithId_withIoReactivexFunctionsFunction_(value, mapper));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableScalarXMap)

@implementation IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable

- (instancetype)initWithId:(id)value
withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable_initWithId_withIoReactivexFunctionsFunction_(self, value, mapper);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  id<IoReactivexObservableSource> other;
  @try {
    other = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value_], @"The mapper returned a null ObservableSource");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, s);
    return;
  }
  if ([JavaUtilConcurrentCallable_class_() isInstance:other]) {
    id u;
    @try {
      u = [((id<JavaUtilConcurrentCallable>) nil_chk(((id<JavaUtilConcurrentCallable>) cast_check(other, JavaUtilConcurrentCallable_class_())))) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(ex, s);
      return;
    }
    if (u == nil) {
      IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(s);
      return;
    }
    IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable *sd = create_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(s, u);
    [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:sd];
    [sd run];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(other)) subscribeWithIoReactivexObserver:s];
  }
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LIoReactivexFunctionsFunction;", "(TT;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TR;>;)V", "TT;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TR;>;>;", "LIoReactivexInternalOperatorsObservableObservableScalarXMap;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Observable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable = { "ScalarXMapObservable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 2, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable;
}

@end

void IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable_initWithId_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable *self, id value, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->value_, value);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable *new_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable, initWithId_withIoReactivexFunctionsFunction_, value, mapper)
}

IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable *create_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable, initWithId_withIoReactivexFunctionsFunction_, value, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarXMapObservable)

@implementation IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable

+ (jint)START {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_START;
}

+ (jint)FUSED {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_FUSED;
}

+ (jint)ON_NEXT {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_NEXT;
}

+ (jint)ON_COMPLETE {
  return IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)observer
                                     withId:(id)value {
  IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(self, observer, value);
  return self;
}

- (jboolean)offerWithId:(id)value {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Should not be called!");
}

- (jboolean)offerWithId:(id)v1
                 withId:(id)v2 {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Should not be called!");
}

- (id __nullable)poll {
  if ([self get] == IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_FUSED) {
    [self lazySetWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE];
    return value_ScalarDisposable_;
  }
  return nil;
}

- (jboolean)isEmpty {
  return [self get] != IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_FUSED;
}

- (void)clear {
  [self lazySetWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE];
}

- (void)dispose {
  [self setWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE];
}

- (jboolean)isDisposed {
  return [self get] == IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_SYNC) != 0) {
    [self lazySetWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_FUSED];
    return IoReactivexInternalFuseableQueueFuseable_SYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)run {
  if ([self get] == IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_START && [self compareAndSetWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_START withInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_NEXT]) {
    [((id<IoReactivexObserver>) nil_chk(observer_)) onNextWithId:value_ScalarDisposable_];
    if ([self get] == IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_NEXT) {
      [self lazySetWithInt:IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE];
      [observer_ onComplete];
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(value_ScalarDisposable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withId:);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(offerWithId:withId:);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(requestFusionWithInt:);
  methods[9].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "observer_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "value_ScalarDisposable_", "LNSObject;", .constantValue.asLong = 0, 0x10, 12, -1, 13, -1 },
    { "START", "I", .constantValue.asInt = IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_START, 0x18, -1, -1, -1, -1 },
    { "FUSED", "I", .constantValue.asInt = IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_FUSED, 0x18, -1, -1, -1, -1 },
    { "ON_NEXT", "I", .constantValue.asInt = IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_NEXT, 0x18, -1, -1, -1, -1 },
    { "ON_COMPLETE", "I", .constantValue.asInt = IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_ON_COMPLETE, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LNSObject;", "(Lio/reactivex/Observer<-TT;>;TT;)V", "offer", "LNSObject;", "(TT;)Z", "LNSObject;LNSObject;", "(TT;TT;)Z", "LJavaLangException;", "()TT;", "requestFusion", "I", "Lio/reactivex/Observer<-TT;>;", "value", "TT;", "LIoReactivexInternalOperatorsObservableObservableScalarXMap;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/fuseable/QueueDisposable<TT;>;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable = { "ScalarDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x19, 10, 7, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable *self, id<IoReactivexObserver> observer, id value) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->observer_, observer);
  JreStrongAssign(&self->value_ScalarDisposable_, value);
}

IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable *new_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(id<IoReactivexObserver> observer, id value) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable, initWithIoReactivexObserver_withId_, observer, value)
}

IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable *create_IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable_initWithIoReactivexObserver_withId_(id<IoReactivexObserver> observer, id value) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable, initWithIoReactivexObserver_withId_, observer, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableScalarXMap_ScalarDisposable)
