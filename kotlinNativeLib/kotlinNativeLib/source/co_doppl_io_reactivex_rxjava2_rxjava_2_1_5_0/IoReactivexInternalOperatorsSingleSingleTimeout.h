//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimeout
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimeout

#if !defined (IoReactivexInternalOperatorsSingleSingleTimeout_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimeout))
#define IoReactivexInternalOperatorsSingleSingleTimeout_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleTimeout : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> source_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexSingleSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                                       withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, other_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout *self, id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout *new_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout *create_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimeout)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver))
#define IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver;
@class JavaLangThrowable;
@protocol IoReactivexSingleSource;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, JavaLangRunnable, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *task_;
  IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *fallback_;
  id<IoReactivexSingleSource> other_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)t;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                      withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, task_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, fallback_, IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver, other_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *new_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver *create_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver))
#define IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver > {
 @public
  id<IoReactivexSingleObserver> actual_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)t;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver, actual_, id<IoReactivexSingleObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *new_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver *create_IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimeout_TimeoutMainObserver_TimeoutFallbackObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout")
