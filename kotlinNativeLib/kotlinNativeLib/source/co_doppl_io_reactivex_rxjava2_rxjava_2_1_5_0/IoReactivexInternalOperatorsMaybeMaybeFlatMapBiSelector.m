//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiFunction.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"
#include "IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_serialVersionUID -2897979525538174559LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
            withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(self, source, mapper, resultSelector);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  [((id<IoReactivexMaybeSource>) nil_chk(source_)) subscribeWithIoReactivexMaybeObserver:create_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(observer, mapper_, resultSelector_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(resultSelector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "resultSelector_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/MaybeSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TU;>;>;Lio/reactivex/functions/BiFunction<-TT;-TU;+TR;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TR;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TU;>;>;", "Lio/reactivex/functions/BiFunction<-TT;-TU;+TR;>;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector = { "MaybeFlatMapBiSelector", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream_initWithIoReactivexMaybeSource_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  JreStrongAssign(&self->resultSelector_, resultSelector);
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector, initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_, source, mapper, resultSelector)
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector, initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_, source, mapper, resultSelector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector)

@implementation IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(self, actual, mapper, resultSelector);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(inner_);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_)) get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(inner_, d)) {
    [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_))->actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  id<IoReactivexMaybeSource> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The mapper returned a null MaybeSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_))->actual_)) onErrorWithJavaLangThrowable:ex];
    return;
  }
  if (IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(inner_, nil)) {
    JreStrongAssign(&((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_))->value_InnerObserver_, value);
    [((id<IoReactivexMaybeSource>) nil_chk(next)) subscribeWithIoReactivexMaybeObserver:inner_];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_))->actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *) nil_chk(inner_))->actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(mapper_);
  RELEASE_(inner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withIoReactivexFunctionsFunction:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "inner_", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LIoReactivexFunctionsFunction;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/MaybeObserver<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TU;>;>;Lio/reactivex/functions/BiFunction<-TT;-TU;+TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/MaybeSource<+TU;>;>;", "Lio/reactivex/internal/operators/maybe/MaybeFlatMapBiSelector$FlatMapBiMainObserver$InnerObserver<TT;TU;TR;>;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver = { "FlatMapBiMainObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 2, 11, 12, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->inner_, new_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_(actual, resultSelector));
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver, initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_, actual, mapper, resultSelector)
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver, initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_, actual, mapper, resultSelector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver)

@implementation IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_(self, actual, resultSelector);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  id t = self->value_InnerObserver_;
  JreStrongAssign(&self->value_InnerObserver_, nil);
  id r;
  @try {
    r = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsBiFunction>) nil_chk(resultSelector_)) applyWithId:t withId:value], @"The resultSelector returned a null value");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    return;
  }
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:r];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(resultSelector_);
  RELEASE_(value_InnerObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "resultSelector_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "value_InnerObserver_", "LNSObject;", .constantValue.asLong = 0, 0x0, 11, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/MaybeObserver<-TR;>;Lio/reactivex/functions/BiFunction<-TT;-TU;+TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TU;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TR;>;", "Lio/reactivex/functions/BiFunction<-TT;-TU;+TR;>;", "value", "TT;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 5, 4, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsBiFunction> resultSelector) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->resultSelector_, resultSelector);
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver, initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_, actual, resultSelector)
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsBiFunction> resultSelector) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver, initWithIoReactivexMaybeObserver_withIoReactivexFunctionsBiFunction_, actual, resultSelector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFlatMapBiSelector_FlatMapBiMainObserver_InnerObserver)
