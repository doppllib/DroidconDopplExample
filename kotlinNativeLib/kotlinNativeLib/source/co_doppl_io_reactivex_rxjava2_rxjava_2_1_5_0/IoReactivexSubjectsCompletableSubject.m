//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubjectsCompletableSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsCompletableSubject__Annotations$0();

inline jlong IoReactivexSubjectsCompletableSubject_CompletableDisposable_get_serialVersionUID();
#define IoReactivexSubjectsCompletableSubject_CompletableDisposable_serialVersionUID -7650903191002190468LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsCompletableSubject_CompletableDisposable, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexSubjectsCompletableSubject)

IOSObjectArray *IoReactivexSubjectsCompletableSubject_EMPTY;
IOSObjectArray *IoReactivexSubjectsCompletableSubject_TERMINATED;

@implementation IoReactivexSubjectsCompletableSubject

+ (IOSObjectArray *)EMPTY {
  return IoReactivexSubjectsCompletableSubject_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexSubjectsCompletableSubject_TERMINATED;
}

+ (IoReactivexSubjectsCompletableSubject *)create {
  return IoReactivexSubjectsCompletableSubject_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexSubjectsCompletableSubject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexSubjectsCompletableSubject_TERMINATED) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (e == nil) {
    e = create_JavaLangNullPointerException_initWithNSString_(@"Null errors are not allowed in 2.x");
  }
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    JreStrongAssign(&self->error_, e);
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexSubjectsCompletableSubject_TERMINATED];
      IoReactivexSubjectsCompletableSubject_CompletableDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexSubjectsCompletableSubject_CompletableDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexSubjectsCompletableSubject_CompletableDisposable *md = *b__++;
        [((id<IoReactivexCompletableObserver>) nil_chk(((IoReactivexSubjectsCompletableSubject_CompletableDisposable *) nil_chk(md))->actual_)) onErrorWithJavaLangThrowable:e];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexSubjectsCompletableSubject_TERMINATED];
      IoReactivexSubjectsCompletableSubject_CompletableDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexSubjectsCompletableSubject_CompletableDisposable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexSubjectsCompletableSubject_CompletableDisposable *md = *b__++;
        [((id<IoReactivexCompletableObserver>) nil_chk(((IoReactivexSubjectsCompletableSubject_CompletableDisposable *) nil_chk(md))->actual_)) onComplete];
      }
    }
  }
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer {
  IoReactivexSubjectsCompletableSubject_CompletableDisposable *md = create_IoReactivexSubjectsCompletableSubject_CompletableDisposable_initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_(observer, self);
  [((id<IoReactivexCompletableObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:md];
  if ([self addWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:md]) {
    if ([md isDisposed]) {
      [self removeWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:md];
    }
  }
  else {
    JavaLangThrowable *ex = error_;
    if (ex != nil) {
      [observer onErrorWithJavaLangThrowable:ex];
    }
    else {
      [observer onComplete];
    }
  }
}

- (jboolean)addWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:(IoReactivexSubjectsCompletableSubject_CompletableDisposable *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexSubjectsCompletableSubject_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexSubjectsCompletableSubject_CompletableDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:(IoReactivexSubjectsCompletableSubject_CompletableDisposable *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexSubjectsCompletableSubject_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexSubjectsCompletableSubject_CompletableDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (JavaLangThrowable *)getThrowable {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexSubjectsCompletableSubject_TERMINATED) {
    return error_;
  }
  return nil;
}

- (jboolean)hasThrowable {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexSubjectsCompletableSubject_TERMINATED && error_ != nil;
}

- (jboolean)hasComplete {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get] == IoReactivexSubjectsCompletableSubject_TERMINATED && error_ == nil;
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get]))->size_ != 0;
}

- (jint)observerCount {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get]))->size_;
}

- (void)dealloc {
  RELEASE_(observers_);
  RELEASE_(once_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexSubjectsCompletableSubject;", 0x9, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  methods[6].selector = @selector(addWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:);
  methods[7].selector = @selector(removeWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:);
  methods[8].selector = @selector(getThrowable);
  methods[9].selector = @selector(hasThrowable);
  methods[10].selector = @selector(hasComplete);
  methods[11].selector = @selector(hasObservers);
  methods[12].selector = @selector(observerCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "EMPTY", "[LIoReactivexSubjectsCompletableSubject_CompletableDisposable;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "TERMINATED", "[LIoReactivexSubjectsCompletableSubject_CompletableDisposable;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&IoReactivexSubjectsCompletableSubject__Annotations$0, "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "subscribeActual", "LIoReactivexCompletableObserver;", "add", "LIoReactivexSubjectsCompletableSubject_CompletableDisposable;", "remove", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;>;", &IoReactivexSubjectsCompletableSubject_EMPTY, &IoReactivexSubjectsCompletableSubject_TERMINATED };
  static const J2ObjcClassInfo _IoReactivexSubjectsCompletableSubject = { "CompletableSubject", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x11, 13, 5, -1, 8, -1, -1, -1 };
  return &_IoReactivexSubjectsCompletableSubject;
}

+ (void)initialize {
  if (self == [IoReactivexSubjectsCompletableSubject class]) {
    JreStrongAssignAndConsume(&IoReactivexSubjectsCompletableSubject_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsCompletableSubject_CompletableDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsCompletableSubject_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsCompletableSubject_CompletableDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexSubjectsCompletableSubject)
  }
}

@end

IoReactivexSubjectsCompletableSubject *IoReactivexSubjectsCompletableSubject_create() {
  IoReactivexSubjectsCompletableSubject_initialize();
  return create_IoReactivexSubjectsCompletableSubject_init();
}

void IoReactivexSubjectsCompletableSubject_init(IoReactivexSubjectsCompletableSubject *self) {
  IoReactivexCompletable_init(self);
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexSubjectsCompletableSubject_EMPTY));
}

IoReactivexSubjectsCompletableSubject *new_IoReactivexSubjectsCompletableSubject_init() {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsCompletableSubject, init)
}

IoReactivexSubjectsCompletableSubject *create_IoReactivexSubjectsCompletableSubject_init() {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsCompletableSubject, init)
}

IOSObjectArray *IoReactivexSubjectsCompletableSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsCompletableSubject)

@implementation IoReactivexSubjectsCompletableSubject_CompletableDisposable

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
             withIoReactivexSubjectsCompletableSubject:(IoReactivexSubjectsCompletableSubject *)parent {
  IoReactivexSubjectsCompletableSubject_CompletableDisposable_initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_(self, actual, parent);
  return self;
}

- (void)dispose {
  IoReactivexSubjectsCompletableSubject *parent = [self getAndSetWithId:nil];
  if (parent != nil) {
    [parent removeWithIoReactivexSubjectsCompletableSubject_CompletableDisposable:self];
  }
}

- (jboolean)isDisposed {
  return [self get] == nil;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexSubjectsCompletableSubject:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsCompletableSubject_CompletableDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexSubjectsCompletableSubject;", "LIoReactivexSubjectsCompletableSubject;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/subjects/CompletableSubject;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsCompletableSubject_CompletableDisposable = { "CompletableDisposable", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 3, 2, 1, -1, -1, 2, -1 };
  return &_IoReactivexSubjectsCompletableSubject_CompletableDisposable;
}

@end

void IoReactivexSubjectsCompletableSubject_CompletableDisposable_initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_(IoReactivexSubjectsCompletableSubject_CompletableDisposable *self, id<IoReactivexCompletableObserver> actual, IoReactivexSubjectsCompletableSubject *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  [self lazySetWithId:parent];
}

IoReactivexSubjectsCompletableSubject_CompletableDisposable *new_IoReactivexSubjectsCompletableSubject_CompletableDisposable_initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_(id<IoReactivexCompletableObserver> actual, IoReactivexSubjectsCompletableSubject *parent) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsCompletableSubject_CompletableDisposable, initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_, actual, parent)
}

IoReactivexSubjectsCompletableSubject_CompletableDisposable *create_IoReactivexSubjectsCompletableSubject_CompletableDisposable_initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_(id<IoReactivexCompletableObserver> actual, IoReactivexSubjectsCompletableSubject *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsCompletableSubject_CompletableDisposable, initWithIoReactivexCompletableObserver_withIoReactivexSubjectsCompletableSubject_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsCompletableSubject_CompletableDisposable)
