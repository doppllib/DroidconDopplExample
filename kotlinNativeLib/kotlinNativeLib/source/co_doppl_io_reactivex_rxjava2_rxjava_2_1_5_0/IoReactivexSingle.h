//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSingle")
#ifdef RESTRICT_IoReactivexSingle
#define INCLUDE_ALL_IoReactivexSingle 0
#else
#define INCLUDE_ALL_IoReactivexSingle 1
#endif
#undef RESTRICT_IoReactivexSingle

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexSingle_) && (INCLUDE_ALL_IoReactivexSingle || defined(INCLUDE_IoReactivexSingle))
#define IoReactivexSingle_

#define RESTRICT_IoReactivexSingleSource 1
#define INCLUDE_IoReactivexSingleSource 1
#include "IoReactivexSingleSource.h"

@class IOSClass;
@class IOSObjectArray;
@class IoReactivexCompletable;
@class IoReactivexFlowable;
@class IoReactivexMaybe;
@class IoReactivexObservable;
@class IoReactivexObserversTestObserver;
@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableSource;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsBiPredicate;
@protocol IoReactivexFunctionsBooleanSupplier;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction3;
@protocol IoReactivexFunctionsFunction4;
@protocol IoReactivexFunctionsFunction5;
@protocol IoReactivexFunctionsFunction6;
@protocol IoReactivexFunctionsFunction7;
@protocol IoReactivexFunctionsFunction8;
@protocol IoReactivexFunctionsFunction9;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexFunctionsPredicate;
@protocol IoReactivexObservableSource;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleOnSubscribe;
@protocol IoReactivexSingleOperator;
@protocol IoReactivexSingleTransformer;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexSingle : NSObject < IoReactivexSingleSource >

#pragma mark Public

- (instancetype)init;

+ (IoReactivexSingle *)ambWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexSingle *)ambArrayWithIoReactivexSingleSourceArray:(IOSObjectArray *)sources;

- (IoReactivexSingle *)ambWithWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (id)blockingGet;

- (IoReactivexSingle *)cache;

- (IoReactivexSingle *)castWithIOSClass:(IOSClass *)clazz;

- (IoReactivexSingle *)composeWithIoReactivexSingleTransformer:(id<IoReactivexSingleTransformer>)transformer;

+ (IoReactivexFlowable *)concatWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexObservable *)concatWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)sources;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                       withInt:(jint)prefetch;

+ (IoReactivexFlowable *)concatWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2;

+ (IoReactivexFlowable *)concatWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3;

+ (IoReactivexFlowable *)concatWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                               withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4;

+ (IoReactivexFlowable *)concatArrayWithIoReactivexSingleSourceArray:(IOSObjectArray *)sources;

- (IoReactivexFlowable *)concatWithWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (IoReactivexSingle *)containsWithId:(id)value;

- (IoReactivexSingle *)containsWithId:(id)value
  withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer;

+ (IoReactivexSingle *)createWithIoReactivexSingleOnSubscribe:(id<IoReactivexSingleOnSubscribe>)source;

+ (IoReactivexSingle *)deferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)singleSupplier;

- (IoReactivexSingle *)delayWithLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexSingle *)delayWithLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                         withBoolean:(jboolean)delayError;

- (IoReactivexSingle *)delayWithLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSingle *)delayWithLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                         withBoolean:(jboolean)delayError;

- (IoReactivexSingle *)delaySubscriptionWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (IoReactivexSingle *)delaySubscriptionWithLong:(jlong)time
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexSingle *)delaySubscriptionWithLong:(jlong)time
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                        withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSingle *)delaySubscriptionWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)other;

- (IoReactivexSingle *)delaySubscriptionWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexSingle *)delaySubscriptionWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (IoReactivexSingle *)doAfterSuccessWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterSuccess;

- (IoReactivexSingle *)doAfterTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onAfterTerminate;

- (IoReactivexSingle *)doFinallyWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally;

- (IoReactivexSingle *)doOnDisposeWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onDispose;

- (IoReactivexSingle *)doOnErrorWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (IoReactivexSingle *)doOnEventWithIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)onEvent;

- (IoReactivexSingle *)doOnSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe;

- (IoReactivexSingle *)doOnSuccessWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess;

+ (IoReactivexSingle *)equalsWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)first
                             withIoReactivexSingleSource:(id<IoReactivexSingleSource>)second;

+ (IoReactivexSingle *)errorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)errorSupplier;

+ (IoReactivexSingle *)errorWithJavaLangThrowable:(JavaLangThrowable *)exception;

- (IoReactivexMaybe *)filterWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexSingle *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexCompletable *)flatMapCompletableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexMaybe *)flatMapMaybeWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexObservable *)flatMapObservableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapPublisherWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flattenAsFlowableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexObservable *)flattenAsObservableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

+ (IoReactivexSingle *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

+ (IoReactivexSingle *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (IoReactivexSingle *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                     withLong:(jlong)timeout
                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexSingle *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                     withLong:(jlong)timeout
                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                     withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexSingle *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                     withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexSingle *)fromObservableWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)observableSource;

+ (IoReactivexSingle *)fromPublisherWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)publisher;

- (IoReactivexSingle *)hide;

+ (IoReactivexSingle *)justWithId:(id)item;

- (IoReactivexSingle *)liftWithIoReactivexSingleOperator:(id<IoReactivexSingleOperator>)lift;

- (IoReactivexSingle *)mapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

+ (IoReactivexFlowable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexSingle *)mergeWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source;

+ (IoReactivexFlowable *)mergeWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2;

+ (IoReactivexFlowable *)mergeWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3;

+ (IoReactivexFlowable *)mergeWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                              withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4;

- (IoReactivexFlowable *)mergeWithWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

+ (IoReactivexSingle *)never;

- (IoReactivexSingle *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSingle *)onErrorResumeNextWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunctionInCaseOfError;

- (IoReactivexSingle *)onErrorResumeNextWithIoReactivexSingle:(IoReactivexSingle *)resumeSingleInCaseOfError;

- (IoReactivexSingle *)onErrorReturnWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunction;

- (IoReactivexSingle *)onErrorReturnItemWithId:(id)value;

- (IoReactivexSingle *)onTerminateDetach;

- (IoReactivexFlowable *)repeat;

- (IoReactivexFlowable *)repeatWithLong:(jlong)times;

- (IoReactivexFlowable *)repeatUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexFlowable *)repeatWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (IoReactivexSingle *)retry;

- (IoReactivexSingle *)retryWithIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)predicate;

- (IoReactivexSingle *)retryWithLong:(jlong)times;

- (IoReactivexSingle *)retryWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexSingle *)retryWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (id<IoReactivexDisposablesDisposable>)subscribe;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)onCallback;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (void)subscribeWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)subscriber;

- (IoReactivexSingle *)subscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id<IoReactivexSingleObserver>)subscribeWithWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

- (IoReactivexSingle *)takeUntilWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (IoReactivexSingle *)takeUntilWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexSingle *)takeUntilWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (IoReactivexObserversTestObserver *)test;

- (IoReactivexObserversTestObserver *)testWithBoolean:(jboolean)cancelled;

- (IoReactivexSingle *)timeoutWithLong:(jlong)timeout
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexSingle *)timeoutWithLong:(jlong)timeout
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSingle *)timeoutWithLong:(jlong)timeout
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
           withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (IoReactivexSingle *)timeoutWithLong:(jlong)timeout
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
           withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

+ (IoReactivexSingle *)timerWithLong:(jlong)delay
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexSingle *)timerWithLong:(jlong)delay
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id)toWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)convert;

- (IoReactivexCompletable *)toCompletable;

- (IoReactivexFlowable *)toFlowable;

- (id<JavaUtilConcurrentFuture>)toFuture;

- (IoReactivexMaybe *)toMaybe;

- (IoReactivexObservable *)toObservable;

+ (IoReactivexSingle *)unsafeCreateWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)onSubscribe;

- (IoReactivexSingle *)unsubscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexSingle *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)singleFunction
                            withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer;

+ (IoReactivexSingle *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)singleFunction
                            withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                                 withBoolean:(jboolean)eager;

+ (IoReactivexSingle *)wrapWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source;

+ (IoReactivexSingle *)zipWithJavaLangIterable:(id<JavaLangIterable>)sources
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                   withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                    withIoReactivexFunctionsFunction3:(id<IoReactivexFunctionsFunction3>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                    withIoReactivexFunctionsFunction4:(id<IoReactivexFunctionsFunction4>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source5
                    withIoReactivexFunctionsFunction5:(id<IoReactivexFunctionsFunction5>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source5
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source6
                    withIoReactivexFunctionsFunction6:(id<IoReactivexFunctionsFunction6>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source5
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source6
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source7
                    withIoReactivexFunctionsFunction7:(id<IoReactivexFunctionsFunction7>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source5
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source6
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source7
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source8
                    withIoReactivexFunctionsFunction8:(id<IoReactivexFunctionsFunction8>)zipper;

+ (IoReactivexSingle *)zipWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source1
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source2
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source3
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source4
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source5
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source6
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source7
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source8
                          withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source9
                    withIoReactivexFunctionsFunction9:(id<IoReactivexFunctionsFunction9>)zipper;

+ (IoReactivexSingle *)zipArrayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                               withIoReactivexSingleSourceArray:(IOSObjectArray *)sources;

- (IoReactivexSingle *)zipWithWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other
                       withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver> __nonnull)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSingle)

FOUNDATION_EXPORT void IoReactivexSingle_init(IoReactivexSingle *self);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_ambWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_ambArrayWithIoReactivexSingleSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexObservable *IoReactivexSingle_concatWithIoReactivexObservableSource_(id<IoReactivexObservableSource> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_concatArrayWithIoReactivexSingleSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_createWithIoReactivexSingleOnSubscribe_(id<IoReactivexSingleOnSubscribe> source);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_deferWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> singleSupplier);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_errorWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_errorWithJavaLangThrowable_(JavaLangThrowable *exception);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromFutureWithJavaUtilConcurrentFuture_withIoReactivexScheduler_(id<JavaUtilConcurrentFuture> future, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromPublisherWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_fromObservableWithIoReactivexObservableSource_(id<IoReactivexObservableSource> observableSource);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_justWithId_(id item);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_mergeWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_mergeWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_mergeWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_mergeWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_mergeWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexSingle_mergeWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_never();

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_timerWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_timerWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_equalsWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_unsafeCreateWithIoReactivexSingleSource_(id<IoReactivexSingleSource> onSubscribe);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_wrapWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithJavaLangIterable_withIoReactivexFunctionsFunction_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsBiFunction_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexFunctionsBiFunction> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction3_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexFunctionsFunction3> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction4_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexFunctionsFunction4> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction5_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexSingleSource> source5, id<IoReactivexFunctionsFunction5> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction6_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexSingleSource> source5, id<IoReactivexSingleSource> source6, id<IoReactivexFunctionsFunction6> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction7_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexSingleSource> source5, id<IoReactivexSingleSource> source6, id<IoReactivexSingleSource> source7, id<IoReactivexFunctionsFunction7> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction8_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexSingleSource> source5, id<IoReactivexSingleSource> source6, id<IoReactivexSingleSource> source7, id<IoReactivexSingleSource> source8, id<IoReactivexFunctionsFunction8> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipWithIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexSingleSource_withIoReactivexFunctionsFunction9_(id<IoReactivexSingleSource> source1, id<IoReactivexSingleSource> source2, id<IoReactivexSingleSource> source3, id<IoReactivexSingleSource> source4, id<IoReactivexSingleSource> source5, id<IoReactivexSingleSource> source6, id<IoReactivexSingleSource> source7, id<IoReactivexSingleSource> source8, id<IoReactivexSingleSource> source9, id<IoReactivexFunctionsFunction9> zipper);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexSingle_zipArrayWithIoReactivexFunctionsFunction_withIoReactivexSingleSourceArray_(id<IoReactivexFunctionsFunction> zipper, IOSObjectArray *sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSingle)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexSingle")
