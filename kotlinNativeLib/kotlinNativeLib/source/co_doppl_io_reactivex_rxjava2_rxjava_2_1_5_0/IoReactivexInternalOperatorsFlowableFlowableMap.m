//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableMap.h"
#include "IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber.h"
#include "IoReactivexInternalSubscribersBasicFuseableSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableMap

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsFlowableFlowableMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(self, source, mapper);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), mapper_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(s, mapper_)];
  }
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+TU;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Lio/reactivex/functions/Function<-TT;+TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber;LIoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMap = { "FlowableMap", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMap;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsFlowableFlowableMap *new_IoReactivexInternalOperatorsFlowableFlowableMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_, source, mapper)
}

IoReactivexInternalOperatorsFlowableFlowableMap *create_IoReactivexInternalOperatorsFlowableFlowableMap_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_, source, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMap)

@implementation IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(self, actual, mapper);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:nil];
    return;
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.");
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:v];
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  id t = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  return t != nil ? IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.") : nil;
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;", "(Lorg/reactivestreams/Subscriber<-TU;>;Lio/reactivex/functions/Function<-TT;+TU;>;)V", "onNext", "LNSObject;", "(TT;)V", "requestFusion", "I", "LJavaLangException;", "()TU;", "Lio/reactivex/functions/Function<-TT;+TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableSubscriber<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber = { "MapSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalSubscribersBasicFuseableSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_, actual, mapper)
}

IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_, actual, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)function {
  IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(self, actual, function);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:nil];
    return;
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.");
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return;
  }
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:v];
}

- (jboolean)tryOnNextWithId:(id)t {
  if (done_) {
    return false;
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.");
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
    return true;
  }
  return [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) tryOnNextWithId:v];
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  id t = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  return t != nil ? IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper function returned a null value.") : nil;
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(requestFusionWithInt:);
  methods[4].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexFunctionsFunction;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TU;>;Lio/reactivex/functions/Function<-TT;+TU;>;)V", "onNext", "LNSObject;", "(TT;)V", "tryOnNext", "(TT;)Z", "requestFusion", "I", "LJavaLangException;", "()TU;", "Lio/reactivex/functions/Function<-TT;+TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber = { "MapConditionalSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 1, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function) {
  IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_(self, actual);
  JreStrongAssign(&self->mapper_, function);
}

IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_, actual, function)
}

IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_, actual, function)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber)
