//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalSubscribersInnerQueuedSubscriber.h"
#include "IoReactivexInternalSubscribersInnerQueuedSubscriberSupport.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilQueueDrainHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalSubscribersInnerQueuedSubscriber_get_serialVersionUID();
#define IoReactivexInternalSubscribersInnerQueuedSubscriber_serialVersionUID 22876611072430776LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscribersInnerQueuedSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalSubscribersInnerQueuedSubscriber

- (instancetype)initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport:(id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>)parent
                                                                           withInt:(jint)prefetch {
  IoReactivexInternalSubscribersInnerQueuedSubscriber_initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_(self, parent, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        JreAssignVolatileBoolean(&done_, true);
        [((id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>) nil_chk(parent_)) innerCompleteWithIoReactivexInternalSubscribersInnerQueuedSubscriber:self];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(s, prefetch_);
        return;
      }
    }
    JreVolatileStrongAssign(&queue_, IoReactivexInternalUtilQueueDrainHelper_createQueueWithInt_(prefetch_));
    IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(s, prefetch_);
  }
}

- (void)onNextWithId:(id)t {
  if (fusionMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>) nil_chk(parent_)) innerNextWithIoReactivexInternalSubscribersInnerQueuedSubscriber:self withId:t];
  }
  else {
    [((id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>) nil_chk(parent_)) drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>) nil_chk(parent_)) innerErrorWithIoReactivexInternalSubscribersInnerQueuedSubscriber:self withJavaLangThrowable:t];
}

- (void)onComplete {
  [((id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport>) nil_chk(parent_)) innerCompleteWithIoReactivexInternalSubscribersInnerQueuedSubscriber:self];
}

- (void)requestWithLong:(jlong)n {
  if (fusionMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = produced_ + n;
    if (p >= limit_) {
      produced_ = 0LL;
      [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
  }
}

- (void)requestOne {
  if (fusionMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = produced_ + 1;
    if (p == limit_) {
      produced_ = 0LL;
      [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
  }
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDone {
  return JreLoadVolatileBoolean(&done_);
}

- (void)setDone {
  JreAssignVolatileBoolean(&self->done_, true);
}

- (id<IoReactivexInternalFuseableSimpleQueue>)queue {
  return JreLoadVolatileId(&queue_);
}

- (void)__javaClone:(IoReactivexInternalSubscribersInnerQueuedSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalFuseableSimpleQueue;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(requestOne);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(isDone);
  methods[9].selector = @selector(setDone);
  methods[10].selector = @selector(queue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalSubscribersInnerQueuedSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalSubscribersInnerQueuedSubscriberSupport;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 13, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fusionMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalSubscribersInnerQueuedSubscriberSupport;I", "(Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport<TT;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "()Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport<TT;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscribersInnerQueuedSubscriber = { "InnerQueuedSubscriber", "io.reactivex.internal.subscribers", ptrTable, methods, fields, 7, 0x11, 11, 8, -1, -1, -1, 14, -1 };
  return &_IoReactivexInternalSubscribersInnerQueuedSubscriber;
}

@end

void IoReactivexInternalSubscribersInnerQueuedSubscriber_initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_(IoReactivexInternalSubscribersInnerQueuedSubscriber *self, id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport> parent, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
}

IoReactivexInternalSubscribersInnerQueuedSubscriber *new_IoReactivexInternalSubscribersInnerQueuedSubscriber_initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_(id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport> parent, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscribersInnerQueuedSubscriber, initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_, parent, prefetch)
}

IoReactivexInternalSubscribersInnerQueuedSubscriber *create_IoReactivexInternalSubscribersInnerQueuedSubscriber_initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_(id<IoReactivexInternalSubscribersInnerQueuedSubscriberSupport> parent, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscribersInnerQueuedSubscriber, initWithIoReactivexInternalSubscribersInnerQueuedSubscriberSupport_withInt_, parent, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscribersInnerQueuedSubscriber)
