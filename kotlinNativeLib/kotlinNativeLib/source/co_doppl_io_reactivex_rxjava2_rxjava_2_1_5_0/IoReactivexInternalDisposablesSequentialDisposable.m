//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalDisposablesSequentialDisposable_get_serialVersionUID();
#define IoReactivexInternalDisposablesSequentialDisposable_serialVersionUID -754898800686245608LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalDisposablesSequentialDisposable, serialVersionUID, jlong)

@implementation IoReactivexInternalDisposablesSequentialDisposable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalDisposablesSequentialDisposable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)initial {
  IoReactivexInternalDisposablesSequentialDisposable_initWithIoReactivexDisposablesDisposable_(self, initial);
  return self;
}

- (jboolean)updateWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)next {
  return IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, next);
}

- (jboolean)replaceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)next {
  return IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, next);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(updateWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(replaceWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalDisposablesSequentialDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesDisposable;", "update", "replace", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesSequentialDisposable = { "SequentialDisposable", "io.reactivex.internal.disposables", ptrTable, methods, fields, 7, 0x11, 6, 1, -1, -1, -1, 3, -1 };
  return &_IoReactivexInternalDisposablesSequentialDisposable;
}

@end

void IoReactivexInternalDisposablesSequentialDisposable_init(IoReactivexInternalDisposablesSequentialDisposable *self) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalDisposablesSequentialDisposable *new_IoReactivexInternalDisposablesSequentialDisposable_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesSequentialDisposable, init)
}

IoReactivexInternalDisposablesSequentialDisposable *create_IoReactivexInternalDisposablesSequentialDisposable_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesSequentialDisposable, init)
}

void IoReactivexInternalDisposablesSequentialDisposable_initWithIoReactivexDisposablesDisposable_(IoReactivexInternalDisposablesSequentialDisposable *self, id<IoReactivexDisposablesDisposable> initial) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  [self lazySetWithId:initial];
}

IoReactivexInternalDisposablesSequentialDisposable *new_IoReactivexInternalDisposablesSequentialDisposable_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> initial) {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesSequentialDisposable, initWithIoReactivexDisposablesDisposable_, initial)
}

IoReactivexInternalDisposablesSequentialDisposable *create_IoReactivexInternalDisposablesSequentialDisposable_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> initial) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesSequentialDisposable, initWithIoReactivexDisposablesDisposable_, initial)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesSequentialDisposable)
