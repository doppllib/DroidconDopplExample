//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableRange.h"
#include "IoReactivexInternalSubscriptionsBasicQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_serialVersionUID -2252972430506210021LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_serialVersionUID 2587302975077663557LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_serialVersionUID 2587302975077663557LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableRange

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)count {
  IoReactivexInternalOperatorsFlowableFlowableRange_initWithInt_withInt_(self, start, count);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), start_, end_)];
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:create_IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(s, start_, end_)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "start_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Integer;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription;LIoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription;LIoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription;", "Lio/reactivex/Flowable<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRange = { "FlowableRange", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 4, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRange;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRange_initWithInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableRange *self, jint start, jint count) {
  IoReactivexFlowable_init(self);
  self->start_ = start;
  self->end_ = start + count;
}

IoReactivexInternalOperatorsFlowableFlowableRange *new_IoReactivexInternalOperatorsFlowableFlowableRange_initWithInt_withInt_(jint start, jint count) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange, initWithInt_withInt_, start, count)
}

IoReactivexInternalOperatorsFlowableFlowableRange *create_IoReactivexInternalOperatorsFlowableFlowableRange_initWithInt_withInt_(jint start, jint count) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange, initWithInt_withInt_, start, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRange)

@implementation IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription

- (instancetype)initWithInt:(jint)index
                    withInt:(jint)end {
  IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_initWithInt_withInt_(self, index, end);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  return mode & IoReactivexInternalFuseableQueueFuseable_SYNC;
}

- (JavaLangInteger * __nullable)poll {
  jint i = index_;
  if (i == end_) {
    return nil;
  }
  index_ = i + 1;
  return JavaLangInteger_valueOfWithInt_(i);
}

- (jboolean)isEmpty {
  return index_ == end_;
}

- (void)clear {
  index_ = end_;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    if (IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n) == 0LL) {
      if (n == JavaLangLong_MAX_VALUE) {
        [self fastPath];
      }
      else {
        [self slowPathWithLong:n];
      }
    }
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)fastPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)slowPathWithLong:(jlong)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(fastPath);
  methods[8].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "requestFusion", "I", "request", "J", "slowPath", "LIoReactivexInternalOperatorsFlowableFlowableRange;", "Lio/reactivex/internal/subscriptions/BasicQueueSubscription<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription = { "BaseRangeSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 9, 4, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_initWithInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription *self, jint index, jint end) {
  IoReactivexInternalSubscriptionsBasicQueueSubscription_init(self);
  self->index_ = index;
  self->end_ = end;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)index
                                             withInt:(jint)end {
  IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, index, end);
  return self;
}

- (void)fastPath {
  jint f = end_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (jint i = index_; i != f; i++) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
}

- (void)slowPathWithLong:(jlong)r {
  jlong e = 0;
  jint f = end_;
  jint i = index_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (; ; ) {
    while (e != r && i != f) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
      e++;
      i++;
    }
    if (i == f) {
      if (!JreLoadVolatileBoolean(&cancelled_)) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      }
      return;
    }
    r = [self get];
    if (e == r) {
      index_ = i;
      r = [self addAndGetWithLong:-e];
      if (r == 0LL) {
        return;
      }
      e = 0LL;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withInt:);
  methods[1].selector = @selector(fastPath);
  methods[2].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;II", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Integer;>;II)V", "slowPath", "J", "Lorg/reactivestreams/Subscriber<-Ljava/lang/Integer;>;", "LIoReactivexInternalOperatorsFlowableFlowableRange;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription = { "RangeSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription *self, id<OrgReactivestreamsSubscriber> actual, jint index, jint end) {
  IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_initWithInt_withInt_(self, index, end);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription *new_IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint index, jint end) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, index, end)
}

IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription *create_IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint index, jint end) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, index, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRange_RangeSubscription)

@implementation IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                                 withInt:(jint)index
                                                                 withInt:(jint)end {
  IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_(self, actual, index, end);
  return self;
}

- (void)fastPath {
  jint f = end_;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  for (jint i = index_; i != f; i++) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
}

- (void)slowPathWithLong:(jlong)r {
  jlong e = 0;
  jint f = end_;
  jint i = index_;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  for (; ; ) {
    while (e != r && i != f) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if ([((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:JavaLangInteger_valueOfWithInt_(i)]) {
        e++;
      }
      i++;
    }
    if (i == f) {
      if (!JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
      }
      return;
    }
    r = [self get];
    if (e == r) {
      index_ = i;
      r = [self addAndGetWithLong:-e];
      if (r == 0) {
        return;
      }
      e = 0;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withInt:withInt:);
  methods[1].selector = @selector(fastPath);
  methods[2].selector = @selector(slowPathWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;II", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-Ljava/lang/Integer;>;II)V", "slowPath", "J", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-Ljava/lang/Integer;>;", "LIoReactivexInternalOperatorsFlowableFlowableRange;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription = { "RangeConditionalSubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint index, jint end) {
  IoReactivexInternalOperatorsFlowableFlowableRange_BaseRangeSubscription_initWithInt_withInt_(self, index, end);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription *new_IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint index, jint end) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription, initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_, actual, index, end)
}

IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription *create_IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint index, jint end) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription, initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withInt_, actual, index, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRange_RangeConditionalSubscription)
