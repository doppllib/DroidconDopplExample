//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "IoReactivexSubscribersDisposableSubscriber.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(self, source, other, bufferSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), other_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withJavaUtilConcurrentCallable:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LJavaUtilConcurrentCallable;I", "(Lio/reactivex/Flowable<TT;>;Ljava/util/concurrent/Callable<+Lorg/reactivestreams/Publisher<TB;>;>;I)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;)V", "Ljava/util/concurrent/Callable<+Lorg/reactivestreams/Publisher<TB;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Flowable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier = { "FlowableWindowBoundarySupplier", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->other_, other);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_, source, other, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier, initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_, source, other, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber)

id IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT;

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber

+ (id)NEXT {
  return IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT;
}

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(self, actual, other, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<OrgReactivestreamsSubscriber> a = actual_;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id<OrgReactivestreamsPublisher> p;
    @try {
      p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(other_)) call], @"The first window publisher supplied is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      [a onErrorWithJavaLangThrowable:e];
      return;
    }
    IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
    jlong r = [self requested];
    if (r != 0LL) {
      [a onNextWithId:w];
      if (r != JavaLangLong_MAX_VALUE) {
        [self producedWithLong:1];
      }
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      [a onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver first window due to lack of requests")];
      return;
    }
    JreStrongAssign(&window_, w);
    IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *inner = create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(self);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:nil withId:inner]) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:inner];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if ([self fastEnter]) {
    IoReactivexProcessorsUnicastProcessor *w = window_;
    [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:t];
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)drainLoop {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  jint missed = 1;
  IoReactivexProcessorsUnicastProcessor *w = window_;
  for (; ; ) {
    for (; ; ) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) poll];
      jboolean empty = o == nil;
      if (d && empty) {
        IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
        JavaLangThrowable *e = error_;
        if (e != nil) {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
      if (o == IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT) {
        [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
        if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
          IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
          return;
        }
        if (JreLoadVolatileBoolean(&cancelled_)) {
          continue;
        }
        id<OrgReactivestreamsPublisher> p;
        @try {
          p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(other_)) call], @"The publisher supplied is null");
        }
        @catch (JavaLangThrowable *e) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
          IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
          return;
        }
        w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
        jlong r = [self requested];
        if (r != 0LL) {
          [windows_ getAndIncrement];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
          if (r != JavaLangLong_MAX_VALUE) {
            [self producedWithLong:1];
          }
        }
        else {
          JreAssignVolatileBoolean(&cancelled_, true);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver new window due to lack of requests")];
          continue;
        }
        JreStrongAssign(&window_, w);
        IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *b = create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(self);
        if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:[boundary_ get] withId:b]) {
          [((id<OrgReactivestreamsPublisher>) nil_chk(p)) subscribeWithOrgReactivestreamsSubscriber:b];
        }
        continue;
      }
      [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      return;
    }
  }
}

- (void)next {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(other_);
  RELEASE_(s_);
  RELEASE_(boundary_);
  RELEASE_(window_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentCallable:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(drainLoop);
  methods[8].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "boundary_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "window_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "NEXT", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentCallable;I", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;Ljava/util/concurrent/Callable<+Lorg/reactivestreams/Publisher<TB;>;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Ljava/util/concurrent/Callable<+Lorg/reactivestreams/Publisher<TB;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/processors/UnicastProcessor<TT;>;", &IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT, "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;Ljava/lang/Object;Lio/reactivex/Flowable<TT;>;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber = { "WindowBoundaryMainSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 7, 15, -1, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->boundary_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->other_, other);
  self->bufferSize_ = bufferSize;
  [self->windows_ lazySetWithLong:1];
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_, actual, other, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_, actual, other, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self cancel];
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *) nil_chk(parent_)) next];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *) nil_chk(parent_)) onComplete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber<TT;TB;>;)V", "onNext", "LNSObject;", "(TB;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber<TT;TB;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/subscribers/DisposableSubscriber<TB;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber = { "WindowBoundaryInnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent) {
  IoReactivexSubscribersDisposableSubscriber_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_, parent)
}

IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber)
