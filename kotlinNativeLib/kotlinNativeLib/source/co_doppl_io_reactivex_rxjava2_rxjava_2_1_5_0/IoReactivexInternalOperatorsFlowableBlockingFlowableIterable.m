//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableBlockingFlowableIterable.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/concurrent/locks/Condition.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/function/Consumer.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_serialVersionUID 6695226475494099826LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableBlockingFlowableIterable

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_initWithIoReactivexFlowable_withInt_(self, source, bufferSize);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator *it = create_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_initWithInt_(bufferSize_);
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:it];
  return it;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withInt:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;I", "(Lio/reactivex/Flowable<TT;>;I)V", "()Ljava/util/Iterator<TT;>;", "Lio/reactivex/Flowable<TT;>;", "LIoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableBlockingFlowableIterable = { "BlockingFlowableIterable", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 4, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable;
}

@end

void IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable *self, IoReactivexFlowable *source, jint bufferSize) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableBlockingFlowableIterable *new_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable, initWithIoReactivexFlowable_withInt_, source, bufferSize)
}

IoReactivexInternalOperatorsFlowableBlockingFlowableIterable *create_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable, initWithIoReactivexFlowable_withInt_, source, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable)

@implementation IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator

- (instancetype)initWithInt:(jint)batchSize {
  IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_initWithInt_(self, batchSize);
  return self;
}

- (jboolean)hasNext {
  for (; ; ) {
    jboolean d = JreLoadVolatileBoolean(&done_);
    jboolean empty = [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(queue_)) isEmpty];
    if (d) {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(e));
      }
      else if (empty) {
        return false;
      }
    }
    if (empty) {
      IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
      [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock_)) lock];
      @try {
        while (!JreLoadVolatileBoolean(&done_) && [queue_ isEmpty]) {
          [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) await];
        }
      }
      @catch (JavaLangInterruptedException *ex) {
        [self run];
        @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(ex));
      }
      @finally {
        [lock_ unlock];
      }
    }
    else {
      return true;
    }
  }
}

- (id)next {
  if ([self hasNext]) {
    id v = [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(queue_)) poll];
    jlong p = produced_ + 1;
    if (p == limit_) {
      produced_ = 0;
      [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
    return v;
  }
  @throw create_JavaUtilNoSuchElementException_init();
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:batchSize_];
  }
}

- (void)onNextWithId:(id)t {
  if (![((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(queue_)) offerWithId:t]) {
    IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
    [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!")];
  }
  else {
    [self signalConsumer];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self signalConsumer];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self signalConsumer];
}

- (void)signalConsumer {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock_)) lock];
  @try {
    [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) signalAll];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)run {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [self signalConsumer];
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"remove");
}

- (void)dispose {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_isCancelledWithOrgReactivestreamsSubscription_([self get]);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(lock_);
  RELEASE_(condition_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(signalConsumer);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(remove);
  methods[10].selector = @selector(dispose);
  methods[11].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "batchSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "condition_", "LJavaUtilConcurrentLocksCondition;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()TT;", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/queue/SpscArrayQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableBlockingFlowableIterable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;Ljava/util/Iterator<TT;>;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator = { "BlockingFlowableIterator", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 12, 9, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator;
}

@end

void IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_initWithInt_(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator *self, jint batchSize) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(batchSize));
  self->batchSize_ = batchSize;
  self->limit_ = batchSize - (JreRShift32(batchSize, 2));
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->condition_, [self->lock_ newCondition]);
}

IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator *new_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_initWithInt_(jint batchSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator, initWithInt_, batchSize)
}

IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator *create_IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator_initWithInt_(jint batchSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator, initWithInt_, batchSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableBlockingFlowableIterable_BlockingFlowableIterator)
