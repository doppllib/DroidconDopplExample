//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed

#if !defined (IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed))
#define IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed *self, id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed *new_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed *create_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver))
#define IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  id<IoReactivexDisposablesDisposable> s_;
  volatile_jboolean gate_;
  jboolean done_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver *new_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver *create_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed_DebounceTimedObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableThrottleFirstTimed")
