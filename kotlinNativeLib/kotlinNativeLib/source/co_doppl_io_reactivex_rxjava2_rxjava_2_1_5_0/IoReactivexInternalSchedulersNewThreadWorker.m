//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableContainer.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalSchedulersInstantPeriodicTask.h"
#include "IoReactivexInternalSchedulersNewThreadWorker.h"
#include "IoReactivexInternalSchedulersScheduledDirectPeriodicTask.h"
#include "IoReactivexInternalSchedulersScheduledDirectTask.h"
#include "IoReactivexInternalSchedulersScheduledRunnable.h"
#include "IoReactivexInternalSchedulersSchedulerPoolFactory.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/util/List.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"

@interface IoReactivexInternalSchedulersNewThreadWorker () {
 @public
  id<JavaUtilConcurrentScheduledExecutorService> executor_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersNewThreadWorker, executor_, id<JavaUtilConcurrentScheduledExecutorService>)

@implementation IoReactivexInternalSchedulersNewThreadWorker

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run {
  return [self scheduleWithJavaLangRunnable:run withLong:0 withJavaUtilConcurrentTimeUnit:nil];
}

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)action
                                                                      withLong:(jlong)delayTime
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
  return [self scheduleActualWithJavaLangRunnable:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit withIoReactivexInternalDisposablesDisposableContainer:nil];
}

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                  withLong:(jlong)delayTime
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  IoReactivexInternalSchedulersScheduledDirectTask *task = create_IoReactivexInternalSchedulersScheduledDirectTask_initWithJavaLangRunnable_(IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run));
  @try {
    id<JavaUtilConcurrentFuture> f;
    if (delayTime <= 0LL) {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) submitWithJavaUtilConcurrentCallable:task];
    }
    else {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaUtilConcurrentCallable:task withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
    }
    [task setFutureWithJavaUtilConcurrentFuture:f];
    return task;
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
}

- (id<IoReactivexDisposablesDisposable>)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                              withLong:(jlong)initialDelay
                                                                              withLong:(jlong)period
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  id<JavaLangRunnable> decoratedRun = IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run);
  if (period <= 0LL) {
    IoReactivexInternalSchedulersInstantPeriodicTask *periodicWrapper = create_IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(decoratedRun, executor_);
    @try {
      id<JavaUtilConcurrentFuture> f;
      if (initialDelay <= 0LL) {
        f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) submitWithJavaUtilConcurrentCallable:periodicWrapper];
      }
      else {
        f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaUtilConcurrentCallable:periodicWrapper withLong:initialDelay withJavaUtilConcurrentTimeUnit:unit];
      }
      [periodicWrapper setFirstWithJavaUtilConcurrentFuture:f];
    }
    @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
      return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
    }
    return periodicWrapper;
  }
  IoReactivexInternalSchedulersScheduledDirectPeriodicTask *task = create_IoReactivexInternalSchedulersScheduledDirectPeriodicTask_initWithJavaLangRunnable_(decoratedRun);
  @try {
    id<JavaUtilConcurrentFuture> f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleAtFixedRateWithJavaLangRunnable:task withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
    [task setFutureWithJavaUtilConcurrentFuture:f];
    return task;
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
}

- (IoReactivexInternalSchedulersScheduledRunnable * __nonnull)scheduleActualWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                                        withLong:(jlong)delayTime
                                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit
                                           withIoReactivexInternalDisposablesDisposableContainer:(id<IoReactivexInternalDisposablesDisposableContainer> __nullable)parent {
  id<JavaLangRunnable> decoratedRun = IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run);
  IoReactivexInternalSchedulersScheduledRunnable *sr = create_IoReactivexInternalSchedulersScheduledRunnable_initWithJavaLangRunnable_withIoReactivexInternalDisposablesDisposableContainer_(decoratedRun, parent);
  if (parent != nil) {
    if (![parent addWithIoReactivexDisposablesDisposable:sr]) {
      return sr;
    }
  }
  id<JavaUtilConcurrentFuture> f;
  @try {
    if (delayTime <= 0) {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) submitWithJavaUtilConcurrentCallable:sr];
    }
    else {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaUtilConcurrentCallable:sr withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
    }
    [sr setFutureWithJavaUtilConcurrentFuture:f];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    if (parent != nil) {
      [parent removeWithIoReactivexDisposablesDisposable:sr];
    }
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
  return sr;
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&disposed_)) {
    JreAssignVolatileBoolean(&disposed_, true);
    [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) shutdownNow];
  }
}

- (void)shutdown {
  if (!JreLoadVolatileBoolean(&disposed_)) {
    JreAssignVolatileBoolean(&disposed_, true);
    [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) shutdown];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)dealloc {
  RELEASE_(executor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalSchedulersScheduledRunnable;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentThreadFactory:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:);
  methods[2].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(scheduleDirectWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(schedulePeriodicallyDirectWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(scheduleActualWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexInternalDisposablesDisposableContainer:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(shutdown);
  methods[8].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentThreadFactory;", "schedule", "LJavaLangRunnable;", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "scheduleDirect", "schedulePeriodicallyDirect", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "scheduleActual", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;LIoReactivexInternalDisposablesDisposableContainer;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersNewThreadWorker = { "NewThreadWorker", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersNewThreadWorker;
}

@end

void IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersNewThreadWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexScheduler_Worker_init(self);
  JreStrongAssign(&self->executor_, IoReactivexInternalSchedulersSchedulerPoolFactory_createWithJavaUtilConcurrentThreadFactory_(threadFactory));
}

IoReactivexInternalSchedulersNewThreadWorker *new_IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersNewThreadWorker, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

IoReactivexInternalSchedulersNewThreadWorker *create_IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersNewThreadWorker, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersNewThreadWorker)
