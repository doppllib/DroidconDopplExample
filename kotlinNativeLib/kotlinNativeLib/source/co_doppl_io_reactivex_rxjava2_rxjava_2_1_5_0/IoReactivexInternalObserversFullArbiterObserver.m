//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesObserverFullArbiter.h"
#include "IoReactivexInternalObserversFullArbiterObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalObserversFullArbiterObserver

- (instancetype)initWithIoReactivexInternalDisposablesObserverFullArbiter:(IoReactivexInternalDisposablesObserverFullArbiter *)arbiter {
  IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(self, arbiter);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) setDisposableWithIoReactivexDisposablesDisposable:s];
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onNextWithId:t withIoReactivexDisposablesDisposable:s_];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onErrorWithJavaLangThrowable:t withIoReactivexDisposablesDisposable:s_];
}

- (void)onComplete {
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onCompleteWithIoReactivexDisposablesDisposable:s_];
}

- (void)dealloc {
  RELEASE_(arbiter_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalDisposablesObserverFullArbiter:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arbiter_", "LIoReactivexInternalDisposablesObserverFullArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalDisposablesObserverFullArbiter;", "(Lio/reactivex/internal/disposables/ObserverFullArbiter<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/disposables/ObserverFullArbiter<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversFullArbiterObserver = { "FullArbiterObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, 10, -1 };
  return &_IoReactivexInternalObserversFullArbiterObserver;
}

@end

void IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(IoReactivexInternalObserversFullArbiterObserver *self, IoReactivexInternalDisposablesObserverFullArbiter *arbiter) {
  NSObject_init(self);
  JreStrongAssign(&self->arbiter_, arbiter);
}

IoReactivexInternalObserversFullArbiterObserver *new_IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(IoReactivexInternalDisposablesObserverFullArbiter *arbiter) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversFullArbiterObserver, initWithIoReactivexInternalDisposablesObserverFullArbiter_, arbiter)
}

IoReactivexInternalObserversFullArbiterObserver *create_IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(IoReactivexInternalDisposablesObserverFullArbiter *arbiter) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversFullArbiterObserver, initWithIoReactivexInternalDisposablesObserverFullArbiter_, arbiter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversFullArbiterObserver)
