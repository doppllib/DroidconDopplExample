//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableFlatMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableFlatMap

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMap))
#define IoReactivexInternalOperatorsObservableObservableFlatMap_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableFlatMap : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  jint maxConcurrency_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)bufferSize;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsObservableObservableFlatMap *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap *new_IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap *create_IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMap)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver))
#define IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol IoReactivexObservableSource;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilQueue;

@interface IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexDisposablesDisposable, IoReactivexObserver > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  jint maxConcurrency_;
  jint bufferSize_;
  volatile_id queue_;
  volatile_jboolean done_;
  IoReactivexInternalUtilAtomicThrowable *errors_;
  volatile_jboolean cancelled_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  id<IoReactivexDisposablesDisposable> s_;
  jlong uniqueId_;
  jlong lastId_;
  jint lastIndex_;
  id<JavaUtilQueue> sources_;
  jint wip_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)CANCELLED;

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors
                                    withInt:(jint)maxConcurrency
                                    withInt:(jint)bufferSize;

- (jboolean)addInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner;

- (jboolean)checkTerminate;

- (jboolean)disposeAll;

- (void)drain;

- (void)drainLoop;

- (void)removeInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner;

- (void)subscribeInnerWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)p;

- (void)tryEmitWithId:(id)value
withIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner;

- (void)tryEmitScalarWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, queue_, id<IoReactivexInternalFuseableSimplePlainQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, errors_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, sources_, id<JavaUtilQueue>)

inline IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_get_CANCELLED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, CANCELLED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver))
#define IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver > {
 @public
  jlong id__;
  IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent_;
  volatile_jboolean done_;
  volatile_id queue_;
  jint fusionMode_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *)parent
                                                                                     withLong:(jlong)id_;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver, parent_, IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *self, IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMap")
