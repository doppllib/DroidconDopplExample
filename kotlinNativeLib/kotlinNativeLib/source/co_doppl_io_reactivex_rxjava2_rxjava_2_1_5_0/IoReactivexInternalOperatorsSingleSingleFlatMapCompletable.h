//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable

#if !defined (IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable))
#define IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

@protocol IoReactivexCompletableObserver;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleFlatMapCompletable : IoReactivexCompletable {
 @public
  id<IoReactivexSingleSource> source_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable *self, id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapCompletable *new_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapCompletable *create_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver))
#define IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexCompletableObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver *self, id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver *new_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver *create_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFlatMapCompletable_FlatMapCompletableObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapCompletable")
