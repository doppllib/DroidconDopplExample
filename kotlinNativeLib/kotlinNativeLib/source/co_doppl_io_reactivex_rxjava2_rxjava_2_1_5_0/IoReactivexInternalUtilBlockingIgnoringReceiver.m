//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalUtilBlockingIgnoringReceiver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/CountDownLatch.h"

@implementation IoReactivexInternalUtilBlockingIgnoringReceiver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilBlockingIgnoringReceiver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)acceptWithId:(JavaLangThrowable *)e {
  JreStrongAssign(&error_, e);
  [self countDown];
}

- (void)run {
  [self countDown];
}

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithId:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaLangThrowable;", "Ljava/util/concurrent/CountDownLatch;Lio/reactivex/functions/Consumer<Ljava/lang/Throwable;>;Lio/reactivex/functions/Action;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilBlockingIgnoringReceiver = { "BlockingIgnoringReceiver", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 2, -1 };
  return &_IoReactivexInternalUtilBlockingIgnoringReceiver;
}

@end

void IoReactivexInternalUtilBlockingIgnoringReceiver_init(IoReactivexInternalUtilBlockingIgnoringReceiver *self) {
  JavaUtilConcurrentCountDownLatch_initWithInt_(self, 1);
}

IoReactivexInternalUtilBlockingIgnoringReceiver *new_IoReactivexInternalUtilBlockingIgnoringReceiver_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilBlockingIgnoringReceiver, init)
}

IoReactivexInternalUtilBlockingIgnoringReceiver *create_IoReactivexInternalUtilBlockingIgnoringReceiver_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilBlockingIgnoringReceiver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilBlockingIgnoringReceiver)
