//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFlowablesGroupedFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableGroupBy.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_serialVersionUID -3688291656102519502LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_serialVersionUID -3852313036005250360LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableGroupBy

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, source, keySelector, valueSelector, bufferSize, delayError);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(s, keySelector_, valueSelector_, bufferSize_, delayError_)];
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "valueSelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;LIoReactivexFunctionsFunction;IZ", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;+TK;>;Lio/reactivex/functions/Function<-TT;+TV;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;)V", "Lio/reactivex/functions/Function<-TT;+TK;>;", "Lio/reactivex/functions/Function<-TT;+TV;>;", "LIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber;LIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast;LIoReactivexInternalOperatorsFlowableFlowableGroupBy_State;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableGroupBy = { "FlowableGroupBy", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableGroupBy;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableGroupBy_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableGroupBy *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy *new_IoReactivexInternalOperatorsFlowableFlowableGroupBy_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, keySelector, valueSelector, bufferSize, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy *create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, source, keySelector, valueSelector, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableGroupBy)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber)

id IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY;

@implementation IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber

+ (id)NULL_KEY {
  return IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY;
}

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, actual, keySelector, valueSelector, bufferSize, delayError);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = self->queue_;
  id key;
  @try {
    key = [((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:t];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  jboolean newGroup = false;
  id mapKey = key != nil ? key : IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY;
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *group = [((id<JavaUtilMap>) nil_chk(groups_)) getWithId:mapKey];
  if (group == nil) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
      return;
    }
    group = IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withBoolean_(key, bufferSize_, self, delayError_);
    [groups_ putWithId:mapKey withId:group];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) getAndIncrement];
    newGroup = true;
  }
  id v;
  @try {
    v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(valueSelector_)) applyWithId:t], @"The valueSelector returned null");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *) nil_chk(group)) onNextWithId:v];
  if (newGroup) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) offerWithId:group];
    [self drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  for (IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast * __strong g in nil_chk([((id<JavaUtilMap>) nil_chk(groups_)) values])) {
    [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *) nil_chk(g)) onErrorWithJavaLangThrowable:t];
  }
  [groups_ clear];
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  if (!JreLoadVolatileBoolean(&done_)) {
    for (IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast * __strong g in nil_chk([((id<JavaUtilMap>) nil_chk(groups_)) values])) {
      [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *) nil_chk(g)) onComplete];
    }
    [groups_ clear];
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet] == 0) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    }
  }
}

- (void)cancelWithId:(id)key {
  id mapKey = key != nil ? key : IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY;
  [((id<JavaUtilMap>) nil_chk(groups_)) removeWithId:mapKey];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(groupCount_)) decrementAndGet] == 0) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    if ([self getAndIncrement] == 0) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  if (outputFused_) {
    [self drainFused];
  }
  else {
    [self drainNormal];
  }
}

- (void)drainFused {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = self->queue_;
  id<OrgReactivestreamsSubscriber> a = self->actual_;
  for (; ; ) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    if (d && !delayError_) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:nil];
    if (d) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [a onErrorWithJavaLangThrowable:ex];
      }
      else {
        [a onComplete];
      }
      return;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      return;
    }
  }
}

- (void)drainNormal {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = self->queue_;
  id<OrgReactivestreamsSubscriber> a = self->actual_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      IoReactivexFlowablesGroupedFlowable *t = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      jboolean empty = t == nil;
      if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
      e++;
    }
    if (e == r && [self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
      return;
    }
    if (e != 0LL) {
      if (r != JavaLangLong_MAX_VALUE) {
        [requested_ addAndGetWithLong:-e];
      }
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:e];
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
    return true;
  }
  if (delayError_) {
    if (d && empty) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      }
      else {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      }
      return true;
    }
  }
  else {
    if (d) {
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return true;
      }
      else if (empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return true;
      }
    }
  }
  return false;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (IoReactivexFlowablesGroupedFlowable * __nullable)poll {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) poll];
}

- (void)clear {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
}

- (jboolean)isEmpty {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) isEmpty];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(keySelector_);
  RELEASE_(valueSelector_);
  RELEASE_(groups_);
  RELEASE_(queue_);
  RELEASE_(s_);
  RELEASE_(cancelled_);
  RELEASE_(requested_);
  RELEASE_(groupCount_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 5, -1, 12, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 13, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFlowablesGroupedFlowable;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(cancelWithId:);
  methods[8].selector = @selector(drain);
  methods[9].selector = @selector(drainFused);
  methods[10].selector = @selector(drainNormal);
  methods[11].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:withIoReactivexInternalQueueSpscLinkedArrayQueue:);
  methods[12].selector = @selector(requestFusionWithInt:);
  methods[13].selector = @selector(poll);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "valueSelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "groups_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "NULL_KEY", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 24, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "groupCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;LIoReactivexFunctionsFunction;IZ", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;Lio/reactivex/functions/Function<-TT;+TK;>;Lio/reactivex/functions/Function<-TT;+TV;>;IZ)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "cancel", "(TK;)V", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;LIoReactivexInternalQueueSpscLinkedArrayQueue;", "(ZZLorg/reactivestreams/Subscriber<*>;Lio/reactivex/internal/queue/SpscLinkedArrayQueue<*>;)Z", "requestFusion", "I", "()Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;", "Lorg/reactivestreams/Subscriber<-Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;", "Lio/reactivex/functions/Function<-TT;+TK;>;", "Lio/reactivex/functions/Function<-TT;+TV;>;", "Ljava/util/Map<Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast<TK;TV;>;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;", &IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY, "LIoReactivexInternalOperatorsFlowableFlowableGroupBy;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<Lio/reactivex/flowables/GroupedFlowable<TK;TV;>;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber = { "GroupBySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x19, 16, 16, 25, -1, -1, 26, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_NULL_KEY, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->groupCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->valueSelector_, valueSelector);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->groups_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, keySelector, valueSelector, bufferSize, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<IoReactivexFunctionsFunction> valueSelector, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withInt_withBoolean_, actual, keySelector, valueSelector, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast

+ (IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *)createWithWithId:(id)key
                                                                                 withInt:(jint)bufferSize
               withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber:(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *)parent
                                                                             withBoolean:(jboolean)delayError {
  return IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withBoolean_(key, bufferSize, parent, delayError);
}

- (instancetype)initWithId:(id)key
withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State:(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *)state {
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_(self, key, state);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *) nil_chk(state_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *) nil_chk(state_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *) nil_chk(state_)) onComplete];
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithWithId:withInt:withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber:withBoolean:);
  methods[1].selector = @selector(initWithId:withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State:);
  methods[2].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LIoReactivexInternalOperatorsFlowableFlowableGroupBy_State;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "createWith", "LNSObject;ILIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber;Z", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>(TK;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber<*TK;TT;>;Z)Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupedUnicast<TK;TT;>;", "LNSObject;LIoReactivexInternalOperatorsFlowableFlowableGroupBy_State;", "(TK;Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State<TT;TK;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State<TT;TK;>;", "LIoReactivexInternalOperatorsFlowableFlowableGroupBy;", "<K:Ljava/lang/Object;T:Ljava/lang/Object;>Lio/reactivex/flowables/GroupedFlowable<TK;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast = { "GroupedUnicast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 1, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast;
}

@end

IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_createWithWithId_withInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withBoolean_(id key, jint bufferSize, IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *parent, jboolean delayError) {
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initialize();
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *state = create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_(bufferSize, parent, key, delayError);
  return create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_(key, state);
}

void IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *self, id key, IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *state) {
  IoReactivexFlowablesGroupedFlowable_initWithId_(self, key);
  JreStrongAssign(&self->state_, state);
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *new_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_(id key, IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *state) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast, initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_, key, state)
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast *create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast_initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_(id key, IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *state) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast, initWithId_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_State_, key, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupedUnicast)

@implementation IoReactivexInternalOperatorsFlowableFlowableGroupBy_State

- (instancetype)initWithInt:(jint)bufferSize
withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber:(IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *)parent
                     withId:(id)key
                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_(self, bufferSize, parent, key, delayError);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *) nil_chk(parent_)) cancelWithId:key_];
  }
}

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:s];
    [self drain];
  }
  else {
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(create_JavaLangIllegalStateException_initWithNSString_(@"Only one Subscriber allowed!"), s);
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:t];
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&error_, e);
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  if (outputFused_) {
    [self drainFused];
  }
  else {
    [self drainNormal];
  }
}

- (void)drainFused {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = self->queue_;
  id<OrgReactivestreamsSubscriber> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->actual_)) get];
  for (; ; ) {
    if (a != nil) {
      if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d && !delayError_) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
          [a onErrorWithJavaLangThrowable:ex];
          return;
        }
      }
      [a onNextWithId:nil];
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [a onErrorWithJavaLangThrowable:ex];
        }
        else {
          [a onComplete];
        }
        return;
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      return;
    }
    if (a == nil) {
      a = [self->actual_ get];
    }
  }
}

- (void)drainNormal {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jboolean delayError = self->delayError_;
  id<OrgReactivestreamsSubscriber> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get];
  for (; ; ) {
    if (a != nil) {
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong e = 0;
      while (e != r) {
        jboolean d = JreLoadVolatileBoolean(&done_);
        id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
        jboolean empty = v == nil;
        if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a withBoolean:delayError]) {
          return;
        }
        if (empty) {
          break;
        }
        [a onNextWithId:v];
        e++;
      }
      if (e == r && [self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a withBoolean:delayError]) {
        return;
      }
      if (e != 0LL) {
        if (r != JavaLangLong_MAX_VALUE) {
          [requested_ addAndGetWithLong:-e];
        }
        [((id<OrgReactivestreamsSubscription>) nil_chk(((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *) nil_chk(parent_))->s_)) requestWithLong:e];
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    if (a == nil) {
      a = [actual_ get];
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                           withBoolean:(jboolean)delayError {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(cancelled_)) get]) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
    return true;
  }
  if (d) {
    if (delayError) {
      if (empty) {
        JavaLangThrowable *e = error_;
        if (e != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return true;
      }
    }
    else {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        return true;
      }
      else if (empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return true;
      }
    }
  }
  return false;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id __nullable)poll {
  id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) poll];
  if (v != nil) {
    produced_++;
    return v;
  }
  jint p = produced_;
  if (p != 0) {
    produced_ = 0;
    [((id<OrgReactivestreamsSubscription>) nil_chk(((IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *) nil_chk(parent_))->s_)) requestWithLong:p];
  }
  return nil;
}

- (jboolean)isEmpty {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) isEmpty];
}

- (void)clear {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(queue_);
  RELEASE_(parent_);
  RELEASE_(requested_);
  RELEASE_(error_);
  RELEASE_(cancelled_);
  RELEASE_(actual_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, 14, -1, -1 },
    { NULL, "I", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber:withId:withBoolean:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(drain);
  methods[8].selector = @selector(drainFused);
  methods[9].selector = @selector(drainNormal);
  methods[10].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:withBoolean:);
  methods[11].selector = @selector(requestFusionWithInt:);
  methods[12].selector = @selector(poll);
  methods[13].selector = @selector(isEmpty);
  methods[14].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "produced_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber;LNSObject;Z", "(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber<*TK;TT;>;TK;Z)V", "request", "J", "subscribe", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;Z", "(ZZLorg/reactivestreams/Subscriber<-TT;>;Z)Z", "requestFusion", "I", "()TT;", "TK;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;", "Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber<*TK;TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscriber<-TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableGroupBy;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lorg/reactivestreams/Publisher<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableGroupBy_State = { "State", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 15, 13, 22, -1, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableGroupBy_State;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *self, jint bufferSize, IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->cancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->key_, key);
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *new_IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_(jint bufferSize, IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State, initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_, bufferSize, parent, key, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableGroupBy_State *create_IoReactivexInternalOperatorsFlowableFlowableGroupBy_State_initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_(jint bufferSize, IoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber *parent, id key, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State, initWithInt_withIoReactivexInternalOperatorsFlowableFlowableGroupBy_GroupBySubscriber_withId_withBoolean_, bufferSize, parent, key, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableGroupBy_State)
