//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalUtilMergerBiFunction.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation IoReactivexInternalUtilMergerBiFunction

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  IoReactivexInternalUtilMergerBiFunction_initWithJavaUtilComparator_(self, comparator);
  return self;
}

- (id<JavaUtilList>)applyWithId:(id<JavaUtilList>)a
                         withId:(id<JavaUtilList>)b {
  jint n = [((id<JavaUtilList>) nil_chk(a)) size] + [((id<JavaUtilList>) nil_chk(b)) size];
  if (n == 0) {
    return create_JavaUtilArrayList_init();
  }
  id<JavaUtilList> both = create_JavaUtilArrayList_initWithInt_(n);
  id<JavaUtilIterator> at = [a iterator];
  id<JavaUtilIterator> bt = [b iterator];
  id s1 = [((id<JavaUtilIterator>) nil_chk(at)) hasNext] ? [at next] : nil;
  id s2 = [((id<JavaUtilIterator>) nil_chk(bt)) hasNext] ? [bt next] : nil;
  while (s1 != nil && s2 != nil) {
    if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:s1 withId:s2] < 0) {
      [both addWithId:s1];
      s1 = [at hasNext] ? [at next] : nil;
    }
    else {
      [both addWithId:s2];
      s2 = [bt hasNext] ? [bt next] : nil;
    }
  }
  if (s1 != nil) {
    [both addWithId:s1];
    while ([at hasNext]) {
      [both addWithId:[at next]];
    }
  }
  else if (s2 != nil) {
    [both addWithId:s2];
    while ([bt hasNext]) {
      [both addWithId:[bt next]];
    }
  }
  return both;
}

- (void)dealloc {
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilComparator:);
  methods[1].selector = @selector(applyWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilComparator;", "(Ljava/util/Comparator<-TT;>;)V", "apply", "LJavaUtilList;LJavaUtilList;", "LJavaLangException;", "(Ljava/util/List<TT;>;Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "Ljava/util/Comparator<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/functions/BiFunction<Ljava/util/List<TT;>;Ljava/util/List<TT;>;Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilMergerBiFunction = { "MergerBiFunction", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalUtilMergerBiFunction;
}

@end

void IoReactivexInternalUtilMergerBiFunction_initWithJavaUtilComparator_(IoReactivexInternalUtilMergerBiFunction *self, id<JavaUtilComparator> comparator) {
  NSObject_init(self);
  JreStrongAssign(&self->comparator_, comparator);
}

IoReactivexInternalUtilMergerBiFunction *new_IoReactivexInternalUtilMergerBiFunction_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilMergerBiFunction, initWithJavaUtilComparator_, comparator)
}

IoReactivexInternalUtilMergerBiFunction *create_IoReactivexInternalUtilMergerBiFunction_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilMergerBiFunction, initWithJavaUtilComparator_, comparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilMergerBiFunction)
