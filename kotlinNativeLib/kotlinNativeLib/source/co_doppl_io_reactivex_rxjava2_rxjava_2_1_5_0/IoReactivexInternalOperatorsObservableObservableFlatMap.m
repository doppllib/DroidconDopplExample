//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueDisposable.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableFlatMap.h"
#include "IoReactivexInternalOperatorsObservableObservableScalarXMap.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_serialVersionUID -2117620485640801370LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_serialVersionUID -4606175640614850599LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableFlatMap

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, source, mapper, delayErrors, maxConcurrency, bufferSize);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (IoReactivexInternalOperatorsObservableObservableScalarXMap_tryScalarXMapSubscribeWithIoReactivexObservableSource_withIoReactivexObserver_withIoReactivexFunctionsFunction_(source_, t, mapper_)) {
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(t, mapper_, delayErrors_, maxConcurrency_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexFunctionsFunction;ZII", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;ZII)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TU;>;)V", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver;LIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMap = { "ObservableFlatMap", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMap;
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsObservableObservableFlatMap *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsObservableObservableFlatMap *new_IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableFlatMap *create_IoReactivexInternalOperatorsObservableObservableFlatMap_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap, initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMap)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver)

IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED;

@implementation IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY;
}

+ (IOSObjectArray *)CANCELLED {
  return IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors
                                    withInt:(jint)maxConcurrency
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, actual, mapper, delayErrors, maxConcurrency, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  id<IoReactivexObservableSource> p;
  @try {
    p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:t], @"The mapper returned a null ObservableSource");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithJavaLangThrowable:e];
    return;
  }
  if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
    @synchronized(self) {
      if (wip_ == maxConcurrency_) {
        [((id<JavaUtilQueue>) nil_chk(sources_)) offerWithId:p];
        return;
      }
      wip_++;
    }
  }
  [self subscribeInnerWithIoReactivexObservableSource:p];
}

- (void)subscribeInnerWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)p {
  for (; ; ) {
    if ([JavaUtilConcurrentCallable_class_() isInstance:p]) {
      [self tryEmitScalarWithJavaUtilConcurrentCallable:((id<JavaUtilConcurrentCallable>) cast_check(p, JavaUtilConcurrentCallable_class_()))];
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
        @synchronized(self) {
          p = JreRetainedLocalValue([((id<JavaUtilQueue>) nil_chk(sources_)) poll]);
          if (p == nil) {
            wip_--;
            break;
          }
        }
      }
      else {
        break;
      }
    }
    else {
      IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *inner = create_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(self, uniqueId_++);
      if ([self addInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:inner]) {
        [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:inner];
      }
      break;
    }
  }
}

- (jboolean)addInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED) {
      [((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(inner)) dispose];
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, inner);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == inner) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)tryEmitScalarWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)value {
  id u;
  @try {
    u = [((id<JavaUtilConcurrentCallable>) nil_chk(value)) call];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex];
    [self drain];
    return;
  }
  if (u == nil) {
    return;
  }
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:u];
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimplePlainQueue> q = JreLoadVolatileId(&queue_);
    if (q == nil) {
      if (maxConcurrency_ == JavaLangInteger_MAX_VALUE) {
        q = create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize_);
      }
      else {
        q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(maxConcurrency_);
      }
      JreVolatileStrongAssign(&queue_, q);
    }
    if (![q offerWithId:u]) {
      [self onErrorWithJavaLangThrowable:create_JavaLangIllegalStateException_initWithNSString_(@"Scalar queue full?!")];
      return;
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)tryEmitWithId:(id)value
withIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)inner {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:value];
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(inner))->queue_);
    if (q == nil) {
      q = create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize_);
      JreVolatileStrongAssign(&inner->queue_, q);
    }
    [q offerWithId:value];
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:t]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    if ([self disposeAll]) {
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
      if (ex != nil && ex != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
      }
    }
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  id<IoReactivexObserver> child = self->actual_;
  jint missed = 1;
  for (; ; ) {
    if ([self checkTerminate]) {
      return;
    }
    id<IoReactivexInternalFuseableSimplePlainQueue> svq = JreLoadVolatileId(&queue_);
    if (svq != nil) {
      for (; ; ) {
        id o;
        for (; ; ) {
          if ([self checkTerminate]) {
            return;
          }
          o = [svq poll];
          if (o == nil) {
            break;
          }
          [((id<IoReactivexObserver>) nil_chk(child)) onNextWithId:o];
        }
        if (o == nil) {
          break;
        }
      }
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    svq = JreLoadVolatileId(&queue_);
    IOSObjectArray *inner = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(inner))->size_;
    if (d && (svq == nil || [svq isEmpty]) && n == 0) {
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate];
      if (ex != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
        if (ex == nil) {
          [((id<IoReactivexObserver>) nil_chk(child)) onComplete];
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(child)) onErrorWithJavaLangThrowable:ex];
        }
      }
      return;
    }
    jboolean innerCompleted = false;
    if (n != 0) {
      jlong startId = lastId_;
      jint index = lastIndex_;
      if (n <= index || ((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(IOSObjectArray_Get(inner, index)))->id__ != startId) {
        if (n <= index) {
          index = 0;
        }
        jint j = index;
        for (jint i = 0; i < n; i++) {
          if (((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(IOSObjectArray_Get(inner, j)))->id__ == startId) {
            break;
          }
          j++;
          if (j == n) {
            j = 0;
          }
        }
        index = j;
        lastIndex_ = j;
        lastId_ = ((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
      }
      jint j = index;
      for (jint i = 0; i < n; i++) {
        {
          if ([self checkTerminate]) {
            return;
          }
          IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *is = IOSObjectArray_Get(inner, j);
          for (; ; ) {
            if ([self checkTerminate]) {
              return;
            }
            id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(is))->queue_);
            if (q == nil) {
              break;
            }
            id o;
            for (; ; ) {
              @try {
                o = [q poll];
              }
              @catch (JavaLangThrowable *ex) {
                IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
                [is dispose];
                [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex];
                if ([self checkTerminate]) {
                  return;
                }
                [self removeInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:is];
                innerCompleted = true;
                i++;
                goto continue_sourceLoop;
              }
              if (o == nil) {
                break;
              }
              [((id<IoReactivexObserver>) nil_chk(child)) onNextWithId:o];
              if ([self checkTerminate]) {
                return;
              }
            }
            if (o == nil) {
              break;
            }
          }
          jboolean innerDone = JreLoadVolatileBoolean(&is->done_);
          id<IoReactivexInternalFuseableSimpleQueue> innerQueue = JreLoadVolatileId(&is->queue_);
          if (innerDone && (innerQueue == nil || [innerQueue isEmpty])) {
            [self removeInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:is];
            if ([self checkTerminate]) {
              return;
            }
            innerCompleted = true;
          }
          j++;
          if (j == n) {
            j = 0;
          }
        }
        continue_sourceLoop: ;
      }
      lastIndex_ = j;
      lastId_ = ((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(IOSObjectArray_Get(inner, j)))->id__;
    }
    if (innerCompleted) {
      if (maxConcurrency_ != JavaLangInteger_MAX_VALUE) {
        id<IoReactivexObservableSource> p;
        @synchronized(self) {
          p = JreRetainedLocalValue([((id<JavaUtilQueue>) nil_chk(sources_)) poll]);
          if (p == nil) {
            wip_--;
            continue;
          }
        }
        [self subscribeInnerWithIoReactivexObservableSource:p];
      }
      continue;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)checkTerminate {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return true;
  }
  JavaLangThrowable *e = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
  if (!delayErrors_ && (e != nil)) {
    [self disposeAll];
    e = [errors_ terminate];
    if (e != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    }
    return true;
  }
  return false;
}

- (jboolean)disposeAll {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
  if (a != IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED) {
    a = [observers_ getAndSetWithId:IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED];
    if (a != IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED) {
      {
        IOSObjectArray *a__ = a;
        IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *inner = *b__++;
          [((IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *) nil_chk(inner)) dispose];
        }
      }
      return true;
    }
  }
  return false;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)__javaClone:(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  JreReleaseVolatile(&queue_);
  RELEASE_(errors_);
  RELEASE_(observers_);
  RELEASE_(s_);
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 11, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(subscribeInnerWithIoReactivexObservableSource:);
  methods[4].selector = @selector(addInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:);
  methods[5].selector = @selector(removeInnerWithIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:);
  methods[6].selector = @selector(tryEmitScalarWithJavaUtilConcurrentCallable:);
  methods[7].selector = @selector(tryEmitWithId:withIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:);
  methods[8].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[9].selector = @selector(onComplete);
  methods[10].selector = @selector(dispose);
  methods[11].selector = @selector(isDisposed);
  methods[12].selector = @selector(drain);
  methods[13].selector = @selector(drainLoop);
  methods[14].selector = @selector(checkTerminate);
  methods[15].selector = @selector(disposeAll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimplePlainQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 25, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 26, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;", .constantValue.asLong = 0, 0x18, -1, 27, 28, -1 },
    { "CANCELLED", "[LIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;", .constantValue.asLong = 0, 0x18, -1, 29, 28, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "uniqueId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sources_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 30, -1 },
    { "wip_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsFunction;ZII", "(Lio/reactivex/Observer<-TU;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;ZII)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "subscribeInner", "LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<+TU;>;)V", "addInner", "LIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;", "(Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver<TT;TU;>;)Z", "removeInner", "(Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver<TT;TU;>;)V", "tryEmitScalar", "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+TU;>;)V", "tryEmit", "LNSObject;LIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;", "(TU;Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver<TT;TU;>;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TU;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/ObservableSource<+TU;>;>;", "Lio/reactivex/internal/fuseable/SimplePlainQueue<TU;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver<**>;>;", &IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY, "[Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver<**>;", &IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED, "Ljava/util/Queue<Lio/reactivex/ObservableSource<+TU;>;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver = { "MergeObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 16, 19, 31, -1, -1, 32, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_CANCELLED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  self->bufferSize_ = bufferSize;
  if (maxConcurrency != JavaLangInteger_MAX_VALUE) {
    JreStrongAssignAndConsume(&self->sources_, new_JavaUtilArrayDeque_initWithInt_(maxConcurrency));
  }
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_EMPTY));
}

IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, actual, mapper, delayErrors, maxConcurrency, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver, initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, actual, mapper, delayErrors, maxConcurrency, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver)

@implementation IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver:(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *)parent
                                                                                     withLong:(jlong)id_ {
  IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(self, parent, id_);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, s)) {
    if ([IoReactivexInternalFuseableQueueDisposable_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueDisposable> qd = (id<IoReactivexInternalFuseableQueueDisposable>) cast_check(s, IoReactivexInternalFuseableQueueDisposable_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueDisposable>) nil_chk(qd)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY | IoReactivexInternalFuseableQueueFuseable_BOUNDARY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qd);
        JreAssignVolatileBoolean(&done_, true);
        [((IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *) nil_chk(parent_)) drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        fusionMode_ = m;
        JreVolatileStrongAssign(&queue_, qd);
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  if (fusionMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    [((IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *) nil_chk(parent_)) tryEmitWithId:t withIoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver:self];
  }
  else {
    [((IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *) nil_chk(parent_)) drain];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(((IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *) nil_chk(parent_))->errors_)) addThrowableWithJavaLangThrowable:t]) {
    if (!parent_->delayErrors_) {
      [parent_ disposeAll];
    }
    JreAssignVolatileBoolean(&done_, true);
    [parent_ drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *) nil_chk(parent_)) drain];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)__javaClone:(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver:withLong:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "id__", "J", .constantValue.asLong = 0, 0x10, 9, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 11, -1 },
    { "fusionMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver;J", "(Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver<TT;TU;>;J)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TU;)V", "onError", "LJavaLangThrowable;", "id", "Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver<TT;TU;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;", "LIoReactivexInternalOperatorsObservableObservableFlatMap;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 6, 6, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *self, IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->id__ = id_;
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver, initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_, parent, id_)
}

IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver *parent, jlong id_) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver, initWithIoReactivexInternalOperatorsObservableObservableFlatMap_MergeObserver_withLong_, parent, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableFlatMap_InnerObserver)
