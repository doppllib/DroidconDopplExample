//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier))
#define IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> other_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                    withInt:(jint)bufferSize;

- (IoReactivexFlowable *)blockingFirst;

- (IoReactivexFlowable *)blockingFirstWithId:(IoReactivexFlowable *)arg0;

- (IoReactivexFlowable *)blockingLast;

- (IoReactivexFlowable *)blockingLastWithId:(IoReactivexFlowable *)arg0;

- (IoReactivexFlowable *)blockingSingle;

- (IoReactivexFlowable *)blockingSingleWithId:(IoReactivexFlowable *)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier, other_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_withInt_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> other, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexProcessorsUnicastProcessor;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < OrgReactivestreamsSubscription > {
 @public
  id<JavaUtilConcurrentCallable> other_;
  jint bufferSize_;
  id<OrgReactivestreamsSubscription> s_;
  JavaUtilConcurrentAtomicAtomicReference *boundary_;
  IoReactivexProcessorsUnicastProcessor *window_;
  JavaUtilConcurrentAtomicAtomicLong *windows_;
}

+ (id)NEXT;

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                             withInt:(jint)bufferSize;

- (void)drainLoop;

- (void)next;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0
     withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, other_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, boundary_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, window_, IoReactivexProcessorsUnicastProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, windows_, JavaUtilConcurrentAtomicAtomicLong *)

inline id IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_get_NEXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_NEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber, NEXT, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withInt_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_

#define RESTRICT_IoReactivexSubscribersDisposableSubscriber 1
#define INCLUDE_IoReactivexSubscribersDisposableSubscriber 1
#include "IoReactivexSubscribersDisposableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber : IoReactivexSubscribersDisposableSubscriber {
 @public
  IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent_;
  jboolean done_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryMainSubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier_WindowBoundaryInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowBoundarySupplier")
