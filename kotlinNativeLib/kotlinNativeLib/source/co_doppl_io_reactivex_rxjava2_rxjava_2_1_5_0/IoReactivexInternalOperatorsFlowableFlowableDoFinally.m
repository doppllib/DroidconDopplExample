//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableDoFinally.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_serialVersionUID 4109457741734051389LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_serialVersionUID 4109457741734051389LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableDoFinally

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally {
  IoReactivexInternalOperatorsFlowableFlowableDoFinally_initWithIoReactivexFlowable_withIoReactivexFunctionsAction_(self, source, onFinally);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), onFinally_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_(s, onFinally_)];
  }
}

- (void)dealloc {
  RELEASE_(onFinally_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onFinally_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsAction;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Action;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber;LIoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoFinally = { "FlowableDoFinally", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoFinally;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoFinally_initWithIoReactivexFlowable_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableDoFinally *self, IoReactivexFlowable *source, id<IoReactivexFunctionsAction> onFinally) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->onFinally_, onFinally);
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally *new_IoReactivexInternalOperatorsFlowableFlowableDoFinally_initWithIoReactivexFlowable_withIoReactivexFunctionsAction_(IoReactivexFlowable *source, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally, initWithIoReactivexFlowable_withIoReactivexFunctionsAction_, source, onFinally)
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally *create_IoReactivexInternalOperatorsFlowableFlowableDoFinally_initWithIoReactivexFlowable_withIoReactivexFunctionsAction_(IoReactivexFlowable *source, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally, initWithIoReactivexFlowable_withIoReactivexFunctionsAction_, source, onFinally)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoFinally)

@implementation IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally {
  IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_(self, actual, onFinally);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      JreStrongAssign(&self->qs_, (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_()));
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self runFinally];
}

- (void)onComplete {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [self runFinally];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [self runFinally];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (jint)requestFusionWithInt:(jint)mode {
  id<IoReactivexInternalFuseableQueueSubscription> qs = self->qs_;
  if (qs != nil && (mode & IoReactivexInternalFuseableQueueFuseable_BOUNDARY) == 0) {
    jint m = [qs requestFusionWithInt:mode];
    if (m != IoReactivexInternalFuseableQueueFuseable_NONE) {
      syncFused_ = (m == IoReactivexInternalFuseableQueueFuseable_SYNC);
    }
    return m;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)clear {
  [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) clear];
}

- (jboolean)isEmpty {
  return [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) isEmpty];
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  if (v == nil && syncFused_) {
    [self runFinally];
  }
  return v;
}

- (void)runFinally {
  if ([self compareAndSetWithInt:0 withInt:1]) {
    @try {
      [((id<IoReactivexFunctionsAction>) nil_chk(onFinally_)) run];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(onFinally_);
  RELEASE_(s_);
  RELEASE_(qs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 13, 14, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(requestFusionWithInt:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(isEmpty);
  methods[10].selector = @selector(poll);
  methods[11].selector = @selector(runFinally);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "onFinally_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "qs_", "LIoReactivexInternalFuseableQueueSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "syncFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsAction;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Action;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/fuseable/QueueSubscription<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDoFinally;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber = { "DoFinallySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 12, 6, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onFinally_, onFinally);
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_, actual, onFinally)
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsAction_, actual, onFinally)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                          withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally {
  IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_(self, actual, onFinally);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      JreStrongAssign(&self->qs_, (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_()));
    }
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:t];
}

- (jboolean)tryOnNextWithId:(id)t {
  return [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) tryOnNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self runFinally];
}

- (void)onComplete {
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onComplete];
  [self runFinally];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [self runFinally];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (jint)requestFusionWithInt:(jint)mode {
  id<IoReactivexInternalFuseableQueueSubscription> qs = self->qs_;
  if (qs != nil && (mode & IoReactivexInternalFuseableQueueFuseable_BOUNDARY) == 0) {
    jint m = [qs requestFusionWithInt:mode];
    if (m != IoReactivexInternalFuseableQueueFuseable_NONE) {
      syncFused_ = (m == IoReactivexInternalFuseableQueueFuseable_SYNC);
    }
    return m;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)clear {
  [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) clear];
}

- (jboolean)isEmpty {
  return [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) isEmpty];
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  if (v == nil && syncFused_) {
    [self runFinally];
  }
  return v;
}

- (void)runFinally {
  if ([self compareAndSetWithInt:0 withInt:1]) {
    @try {
      [((id<IoReactivexFunctionsAction>) nil_chk(onFinally_)) run];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(onFinally_);
  RELEASE_(s_);
  RELEASE_(qs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 15, 16, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexFunctionsAction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(tryOnNextWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(requestWithLong:);
  methods[8].selector = @selector(requestFusionWithInt:);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(isEmpty);
  methods[11].selector = @selector(poll);
  methods[12].selector = @selector(runFinally);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "onFinally_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "qs_", "LIoReactivexInternalFuseableQueueSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, 18, -1 },
    { "syncFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexFunctionsAction;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Lio/reactivex/functions/Action;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "tryOnNext", "(TT;)Z", "onError", "LJavaLangThrowable;", "request", "J", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;", "Lio/reactivex/internal/fuseable/QueueSubscription<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDoFinally;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/internal/fuseable/ConditionalSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber = { "DoFinallyConditionalSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 13, 6, 19, -1, -1, 20, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->onFinally_, onFinally);
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_, actual, onFinally)
}

IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsAction> onFinally) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsAction_, actual, onFinally)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoFinally_DoFinallyConditionalSubscriber)
