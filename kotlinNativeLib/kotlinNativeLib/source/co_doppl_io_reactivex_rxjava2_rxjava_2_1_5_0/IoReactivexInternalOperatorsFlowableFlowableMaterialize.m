//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableMaterialize.h"
#include "IoReactivexInternalSubscribersSinglePostCompleteSubscriber.h"
#include "IoReactivexNotification.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Throwable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_serialVersionUID -3740826063558713822LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableMaterialize

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithIoReactivexFlowable_(self, source);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(s)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexFlowable;", "(Lio/reactivex/Flowable<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Notification<TT;>;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Notification<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMaterialize = { "FlowableMaterialize", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMaterialize;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithIoReactivexFlowable_(IoReactivexInternalOperatorsFlowableFlowableMaterialize *self, IoReactivexFlowable *source) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize *new_IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize, initWithIoReactivexFlowable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize *create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize, initWithIoReactivexFlowable_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMaterialize)

@implementation IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  return self;
}

- (void)onNextWithId:(id)t {
  produced_++;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:IoReactivexNotification_createOnNextWithId_(t)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [self completeWithId:IoReactivexNotification_createOnErrorWithJavaLangThrowable_(t)];
}

- (void)onComplete {
  [self completeWithId:IoReactivexNotification_createOnComplete()];
}

- (void)onDropWithId:(IoReactivexNotification *)n {
  if ([((IoReactivexNotification *) nil_chk(n)) isOnError]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_([n getError]);
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(onDropWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Notification<TT;>;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "onDrop", "LIoReactivexNotification;", "(Lio/reactivex/Notification<TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableMaterialize;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber<TT;Lio/reactivex/Notification<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber = { "MaterializeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *self, id<OrgReactivestreamsSubscriber> actual) {
  IoReactivexInternalSubscribersSinglePostCompleteSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber)
