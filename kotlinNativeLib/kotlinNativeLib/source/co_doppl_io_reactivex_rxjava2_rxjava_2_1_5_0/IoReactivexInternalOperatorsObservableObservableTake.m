//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableTake.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableTake

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)limit {
  IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(self, source, limit);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(observer, limit_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;J", "(Lio/reactivex/ObservableSource<TT;>;J)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableTake_TakeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTake = { "ObservableTake", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTake;
}

@end

void IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(IoReactivexInternalOperatorsObservableObservableTake *self, id<IoReactivexObservableSource> source, jlong limit) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->limit_ = limit;
}

IoReactivexInternalOperatorsObservableObservableTake *new_IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTake, initWithIoReactivexObservableSource_withLong_, source, limit)
}

IoReactivexInternalOperatorsObservableObservableTake *create_IoReactivexInternalOperatorsObservableObservableTake_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTake, initWithIoReactivexObservableSource_withLong_, source, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTake)

@implementation IoReactivexInternalOperatorsObservableObservableTake_TakeObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)limit {
  IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(self, actual, limit);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->subscription_, s)) {
    JreStrongAssign(&subscription_, s);
    if (remaining_ == 0) {
      done_ = true;
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
      IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(actual_);
    }
    else {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (!done_ && remaining_-- > 0) {
    jboolean stop = remaining_ == 0;
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
    if (stop) {
      [self onComplete];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexDisposablesDisposable>) nil_chk(subscription_)) dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexDisposablesDisposable>) nil_chk(subscription_)) dispose];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(subscription_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(subscription_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(subscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subscription_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "remaining_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;J", "(Lio/reactivex/Observer<-TT;>;J)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableTake;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTake_TakeObserver = { "TakeObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 4, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *self, id<IoReactivexObserver> actual, jlong limit) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->remaining_ = limit;
}

IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *new_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong limit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver, initWithIoReactivexObserver_withLong_, actual, limit)
}

IoReactivexInternalOperatorsObservableObservableTake_TakeObserver *create_IoReactivexInternalOperatorsObservableObservableTake_TakeObserver_initWithIoReactivexObserver_withLong_(id<IoReactivexObserver> actual, jlong limit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver, initWithIoReactivexObserver_withLong_, actual, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTake_TakeObserver)
