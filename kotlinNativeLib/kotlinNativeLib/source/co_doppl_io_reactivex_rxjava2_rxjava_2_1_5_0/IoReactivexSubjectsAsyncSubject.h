//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsAsyncSubject")
#ifdef RESTRICT_IoReactivexSubjectsAsyncSubject
#define INCLUDE_ALL_IoReactivexSubjectsAsyncSubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsAsyncSubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsAsyncSubject

#if !defined (IoReactivexSubjectsAsyncSubject_) && (INCLUDE_ALL_IoReactivexSubjectsAsyncSubject || defined(INCLUDE_IoReactivexSubjectsAsyncSubject))
#define IoReactivexSubjectsAsyncSubject_

#define RESTRICT_IoReactivexSubjectsSubject 1
#define INCLUDE_IoReactivexSubjectsSubject 1
#include "IoReactivexSubjectsSubject.h"

@class IOSObjectArray;
@class IoReactivexSubjectsAsyncSubject_AsyncDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsAsyncSubject : IoReactivexSubjectsSubject {
 @public
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaLangThrowable *error_;
  id value_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexSubjectsAsyncSubject *)create;

- (JavaLangThrowable *)getThrowable;

- (id)getValue;

- (IOSObjectArray *)getValues;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)hasComplete;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)addWithIoReactivexSubjectsAsyncSubject_AsyncDisposable:(IoReactivexSubjectsAsyncSubject_AsyncDisposable *)ps;

- (void)nullOnNext;

- (void)removeWithIoReactivexSubjectsAsyncSubject_AsyncDisposable:(IoReactivexSubjectsAsyncSubject_AsyncDisposable *)ps;

@end

J2OBJC_STATIC_INIT(IoReactivexSubjectsAsyncSubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsAsyncSubject, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsAsyncSubject, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsAsyncSubject, value_, id)

inline IOSObjectArray *IoReactivexSubjectsAsyncSubject_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsAsyncSubject_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsAsyncSubject, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexSubjectsAsyncSubject_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsAsyncSubject_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsAsyncSubject, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexSubjectsAsyncSubject *IoReactivexSubjectsAsyncSubject_create();

FOUNDATION_EXPORT void IoReactivexSubjectsAsyncSubject_init(IoReactivexSubjectsAsyncSubject *self);

FOUNDATION_EXPORT IoReactivexSubjectsAsyncSubject *new_IoReactivexSubjectsAsyncSubject_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsAsyncSubject *create_IoReactivexSubjectsAsyncSubject_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsAsyncSubject)

#endif

#if !defined (IoReactivexSubjectsAsyncSubject_AsyncDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsAsyncSubject || defined(INCLUDE_IoReactivexSubjectsAsyncSubject_AsyncDisposable))
#define IoReactivexSubjectsAsyncSubject_AsyncDisposable_

#define RESTRICT_IoReactivexInternalObserversDeferredScalarDisposable 1
#define INCLUDE_IoReactivexInternalObserversDeferredScalarDisposable 1
#include "IoReactivexInternalObserversDeferredScalarDisposable.h"

@class IoReactivexSubjectsAsyncSubject;
@class JavaLangThrowable;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsAsyncSubject_AsyncDisposable : IoReactivexInternalObserversDeferredScalarDisposable {
 @public
  IoReactivexSubjectsAsyncSubject *parent_;
}

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
        withIoReactivexSubjectsAsyncSubject:(IoReactivexSubjectsAsyncSubject *)parent;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsAsyncSubject_AsyncDisposable)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsAsyncSubject_AsyncDisposable, parent_, IoReactivexSubjectsAsyncSubject *)

FOUNDATION_EXPORT void IoReactivexSubjectsAsyncSubject_AsyncDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsAsyncSubject_(IoReactivexSubjectsAsyncSubject_AsyncDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsAsyncSubject *parent);

FOUNDATION_EXPORT IoReactivexSubjectsAsyncSubject_AsyncDisposable *new_IoReactivexSubjectsAsyncSubject_AsyncDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsAsyncSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsAsyncSubject *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsAsyncSubject_AsyncDisposable *create_IoReactivexSubjectsAsyncSubject_AsyncDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsAsyncSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsAsyncSubject *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsAsyncSubject_AsyncDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsAsyncSubject")
