//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper 1
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual))
#define IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@class JavaLangBoolean;
@protocol IoReactivexFunctionsBiPredicate;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSequenceEqual : IoReactivexFlowable {
 @public
  id<OrgReactivestreamsPublisher> first_;
  id<OrgReactivestreamsPublisher> second_;
  id<IoReactivexFunctionsBiPredicate> comparer_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)first
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)second
                withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer
                                            withInt:(jint)prefetch;

- (JavaLangBoolean *)blockingFirst;

- (JavaLangBoolean *)blockingFirstWithId:(JavaLangBoolean *)arg0;

- (JavaLangBoolean *)blockingLast;

- (JavaLangBoolean *)blockingLastWithId:(JavaLangBoolean *)arg0;

- (JavaLangBoolean *)blockingSingle;

- (JavaLangBoolean *)blockingSingleWithId:(JavaLangBoolean *)arg0;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual, first_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual, second_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual, comparer_, id<IoReactivexFunctionsBiPredicate>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiPredicate_withInt_(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual *self, id<OrgReactivestreamsPublisher> first, id<OrgReactivestreamsPublisher> second, id<IoReactivexFunctionsBiPredicate> comparer, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual *new_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiPredicate_withInt_(id<OrgReactivestreamsPublisher> first, id<OrgReactivestreamsPublisher> second, id<IoReactivexFunctionsBiPredicate> comparer, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual *create_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiPredicate_withInt_(id<OrgReactivestreamsPublisher> first, id<OrgReactivestreamsPublisher> second, id<IoReactivexFunctionsBiPredicate> comparer, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper))
#define IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper_

@class JavaLangThrowable;

@protocol IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper < JavaObject >

- (void)drain;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator))
#define IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator_

#define RESTRICT_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaLangBoolean;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@protocol IoReactivexFunctionsBiPredicate;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator : IoReactivexInternalSubscriptionsDeferredScalarSubscription < IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper > {
 @public
  id<IoReactivexFunctionsBiPredicate> comparer_;
  IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *first_;
  IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *second_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  id v1_;
  id v2_;
}

#pragma mark Public

- (void)cancel;

- (void)drain;

- (NSUInteger)hash;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (jboolean)isEqual:(id)obj;

- (JavaLangBoolean *)poll;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)prefetch
                 withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer;

- (void)cancelAndClear;

- (void)subscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                 withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, comparer_, id<IoReactivexFunctionsBiPredicate>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, first_, IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, second_, IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, v1_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator, v2_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator *self, id<OrgReactivestreamsSubscriber> actual, jint prefetch, id<IoReactivexFunctionsBiPredicate> comparer);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator *new_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexFunctionsBiPredicate_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, id<IoReactivexFunctionsBiPredicate> comparer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator *create_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexFunctionsBiPredicate_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, id<IoReactivexFunctionsBiPredicate> comparer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinator)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class JavaLangThrowable;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber > {
 @public
  id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper> parent_;
  jint prefetch_;
  jint limit_;
  jlong produced_;
  volatile_id queue_;
  volatile_jboolean done_;
  jint sourceMode_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)request;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper:(id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper>)parent
                                                                                                 withInt:(jint)prefetch;

- (void)clear;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber, parent_, id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper_withInt_(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *self, id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper> parent, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper_withInt_(id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper> parent, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper_withInt_(id<IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualCoordinatorHelper> parent, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSequenceEqual_EqualSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSequenceEqual")
