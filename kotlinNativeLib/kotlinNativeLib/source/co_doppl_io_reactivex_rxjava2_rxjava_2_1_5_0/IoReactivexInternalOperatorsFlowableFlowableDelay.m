//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableDelay.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"

@interface IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *this$0_;
  id t_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext, t_, id)

@interface IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *this$0_;
  JavaLangThrowable *t_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError, t_, JavaLangThrowable *)

@interface IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *this$0_;
}

@end

@implementation IoReactivexInternalOperatorsFlowableFlowableDelay

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)delay
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableDelay_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(self, source, delay, unit, scheduler, delayError);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)t {
  id<OrgReactivestreamsSubscriber> s;
  if (delayError_) {
    s = t;
  }
  else {
    s = create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(t);
  }
  IoReactivexScheduler_Worker *w = [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker];
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(s, delay_, unit_, w, delayError_)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delay_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;Z", "(Lio/reactivex/Flowable<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDelay = { "FlowableDelay", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDelay;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDelay_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableDelay *self, IoReactivexFlowable *source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->delay_ = delay;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowableDelay *new_IoReactivexInternalOperatorsFlowableFlowableDelay_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_, source, delay, unit, scheduler, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableDelay *create_IoReactivexInternalOperatorsFlowableFlowableDelay_initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexFlowable *source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay, initWithIoReactivexFlowable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_, source, delay, unit, scheduler, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDelay)

@implementation IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)delay
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w
                                         withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(self, actual, delay, unit, w, delayError);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_(self, t) withLong:delay_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_(self, t) withLong:delayError_ ? delay_ : 0 withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)onComplete {
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_(self) withLong:delay_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(w_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "delay_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "w_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;Z", "(Lorg/reactivestreams/Subscriber<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDelay;", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext;LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError;LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber = { "DelaySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 6, 12, 13, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->delay_ = delay;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->w_, w);
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_, actual, delay, unit, w, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_, actual, delay, unit, w, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *)outer$
                                                                                   withId:(id)t {
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_(self, outer$, t);
  return self;
}

- (void)run {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(this$0_->actual_)) onNextWithId:t_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:withId:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "t_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber<TT;>;", "TT;", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext = { "OnNext", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext *self, IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, id t) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->t_, t);
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext *new_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, id t) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_, outer$, t)
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext *create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, id t) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withId_, outer$, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnNext)

@implementation IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *)outer$
                                                                    withJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_(self, outer$, t);
  return self;
}

- (void)run {
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(this$0_->actual_)) onErrorWithJavaLangThrowable:t_];
  }
  @finally {
    [((IoReactivexScheduler_Worker *) nil_chk(this$0_->w_)) dispose];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:withJavaLangThrowable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "t_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError = { "OnError", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError *self, IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, JavaLangThrowable *t) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->t_, t);
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError *new_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, JavaLangThrowable *t) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_, outer$, t)
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError *create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$, JavaLangThrowable *t) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_withJavaLangThrowable_, outer$, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnError)

@implementation IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_(self, outer$);
  return self;
}

- (void)run {
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(this$0_->actual_)) onComplete];
  }
  @finally {
    [((IoReactivexScheduler_Worker *) nil_chk(this$0_->w_)) dispose];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/flowable/FlowableDelay$DelaySubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete = { "OnComplete", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 1, 1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete *self, IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete *new_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete *create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete_initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete, initWithIoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_OnComplete)
