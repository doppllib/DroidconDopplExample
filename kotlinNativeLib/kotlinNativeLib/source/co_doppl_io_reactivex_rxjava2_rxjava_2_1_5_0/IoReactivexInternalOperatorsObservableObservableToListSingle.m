//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsFunctions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsObservableObservableToList.h"
#include "IoReactivexInternalOperatorsObservableObservableToListSingle.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsObservableObservableToListSingle

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)defaultCapacityHint {
  IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(self, source, defaultCapacityHint);
  return self;
}

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier {
  IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(self, source, collectionSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)t {
  id<JavaUtilCollection> coll;
  @try {
    coll = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(collectionSupplier_)) call], @"The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(e, t);
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(t, coll)];
}

- (IoReactivexObservable *)fuseToObservable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableToList_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(source_, collectionSupplier_));
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(collectionSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withInt:);
  methods[1].selector = @selector(initWithIoReactivexObservableSource:withJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  methods[3].selector = @selector(fuseToObservable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "collectionSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;I", "(Lio/reactivex/ObservableSource<TT;>;I)V", "LIoReactivexObservableSource;LJavaUtilConcurrentCallable;", "(Lio/reactivex/ObservableSource<TT;>;Ljava/util/concurrent/Callable<TU;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TU;>;)V", "()Lio/reactivex/Observable<TU;>;", "Lio/reactivex/ObservableSource<TT;>;", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/Single<TU;>;Lio/reactivex/internal/fuseable/FuseToObservable<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableToListSingle = { "ObservableToListSingle", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, 10, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableToListSingle;
}

@end

void IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableObservableToListSingle *self, id<IoReactivexObservableSource> source, jint defaultCapacityHint) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->collectionSupplier_, IoReactivexInternalFunctionsFunctions_createArrayListWithInt_(defaultCapacityHint));
}

IoReactivexInternalOperatorsObservableObservableToListSingle *new_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle, initWithIoReactivexObservableSource_withInt_, source, defaultCapacityHint)
}

IoReactivexInternalOperatorsObservableObservableToListSingle *create_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle, initWithIoReactivexObservableSource_withInt_, source, defaultCapacityHint)
}

void IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableToListSingle *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->collectionSupplier_, collectionSupplier);
}

IoReactivexInternalOperatorsObservableObservableToListSingle *new_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_, source, collectionSupplier)
}

IoReactivexInternalOperatorsObservableObservableToListSingle *create_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_, source, collectionSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableToListSingle)

@implementation IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                           withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(self, actual, collection);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilCollection>) nil_chk(collection_)) addWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&collection_, nil);
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  id<JavaUtilCollection> c = collection_;
  JreStrongAssign(&collection_, nil);
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:c];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(collection_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withJavaUtilCollection:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "collection_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LJavaUtilCollection;", "(Lio/reactivex/SingleObserver<-TU;>;TU;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TU;>;", "TU;", "LIoReactivexInternalOperatorsObservableObservableToListSingle;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver = { "ToListObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *self, id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->collection_, collection);
}

IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *new_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver, initWithIoReactivexSingleObserver_withJavaUtilCollection_, actual, collection)
}

IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *create_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver, initWithIoReactivexSingleObserver_withJavaUtilCollection_, actual, collection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver)
