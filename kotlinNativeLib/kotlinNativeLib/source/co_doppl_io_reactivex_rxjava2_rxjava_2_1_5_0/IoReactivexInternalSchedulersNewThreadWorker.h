//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadWorker")
#ifdef RESTRICT_IoReactivexInternalSchedulersNewThreadWorker
#define INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadWorker 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadWorker 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersNewThreadWorker

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersNewThreadWorker_) && (INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadWorker || defined(INCLUDE_IoReactivexInternalSchedulersNewThreadWorker))
#define IoReactivexInternalSchedulersNewThreadWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "IoReactivexScheduler.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalSchedulersScheduledRunnable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalDisposablesDisposableContainer;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentThreadFactory;

@interface IoReactivexInternalSchedulersNewThreadWorker : IoReactivexScheduler_Worker < IoReactivexDisposablesDisposable > {
 @public
  volatile_jboolean disposed_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (void)dispose;

- (jboolean)isDisposed;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)action
                                                                      withLong:(jlong)delayTime
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

- (IoReactivexInternalSchedulersScheduledRunnable * __nonnull)scheduleActualWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                                        withLong:(jlong)delayTime
                                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit
                                           withIoReactivexInternalDisposablesDisposableContainer:(id<IoReactivexInternalDisposablesDisposableContainer> __nullable)parent;

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                  withLong:(jlong)delayTime
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<IoReactivexDisposablesDisposable>)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                              withLong:(jlong)initialDelay
                                                                              withLong:(jlong)period
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)shutdown;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersNewThreadWorker)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersNewThreadWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadWorker *new_IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersNewThreadWorker *create_IoReactivexInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersNewThreadWorker)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersNewThreadWorker")
