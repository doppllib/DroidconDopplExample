//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalUtilAppendOnlyLinkedArrayList.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubjectsBehaviorSubject.h"
#include "IoReactivexSubjectsSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReadWriteLock.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"

inline IOSObjectArray *IoReactivexSubjectsBehaviorSubject_get_EMPTY_ARRAY();
static IOSObjectArray *IoReactivexSubjectsBehaviorSubject_EMPTY_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsBehaviorSubject, EMPTY_ARRAY, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsBehaviorSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsBehaviorSubject__Annotations$1();

J2OBJC_INITIALIZED_DEFN(IoReactivexSubjectsBehaviorSubject)

IOSObjectArray *IoReactivexSubjectsBehaviorSubject_EMPTY;
IOSObjectArray *IoReactivexSubjectsBehaviorSubject_TERMINATED;

@implementation IoReactivexSubjectsBehaviorSubject

+ (IOSObjectArray *)EMPTY {
  return IoReactivexSubjectsBehaviorSubject_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexSubjectsBehaviorSubject_TERMINATED;
}

+ (IoReactivexSubjectsBehaviorSubject *)create {
  return IoReactivexSubjectsBehaviorSubject_create();
}

+ (IoReactivexSubjectsBehaviorSubject *)createDefaultWithId:(id)defaultValue {
  return IoReactivexSubjectsBehaviorSubject_createDefaultWithId_(defaultValue);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexSubjectsBehaviorSubject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithId:(id)defaultValue {
  IoReactivexSubjectsBehaviorSubject_initWithId_(self, defaultValue);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *bs = create_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(observer, self);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:bs];
  if ([self addWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:bs]) {
    if (JreLoadVolatileBoolean(&bs->cancelled_)) {
      [self removeWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:bs];
    }
    else {
      [bs emitFirst];
    }
  }
  else {
    JavaLangThrowable *ex = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(terminalEvent_)) get];
    if (ex == JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
      [observer onComplete];
    }
    else {
      [observer onErrorWithJavaLangThrowable:ex];
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(terminalEvent_)) get] != nil) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
  }
}

- (void)onNextWithId:(id)t {
  if (t == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(terminalEvent_)) get] != nil) {
    return;
  }
  id o = IoReactivexInternalUtilNotificationLite_nextWithId_(t);
  [self setCurrentWithId:o];
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *bs = *b__++;
      [((IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *) nil_chk(bs)) emitNextWithId:o withLong:index_];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(terminalEvent_)) compareAndSetWithId:nil withId:t]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  id o = IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(t);
  {
    IOSObjectArray *a__ = [self terminateWithId:o];
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *bs = *b__++;
      [((IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *) nil_chk(bs)) emitNextWithId:o withLong:index_];
    }
  }
}

- (void)onComplete {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(terminalEvent_)) compareAndSetWithId:nil withId:JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)]) {
    return;
  }
  id o = IoReactivexInternalUtilNotificationLite_complete();
  {
    IOSObjectArray *a__ = [self terminateWithId:o];
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsBehaviorSubject_BehaviorDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *bs = *b__++;
      [((IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *) nil_chk(bs)) emitNextWithId:o withLong:index_];
    }
  }
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get]))->size_ != 0;
}

- (jint)subscriberCount {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get]))->size_;
}

- (JavaLangThrowable *)getThrowable {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  if (IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
    return IoReactivexInternalUtilNotificationLite_getErrorWithId_(o);
  }
  return nil;
}

- (id)getValue {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
    return nil;
  }
  return IoReactivexInternalUtilNotificationLite_getValueWithId_(o);
}

- (IOSObjectArray *)getValues {
  IOSObjectArray *a = IoReactivexSubjectsBehaviorSubject_EMPTY_ARRAY;
  IOSObjectArray *b = [self getValuesWithNSObjectArray:a];
  if (b == IoReactivexSubjectsBehaviorSubject_EMPTY_ARRAY) {
    return [IOSObjectArray arrayWithLength:0 type:NSObject_class_()];
  }
  return b;
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  if (o == nil || IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) || IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
    if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
      IOSObjectArray_Set(array, 0, nil);
    }
    return array;
  }
  id v = IoReactivexInternalUtilNotificationLite_getValueWithId_(o);
  if (((IOSObjectArray *) nil_chk(array))->size_ != 0) {
    IOSObjectArray_Set(array, 0, v);
    if (array->size_ != 1) {
      IOSObjectArray_Set(array, 1, nil);
    }
  }
  else {
    array = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], 1), IOSClass_arrayType(NSObject_class_(), 1));
    IOSObjectArray_Set(nil_chk(array), 0, v);
  }
  return array;
}

- (jboolean)hasComplete {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  return IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o);
}

- (jboolean)hasThrowable {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  return IoReactivexInternalUtilNotificationLite_isErrorWithId_(o);
}

- (jboolean)hasValue {
  id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) get];
  return o != nil && !IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o) && !IoReactivexInternalUtilNotificationLite_isErrorWithId_(o);
}

- (jboolean)addWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexSubjectsBehaviorSubject_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, len);
    IOSObjectArray_Set(b, len, rs);
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *)rs {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexSubjectsBehaviorSubject_TERMINATED || a == IoReactivexSubjectsBehaviorSubject_EMPTY) {
      return;
    }
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if (IOSObjectArray_Get(a, i) == rs) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (len == 1) {
      b = IoReactivexSubjectsBehaviorSubject_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, len - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (IOSObjectArray *)terminateWithId:(id)terminalValue {
  IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
  if (a != IoReactivexSubjectsBehaviorSubject_TERMINATED) {
    a = [subscribers_ getAndSetWithId:IoReactivexSubjectsBehaviorSubject_TERMINATED];
    if (a != IoReactivexSubjectsBehaviorSubject_TERMINATED) {
      [self setCurrentWithId:terminalValue];
    }
  }
  return a;
}

- (void)setCurrentWithId:(id)o {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(writeLock_)) lock];
  @try {
    index_++;
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) lazySetWithId:o];
  }
  @finally {
    [writeLock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(subscribers_);
  RELEASE_(lock_);
  RELEASE_(readLock_);
  RELEASE_(writeLock_);
  RELEASE_(terminalEvent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexSubjectsBehaviorSubject;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, "LIoReactivexSubjectsBehaviorSubject;", 0x9, 2, 3, -1, 4, 5, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x0, 22, 20, -1, 23, -1, -1 },
    { NULL, "[LIoReactivexSubjectsBehaviorSubject_BehaviorDisposable;", 0x0, 24, 3, -1, 25, -1, -1 },
    { NULL, "V", 0x0, 26, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createDefaultWithId:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithId:);
  methods[4].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[5].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(onNextWithId:);
  methods[7].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[8].selector = @selector(onComplete);
  methods[9].selector = @selector(hasObservers);
  methods[10].selector = @selector(subscriberCount);
  methods[11].selector = @selector(getThrowable);
  methods[12].selector = @selector(getValue);
  methods[13].selector = @selector(getValues);
  methods[14].selector = @selector(getValuesWithNSObjectArray:);
  methods[15].selector = @selector(hasComplete);
  methods[16].selector = @selector(hasThrowable);
  methods[17].selector = @selector(hasValue);
  methods[18].selector = @selector(addWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:);
  methods[19].selector = @selector(removeWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:);
  methods[20].selector = @selector(terminateWithId:);
  methods[21].selector = @selector(setCurrentWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 28, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 29, -1 },
    { "EMPTY", "[LIoReactivexSubjectsBehaviorSubject_BehaviorDisposable;", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "TERMINATED", "[LIoReactivexSubjectsBehaviorSubject_BehaviorDisposable;", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReadWriteLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "readLock_", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writeLock_", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "terminalEvent_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 32, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/subjects/BehaviorSubject<TT;>;", (void *)&IoReactivexSubjectsBehaviorSubject__Annotations$0, "createDefault", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)Lio/reactivex/subjects/BehaviorSubject<TT;>;", (void *)&IoReactivexSubjectsBehaviorSubject__Annotations$1, "(TT;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "onError", "LJavaLangThrowable;", "()TT;", "getValues", "[LNSObject;", "([TT;)[TT;", "add", "LIoReactivexSubjectsBehaviorSubject_BehaviorDisposable;", "(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable<TT;>;)Z", "remove", "(Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable<TT;>;)V", "terminate", "(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable<TT;>;", "setCurrent", &IoReactivexSubjectsBehaviorSubject_EMPTY_ARRAY, "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/subjects/BehaviorSubject$BehaviorDisposable<TT;>;>;", &IoReactivexSubjectsBehaviorSubject_EMPTY, &IoReactivexSubjectsBehaviorSubject_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "<T:Ljava/lang/Object;>Lio/reactivex/subjects/Subject<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsBehaviorSubject = { "BehaviorSubject", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x11, 22, 10, -1, 20, -1, 33, -1 };
  return &_IoReactivexSubjectsBehaviorSubject;
}

+ (void)initialize {
  if (self == [IoReactivexSubjectsBehaviorSubject class]) {
    JreStrongAssignAndConsume(&IoReactivexSubjectsBehaviorSubject_EMPTY_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsBehaviorSubject_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsBehaviorSubject_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexSubjectsBehaviorSubject)
  }
}

@end

IoReactivexSubjectsBehaviorSubject *IoReactivexSubjectsBehaviorSubject_create() {
  IoReactivexSubjectsBehaviorSubject_initialize();
  return create_IoReactivexSubjectsBehaviorSubject_init();
}

IoReactivexSubjectsBehaviorSubject *IoReactivexSubjectsBehaviorSubject_createDefaultWithId_(id defaultValue) {
  IoReactivexSubjectsBehaviorSubject_initialize();
  return create_IoReactivexSubjectsBehaviorSubject_initWithId_(defaultValue);
}

void IoReactivexSubjectsBehaviorSubject_init(IoReactivexSubjectsBehaviorSubject *self) {
  IoReactivexSubjectsSubject_init(self);
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_init());
  JreStrongAssign(&self->readLock_, [self->lock_ readLock]);
  JreStrongAssign(&self->writeLock_, [self->lock_ writeLock]);
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexSubjectsBehaviorSubject_EMPTY));
  JreStrongAssignAndConsume(&self->value_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->terminalEvent_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexSubjectsBehaviorSubject *new_IoReactivexSubjectsBehaviorSubject_init() {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsBehaviorSubject, init)
}

IoReactivexSubjectsBehaviorSubject *create_IoReactivexSubjectsBehaviorSubject_init() {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsBehaviorSubject, init)
}

void IoReactivexSubjectsBehaviorSubject_initWithId_(IoReactivexSubjectsBehaviorSubject *self, id defaultValue) {
  IoReactivexSubjectsBehaviorSubject_init(self);
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->value_)) lazySetWithId:IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(defaultValue, @"defaultValue is null")];
}

IoReactivexSubjectsBehaviorSubject *new_IoReactivexSubjectsBehaviorSubject_initWithId_(id defaultValue) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsBehaviorSubject, initWithId_, defaultValue)
}

IoReactivexSubjectsBehaviorSubject *create_IoReactivexSubjectsBehaviorSubject_initWithId_(id defaultValue) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsBehaviorSubject, initWithId_, defaultValue)
}

IOSObjectArray *IoReactivexSubjectsBehaviorSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsBehaviorSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsBehaviorSubject)

@implementation IoReactivexSubjectsBehaviorSubject_BehaviorDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
     withIoReactivexSubjectsBehaviorSubject:(IoReactivexSubjectsBehaviorSubject *)state {
  IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(self, actual, state);
  return self;
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((IoReactivexSubjectsBehaviorSubject *) nil_chk(state_)) removeWithIoReactivexSubjectsBehaviorSubject_BehaviorDisposable:self];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)emitFirst {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id o;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if (next_) {
      return;
    }
    IoReactivexSubjectsBehaviorSubject *s = state_;
    id<JavaUtilConcurrentLocksLock> lock = ((IoReactivexSubjectsBehaviorSubject *) nil_chk(s))->readLock_;
    [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock)) lock];
    index_ = s->index_;
    o = JreRetainedLocalValue([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s->value_)) get]);
    [lock unlock];
    emitting_ = (o != nil);
    next_ = true;
  }
  if (o != nil) {
    if ([self testWithId:o]) {
      return;
    }
    [self emitLoop];
  }
}

- (void)emitNextWithId:(id)value
              withLong:(jlong)stateIndex {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  if (!fastPath_) {
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (index_ == stateIndex) {
        return;
      }
      if (emitting_) {
        IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
        if (q == nil) {
          q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(4);
          JreStrongAssign(&queue_, q);
        }
        [q addWithId:value];
        return;
      }
      next_ = true;
    }
    fastPath_ = true;
  }
  [self testWithId:value];
}

- (jboolean)testWithId:(id)o {
  return JreLoadVolatileBoolean(&cancelled_) || IoReactivexInternalUtilNotificationLite_acceptWithId_withIoReactivexObserver_(o, actual_);
}

- (void)emitLoop {
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexInternalUtilAppendOnlyLinkedArrayList *q;
    @synchronized(self) {
      q = JreRetainedLocalValue(queue_);
      if (q == nil) {
        emitting_ = false;
        return;
      }
      JreStrongAssign(&queue_, nil);
    }
    [q forEachWhileWithIoReactivexInternalUtilAppendOnlyLinkedArrayList_NonThrowingPredicate:self];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(state_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexSubjectsBehaviorSubject:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(emitFirst);
  methods[4].selector = @selector(emitNextWithId:withLong:);
  methods[5].selector = @selector(testWithId:);
  methods[6].selector = @selector(emitLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "state_", "LIoReactivexSubjectsBehaviorSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "next_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalUtilAppendOnlyLinkedArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "fastPath_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexSubjectsBehaviorSubject;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/subjects/BehaviorSubject<TT;>;)V", "emitNext", "LNSObject;J", "test", "LNSObject;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/subjects/BehaviorSubject<TT;>;", "Lio/reactivex/internal/util/AppendOnlyLinkedArrayList<Ljava/lang/Object;>;", "LIoReactivexSubjectsBehaviorSubject;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsBehaviorSubject_BehaviorDisposable = { "BehaviorDisposable", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 7, 8, 9, -1, -1, 10, -1 };
  return &_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable;
}

@end

void IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->state_, state);
}

IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *new_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_, actual, state)
}

IoReactivexSubjectsBehaviorSubject_BehaviorDisposable *create_IoReactivexSubjectsBehaviorSubject_BehaviorDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsBehaviorSubject *state) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsBehaviorSubject_, actual, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsBehaviorSubject_BehaviorDisposable)
