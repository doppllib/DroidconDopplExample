//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableMapNotification
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableMapNotification

#if !defined (IoReactivexInternalOperatorsObservableObservableMapNotification_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableMapNotification))
#define IoReactivexInternalOperatorsObservableObservableMapNotification_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableMapNotification : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> onNextMapper_;
  id<IoReactivexFunctionsFunction> onErrorMapper_;
  id<JavaUtilConcurrentCallable> onCompleteSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onNextMapper
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onErrorMapper
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)onCompleteSupplier;

- (id<IoReactivexObservableSource>)blockingFirst;

- (id<IoReactivexObservableSource>)blockingFirstWithId:(id<IoReactivexObservableSource>)arg0;

- (id<IoReactivexObservableSource>)blockingLast;

- (id<IoReactivexObservableSource>)blockingLastWithId:(id<IoReactivexObservableSource>)arg0;

- (id<IoReactivexObservableSource>)blockingSingle;

- (id<IoReactivexObservableSource>)blockingSingleWithId:(id<IoReactivexObservableSource>)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableMapNotification)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification, onNextMapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification, onErrorMapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification, onCompleteSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableMapNotification_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableMapNotification *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableMapNotification *new_IoReactivexInternalOperatorsObservableObservableMapNotification_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableMapNotification *create_IoReactivexInternalOperatorsObservableObservableMapNotification_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableMapNotification)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver))
#define IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsFunction> onNextMapper_;
  id<IoReactivexFunctionsFunction> onErrorMapper_;
  id<JavaUtilConcurrentCallable> onCompleteSupplier_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onNextMapper
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onErrorMapper
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)onCompleteSupplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver, onNextMapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver, onErrorMapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver, onCompleteSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver *new_IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver *create_IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> onNextMapper, id<IoReactivexFunctionsFunction> onErrorMapper, id<JavaUtilConcurrentCallable> onCompleteSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableMapNotification_MapNotificationObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableMapNotification")
