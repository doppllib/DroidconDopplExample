//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleDefer.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsSingleSingleDefer

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)singleSupplier {
  IoReactivexInternalOperatorsSingleSingleDefer_initWithJavaUtilConcurrentCallable_(self, singleSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  id<IoReactivexSingleSource> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(singleSupplier_)) call], @"The singleSupplier returned a null SingleSource");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(e, s);
    return;
  }
  [((id<IoReactivexSingleSource>) nil_chk(next)) subscribeWithIoReactivexSingleObserver:s];
}

- (void)dealloc {
  RELEASE_(singleSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+Lio/reactivex/SingleSource<+TT;>;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Ljava/util/concurrent/Callable<+Lio/reactivex/SingleSource<+TT;>;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleDefer = { "SingleDefer", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleDefer;
}

@end

void IoReactivexInternalOperatorsSingleSingleDefer_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsSingleSingleDefer *self, id<JavaUtilConcurrentCallable> singleSupplier) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->singleSupplier_, singleSupplier);
}

IoReactivexInternalOperatorsSingleSingleDefer *new_IoReactivexInternalOperatorsSingleSingleDefer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> singleSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleDefer, initWithJavaUtilConcurrentCallable_, singleSupplier)
}

IoReactivexInternalOperatorsSingleSingleDefer *create_IoReactivexInternalOperatorsSingleSingleDefer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> singleSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleDefer, initWithJavaUtilConcurrentCallable_, singleSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleDefer)
