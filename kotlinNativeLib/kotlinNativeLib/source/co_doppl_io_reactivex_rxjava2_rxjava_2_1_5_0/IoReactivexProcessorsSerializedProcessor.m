//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalUtilAppendOnlyLinkedArrayList.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsFlowableProcessor.h"
#include "IoReactivexProcessorsSerializedProcessor.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexProcessorsSerializedProcessor

- (instancetype)initWithIoReactivexProcessorsFlowableProcessor:(IoReactivexProcessorsFlowableProcessor *)actual {
  IoReactivexProcessorsSerializedProcessor_initWithIoReactivexProcessorsFlowableProcessor_(self, actual);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  jboolean cancel;
  if (!JreLoadVolatileBoolean(&done_)) {
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&done_)) {
        cancel = true;
      }
      else {
        if (emitting_) {
          IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
          if (q == nil) {
            q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(4);
            JreStrongAssign(&queue_, q);
          }
          [q addWithId:IoReactivexInternalUtilNotificationLite_subscriptionWithOrgReactivestreamsSubscription_(s)];
          return;
        }
        emitting_ = true;
        cancel = false;
      }
    }
  }
  else {
    cancel = true;
  }
  if (cancel) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
  }
  else {
    [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:s];
    [self emitLoop];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      return;
    }
    if (emitting_) {
      IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
      if (q == nil) {
        q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(4);
        JreStrongAssign(&queue_, q);
      }
      [q addWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
      return;
    }
    emitting_ = true;
  }
  [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) onNextWithId:t];
  [self emitLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  jboolean reportError;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      reportError = true;
    }
    else {
      JreAssignVolatileBoolean(&done_, true);
      if (emitting_) {
        IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
        if (q == nil) {
          q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(4);
          JreStrongAssign(&queue_, q);
        }
        [q setFirstWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(t)];
        return;
      }
      reportError = false;
      emitting_ = true;
    }
  }
  if (reportError) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      return;
    }
    JreAssignVolatileBoolean(&done_, true);
    if (emitting_) {
      IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
      if (q == nil) {
        q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(4);
        JreStrongAssign(&queue_, q);
      }
      [q addWithId:IoReactivexInternalUtilNotificationLite_complete()];
      return;
    }
    emitting_ = true;
  }
  [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) onComplete];
}

- (void)emitLoop {
  for (; ; ) {
    IoReactivexInternalUtilAppendOnlyLinkedArrayList *q;
    @synchronized(self) {
      q = JreRetainedLocalValue(queue_);
      if (q == nil) {
        emitting_ = false;
        return;
      }
      JreStrongAssign(&queue_, nil);
    }
    [q acceptWithOrgReactivestreamsSubscriber:actual_];
  }
}

- (jboolean)hasSubscribers {
  return [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) hasSubscribers];
}

- (jboolean)hasThrowable {
  return [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) hasThrowable];
}

- (JavaLangThrowable *)getThrowable {
  return [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) getThrowable];
}

- (jboolean)hasComplete {
  return [((IoReactivexProcessorsFlowableProcessor *) nil_chk(actual_)) hasComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexProcessorsFlowableProcessor:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(emitLoop);
  methods[7].selector = @selector(hasSubscribers);
  methods[8].selector = @selector(hasThrowable);
  methods[9].selector = @selector(getThrowable);
  methods[10].selector = @selector(hasComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexProcessorsFlowableProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalUtilAppendOnlyLinkedArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexProcessorsFlowableProcessor;", "(Lio/reactivex/processors/FlowableProcessor<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/processors/FlowableProcessor<TT;>;", "Lio/reactivex/internal/util/AppendOnlyLinkedArrayList<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Lio/reactivex/processors/FlowableProcessor<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsSerializedProcessor = { "SerializedProcessor", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x10, 11, 4, -1, -1, -1, 14, -1 };
  return &_IoReactivexProcessorsSerializedProcessor;
}

@end

void IoReactivexProcessorsSerializedProcessor_initWithIoReactivexProcessorsFlowableProcessor_(IoReactivexProcessorsSerializedProcessor *self, IoReactivexProcessorsFlowableProcessor *actual) {
  IoReactivexProcessorsFlowableProcessor_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexProcessorsSerializedProcessor *new_IoReactivexProcessorsSerializedProcessor_initWithIoReactivexProcessorsFlowableProcessor_(IoReactivexProcessorsFlowableProcessor *actual) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsSerializedProcessor, initWithIoReactivexProcessorsFlowableProcessor_, actual)
}

IoReactivexProcessorsSerializedProcessor *create_IoReactivexProcessorsSerializedProcessor_initWithIoReactivexProcessorsFlowableProcessor_(IoReactivexProcessorsFlowableProcessor *actual) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsSerializedProcessor, initWithIoReactivexProcessorsFlowableProcessor_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsSerializedProcessor)
