//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiFunction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableGenerate.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@interface IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable ()

- (void)disposeWithId:(id)s;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *self, id s);

@implementation IoReactivexInternalOperatorsObservableObservableGenerate

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)stateSupplier
                withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)generator
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposeState {
  IoReactivexInternalOperatorsObservableObservableGenerate_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_(self, stateSupplier, generator, disposeState);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  id state;
  @try {
    state = [((id<JavaUtilConcurrentCallable>) nil_chk(stateSupplier_)) call];
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexObserver_(e, s);
    return;
  }
  IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *gd = create_IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_(s, generator_, disposeState_, state);
  [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:gd];
  [gd run];
}

- (void)dealloc {
  RELEASE_(stateSupplier_);
  RELEASE_(generator_);
  RELEASE_(disposeState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:withIoReactivexFunctionsBiFunction:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stateSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "generator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "disposeState_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiFunction;LIoReactivexFunctionsConsumer;", "(Ljava/util/concurrent/Callable<TS;>;Lio/reactivex/functions/BiFunction<TS;Lio/reactivex/Emitter<TT;>;TS;>;Lio/reactivex/functions/Consumer<-TS;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/util/concurrent/Callable<TS;>;", "Lio/reactivex/functions/BiFunction<TS;Lio/reactivex/Emitter<TT;>;TS;>;", "Lio/reactivex/functions/Consumer<-TS;>;", "LIoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable;", "<T:Ljava/lang/Object;S:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGenerate = { "ObservableGenerate", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGenerate;
}

@end

void IoReactivexInternalOperatorsObservableObservableGenerate_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsObservableObservableGenerate *self, id<JavaUtilConcurrentCallable> stateSupplier, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->stateSupplier_, stateSupplier);
  JreStrongAssign(&self->generator_, generator);
  JreStrongAssign(&self->disposeState_, disposeState);
}

IoReactivexInternalOperatorsObservableObservableGenerate *new_IoReactivexInternalOperatorsObservableObservableGenerate_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> stateSupplier, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGenerate, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_, stateSupplier, generator, disposeState)
}

IoReactivexInternalOperatorsObservableObservableGenerate *create_IoReactivexInternalOperatorsObservableObservableGenerate_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> stateSupplier, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGenerate, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_, stateSupplier, generator, disposeState)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGenerate)

@implementation IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)generator
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposeState
                                     withId:(id)initialState {
  IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_(self, actual, generator, disposeState, initialState);
  return self;
}

- (void)run {
  id s = state_;
  if (JreLoadVolatileBoolean(&cancelled_)) {
    JreStrongAssign(&state_, nil);
    IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(self, s);
    return;
  }
  id<IoReactivexFunctionsBiFunction> f = generator_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      JreStrongAssign(&state_, nil);
      IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(self, s);
      return;
    }
    hasNext_ = false;
    @try {
      s = [((id<IoReactivexFunctionsBiFunction>) nil_chk(f)) applyWithId:s withId:self];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      JreStrongAssign(&state_, nil);
      JreAssignVolatileBoolean(&cancelled_, true);
      [self onErrorWithJavaLangThrowable:ex];
      IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(self, s);
      return;
    }
    if (terminate_) {
      JreAssignVolatileBoolean(&cancelled_, true);
      JreStrongAssign(&state_, nil);
      IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(self, s);
      return;
    }
  }
}

- (void)disposeWithId:(id)s {
  IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(self, s);
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)onNextWithId:(id)t {
  if (!terminate_) {
    if (hasNext_) {
      [self onErrorWithJavaLangThrowable:create_JavaLangIllegalStateException_initWithNSString_(@"onNext already called in this generate turn")];
    }
    else {
      if (t == nil) {
        [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
      }
      else {
        hasNext_ = true;
        [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (terminate_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
  else {
    if (t == nil) {
      t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
    }
    terminate_ = true;
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
}

- (void)onComplete {
  if (!terminate_) {
    terminate_ = true;
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(generator_);
  RELEASE_(disposeState_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexFunctionsBiFunction:withIoReactivexFunctionsConsumer:withId:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(disposeWithId:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "generator_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "disposeState_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "state_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "terminate_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasNext_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexFunctionsBiFunction;LIoReactivexFunctionsConsumer;LNSObject;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/functions/BiFunction<TS;-Lio/reactivex/Emitter<TT;>;TS;>;Lio/reactivex/functions/Consumer<-TS;>;TS;)V", "dispose", "LNSObject;", "(TS;)V", "onNext", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/functions/BiFunction<TS;-Lio/reactivex/Emitter<TT;>;TS;>;", "Lio/reactivex/functions/Consumer<-TS;>;", "TS;", "LIoReactivexInternalOperatorsObservableObservableGenerate;", "<T:Ljava/lang/Object;S:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Emitter<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable = { "GeneratorDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 7, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState, id initialState) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->generator_, generator);
  JreStrongAssign(&self->disposeState_, disposeState);
  JreStrongAssign(&self->state_, initialState);
}

IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *new_IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState, id initialState) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable, initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_, actual, generator, disposeState, initialState)
}

IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *create_IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState, id initialState) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable, initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_withId_, actual, generator, disposeState, initialState)
}

void IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable_disposeWithId_(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable *self, id s) {
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(self->disposeState_)) acceptWithId:s];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableGenerate_GeneratorDisposable)
