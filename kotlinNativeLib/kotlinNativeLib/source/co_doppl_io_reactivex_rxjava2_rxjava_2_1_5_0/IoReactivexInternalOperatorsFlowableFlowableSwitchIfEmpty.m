//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty.h"
#include "IoReactivexInternalSubscriptionsSubscriptionArbiter.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(self, source, other);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *parent = create_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(s, other_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent->arbiter_];
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:parent];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LOrgReactivestreamsPublisher;", "(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Publisher<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty = { "FlowableSwitchIfEmpty", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *new_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_, source, other)
}

IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *create_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty, initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty)

@implementation IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(self, actual, other);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  [((IoReactivexInternalSubscriptionsSubscriptionArbiter *) nil_chk(arbiter_)) setSubscriptionWithOrgReactivestreamsSubscription:s];
}

- (void)onNextWithId:(id)t {
  if (empty_) {
    empty_ = false;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (empty_) {
    empty_ = false;
    [((id<OrgReactivestreamsPublisher>) nil_chk(other_)) subscribeWithOrgReactivestreamsSubscriber:self];
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(other_);
  RELEASE_(arbiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "arbiter_", "LIoReactivexInternalSubscriptionsSubscriptionArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "empty_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lorg/reactivestreams/Publisher<+TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lorg/reactivestreams/Publisher<+TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber = { "SwitchIfEmptySubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 4, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->other_, other);
  self->empty_ = true;
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalSubscriptionsSubscriptionArbiter_init());
}

IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber, initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber)
