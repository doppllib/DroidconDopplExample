//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexFlowable")
#ifdef RESTRICT_IoReactivexFlowable
#define INCLUDE_ALL_IoReactivexFlowable 0
#else
#define INCLUDE_ALL_IoReactivexFlowable 1
#endif
#undef RESTRICT_IoReactivexFlowable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexFlowable_) && (INCLUDE_ALL_IoReactivexFlowable || defined(INCLUDE_IoReactivexFlowable))
#define IoReactivexFlowable_

#define RESTRICT_OrgReactivestreamsPublisher 1
#define INCLUDE_OrgReactivestreamsPublisher 1
#include "OrgReactivestreamsPublisher.h"

@class IOSClass;
@class IOSObjectArray;
@class IoReactivexBackpressureOverflowStrategy;
@class IoReactivexBackpressureStrategy;
@class IoReactivexCompletable;
@class IoReactivexFlowablesConnectableFlowable;
@class IoReactivexMaybe;
@class IoReactivexObservable;
@class IoReactivexParallelParallelFlowable;
@class IoReactivexScheduler;
@class IoReactivexSingle;
@class IoReactivexSubscribersTestSubscriber;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFlowableOnSubscribe;
@protocol IoReactivexFlowableOperator;
@protocol IoReactivexFlowableSubscriber;
@protocol IoReactivexFlowableTransformer;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsBiPredicate;
@protocol IoReactivexFunctionsBooleanSupplier;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction3;
@protocol IoReactivexFunctionsFunction4;
@protocol IoReactivexFunctionsFunction5;
@protocol IoReactivexFunctionsFunction6;
@protocol IoReactivexFunctionsFunction7;
@protocol IoReactivexFunctionsFunction8;
@protocol IoReactivexFunctionsFunction9;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexFunctionsLongConsumer;
@protocol IoReactivexFunctionsPredicate;
@protocol JavaLangIterable;
@protocol JavaUtilComparator;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexFlowable : NSObject < OrgReactivestreamsPublisher >

+ (jint)BUFFER_SIZE;

#pragma mark Public

- (instancetype)init;

- (IoReactivexSingle *)allWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

+ (IoReactivexFlowable *)ambWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)ambArrayWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

- (IoReactivexFlowable *)ambWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexSingle *)anyWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (id)blockingFirst;

- (id)blockingFirstWithId:(id)defaultItem;

- (void)blockingForEachWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext;

- (id<JavaLangIterable>)blockingIterable;

- (id<JavaLangIterable>)blockingIterableWithInt:(jint)bufferSize;

- (id)blockingLast;

- (id)blockingLastWithId:(id)defaultItem;

- (id<JavaLangIterable>)blockingLatest;

- (id<JavaLangIterable>)blockingMostRecentWithId:(id)initialItem;

- (id<JavaLangIterable>)blockingNext;

- (id)blockingSingle;

- (id)blockingSingleWithId:(id)defaultItem;

- (void)blockingSubscribe;

- (void)blockingSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext;

- (void)blockingSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                         withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (void)blockingSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                         withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                           withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (void)blockingSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber;

- (IoReactivexFlowable *)bufferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundaryIndicatorSupplier;

- (IoReactivexFlowable *)bufferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundaryIndicatorSupplier
                               withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithIoReactivexFlowable:(IoReactivexFlowable *)openingIndicator
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)closingIndicator;

- (IoReactivexFlowable *)bufferWithIoReactivexFlowable:(IoReactivexFlowable *)openingIndicator
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)closingIndicator
                        withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithInt:(jint)count;

- (IoReactivexFlowable *)bufferWithInt:(jint)count
        withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithInt:(jint)count
                               withInt:(jint)skip;

- (IoReactivexFlowable *)bufferWithInt:(jint)count
                               withInt:(jint)skip
        withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
         withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                withInt:(jint)count;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withInt:(jint)count;

- (IoReactivexFlowable *)bufferWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withInt:(jint)count
         withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                            withBoolean:(jboolean)restartTimerOnMaxSize;

- (IoReactivexFlowable *)bufferWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundaryIndicator;

- (IoReactivexFlowable *)bufferWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundaryIndicator
                                withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (IoReactivexFlowable *)bufferWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundaryIndicator
                                                       withInt:(jint)initialCapacity;

+ (jint)bufferSize;

- (IoReactivexFlowable *)cache;

- (IoReactivexFlowable *)cacheWithInitialCapacityWithInt:(jint)initialCapacity;

- (IoReactivexFlowable *)castWithIOSClass:(IOSClass *)clazz;

- (IoReactivexSingle *)collectWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialItemSupplier
                          withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

- (IoReactivexSingle *)collectIntoWithId:(id)initialItem
      withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

+ (IoReactivexFlowable *)combineLatestWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                  withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)combineLatestWithJavaLangIterable:(id<JavaLangIterable>)sources
                          withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

+ (IoReactivexFlowable *)combineLatestWithJavaLangIterable:(id<JavaLangIterable>)sources
                          withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                                   withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                   withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                    withIoReactivexFunctionsFunction3:(id<IoReactivexFunctionsFunction3>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                    withIoReactivexFunctionsFunction4:(id<IoReactivexFunctionsFunction4>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                                    withIoReactivexFunctionsFunction5:(id<IoReactivexFunctionsFunction5>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                                    withIoReactivexFunctionsFunction6:(id<IoReactivexFunctionsFunction6>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                                    withIoReactivexFunctionsFunction7:(id<IoReactivexFunctionsFunction7>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source8
                                    withIoReactivexFunctionsFunction8:(id<IoReactivexFunctionsFunction8>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source8
                                      withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source9
                                    withIoReactivexFunctionsFunction9:(id<IoReactivexFunctionsFunction9>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                          withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

+ (IoReactivexFlowable *)combineLatestWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                          withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                                                   withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                                                         withInt:(jint)bufferSize
                                            withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                            withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources
                                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources
                                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                                             withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

+ (IoReactivexFlowable *)combineLatestDelayErrorWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                                                             withInt:(jint)bufferSize;

- (IoReactivexFlowable *)composeWithIoReactivexFlowableTransformer:(id<IoReactivexFlowableTransformer>)composer;

+ (IoReactivexFlowable *)concatWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                       withInt:(jint)prefetch;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4;

+ (IoReactivexFlowable *)concatArrayWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatArrayDelayErrorWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatArrayEagerWithInt:(jint)maxConcurrency
                                         withInt:(jint)prefetch
            withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatArrayEagerWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                                 withInt:(jint)prefetch
                                                             withBoolean:(jboolean)tillTheEnd;

+ (IoReactivexFlowable *)concatEagerWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatEagerWithJavaLangIterable:(id<JavaLangIterable>)sources
                                                 withInt:(jint)maxConcurrency
                                                 withInt:(jint)prefetch;

+ (IoReactivexFlowable *)concatEagerWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatEagerWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                            withInt:(jint)maxConcurrency
                                                            withInt:(jint)prefetch;

- (IoReactivexFlowable *)concatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)concatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                           withInt:(jint)prefetch;

- (IoReactivexFlowable *)concatMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)concatMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                     withInt:(jint)prefetch
                                                                 withBoolean:(jboolean)tillTheEnd;

- (IoReactivexFlowable *)concatMapEagerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)concatMapEagerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                withInt:(jint)maxConcurrency
                                                                withInt:(jint)prefetch;

- (IoReactivexFlowable *)concatMapEagerDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                      withBoolean:(jboolean)tillTheEnd;

- (IoReactivexFlowable *)concatMapEagerDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                          withInt:(jint)maxConcurrency
                                                                          withInt:(jint)prefetch
                                                                      withBoolean:(jboolean)tillTheEnd;

- (IoReactivexFlowable *)concatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)concatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                   withInt:(jint)prefetch;

- (IoReactivexFlowable *)concatWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexSingle *)containsWithId:(id)item;

- (IoReactivexSingle *)count;

+ (IoReactivexFlowable *)createWithIoReactivexFlowableOnSubscribe:(id<IoReactivexFlowableOnSubscribe>)source
                              withIoReactivexBackpressureStrategy:(IoReactivexBackpressureStrategy *)mode;

- (IoReactivexFlowable *)debounceWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)debounceIndicator;

- (IoReactivexFlowable *)debounceWithLong:(jlong)timeout
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)debounceWithLong:(jlong)timeout
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)defaultIfEmptyWithId:(id)defaultItem;

+ (IoReactivexFlowable *)deferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)supplier;

- (IoReactivexFlowable *)delayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemDelayIndicator;

- (IoReactivexFlowable *)delayWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)delayWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)delayWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)delayWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                           withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)delayWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)subscriptionIndicator
                             withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemDelayIndicator;

- (IoReactivexFlowable *)delaySubscriptionWithLong:(jlong)delay
                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)delaySubscriptionWithLong:(jlong)delay
                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                          withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)delaySubscriptionWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)subscriptionIndicator;

- (IoReactivexFlowable *)dematerialize;

- (IoReactivexFlowable *)distinct;

- (IoReactivexFlowable *)distinctWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector;

- (IoReactivexFlowable *)distinctWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier;

- (IoReactivexFlowable *)distinctUntilChanged;

- (IoReactivexFlowable *)distinctUntilChangedWithIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)comparer;

- (IoReactivexFlowable *)distinctUntilChangedWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector;

- (IoReactivexFlowable *)doAfterNextWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterNext;

- (IoReactivexFlowable *)doAfterTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onAfterTerminate;

- (IoReactivexFlowable *)doFinallyWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally;

- (IoReactivexFlowable *)doOnCancelWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onCancel;

- (IoReactivexFlowable *)doOnCompleteWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (IoReactivexFlowable *)doOnEachWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNotification;

- (IoReactivexFlowable *)doOnEachWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber;

- (IoReactivexFlowable *)doOnErrorWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (IoReactivexFlowable *)doOnLifecycleWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe
                                  withIoReactivexFunctionsLongConsumer:(id<IoReactivexFunctionsLongConsumer>)onRequest
                                        withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onCancel;

- (IoReactivexFlowable *)doOnNextWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext;

- (IoReactivexFlowable *)doOnRequestWithIoReactivexFunctionsLongConsumer:(id<IoReactivexFunctionsLongConsumer>)onRequest;

- (IoReactivexFlowable *)doOnSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe;

- (IoReactivexFlowable *)doOnTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onTerminate;

- (IoReactivexMaybe *)elementAtWithLong:(jlong)index;

- (IoReactivexSingle *)elementAtWithLong:(jlong)index
                                  withId:(id)defaultItem;

- (IoReactivexSingle *)elementAtOrErrorWithLong:(jlong)index;

+ (IoReactivexFlowable *)empty;

+ (IoReactivexFlowable *)errorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)supplier;

+ (IoReactivexFlowable *)errorWithJavaLangThrowable:(JavaLangThrowable *)throwable;

- (IoReactivexFlowable *)filterWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexSingle *)firstWithId:(id)defaultItem;

- (IoReactivexMaybe *)firstElement;

- (IoReactivexSingle *)firstOrError;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner
                                                     withBoolean:(jboolean)delayErrors;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner
                                                     withBoolean:(jboolean)delayErrors
                                                         withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner
                                                     withBoolean:(jboolean)delayErrors
                                                         withInt:(jint)maxConcurrency
                                                         withInt:(jint)bufferSize;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                              withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner
                                                         withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                     withBoolean:(jboolean)delayErrors;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                     withBoolean:(jboolean)delayErrors
                                                         withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                     withBoolean:(jboolean)delayErrors
                                                         withInt:(jint)maxConcurrency
                                                         withInt:(jint)bufferSize;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onNextMapper
                                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onErrorMapper
                                  withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)onCompleteSupplier;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onNextMapper
                                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onErrorMapper
                                  withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)onCompleteSupplier
                                                         withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                         withInt:(jint)maxConcurrency;

- (IoReactivexCompletable *)flatMapCompletableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexCompletable *)flatMapCompletableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                   withBoolean:(jboolean)delayErrors
                                                                       withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                      withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

- (IoReactivexFlowable *)flatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                      withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector
                                                                 withInt:(jint)prefetch;

- (IoReactivexFlowable *)flatMapIterableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                 withInt:(jint)bufferSize;

- (IoReactivexFlowable *)flatMapMaybeWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapMaybeWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                          withBoolean:(jboolean)delayErrors
                                                              withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)flatMapSingleWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapSingleWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                           withBoolean:(jboolean)delayErrors
                                                               withInt:(jint)maxConcurrency;

- (id<IoReactivexDisposablesDisposable>)forEachWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext;

- (id<IoReactivexDisposablesDisposable>)forEachWhileWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)onNext;

- (id<IoReactivexDisposablesDisposable>)forEachWhileWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)onNext
                                                     withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (id<IoReactivexDisposablesDisposable>)forEachWhileWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)onNext
                                                     withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                                                       withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

+ (IoReactivexFlowable *)fromArrayWithNSObjectArray:(IOSObjectArray *)items;

+ (IoReactivexFlowable *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)supplier;

+ (IoReactivexFlowable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (IoReactivexFlowable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                       withLong:(jlong)timeout
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexFlowable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                       withLong:(jlong)timeout
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexFlowable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexFlowable *)fromIterableWithJavaLangIterable:(id<JavaLangIterable>)source;

+ (IoReactivexFlowable *)fromPublisherWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source;

+ (IoReactivexFlowable *)generateWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialState
                             withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)generator;

+ (IoReactivexFlowable *)generateWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialState
                             withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)generator
                               withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposeState;

+ (IoReactivexFlowable *)generateWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialState
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)generator;

+ (IoReactivexFlowable *)generateWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialState
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)generator
                               withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposeState;

+ (IoReactivexFlowable *)generateWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)generator;

- (IoReactivexFlowable *)groupByWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector;

- (IoReactivexFlowable *)groupByWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                                     withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)groupByWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector;

- (IoReactivexFlowable *)groupByWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                                     withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)groupByWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                                     withBoolean:(jboolean)delayError
                                                         withInt:(jint)bufferSize;

- (IoReactivexFlowable *)groupJoinWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
                               withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

- (IoReactivexFlowable *)hide;

- (IoReactivexCompletable *)ignoreElements;

+ (IoReactivexFlowable *)intervalWithLong:(jlong)initialDelay
                                 withLong:(jlong)period
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexFlowable *)intervalWithLong:(jlong)initialDelay
                                 withLong:(jlong)period
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexFlowable *)intervalWithLong:(jlong)period
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexFlowable *)intervalWithLong:(jlong)period
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexFlowable *)intervalRangeWithLong:(jlong)start
                                      withLong:(jlong)count
                                      withLong:(jlong)initialDelay
                                      withLong:(jlong)period
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexFlowable *)intervalRangeWithLong:(jlong)start
                                      withLong:(jlong)count
                                      withLong:(jlong)initialDelay
                                      withLong:(jlong)period
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                      withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSingle *)isEmpty;

- (IoReactivexFlowable *)joinWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
                          withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

+ (IoReactivexFlowable *)justWithId:(id)item;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5
                             withId:(id)item6;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5
                             withId:(id)item6
                             withId:(id)item7;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5
                             withId:(id)item6
                             withId:(id)item7
                             withId:(id)item8;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5
                             withId:(id)item6
                             withId:(id)item7
                             withId:(id)item8
                             withId:(id)item9;

+ (IoReactivexFlowable *)justWithId:(id)item1
                             withId:(id)item2
                             withId:(id)item3
                             withId:(id)item4
                             withId:(id)item5
                             withId:(id)item6
                             withId:(id)item7
                             withId:(id)item8
                             withId:(id)item9
                             withId:(id)item10;

- (IoReactivexSingle *)lastWithId:(id)defaultItem;

- (IoReactivexMaybe *)lastElement;

- (IoReactivexSingle *)lastOrError;

- (IoReactivexFlowable *)liftWithIoReactivexFlowableOperator:(id<IoReactivexFlowableOperator>)lifter;

- (IoReactivexFlowable *)mapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)materialize;

+ (IoReactivexFlowable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources
                                           withInt:(jint)maxConcurrency;

+ (IoReactivexFlowable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources
                                           withInt:(jint)maxConcurrency
                                           withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                      withInt:(jint)maxConcurrency;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                              withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4;

+ (IoReactivexFlowable *)mergeArrayWithInt:(jint)maxConcurrency
                                   withInt:(jint)bufferSize
      withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeArrayWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeArrayDelayErrorWithInt:(jint)maxConcurrency
                                             withInt:(jint)bufferSize
                withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeArrayDelayErrorWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources
                                                     withInt:(jint)maxConcurrency;

+ (IoReactivexFlowable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources
                                                     withInt:(jint)maxConcurrency
                                                     withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                                withInt:(jint)maxConcurrency;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                        withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4;

- (IoReactivexFlowable *)mergeWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

+ (IoReactivexFlowable *)never;

- (IoReactivexFlowable *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                               withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                               withBoolean:(jboolean)delayError
                                                   withInt:(jint)bufferSize;

- (IoReactivexFlowable *)ofTypeWithIOSClass:(IOSClass *)clazz;

- (IoReactivexFlowable *)onBackpressureBuffer;

- (IoReactivexFlowable *)onBackpressureBufferWithBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)onBackpressureBufferWithInt:(jint)capacity;

- (IoReactivexFlowable *)onBackpressureBufferWithInt:(jint)capacity
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow;

- (IoReactivexFlowable *)onBackpressureBufferWithInt:(jint)capacity
                                         withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)onBackpressureBufferWithInt:(jint)capacity
                                         withBoolean:(jboolean)delayError
                                         withBoolean:(jboolean)unbounded;

- (IoReactivexFlowable *)onBackpressureBufferWithInt:(jint)capacity
                                         withBoolean:(jboolean)delayError
                                         withBoolean:(jboolean)unbounded
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow;

- (IoReactivexFlowable *)onBackpressureBufferWithLong:(jlong)capacity
                       withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow
          withIoReactivexBackpressureOverflowStrategy:(IoReactivexBackpressureOverflowStrategy *)overflowStrategy;

- (IoReactivexFlowable *)onBackpressureDrop;

- (IoReactivexFlowable *)onBackpressureDropWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onDrop;

- (IoReactivexFlowable *)onBackpressureLatest;

- (IoReactivexFlowable *)onErrorResumeNextWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunction;

- (IoReactivexFlowable *)onErrorResumeNextWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)next;

- (IoReactivexFlowable *)onErrorReturnWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSupplier;

- (IoReactivexFlowable *)onErrorReturnItemWithId:(id)item;

- (IoReactivexFlowable *)onExceptionResumeNextWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)next;

- (IoReactivexFlowable *)onTerminateDetach;

- (IoReactivexParallelParallelFlowable *)parallel;

- (IoReactivexParallelParallelFlowable *)parallelWithInt:(jint)parallelism;

- (IoReactivexParallelParallelFlowable *)parallelWithInt:(jint)parallelism
                                                 withInt:(jint)prefetch;

- (IoReactivexFlowablesConnectableFlowable *)publish;

- (IoReactivexFlowable *)publishWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector;

- (IoReactivexFlowable *)publishWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                         withInt:(jint)prefetch;

- (IoReactivexFlowablesConnectableFlowable *)publishWithInt:(jint)bufferSize;

+ (IoReactivexFlowable *)rangeWithInt:(jint)start
                              withInt:(jint)count;

+ (IoReactivexFlowable *)rangeLongWithLong:(jlong)start
                                  withLong:(jlong)count;

- (IoReactivexFlowable *)rebatchRequestsWithInt:(jint)n;

- (IoReactivexMaybe *)reduceWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

- (IoReactivexSingle *)reduceWithId:(id)seed
 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

- (IoReactivexSingle *)reduceWithWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)seedSupplier
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

- (IoReactivexFlowable *)repeat;

- (IoReactivexFlowable *)repeatWithLong:(jlong)times;

- (IoReactivexFlowable *)repeatUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexFlowable *)repeatWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (IoReactivexFlowablesConnectableFlowable *)replay;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                        withInt:(jint)bufferSize;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                        withInt:(jint)bufferSize
                                                       withLong:(jlong)time
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                        withInt:(jint)bufferSize
                                                       withLong:(jlong)time
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                        withInt:(jint)bufferSize
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                       withLong:(jlong)time
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                                       withLong:(jlong)time
                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)replayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowablesConnectableFlowable *)replayWithInt:(jint)bufferSize;

- (IoReactivexFlowablesConnectableFlowable *)replayWithInt:(jint)bufferSize
                                                  withLong:(jlong)time
                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowablesConnectableFlowable *)replayWithInt:(jint)bufferSize
                                                  withLong:(jlong)time
                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                  withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowablesConnectableFlowable *)replayWithInt:(jint)bufferSize
                                  withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowablesConnectableFlowable *)replayWithLong:(jlong)time
                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowablesConnectableFlowable *)replayWithLong:(jlong)time
                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowablesConnectableFlowable *)replayWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)retry;

- (IoReactivexFlowable *)retryWithIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)predicate;

- (IoReactivexFlowable *)retryWithLong:(jlong)count;

- (IoReactivexFlowable *)retryWithLong:(jlong)times
     withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexFlowable *)retryWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexFlowable *)retryUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexFlowable *)retryWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (void)safeSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

- (IoReactivexFlowable *)sampleWithLong:(jlong)period
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)sampleWithLong:(jlong)period
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withBoolean:(jboolean)emitLast;

- (IoReactivexFlowable *)sampleWithLong:(jlong)period
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)sampleWithLong:(jlong)period
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                            withBoolean:(jboolean)emitLast;

- (IoReactivexFlowable *)sampleWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sampler;

- (IoReactivexFlowable *)sampleWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sampler
                                                   withBoolean:(jboolean)emitLast;

- (IoReactivexFlowable *)scanWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

- (IoReactivexFlowable *)scanWithId:(id)initialValue
 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

- (IoReactivexFlowable *)scanWithWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)seedSupplier
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

+ (IoReactivexSingle *)sequenceEqualWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2;

+ (IoReactivexSingle *)sequenceEqualWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)isEqual;

+ (IoReactivexSingle *)sequenceEqualWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)isEqual
                                                            withInt:(jint)bufferSize;

+ (IoReactivexSingle *)sequenceEqualWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                                            withInt:(jint)bufferSize;

- (IoReactivexFlowable *)serialize;

- (IoReactivexFlowable *)share;

- (IoReactivexSingle *)singleWithId:(id)defaultItem;

- (IoReactivexMaybe *)singleElement;

- (IoReactivexSingle *)singleOrError;

- (IoReactivexFlowable *)skipWithLong:(jlong)count;

- (IoReactivexFlowable *)skipWithLong:(jlong)time
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)skipWithLong:(jlong)time
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)skipLastWithInt:(jint)count;

- (IoReactivexFlowable *)skipLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)skipLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                              withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)skipLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)skipLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)skipLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError
                                  withInt:(jint)bufferSize;

- (IoReactivexFlowable *)skipUntilWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)skipWhileWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexFlowable *)sorted;

- (IoReactivexFlowable *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)sortFunction;

- (IoReactivexFlowable *)startWithWithJavaLangIterable:(id<JavaLangIterable>)items;

- (IoReactivexFlowable *)startWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)startWithWithId:(id)value;

- (IoReactivexFlowable *)startWithArrayWithNSObjectArray:(IOSObjectArray *)items;

- (id<IoReactivexDisposablesDisposable>)subscribe;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                                                   withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                                                   withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe;

- (void)subscribeWithIoReactivexFlowableSubscriber:(id<IoReactivexFlowableSubscriber>)s;

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

- (IoReactivexFlowable *)subscribeOnWithIoReactivexScheduler:(IoReactivexScheduler * __nonnull)scheduler;

- (IoReactivexFlowable *)subscribeOnWithIoReactivexScheduler:(IoReactivexScheduler * __nonnull)scheduler
                                                 withBoolean:(jboolean)requestOn;

- (id<OrgReactivestreamsSubscriber>)subscribeWithWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber;

- (IoReactivexFlowable *)switchIfEmptyWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)switchMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)switchMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                           withInt:(jint)bufferSize;

- (IoReactivexFlowable *)switchMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)switchMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                     withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)switchOnNextWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)switchOnNextWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                             withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)switchOnNextDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)switchOnNextDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                                       withInt:(jint)prefetch;

- (IoReactivexFlowable *)takeWithLong:(jlong)count;

- (IoReactivexFlowable *)takeWithLong:(jlong)time
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)takeWithLong:(jlong)time
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)takeLastWithInt:(jint)count;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)count
                                 withLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)count
                                 withLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)count
                                 withLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError
                                  withInt:(jint)bufferSize;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                              withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)takeLastWithLong:(jlong)time
           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                              withBoolean:(jboolean)delayError
                                  withInt:(jint)bufferSize;

- (IoReactivexFlowable *)takeUntilWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)stopPredicate;

- (IoReactivexFlowable *)takeUntilWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)takeWhileWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexSubscribersTestSubscriber *)test;

- (IoReactivexSubscribersTestSubscriber *)testWithLong:(jlong)initialRequest;

- (IoReactivexSubscribersTestSubscriber *)testWithLong:(jlong)initialRequest
                                           withBoolean:(jboolean)cancel;

- (IoReactivexFlowable *)throttleFirstWithLong:(jlong)windowDuration
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)throttleFirstWithLong:(jlong)skipDuration
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                      withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)throttleLastWithLong:(jlong)intervalDuration
               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)throttleLastWithLong:(jlong)intervalDuration
               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)throttleWithTimeoutWithLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)throttleWithTimeoutWithLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timeInterval;

- (IoReactivexFlowable *)timeIntervalWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timeIntervalWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)timeIntervalWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timeoutWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator;

- (IoReactivexFlowable *)timeoutWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
                                         withIoReactivexFlowable:(IoReactivexFlowable *)other;

- (IoReactivexFlowable *)timeoutWithLong:(jlong)timeout
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit;

- (IoReactivexFlowable *)timeoutWithLong:(jlong)timeout
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
         withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)timeoutWithLong:(jlong)timeout
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timeoutWithLong:(jlong)timeout
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
         withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexFlowable *)timeoutWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)firstTimeoutIndicator
                               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator;

- (IoReactivexFlowable *)timeoutWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)firstTimeoutIndicator
                               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)itemTimeoutIndicator
                                withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

+ (IoReactivexFlowable *)timerWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexFlowable *)timerWithLong:(jlong)delay
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timestamp;

- (IoReactivexFlowable *)timestampWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)timestampWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)timestampWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                        withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id)toWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)converter;

- (id<JavaUtilConcurrentFuture>)toFuture;

- (IoReactivexSingle *)toList;

- (IoReactivexSingle *)toListWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier;

- (IoReactivexSingle *)toListWithInt:(jint)capacityHint;

- (IoReactivexSingle *)toMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector;

- (IoReactivexSingle *)toMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector;

- (IoReactivexSingle *)toMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                            withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                              withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)mapSupplier;

- (IoReactivexSingle *)toMultimapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector;

- (IoReactivexSingle *)toMultimapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector;

- (IoReactivexSingle *)toMultimapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)mapSupplier;

- (IoReactivexSingle *)toMultimapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSelector
                                   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)mapSupplier
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)collectionFactory;

- (IoReactivexObservable *)toObservable;

- (IoReactivexSingle *)toSortedList;

- (IoReactivexSingle *)toSortedListWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

- (IoReactivexSingle *)toSortedListWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                  withInt:(jint)capacityHint;

- (IoReactivexSingle *)toSortedListWithInt:(jint)capacityHint;

+ (IoReactivexFlowable *)unsafeCreateWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)onSubscribe;

- (IoReactivexFlowable *)unsubscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexFlowable *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                              withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer;

+ (IoReactivexFlowable *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                              withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer
                                                   withBoolean:(jboolean)eager;

- (IoReactivexFlowable *)windowWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundaryIndicatorSupplier;

- (IoReactivexFlowable *)windowWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundaryIndicatorSupplier
                                                      withInt:(jint)bufferSize;

- (IoReactivexFlowable *)windowWithLong:(jlong)count;

- (IoReactivexFlowable *)windowWithLong:(jlong)count
                               withLong:(jlong)skip;

- (IoReactivexFlowable *)windowWithLong:(jlong)count
                               withLong:(jlong)skip
                                withInt:(jint)bufferSize;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
                               withLong:(jlong)timeskip
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withInt:(jint)bufferSize;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                               withLong:(jlong)count;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                               withLong:(jlong)count
                            withBoolean:(jboolean)restart;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                               withLong:(jlong)count;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                               withLong:(jlong)count
                            withBoolean:(jboolean)restart;

- (IoReactivexFlowable *)windowWithLong:(jlong)timespan
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                               withLong:(jlong)count
                            withBoolean:(jboolean)restart
                                withInt:(jint)bufferSize;

- (IoReactivexFlowable *)windowWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundaryIndicator;

- (IoReactivexFlowable *)windowWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)openingIndicator
                              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)closingIndicator;

- (IoReactivexFlowable *)windowWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)openingIndicator
                              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)closingIndicator
                                                       withInt:(jint)bufferSize;

- (IoReactivexFlowable *)windowWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)boundaryIndicator
                                                       withInt:(jint)bufferSize;

- (IoReactivexFlowable *)withLatestFromWithJavaLangIterable:(id<JavaLangIterable>)others
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

- (IoReactivexFlowable *)withLatestFromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                                    withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)combiner;

- (IoReactivexFlowable *)withLatestFromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                     withIoReactivexFunctionsFunction3:(id<IoReactivexFunctionsFunction3>)combiner;

- (IoReactivexFlowable *)withLatestFromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                     withIoReactivexFunctionsFunction4:(id<IoReactivexFunctionsFunction4>)combiner;

- (IoReactivexFlowable *)withLatestFromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                                       withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                                     withIoReactivexFunctionsFunction5:(id<IoReactivexFunctionsFunction5>)combiner;

- (IoReactivexFlowable *)withLatestFromWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)others
                                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner;

+ (IoReactivexFlowable *)zipWithJavaLangIterable:(id<JavaLangIterable>)sources
                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper
                                                withBoolean:(jboolean)delayError;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper
                                                withBoolean:(jboolean)delayError
                                                    withInt:(jint)bufferSize;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                          withIoReactivexFunctionsFunction3:(id<IoReactivexFunctionsFunction3>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                          withIoReactivexFunctionsFunction4:(id<IoReactivexFunctionsFunction4>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                          withIoReactivexFunctionsFunction5:(id<IoReactivexFunctionsFunction5>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                          withIoReactivexFunctionsFunction6:(id<IoReactivexFunctionsFunction6>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                          withIoReactivexFunctionsFunction7:(id<IoReactivexFunctionsFunction7>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source8
                          withIoReactivexFunctionsFunction8:(id<IoReactivexFunctionsFunction8>)zipper;

+ (IoReactivexFlowable *)zipWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source1
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source2
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source3
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source4
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source5
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source6
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source7
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source8
                            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source9
                          withIoReactivexFunctionsFunction9:(id<IoReactivexFunctionsFunction9>)zipper;

+ (IoReactivexFlowable *)zipArrayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                                      withBoolean:(jboolean)delayError
                                                          withInt:(jint)bufferSize
                             withOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)zipIterableWithJavaLangIterable:(id<JavaLangIterable>)sources
                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                             withBoolean:(jboolean)delayError
                                                 withInt:(jint)bufferSize;

- (IoReactivexFlowable *)zipWithWithJavaLangIterable:(id<JavaLangIterable>)other
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

- (IoReactivexFlowable *)zipWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

- (IoReactivexFlowable *)zipWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper
                                                    withBoolean:(jboolean)delayError;

- (IoReactivexFlowable *)zipWithWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
                             withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper
                                                    withBoolean:(jboolean)delayError
                                                        withInt:(jint)bufferSize;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (IoReactivexFlowable *)switchMap0WithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                            withInt:(jint)bufferSize
                                                        withBoolean:(jboolean)delayError;

@end

J2OBJC_STATIC_INIT(IoReactivexFlowable)

inline jint IoReactivexFlowable_get_BUFFER_SIZE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint IoReactivexFlowable_BUFFER_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(IoReactivexFlowable, BUFFER_SIZE, jint)

FOUNDATION_EXPORT void IoReactivexFlowable_init(IoReactivexFlowable *self);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_ambWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_ambArrayWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT jint IoReactivexFlowable_bufferSize();

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithIoReactivexFunctionsFunction_withOrgReactivestreamsPublisherArray_(id<IoReactivexFunctionsFunction> combiner, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> combiner, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithJavaLangIterable_withIoReactivexFunctionsFunction_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> combiner, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithIoReactivexFunctionsFunction_withOrgReactivestreamsPublisherArray_(id<IoReactivexFunctionsFunction> combiner, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithIoReactivexFunctionsFunction_withInt_withOrgReactivestreamsPublisherArray_(id<IoReactivexFunctionsFunction> combiner, jint bufferSize, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> combiner, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithJavaLangIterable_withIoReactivexFunctionsFunction_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestDelayErrorWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> combiner, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiFunction> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction3_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<IoReactivexFunctionsFunction3> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction4_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<IoReactivexFunctionsFunction4> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction5_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<IoReactivexFunctionsFunction5> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction6_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<IoReactivexFunctionsFunction6> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction7_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<IoReactivexFunctionsFunction7> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction8_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<OrgReactivestreamsPublisher> source8, id<IoReactivexFunctionsFunction8> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_combineLatestWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction9_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<OrgReactivestreamsPublisher> source8, id<OrgReactivestreamsPublisher> source9, id<IoReactivexFunctionsFunction9> combiner);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatArrayWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatArrayDelayErrorWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatArrayEagerWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatArrayEagerWithInt_withInt_withOrgReactivestreamsPublisherArray_(jint maxConcurrency, jint prefetch, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatDelayErrorWithOrgReactivestreamsPublisher_withInt_withBoolean_(id<OrgReactivestreamsPublisher> sources, jint prefetch, jboolean tillTheEnd);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatEagerWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatEagerWithOrgReactivestreamsPublisher_withInt_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatEagerWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_concatEagerWithJavaLangIterable_withInt_withInt_(id<JavaLangIterable> sources, jint maxConcurrency, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_createWithIoReactivexFlowableOnSubscribe_withIoReactivexBackpressureStrategy_(id<IoReactivexFlowableOnSubscribe> source, IoReactivexBackpressureStrategy *mode);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_deferWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_empty();

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_errorWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_errorWithJavaLangThrowable_(JavaLangThrowable *throwable);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromArrayWithNSObjectArray_(IOSObjectArray *items);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromFutureWithJavaUtilConcurrentFuture_withIoReactivexScheduler_(id<JavaUtilConcurrentFuture> future, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromIterableWithJavaLangIterable_(id<JavaLangIterable> source);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_fromPublisherWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_generateWithIoReactivexFunctionsConsumer_(id<IoReactivexFunctionsConsumer> generator);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_generateWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<JavaUtilConcurrentCallable> initialState, id<IoReactivexFunctionsBiConsumer> generator);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_generateWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> initialState, id<IoReactivexFunctionsBiConsumer> generator, id<IoReactivexFunctionsConsumer> disposeState);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_generateWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<JavaUtilConcurrentCallable> initialState, id<IoReactivexFunctionsBiFunction> generator);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_generateWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> initialState, id<IoReactivexFunctionsBiFunction> generator, id<IoReactivexFunctionsConsumer> disposeState);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(jlong period, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalRangeWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong start, jlong count, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_intervalRangeWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong count, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_(id item);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_(id item1, id item2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_(id item1, id item2, id item3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_(id item1, id item2, id item3, id item4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5, id item6);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5, id item6, id item7);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5, id item6, id item7, id item8);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5, id item6, id item7, id item8, id item9);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(id item1, id item2, id item3, id item4, id item5, id item6, id item7, id item8, id item9, id item10);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithJavaLangIterable_withInt_withInt_(id<JavaLangIterable> sources, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeArrayWithInt_withInt_withOrgReactivestreamsPublisherArray_(jint maxConcurrency, jint bufferSize, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithJavaLangIterable_withInt_(id<JavaLangIterable> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeArrayWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithJavaLangIterable_withInt_withInt_(id<JavaLangIterable> sources, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeArrayDelayErrorWithInt_withInt_withOrgReactivestreamsPublisherArray_(jint maxConcurrency, jint bufferSize, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithJavaLangIterable_withInt_(id<JavaLangIterable> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeArrayDelayErrorWithOrgReactivestreamsPublisherArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_mergeDelayErrorWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_never();

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_rangeWithInt_withInt_(jint start, jint count);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_rangeLongWithLong_withLong_(jlong start, jlong count);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexFlowable_sequenceEqualWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexFlowable_sequenceEqualWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiPredicate_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiPredicate> isEqual);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexFlowable_sequenceEqualWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiPredicate_withInt_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiPredicate> isEqual, jint bufferSize);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexFlowable_sequenceEqualWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_switchOnNextWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_switchOnNextWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_switchOnNextDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_switchOnNextDelayErrorWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_timerWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_timerWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_unsafeCreateWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> onSubscribe);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithJavaLangIterable_withIoReactivexFunctionsFunction_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> sources, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiFunction> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_withBoolean_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiFunction> zipper, jboolean delayError);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<IoReactivexFunctionsBiFunction> zipper, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction3_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<IoReactivexFunctionsFunction3> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction4_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<IoReactivexFunctionsFunction4> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction5_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<IoReactivexFunctionsFunction5> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction6_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<IoReactivexFunctionsFunction6> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction7_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<IoReactivexFunctionsFunction7> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction8_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<OrgReactivestreamsPublisher> source8, id<IoReactivexFunctionsFunction8> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction9_(id<OrgReactivestreamsPublisher> source1, id<OrgReactivestreamsPublisher> source2, id<OrgReactivestreamsPublisher> source3, id<OrgReactivestreamsPublisher> source4, id<OrgReactivestreamsPublisher> source5, id<OrgReactivestreamsPublisher> source6, id<OrgReactivestreamsPublisher> source7, id<OrgReactivestreamsPublisher> source8, id<OrgReactivestreamsPublisher> source9, id<IoReactivexFunctionsFunction9> zipper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipArrayWithIoReactivexFunctionsFunction_withBoolean_withInt_withOrgReactivestreamsPublisherArray_(id<IoReactivexFunctionsFunction> zipper, jboolean delayError, jint bufferSize, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexFlowable_zipIterableWithJavaLangIterable_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> zipper, jboolean delayError, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexFlowable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexFlowable")
