//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableSampleWithObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_serialVersionUID -3517602651313910099LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_serialVersionUID -3029755663834015785LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_serialVersionUID -3029755663834015785LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableSampleWithObservable

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other
                                        withBoolean:(jboolean)emitLast {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_(self, source, other, emitLast);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  IoReactivexObserversSerializedObserver *serial = create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t);
  if (emitLast_) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(serial, other_)];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(serial, other_)];
  }
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "emitLast_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexObservableSource;Z", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<*>;Z)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/ObservableSource<*>;", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver;LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver;LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast;LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSampleWithObservable = { "ObservableSampleWithObservable", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSampleWithObservable;
}

@end

void IoReactivexInternalOperatorsObservableObservableSampleWithObservable_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, jboolean emitLast) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->other_, other);
  self->emitLast_ = emitLast;
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable *new_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, jboolean emitLast) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_, source, other, emitLast)
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable *create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, jboolean emitLast) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withBoolean_, source, other, emitLast)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSampleWithObservable)

@implementation IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(other_)) get] == nil) {
      [((id<IoReactivexObservableSource>) nil_chk(sampler_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver_initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_(self)];
    }
  }
}

- (void)onNextWithId:(id)t {
  [self lazySetWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [self completeMain];
}

- (jboolean)setOtherWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)o {
  return IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(other_, o);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(other_);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(other_)) get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)complete {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [self completeOther];
}

- (void)emit {
  id value = [self getAndSetWithId:nil];
  if (value != nil) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:value];
  }
}

- (void)completeMain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)completeOther {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(sampler_);
  RELEASE_(other_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(setOtherWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(errorWithJavaLangThrowable:);
  methods[9].selector = @selector(complete);
  methods[10].selector = @selector(emit);
  methods[11].selector = @selector(completeMain);
  methods[12].selector = @selector(completeOther);
  methods[13].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "sampler_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "other_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<*>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "setOther", "error", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/ObservableSource<*>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<TT;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver = { "SampleMainObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x408, 14, 5, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssignAndConsume(&self->other_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->sampler_, other);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver)

@implementation IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver:(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver_initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_(self, parent);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *) nil_chk(parent_)) setOtherWithIoReactivexDisposablesDisposable:s];
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *) nil_chk(parent_)) run];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *) nil_chk(parent_)) complete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver;", "(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver = { "SamplerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 1, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver_initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver *self, IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver *new_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver_initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver, initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_, parent)
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver *create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver_initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver, initWithIoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SamplerObserver)

@implementation IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
  return self;
}

- (void)completeMain {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)completeOther {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)run {
  [self emit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:);
  methods[1].selector = @selector(completeMain);
  methods[2].selector = @selector(completeOther);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<*>;)V", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast = { "SampleMainNoLast", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast;
}

@end

void IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast *new_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast *create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainNoLast)

@implementation IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
  return self;
}

- (void)completeMain {
  JreAssignVolatileBoolean(&done_, true);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self emit];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)completeOther {
  JreAssignVolatileBoolean(&done_, true);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [self emit];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    do {
      jboolean d = JreLoadVolatileBoolean(&done_);
      [self emit];
      if (d) {
        [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
        return;
      }
    }
    while ([wip_ decrementAndGet] != 0);
  }
}

- (void)dealloc {
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:);
  methods[1].selector = @selector(completeMain);
  methods[2].selector = @selector(completeOther);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<*>;)V", "LIoReactivexInternalOperatorsObservableObservableSampleWithObservable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast = { "SampleMainEmitLast", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 3, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast;
}

@end

void IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast *new_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast *create_IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSampleWithObservable_SampleMainEmitLast)
