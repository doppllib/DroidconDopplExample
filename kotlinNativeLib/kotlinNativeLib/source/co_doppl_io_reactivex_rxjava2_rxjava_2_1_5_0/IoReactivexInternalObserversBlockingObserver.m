//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalObserversBlockingObserver.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalObserversBlockingObserver_get_serialVersionUID();
#define IoReactivexInternalObserversBlockingObserver_serialVersionUID -4875965440900746268LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalObserversBlockingObserver, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalObserversBlockingObserver)

id IoReactivexInternalObserversBlockingObserver_TERMINATED;

@implementation IoReactivexInternalObserversBlockingObserver

+ (id)TERMINATED {
  return IoReactivexInternalObserversBlockingObserver_TERMINATED;
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)queue {
  IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(self, queue);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, s);
}

- (void)onNextWithId:(id)t {
  [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(t)];
}

- (void)onComplete {
  [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_complete()];
}

- (void)dispose {
  if (IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self)) {
    [((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalObserversBlockingObserver_TERMINATED];
  }
}

- (jboolean)isDisposed {
  return [self get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (void)dealloc {
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilQueue:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalObserversBlockingObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "TERMINATED", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilQueue;", "(Ljava/util/Queue<Ljava/lang/Object;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", &IoReactivexInternalObserversBlockingObserver_TERMINATED, "Ljava/util/Queue<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversBlockingObserver = { "BlockingObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x11, 7, 3, -1, -1, -1, 11, -1 };
  return &_IoReactivexInternalObserversBlockingObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalObserversBlockingObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalObserversBlockingObserver_TERMINATED, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalObserversBlockingObserver)
  }
}

@end

void IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(IoReactivexInternalObserversBlockingObserver *self, id<JavaUtilQueue> queue) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->queue_, queue);
}

IoReactivexInternalObserversBlockingObserver *new_IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(id<JavaUtilQueue> queue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversBlockingObserver, initWithJavaUtilQueue_, queue)
}

IoReactivexInternalObserversBlockingObserver *create_IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(id<JavaUtilQueue> queue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversBlockingObserver, initWithJavaUtilQueue_, queue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversBlockingObserver)
