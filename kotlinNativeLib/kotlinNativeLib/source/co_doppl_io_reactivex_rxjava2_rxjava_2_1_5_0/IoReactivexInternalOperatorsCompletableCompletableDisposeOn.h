//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableDisposeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableDisposeOn

#if !defined (IoReactivexInternalOperatorsCompletableCompletableDisposeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableDisposeOn))
#define IoReactivexInternalOperatorsCompletableCompletableDisposeOn_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

@class IoReactivexScheduler;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;

@interface IoReactivexInternalOperatorsCompletableCompletableDisposeOn : IoReactivexCompletable {
 @public
  id<IoReactivexCompletableSource> source_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableDisposeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableDisposeOn *self, id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDisposeOn *new_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDisposeOn *create_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation))
#define IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation : NSObject < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexCompletableObserver> s_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexDisposablesDisposable> d_;
  volatile_jboolean disposed_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s
                              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation, s_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *self, id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *new_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *create_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDisposeOn")
