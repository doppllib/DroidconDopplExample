//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_serialVersionUID 4603919676453758899LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                   withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(self, source, other);
  return self;
}

- (id<IoReactivexMaybeSource>)source {
  return source_;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  [((id<IoReactivexMaybeSource>) nil_chk(source_)) subscribeWithIoReactivexMaybeObserver:create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(observer, other_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIoReactivexMaybeSource;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withIoReactivexSingleSource:);
  methods[1].selector = @selector(source);
  methods[2].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LIoReactivexSingleSource;", "(Lio/reactivex/MaybeSource<TT;>;Lio/reactivex/SingleSource<+TT;>;)V", "()Lio/reactivex/MaybeSource<TT;>;", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/MaybeSource<TT;>;", "Lio/reactivex/SingleSource<+TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;Lio/reactivex/internal/fuseable/HasUpstreamMaybeSource<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle = { "MaybeSwitchIfEmptySingle", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *self, id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle, initWithIoReactivexMaybeSource_withIoReactivexSingleSource_, source, other)
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle, initWithIoReactivexMaybeSource_withIoReactivexSingleSource_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle)

@implementation IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                      withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(self, actual, other);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d)) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    if ([self compareAndSetWithId:d withId:nil]) {
      [((id<IoReactivexSingleSource>) nil_chk(other_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(actual_, self)];
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexSingleSource:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexSingleSource;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/SingleSource<+TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "Lio/reactivex/SingleSource<+TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle;", "LIoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver = { "SwitchIfEmptyMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 3, 11, 12, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, other)
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver)

@implementation IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
      withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent {
  IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(self, actual, parent);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(parent_, d);
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "parent_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LJavaUtilConcurrentAtomicAtomicReference;", "(Lio/reactivex/SingleObserver<-TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver = { "OtherSingleObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 4, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *self, id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver, initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_, actual, parent)
}

IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver, initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver)
