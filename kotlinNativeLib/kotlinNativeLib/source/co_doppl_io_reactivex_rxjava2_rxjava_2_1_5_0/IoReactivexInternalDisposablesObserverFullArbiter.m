//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalDisposablesObserverFullArbiter.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation IoReactivexInternalDisposablesFullArbiterPad0

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalDisposablesFullArbiterPad0_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p1a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p2a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p3a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p4a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p5a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p6a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p7a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p8a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p9a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p10a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p11a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p12a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p13a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p14a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p15a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesFullArbiterPad0 = { "FullArbiterPad0", "io.reactivex.internal.disposables", NULL, methods, fields, 7, 0x0, 1, 15, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalDisposablesFullArbiterPad0;
}

@end

void IoReactivexInternalDisposablesFullArbiterPad0_init(IoReactivexInternalDisposablesFullArbiterPad0 *self) {
  NSObject_init(self);
}

IoReactivexInternalDisposablesFullArbiterPad0 *new_IoReactivexInternalDisposablesFullArbiterPad0_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesFullArbiterPad0, init)
}

IoReactivexInternalDisposablesFullArbiterPad0 *create_IoReactivexInternalDisposablesFullArbiterPad0_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesFullArbiterPad0, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesFullArbiterPad0)

@implementation IoReactivexInternalDisposablesFullArbiterWip

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalDisposablesFullArbiterWip_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesFullArbiterWip = { "FullArbiterWip", "io.reactivex.internal.disposables", NULL, methods, fields, 7, 0x0, 1, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalDisposablesFullArbiterWip;
}

@end

void IoReactivexInternalDisposablesFullArbiterWip_init(IoReactivexInternalDisposablesFullArbiterWip *self) {
  IoReactivexInternalDisposablesFullArbiterPad0_init(self);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalDisposablesFullArbiterWip *new_IoReactivexInternalDisposablesFullArbiterWip_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesFullArbiterWip, init)
}

IoReactivexInternalDisposablesFullArbiterWip *create_IoReactivexInternalDisposablesFullArbiterWip_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesFullArbiterWip, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesFullArbiterWip)

@implementation IoReactivexInternalDisposablesFullArbiterPad1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalDisposablesFullArbiterPad1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p1b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p2b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p3b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p4b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p5b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p6b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p7b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p8b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p9b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p10b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p11b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p12b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p13b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p14b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p15b_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesFullArbiterPad1 = { "FullArbiterPad1", "io.reactivex.internal.disposables", NULL, methods, fields, 7, 0x0, 1, 15, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalDisposablesFullArbiterPad1;
}

@end

void IoReactivexInternalDisposablesFullArbiterPad1_init(IoReactivexInternalDisposablesFullArbiterPad1 *self) {
  IoReactivexInternalDisposablesFullArbiterWip_init(self);
}

IoReactivexInternalDisposablesFullArbiterPad1 *new_IoReactivexInternalDisposablesFullArbiterPad1_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesFullArbiterPad1, init)
}

IoReactivexInternalDisposablesFullArbiterPad1 *create_IoReactivexInternalDisposablesFullArbiterPad1_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesFullArbiterPad1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesFullArbiterPad1)

@implementation IoReactivexInternalDisposablesObserverFullArbiter

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
       withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource
                                    withInt:(jint)capacity {
  IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(self, actual, resource, capacity);
  return self;
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self disposeResource];
  }
}

- (jboolean)isDisposed {
  id<IoReactivexDisposablesDisposable> d = resource_;
  return d != nil ? [d isDisposed] : JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeResource {
  id<IoReactivexDisposablesDisposable> d = resource_;
  JreStrongAssign(&resource_, nil);
  if (d != nil) {
    [d dispose];
  }
}

- (jboolean)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return false;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:JreLoadVolatileId(&self->s_) withId:IoReactivexInternalUtilNotificationLite_disposableWithIoReactivexDisposablesDisposable_(s)];
  [self drain];
  return true;
}

- (jboolean)onNextWithId:(id)value
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return false;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:s withId:IoReactivexInternalUtilNotificationLite_nextWithId_(value)];
  [self drain];
  return true;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)value
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(value);
    return;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:s withId:IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(value)];
  [self drain];
}

- (void)onCompleteWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:s withId:IoReactivexInternalUtilNotificationLite_complete()];
  [self drain];
}

- (void)drain {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  id<IoReactivexObserver> a = actual_;
  for (; ; ) {
    for (; ; ) {
      id o = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      if (o == nil) {
        break;
      }
      id v = [q poll];
      if (o == JreLoadVolatileId(&s_)) {
        if (IoReactivexInternalUtilNotificationLite_isDisposableWithId_(v)) {
          id<IoReactivexDisposablesDisposable> next = IoReactivexInternalUtilNotificationLite_getDisposableWithId_(v);
          [((id<IoReactivexDisposablesDisposable>) nil_chk(JreLoadVolatileId(&s_))) dispose];
          if (!JreLoadVolatileBoolean(&cancelled_)) {
            JreVolatileStrongAssign(&s_, next);
          }
          else {
            [((id<IoReactivexDisposablesDisposable>) nil_chk(next)) dispose];
          }
        }
        else if (IoReactivexInternalUtilNotificationLite_isErrorWithId_(v)) {
          [q clear];
          [self disposeResource];
          JavaLangThrowable *ex = IoReactivexInternalUtilNotificationLite_getErrorWithId_(v);
          if (!JreLoadVolatileBoolean(&cancelled_)) {
            JreAssignVolatileBoolean(&cancelled_, true);
            [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          }
          else {
            IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
          }
        }
        else if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(v)) {
          [q clear];
          [self disposeResource];
          if (!JreLoadVolatileBoolean(&cancelled_)) {
            JreAssignVolatileBoolean(&cancelled_, true);
            [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
          }
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(v)];
        }
      }
    }
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)__javaClone:(IoReactivexInternalDisposablesObserverFullArbiter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&s_, &original->s_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(queue_);
  JreReleaseVolatile(&s_);
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexDisposablesDisposable:withInt:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(disposeResource);
  methods[4].selector = @selector(setDisposableWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(onNextWithId:withIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:withIoReactivexDisposablesDisposable:);
  methods[7].selector = @selector(onCompleteWithIoReactivexDisposablesDisposable:);
  methods[8].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "resource_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexDisposablesDisposable;I", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/disposables/Disposable;I)V", "setDisposable", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;LIoReactivexDisposablesDisposable;", "(TT;Lio/reactivex/disposables/Disposable;)Z", "onError", "LJavaLangThrowable;LIoReactivexDisposablesDisposable;", "onComplete", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/disposables/FullArbiterPad1;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesObserverFullArbiter = { "ObserverFullArbiter", "io.reactivex.internal.disposables", ptrTable, methods, fields, 7, 0x11, 9, 5, -1, -1, -1, 12, -1 };
  return &_IoReactivexInternalDisposablesObserverFullArbiter;
}

@end

void IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(IoReactivexInternalDisposablesObserverFullArbiter *self, id<IoReactivexObserver> actual, id<IoReactivexDisposablesDisposable> resource, jint capacity) {
  IoReactivexInternalDisposablesFullArbiterPad1_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->resource_, resource);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(capacity));
  JreVolatileStrongAssign(&self->s_, JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE));
}

IoReactivexInternalDisposablesObserverFullArbiter *new_IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(id<IoReactivexObserver> actual, id<IoReactivexDisposablesDisposable> resource, jint capacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesObserverFullArbiter, initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_, actual, resource, capacity)
}

IoReactivexInternalDisposablesObserverFullArbiter *create_IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(id<IoReactivexObserver> actual, id<IoReactivexDisposablesDisposable> resource, jint capacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesObserverFullArbiter, initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_, actual, resource, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesObserverFullArbiter)
