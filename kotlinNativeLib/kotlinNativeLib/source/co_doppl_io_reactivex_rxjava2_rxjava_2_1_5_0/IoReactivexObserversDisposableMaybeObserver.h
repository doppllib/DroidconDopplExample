//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexObserversDisposableMaybeObserver")
#ifdef RESTRICT_IoReactivexObserversDisposableMaybeObserver
#define INCLUDE_ALL_IoReactivexObserversDisposableMaybeObserver 0
#else
#define INCLUDE_ALL_IoReactivexObserversDisposableMaybeObserver 1
#endif
#undef RESTRICT_IoReactivexObserversDisposableMaybeObserver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexObserversDisposableMaybeObserver_) && (INCLUDE_ALL_IoReactivexObserversDisposableMaybeObserver || defined(INCLUDE_IoReactivexObserversDisposableMaybeObserver))
#define IoReactivexObserversDisposableMaybeObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaUtilConcurrentAtomicAtomicReference;

@interface IoReactivexObserversDisposableMaybeObserver : NSObject < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *s_;
}

#pragma mark Public

- (instancetype)init;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)s;

#pragma mark Protected

- (void)onStart;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversDisposableMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexObserversDisposableMaybeObserver, s_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexObserversDisposableMaybeObserver_init(IoReactivexObserversDisposableMaybeObserver *self);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexObserversDisposableMaybeObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexObserversDisposableMaybeObserver")
