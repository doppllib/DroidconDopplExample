//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCache
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCache

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCache_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCache))
#define IoReactivexInternalOperatorsFlowableFlowableCache_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@class IoReactivexInternalOperatorsFlowableFlowableCache_CacheState;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableCache : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)capacityHint;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)t;

#pragma mark Package-Private

- (jint)cachedEventCount;

- (jboolean)hasSubscribers;

- (jboolean)isConnected;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCache)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache, state_, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache, once_, JavaUtilConcurrentAtomicAtomicBoolean *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableFlowableCache *self, IoReactivexFlowable *source, jint capacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache *new_IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache *create_IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCache)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState))
#define IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_

#define RESTRICT_IoReactivexInternalUtilLinkedArrayList 1
#define INCLUDE_IoReactivexInternalUtilLinkedArrayList 1
#include "IoReactivexInternalUtilLinkedArrayList.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IOSObjectArray;
@class IoReactivexFlowable;
@class IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableCache_CacheState : IoReactivexInternalUtilLinkedArrayList < IoReactivexFlowableSubscriber > {
 @public
  IoReactivexFlowable *source_;
  JavaUtilConcurrentAtomicAtomicReference *connection_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  volatile_jboolean isConnected_;
  jboolean sourceDone_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

- (void)addChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *)p;

- (void)connect;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)removeChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *)p;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)capacityHint;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, source_, IoReactivexFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, connection_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *self, IoReactivexFlowable *source, jint capacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *new_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *create_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription))
#define IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsFlowableFlowableCache_CacheState;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> child_;
  IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  IOSObjectArray *currentBuffer_;
  jint currentIndexInBuffer_;
  jint index_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)replay;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child
withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState:(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *)state;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, child_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, state_, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, currentBuffer_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *self, id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *new_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *create_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCache")
