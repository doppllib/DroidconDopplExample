//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalFunctionsFunctions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe.h"
#include "IoReactivexInternalSubscribersBlockingSubscriber.h"
#include "IoReactivexInternalSubscribersLambdaSubscriber.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexInternalUtilBlockingIgnoringReceiver.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"

@interface IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init(IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *self);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *new_IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *create_IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init();

@implementation IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)subscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)o
                withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_(o, subscriber);
}

+ (void)subscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)o {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_(o);
}

+ (void)subscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)o
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext
                withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                  withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(o, onNext, onError, onComplete);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 0, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsPublisher:withOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(subscribeWithOrgReactivestreamsPublisher:);
  methods[3].selector = @selector(subscribeWithOrgReactivestreamsPublisher:withIoReactivexFunctionsConsumer:withIoReactivexFunctionsConsumer:withIoReactivexFunctionsAction:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "subscribe", "LOrgReactivestreamsPublisher;LOrgReactivestreamsSubscriber;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;Lorg/reactivestreams/Subscriber<-TT;>;)V", "LOrgReactivestreamsPublisher;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;)V", "LOrgReactivestreamsPublisher;LIoReactivexFunctionsConsumer;LIoReactivexFunctionsConsumer;LIoReactivexFunctionsAction;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;Lio/reactivex/functions/Consumer<-TT;>;Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;Lio/reactivex/functions/Action;)V" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe = { "FlowableBlockingSubscribe", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init(IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *new_IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe, init)
}

IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe *create_IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe, init)
}

void IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_(id<OrgReactivestreamsPublisher> o, id<OrgReactivestreamsSubscriber> subscriber) {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_initialize();
  id<JavaUtilConcurrentBlockingQueue> queue = create_JavaUtilConcurrentLinkedBlockingQueue_init();
  IoReactivexInternalSubscribersBlockingSubscriber *bs = create_IoReactivexInternalSubscribersBlockingSubscriber_initWithJavaUtilQueue_(queue);
  [((id<OrgReactivestreamsPublisher>) nil_chk(o)) subscribeWithOrgReactivestreamsSubscriber:bs];
  @try {
    for (; ; ) {
      if ([bs isCancelled]) {
        break;
      }
      id v = [queue poll];
      if (v == nil) {
        if ([bs isCancelled]) {
          break;
        }
        IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
        v = [queue take];
      }
      if ([bs isCancelled]) {
        break;
      }
      if (o == JreLoadStatic(IoReactivexInternalSubscribersBlockingSubscriber, TERMINATED) || IoReactivexInternalUtilNotificationLite_acceptFullWithId_withOrgReactivestreamsSubscriber_(v, subscriber)) {
        break;
      }
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [bs cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber)) onErrorWithJavaLangThrowable:e];
  }
}

void IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> o) {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_initialize();
  IoReactivexInternalUtilBlockingIgnoringReceiver *callback = create_IoReactivexInternalUtilBlockingIgnoringReceiver_init();
  IoReactivexInternalSubscribersLambdaSubscriber *ls = create_IoReactivexInternalSubscribersLambdaSubscriber_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_(IoReactivexInternalFunctionsFunctions_emptyConsumer(), callback, callback, JreLoadStatic(IoReactivexInternalFunctionsFunctions, REQUEST_MAX));
  [((id<OrgReactivestreamsPublisher>) nil_chk(o)) subscribeWithOrgReactivestreamsSubscriber:ls];
  IoReactivexInternalUtilBlockingHelper_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withIoReactivexDisposablesDisposable_(callback, ls);
  JavaLangThrowable *e = callback->error_;
  if (e != nil) {
    @throw nil_chk(IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithJavaLangThrowable_(e));
  }
}

void IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<OrgReactivestreamsPublisher> o, id<IoReactivexFunctionsConsumer> onNext, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) {
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onNext, @"onNext is null");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onError, @"onError is null");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onComplete, @"onComplete is null");
  IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe_subscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_(o, create_IoReactivexInternalSubscribersLambdaSubscriber_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_(onNext, onError, onComplete, JreLoadStatic(IoReactivexInternalFunctionsFunctions, REQUEST_MAX)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBlockingSubscribe)
