//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiFunction.h"
#include "IoReactivexFunctionsPredicate.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalOperatorsParallelParallelFilterTry.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexParallelParallelFailureHandling.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static void IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber *self);

@implementation IoReactivexInternalOperatorsParallelParallelFilterTry

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                          withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate
                         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)errorHandler {
  IoReactivexInternalOperatorsParallelParallelFilterTry_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, source, predicate, errorHandler);
  return self;
}

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  if (![self validateWithOrgReactivestreamsSubscriberArray:subscribers]) {
    return;
  }
  jint n = ((IOSObjectArray *) nil_chk(subscribers))->size_;
  IOSObjectArray *parents = [IOSObjectArray arrayWithLength:n type:OrgReactivestreamsSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    id<OrgReactivestreamsSubscriber> a = IOSObjectArray_Get(subscribers, i);
    if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:a]) {
      IOSObjectArray_SetAndConsume(parents, i, new_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(a, IoReactivexInternalFuseableConditionalSubscriber_class_()), predicate_, errorHandler_));
    }
    else {
      IOSObjectArray_SetAndConsume(parents, i, new_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(a, predicate_, errorHandler_));
    }
  }
  [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriberArray:parents];
}

- (jint)parallelism {
  return [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(predicate_);
  RELEASE_(errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexParallelParallelFlowable:withIoReactivexFunctionsPredicate:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  methods[2].selector = @selector(parallelism);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexParallelParallelFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "predicate_", "LIoReactivexFunctionsPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "errorHandler_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexParallelParallelFlowable;LIoReactivexFunctionsPredicate;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/parallel/ParallelFlowable<TT;>;Lio/reactivex/functions/Predicate<-TT;>;Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;)V", "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/parallel/ParallelFlowable<TT;>;", "Lio/reactivex/functions/Predicate<-TT;>;", "Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;", "LIoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber;LIoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber;LIoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/parallel/ParallelFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFilterTry = { "ParallelFilterTry", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFilterTry;
}

@end

void IoReactivexInternalOperatorsParallelParallelFilterTry_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelFilterTry *self, IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  IoReactivexParallelParallelFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->predicate_, predicate);
  JreStrongAssign(&self->errorHandler_, errorHandler);
}

IoReactivexInternalOperatorsParallelParallelFilterTry *new_IoReactivexInternalOperatorsParallelParallelFilterTry_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry, initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, source, predicate, errorHandler)
}

IoReactivexInternalOperatorsParallelParallelFilterTry *create_IoReactivexInternalOperatorsParallelParallelFilterTry_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry, initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, source, predicate, errorHandler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFilterTry)

@implementation IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber

- (instancetype)initWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate
                   withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)errorHandler {
  IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, predicate, errorHandler);
  return self;
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
}

- (void)onNextWithId:(id)t {
  if (![self tryOnNextWithId:t] && !done_) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
  }
}

- (void)dealloc {
  RELEASE_(predicate_);
  RELEASE_(errorHandler_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFunctionsPredicate:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "predicate_", "LIoReactivexFunctionsPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "errorHandler_", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFunctionsPredicate;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/functions/Predicate<-TT;>;Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;)V", "request", "J", "onNext", "LNSObject;", "(TT;)V", "Lio/reactivex/functions/Predicate<-TT;>;", "Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;", "LIoReactivexInternalOperatorsParallelParallelFilterTry;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/internal/fuseable/ConditionalSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber = { "BaseFilterSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x408, 4, 4, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber *self, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->predicate_, predicate);
  JreStrongAssign(&self->errorHandler_, errorHandler);
}

void IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber *self) {
  [((id<OrgReactivestreamsSubscription>) nil_chk(self->s_)) cancel];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber)

@implementation IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                   withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)errorHandler {
  IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, actual, predicate, errorHandler);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (jboolean)tryOnNextWithId:(id)t {
  if (!done_) {
    jlong retries = 0LL;
    for (; ; ) {
      jboolean b;
      @try {
        b = [((id<IoReactivexFunctionsPredicate>) nil_chk(predicate_)) testWithId:t];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        IoReactivexParallelParallelFailureHandling *h;
        @try {
          h = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsBiFunction>) nil_chk(errorHandler_)) applyWithId:JavaLangLong_valueOfWithLong_(++retries) withId:ex], @"The errorHandler returned a null item");
        }
        @catch (JavaLangThrowable *exc) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, exc } count:2 type:JavaLangThrowable_class_()])];
          return false;
        }
        switch ([h ordinal]) {
          case IoReactivexParallelParallelFailureHandling_Enum_RETRY:
          continue;
          case IoReactivexParallelParallelFailureHandling_Enum_SKIP:
          return false;
          case IoReactivexParallelParallelFailureHandling_Enum_STOP:
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onComplete];
          return false;
          default:
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onErrorWithJavaLangThrowable:ex];
          return false;
        }
      }
      if (b) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
        return true;
      }
      return false;
    }
  }
  return false;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsPredicate:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsPredicate;LIoReactivexFunctionsBiFunction;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Predicate<-TT;>;Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "tryOnNext", "LNSObject;", "(TT;)Z", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsParallelParallelFilterTry;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelFilterTry$BaseFilterSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber = { "ParallelFilterSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 5, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, predicate, errorHandler);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber *new_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, actual, predicate, errorHandler)
}

IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber *create_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, actual, predicate, errorHandler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterSubscriber)

@implementation IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                       withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate
                                      withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)errorHandler {
  IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, actual, predicate, errorHandler);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (jboolean)tryOnNextWithId:(id)t {
  if (!done_) {
    jlong retries = 0LL;
    for (; ; ) {
      jboolean b;
      @try {
        b = [((id<IoReactivexFunctionsPredicate>) nil_chk(predicate_)) testWithId:t];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        IoReactivexParallelParallelFailureHandling *h;
        @try {
          h = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsBiFunction>) nil_chk(errorHandler_)) applyWithId:JavaLangLong_valueOfWithLong_(++retries) withId:ex], @"The errorHandler returned a null item");
        }
        @catch (JavaLangThrowable *exc) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, exc } count:2 type:JavaLangThrowable_class_()])];
          return false;
        }
        switch ([h ordinal]) {
          case IoReactivexParallelParallelFailureHandling_Enum_RETRY:
          continue;
          case IoReactivexParallelParallelFailureHandling_Enum_SKIP:
          return false;
          case IoReactivexParallelParallelFailureHandling_Enum_STOP:
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onComplete];
          return false;
          default:
          IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_cancel(self);
          [self onErrorWithJavaLangThrowable:ex];
          return false;
        }
      }
      return b && [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) tryOnNextWithId:t];
    }
  }
  return false;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexFunctionsPredicate:withIoReactivexFunctionsBiFunction:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexFunctionsPredicate;LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Lio/reactivex/functions/Predicate<-TT;>;Lio/reactivex/functions/BiFunction<-Ljava/lang/Long;-Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "tryOnNext", "LNSObject;", "(TT;)Z", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;", "LIoReactivexInternalOperatorsParallelParallelFilterTry;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelFilterTry$BaseFilterSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber = { "ParallelFilterConditionalSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 5, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  IoReactivexInternalOperatorsParallelParallelFilterTry_BaseFilterSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(self, predicate, errorHandler);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber *new_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, actual, predicate, errorHandler)
}

IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber *create_IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsPredicate> predicate, id<IoReactivexFunctionsBiFunction> errorHandler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsPredicate_withIoReactivexFunctionsBiFunction_, actual, predicate, errorHandler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelFilterTry_ParallelFilterConditionalSubscriber)
