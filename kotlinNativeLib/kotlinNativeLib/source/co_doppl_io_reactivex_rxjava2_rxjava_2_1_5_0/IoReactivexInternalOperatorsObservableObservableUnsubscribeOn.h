//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn

#if !defined (IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn))
#define IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableUnsubscribeOn : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *self, id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver))
#define IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexScheduler;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *self, id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask))
#define IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver;

@interface IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver:(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask *self, IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_DisposeTask)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn")
