//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindowTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindowTimed

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexObservable;
@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong timespan_;
  jlong timeskip_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jlong maxSize_;
  jint bufferSize_;
  jboolean restartTimerOnMaxSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timespan
                                           withLong:(jlong)timeskip
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                           withLong:(jlong)maxSize
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)restartTimerOnMaxSize;

- (IoReactivexObservable *)blockingFirst;

- (IoReactivexObservable *)blockingFirstWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingLast;

- (IoReactivexObservable *)blockingLastWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingSingle;

- (IoReactivexObservable *)blockingSingleWithId:(IoReactivexObservable *)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed *self, id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_initWithIoReactivexObservableSource_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(id<IoReactivexObservableSource> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_

#define RESTRICT_IoReactivexInternalObserversQueueDrainObserver 1
#define INCLUDE_IoReactivexInternalObserversQueueDrainObserver 1
#include "IoReactivexInternalObserversQueueDrainObserver.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class IoReactivexSubjectsUnicastSubject;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver : IoReactivexInternalObserversQueueDrainObserver < IoReactivexObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  jlong timespan_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint bufferSize_;
  id<IoReactivexDisposablesDisposable> s_;
  IoReactivexSubjectsUnicastSubject *window_;
  JavaUtilConcurrentAtomicAtomicReference *timer_;
  volatile_jboolean terminated_;
}

+ (id)NEXT;

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                    withInt:(jint)bufferSize;

- (void)disposeTimer;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0
withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, window_, IoReactivexSubjectsUnicastSubject *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, timer_, JavaUtilConcurrentAtomicAtomicReference *)

inline id IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_get_NEXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_NEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver, NEXT, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *self, id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactUnboundedObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_

#define RESTRICT_IoReactivexInternalObserversQueueDrainObserver 1
#define INCLUDE_IoReactivexInternalObserversQueueDrainObserver 1
#include "IoReactivexInternalObserversQueueDrainObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexScheduler;
@class IoReactivexScheduler_Worker;
@class IoReactivexSubjectsUnicastSubject;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver : IoReactivexInternalObserversQueueDrainObserver < IoReactivexDisposablesDisposable > {
 @public
  jlong timespan_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint bufferSize_;
  jboolean restartTimerOnMaxSize_;
  jlong maxSize_;
  IoReactivexScheduler_Worker *worker_;
  jlong count_;
  jlong producerIndex_;
  id<IoReactivexDisposablesDisposable> s_;
  IoReactivexSubjectsUnicastSubject *window_;
  volatile_jboolean terminated_;
  JavaUtilConcurrentAtomicAtomicReference *timer_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                    withInt:(jint)bufferSize
                                   withLong:(jlong)maxSize
                                withBoolean:(jboolean)restartTimerOnMaxSize;

- (void)disposeTimer;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0
withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, window_, IoReactivexSubjectsUnicastSubject *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver, timer_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *self, id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<IoReactivexObserver> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder : NSObject < JavaLangRunnable > {
 @public
  jlong index_;
  IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithLong:(jlong)index
withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver:(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder, parent_, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *self, jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_(jlong index, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowExactBoundedObserver_ConsumerIndexHolder)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_

#define RESTRICT_IoReactivexInternalObserversQueueDrainObserver 1
#define INCLUDE_IoReactivexInternalObserversQueueDrainObserver 1
#include "IoReactivexInternalObserversQueueDrainObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler_Worker;
@class IoReactivexSubjectsUnicastSubject;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol IoReactivexObserver;
@protocol JavaUtilList;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver : IoReactivexInternalObserversQueueDrainObserver < IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  jlong timespan_;
  jlong timeskip_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  jint bufferSize_;
  id<JavaUtilList> windows_;
  id<IoReactivexDisposablesDisposable> s_;
  volatile_jboolean terminated_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timespan
                                   withLong:(jlong)timeskip
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                    withInt:(jint)bufferSize;

- (void)completeWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w;

- (void)disposeWorker;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0
withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, windows_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *self, id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<IoReactivexObserver> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_

@class IoReactivexSubjectsUnicastSubject;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork : NSObject {
 @public
  IoReactivexSubjectsUnicastSubject *w_;
  jboolean open_;
}

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w
                                              withBoolean:(jboolean)open;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork, w_, IoReactivexSubjectsUnicastSubject *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *self, IoReactivexSubjectsUnicastSubject *w, jboolean open);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexSubjectsUnicastSubject *w, jboolean open) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork_initWithIoReactivexSubjectsUnicastSubject_withBoolean_(IoReactivexSubjectsUnicastSubject *w, jboolean open);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_SubjectWork)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask))
#define IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver;
@class IoReactivexSubjectsUnicastSubject;

@interface IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver:(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *)outer$
                                                                 withIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *self, IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *new_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask *create_IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask_initWithIoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver *outer$, IoReactivexSubjectsUnicastSubject *w);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowTimed_WindowSkipObserver_CompletionTask)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowTimed")
