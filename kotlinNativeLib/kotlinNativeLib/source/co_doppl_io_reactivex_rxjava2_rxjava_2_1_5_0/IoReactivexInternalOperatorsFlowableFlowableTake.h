//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTake
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTake

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTake_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTake))
#define IoReactivexInternalOperatorsFlowableFlowableTake_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTake : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jlong limit_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)limit;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTake)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexInternalOperatorsFlowableFlowableTake *self, IoReactivexFlowable *source, jlong limit);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTake *new_IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexFlowable *source, jlong limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTake *create_IoReactivexInternalOperatorsFlowableFlowableTake_initWithIoReactivexFlowable_withLong_(IoReactivexFlowable *source, jlong limit);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTake)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  jboolean done_;
  id<OrgReactivestreamsSubscription> subscription_;
  id<OrgReactivestreamsSubscriber> actual_;
  jlong limit_;
  jlong remaining_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)limit;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber, subscription_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber, actual_, id<OrgReactivestreamsSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong limit);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong limit);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTake_TakeSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTake")
