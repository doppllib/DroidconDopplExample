//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFromPublisher.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableFromPublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)publisher {
  IoReactivexInternalOperatorsFlowableFlowableFromPublisher_initWithOrgReactivestreamsPublisher_(self, publisher);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(publisher_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)dealloc {
  RELEASE_(publisher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publisher_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Publisher<+TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lorg/reactivestreams/Publisher<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFromPublisher = { "FlowableFromPublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFromPublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFromPublisher_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableFromPublisher *self, id<OrgReactivestreamsPublisher> publisher) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->publisher_, publisher);
}

IoReactivexInternalOperatorsFlowableFlowableFromPublisher *new_IoReactivexInternalOperatorsFlowableFlowableFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromPublisher, initWithOrgReactivestreamsPublisher_, publisher)
}

IoReactivexInternalOperatorsFlowableFlowableFromPublisher *create_IoReactivexInternalOperatorsFlowableFlowableFromPublisher_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> publisher) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFromPublisher, initWithOrgReactivestreamsPublisher_, publisher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFromPublisher)
