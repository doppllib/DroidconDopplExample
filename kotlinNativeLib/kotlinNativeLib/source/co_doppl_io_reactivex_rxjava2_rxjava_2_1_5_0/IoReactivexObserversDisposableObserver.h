//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexObserversDisposableObserver")
#ifdef RESTRICT_IoReactivexObserversDisposableObserver
#define INCLUDE_ALL_IoReactivexObserversDisposableObserver 0
#else
#define INCLUDE_ALL_IoReactivexObserversDisposableObserver 1
#endif
#undef RESTRICT_IoReactivexObserversDisposableObserver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexObserversDisposableObserver_) && (INCLUDE_ALL_IoReactivexObserversDisposableObserver || defined(INCLUDE_IoReactivexObserversDisposableObserver))
#define IoReactivexObserversDisposableObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaUtilConcurrentAtomicAtomicReference;

@interface IoReactivexObserversDisposableObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *s_;
}

#pragma mark Public

- (instancetype)init;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)s;

#pragma mark Protected

- (void)onStart;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexObserversDisposableObserver)

J2OBJC_FIELD_SETTER(IoReactivexObserversDisposableObserver, s_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexObserversDisposableObserver_init(IoReactivexObserversDisposableObserver *self);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexObserversDisposableObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexObserversDisposableObserver")
