//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableDisposeOn.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableDisposeOn

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(s, scheduler_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;LIoReactivexScheduler;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableDisposeOn = { "CompletableDisposeOn", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableDisposeOn;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableDisposeOn *self, id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsCompletableCompletableDisposeOn *new_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableDisposeOn, initWithIoReactivexCompletableSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsCompletableCompletableDisposeOn *create_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_initWithIoReactivexCompletableSource_withIoReactivexScheduler_(id<IoReactivexCompletableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableDisposeOn, initWithIoReactivexCompletableSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableDisposeOn)

@implementation IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s
                              withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(self, s, scheduler);
  return self;
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return;
  }
  [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onComplete];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (JreLoadVolatileBoolean(&disposed_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
    return;
  }
  [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:e];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
  [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:self];
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)run {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(scheduler_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexScheduler:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexScheduler;", "onError", "LJavaLangThrowable;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "LIoReactivexInternalOperatorsCompletableCompletableDisposeOn;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation = { "CompletableObserverImplementation", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 7, 4, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *self, id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler) {
  NSObject_init(self);
  JreStrongAssign(&self->s_, s);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *new_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation, initWithIoReactivexCompletableObserver_withIoReactivexScheduler_, s, scheduler)
}

IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation *create_IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation_initWithIoReactivexCompletableObserver_withIoReactivexScheduler_(id<IoReactivexCompletableObserver> s, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation, initWithIoReactivexCompletableObserver_withIoReactivexScheduler_, s, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableDisposeOn_CompletableObserverImplementation)
