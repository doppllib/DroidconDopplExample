//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableWindowTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableWindowTimed

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jlong timespan_;
  jlong timeskip_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jlong maxSize_;
  jint bufferSize_;
  jboolean restartTimerOnMaxSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)timespan
                                   withLong:(jlong)timeskip
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                   withLong:(jlong)maxSize
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)restartTimerOnMaxSize;

- (IoReactivexFlowable *)blockingFirst;

- (IoReactivexFlowable *)blockingFirstWithId:(IoReactivexFlowable *)arg0;

- (IoReactivexFlowable *)blockingLast;

- (IoReactivexFlowable *)blockingLastWithId:(IoReactivexFlowable *)arg0;

- (IoReactivexFlowable *)blockingSingle;

- (IoReactivexFlowable *)blockingSingleWithId:(IoReactivexFlowable *)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed *self, IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class IoReactivexProcessorsUnicastProcessor;
@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  jlong timespan_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint bufferSize_;
  id<OrgReactivestreamsSubscription> s_;
  IoReactivexProcessorsUnicastProcessor *window_;
  IoReactivexInternalDisposablesSequentialDisposable *timer_;
  volatile_jboolean terminated_;
}

+ (id)NEXT;

#pragma mark Public

- (void)cancel;

- (void)dispose;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                             withInt:(jint)bufferSize;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0
     withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, window_, IoReactivexProcessorsUnicastProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, timer_, IoReactivexInternalDisposablesSequentialDisposable *)

inline id IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_get_NEXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, NEXT, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class IoReactivexProcessorsUnicastProcessor;
@class IoReactivexScheduler;
@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < OrgReactivestreamsSubscription > {
 @public
  jlong timespan_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint bufferSize_;
  jboolean restartTimerOnMaxSize_;
  jlong maxSize_;
  IoReactivexScheduler_Worker *worker_;
  jlong count_;
  jlong producerIndex_;
  id<OrgReactivestreamsSubscription> s_;
  IoReactivexProcessorsUnicastProcessor *window_;
  volatile_jboolean terminated_;
  IoReactivexInternalDisposablesSequentialDisposable *timer_;
}

#pragma mark Public

- (void)cancel;

- (void)dispose;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                             withInt:(jint)bufferSize
                                            withLong:(jlong)maxSize
                                         withBoolean:(jboolean)restartTimerOnMaxSize;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0
     withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, window_, IoReactivexProcessorsUnicastProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, timer_, IoReactivexInternalDisposablesSequentialDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder : NSObject < JavaLangRunnable > {
 @public
  jlong index_;
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithLong:(jlong)index
withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder, parent_, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *self, jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexProcessorsUnicastProcessor;
@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol JavaUtilList;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  jlong timespan_;
  jlong timeskip_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  jint bufferSize_;
  id<JavaUtilList> windows_;
  id<OrgReactivestreamsSubscription> s_;
  volatile_jboolean terminated_;
}

#pragma mark Public

- (void)cancel;

- (void)dispose;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                                            withLong:(jlong)timeskip
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                             withInt:(jint)bufferSize;

- (void)completeWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w;

- (void)drainLoop;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0
     withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, windows_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_

@class IoReactivexProcessorsUnicastProcessor;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork : NSObject {
 @public
  IoReactivexProcessorsUnicastProcessor *w_;
  jboolean open_;
}

#pragma mark Package-Private

- (instancetype)initWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w
                                                  withBoolean:(jboolean)open;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork, w_, IoReactivexProcessorsUnicastProcessor *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *self, IoReactivexProcessorsUnicastProcessor *w, jboolean open);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexProcessorsUnicastProcessor *w, jboolean open) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexProcessorsUnicastProcessor *w, jboolean open);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion))
#define IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;
@class IoReactivexProcessorsUnicastProcessor;

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *)outer$
                                                           withIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)processor;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *self, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableWindowTimed")
