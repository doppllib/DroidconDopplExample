//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableRepeat
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableRepeat

#if !defined (IoReactivexInternalOperatorsObservableObservableRepeat_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRepeat))
#define IoReactivexInternalOperatorsObservableObservableRepeat_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexObservable;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRepeat : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong count_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservable:(IoReactivexObservable *)source
                                     withLong:(jlong)count;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRepeat)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRepeat_initWithIoReactivexObservable_withLong_(IoReactivexInternalOperatorsObservableObservableRepeat *self, IoReactivexObservable *source, jlong count);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRepeat *new_IoReactivexInternalOperatorsObservableObservableRepeat_initWithIoReactivexObservable_withLong_(IoReactivexObservable *source, jlong count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRepeat *create_IoReactivexInternalOperatorsObservableObservableRepeat_initWithIoReactivexObservable_withLong_(IoReactivexObservable *source, jlong count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRepeat)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver))
#define IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObservableSource;

@interface IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexObserver > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexInternalDisposablesSequentialDisposable *sd_;
  id<IoReactivexObservableSource> source_;
  jlong remaining_;
}

#pragma mark Public

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
withIoReactivexInternalDisposablesSequentialDisposable:(IoReactivexInternalDisposablesSequentialDisposable *)sd
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)source;

- (void)subscribeNext;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver, sd_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver, source_, id<IoReactivexObservableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver_initWithIoReactivexObserver_withLong_withIoReactivexInternalDisposablesSequentialDisposable_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver *self, id<IoReactivexObserver> actual, jlong count, IoReactivexInternalDisposablesSequentialDisposable *sd, id<IoReactivexObservableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver *new_IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver_initWithIoReactivexObserver_withLong_withIoReactivexInternalDisposablesSequentialDisposable_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong count, IoReactivexInternalDisposablesSequentialDisposable *sd, id<IoReactivexObservableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver *create_IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver_initWithIoReactivexObserver_withLong_withIoReactivexInternalDisposablesSequentialDisposable_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong count, IoReactivexInternalDisposablesSequentialDisposable *sd, id<IoReactivexObservableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRepeat_RepeatObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRepeat")
