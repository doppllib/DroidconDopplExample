//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexProcessorsReplayProcessor")
#ifdef RESTRICT_IoReactivexProcessorsReplayProcessor
#define INCLUDE_ALL_IoReactivexProcessorsReplayProcessor 0
#else
#define INCLUDE_ALL_IoReactivexProcessorsReplayProcessor 1
#endif
#undef RESTRICT_IoReactivexProcessorsReplayProcessor
#ifdef INCLUDE_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer
#define INCLUDE_IoReactivexProcessorsReplayProcessor_ReplayBuffer 1
#endif
#ifdef INCLUDE_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer
#define INCLUDE_IoReactivexProcessorsReplayProcessor_ReplayBuffer 1
#endif
#ifdef INCLUDE_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer
#define INCLUDE_IoReactivexProcessorsReplayProcessor_ReplayBuffer 1
#endif

#if !defined (IoReactivexProcessorsReplayProcessor_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor))
#define IoReactivexProcessorsReplayProcessor_

#define RESTRICT_IoReactivexProcessorsFlowableProcessor 1
#define INCLUDE_IoReactivexProcessorsFlowableProcessor 1
#include "IoReactivexProcessorsFlowableProcessor.h"

@class IOSObjectArray;
@class IoReactivexProcessorsReplayProcessor_ReplaySubscription;
@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexProcessorsReplayProcessor_ReplayBuffer;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexProcessorsReplayProcessor : IoReactivexProcessorsFlowableProcessor {
 @public
  id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer_;
  jboolean done_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexProcessorsReplayProcessor *)create;

+ (IoReactivexProcessorsReplayProcessor *)createWithInt:(jint)capacityHint;

+ (IoReactivexProcessorsReplayProcessor *)createWithSizeWithInt:(jint)maxSize;

+ (IoReactivexProcessorsReplayProcessor *)createWithTimeWithLong:(jlong)maxAge
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                        withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexProcessorsReplayProcessor *)createWithTimeAndSizeWithLong:(jlong)maxAge
                                         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                               withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                                withInt:(jint)maxSize;

- (JavaLangThrowable *)getThrowable;

- (id)getValue;

- (IOSObjectArray *)getValues;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)hasComplete;

- (jboolean)hasSubscribers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer:(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>)buffer;

- (jboolean)addWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

+ (IoReactivexProcessorsReplayProcessor *)createUnbounded;

- (void)removeWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

- (jint)size;

- (jint)subscriberCount;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexProcessorsReplayProcessor)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor, buffer_, id<IoReactivexProcessorsReplayProcessor_ReplayBuffer>)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)

inline IOSObjectArray *IoReactivexProcessorsReplayProcessor_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsReplayProcessor_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsReplayProcessor, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexProcessorsReplayProcessor_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsReplayProcessor_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsReplayProcessor, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_create();

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithInt_(jint capacityHint);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithSizeWithInt_(jint maxSize);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createUnbounded();

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *IoReactivexProcessorsReplayProcessor_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint maxSize);

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(IoReactivexProcessorsReplayProcessor *self, id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *new_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor *create_IoReactivexProcessorsReplayProcessor_initWithIoReactivexProcessorsReplayProcessor_ReplayBuffer_(id<IoReactivexProcessorsReplayProcessor_ReplayBuffer> buffer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_ReplayBuffer_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_ReplayBuffer))
#define IoReactivexProcessorsReplayProcessor_ReplayBuffer_

@class IOSObjectArray;
@class IoReactivexProcessorsReplayProcessor_ReplaySubscription;
@class JavaLangThrowable;

@protocol IoReactivexProcessorsReplayProcessor_ReplayBuffer < JavaObject >

- (void)nextWithId:(id)value;

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)complete;

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

- (jint)size;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)isDone;

- (JavaLangThrowable *)getError;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_ReplayBuffer)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_ReplayBuffer)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_ReplaySubscription_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_ReplaySubscription))
#define IoReactivexProcessorsReplayProcessor_ReplaySubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexProcessorsReplayProcessor;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexProcessorsReplayProcessor_ReplaySubscription : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexProcessorsReplayProcessor *state_;
  id index_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jboolean cancelled_;
  jlong emitted_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
            withIoReactivexProcessorsReplayProcessor:(IoReactivexProcessorsReplayProcessor *)state;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_ReplaySubscription)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_ReplaySubscription, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_ReplaySubscription, state_, IoReactivexProcessorsReplayProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_ReplaySubscription, index_, id)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_ReplaySubscription, requested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(IoReactivexProcessorsReplayProcessor_ReplaySubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_ReplaySubscription *new_IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_ReplaySubscription *create_IoReactivexProcessorsReplayProcessor_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsReplayProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsReplayProcessor *state);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_ReplaySubscription)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer))
#define IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_

@class IOSObjectArray;
@class IoReactivexProcessorsReplayProcessor_ReplaySubscription;
@class JavaLangThrowable;
@protocol JavaUtilList;

@interface IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer : NSObject < IoReactivexProcessorsReplayProcessor_ReplayBuffer > {
 @public
  id<JavaUtilList> buffer_;
  JavaLangThrowable *error_;
  volatile_jboolean done_;
  volatile_jint size_;
}

#pragma mark Public

- (void)complete;

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (JavaLangThrowable *)getError;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)isDone;

- (void)nextWithId:(id)value;

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)capacityHint;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer, buffer_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *self, jint capacityHint);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *new_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer *create_IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer_initWithInt_(jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_UnboundedReplayBuffer)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_Node_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_Node))
#define IoReactivexProcessorsReplayProcessor_Node_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexProcessorsReplayProcessor_Node : JavaUtilConcurrentAtomicAtomicReference {
 @public
  id value_Node_;
}

#pragma mark Public

- (IoReactivexProcessorsReplayProcessor_Node *)accumulateAndGetWithId:(IoReactivexProcessorsReplayProcessor_Node *)arg0
                                   withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexProcessorsReplayProcessor_Node *)get;

- (IoReactivexProcessorsReplayProcessor_Node *)getAndAccumulateWithId:(IoReactivexProcessorsReplayProcessor_Node *)arg0
                                   withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexProcessorsReplayProcessor_Node *)getAndSetWithId:(IoReactivexProcessorsReplayProcessor_Node *)arg0;

- (IoReactivexProcessorsReplayProcessor_Node *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (IoReactivexProcessorsReplayProcessor_Node *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_Node)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_Node, value_Node_, id)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_Node_initWithId_(IoReactivexProcessorsReplayProcessor_Node *self, id value);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_Node *new_IoReactivexProcessorsReplayProcessor_Node_initWithId_(id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_Node *create_IoReactivexProcessorsReplayProcessor_Node_initWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_Node)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_TimedNode_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_TimedNode))
#define IoReactivexProcessorsReplayProcessor_TimedNode_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexProcessorsReplayProcessor_TimedNode : JavaUtilConcurrentAtomicAtomicReference {
 @public
  id value_TimedNode_;
  jlong time_;
}

#pragma mark Public

- (IoReactivexProcessorsReplayProcessor_TimedNode *)accumulateAndGetWithId:(IoReactivexProcessorsReplayProcessor_TimedNode *)arg0
                                        withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)get;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)getAndAccumulateWithId:(IoReactivexProcessorsReplayProcessor_TimedNode *)arg0
                                        withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)getAndSetWithId:(IoReactivexProcessorsReplayProcessor_TimedNode *)arg0;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value
                  withLong:(jlong)time;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_TimedNode)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_TimedNode, value_TimedNode_, id)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(IoReactivexProcessorsReplayProcessor_TimedNode *self, id value, jlong time);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_TimedNode *new_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(id value, jlong time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_TimedNode *create_IoReactivexProcessorsReplayProcessor_TimedNode_initWithId_withLong_(id value, jlong time);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_TimedNode)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer))
#define IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_

@class IOSObjectArray;
@class IoReactivexProcessorsReplayProcessor_Node;
@class IoReactivexProcessorsReplayProcessor_ReplaySubscription;
@class JavaLangThrowable;

@interface IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer : NSObject < IoReactivexProcessorsReplayProcessor_ReplayBuffer > {
 @public
  jint maxSize_;
  jint size_;
  volatile_id head_;
  IoReactivexProcessorsReplayProcessor_Node *tail_;
  JavaLangThrowable *error_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)complete;

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (JavaLangThrowable *)getError;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)isDone;

- (void)nextWithId:(id)value;

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)maxSize;

- (void)trim;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer)

J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer, head_, IoReactivexProcessorsReplayProcessor_Node *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer, tail_, IoReactivexProcessorsReplayProcessor_Node *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *self, jint maxSize);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *new_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer *create_IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer_initWithInt_(jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_SizeBoundReplayBuffer)

#endif

#if !defined (IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_) && (INCLUDE_ALL_IoReactivexProcessorsReplayProcessor || defined(INCLUDE_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer))
#define IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_

@class IOSObjectArray;
@class IoReactivexProcessorsReplayProcessor_ReplaySubscription;
@class IoReactivexProcessorsReplayProcessor_TimedNode;
@class IoReactivexScheduler;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer : NSObject < IoReactivexProcessorsReplayProcessor_ReplayBuffer > {
 @public
  jint maxSize_;
  jlong maxAge_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jint size_;
  volatile_id head_;
  IoReactivexProcessorsReplayProcessor_TimedNode *tail_;
  JavaLangThrowable *error_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)complete;

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (JavaLangThrowable *)getError;

- (id)getValue;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)isDone;

- (void)nextWithId:(id)value;

- (void)replayWithIoReactivexProcessorsReplayProcessor_ReplaySubscription:(IoReactivexProcessorsReplayProcessor_ReplaySubscription *)rs;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxAge
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexProcessorsReplayProcessor_TimedNode *)getHead;

- (jint)sizeWithIoReactivexProcessorsReplayProcessor_TimedNode:(IoReactivexProcessorsReplayProcessor_TimedNode *)h;

- (void)trim;

- (void)trimFinal;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, scheduler_, IoReactivexScheduler *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, head_, IoReactivexProcessorsReplayProcessor_TimedNode *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, tail_, IoReactivexProcessorsReplayProcessor_TimedNode *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *self, jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *new_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer *create_IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jint maxSize, jlong maxAge, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsReplayProcessor_SizeAndTimeBoundReplayBuffer)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexProcessorsReplayProcessor")
