//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableSkipLast.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"

inline jlong IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_serialVersionUID -3807491841935125653LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableSkipLast

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)skip {
  IoReactivexInternalOperatorsObservableObservableSkipLast_initWithIoReactivexObservableSource_withInt_(self, source, skip);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_initWithIoReactivexObserver_withInt_(s, skip_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;I", "(Lio/reactivex/ObservableSource<TT;>;I)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSkipLast = { "ObservableSkipLast", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSkipLast;
}

@end

void IoReactivexInternalOperatorsObservableObservableSkipLast_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableObservableSkipLast *self, id<IoReactivexObservableSource> source, jint skip) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->skip_ = skip;
}

IoReactivexInternalOperatorsObservableObservableSkipLast *new_IoReactivexInternalOperatorsObservableObservableSkipLast_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint skip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSkipLast, initWithIoReactivexObservableSource_withInt_, source, skip)
}

IoReactivexInternalOperatorsObservableObservableSkipLast *create_IoReactivexInternalOperatorsObservableObservableSkipLast_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint skip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSkipLast, initWithIoReactivexObservableSource_withInt_, source, skip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSkipLast)

@implementation IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                    withInt:(jint)skip {
  IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_initWithIoReactivexObserver_withInt_(self, actual, skip);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  if (skip_ == [self size]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:[self poll]];
  }
  [self offerWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;I", "(Lio/reactivex/Observer<-TT;>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableSkipLast;", "<T:Ljava/lang/Object;>Ljava/util/ArrayDeque<TT;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver = { "SkipLastObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 4, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_initWithIoReactivexObserver_withInt_(IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver *self, id<IoReactivexObserver> actual, jint skip) {
  JavaUtilArrayDeque_initWithInt_(self, skip);
  JreStrongAssign(&self->actual_, actual);
  self->skip_ = skip;
}

IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver *new_IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint skip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver, initWithIoReactivexObserver_withInt_, actual, skip)
}

IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver *create_IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver_initWithIoReactivexObserver_withInt_(id<IoReactivexObserver> actual, jint skip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver, initWithIoReactivexObserver_withInt_, actual, skip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSkipLast_SkipLastObserver)
