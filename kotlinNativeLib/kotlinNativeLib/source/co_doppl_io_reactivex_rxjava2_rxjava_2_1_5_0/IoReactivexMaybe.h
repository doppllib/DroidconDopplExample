//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexMaybe")
#ifdef RESTRICT_IoReactivexMaybe
#define INCLUDE_ALL_IoReactivexMaybe 0
#else
#define INCLUDE_ALL_IoReactivexMaybe 1
#endif
#undef RESTRICT_IoReactivexMaybe

#if !defined (IoReactivexMaybe_) && (INCLUDE_ALL_IoReactivexMaybe || defined(INCLUDE_IoReactivexMaybe))
#define IoReactivexMaybe_

#define RESTRICT_IoReactivexMaybeSource 1
#define INCLUDE_IoReactivexMaybeSource 1
#include "IoReactivexMaybeSource.h"

@class IOSClass;
@class IOSObjectArray;
@class IoReactivexCompletable;
@class IoReactivexFlowable;
@class IoReactivexObservable;
@class IoReactivexObserversTestObserver;
@class IoReactivexScheduler;
@class IoReactivexSingle;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableSource;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsBiPredicate;
@protocol IoReactivexFunctionsBooleanSupplier;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsFunction3;
@protocol IoReactivexFunctionsFunction4;
@protocol IoReactivexFunctionsFunction5;
@protocol IoReactivexFunctionsFunction6;
@protocol IoReactivexFunctionsFunction7;
@protocol IoReactivexFunctionsFunction8;
@protocol IoReactivexFunctionsFunction9;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexFunctionsPredicate;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeOnSubscribe;
@protocol IoReactivexMaybeOperator;
@protocol IoReactivexMaybeTransformer;
@protocol IoReactivexSingleSource;
@protocol JavaLangIterable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexMaybe : NSObject < IoReactivexMaybeSource >

#pragma mark Public

- (instancetype)init;

+ (IoReactivexMaybe *)ambWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexMaybe *)ambArrayWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

- (IoReactivexMaybe *)ambWithWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

- (id)blockingGet;

- (id)blockingGetWithId:(id)defaultValue;

- (IoReactivexMaybe *)cache;

- (IoReactivexMaybe *)castWithIOSClass:(IOSClass *)clazz;

- (IoReactivexMaybe *)composeWithIoReactivexMaybeTransformer:(id<IoReactivexMaybeTransformer>)transformer;

+ (IoReactivexFlowable *)concatWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2;

+ (IoReactivexFlowable *)concatWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3;

+ (IoReactivexFlowable *)concatWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                               withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                       withInt:(jint)prefetch;

+ (IoReactivexFlowable *)concatArrayWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatArrayDelayErrorWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatArrayEagerWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)concatDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)concatEagerWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)concatEagerWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

- (IoReactivexMaybe *)concatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)concatWithWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

- (IoReactivexSingle *)containsWithId:(id)item;

- (IoReactivexSingle *)count;

+ (IoReactivexMaybe *)createWithIoReactivexMaybeOnSubscribe:(id<IoReactivexMaybeOnSubscribe>)onSubscribe;

- (IoReactivexMaybe *)defaultIfEmptyWithId:(id)defaultItem;

+ (IoReactivexMaybe *)deferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)maybeSupplier;

- (IoReactivexMaybe *)delayWithLong:(jlong)delay
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexMaybe *)delayWithLong:(jlong)delay
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexMaybe *)delayWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)delayIndicator;

- (IoReactivexMaybe *)delaySubscriptionWithLong:(jlong)delay
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexMaybe *)delaySubscriptionWithLong:(jlong)delay
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexMaybe *)delaySubscriptionWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)subscriptionIndicator;

- (IoReactivexMaybe *)doAfterSuccessWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterSuccess;

- (IoReactivexMaybe *)doAfterTerminateWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onAfterTerminate;

- (IoReactivexMaybe *)doFinallyWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onFinally;

- (IoReactivexMaybe *)doOnCompleteWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (IoReactivexMaybe *)doOnDisposeWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onDispose;

- (IoReactivexMaybe *)doOnErrorWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (IoReactivexMaybe *)doOnEventWithIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)onEvent;

- (IoReactivexMaybe *)doOnSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe;

- (IoReactivexMaybe *)doOnSuccessWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess;

+ (IoReactivexMaybe *)empty;

+ (IoReactivexMaybe *)errorWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)supplier;

+ (IoReactivexMaybe *)errorWithJavaLangThrowable:(JavaLangThrowable *)exception;

- (IoReactivexMaybe *)filterWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexMaybe *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexMaybe *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                           withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

- (IoReactivexMaybe *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onSuccessMapper
                             withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onErrorMapper
                               withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)onCompleteSupplier;

- (IoReactivexCompletable *)flatMapCompletableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexObservable *)flatMapObservableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flatMapPublisherWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexSingle *)flatMapSingleWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexMaybe *)flatMapSingleElementWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexFlowable *)flattenAsFlowableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

- (IoReactivexObservable *)flattenAsObservableWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

+ (IoReactivexMaybe *)fromActionWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)run;

+ (IoReactivexMaybe *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

+ (IoReactivexMaybe *)fromCompletableWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)completableSource;

+ (IoReactivexMaybe *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (IoReactivexMaybe *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                    withLong:(jlong)timeout
                              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexMaybe *)fromRunnableWithJavaLangRunnable:(id<JavaLangRunnable>)run;

+ (IoReactivexMaybe *)fromSingleWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)singleSource;

- (IoReactivexMaybe *)hide;

- (IoReactivexCompletable *)ignoreElement;

- (IoReactivexSingle *)isEmpty;

+ (IoReactivexMaybe *)justWithId:(id)item;

- (IoReactivexMaybe *)liftWithIoReactivexMaybeOperator:(id<IoReactivexMaybeOperator>)lift;

- (IoReactivexMaybe *)mapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

+ (IoReactivexFlowable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexMaybe *)mergeWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

+ (IoReactivexFlowable *)mergeWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2;

+ (IoReactivexFlowable *)mergeWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3;

+ (IoReactivexFlowable *)mergeWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                              withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

+ (IoReactivexFlowable *)mergeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources
                                                      withInt:(jint)maxConcurrency;

+ (IoReactivexFlowable *)mergeArrayWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeArrayDelayErrorWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

+ (IoReactivexFlowable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

+ (IoReactivexFlowable *)mergeDelayErrorWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2;

+ (IoReactivexFlowable *)mergeDelayErrorWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3;

+ (IoReactivexFlowable *)mergeDelayErrorWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                                        withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4;

+ (IoReactivexFlowable *)mergeDelayErrorWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)sources;

- (IoReactivexFlowable *)mergeWithWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

+ (IoReactivexMaybe *)never;

- (IoReactivexMaybe *)observeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexMaybe *)ofTypeWithIOSClass:(IOSClass *)clazz;

- (IoReactivexMaybe *)onErrorComplete;

- (IoReactivexMaybe *)onErrorCompleteWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexMaybe *)onErrorResumeNextWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)resumeFunction;

- (IoReactivexMaybe *)onErrorResumeNextWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)next;

- (IoReactivexMaybe *)onErrorReturnWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)valueSupplier;

- (IoReactivexMaybe *)onErrorReturnItemWithId:(id)item;

- (IoReactivexMaybe *)onExceptionResumeNextWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)next;

- (IoReactivexMaybe *)onTerminateDetach;

- (IoReactivexFlowable *)repeat;

- (IoReactivexFlowable *)repeatWithLong:(jlong)times;

- (IoReactivexFlowable *)repeatUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexFlowable *)repeatWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (IoReactivexMaybe *)retry;

- (IoReactivexMaybe *)retryWithIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)predicate;

- (IoReactivexMaybe *)retryWithLong:(jlong)count;

- (IoReactivexMaybe *)retryWithLong:(jlong)times
  withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexMaybe *)retryWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (IoReactivexMaybe *)retryUntilWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)stop;

- (IoReactivexMaybe *)retryWhenWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

+ (IoReactivexSingle *)sequenceEqualWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                                    withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2;

+ (IoReactivexSingle *)sequenceEqualWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                                    withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                           withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)isEqual;

- (id<IoReactivexDisposablesDisposable>)subscribe;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError;

- (id<IoReactivexDisposablesDisposable>)subscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSuccess
                                                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                                                   withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (void)subscribeWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

- (IoReactivexMaybe *)subscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id<IoReactivexMaybeObserver>)subscribeWithWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

- (IoReactivexMaybe *)switchIfEmptyWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

- (IoReactivexSingle *)switchIfEmptyWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (IoReactivexMaybe *)takeUntilWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

- (IoReactivexMaybe *)takeUntilWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

- (IoReactivexObserversTestObserver *)test;

- (IoReactivexObserversTestObserver *)testWithBoolean:(jboolean)cancelled;

- (IoReactivexMaybe *)timeoutWithLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit;

- (IoReactivexMaybe *)timeoutWithLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
           withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)fallback;

- (IoReactivexMaybe *)timeoutWithLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
             withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexMaybe *)timeoutWithLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
             withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
           withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)fallback;

- (IoReactivexMaybe *)timeoutWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)timeoutIndicator;

- (IoReactivexMaybe *)timeoutWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)timeoutIndicator
                             withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)fallback;

- (IoReactivexMaybe *)timeoutWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)timeoutIndicator;

- (IoReactivexMaybe *)timeoutWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)timeoutIndicator
                                  withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)fallback;

+ (IoReactivexMaybe *)timerWithLong:(jlong)delay
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (IoReactivexMaybe *)timerWithLong:(jlong)delay
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (id)toWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)convert;

- (IoReactivexFlowable *)toFlowable;

- (IoReactivexObservable *)toObservable;

- (IoReactivexSingle *)toSingle;

- (IoReactivexSingle *)toSingleWithId:(id)defaultValue;

+ (IoReactivexMaybe *)unsafeCreateWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)onSubscribe;

- (IoReactivexMaybe *)unsubscribeOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

+ (IoReactivexMaybe *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer;

+ (IoReactivexMaybe *)using__WithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)sourceSupplier
                           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)resourceDisposer
                                                withBoolean:(jboolean)eager;

+ (IoReactivexMaybe *)wrapWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

+ (IoReactivexMaybe *)zipWithJavaLangIterable:(id<JavaLangIterable>)sources
             withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                  withIoReactivexFunctionsFunction3:(id<IoReactivexFunctionsFunction3>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                  withIoReactivexFunctionsFunction4:(id<IoReactivexFunctionsFunction4>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source5
                  withIoReactivexFunctionsFunction5:(id<IoReactivexFunctionsFunction5>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source5
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source6
                  withIoReactivexFunctionsFunction6:(id<IoReactivexFunctionsFunction6>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source5
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source6
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source7
                  withIoReactivexFunctionsFunction7:(id<IoReactivexFunctionsFunction7>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source5
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source6
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source7
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source8
                  withIoReactivexFunctionsFunction8:(id<IoReactivexFunctionsFunction8>)zipper;

+ (IoReactivexMaybe *)zipWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source3
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source4
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source5
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source6
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source7
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source8
                         withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source9
                  withIoReactivexFunctionsFunction9:(id<IoReactivexFunctionsFunction9>)zipper;

+ (IoReactivexMaybe *)zipArrayWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                               withIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

- (IoReactivexMaybe *)zipWithWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other
                     withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)zipper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexMaybe)

FOUNDATION_EXPORT void IoReactivexMaybe_init(IoReactivexMaybe *self);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_ambWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_ambArrayWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint prefetch);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatArrayWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatArrayDelayErrorWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatArrayEagerWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatEagerWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_concatEagerWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_createWithIoReactivexMaybeOnSubscribe_(id<IoReactivexMaybeOnSubscribe> onSubscribe);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_deferWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> maybeSupplier);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_empty();

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_errorWithJavaLangThrowable_(JavaLangThrowable *exception);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_errorWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromActionWithIoReactivexFunctionsAction_(id<IoReactivexFunctionsAction> run);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromCompletableWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> completableSource);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromSingleWithIoReactivexSingleSource_(id<IoReactivexSingleSource> singleSource);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_fromRunnableWithJavaLangRunnable_(id<JavaLangRunnable> run);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_justWithId_(id item);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> sources, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_mergeWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeArrayWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeArrayDelayErrorWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeDelayErrorWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> sources);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeDelayErrorWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeDelayErrorWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexMaybe_mergeDelayErrorWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_never();

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexMaybe_sequenceEqualWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2);

FOUNDATION_EXPORT IoReactivexSingle *IoReactivexMaybe_sequenceEqualWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexFunctionsBiPredicate> isEqual);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_timerWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_timerWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_unsafeCreateWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> onSubscribe);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_using__WithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> sourceSupplier, id<IoReactivexFunctionsConsumer> resourceDisposer, jboolean eager);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_wrapWithIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithJavaLangIterable_withIoReactivexFunctionsFunction_(id<JavaLangIterable> sources, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiFunction_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexFunctionsBiFunction> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction3_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexFunctionsFunction3> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction4_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexFunctionsFunction4> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction5_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexMaybeSource> source5, id<IoReactivexFunctionsFunction5> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction6_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexMaybeSource> source5, id<IoReactivexMaybeSource> source6, id<IoReactivexFunctionsFunction6> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction7_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexMaybeSource> source5, id<IoReactivexMaybeSource> source6, id<IoReactivexMaybeSource> source7, id<IoReactivexFunctionsFunction7> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction8_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexMaybeSource> source5, id<IoReactivexMaybeSource> source6, id<IoReactivexMaybeSource> source7, id<IoReactivexMaybeSource> source8, id<IoReactivexFunctionsFunction8> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsFunction9_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexMaybeSource> source3, id<IoReactivexMaybeSource> source4, id<IoReactivexMaybeSource> source5, id<IoReactivexMaybeSource> source6, id<IoReactivexMaybeSource> source7, id<IoReactivexMaybeSource> source8, id<IoReactivexMaybeSource> source9, id<IoReactivexFunctionsFunction9> zipper);

FOUNDATION_EXPORT IoReactivexMaybe *IoReactivexMaybe_zipArrayWithIoReactivexFunctionsFunction_withIoReactivexMaybeSourceArray_(id<IoReactivexFunctionsFunction> zipper, IOSObjectArray *sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexMaybe)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexMaybe")
