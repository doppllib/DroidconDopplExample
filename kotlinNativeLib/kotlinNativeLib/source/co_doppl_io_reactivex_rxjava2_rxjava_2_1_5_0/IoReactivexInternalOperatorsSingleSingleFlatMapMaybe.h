//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe

#if !defined (IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe))
#define IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleFlatMapMaybe : IoReactivexMaybe {
 @public
  id<IoReactivexSingleSource> source_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe *self, id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe *new_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe *create_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver))
#define IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexSingleObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver *new_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver *create_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver_initWithIoReactivexMaybeObserver_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeObserver> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapSingleObserver)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver))
#define IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver : NSObject < IoReactivexMaybeObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *parent_;
  id<IoReactivexMaybeObserver> actual_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent
                                   withIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver, parent_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver, actual_, id<IoReactivexMaybeObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver *self, JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver *new_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver *create_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleFlatMapMaybe_FlatMapMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleFlatMapMaybe")
