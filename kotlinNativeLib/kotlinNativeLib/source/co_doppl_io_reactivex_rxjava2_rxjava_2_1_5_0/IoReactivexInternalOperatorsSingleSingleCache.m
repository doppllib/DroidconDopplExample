//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsSingleSingleCache.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_serialVersionUID 7514387411091976596LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsSingleSingleCache)

IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_TERMINATED;

@implementation IoReactivexInternalOperatorsSingleSingleCache

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsSingleSingleCache_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsSingleSingleCache_TERMINATED;
}

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source {
  IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *d = create_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(s, self);
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if ([self addWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:d]) {
    if ([d isDisposed]) {
      [self removeWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:d];
    }
  }
  else {
    JavaLangThrowable *ex = error_;
    if (ex != nil) {
      [s onErrorWithJavaLangThrowable:ex];
    }
    else {
      [s onSuccessWithId:value_];
    }
    return;
  }
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:self];
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *)observer {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    if (a == IoReactivexInternalOperatorsSingleSingleCache_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, observer);
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *)observer {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == observer) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsSingleSingleCache_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([observers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
}

- (void)onSuccessWithId:(id)value {
  JreStrongAssign(&self->value_, value);
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsSingleSingleCache_TERMINATED];
    IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *d = *b__++;
      if (![((IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *) nil_chk(d)) isDisposed]) {
        [((id<IoReactivexSingleObserver>) nil_chk(d->actual_)) onSuccessWithId:value];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&self->error_, e);
  {
    IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observers_)) getAndSetWithId:IoReactivexInternalOperatorsSingleSingleCache_TERMINATED];
    IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *d = *b__++;
      if (![((IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *) nil_chk(d)) isDisposed]) {
        [((id<IoReactivexSingleObserver>) nil_chk(d->actual_)) onErrorWithJavaLangThrowable:e];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(wip_);
  RELEASE_(observers_);
  RELEASE_(value_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 6, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  methods[2].selector = @selector(addWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:);
  methods[3].selector = @selector(removeWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:);
  methods[4].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(onSuccessWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "[LIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "observers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "add", "LIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable;", "(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", &IoReactivexInternalOperatorsSingleSingleCache_EMPTY, &IoReactivexInternalOperatorsSingleSingleCache_TERMINATED, "Lio/reactivex/SingleSource<+TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable<TT;>;>;", "TT;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleCache = { "SingleCache", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 7, 7, -1, 6, -1, 22, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleCache;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsSingleSingleCache class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsSingleSingleCache_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsSingleSingleCache_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsSingleSingleCache)
  }
}

@end

void IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleCache *self, id<IoReactivexSingleSource> source) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsSingleSingleCache_EMPTY));
}

IoReactivexInternalOperatorsSingleSingleCache *new_IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleCache, initWithIoReactivexSingleSource_, source)
}

IoReactivexInternalOperatorsSingleSingleCache *create_IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleCache, initWithIoReactivexSingleSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleCache)

@implementation IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
withIoReactivexInternalOperatorsSingleSingleCache:(IoReactivexInternalOperatorsSingleSingleCache *)parent {
  IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(self, actual, parent);
  return self;
}

- (jboolean)isDisposed {
  return [self get];
}

- (void)dispose {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexInternalOperatorsSingleSingleCache *) nil_chk(parent_)) removeWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:self];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexInternalOperatorsSingleSingleCache:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "parent_", "LIoReactivexInternalOperatorsSingleSingleCache;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexInternalOperatorsSingleSingleCache;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/internal/operators/single/SingleCache<TT;>;)V", "Lio/reactivex/SingleObserver<-TT;>;", "Lio/reactivex/internal/operators/single/SingleCache<TT;>;", "LIoReactivexInternalOperatorsSingleSingleCache;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable = { "CacheDisposable", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 3, 3, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable;
}

@end

void IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *self, id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *new_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable, initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_, actual, parent)
}

IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *create_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable, initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable)
