//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindow
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindow

#if !defined (IoReactivexInternalOperatorsObservableObservableWindow_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindow))
#define IoReactivexInternalOperatorsObservableObservableWindow_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexObservable;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableWindow : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong count_;
  jlong skip_;
  jint capacityHint_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)count
                                           withLong:(jlong)skip
                                            withInt:(jint)capacityHint;

- (IoReactivexObservable *)blockingFirst;

- (IoReactivexObservable *)blockingFirstWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingLast;

- (IoReactivexObservable *)blockingLastWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingSingle;

- (IoReactivexObservable *)blockingSingleWithId:(IoReactivexObservable *)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindow)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow *self, id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow *new_IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow *create_IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindow)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver))
#define IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexSubjectsUnicastSubject;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong count_;
  jint capacityHint_;
  jlong size_;
  id<IoReactivexDisposablesDisposable> s_;
  IoReactivexSubjectsUnicastSubject *window_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
                                    withInt:(jint)capacityHint;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, window_, IoReactivexSubjectsUnicastSubject *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *self, id<IoReactivexObserver> actual, jlong count, jint capacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *new_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *create_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver))
#define IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaLangThrowable;
@class JavaUtilArrayDeque;
@class JavaUtilConcurrentAtomicAtomicInteger;

@interface IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong count_;
  jlong skip_;
  jint capacityHint_;
  JavaUtilArrayDeque *windows_;
  jlong index_;
  volatile_jboolean cancelled_;
  jlong firstEmission_;
  id<IoReactivexDisposablesDisposable> s_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
                                   withLong:(jlong)skip
                                    withInt:(jint)capacityHint;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, windows_, JavaUtilArrayDeque *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *self, id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *new_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *create_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindow")
