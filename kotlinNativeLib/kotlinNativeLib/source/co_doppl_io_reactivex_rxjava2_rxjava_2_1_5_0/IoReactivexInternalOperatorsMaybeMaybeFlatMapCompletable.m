//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable.h"
#include "IoReactivexMaybeSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_serialVersionUID -2177128922851101253LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(self, source, mapper);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *parent = create_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(s, mapper_);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [((id<IoReactivexMaybeSource>) nil_chk(source_)) subscribeWithIoReactivexMaybeObserver:parent];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/MaybeSource<TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Lio/reactivex/MaybeSource<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Completable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable = { "MaybeFlatMapCompletable", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable, initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_, source, mapper)
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable, initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_, source, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable)

@implementation IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(self, actual, mapper);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  id<IoReactivexCompletableSource> cs;
  @try {
    cs = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The mapper returned a null CompletableSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [self onErrorWithJavaLangThrowable:ex];
    return;
  }
  if (![self isDisposed]) {
    [((id<IoReactivexCompletableSource>) nil_chk(cs)) subscribeWithIoReactivexCompletableObserver:self];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexFunctionsFunction;", "(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/CompletableSource;>;", "LIoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver = { "FlatMapCompletableObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *self, id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver)
