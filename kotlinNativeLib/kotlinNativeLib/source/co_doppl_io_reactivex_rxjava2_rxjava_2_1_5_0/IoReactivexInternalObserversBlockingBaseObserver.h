//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalObserversBlockingBaseObserver")
#ifdef RESTRICT_IoReactivexInternalObserversBlockingBaseObserver
#define INCLUDE_ALL_IoReactivexInternalObserversBlockingBaseObserver 0
#else
#define INCLUDE_ALL_IoReactivexInternalObserversBlockingBaseObserver 1
#endif
#undef RESTRICT_IoReactivexInternalObserversBlockingBaseObserver

#if !defined (IoReactivexInternalObserversBlockingBaseObserver_) && (INCLUDE_ALL_IoReactivexInternalObserversBlockingBaseObserver || defined(INCLUDE_IoReactivexInternalObserversBlockingBaseObserver))
#define IoReactivexInternalObserversBlockingBaseObserver_

#define RESTRICT_JavaUtilConcurrentCountDownLatch 1
#define INCLUDE_JavaUtilConcurrentCountDownLatch 1
#include "java/util/concurrent/CountDownLatch.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;

@interface IoReactivexInternalObserversBlockingBaseObserver : JavaUtilConcurrentCountDownLatch < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id value_;
  JavaLangThrowable *error_;
  id<IoReactivexDisposablesDisposable> d_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (instancetype)init;

- (id)blockingGet;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalObserversBlockingBaseObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalObserversBlockingBaseObserver, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalObserversBlockingBaseObserver, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalObserversBlockingBaseObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalObserversBlockingBaseObserver_init(IoReactivexInternalObserversBlockingBaseObserver *self);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalObserversBlockingBaseObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalObserversBlockingBaseObserver")
