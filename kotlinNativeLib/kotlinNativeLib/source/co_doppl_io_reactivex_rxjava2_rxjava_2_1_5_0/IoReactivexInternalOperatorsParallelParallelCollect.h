//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelCollect
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelCollect

#if !defined (IoReactivexInternalOperatorsParallelParallelCollect_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelCollect))
#define IoReactivexInternalOperatorsParallelParallelCollect_

#define RESTRICT_IoReactivexParallelParallelFlowable 1
#define INCLUDE_IoReactivexParallelParallelFlowable 1
#include "IoReactivexParallelParallelFlowable.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@protocol IoReactivexFunctionsBiConsumer;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsParallelParallelCollect : IoReactivexParallelParallelFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  id<JavaUtilConcurrentCallable> initialCollection_;
  id<IoReactivexFunctionsBiConsumer> collector_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialCollection
                         withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

- (jint)parallelism;

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers;

#pragma mark Package-Private

- (void)reportErrorWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers
                                   withJavaLangThrowable:(JavaLangThrowable *)ex;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelCollect)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelCollect, source_, IoReactivexParallelParallelFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelCollect, initialCollection_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelCollect, collector_, id<IoReactivexFunctionsBiConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelCollect_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsParallelParallelCollect *self, IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialCollection, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelCollect *new_IoReactivexInternalOperatorsParallelParallelCollect_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialCollection, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelCollect *create_IoReactivexInternalOperatorsParallelParallelCollect_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialCollection, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelCollect)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber))
#define IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersDeferredScalarSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersDeferredScalarSubscriber 1
#include "IoReactivexInternalSubscribersDeferredScalarSubscriber.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsBiConsumer;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber : IoReactivexInternalSubscribersDeferredScalarSubscriber {
 @public
  id<IoReactivexFunctionsBiConsumer> collector_;
  id collection_;
  jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                              withId:(id)initialValue
                  withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber, collector_, id<IoReactivexFunctionsBiConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber, collection_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber *self, id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber *new_IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber *create_IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelCollect_ParallelCollectSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelCollect")
