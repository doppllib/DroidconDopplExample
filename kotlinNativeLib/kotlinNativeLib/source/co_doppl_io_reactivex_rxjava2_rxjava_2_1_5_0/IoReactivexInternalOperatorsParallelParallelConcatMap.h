//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelConcatMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelConcatMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelConcatMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelConcatMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelConcatMap

#if !defined (IoReactivexInternalOperatorsParallelParallelConcatMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelConcatMap || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelConcatMap))
#define IoReactivexInternalOperatorsParallelParallelConcatMap_

#define RESTRICT_IoReactivexParallelParallelFlowable 1
#define INCLUDE_IoReactivexParallelParallelFlowable 1
#include "IoReactivexParallelParallelFlowable.h"

@class IOSObjectArray;
@class IoReactivexInternalUtilErrorMode;
@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsParallelParallelConcatMap : IoReactivexParallelParallelFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  id<IoReactivexFunctionsFunction> mapper_;
  jint prefetch_;
  IoReactivexInternalUtilErrorMode *errorMode_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                    withInt:(jint)prefetch
                       withIoReactivexInternalUtilErrorMode:(IoReactivexInternalUtilErrorMode *)errorMode;

- (jint)parallelism;

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelConcatMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelConcatMap, source_, IoReactivexParallelParallelFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelConcatMap, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelConcatMap, errorMode_, IoReactivexInternalUtilErrorMode *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexInternalOperatorsParallelParallelConcatMap *self, IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelConcatMap *new_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelConcatMap *create_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jint prefetch, IoReactivexInternalUtilErrorMode *errorMode);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelConcatMap)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelConcatMap")
