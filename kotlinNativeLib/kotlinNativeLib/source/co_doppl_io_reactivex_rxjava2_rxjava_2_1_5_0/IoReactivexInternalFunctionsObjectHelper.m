//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"

@interface IoReactivexInternalFunctionsObjectHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalFunctionsObjectHelper_init(IoReactivexInternalFunctionsObjectHelper *self);

__attribute__((unused)) static IoReactivexInternalFunctionsObjectHelper *new_IoReactivexInternalFunctionsObjectHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalFunctionsObjectHelper *create_IoReactivexInternalFunctionsObjectHelper_init();

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalFunctionsObjectHelper)

id<IoReactivexFunctionsBiPredicate> IoReactivexInternalFunctionsObjectHelper_EQUALS;

@implementation IoReactivexInternalFunctionsObjectHelper

+ (id<IoReactivexFunctionsBiPredicate>)EQUALS {
  return IoReactivexInternalFunctionsObjectHelper_EQUALS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalFunctionsObjectHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)requireNonNullWithId:(id)object
              withNSString:(NSString *)message {
  return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(object, message);
}

+ (jboolean)equalsWithId:(id)o1
                  withId:(id)o2 {
  return IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(o1, o2);
}

+ (jint)hashCodeWithId:(id)o {
  return IoReactivexInternalFunctionsObjectHelper_hashCodeWithId_(o);
}

+ (jint)compareWithInt:(jint)v1
               withInt:(jint)v2 {
  return IoReactivexInternalFunctionsObjectHelper_compareWithInt_withInt_(v1, v2);
}

+ (jint)compareWithLong:(jlong)v1
               withLong:(jlong)v2 {
  return IoReactivexInternalFunctionsObjectHelper_compareWithLong_withLong_(v1, v2);
}

+ (id<IoReactivexFunctionsBiPredicate>)equalsPredicate {
  return IoReactivexInternalFunctionsObjectHelper_equalsPredicate();
}

+ (jint)verifyPositiveWithInt:(jint)value
                 withNSString:(NSString *)paramName {
  return IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(value, paramName);
}

+ (jlong)verifyPositiveWithLong:(jlong)value
                   withNSString:(NSString *)paramName {
  return IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithLong_withNSString_(value, paramName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 9, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiPredicate;", 0x9, -1, -1, -1, 10, -1, -1 },
    { NULL, "I", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 11, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(requireNonNullWithId:withNSString:);
  methods[2].selector = @selector(equalsWithId:withId:);
  methods[3].selector = @selector(hashCodeWithId:);
  methods[4].selector = @selector(compareWithInt:withInt:);
  methods[5].selector = @selector(compareWithLong:withLong:);
  methods[6].selector = @selector(equalsPredicate);
  methods[7].selector = @selector(verifyPositiveWithInt:withNSString:);
  methods[8].selector = @selector(verifyPositiveWithLong:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EQUALS", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x18, -1, 14, 15, -1 },
  };
  static const void *ptrTable[] = { "requireNonNull", "LNSObject;LNSString;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)TT;", "equals", "LNSObject;LNSObject;", "hashCode", "LNSObject;", "compare", "II", "JJ", "<T:Ljava/lang/Object;>()Lio/reactivex/functions/BiPredicate<TT;TT;>;", "verifyPositive", "ILNSString;", "JLNSString;", &IoReactivexInternalFunctionsObjectHelper_EQUALS, "Lio/reactivex/functions/BiPredicate<Ljava/lang/Object;Ljava/lang/Object;>;", "LIoReactivexInternalFunctionsObjectHelper_BiObjectPredicate;" };
  static const J2ObjcClassInfo _IoReactivexInternalFunctionsObjectHelper = { "ObjectHelper", "io.reactivex.internal.functions", ptrTable, methods, fields, 7, 0x11, 9, 1, -1, 16, -1, -1, -1 };
  return &_IoReactivexInternalFunctionsObjectHelper;
}

+ (void)initialize {
  if (self == [IoReactivexInternalFunctionsObjectHelper class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalFunctionsObjectHelper_EQUALS, new_IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalFunctionsObjectHelper)
  }
}

@end

void IoReactivexInternalFunctionsObjectHelper_init(IoReactivexInternalFunctionsObjectHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalFunctionsObjectHelper *new_IoReactivexInternalFunctionsObjectHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalFunctionsObjectHelper, init)
}

IoReactivexInternalFunctionsObjectHelper *create_IoReactivexInternalFunctionsObjectHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalFunctionsObjectHelper, init)
}

id IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(id object, NSString *message) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  if (object == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(message);
  }
  return object;
}

jboolean IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(id o1, id o2) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  return o1 == o2 || (o1 != nil && [o1 isEqual:o2]);
}

jint IoReactivexInternalFunctionsObjectHelper_hashCodeWithId_(id o) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  return o != nil ? ((jint) [o hash]) : 0;
}

jint IoReactivexInternalFunctionsObjectHelper_compareWithInt_withInt_(jint v1, jint v2) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  return v1 < v2 ? -1 : (v1 > v2 ? 1 : 0);
}

jint IoReactivexInternalFunctionsObjectHelper_compareWithLong_withLong_(jlong v1, jlong v2) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  return v1 < v2 ? -1 : (v1 > v2 ? 1 : 0);
}

id<IoReactivexFunctionsBiPredicate> IoReactivexInternalFunctionsObjectHelper_equalsPredicate() {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  return IoReactivexInternalFunctionsObjectHelper_EQUALS;
}

jint IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(jint value, NSString *paramName) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  if (value <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$I", paramName, @" > 0 required but it was ", value));
  }
  return value;
}

jlong IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithLong_withNSString_(jlong value, NSString *paramName) {
  IoReactivexInternalFunctionsObjectHelper_initialize();
  if (value <= 0LL) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$J", paramName, @" > 0 required but it was ", value));
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalFunctionsObjectHelper)

@implementation IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)testWithId:(id)o1
                withId:(id)o2 {
  return IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(o1, o2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "test", "LNSObject;LNSObject;", "LIoReactivexInternalFunctionsObjectHelper;", "Ljava/lang/Object;Lio/reactivex/functions/BiPredicate<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate = { "BiObjectPredicate", "io.reactivex.internal.functions", ptrTable, methods, NULL, 7, 0x18, 2, 0, 2, -1, -1, 3, -1 };
  return &_IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate;
}

@end

void IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate_init(IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate *self) {
  NSObject_init(self);
}

IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate *new_IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate, init)
}

IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate *create_IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalFunctionsObjectHelper_BiObjectPredicate)
