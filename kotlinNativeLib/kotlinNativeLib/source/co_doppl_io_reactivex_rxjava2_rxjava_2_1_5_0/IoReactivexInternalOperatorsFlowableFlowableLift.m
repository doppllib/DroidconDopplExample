//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFlowableOperator.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableLift.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableLift

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withIoReactivexFlowableOperator:(id<IoReactivexFlowableOperator>)operator_ {
  IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(self, source, operator_);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  @try {
    id<OrgReactivestreamsSubscriber> st = [((id<IoReactivexFlowableOperator>) nil_chk(operator__)) applyWithOrgReactivestreamsSubscriber:s];
    if (st == nil) {
      @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$@$", @"Operator ", operator__, @" returned a null Subscriber"));
    }
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:st];
  }
  @catch (JavaLangNullPointerException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
    JavaLangNullPointerException *npe = create_JavaLangNullPointerException_initWithNSString_(@"Actually not, but can't throw other exceptions due to RS");
    [npe initCauseWithJavaLangThrowable:e];
    @throw npe;
  }
}

- (void)dealloc {
  RELEASE_(operator__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFlowableOperator:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "operator__", "LIoReactivexFlowableOperator;", .constantValue.asLong = 0, 0x10, 5, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFlowableOperator;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/FlowableOperator<+TR;-TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "operator", "Lio/reactivex/FlowableOperator<+TR;-TT;>;", "<R:Ljava/lang/Object;T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableLift = { "FlowableLift", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableLift;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexInternalOperatorsFlowableFlowableLift *self, IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->operator__, operator_);
}

IoReactivexInternalOperatorsFlowableFlowableLift *new_IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableLift, initWithIoReactivexFlowable_withIoReactivexFlowableOperator_, source, operator_)
}

IoReactivexInternalOperatorsFlowableFlowableLift *create_IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableLift, initWithIoReactivexFlowable_withIoReactivexFlowableOperator_, source, operator_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableLift)
