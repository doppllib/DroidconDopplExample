//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleToObservable
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleToObservable

#if !defined (IoReactivexInternalOperatorsSingleSingleToObservable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleToObservable))
#define IoReactivexInternalOperatorsSingleSingleToObservable_

#define RESTRICT_IoReactivexObservable 1
#define INCLUDE_IoReactivexObservable 1
#include "IoReactivexObservable.h"

@protocol IoReactivexObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleToObservable : IoReactivexObservable {
 @public
  id<IoReactivexSingleSource> source_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleToObservable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleToObservable, source_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleToObservable_initWithIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleToObservable *self, id<IoReactivexSingleSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleToObservable *new_IoReactivexInternalOperatorsSingleSingleToObservable_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleToObservable *create_IoReactivexInternalOperatorsSingleSingleToObservable_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleToObservable)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver))
#define IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver_

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver : NSObject < IoReactivexSingleObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexDisposablesDisposable> d_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver *self, id<IoReactivexObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver *new_IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver *create_IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleToObservable_SingleToObservableObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleToObservable")
