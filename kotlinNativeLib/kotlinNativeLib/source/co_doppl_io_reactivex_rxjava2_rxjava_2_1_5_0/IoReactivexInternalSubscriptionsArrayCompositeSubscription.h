//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSubscriptionsArrayCompositeSubscription")
#ifdef RESTRICT_IoReactivexInternalSubscriptionsArrayCompositeSubscription
#define INCLUDE_ALL_IoReactivexInternalSubscriptionsArrayCompositeSubscription 0
#else
#define INCLUDE_ALL_IoReactivexInternalSubscriptionsArrayCompositeSubscription 1
#endif
#undef RESTRICT_IoReactivexInternalSubscriptionsArrayCompositeSubscription

#if !defined (IoReactivexInternalSubscriptionsArrayCompositeSubscription_) && (INCLUDE_ALL_IoReactivexInternalSubscriptionsArrayCompositeSubscription || defined(INCLUDE_IoReactivexInternalSubscriptionsArrayCompositeSubscription))
#define IoReactivexInternalSubscriptionsArrayCompositeSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReferenceArray 1
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IOSObjectArray;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalSubscriptionsArrayCompositeSubscription : JavaUtilConcurrentAtomicAtomicReferenceArray < IoReactivexDisposablesDisposable >

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithInt:(jint)arg0
                                                       withId:(id<OrgReactivestreamsSubscription>)arg1
                           withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg2;

- (void)dispose;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithInt:(jint)arg0
                                                       withId:(id<OrgReactivestreamsSubscription>)arg1
                           withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg2;

- (id<OrgReactivestreamsSubscription>)getAndSetWithInt:(jint)arg0
                                                withId:(id<OrgReactivestreamsSubscription>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithInt:(jint)arg0
                        withJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getWithInt:(jint)arg0;

- (jboolean)isDisposed;

- (id<OrgReactivestreamsSubscription>)replaceResourceWithInt:(jint)index
                          withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)resource;

- (jboolean)setResourceWithInt:(jint)index
withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)resource;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithInt:(jint)arg0
                        withJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg1;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSubscriptionsArrayCompositeSubscription)

FOUNDATION_EXPORT void IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(IoReactivexInternalSubscriptionsArrayCompositeSubscription *self, jint capacity);

FOUNDATION_EXPORT IoReactivexInternalSubscriptionsArrayCompositeSubscription *new_IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSubscriptionsArrayCompositeSubscription *create_IoReactivexInternalSubscriptionsArrayCompositeSubscription_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSubscriptionsArrayCompositeSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSubscriptionsArrayCompositeSubscription")
