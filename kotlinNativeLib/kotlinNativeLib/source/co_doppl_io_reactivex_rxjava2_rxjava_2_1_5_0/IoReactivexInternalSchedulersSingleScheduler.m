//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalSchedulersInstantPeriodicTask.h"
#include "IoReactivexInternalSchedulersRxThreadFactory.h"
#include "IoReactivexInternalSchedulersScheduledDirectPeriodicTask.h"
#include "IoReactivexInternalSchedulersScheduledDirectTask.h"
#include "IoReactivexInternalSchedulersScheduledRunnable.h"
#include "IoReactivexInternalSchedulersSchedulerPoolFactory.h"
#include "IoReactivexInternalSchedulersSingleScheduler.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline NSString *IoReactivexInternalSchedulersSingleScheduler_get_KEY_SINGLE_PRIORITY();
static NSString *IoReactivexInternalSchedulersSingleScheduler_KEY_SINGLE_PRIORITY = @"rx2.single-priority";
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersSingleScheduler, KEY_SINGLE_PRIORITY, NSString *)

inline NSString *IoReactivexInternalSchedulersSingleScheduler_get_THREAD_NAME_PREFIX();
static NSString *IoReactivexInternalSchedulersSingleScheduler_THREAD_NAME_PREFIX = @"RxSingleScheduler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersSingleScheduler, THREAD_NAME_PREFIX, NSString *)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalSchedulersSingleScheduler)

IoReactivexInternalSchedulersRxThreadFactory *IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY;
id<JavaUtilConcurrentScheduledExecutorService> IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN;

@implementation IoReactivexInternalSchedulersSingleScheduler

+ (IoReactivexInternalSchedulersRxThreadFactory *)SINGLE_THREAD_FACTORY {
  return IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY;
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)SHUTDOWN {
  return IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSchedulersSingleScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)createExecutorWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return IoReactivexInternalSchedulersSingleScheduler_createExecutorWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

- (void)start {
  id<JavaUtilConcurrentScheduledExecutorService> next = nil;
  for (; ; ) {
    id<JavaUtilConcurrentScheduledExecutorService> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get];
    if (current != IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN) {
      if (next != nil) {
        [next shutdown];
      }
      return;
    }
    if (next == nil) {
      next = IoReactivexInternalSchedulersSingleScheduler_createExecutorWithJavaUtilConcurrentThreadFactory_(threadFactory_);
    }
    if ([executor_ compareAndSetWithId:current withId:next]) {
      return;
    }
  }
}

- (void)shutdown {
  id<JavaUtilConcurrentScheduledExecutorService> current = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get];
  if (current != IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN) {
    current = [executor_ getAndSetWithId:IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN];
    if (current != IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN) {
      [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(current)) shutdownNow];
    }
  }
}

- (IoReactivexScheduler_Worker * __nonnull)createWorker {
  return create_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get]);
}

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                            withLong:(jlong)delay
                                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  IoReactivexInternalSchedulersScheduledDirectTask *task = create_IoReactivexInternalSchedulersScheduledDirectTask_initWithJavaLangRunnable_(IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run));
  @try {
    id<JavaUtilConcurrentFuture> f;
    if (delay <= 0LL) {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get])) submitWithJavaUtilConcurrentCallable:task];
    }
    else {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get])) scheduleWithJavaUtilConcurrentCallable:task withLong:delay withJavaUtilConcurrentTimeUnit:unit];
    }
    [task setFutureWithJavaUtilConcurrentFuture:f];
    return task;
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
}

- (id<IoReactivexDisposablesDisposable> __nonnull)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                                        withLong:(jlong)initialDelay
                                                                                        withLong:(jlong)period
                                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  id<JavaLangRunnable> decoratedRun = IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run);
  if (period <= 0LL) {
    id<JavaUtilConcurrentScheduledExecutorService> exec = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get];
    IoReactivexInternalSchedulersInstantPeriodicTask *periodicWrapper = create_IoReactivexInternalSchedulersInstantPeriodicTask_initWithJavaLangRunnable_withJavaUtilConcurrentExecutorService_(decoratedRun, exec);
    id<JavaUtilConcurrentFuture> f;
    @try {
      if (initialDelay <= 0LL) {
        f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(exec)) submitWithJavaUtilConcurrentCallable:periodicWrapper];
      }
      else {
        f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(exec)) scheduleWithJavaUtilConcurrentCallable:periodicWrapper withLong:initialDelay withJavaUtilConcurrentTimeUnit:unit];
      }
      [periodicWrapper setFirstWithJavaUtilConcurrentFuture:f];
    }
    @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
      return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
    }
    return periodicWrapper;
  }
  IoReactivexInternalSchedulersScheduledDirectPeriodicTask *task = create_IoReactivexInternalSchedulersScheduledDirectPeriodicTask_initWithJavaLangRunnable_(decoratedRun);
  @try {
    id<JavaUtilConcurrentFuture> f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(executor_)) get])) scheduleAtFixedRateWithJavaLangRunnable:task withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
    [task setFutureWithJavaUtilConcurrentFuture:f];
    return task;
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
}

- (void)dealloc {
  RELEASE_(threadFactory_);
  RELEASE_(executor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x8, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilConcurrentThreadFactory:);
  methods[2].selector = @selector(createExecutorWithJavaUtilConcurrentThreadFactory:);
  methods[3].selector = @selector(start);
  methods[4].selector = @selector(shutdown);
  methods[5].selector = @selector(createWorker);
  methods[6].selector = @selector(scheduleDirectWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[7].selector = @selector(schedulePeriodicallyDirectWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "executor_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "KEY_SINGLE_PRIORITY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "THREAD_NAME_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "SINGLE_THREAD_FACTORY", "LIoReactivexInternalSchedulersRxThreadFactory;", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "SHUTDOWN", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentThreadFactory;", "createExecutor", "scheduleDirect", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "schedulePeriodicallyDirect", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/util/concurrent/ScheduledExecutorService;>;", &IoReactivexInternalSchedulersSingleScheduler_KEY_SINGLE_PRIORITY, &IoReactivexInternalSchedulersSingleScheduler_THREAD_NAME_PREFIX, &IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY, &IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN, "LIoReactivexInternalSchedulersSingleScheduler_ScheduledWorker;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersSingleScheduler = { "SingleScheduler", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 8, 6, -1, 11, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersSingleScheduler;
}

+ (void)initialize {
  if (self == [IoReactivexInternalSchedulersSingleScheduler class]) {
    {
      JreStrongAssign(&IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN, JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_(0));
      [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(IoReactivexInternalSchedulersSingleScheduler_SHUTDOWN)) shutdown];
      jint priority = JavaLangMath_maxWithInt_withInt_(JavaLangThread_MIN_PRIORITY, JavaLangMath_minWithInt_withInt_(JavaLangThread_MAX_PRIORITY, [((JavaLangInteger *) nil_chk(JavaLangInteger_getIntegerWithNSString_withInt_(IoReactivexInternalSchedulersSingleScheduler_KEY_SINGLE_PRIORITY, JavaLangThread_NORM_PRIORITY))) intValue]));
      JreStrongAssignAndConsume(&IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY, new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(IoReactivexInternalSchedulersSingleScheduler_THREAD_NAME_PREFIX, priority, true));
    }
    J2OBJC_SET_INITIALIZED(IoReactivexInternalSchedulersSingleScheduler)
  }
}

@end

void IoReactivexInternalSchedulersSingleScheduler_init(IoReactivexInternalSchedulersSingleScheduler *self) {
  IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(self, IoReactivexInternalSchedulersSingleScheduler_SINGLE_THREAD_FACTORY);
}

IoReactivexInternalSchedulersSingleScheduler *new_IoReactivexInternalSchedulersSingleScheduler_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersSingleScheduler, init)
}

IoReactivexInternalSchedulersSingleScheduler *create_IoReactivexInternalSchedulersSingleScheduler_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersSingleScheduler, init)
}

void IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalSchedulersSingleScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexScheduler_init(self);
  JreStrongAssignAndConsume(&self->executor_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->threadFactory_, threadFactory);
  [self->executor_ lazySetWithId:IoReactivexInternalSchedulersSingleScheduler_createExecutorWithJavaUtilConcurrentThreadFactory_(threadFactory)];
}

IoReactivexInternalSchedulersSingleScheduler *new_IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersSingleScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

IoReactivexInternalSchedulersSingleScheduler *create_IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersSingleScheduler, initWithJavaUtilConcurrentThreadFactory_, threadFactory)
}

id<JavaUtilConcurrentScheduledExecutorService> IoReactivexInternalSchedulersSingleScheduler_createExecutorWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexInternalSchedulersSingleScheduler_initialize();
  return IoReactivexInternalSchedulersSchedulerPoolFactory_createWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersSingleScheduler)

@implementation IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor {
  IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(self, executor);
  return self;
}

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                      withLong:(jlong)delay
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
  id<JavaLangRunnable> decoratedRun = IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run);
  IoReactivexInternalSchedulersScheduledRunnable *sr = create_IoReactivexInternalSchedulersScheduledRunnable_initWithJavaLangRunnable_withIoReactivexInternalDisposablesDisposableContainer_(decoratedRun, tasks_);
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(tasks_)) addWithIoReactivexDisposablesDisposable:sr];
  @try {
    id<JavaUtilConcurrentFuture> f;
    if (delay <= 0LL) {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) submitWithJavaUtilConcurrentCallable:sr];
    }
    else {
      f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaUtilConcurrentCallable:sr withLong:delay withJavaUtilConcurrentTimeUnit:unit];
    }
    [sr setFutureWithJavaUtilConcurrentFuture:f];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ex) {
    [self dispose];
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
  return sr;
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&disposed_)) {
    JreAssignVolatileBoolean(&disposed_, true);
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(tasks_)) dispose];
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (void)dealloc {
  RELEASE_(executor_);
  RELEASE_(tasks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentScheduledExecutorService:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tasks_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentScheduledExecutorService;", "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "LIoReactivexInternalSchedulersSingleScheduler;" };
  static const J2ObjcClassInfo _IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker = { "ScheduledWorker", "io.reactivex.internal.schedulers", ptrTable, methods, fields, 7, 0x18, 4, 3, 3, -1, -1, -1, -1 };
  return &_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker;
}

@end

void IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *self, id<JavaUtilConcurrentScheduledExecutorService> executor) {
  IoReactivexScheduler_Worker_init(self);
  JreStrongAssign(&self->executor_, executor);
  JreStrongAssignAndConsume(&self->tasks_, new_IoReactivexDisposablesCompositeDisposable_init());
}

IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *new_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker, initWithJavaUtilConcurrentScheduledExecutorService_, executor)
}

IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker *create_IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker, initWithJavaUtilConcurrentScheduledExecutorService_, executor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSchedulersSingleScheduler_ScheduledWorker)
