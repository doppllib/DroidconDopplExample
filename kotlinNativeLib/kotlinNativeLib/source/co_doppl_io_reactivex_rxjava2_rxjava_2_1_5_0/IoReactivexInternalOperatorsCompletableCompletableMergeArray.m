//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableMergeArray.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

inline jlong IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_serialVersionUID -8360547806504310570LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeArray

- (instancetype)initWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsCompletableCompletableMergeArray_initWithIoReactivexCompletableSourceArray_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver *shared = create_IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_(s, once, set, ((IOSObjectArray *) nil_chk(sources_))->size_ + 1);
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  {
    IOSObjectArray *a__ = sources_;
    id<IoReactivexCompletableSource> const *b__ = a__->buffer_;
    id<IoReactivexCompletableSource> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<IoReactivexCompletableSource> c = *b__++;
      if ([set isDisposed]) {
        return;
      }
      if (c == nil) {
        [set dispose];
        JavaLangNullPointerException *npe = create_JavaLangNullPointerException_initWithNSString_(@"A completable source is null");
        [shared onErrorWithJavaLangThrowable:npe];
        return;
      }
      [c subscribeWithIoReactivexCompletableObserver:shared];
    }
  }
  [shared onComplete];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSourceArray:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeArray = { "CompletableMergeArray", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeArray;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeArray_initWithIoReactivexCompletableSourceArray_(IoReactivexInternalOperatorsCompletableCompletableMergeArray *self, IOSObjectArray *sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableMergeArray *new_IoReactivexInternalOperatorsCompletableCompletableMergeArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeArray, initWithIoReactivexCompletableSourceArray_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableMergeArray *create_IoReactivexInternalOperatorsCompletableCompletableMergeArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeArray, initWithIoReactivexCompletableSourceArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeArray)

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
             withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)once
         withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
                                               withInt:(jint)n {
  IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_(self, actual, once, set, n);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([self decrementAndGet] == 0) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(once_);
  RELEASE_(set_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LJavaUtilConcurrentAtomicAtomicBoolean;LIoReactivexDisposablesCompositeDisposable;I", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableMergeArray;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver = { "InnerCompletableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 4, 4, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_(IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver *self, id<IoReactivexCompletableObserver> actual, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, jint n) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->once_, once);
  JreStrongAssign(&self->set_, set);
  [self lazySetWithInt:n];
}

IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver *new_IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_(id<IoReactivexCompletableObserver> actual, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, jint n) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver, initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_, actual, once, set, n)
}

IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver *create_IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver_initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_(id<IoReactivexCompletableObserver> actual, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, jint n) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver, initWithIoReactivexCompletableObserver_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withInt_, actual, once, set, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeArray_InnerCompletableObserver)
