//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableToListSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableToListSingle

#if !defined (IoReactivexInternalOperatorsObservableObservableToListSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableToListSingle))
#define IoReactivexInternalOperatorsObservableObservableToListSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToObservable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToObservable 1
#include "IoReactivexInternalFuseableFuseToObservable.h"

@class IoReactivexObservable;
@protocol IoReactivexObservableSource;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableToListSingle : IoReactivexSingle < IoReactivexInternalFuseableFuseToObservable > {
 @public
  id<IoReactivexObservableSource> source_;
  id<JavaUtilConcurrentCallable> collectionSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier;

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                            withInt:(jint)defaultCapacityHint;

- (id<JavaUtilCollection>)blockingGet;

- (IoReactivexObservable *)fuseToObservable;

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableToListSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToListSingle, source_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToListSingle, collectionSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(IoReactivexInternalOperatorsObservableObservableToListSingle *self, id<IoReactivexObservableSource> source, jint defaultCapacityHint);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle *new_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle *create_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withInt_(id<IoReactivexObservableSource> source, jint defaultCapacityHint);

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableToListSingle *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle *new_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle *create_IoReactivexInternalOperatorsObservableObservableToListSingle_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> collectionSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableToListSingle)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver))
#define IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilCollection;

@interface IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<JavaUtilCollection> collection_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                           withJavaUtilCollection:(id<JavaUtilCollection>)collection;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver, collection_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *self, id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *new_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver *create_IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver_initWithIoReactivexSingleObserver_withJavaUtilCollection_(id<IoReactivexSingleObserver> actual, id<JavaUtilCollection> collection);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableToListSingle_ToListObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableToListSingle")
