//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalSubscriptionsAsyncSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalSubscriptionsAsyncSubscription_get_serialVersionUID();
#define IoReactivexInternalSubscriptionsAsyncSubscription_serialVersionUID 7028635084060361255LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscriptionsAsyncSubscription, serialVersionUID, jlong)

@implementation IoReactivexInternalSubscriptionsAsyncSubscription

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSubscriptionsAsyncSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  IoReactivexInternalSubscriptionsAsyncSubscription_initWithIoReactivexDisposablesDisposable_(self, resource);
  return self;
}

- (void)requestWithLong:(jlong)n {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredRequestWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withLong_(actual_, self, n);
}

- (void)cancel {
  [self dispose];
}

- (void)dispose {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(actual_);
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(resource_);
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get] == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED);
}

- (jboolean)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)r {
  return IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(resource_, r);
}

- (jboolean)replaceResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)r {
  return IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(resource_, r);
}

- (void)setSubscriptionWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredSetOnceWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withOrgReactivestreamsSubscription_(actual_, self, s);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(requestWithLong:);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  methods[6].selector = @selector(setResourceWithIoReactivexDisposablesDisposable:);
  methods[7].selector = @selector(replaceResourceWithIoReactivexDisposablesDisposable:);
  methods[8].selector = @selector(setSubscriptionWithOrgReactivestreamsSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalSubscriptionsAsyncSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "resource_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesDisposable;", "request", "J", "setResource", "replaceResource", "setSubscription", "LOrgReactivestreamsSubscription;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscriptionsAsyncSubscription = { "AsyncSubscription", "io.reactivex.internal.subscriptions", ptrTable, methods, fields, 7, 0x11, 9, 3, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalSubscriptionsAsyncSubscription;
}

@end

void IoReactivexInternalSubscriptionsAsyncSubscription_init(IoReactivexInternalSubscriptionsAsyncSubscription *self) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssignAndConsume(&self->resource_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexInternalSubscriptionsAsyncSubscription *new_IoReactivexInternalSubscriptionsAsyncSubscription_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscriptionsAsyncSubscription, init)
}

IoReactivexInternalSubscriptionsAsyncSubscription *create_IoReactivexInternalSubscriptionsAsyncSubscription_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscriptionsAsyncSubscription, init)
}

void IoReactivexInternalSubscriptionsAsyncSubscription_initWithIoReactivexDisposablesDisposable_(IoReactivexInternalSubscriptionsAsyncSubscription *self, id<IoReactivexDisposablesDisposable> resource) {
  IoReactivexInternalSubscriptionsAsyncSubscription_init(self);
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->resource_)) lazySetWithId:resource];
}

IoReactivexInternalSubscriptionsAsyncSubscription *new_IoReactivexInternalSubscriptionsAsyncSubscription_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscriptionsAsyncSubscription, initWithIoReactivexDisposablesDisposable_, resource)
}

IoReactivexInternalSubscriptionsAsyncSubscription *create_IoReactivexInternalSubscriptionsAsyncSubscription_initWithIoReactivexDisposablesDisposable_(id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscriptionsAsyncSubscription, initWithIoReactivexDisposablesDisposable_, resource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscriptionsAsyncSubscription)
