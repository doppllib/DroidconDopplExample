//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableIntervalRange
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableIntervalRange

#if !defined (IoReactivexInternalOperatorsFlowableFlowableIntervalRange_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableIntervalRange))
#define IoReactivexInternalOperatorsFlowableFlowableIntervalRange_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@class IoReactivexScheduler;
@class JavaLangLong;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableIntervalRange : IoReactivexFlowable {
 @public
  IoReactivexScheduler *scheduler_;
  jlong start_;
  jlong end_;
  jlong initialDelay_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)start
                    withLong:(jlong)end
                    withLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (JavaLangLong *)blockingFirst;

- (JavaLangLong *)blockingFirstWithId:(JavaLangLong *)arg0;

- (JavaLangLong *)blockingLast;

- (JavaLangLong *)blockingLastWithId:(JavaLangLong *)arg0;

- (JavaLangLong *)blockingSingle;

- (JavaLangLong *)blockingSingleWithId:(JavaLangLong *)arg0;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableIntervalRange)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange, unit_, JavaUtilConcurrentTimeUnit *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableIntervalRange *self, jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableIntervalRange *new_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableIntervalRange *create_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_initWithLong_withLong_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong start, jlong end, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber : JavaUtilConcurrentAtomicAtomicLong < OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jlong end_;
  jlong count_;
  JavaUtilConcurrentAtomicAtomicReference *resource_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)requestWithLong:(jlong)n;

- (void)run;

- (void)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)start
                                            withLong:(jlong)end;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber, resource_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_(id<OrgReactivestreamsSubscriber> actual, jlong start, jlong end);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableIntervalRange_IntervalRangeSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableIntervalRange")
