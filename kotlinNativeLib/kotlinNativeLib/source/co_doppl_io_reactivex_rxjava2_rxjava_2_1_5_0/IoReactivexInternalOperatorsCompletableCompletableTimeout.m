//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableTimeout.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver () {
 @public
  IoReactivexDisposablesCompositeDisposable *set_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  id<IoReactivexCompletableObserver> s_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver, s_, id<IoReactivexCompletableObserver>)

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask () {
 @public
  IoReactivexInternalOperatorsCompletableCompletableTimeout *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask, once_, JavaUtilConcurrentAtomicAtomicBoolean *)

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver () {
 @public
  IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *this$0_;
}

@end

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  id<IoReactivexDisposablesDisposable> timer = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(self, once, set, s) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
  [set addWithIoReactivexDisposablesDisposable:timer];
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(set, once, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withIoReactivexCompletableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver;LIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout = { "CompletableTimeout", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableTimeout *self, id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout, initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout, initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableTimeout)

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)once
                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(self, set, once, s);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(set_);
  RELEASE_(once_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexDisposablesCompositeDisposable:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesCompositeDisposable;LJavaUtilConcurrentAtomicAtomicBoolean;LIoReactivexCompletableObserver;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver = { "TimeOutObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 4, 3, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *self, IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s) {
  NSObject_init(self);
  JreStrongAssign(&self->set_, set);
  JreStrongAssign(&self->once_, once);
  JreStrongAssign(&self->s_, s);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver, initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_, set, once, s)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver, initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_, set, once, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver)

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:(IoReactivexInternalOperatorsCompletableCompletableTimeout *)outer$
                                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)once
                                    withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
                                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(self, outer$, once, set, s);
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) clear];
    if (this$0_->other_ == nil) {
      [((id<IoReactivexCompletableObserver>) nil_chk(s_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
    }
    else {
      [this$0_->other_ subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(self)];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(once_);
  RELEASE_(set_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;LIoReactivexDisposablesCompositeDisposable;LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask = { "DisposeTask", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x10, 2, 4, 1, 2, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *self, IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->once_, once);
  JreStrongAssign(&self->set_, set);
  JreStrongAssign(&self->s_, s);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, outer$, once, set, s)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, outer$, once, set, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask)

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask:(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *)outer$ {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->set_)) dispose];
  [((id<IoReactivexCompletableObserver>) nil_chk(this$0_->s_)) onErrorWithJavaLangThrowable:e];
}

- (void)onComplete {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->set_)) dispose];
  [((id<IoReactivexCompletableObserver>) nil_chk(this$0_->s_)) onComplete];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver = { "DisposeObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x10, 4, 1, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *self, IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_, outer$)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver)
