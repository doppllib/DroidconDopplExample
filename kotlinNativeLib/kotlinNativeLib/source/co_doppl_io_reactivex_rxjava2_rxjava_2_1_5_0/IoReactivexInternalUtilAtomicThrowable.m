//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalUtilAtomicThrowable_get_serialVersionUID();
#define IoReactivexInternalUtilAtomicThrowable_serialVersionUID 3949248817947090603LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalUtilAtomicThrowable, serialVersionUID, jlong)

@implementation IoReactivexInternalUtilAtomicThrowable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilAtomicThrowable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)addThrowableWithJavaLangThrowable:(JavaLangThrowable *)t {
  return IoReactivexInternalUtilExceptionHelper_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withJavaLangThrowable_(self, t);
}

- (JavaLangThrowable *)terminate {
  return IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isTerminated {
  return [self get] == JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addThrowableWithJavaLangThrowable:);
  methods[2].selector = @selector(terminate);
  methods[3].selector = @selector(isTerminated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalUtilAtomicThrowable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addThrowable", "LJavaLangThrowable;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilAtomicThrowable = { "AtomicThrowable", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 4, 1, -1, -1, -1, 2, -1 };
  return &_IoReactivexInternalUtilAtomicThrowable;
}

@end

void IoReactivexInternalUtilAtomicThrowable_init(IoReactivexInternalUtilAtomicThrowable *self) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
}

IoReactivexInternalUtilAtomicThrowable *new_IoReactivexInternalUtilAtomicThrowable_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilAtomicThrowable, init)
}

IoReactivexInternalUtilAtomicThrowable *create_IoReactivexInternalUtilAtomicThrowable_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilAtomicThrowable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilAtomicThrowable)
