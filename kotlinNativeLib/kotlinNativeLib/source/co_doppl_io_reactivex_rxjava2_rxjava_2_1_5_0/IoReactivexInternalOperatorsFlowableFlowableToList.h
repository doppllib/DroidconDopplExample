//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableToList
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableToList

#if !defined (IoReactivexInternalOperatorsFlowableFlowableToList_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableToList))
#define IoReactivexInternalOperatorsFlowableFlowableToList_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableToList : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> collectionSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableToList)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableToList, collectionSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableToList_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableToList *self, IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableToList *new_IoReactivexInternalOperatorsFlowableFlowableToList_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableToList *create_IoReactivexInternalOperatorsFlowableFlowableToList_initWithIoReactivexFlowable_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<JavaUtilConcurrentCallable> collectionSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableToList)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber_

#define RESTRICT_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class JavaLangThrowable;
@protocol JavaUtilCollection;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber : IoReactivexInternalSubscriptionsDeferredScalarSubscription < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id<JavaUtilCollection>)poll;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                              withJavaUtilCollection:(id<JavaUtilCollection>)collection;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilCollection_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilCollection_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilCollection> collection);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableToList_ToListSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableToList")
