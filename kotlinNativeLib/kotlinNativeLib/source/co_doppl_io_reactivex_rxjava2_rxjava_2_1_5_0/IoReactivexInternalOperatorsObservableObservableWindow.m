//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableWindow.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexSubjectsUnicastSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_serialVersionUID -7481782523886138128LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_serialVersionUID 3366976432059579510LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableWindow

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)count
                                           withLong:(jlong)skip
                                            withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(self, source, count, skip, capacityHint);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (count_ == skip_) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(t, count_, capacityHint_)];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(t, count_, skip_, capacityHint_)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withLong:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "capacityHint_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JJI", "(Lio/reactivex/ObservableSource<TT;>;JJI)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;)V", "LIoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver;LIoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;Lio/reactivex/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindow = { "ObservableWindow", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindow;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow *self, id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->count_ = count;
  self->skip_ = skip;
  self->capacityHint_ = capacityHint;
}

IoReactivexInternalOperatorsObservableObservableWindow *new_IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindow, initWithIoReactivexObservableSource_withLong_withLong_withInt_, source, count, skip, capacityHint)
}

IoReactivexInternalOperatorsObservableObservableWindow *create_IoReactivexInternalOperatorsObservableObservableWindow_initWithIoReactivexObservableSource_withLong_withLong_withInt_(id<IoReactivexObservableSource> source, jlong count, jlong skip, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindow, initWithIoReactivexObservableSource_withLong_withLong_withInt_, source, count, skip, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindow)

@implementation IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
                                    withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(self, actual, count, capacityHint);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  IoReactivexSubjectsUnicastSubject *w = window_;
  if (w == nil && !JreLoadVolatileBoolean(&cancelled_)) {
    w = IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_(capacityHint_, self);
    JreStrongAssign(&window_, w);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:w];
  }
  if (w != nil) {
    [w onNextWithId:t];
    if (++size_ >= count_) {
      size_ = 0;
      JreStrongAssign(&window_, nil);
      [w onComplete];
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexSubjectsUnicastSubject *w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onErrorWithJavaLangThrowable:t];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  IoReactivexSubjectsUnicastSubject *w = window_;
  if (w != nil) {
    JreStrongAssign(&window_, nil);
    [w onComplete];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)run {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  RELEASE_(window_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "capacityHint_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JI", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;JI)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "LIoReactivexInternalOperatorsObservableObservableWindow;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver = { "WindowExactObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 8, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *self, id<IoReactivexObserver> actual, jlong count, jint capacityHint) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
  self->capacityHint_ = capacityHint;
}

IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *new_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, initWithIoReactivexObserver_withLong_withInt_, actual, count, capacityHint)
}

IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver *create_IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver_initWithIoReactivexObserver_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver, initWithIoReactivexObserver_withLong_withInt_, actual, count, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindow_WindowExactObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)count
                                   withLong:(jlong)skip
                                    withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(self, actual, count, skip, capacityHint);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  JavaUtilArrayDeque *ws = windows_;
  jlong i = index_;
  jlong s = skip_;
  if (i % s == 0 && !JreLoadVolatileBoolean(&cancelled_)) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement];
    IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_(capacityHint_, self);
    [((JavaUtilArrayDeque *) nil_chk(ws)) offerWithId:w];
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:w];
  }
  jlong c = firstEmission_ + 1;
  for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
    [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:t];
  }
  if (c >= count_) {
    [((IoReactivexSubjectsUnicastSubject *) nil_chk([ws poll])) onComplete];
    if ([ws isEmpty] && JreLoadVolatileBoolean(&cancelled_)) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(self->s_)) dispose];
      return;
    }
    firstEmission_ = c - s;
  }
  else {
    firstEmission_ = c;
  }
  index_ = i + 1;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JavaUtilArrayDeque *ws = windows_;
  while (![((JavaUtilArrayDeque *) nil_chk(ws)) isEmpty]) {
    [((IoReactivexSubjectsUnicastSubject *) nil_chk([ws poll])) onErrorWithJavaLangThrowable:t];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  JavaUtilArrayDeque *ws = windows_;
  while (![((JavaUtilArrayDeque *) nil_chk(ws)) isEmpty]) {
    [((IoReactivexSubjectsUnicastSubject *) nil_chk([ws poll])) onComplete];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] == 0) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(windows_);
  RELEASE_(s_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withLong:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "skip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "capacityHint_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "windows_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "firstEmission_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JJI", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;JJI)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;", "Ljava/util/ArrayDeque<Lio/reactivex/subjects/UnicastSubject<TT;>;>;", "LIoReactivexInternalOperatorsObservableObservableWindow;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver = { "WindowSkipObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 11, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *self, id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->actual_, actual);
  self->count_ = count;
  self->skip_ = skip;
  self->capacityHint_ = capacityHint;
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilArrayDeque_init());
}

IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *new_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, initWithIoReactivexObserver_withLong_withLong_withInt_, actual, count, skip, capacityHint)
}

IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver *create_IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver_initWithIoReactivexObserver_withLong_withLong_withInt_(id<IoReactivexObserver> actual, jlong count, jlong skip, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver, initWithIoReactivexObserver_withLong_withLong_withInt_, actual, count, skip, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindow_WindowSkipObserver)
