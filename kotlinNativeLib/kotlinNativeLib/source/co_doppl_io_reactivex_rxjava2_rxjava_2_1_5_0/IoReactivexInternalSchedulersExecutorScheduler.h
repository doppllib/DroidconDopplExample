//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler")
#ifdef RESTRICT_IoReactivexInternalSchedulersExecutorScheduler
#define INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersExecutorScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler))
#define IoReactivexInternalSchedulersExecutorScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "IoReactivexScheduler.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;

@interface IoReactivexInternalSchedulersExecutorScheduler : IoReactivexScheduler {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
}

+ (IoReactivexScheduler *)HELPER;

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

- (IoReactivexScheduler_Worker * __nonnull)createWorker;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                            withLong:(jlong)delay
                                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<IoReactivexDisposablesDisposable> __nonnull)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                                        withLong:(jlong)initialDelay
                                                                                        withLong:(jlong)period
                                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler, executor_, id<JavaUtilConcurrentExecutor>)

inline IoReactivexScheduler *IoReactivexInternalSchedulersExecutorScheduler_get_HELPER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexInternalSchedulersExecutorScheduler_HELPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersExecutorScheduler, HELPER, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(IoReactivexInternalSchedulersExecutorScheduler *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler *new_IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler *create_IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker))
#define IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "IoReactivexScheduler.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalQueueMpscLinkedQueue;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilConcurrentExecutor;

@interface IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker : IoReactivexScheduler_Worker < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  IoReactivexInternalQueueMpscLinkedQueue *queue_;
  volatile_jboolean disposed_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  IoReactivexDisposablesCompositeDisposable *tasks_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (void)dispose;

- (jboolean)isDisposed;

- (void)run;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run;

- (id<IoReactivexDisposablesDisposable> __nonnull)scheduleWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)run
                                                                      withLong:(jlong)delay
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, queue_, IoReactivexInternalQueueMpscLinkedQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, tasks_, IoReactivexDisposablesCompositeDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *new_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *create_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable))
#define IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@interface IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable : JavaUtilConcurrentAtomicAtomicBoolean < JavaLangRunnable, IoReactivexDisposablesDisposable > {
 @public
  id<JavaLangRunnable> actual_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable, actual_, id<JavaLangRunnable>)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *self, id<JavaLangRunnable> actual);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *new_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *create_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose))
#define IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@class IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker;

@interface IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker:(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *)outer$
                               withIoReactivexInternalDisposablesSequentialDisposable:(IoReactivexInternalDisposablesSequentialDisposable *)mar
                                                                 withJavaLangRunnable:(id<JavaLangRunnable>)decoratedRun;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_withIoReactivexInternalDisposablesSequentialDisposable_withJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose *self, IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *outer$, IoReactivexInternalDisposablesSequentialDisposable *mar, id<JavaLangRunnable> decoratedRun);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose *new_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_withIoReactivexInternalDisposablesSequentialDisposable_withJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *outer$, IoReactivexInternalDisposablesSequentialDisposable *mar, id<JavaLangRunnable> decoratedRun) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose *create_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_withIoReactivexInternalDisposablesSequentialDisposable_withJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *outer$, IoReactivexInternalDisposablesSequentialDisposable *mar, id<JavaLangRunnable> decoratedRun);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_SequentialDispose)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable))
#define IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable : JavaUtilConcurrentAtomicAtomicReference < JavaLangRunnable, IoReactivexDisposablesDisposable > {
 @public
  IoReactivexInternalDisposablesSequentialDisposable *timed_;
  IoReactivexInternalDisposablesSequentialDisposable *direct_;
}

#pragma mark Public

- (id<JavaLangRunnable>)accumulateAndGetWithId:(id<JavaLangRunnable>)arg0
            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<JavaLangRunnable>)get;

- (id<JavaLangRunnable>)getAndAccumulateWithId:(id<JavaLangRunnable>)arg0
            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<JavaLangRunnable>)getAndSetWithId:(id<JavaLangRunnable>)arg0;

- (id<JavaLangRunnable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)run;

- (id<JavaLangRunnable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable, timed_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable, direct_, IoReactivexInternalDisposablesSequentialDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *self, id<JavaLangRunnable> run);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *new_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> run) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *create_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> run);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose))
#define IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalSchedulersExecutorScheduler;
@class IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable;

@interface IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalSchedulersExecutorScheduler:(IoReactivexInternalSchedulersExecutorScheduler *)outer$
    withIoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable:(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *)dr;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_withIoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_(IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose *self, IoReactivexInternalSchedulersExecutorScheduler *outer$, IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *dr);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose *new_IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_withIoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_(IoReactivexInternalSchedulersExecutorScheduler *outer$, IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *dr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose *create_IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose_initWithIoReactivexInternalSchedulersExecutorScheduler_withIoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_(IoReactivexInternalSchedulersExecutorScheduler *outer$, IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *dr);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_DelayedDispose)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler")
