//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCombineLatest.h"
#include "IoReactivexInternalOperatorsFlowableFlowableMap.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilExceptionHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_serialVersionUID -5082275438355852221LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_serialVersionUID -8730235182291002949LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest *this$0_;
}

@end

@implementation IoReactivexInternalOperatorsFlowableFlowableCombineLatest

- (instancetype)initWithOrgReactivestreamsPublisherArray:(IOSObjectArray * __nonnull)array
                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction> __nonnull)combiner
                                                 withInt:(jint)bufferSize
                                             withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, array, combiner, bufferSize, delayErrors);
  return self;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction> __nonnull)combiner
                                 withInt:(jint)bufferSize
                             withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, iterable, combiner, bufferSize, delayErrors);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IOSObjectArray *a = array_;
  jint n;
  if (a == nil) {
    n = 0;
    a = [IOSObjectArray arrayWithLength:8 type:OrgReactivestreamsPublisher_class_()];
    id<JavaUtilIterator> it;
    @try {
      it = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaLangIterable>) nil_chk(iterable_)) iterator], @"The iterator returned is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
      return;
    }
    for (; ; ) {
      jboolean b;
      @try {
        b = [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
      }
      @catch (JavaLangThrowable *e) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
        IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
        return;
      }
      if (!b) {
        break;
      }
      id<OrgReactivestreamsPublisher> p;
      @try {
        p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([it next], @"The publisher returned by the iterator is null");
      }
      @catch (JavaLangThrowable *e) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
        IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(e, s);
        return;
      }
      if (n == a->size_) {
        IOSObjectArray *c = [IOSObjectArray arrayWithLength:n + (JreRShift32(n, 2)) type:OrgReactivestreamsPublisher_class_()];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, c, 0, n);
        a = c;
      }
      IOSObjectArray_Set(a, n++, p);
    }
  }
  else {
    n = a->size_;
  }
  if (n == 0) {
    IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(s);
    return;
  }
  if (n == 1) {
    [((id<OrgReactivestreamsPublisher>) nil_chk((IOSObjectArray_Get(a, 0)))) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(s, create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_(self))];
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *coordinator = create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(s, combiner_, n, bufferSize_, delayErrors_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:coordinator];
  [coordinator subscribeWithOrgReactivestreamsPublisherArray:a withInt:n];
}

- (void)dealloc {
  RELEASE_(array_);
  RELEASE_(iterable_);
  RELEASE_(combiner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisherArray:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(initWithJavaLangIterable:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[2].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "array_", "[LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "combiner_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;IZ", "([Lorg/reactivestreams/Publisher<+TT;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;IZ)V", "LJavaLangIterable;LIoReactivexFunctionsFunction;IZ", "(Ljava/lang/Iterable<+Lorg/reactivestreams/Publisher<+TT;>;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "[Lorg/reactivestreams/Publisher<+TT;>;", "Ljava/lang/Iterable<+Lorg/reactivestreams/Publisher<+TT;>;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator;LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber;LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCombineLatest = { "FlowableCombineLatest", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 5, -1, 10, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCombineLatest;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest *self, IOSObjectArray *array, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->array_, array);
  JreStrongAssign(&self->iterable_, nil);
  JreStrongAssign(&self->combiner_, combiner);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest *new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *array, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest, initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_, array, combiner, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest *create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *array, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest, initWithOrgReactivestreamsPublisherArray_withIoReactivexFunctionsFunction_withInt_withBoolean_, array, combiner, bufferSize, delayErrors)
}

void IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest *self, id<JavaLangIterable> iterable, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->array_, nil);
  JreStrongAssign(&self->iterable_, iterable);
  JreStrongAssign(&self->combiner_, combiner);
  self->bufferSize_ = bufferSize;
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest *new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<JavaLangIterable> iterable, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest, initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_, iterable, combiner, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest *create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<JavaLangIterable> iterable, id<IoReactivexFunctionsFunction> combiner, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest, initWithJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_, iterable, combiner, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCombineLatest)

@implementation IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)combiner
                                             withInt:(jint)n
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(self, actual, combiner, n, bufferSize, delayErrors);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [self cancelAll];
}

- (void)subscribeWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                              withInt:(jint)n {
  IOSObjectArray *a = subscribers_;
  for (jint i = 0; i < n; i++) {
    if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<OrgReactivestreamsPublisher>) nil_chk(IOSObjectArray_Get(nil_chk(sources), i))) subscribeWithOrgReactivestreamsSubscriber:IOSObjectArray_Get(nil_chk(a), i)];
  }
}

- (void)innerValueWithInt:(jint)index
                   withId:(id)value {
  jboolean replenishInsteadOfDrain;
  @synchronized(self) {
    IOSObjectArray *os = latest_;
    jint localNonEmptySources = nonEmptySources_;
    if (IOSObjectArray_Get(nil_chk(os), index) == nil) {
      localNonEmptySources++;
      nonEmptySources_ = localNonEmptySources;
    }
    IOSObjectArray_Set(os, index, value);
    if (os->size_ == localNonEmptySources) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:IOSObjectArray_Get(nil_chk(subscribers_), index) withId:[os java_clone]];
      replenishInsteadOfDrain = false;
    }
    else {
      replenishInsteadOfDrain = true;
    }
  }
  if (replenishInsteadOfDrain) {
    [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *) nil_chk(IOSObjectArray_Get(nil_chk(subscribers_), index))) requestOne];
  }
  else {
    [self drain];
  }
}

- (void)innerCompleteWithInt:(jint)index {
  @synchronized(self) {
    IOSObjectArray *os = latest_;
    if (IOSObjectArray_Get(nil_chk(os), index) != nil) {
      jint localCompletedSources = completedSources_ + 1;
      if (localCompletedSources == os->size_) {
        JreAssignVolatileBoolean(&done_, true);
      }
      else {
        completedSources_ = localCompletedSources;
        return;
      }
    }
    else {
      JreAssignVolatileBoolean(&done_, true);
    }
  }
  [self drain];
}

- (void)innerErrorWithInt:(jint)index
    withJavaLangThrowable:(JavaLangThrowable *)e {
  if (IoReactivexInternalUtilExceptionHelper_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withJavaLangThrowable_(error_, e)) {
    if (!delayErrors_) {
      [self cancelAll];
      JreAssignVolatileBoolean(&done_, true);
      [self drain];
    }
    else {
      [self innerCompleteWithInt:index];
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)drainOutput {
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jint missed = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      return;
    }
    JavaLangThrowable *ex = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get];
    if (ex != nil) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    jboolean empty = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty];
    if (!empty) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:nil];
    }
    if (d && empty) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      return;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drainAsync {
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jint missed = 1;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      jboolean empty = v == nil;
      if ([self checkTerminatedWithBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      IOSObjectArray *va = (IOSObjectArray *) cast_check([q poll], IOSClass_arrayType(NSObject_class_(), 1));
      id w;
      @try {
        w = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(combiner_)) applyWithId:va], @"The combiner returned a null value");
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [self cancelAll];
        IoReactivexInternalUtilExceptionHelper_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withJavaLangThrowable_(error_, ex);
        ex = IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
      [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *) nil_chk(((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *) cast_chk(v, [IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber class])))) requestOne];
      e++;
    }
    if (e == r) {
      if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  if (outputFused_) {
    [self drainOutput];
  }
  else {
    [self drainAsync];
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [self cancelAll];
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
    return true;
  }
  if (d) {
    if (delayErrors_) {
      if (empty) {
        [self cancelAll];
        JavaLangThrowable *e = IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_);
        if (e != nil && e != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return true;
      }
    }
    else {
      JavaLangThrowable *e = IoReactivexInternalUtilExceptionHelper_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_);
      if (e != nil && e != JreLoadStatic(IoReactivexInternalUtilExceptionHelper, TERMINATED)) {
        [self cancelAll];
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        return true;
      }
      else if (empty) {
        [self cancelAll];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return true;
      }
    }
  }
  return false;
}

- (void)cancelAll {
  {
    IOSObjectArray *a__ = subscribers_;
    IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *inner = *b__++;
      [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *) nil_chk(inner)) cancel];
    }
  }
}

- (jint)requestFusionWithInt:(jint)requestedMode {
  if ((requestedMode & IoReactivexInternalFuseableQueueFuseable_BOUNDARY) != 0) {
    return IoReactivexInternalFuseableQueueFuseable_NONE;
  }
  jint m = requestedMode & IoReactivexInternalFuseableQueueFuseable_ASYNC;
  outputFused_ = (m != 0);
  return m;
}

- (id __nullable)poll {
  id e = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) poll];
  if (e == nil) {
    return nil;
  }
  IOSObjectArray *a = (IOSObjectArray *) cast_check([queue_ poll], IOSClass_arrayType(NSObject_class_(), 1));
  id r = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(combiner_)) applyWithId:a], @"The combiner returned a null value");
  [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *) cast_chk(e, [IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber class])) requestOne];
  return r;
}

- (void)clear {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) clear];
}

- (jboolean)isEmpty {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) isEmpty];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(combiner_);
  RELEASE_(subscribers_);
  RELEASE_(queue_);
  RELEASE_(latest_);
  RELEASE_(requested_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 18, 19, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withInt:withBoolean:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(subscribeWithOrgReactivestreamsPublisherArray:withInt:);
  methods[4].selector = @selector(innerValueWithInt:withId:);
  methods[5].selector = @selector(innerCompleteWithInt:);
  methods[6].selector = @selector(innerErrorWithInt:withJavaLangThrowable:);
  methods[7].selector = @selector(drainOutput);
  methods[8].selector = @selector(drainAsync);
  methods[9].selector = @selector(drain);
  methods[10].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:withIoReactivexInternalQueueSpscLinkedArrayQueue:);
  methods[11].selector = @selector(cancelAll);
  methods[12].selector = @selector(requestFusionWithInt:);
  methods[13].selector = @selector(poll);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "combiner_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "subscribers_", "[LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "latest_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nonEmptySources_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "completedSources_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;IIZ", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;IIZ)V", "request", "J", "subscribe", "[LOrgReactivestreamsPublisher;I", "([Lorg/reactivestreams/Publisher<+TT;>;I)V", "innerValue", "ILNSObject;", "(ITT;)V", "innerComplete", "I", "innerError", "ILJavaLangThrowable;", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;LIoReactivexInternalQueueSpscLinkedArrayQueue;", "(ZZLorg/reactivestreams/Subscriber<*>;Lio/reactivex/internal/queue/SpscLinkedArrayQueue<*>;)Z", "requestFusion", "LJavaLangException;", "()TR;", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "[Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber<TT;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<Ljava/lang/Object;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator = { "CombineLatestCoordinator", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 16, 14, 25, -1, -1, 26, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> combiner, jint n, jint bufferSize, jboolean delayErrors) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->combiner_, combiner);
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:n type:IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(a, i, new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_(self, i, bufferSize));
  }
  JreStrongAssign(&self->subscribers_, a);
  JreStrongAssignAndConsume(&self->latest_, [IOSObjectArray newArrayWithLength:n type:NSObject_class_()]);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(bufferSize));
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->error_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> combiner, jint n, jint bufferSize, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_, actual, combiner, n, bufferSize, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> combiner, jint n, jint bufferSize, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_, actual, combiner, n, bufferSize, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator)

@implementation IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator:(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *)parent
                                                                                                   withInt:(jint)index
                                                                                                   withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_(self, parent, index, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *) nil_chk(parent_)) innerValueWithInt:index_ withId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *) nil_chk(parent_)) innerErrorWithInt:index_ withJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *) nil_chk(parent_)) innerCompleteWithInt:index_];
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)requestOne {
  jint p = produced_ + 1;
  if (p == limit_) {
    produced_ = 0;
    [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
  }
  else {
    produced_ = p;
  }
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator:withInt:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(requestOne);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "produced_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator;II", "(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator<TT;*>;II)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator<TT;*>;", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber = { "CombineLatestInnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 6, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *parent, jint index, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *parent, jint index, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_, parent, index, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator *parent, jint index, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestCoordinator_withInt_withInt_, parent, index, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_CombineLatestInnerSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest:(IoReactivexInternalOperatorsFlowableFlowableCombineLatest *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_(self, outer$);
  return self;
}

- (id)applyWithId:(id)t {
  return [((id<IoReactivexFunctionsFunction>) nil_chk(this$0_->combiner_)) applyWithId:[IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:NSObject_class_()]];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "apply", "LNSObject;", "LJavaLangException;", "(TT;)TR;", "Lio/reactivex/internal/operators/flowable/FlowableCombineLatest<TT;TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableCombineLatest;", "Ljava/lang/Object;Lio/reactivex/functions/Function<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc = { "SingletonArrayFunc", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 1, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc *self, IoReactivexInternalOperatorsFlowableFlowableCombineLatest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc *new_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc, initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc *create_IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc_initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_(IoReactivexInternalOperatorsFlowableFlowableCombineLatest *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc, initWithIoReactivexInternalOperatorsFlowableFlowableCombineLatest_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCombineLatest_SingletonArrayFunc)
