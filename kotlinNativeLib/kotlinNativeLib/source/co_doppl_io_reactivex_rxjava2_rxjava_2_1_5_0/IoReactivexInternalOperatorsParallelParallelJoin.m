//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsParallelParallelJoin.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_serialVersionUID 3100232009247827843LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_serialVersionUID 6312374661811000451LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_serialVersionUID -5737965195918321883LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_serialVersionUID 8410034718427740355LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsParallelParallelJoin

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                                                    withInt:(jint)prefetch
                                                withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(self, source, prefetch, delayErrors);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent;
  if (delayErrors_) {
    parent = create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(s, [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism], prefetch_);
  }
  else {
    parent = create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(s, [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism], prefetch_);
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent];
  [source_ subscribeWithOrgReactivestreamsSubscriberArray:parent->subscribers_];
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexParallelParallelFlowable:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexParallelParallelFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexParallelParallelFlowable;IZ", "(Lio/reactivex/parallel/ParallelFlowable<+TT;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/parallel/ParallelFlowable<+TT;>;", "LIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase;LIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription;LIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError;LIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelJoin = { "ParallelJoin", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelJoin;
}

@end

void IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexInternalOperatorsParallelParallelJoin *self, IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  self->prefetch_ = prefetch;
  self->delayErrors_ = delayErrors;
}

IoReactivexInternalOperatorsParallelParallelJoin *new_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelJoin, initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_, source, prefetch, delayErrors)
}

IoReactivexInternalOperatorsParallelParallelJoin *create_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_(IoReactivexParallelParallelFlowable *source, jint prefetch, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelJoin, initWithIoReactivexParallelParallelFlowable_withInt_withBoolean_, source, prefetch, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelJoin)

@implementation IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, n, prefetch);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self cancelAll];
    if ([self getAndIncrement] == 0) {
      [self cleanup];
    }
  }
}

- (void)cancelAll {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subscribers_))->size_; i++) {
    IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *s = IOSObjectArray_Get(subscribers_, i);
    [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(s)) cancel];
  }
}

- (void)cleanup {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subscribers_))->size_; i++) {
    IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *s = IOSObjectArray_Get(subscribers_, i);
    JreVolatileStrongAssign(&((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(s))->queue_, nil);
  }
}

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onComplete {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(subscribers_);
  RELEASE_(errors_);
  RELEASE_(requested_);
  RELEASE_(done_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x400, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withInt:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(cancelAll);
  methods[4].selector = @selector(cleanup);
  methods[5].selector = @selector(onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:withId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  methods[8].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "subscribers_", "[LIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;II", "(Lorg/reactivestreams/Subscriber<-TT;>;II)V", "request", "J", "onNext", "LIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;LNSObject;", "(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber<TT;>;TT;)V", "onError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "[Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber<TT;>;", "LIoReactivexInternalOperatorsParallelParallelJoin;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase = { "JoinSubscriptionBase", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x408, 9, 7, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase;
}

@end

void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->done_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->actual_, actual);
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:n type:IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(a, i, new_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(self, prefetch));
  }
  JreStrongAssign(&self->subscribers_, a);
  [self->done_ lazySetWithInt:n];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase)

@implementation IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, n, prefetch);
  return self;
}

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get] != 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      if ([requested_ get] != JavaLangLong_MAX_VALUE) {
        [requested_ decrementAndGet];
      }
      [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) requestWithLong:1];
    }
    else {
      id<IoReactivexInternalFuseableSimplePlainQueue> q = [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) getQueue];
      if (![((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:value]) {
        [self cancelAll];
        JavaLangThrowable *mbe = create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!");
        if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) compareAndSetWithId:nil withId:mbe]) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:mbe];
        }
        else {
          IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(mbe);
        }
        return;
      }
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimplePlainQueue> q = [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) getQueue];
    if (![((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:value]) {
      [self cancelAll];
      [self onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!")];
      return;
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) compareAndSetWithId:nil withId:e]) {
    [self cancelAll];
    [self drain];
  }
  else {
    if (e != [errors_ get]) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
    }
  }
}

- (void)onComplete {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) decrementAndGet];
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  [self drainLoop];
}

- (void)drainLoop {
  jint missed = 1;
  IOSObjectArray *s = self->subscribers_;
  jint n = ((IOSObjectArray *) nil_chk(s))->size_;
  id<OrgReactivestreamsSubscriber> a = self->actual_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self cleanup];
        return;
      }
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
      if (ex != nil) {
        [self cleanup];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) get] == 0;
      jboolean empty = true;
      for (jint i = 0; i < s->size_; i++) {
        IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *inner = IOSObjectArray_Get(s, i);
        id<IoReactivexInternalFuseableSimplePlainQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner))->queue_);
        if (q != nil) {
          id v = [q poll];
          if (v != nil) {
            empty = false;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
            [inner requestOne];
            if (++e == r) {
              goto break_middle;
            }
          }
        }
      }
      if (d && empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
      if (empty) {
        break;
      }
    }
    break_middle: ;
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self cleanup];
        return;
      }
      JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
      if (ex != nil) {
        [self cleanup];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) get] == 0;
      jboolean empty = true;
      for (jint i = 0; i < n; i++) {
        IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *inner = IOSObjectArray_Get(s, i);
        id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner))->queue_);
        if (q != nil && ![q isEmpty]) {
          empty = false;
          break;
        }
      }
      if (d && empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
    }
    if (e != 0 && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    jint w = [self get];
    if (w == missed) {
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withInt:);
  methods[1].selector = @selector(onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:withId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(drain);
  methods[5].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;II", "(Lorg/reactivestreams/Subscriber<-TT;>;II)V", "onNext", "LIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;LNSObject;", "(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber<TT;>;TT;)V", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsParallelParallelJoin;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription = { "JoinSubscription", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 6, 1, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription;
}

@end

void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, n, prefetch);
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, n, prefetch)
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, n, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription)

@implementation IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, n, prefetch);
  return self;
}

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value {
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get] != 0) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
      if ([requested_ get] != JavaLangLong_MAX_VALUE) {
        [requested_ decrementAndGet];
      }
      [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) requestWithLong:1];
    }
    else {
      id<IoReactivexInternalFuseableSimplePlainQueue> q = [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) getQueue];
      if (![((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:value]) {
        [inner cancel];
        [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!")];
        [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) decrementAndGet];
        [self drainLoop];
        return;
      }
    }
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimplePlainQueue> q = [((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner)) getQueue];
    if (![((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) offerWithId:value]) {
      if ([inner cancel]) {
        [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue full?!")];
        [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) decrementAndGet];
      }
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) decrementAndGet];
  [self drain];
}

- (void)onComplete {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) decrementAndGet];
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  [self drainLoop];
}

- (void)drainLoop {
  jint missed = 1;
  IOSObjectArray *s = self->subscribers_;
  jint n = ((IOSObjectArray *) nil_chk(s))->size_;
  id<OrgReactivestreamsSubscriber> a = self->actual_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self cleanup];
        return;
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) get] == 0;
      jboolean empty = true;
      for (jint i = 0; i < n; i++) {
        IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *inner = IOSObjectArray_Get(s, i);
        id<IoReactivexInternalFuseableSimplePlainQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner))->queue_);
        if (q != nil) {
          id v = [q poll];
          if (v != nil) {
            empty = false;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
            [inner requestOne];
            if (++e == r) {
              goto break_middle;
            }
          }
        }
      }
      if (d && empty) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
    }
    break_middle: ;
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [self cleanup];
        return;
      }
      jboolean d = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(done_)) get] == 0;
      jboolean empty = true;
      for (jint i = 0; i < n; i++) {
        IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *inner = IOSObjectArray_Get(s, i);
        id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&((IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *) nil_chk(inner))->queue_);
        if (q != nil && ![q isEmpty]) {
          empty = false;
          break;
        }
      }
      if (d && empty) {
        JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
        if (ex != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        return;
      }
    }
    if (e != 0 && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    jint w = [self get];
    if (w == missed) {
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withInt:);
  methods[1].selector = @selector(onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:withId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(drain);
  methods[5].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;II", "(Lorg/reactivestreams/Subscriber<-TT;>;II)V", "onNext", "LIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;LNSObject;", "(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber<TT;>;TT;)V", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsParallelParallelJoin;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError = { "JoinSubscriptionDelayError", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 6, 1, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError;
}

@end

void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_initWithOrgReactivestreamsSubscriber_withInt_withInt_(self, actual, n, prefetch);
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, n, prefetch)
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError, initWithOrgReactivestreamsSubscriber_withInt_withInt_, actual, n, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionDelayError)

@implementation IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase:(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *)parent
                                                                                      withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(self, parent, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *) nil_chk(parent_)) onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:self withId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *) nil_chk(parent_)) onComplete];
}

- (void)requestOne {
  jlong p = produced_ + 1;
  if (p == limit_) {
    produced_ = 0;
    [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
  }
  else {
    produced_ = p;
  }
}

- (void)requestWithLong:(jlong)n {
  jlong p = produced_ + n;
  if (p >= limit_) {
    produced_ = 0;
    [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
  }
  else {
    produced_ = p;
  }
}

- (jboolean)cancel {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (id<IoReactivexInternalFuseableSimplePlainQueue>)getQueue {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = JreLoadVolatileId(&queue_);
  if (q == nil) {
    q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_);
    JreVolatileStrongAssign(&self->queue_, q);
  }
  return q;
}

- (void)__javaClone:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(parent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexInternalFuseableSimplePlainQueue;", 0x0, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestOne);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(getQueue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimplePlainQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase;I", "(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase<TT;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "()Lio/reactivex/internal/fuseable/SimplePlainQueue<TT;>;", "Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase<TT;>;", "Lio/reactivex/internal/fuseable/SimplePlainQueue<TT;>;", "LIoReactivexInternalOperatorsParallelParallelJoin;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber = { "JoinInnerSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 9, 6, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *self, IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_, parent, prefetch)
}

IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase *parent, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscriptionBase_withInt_, parent, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber)
