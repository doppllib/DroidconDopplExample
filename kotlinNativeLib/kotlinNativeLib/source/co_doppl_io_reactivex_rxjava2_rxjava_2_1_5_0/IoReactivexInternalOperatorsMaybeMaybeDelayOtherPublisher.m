//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"
#include "IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexMaybeSource.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_serialVersionUID -1215060610805418006LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other {
  IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(self, source, other);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  [((id<IoReactivexMaybeSource>) nil_chk(source_)) subscribeWithIoReactivexMaybeObserver:create_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_(observer, other_)];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LOrgReactivestreamsPublisher;", "(Lio/reactivex/MaybeSource<TT;>;Lorg/reactivestreams/Publisher<TU;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "Lorg/reactivestreams/Publisher<TU;>;", "LIoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver;LIoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher = { "MaybeDelayOtherPublisher", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher *self, id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream_initWithIoReactivexMaybeSource_(self, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher *new_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher, initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_, source, other)
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher *create_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher, initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                 withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)otherSource {
  IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_(self, actual, otherSource);
  return self;
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(other_);
}

- (jboolean)isDisposed {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_isCancelledWithOrgReactivestreamsSubscription_([((IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *) nil_chk(other_)) get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<IoReactivexMaybeObserver>) nil_chk(((IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *) nil_chk(other_))->actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  JreStrongAssign(&((IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *) nil_chk(other_))->value_OtherSubscriber_, value);
  [self subscribeNext];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  JreStrongAssign(&((IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *) nil_chk(other_))->error_, e);
  [self subscribeNext];
}

- (void)onComplete {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  [self subscribeNext];
}

- (void)subscribeNext {
  [((id<OrgReactivestreamsPublisher>) nil_chk(otherSource_)) subscribeWithOrgReactivestreamsSubscriber:other_];
}

- (void)dealloc {
  RELEASE_(other_);
  RELEASE_(otherSource_);
  RELEASE_(d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(subscribeNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LIoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "otherSource_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;LOrgReactivestreamsPublisher;", "(Lio/reactivex/MaybeObserver<-TT;>;Lorg/reactivestreams/Publisher<TU;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$OtherSubscriber<TT;>;", "Lorg/reactivestreams/Publisher<TU;>;", "LIoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver = { "DelayMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 8, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver *self, id<IoReactivexMaybeObserver> actual, id<OrgReactivestreamsPublisher> otherSource) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->other_, new_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_(actual));
  JreStrongAssign(&self->otherSource_, otherSource);
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeObserver> actual, id<OrgReactivestreamsPublisher> otherSource) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver, initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_, actual, otherSource)
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeObserver> actual, id<OrgReactivestreamsPublisher> otherSource) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver, initWithIoReactivexMaybeObserver_withOrgReactivestreamsPublisher_, actual, otherSource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_DelayMaybeObserver)

@implementation IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual {
  IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  id<OrgReactivestreamsSubscription> s = [self get];
  if (s != JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
    [self lazySetWithId:JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    [self onComplete];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JavaLangThrowable *e = error_;
  if (e == nil) {
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
  else {
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ e, t } count:2 type:JavaLangThrowable_class_()])];
  }
}

- (void)onComplete {
  JavaLangThrowable *e = error_;
  if (e != nil) {
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  }
  else {
    id v = value_OtherSubscriber_;
    if (v != nil) {
      [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:v];
    }
    else {
      [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(value_OtherSubscriber_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "value_OtherSubscriber_", "LNSObject;", .constantValue.asLong = 0, 0x0, 9, -1, 10, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TT;>;", "value", "TT;", "LIoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber = { "OtherSubscriber", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 5, 4, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *self, id<IoReactivexMaybeObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *new_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber, initWithIoReactivexMaybeObserver_, actual)
}

IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber *create_IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber, initWithIoReactivexMaybeObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeDelayOtherPublisher_OtherSubscriber)
