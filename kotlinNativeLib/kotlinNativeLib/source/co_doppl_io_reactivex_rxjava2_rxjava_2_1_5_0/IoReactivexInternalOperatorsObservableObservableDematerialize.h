//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableDematerialize
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableDematerialize

#if !defined (IoReactivexInternalOperatorsObservableObservableDematerialize_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableDematerialize))
#define IoReactivexInternalOperatorsObservableObservableDematerialize_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableDematerialize : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableDematerialize)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableDematerialize_initWithIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableDematerialize *self, id<IoReactivexObservableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDematerialize *new_IoReactivexInternalOperatorsObservableObservableDematerialize_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDematerialize *create_IoReactivexInternalOperatorsObservableObservableDematerialize_initWithIoReactivexObservableSource_(id<IoReactivexObservableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableDematerialize)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver))
#define IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexNotification;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jboolean done_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(IoReactivexNotification *)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver *self, id<IoReactivexObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver *new_IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver *create_IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableDematerialize_DematerializeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableDematerialize")
