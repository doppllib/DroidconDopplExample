//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

#define RESTRICT_IoReactivexInternalFuseableHasUpstreamMaybeSource 1
#define INCLUDE_IoReactivexInternalFuseableHasUpstreamMaybeSource 1
#include "IoReactivexInternalFuseableHasUpstreamMaybeSource.h"

@protocol IoReactivexMaybeSource;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle : IoReactivexSingle < IoReactivexInternalFuseableHasUpstreamMaybeSource > {
 @public
  id<IoReactivexMaybeSource> source_;
  id<IoReactivexSingleSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                   withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

- (id<IoReactivexMaybeSource>)source;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle, source_, id<IoReactivexMaybeSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle, other_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *self, id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_initWithIoReactivexMaybeSource_withIoReactivexSingleSource_(id<IoReactivexMaybeSource> source, id<IoReactivexSingleSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<IoReactivexSingleSource> other_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                      withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver, other_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver : NSObject < IoReactivexSingleObserver > {
 @public
  id<IoReactivexSingleObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *parent_;
}

#pragma mark Public

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
      withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver, parent_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *self, id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver_initWithIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexSingleObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle_SwitchIfEmptyMaybeObserver_OtherSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmptySingle")
