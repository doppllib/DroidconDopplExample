//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsObservableObservableElementAt.h"
#include "IoReactivexInternalOperatorsObservableObservableElementAtMaybe.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableElementAtMaybe

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)index {
  IoReactivexInternalOperatorsObservableObservableElementAtMaybe_initWithIoReactivexObservableSource_withLong_(self, source, index);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver_initWithIoReactivexMaybeObserver_withLong_(t, index_)];
}

- (IoReactivexObservable *)fuseToObservable {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(create_IoReactivexInternalOperatorsObservableObservableElementAt_initWithIoReactivexObservableSource_withLong_withId_withBoolean_(source_, index_, nil, false));
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  methods[2].selector = @selector(fuseToObservable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;J", "(Lio/reactivex/ObservableSource<TT;>;J)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "()Lio/reactivex/Observable<TT;>;", "Lio/reactivex/ObservableSource<TT;>;", "LIoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;Lio/reactivex/internal/fuseable/FuseToObservable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableElementAtMaybe = { "ObservableElementAtMaybe", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableElementAtMaybe;
}

@end

void IoReactivexInternalOperatorsObservableObservableElementAtMaybe_initWithIoReactivexObservableSource_withLong_(IoReactivexInternalOperatorsObservableObservableElementAtMaybe *self, id<IoReactivexObservableSource> source, jlong index) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->source_, source);
  self->index_ = index;
}

IoReactivexInternalOperatorsObservableObservableElementAtMaybe *new_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableElementAtMaybe, initWithIoReactivexObservableSource_withLong_, source, index)
}

IoReactivexInternalOperatorsObservableObservableElementAtMaybe *create_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_initWithIoReactivexObservableSource_withLong_(id<IoReactivexObservableSource> source, jlong index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableElementAtMaybe, initWithIoReactivexObservableSource_withLong_, source, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableElementAtMaybe)

@implementation IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                                        withLong:(jlong)index {
  IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver_initWithIoReactivexMaybeObserver_withLong_(self, actual, index);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  jlong c = count_;
  if (c == index_) {
    done_ = true;
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:t];
    return;
  }
  count_ = c + 1;
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:withLong:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;J", "(Lio/reactivex/MaybeObserver<-TT;>;J)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/MaybeObserver<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableElementAtMaybe;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver = { "ElementAtObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 5, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver_initWithIoReactivexMaybeObserver_withLong_(IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver *self, id<IoReactivexMaybeObserver> actual, jlong index) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->index_ = index;
}

IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver *new_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver_initWithIoReactivexMaybeObserver_withLong_(id<IoReactivexMaybeObserver> actual, jlong index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver, initWithIoReactivexMaybeObserver_withLong_, actual, index)
}

IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver *create_IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver_initWithIoReactivexMaybeObserver_withLong_(id<IoReactivexMaybeObserver> actual, jlong index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver, initWithIoReactivexMaybeObserver_withLong_, actual, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableElementAtMaybe_ElementAtObserver)
