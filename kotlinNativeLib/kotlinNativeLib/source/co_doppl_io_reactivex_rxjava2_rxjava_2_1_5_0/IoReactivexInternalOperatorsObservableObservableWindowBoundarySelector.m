//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalObserversQueueDrainObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversDisposableObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubjectsUnicastSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)open
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(self, source, open, close, bufferSize);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), open_, close_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(open_);
  RELEASE_(close_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "open_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "close_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;I", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<TB;>;Lio/reactivex/functions/Function<-TB;+Lio/reactivex/ObservableSource<TV;>;>;I)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;)V", "Lio/reactivex/ObservableSource<TB;>;", "Lio/reactivex/functions/Function<-TB;+Lio/reactivex/ObservableSource<TV;>;>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation;LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver;LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;Lio/reactivex/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector = { "ObservableWindowBoundarySelector", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->open_, open);
  JreStrongAssign(&self->close_, close);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_, source, open, close, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector, initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_, source, open, close, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector)

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)open
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(self, actual, open, close, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *os = create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(self);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:nil withId:os]) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
      [((id<IoReactivexObservableSource>) nil_chk(open_)) subscribeWithIoReactivexObserver:os];
    }
  }
}

- (void)onNextWithId:(id)t {
  if ([self fastEnter]) {
    for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws_)) {
      [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:t];
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  [self onErrorWithJavaLangThrowable:t];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)disposeBoundary {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) dispose];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
}

- (void)drainLoop {
  IoReactivexInternalQueueMpscLinkedQueue *q = (IoReactivexInternalQueueMpscLinkedQueue *) cast_chk(queue_, [IoReactivexInternalQueueMpscLinkedQueue class]);
  id<IoReactivexObserver> a = actual_;
  id<JavaUtilList> ws = self->ws_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) poll];
      jboolean empty = o == nil;
      if (d && empty) {
        [self disposeBoundary];
        JavaLangThrowable *e = error_;
        if (e != nil) {
          for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
            [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
          }
        }
        else {
          for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
            [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
          }
        }
        [ws clear];
        return;
      }
      if (empty) {
        break;
      }
      if ([o isKindOfClass:[IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation class]]) {
        IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *wo = (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *) cast_chk(o, [IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation class]);
        IoReactivexSubjectsUnicastSubject *w = ((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *) nil_chk(wo))->w_;
        if (w != nil) {
          if ([((id<JavaUtilList>) nil_chk(ws)) removeWithId:wo->w_]) {
            [((IoReactivexSubjectsUnicastSubject *) nil_chk(wo->w_)) onComplete];
            if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
              [self disposeBoundary];
              return;
            }
          }
          continue;
        }
        if (JreLoadVolatileBoolean(&cancelled_)) {
          continue;
        }
        w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
        [((id<JavaUtilList>) nil_chk(ws)) addWithId:w];
        [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
        id<IoReactivexObservableSource> p;
        @try {
          p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(close_)) applyWithId:wo->open_], @"The ObservableSource supplied is null");
        }
        @catch (JavaLangThrowable *e) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
          JreAssignVolatileBoolean(&cancelled_, true);
          [a onErrorWithJavaLangThrowable:e];
          continue;
        }
        IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *cl = create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(self, w);
        if ([((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:cl]) {
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
          [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:cl];
        }
        continue;
      }
      for (IoReactivexSubjectsUnicastSubject * __strong w in nil_chk(ws)) {
        [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id)v {
}

- (void)openWithId:(id)b {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(nil, b)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)closeWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *)w {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(resources_)) delete__WithIoReactivexDisposablesDisposable:w];
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *) nil_chk(w))->w_, nil)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(open_);
  RELEASE_(close_);
  RELEASE_(resources_);
  RELEASE_(s_);
  RELEASE_(boundary_);
  RELEASE_(ws_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 5, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:withIoReactivexFunctionsFunction:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(errorWithJavaLangThrowable:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(disposeBoundary);
  methods[9].selector = @selector(drainLoop);
  methods[10].selector = @selector(acceptWithIoReactivexObserver:withId:);
  methods[11].selector = @selector(openWithId:);
  methods[12].selector = @selector(closeWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "open_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "close_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resources_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "boundary_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "ws_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;LIoReactivexFunctionsFunction;I", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;Lio/reactivex/ObservableSource<TB;>;Lio/reactivex/functions/Function<-TB;+Lio/reactivex/ObservableSource<TV;>;>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "error", "accept", "LIoReactivexObserver;LNSObject;", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;Ljava/lang/Object;)V", "open", "(TB;)V", "close", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver;", "(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$OperatorWindowBoundaryCloseObserver<TT;TV;>;)V", "Lio/reactivex/ObservableSource<TB;>;", "Lio/reactivex/functions/Function<-TB;+Lio/reactivex/ObservableSource<TV;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Ljava/util/List<Lio/reactivex/subjects/UnicastSubject<TT;>;>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;Ljava/lang/Object;Lio/reactivex/Observable<TT;>;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver = { "WindowBoundaryMainObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 13, 8, 22, -1, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->boundary_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->open_, open);
  JreStrongAssign(&self->close_, close);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->ws_, new_JavaUtilArrayList_init());
  [self->windows_ lazySetWithLong:1];
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_, actual, open, close, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_, actual, open, close, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w
                                                   withId:(id)open {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(self, w, open);
  return self;
}

- (void)dealloc {
  RELEASE_(w_);
  RELEASE_(open_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSubjectsUnicastSubject:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "open_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSubjectsUnicastSubject;LNSObject;", "(Lio/reactivex/subjects/UnicastSubject<TT;>;TB;)V", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "TB;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation = { "WindowOperation", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 1, 2, 4, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *self, IoReactivexSubjectsUnicastSubject *w, id open) {
  NSObject_init(self);
  JreStrongAssign(&self->w_, w);
  JreStrongAssign(&self->open_, open);
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexSubjectsUnicastSubject *w, id open) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation, initWithIoReactivexSubjectsUnicastSubject_withId_, w, open)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexSubjectsUnicastSubject *w, id open) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation, initWithIoReactivexSubjectsUnicastSubject_withId_, w, open)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation)

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) openWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) onComplete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;", "(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver<TT;TB;*>;)V", "onNext", "LNSObject;", "(TB;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver<TT;TB;*>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<TB;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver = { "OperatorWindowBoundaryOpenObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 1, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *self, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_, parent)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)parent
                                                                                    withIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(self, parent, w);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) closeWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver:self];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) errorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *) nil_chk(parent_)) closeWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver:self];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:withIoReactivexSubjectsUnicastSubject:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "w_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;LIoReactivexSubjectsUnicastSubject;", "(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver<TT;*TV;>;Lio/reactivex/subjects/UnicastSubject<TT;>;)V", "onNext", "LNSObject;", "(TV;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$WindowBoundaryMainObserver<TT;*TV;>;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<TV;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver = { "OperatorWindowBoundaryCloseObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *self, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->w_, w);
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_, parent, w)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_, parent, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver)
