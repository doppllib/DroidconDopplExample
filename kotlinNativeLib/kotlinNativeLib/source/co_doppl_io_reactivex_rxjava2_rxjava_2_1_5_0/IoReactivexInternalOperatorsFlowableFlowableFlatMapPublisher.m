//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexFlowableSubscriber.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMap.h"
#include "IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher.h"
#include "IoReactivexInternalOperatorsFlowableFlowableScalarXMap.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, source, mapper, delayErrors, maxConcurrency, bufferSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(source_, s, mapper_)) {
    return;
  }
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:IoReactivexInternalOperatorsFlowableFlowableFlatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(s, mapper_, delayErrors_, maxConcurrency_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxConcurrency_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;LIoReactivexFunctionsFunction;ZII", "(Lorg/reactivestreams/Publisher<TT;>;Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;ZII)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Lorg/reactivestreams/Publisher<TT;>;", "Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TU;>;>;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Flowable<TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher = { "FlowableFlatMapPublisher", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
  self->delayErrors_ = delayErrors;
  self->maxConcurrency_ = maxConcurrency;
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher, initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher, initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_, source, mapper, delayErrors, maxConcurrency, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableFlatMapPublisher)
