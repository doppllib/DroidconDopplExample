//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalSubscribersFutureSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@implementation IoReactivexInternalSubscribersFutureSubscriber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSubscribersFutureSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  for (; ; ) {
    id<OrgReactivestreamsSubscription> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get];
    if (a == self || a == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      return false;
    }
    if ([s_ compareAndSetWithId:a withId:JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)]) {
      if (a != nil) {
        [a cancel];
      }
      [self countDown];
      return true;
    }
  }
}

- (jboolean)isCancelled {
  return IoReactivexInternalSubscriptionsSubscriptionHelper_isCancelledWithOrgReactivestreamsSubscription_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get]);
}

- (jboolean)isDone {
  return [self getCount] == 0;
}

- (id)get {
  if ([self getCount] != 0) {
    IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
    [self await];
  }
  if ([self isCancelled]) {
    @throw create_JavaUtilConcurrentCancellationException_init();
  }
  JavaLangThrowable *ex = error_;
  if (ex != nil) {
    @throw create_JavaUtilConcurrentExecutionException_initWithJavaLangThrowable_(ex);
  }
  return value_;
}

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([self getCount] != 0) {
    IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
    if (![self awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
      @throw create_JavaUtilConcurrentTimeoutException_init();
    }
  }
  if ([self isCancelled]) {
    @throw create_JavaUtilConcurrentCancellationException_init();
  }
  JavaLangThrowable *ex = error_;
  if (ex != nil) {
    @throw create_JavaUtilConcurrentExecutionException_initWithJavaLangThrowable_(ex);
  }
  return value_;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self->s_, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (value_ != nil) {
    [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) cancel];
    [self onErrorWithJavaLangThrowable:create_JavaLangIndexOutOfBoundsException_initWithNSString_(@"More than one element received")];
    return;
  }
  JreStrongAssign(&value_, t);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  for (; ; ) {
    id<OrgReactivestreamsSubscription> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get];
    if (a == self || a == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
      return;
    }
    JreStrongAssign(&error_, t);
    if ([s_ compareAndSetWithId:a withId:self]) {
      [self countDown];
      return;
    }
  }
}

- (void)onComplete {
  if (value_ == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaUtilNoSuchElementException_initWithNSString_(@"The source is empty")];
    return;
  }
  for (; ; ) {
    id<OrgReactivestreamsSubscription> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get];
    if (a == self || a == JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED)) {
      return;
    }
    if ([s_ compareAndSetWithId:a withId:self]) {
      [self countDown];
      return;
    }
  }
}

- (void)cancel {
}

- (void)requestWithLong:(jlong)n {
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(error_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cancelWithBoolean:);
  methods[2].selector = @selector(isCancelled);
  methods[3].selector = @selector(isDone);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(getWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[6].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[7].selector = @selector(onNextWithId:);
  methods[8].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[9].selector = @selector(onComplete);
  methods[10].selector = @selector(cancel);
  methods[11].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "cancel", "Z", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "()TT;", "get", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "(JLjava/util/concurrent/TimeUnit;)TT;", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "TT;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/CountDownLatch;Lio/reactivex/FlowableSubscriber<TT;>;Ljava/util/concurrent/Future<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscribersFutureSubscriber = { "FutureSubscriber", "io.reactivex.internal.subscribers", ptrTable, methods, fields, 7, 0x11, 12, 3, -1, -1, -1, 19, -1 };
  return &_IoReactivexInternalSubscribersFutureSubscriber;
}

@end

void IoReactivexInternalSubscribersFutureSubscriber_init(IoReactivexInternalSubscribersFutureSubscriber *self) {
  JavaUtilConcurrentCountDownLatch_initWithInt_(self, 1);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexInternalSubscribersFutureSubscriber *new_IoReactivexInternalSubscribersFutureSubscriber_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalSubscribersFutureSubscriber, init)
}

IoReactivexInternalSubscribersFutureSubscriber *create_IoReactivexInternalSubscribersFutureSubscriber_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalSubscribersFutureSubscriber, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscribersFutureSubscriber)
