//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(self, source, other);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver *parent = create_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(t, other_);
  [((id<IoReactivexObserver>) nil_chk(t)) onSubscribeWithIoReactivexDisposablesDisposable:parent->arbiter_];
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:parent];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexObservableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/ObservableSource<+TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/ObservableSource<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty = { "ObservableSwitchIfEmpty", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty;
}

@end

void IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty *new_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty, initWithIoReactivexObservableSource_withIoReactivexObservableSource_, source, other)
}

IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty *create_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty, initWithIoReactivexObservableSource_withIoReactivexObservableSource_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty)

@implementation IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(self, actual, other);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(arbiter_)) updateWithIoReactivexDisposablesDisposable:s];
}

- (void)onNextWithId:(id)t {
  if (empty_) {
    empty_ = false;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (empty_) {
    empty_ = false;
    [((id<IoReactivexObservableSource>) nil_chk(other_)) subscribeWithIoReactivexObserver:self];
  }
  else {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(other_);
  RELEASE_(arbiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexObservableSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "arbiter_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "empty_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/ObservableSource<+TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/ObservableSource<+TT;>;", "LIoReactivexInternalOperatorsObservableObservableSwitchIfEmpty;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver = { "SwitchIfEmptyObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 5, 4, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->other_, other);
  self->empty_ = true;
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
}

IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver *new_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver *create_IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver, initWithIoReactivexObserver_withIoReactivexObservableSource_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSwitchIfEmpty_SwitchIfEmptyObserver)
