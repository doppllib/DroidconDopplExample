//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesObserverFullArbiter.h"
#include "IoReactivexInternalObserversFullArbiterObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableTimeoutTimed.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_serialVersionUID -4619702551964128179LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext () {
 @public
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *this$0_;
  jlong idx_;
}

@end

inline jlong IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_serialVersionUID -8387234228317808253LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask () {
 @public
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *this$0_;
  jlong idx_;
}

@end

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableTimeoutTimed)

id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsObservableObservableTimeoutTimed_NEW_TIMER;

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed

+ (id<IoReactivexDisposablesDisposable>)NEW_TIMER {
  return IoReactivexInternalOperatorsObservableObservableTimeoutTimed_NEW_TIMER;
}

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  if (other_ == nil) {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), timeout_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker])];
  }
  else {
    [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(t, timeout_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker], other_)];
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withIoReactivexObservableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "NEW_TIMER", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LIoReactivexObservableSource;", "(Lio/reactivex/ObservableSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/ObservableSource<+TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/ObservableSource<+TT;>;", &IoReactivexInternalOperatorsObservableObservableTimeoutTimed_NEW_TIMER, "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver;LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver;LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed = { "ObservableTimeoutTimed", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableTimeoutTimed class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableTimeoutTimed_NEW_TIMER, new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableTimeoutTimed)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed *self, id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed)

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(self, actual, timeout, unit, worker, other);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) setDisposableWithIoReactivexDisposablesDisposable:s]) {
      [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:arbiter_];
      [self scheduleTimeoutWithLong:0LL];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  if ([((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onNextWithId:t withIoReactivexDisposablesDisposable:s_]) {
    [self scheduleTimeoutWithLong:idx];
  }
}

- (void)scheduleTimeoutWithLong:(jlong)idx {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != nil) {
    [d dispose];
  }
  if ([self compareAndSetWithId:d withId:JreLoadStatic(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, NEW_TIMER)]) {
    d = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_(self, idx) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
    IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
  }
}

- (void)subscribeNext {
  [((id<IoReactivexObservableSource>) nil_chk(other_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalObserversFullArbiterObserver_initWithIoReactivexInternalDisposablesObserverFullArbiter_(arbiter_)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onErrorWithJavaLangThrowable:t withIoReactivexDisposablesDisposable:s_];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalDisposablesObserverFullArbiter *) nil_chk(arbiter_)) onCompleteWithIoReactivexDisposablesDisposable:s_];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(worker_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(other_);
  RELEASE_(s_);
  RELEASE_(arbiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:withIoReactivexObservableSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(scheduleTimeoutWithLong:);
  methods[4].selector = @selector(subscribeNext);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexObservableSource;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arbiter_", "LIoReactivexInternalDisposablesObserverFullArbiter;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;LIoReactivexObservableSource;", "(Lio/reactivex/Observer<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lio/reactivex/ObservableSource<+TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "scheduleTimeout", "J", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/ObservableSource<+TT;>;", "Lio/reactivex/internal/disposables/ObserverFullArbiter<TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver = { "TimeoutTimedOtherObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 10, 14, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
  JreStrongAssign(&self->other_, other);
  JreStrongAssignAndConsume(&self->arbiter_, new_IoReactivexInternalDisposablesObserverFullArbiter_initWithIoReactivexObserver_withIoReactivexDisposablesDisposable_withInt_(actual, self, 8));
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_, actual, timeout, unit, worker, other)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_, actual, timeout, unit, worker, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver)

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver:(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *)outer$
                                                                                                      withLong:(jlong)idx {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_(self, outer$, idx);
  return self;
}

- (void)run {
  if (idx_ == JreLoadVolatileLong(&this$0_->index_)) {
    JreAssignVolatileBoolean(&this$0_->done_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(this$0_->s_)) dispose];
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(this$0_);
    [this$0_ subscribeNext];
    [((IoReactivexScheduler_Worker *) nil_chk(this$0_->worker_)) dispose];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "idx_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutTimedOtherObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext = { "SubscribeNext", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext *self, IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *outer$, jlong idx) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->idx_ = idx;
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *outer$, jlong idx) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext, initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_, outer$, idx)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *outer$, jlong idx) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext, initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_withLong_, outer$, idx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_SubscribeNext)

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(self, actual, timeout, unit, worker);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    [self scheduleTimeoutWithLong:0LL];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jlong idx = JreLoadVolatileLong(&index_) + 1;
  JreAssignVolatileLong(&index_, idx);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  [self scheduleTimeoutWithLong:idx];
}

- (void)scheduleTimeoutWithLong:(jlong)idx {
  id<IoReactivexDisposablesDisposable> d = [self get];
  if (d != nil) {
    [d dispose];
  }
  if ([self compareAndSetWithId:d withId:JreLoadStatic(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, NEW_TIMER)]) {
    d = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_(self, idx) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
    IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self dispose];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  [self dispose];
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(worker_)) isDisposed];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(scheduleTimeoutWithLong:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;", "(Lio/reactivex/Observer<-TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "scheduleTimeout", "J", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver = { "TimeoutTimedObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 8, 12, 13, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, timeout, unit, worker)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver)

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver:(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *)outer$
                                                                                                 withLong:(jlong)idx {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_(self, outer$, idx);
  return self;
}

- (void)run {
  if (idx_ == JreLoadVolatileLong(&this$0_->index_)) {
    JreAssignVolatileBoolean(&this$0_->done_, true);
    [((id<IoReactivexDisposablesDisposable>) nil_chk(this$0_->s_)) dispose];
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(this$0_);
    [((id<IoReactivexObserver>) nil_chk(this$0_->actual_)) onErrorWithJavaLangThrowable:create_JavaUtilConcurrentTimeoutException_init()];
    [((IoReactivexScheduler_Worker *) nil_chk(this$0_->worker_)) dispose];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "idx_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutTimedObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask = { "TimeoutTask", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask *self, IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *outer$, jlong idx) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->idx_ = idx;
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *outer$, jlong idx) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask, initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_, outer$, idx)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask_initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *outer$, jlong idx) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask, initWithIoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_withLong_, outer$, idx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_TimeoutTask)

@implementation IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dispose {
}

- (jboolean)isDisposed {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableTimeoutTimed;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable = { "EmptyDisposable", "io.reactivex.internal.operators.observable", ptrTable, methods, NULL, 7, 0x18, 3, 0, 0, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable;
}

@end

void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable_init(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable *self) {
  NSObject_init(self);
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable, init)
}

IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_EmptyDisposable)
