//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableJoin
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableJoin

#if !defined (IoReactivexInternalOperatorsFlowableFlowableJoin_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableJoin))
#define IoReactivexInternalOperatorsFlowableFlowableJoin_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableJoin : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<OrgReactivestreamsPublisher> other_;
  id<IoReactivexFunctionsFunction> leftEnd_;
  id<IoReactivexFunctionsFunction> rightEnd_;
  id<IoReactivexFunctionsBiFunction> resultSelector_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableJoin)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin, other_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin, leftEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin, rightEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin, resultSelector_, id<IoReactivexFunctionsBiFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableJoin_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableJoin *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableJoin *new_IoReactivexInternalOperatorsFlowableFlowableJoin_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableJoin *create_IoReactivexInternalOperatorsFlowableFlowableJoin_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableJoin)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription))
#define IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

#define RESTRICT_IoReactivexInternalOperatorsFlowableFlowableGroupJoin 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableGroupJoin_JoinSupport 1
#include "IoReactivexInternalOperatorsFlowableFlowableGroupJoin.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightEndSubscriber;
@class IoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightSubscriber;
@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class JavaLangInteger;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol JavaUtilMap;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription, IoReactivexInternalOperatorsFlowableFlowableGroupJoin_JoinSupport > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  IoReactivexDisposablesCompositeDisposable *disposables_;
  id<JavaUtilMap> lefts_;
  id<JavaUtilMap> rights_;
  JavaUtilConcurrentAtomicAtomicReference *error_;
  id<IoReactivexFunctionsFunction> leftEnd_;
  id<IoReactivexFunctionsFunction> rightEnd_;
  id<IoReactivexFunctionsBiFunction> resultSelector_;
  JavaUtilConcurrentAtomicAtomicInteger *active_;
  jint leftIndex_;
  jint rightIndex_;
  volatile_jboolean cancelled_;
}

+ (JavaLangInteger *)LEFT_VALUE;

+ (JavaLangInteger *)RIGHT_VALUE;

+ (JavaLangInteger *)LEFT_CLOSE;

+ (JavaLangInteger *)RIGHT_CLOSE;

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (void)innerCloseWithBoolean:(jboolean)isLeft
withIoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightEndSubscriber:(IoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightEndSubscriber *)index;

- (void)innerCloseErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightSubscriber:(IoReactivexInternalOperatorsFlowableFlowableGroupJoin_LeftRightSubscriber *)sender;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerValueWithBoolean:(jboolean)isLeft
                       withId:(id)o;

- (jboolean)isEqual:(id)obj;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

- (void)cancelAll;

- (void)drain;

- (void)errorAllWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a;

- (void)failWithJavaLangThrowable:(JavaLangThrowable *)exc
 withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, disposables_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, lefts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, rights_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, leftEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, rightEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, resultSelector_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, active_, JavaUtilConcurrentAtomicAtomicInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_get_LEFT_VALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_LEFT_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, LEFT_VALUE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_get_RIGHT_VALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_RIGHT_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, RIGHT_VALUE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_get_LEFT_CLOSE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_LEFT_CLOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, LEFT_CLOSE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_get_RIGHT_CLOSE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_RIGHT_CLOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription, RIGHT_CLOSE, JavaLangInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription *new_IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription *create_IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableJoin_JoinSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableJoin")
