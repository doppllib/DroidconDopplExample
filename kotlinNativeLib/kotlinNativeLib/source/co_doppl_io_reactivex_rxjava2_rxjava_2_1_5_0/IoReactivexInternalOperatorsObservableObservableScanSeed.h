//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableScanSeed
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableScanSeed

#if !defined (IoReactivexInternalOperatorsObservableObservableScanSeed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableScanSeed))
#define IoReactivexInternalOperatorsObservableObservableScanSeed_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableScanSeed : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsBiFunction> accumulator_;
  id<JavaUtilConcurrentCallable> seedSupplier_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)seedSupplier
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableScanSeed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed, accumulator_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed, seedSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsObservableObservableScanSeed *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableScanSeed *new_IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableScanSeed *create_IoReactivexInternalOperatorsObservableObservableScanSeed_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> seedSupplier, id<IoReactivexFunctionsBiFunction> accumulator);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableScanSeed)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver))
#define IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsBiFunction;

@interface IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsBiFunction> accumulator_;
  id value_;
  id<IoReactivexDisposablesDisposable> s_;
  jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator
                                     withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, accumulator_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *new_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver *create_IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver_initWithIoReactivexObserver_withIoReactivexFunctionsBiFunction_withId_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsBiFunction> accumulator, id value);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableScanSeed_ScanSeedObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableScanSeed")
