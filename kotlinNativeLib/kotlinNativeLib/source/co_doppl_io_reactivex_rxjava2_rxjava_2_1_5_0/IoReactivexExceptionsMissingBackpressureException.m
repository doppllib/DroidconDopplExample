//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"

inline jlong IoReactivexExceptionsMissingBackpressureException_get_serialVersionUID();
#define IoReactivexExceptionsMissingBackpressureException_serialVersionUID 8517344746016032542LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexExceptionsMissingBackpressureException, serialVersionUID, jlong)

@implementation IoReactivexExceptionsMissingBackpressureException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexExceptionsMissingBackpressureException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)message {
  IoReactivexExceptionsMissingBackpressureException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexExceptionsMissingBackpressureException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsMissingBackpressureException = { "MissingBackpressureException", "io.reactivex.exceptions", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexExceptionsMissingBackpressureException;
}

@end

void IoReactivexExceptionsMissingBackpressureException_init(IoReactivexExceptionsMissingBackpressureException *self) {
  JavaLangRuntimeException_init(self);
}

IoReactivexExceptionsMissingBackpressureException *new_IoReactivexExceptionsMissingBackpressureException_init() {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsMissingBackpressureException, init)
}

IoReactivexExceptionsMissingBackpressureException *create_IoReactivexExceptionsMissingBackpressureException_init() {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsMissingBackpressureException, init)
}

void IoReactivexExceptionsMissingBackpressureException_initWithNSString_(IoReactivexExceptionsMissingBackpressureException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

IoReactivexExceptionsMissingBackpressureException *new_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsMissingBackpressureException, initWithNSString_, message)
}

IoReactivexExceptionsMissingBackpressureException *create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsMissingBackpressureException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsMissingBackpressureException)
