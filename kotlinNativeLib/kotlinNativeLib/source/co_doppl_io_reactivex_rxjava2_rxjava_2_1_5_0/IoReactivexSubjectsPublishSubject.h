//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsPublishSubject")
#ifdef RESTRICT_IoReactivexSubjectsPublishSubject
#define INCLUDE_ALL_IoReactivexSubjectsPublishSubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsPublishSubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsPublishSubject

#if !defined (IoReactivexSubjectsPublishSubject_) && (INCLUDE_ALL_IoReactivexSubjectsPublishSubject || defined(INCLUDE_IoReactivexSubjectsPublishSubject))
#define IoReactivexSubjectsPublishSubject_

#define RESTRICT_IoReactivexSubjectsSubject 1
#define INCLUDE_IoReactivexSubjectsSubject 1
#include "IoReactivexSubjectsSubject.h"

@class IOSObjectArray;
@class IoReactivexSubjectsPublishSubject_PublishDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsPublishSubject : IoReactivexSubjectsSubject {
 @public
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaLangThrowable *error_;
}

+ (IOSObjectArray *)TERMINATED;

+ (IOSObjectArray *)EMPTY;

#pragma mark Public

+ (IoReactivexSubjectsPublishSubject *)create;

- (JavaLangThrowable *)getThrowable;

- (jboolean)hasComplete;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)addWithIoReactivexSubjectsPublishSubject_PublishDisposable:(IoReactivexSubjectsPublishSubject_PublishDisposable *)ps;

- (void)removeWithIoReactivexSubjectsPublishSubject_PublishDisposable:(IoReactivexSubjectsPublishSubject_PublishDisposable *)ps;

@end

J2OBJC_STATIC_INIT(IoReactivexSubjectsPublishSubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsPublishSubject, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsPublishSubject, error_, JavaLangThrowable *)

inline IOSObjectArray *IoReactivexSubjectsPublishSubject_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsPublishSubject_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsPublishSubject, TERMINATED, IOSObjectArray *)

inline IOSObjectArray *IoReactivexSubjectsPublishSubject_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsPublishSubject_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsPublishSubject, EMPTY, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexSubjectsPublishSubject *IoReactivexSubjectsPublishSubject_create();

FOUNDATION_EXPORT void IoReactivexSubjectsPublishSubject_init(IoReactivexSubjectsPublishSubject *self);

FOUNDATION_EXPORT IoReactivexSubjectsPublishSubject *new_IoReactivexSubjectsPublishSubject_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsPublishSubject *create_IoReactivexSubjectsPublishSubject_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsPublishSubject)

#endif

#if !defined (IoReactivexSubjectsPublishSubject_PublishDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsPublishSubject || defined(INCLUDE_IoReactivexSubjectsPublishSubject_PublishDisposable))
#define IoReactivexSubjectsPublishSubject_PublishDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexSubjectsPublishSubject;
@class JavaLangThrowable;
@protocol IoReactivexObserver;

@interface IoReactivexSubjectsPublishSubject_PublishDisposable : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexSubjectsPublishSubject *parent_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
      withIoReactivexSubjectsPublishSubject:(IoReactivexSubjectsPublishSubject *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsPublishSubject_PublishDisposable)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsPublishSubject_PublishDisposable, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsPublishSubject_PublishDisposable, parent_, IoReactivexSubjectsPublishSubject *)

FOUNDATION_EXPORT void IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(IoReactivexSubjectsPublishSubject_PublishDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent);

FOUNDATION_EXPORT IoReactivexSubjectsPublishSubject_PublishDisposable *new_IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsPublishSubject_PublishDisposable *create_IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsPublishSubject_PublishDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsPublishSubject")
