//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeAmb
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeAmb

#if !defined (IoReactivexInternalOperatorsMaybeMaybeAmb_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeAmb))
#define IoReactivexInternalOperatorsMaybeMaybeAmb_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

@class IOSObjectArray;
@protocol IoReactivexMaybeObserver;
@protocol JavaLangIterable;

@interface IoReactivexInternalOperatorsMaybeMaybeAmb : IoReactivexMaybe

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources
                               withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeAmb)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IoReactivexInternalOperatorsMaybeMaybeAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeAmb *new_IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeAmb *create_IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeAmb)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  IoReactivexDisposablesCompositeDisposable *set_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver, set_, IoReactivexDisposablesCompositeDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *self, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeAmb")
