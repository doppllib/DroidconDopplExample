//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesArrayCompositeDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalDisposablesArrayCompositeDisposable_get_serialVersionUID();
#define IoReactivexInternalDisposablesArrayCompositeDisposable_serialVersionUID 2746389416410565408LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalDisposablesArrayCompositeDisposable, serialVersionUID, jlong)

@implementation IoReactivexInternalDisposablesArrayCompositeDisposable

- (instancetype)initWithInt:(jint)capacity {
  IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(self, capacity);
  return self;
}

- (jboolean)setResourceWithInt:(jint)index
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  for (; ; ) {
    id<IoReactivexDisposablesDisposable> o = [self getWithInt:index];
    if (o == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(resource)) dispose];
      return false;
    }
    if ([self compareAndSetWithInt:index withId:o withId:resource]) {
      if (o != nil) {
        [o dispose];
      }
      return true;
    }
  }
}

- (id<IoReactivexDisposablesDisposable>)replaceResourceWithInt:(jint)index
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  for (; ; ) {
    id<IoReactivexDisposablesDisposable> o = [self getWithInt:index];
    if (o == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      [((id<IoReactivexDisposablesDisposable>) nil_chk(resource)) dispose];
      return nil;
    }
    if ([self compareAndSetWithInt:index withId:o withId:resource]) {
      return o;
    }
  }
}

- (void)dispose {
  if ([self getWithInt:0] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    jint s = [self length];
    for (jint i = 0; i < s; i++) {
      id<IoReactivexDisposablesDisposable> o = [self getWithInt:i];
      if (o != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
        o = [self getAndSetWithInt:i withId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
        if (o != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED) && o != nil) {
          [o dispose];
        }
      }
    }
  }
}

- (jboolean)isDisposed {
  return [self getWithInt:0] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setResourceWithInt:withIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(replaceResourceWithInt:withIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalDisposablesArrayCompositeDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setResource", "ILIoReactivexDisposablesDisposable;", "replaceResource", "Ljava/util/concurrent/atomic/AtomicReferenceArray<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalDisposablesArrayCompositeDisposable = { "ArrayCompositeDisposable", "io.reactivex.internal.disposables", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, 4, -1 };
  return &_IoReactivexInternalDisposablesArrayCompositeDisposable;
}

@end

void IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(IoReactivexInternalDisposablesArrayCompositeDisposable *self, jint capacity) {
  JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(self, capacity);
}

IoReactivexInternalDisposablesArrayCompositeDisposable *new_IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(IoReactivexInternalDisposablesArrayCompositeDisposable, initWithInt_, capacity)
}

IoReactivexInternalDisposablesArrayCompositeDisposable *create_IoReactivexInternalDisposablesArrayCompositeDisposable_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalDisposablesArrayCompositeDisposable, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalDisposablesArrayCompositeDisposable)
