//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableGroupJoin
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableGroupJoin
#ifdef INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable
#define INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport 1
#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableGroupJoin_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin))
#define IoReactivexInternalOperatorsObservableObservableGroupJoin_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableGroupJoin : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexObservableSource> other_;
  id<IoReactivexFunctionsFunction> leftEnd_;
  id<IoReactivexFunctionsFunction> rightEnd_;
  id<IoReactivexFunctionsBiFunction> resultSelector_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableGroupJoin)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin, other_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin, leftEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin, rightEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin, resultSelector_, id<IoReactivexFunctionsBiFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableGroupJoin_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsObservableObservableGroupJoin *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin *new_IoReactivexInternalOperatorsObservableObservableGroupJoin_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin *create_IoReactivexInternalOperatorsObservableObservableGroupJoin_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableGroupJoin)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport))
#define IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_

@class IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver;
@class IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver;
@class JavaLangThrowable;

@protocol IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport < JavaObject >

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerCompleteWithIoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver:(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver *)sender;

- (void)innerValueWithBoolean:(jboolean)isLeft
                       withId:(id)o;

- (void)innerCloseWithBoolean:(jboolean)isLeft
withIoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver:(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver *)index;

- (void)innerCloseErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport)

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable))
#define IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver;
@class IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver;
@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class JavaLangInteger;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsBiFunction;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObserver;
@protocol JavaUtilMap;

@interface IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexDisposablesDisposable, IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  IoReactivexDisposablesCompositeDisposable *disposables_;
  id<JavaUtilMap> lefts_;
  id<JavaUtilMap> rights_;
  JavaUtilConcurrentAtomicAtomicReference *error_;
  id<IoReactivexFunctionsFunction> leftEnd_;
  id<IoReactivexFunctionsFunction> rightEnd_;
  id<IoReactivexFunctionsBiFunction> resultSelector_;
  JavaUtilConcurrentAtomicAtomicInteger *active_;
  jint leftIndex_;
  jint rightIndex_;
  volatile_jboolean cancelled_;
}

+ (JavaLangInteger *)LEFT_VALUE;

+ (JavaLangInteger *)RIGHT_VALUE;

+ (JavaLangInteger *)LEFT_CLOSE;

+ (JavaLangInteger *)RIGHT_CLOSE;

#pragma mark Public

- (void)dispose;

- (NSUInteger)hash;

- (void)innerCloseWithBoolean:(jboolean)isLeft
withIoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver:(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver *)index;

- (void)innerCloseErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerCompleteWithIoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver:(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver *)sender;

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)innerValueWithBoolean:(jboolean)isLeft
                       withId:(id)o;

- (jboolean)isDisposed;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)leftEnd
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)rightEnd
         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)resultSelector;

- (void)cancelAll;

- (void)drain;

- (void)errorAllWithIoReactivexObserver:(id<IoReactivexObserver>)a;

- (void)failWithJavaLangThrowable:(JavaLangThrowable *)exc
          withIoReactivexObserver:(id<IoReactivexObserver>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, disposables_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, lefts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, rights_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, leftEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, rightEnd_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, resultSelector_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, active_, JavaUtilConcurrentAtomicAtomicInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_get_LEFT_VALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_LEFT_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, LEFT_VALUE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_get_RIGHT_VALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_RIGHT_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, RIGHT_VALUE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_get_LEFT_CLOSE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_LEFT_CLOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, LEFT_CLOSE, JavaLangInteger *)

inline JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_get_RIGHT_CLOSE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_RIGHT_CLOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable, RIGHT_CLOSE, JavaLangInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable *new_IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable *create_IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withIoReactivexFunctionsFunction_withIoReactivexFunctionsBiFunction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsFunction> leftEnd, id<IoReactivexFunctionsFunction> rightEnd, id<IoReactivexFunctionsBiFunction> resultSelector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableGroupJoin_GroupJoinDisposable)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver))
#define IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent_;
  jboolean isLeft_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport:(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport>)parent
                                                                                  withBoolean:(jboolean)isLeft;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver, parent_, id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver *self, id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver *new_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver *create_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver))
#define IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent_;
  jboolean isLeft_;
  jint index_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport:(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport>)parent
                                                                                  withBoolean:(jboolean)isLeft
                                                                                      withInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver, parent_, id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_withInt_(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver *self, id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft, jint index);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver *new_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_withInt_(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver *create_IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver_initWithIoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport_withBoolean_withInt_(id<IoReactivexInternalOperatorsObservableObservableGroupJoin_JoinSupport> parent, jboolean isLeft, jint index);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableGroupJoin_LeftRightEndObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableGroupJoin")
