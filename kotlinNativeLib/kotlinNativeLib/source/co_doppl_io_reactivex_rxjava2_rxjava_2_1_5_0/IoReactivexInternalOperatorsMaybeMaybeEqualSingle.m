//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsBiPredicate.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsMaybeMaybeEqualSingle.h"
#include "IoReactivexMaybeSource.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_serialVersionUID -3031974433025990931LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeEqualSingle

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                    withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2
           withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)isEqual {
  IoReactivexInternalOperatorsMaybeMaybeEqualSingle_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_(self, source1, source2, isEqual);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *parent = create_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_(observer, isEqual_);
  [((id<IoReactivexSingleObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [parent subscribeWithIoReactivexMaybeSource:source1_ withIoReactivexMaybeSource:source2_];
}

- (void)dealloc {
  RELEASE_(source1_);
  RELEASE_(source2_);
  RELEASE_(isEqual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSource:withIoReactivexMaybeSource:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source1_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "source2_", "LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "isEqual_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeSource;LIoReactivexMaybeSource;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/MaybeSource<+TT;>;Lio/reactivex/MaybeSource<+TT;>;Lio/reactivex/functions/BiPredicate<-TT;-TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;)V", "Lio/reactivex/MaybeSource<+TT;>;", "Lio/reactivex/functions/BiPredicate<-TT;-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator;LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeEqualSingle = { "MaybeEqualSingle", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeEqualSingle;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeEqualSingle_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsMaybeMaybeEqualSingle *self, id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexFunctionsBiPredicate> isEqual) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source1_, source1);
  JreStrongAssign(&self->source2_, source2);
  JreStrongAssign(&self->isEqual_, isEqual);
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle *new_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexFunctionsBiPredicate> isEqual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle, initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_, source1, source2, isEqual)
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle *create_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_(id<IoReactivexMaybeSource> source1, id<IoReactivexMaybeSource> source2, id<IoReactivexFunctionsBiPredicate> isEqual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle, initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_withIoReactivexFunctionsBiPredicate_, source1, source2, isEqual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeEqualSingle)

@implementation IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
              withIoReactivexFunctionsBiPredicate:(id<IoReactivexFunctionsBiPredicate>)isEqual {
  IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_(self, actual, isEqual);
  return self;
}

- (void)subscribeWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source1
                 withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source2 {
  [((id<IoReactivexMaybeSource>) nil_chk(source1)) subscribeWithIoReactivexMaybeObserver:observer1_];
  [((id<IoReactivexMaybeSource>) nil_chk(source2)) subscribeWithIoReactivexMaybeObserver:observer2_];
}

- (void)dispose {
  [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer1_)) dispose];
  [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer2_)) dispose];
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer1_)) get]);
}

- (void)done {
  if ([self decrementAndGet] == 0) {
    id o1 = ((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer1_))->value_EqualObserver_;
    id o2 = ((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer2_))->value_EqualObserver_;
    if (o1 != nil && o2 != nil) {
      jboolean b;
      @try {
        b = [((id<IoReactivexFunctionsBiPredicate>) nil_chk(isEqual_)) testWithId:o1 withId:o2];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(b)];
    }
    else {
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(o1 == nil && o2 == nil)];
    }
  }
}

- (void)errorWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver:(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *)sender
                                                           withJavaLangThrowable:(JavaLangThrowable *)ex {
  if ([self getAndSetWithInt:0] > 0) {
    if (sender == observer1_) {
      [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer2_)) dispose];
    }
    else {
      [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *) nil_chk(observer1_)) dispose];
    }
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(observer1_);
  RELEASE_(observer2_);
  RELEASE_(isEqual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexFunctionsBiPredicate:);
  methods[1].selector = @selector(subscribeWithIoReactivexMaybeSource:withIoReactivexMaybeSource:);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isDisposed);
  methods[4].selector = @selector(done);
  methods[5].selector = @selector(errorWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "observer1_", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "observer2_", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "isEqual_", "LIoReactivexFunctionsBiPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexFunctionsBiPredicate;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;Lio/reactivex/functions/BiPredicate<-TT;-TT;>;)V", "subscribe", "LIoReactivexMaybeSource;LIoReactivexMaybeSource;", "(Lio/reactivex/MaybeSource<+TT;>;Lio/reactivex/MaybeSource<+TT;>;)V", "error", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver;LJavaLangThrowable;", "(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver<TT;>;Ljava/lang/Throwable;)V", "Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;", "Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver<TT;>;", "Lio/reactivex/functions/BiPredicate<-TT;-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator = { "EqualCoordinator", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 6, 4, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *self, id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsBiPredicate> isEqual) {
  JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(self, 2);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->isEqual_, isEqual);
  JreStrongAssignAndConsume(&self->observer1_, new_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(self));
  JreStrongAssignAndConsume(&self->observer2_, new_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(self));
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *new_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsBiPredicate> isEqual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator, initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_, actual, isEqual)
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *create_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsBiPredicate> isEqual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator, initWithIoReactivexSingleObserver_withIoReactivexFunctionsBiPredicate_, actual, isEqual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator)

@implementation IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver

- (instancetype)initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator:(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *)parent {
  IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(self, parent);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  JreStrongAssign(&self->value_EqualObserver_, value);
  [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *) nil_chk(parent_)) done];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *) nil_chk(parent_)) errorWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver:self withJavaLangThrowable:e];
}

- (void)onComplete {
  [((IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *) nil_chk(parent_)) done];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(value_EqualObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "value_EqualObserver_", "LNSObject;", .constantValue.asLong = 0, 0x0, 10, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator;", "(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator<TT;>;", "value", "LIoReactivexInternalOperatorsMaybeMaybeEqualSingle;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/MaybeObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver = { "EqualObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 6, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *self, IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *new_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver, initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_, parent)
}

IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver *create_IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver_initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver, initWithIoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualCoordinator_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeEqualSingle_EqualObserver)
