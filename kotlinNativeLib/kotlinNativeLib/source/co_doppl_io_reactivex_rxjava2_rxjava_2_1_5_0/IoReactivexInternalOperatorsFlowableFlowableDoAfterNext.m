//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableDoAfterNext.h"
#include "IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber.h"
#include "IoReactivexInternalSubscribersBasicFuseableSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Throwable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableDoAfterNext

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterNext {
  IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(self, source, onAfterNext);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), onAfterNext_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(s, onAfterNext_)];
  }
}

- (void)dealloc {
  RELEASE_(onAfterNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onAfterNext_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsConsumer;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Consumer<-TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Consumer<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber;LIoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoAfterNext = { "FlowableDoAfterNext", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext *self, IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onAfterNext) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->onAfterNext_, onAfterNext);
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext *new_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext, initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_, source, onAfterNext)
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext *create_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_(IoReactivexFlowable *source, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext, initWithIoReactivexFlowable_withIoReactivexFunctionsConsumer_, source, onAfterNext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext)

@implementation IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterNext {
  IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(self, actual, onAfterNext);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    @try {
      [((id<IoReactivexFunctionsConsumer>) nil_chk(onAfterNext_)) acceptWithId:t];
    }
    @catch (JavaLangThrowable *ex) {
      [self failWithJavaLangThrowable:ex];
    }
  }
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  if (v != nil) {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(onAfterNext_)) acceptWithId:v];
  }
  return v;
}

- (void)dealloc {
  RELEASE_(onAfterNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(requestFusionWithInt:);
  methods[3].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onAfterNext_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsConsumer;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Consumer<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Consumer<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDoAfterNext;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableSubscriber<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber = { "DoAfterSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  IoReactivexInternalSubscribersBasicFuseableSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  JreStrongAssign(&self->onAfterNext_, onAfterNext);
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_, actual, onAfterNext)
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsConsumer_, actual, onAfterNext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                        withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterNext {
  IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_(self, actual, onAfterNext);
  return self;
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:t];
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    @try {
      [((id<IoReactivexFunctionsConsumer>) nil_chk(onAfterNext_)) acceptWithId:t];
    }
    @catch (JavaLangThrowable *ex) {
      [self failWithJavaLangThrowable:ex];
    }
  }
}

- (jboolean)tryOnNextWithId:(id)t {
  jboolean b = [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) tryOnNextWithId:t];
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(onAfterNext_)) acceptWithId:t];
  }
  @catch (JavaLangThrowable *ex) {
    [self failWithJavaLangThrowable:ex];
  }
  return b;
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
  if (v != nil) {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(onAfterNext_)) acceptWithId:v];
  }
  return v;
}

- (void)dealloc {
  RELEASE_(onAfterNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(tryOnNextWithId:);
  methods[3].selector = @selector(requestFusionWithInt:);
  methods[4].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onAfterNext_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexFunctionsConsumer;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Lio/reactivex/functions/Consumer<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "tryOnNext", "(TT;)Z", "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/functions/Consumer<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableDoAfterNext;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber = { "DoAfterConditionalSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 1, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_(self, actual);
  JreStrongAssign(&self->onAfterNext_, onAfterNext);
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_, actual, onAfterNext)
}

IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsConsumer> onAfterNext) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsConsumer_, actual, onAfterNext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDoAfterNext_DoAfterConditionalSubscriber)
