//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface IoReactivexExceptionsCompositeException () {
 @public
  id<JavaUtilList> exceptions_;
  NSString *message_;
  JavaLangThrowable *cause_CompositeException_;
}

- (void)printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter:(IoReactivexExceptionsCompositeException_PrintStreamOrWriter *)s;

- (void)appendStackTraceWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                            withJavaLangThrowable:(JavaLangThrowable *)ex
                                     withNSString:(NSString *)prefix;

- (id<JavaUtilList>)getListOfCausesWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (JavaLangThrowable *)getRootCauseWithJavaLangThrowable:(JavaLangThrowable *)e;

@end

J2OBJC_FIELD_SETTER(IoReactivexExceptionsCompositeException, exceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexExceptionsCompositeException, message_, NSString *)
J2OBJC_FIELD_SETTER(IoReactivexExceptionsCompositeException, cause_CompositeException_, JavaLangThrowable *)

inline jlong IoReactivexExceptionsCompositeException_get_serialVersionUID();
#define IoReactivexExceptionsCompositeException_serialVersionUID 3026362227162912146LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexExceptionsCompositeException, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexExceptionsCompositeException_printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter_(IoReactivexExceptionsCompositeException *self, IoReactivexExceptionsCompositeException_PrintStreamOrWriter *s);

__attribute__((unused)) static void IoReactivexExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withJavaLangThrowable_withNSString_(IoReactivexExceptionsCompositeException *self, JavaLangStringBuilder *b, JavaLangThrowable *ex, NSString *prefix);

__attribute__((unused)) static id<JavaUtilList> IoReactivexExceptionsCompositeException_getListOfCausesWithJavaLangThrowable_(IoReactivexExceptionsCompositeException *self, JavaLangThrowable *ex);

__attribute__((unused)) static JavaLangThrowable *IoReactivexExceptionsCompositeException_getRootCauseWithJavaLangThrowable_(IoReactivexExceptionsCompositeException *self, JavaLangThrowable *e);

@interface IoReactivexExceptionsCompositeException_WrappedPrintStream () {
 @public
  JavaIoPrintStream *printStream_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexExceptionsCompositeException_WrappedPrintStream, printStream_, JavaIoPrintStream *)

@interface IoReactivexExceptionsCompositeException_WrappedPrintWriter () {
 @public
  JavaIoPrintWriter *printWriter_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexExceptionsCompositeException_WrappedPrintWriter, printWriter_, JavaIoPrintWriter *)

inline jlong IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_get_serialVersionUID();
#define IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_serialVersionUID 3875212506787802066LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain, serialVersionUID, jlong)

@implementation IoReactivexExceptionsCompositeException

- (instancetype)initWithJavaLangThrowableArray:(IOSObjectArray * __nonnull)exceptions {
  IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_(self, exceptions);
  return self;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable> __nonnull)errors {
  IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(self, errors);
  return self;
}

- (id<JavaUtilList> __nonnull)getExceptions {
  return exceptions_;
}

- (NSString * __nonnull)getMessage {
  return message_;
}

- (JavaLangThrowable * __nonnull)getCause {
  @synchronized(self) {
    if (cause_CompositeException_ == nil) {
      IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain *localCause = create_IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_init();
      id<JavaUtilSet> seenCauses = create_JavaUtilHashSet_init();
      JavaLangThrowable *chain = localCause;
      for (JavaLangThrowable * __strong e in nil_chk(exceptions_)) {
        if ([seenCauses containsWithId:e]) {
          continue;
        }
        [seenCauses addWithId:e];
        id<JavaUtilList> listOfCauses = IoReactivexExceptionsCompositeException_getListOfCausesWithJavaLangThrowable_(self, e);
        for (JavaLangThrowable * __strong child in nil_chk(listOfCauses)) {
          if ([seenCauses containsWithId:child]) {
            e = create_JavaLangRuntimeException_initWithNSString_(@"Duplicate found in causal chain so cropping to prevent loop ...");
            continue;
          }
          [seenCauses addWithId:child];
        }
        @try {
          [((JavaLangThrowable *) nil_chk(chain)) initCauseWithJavaLangThrowable:e];
        }
        @catch (JavaLangThrowable *t) {
        }
        chain = IoReactivexExceptionsCompositeException_getRootCauseWithJavaLangThrowable_(self, chain);
      }
      JreStrongAssign(&cause_CompositeException_, localCause);
    }
    return JreRetainedLocalValue(cause_CompositeException_);
  }
}

- (void)printStackTrace {
  [self printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s {
  IoReactivexExceptionsCompositeException_printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter_(self, create_IoReactivexExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(s));
}

- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s {
  IoReactivexExceptionsCompositeException_printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter_(self, create_IoReactivexExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(s));
}

- (void)printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter:(IoReactivexExceptionsCompositeException_PrintStreamOrWriter *)s {
  IoReactivexExceptionsCompositeException_printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter_(self, s);
}

- (void)appendStackTraceWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                            withJavaLangThrowable:(JavaLangThrowable *)ex
                                     withNSString:(NSString *)prefix {
  IoReactivexExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withJavaLangThrowable_withNSString_(self, b, ex, prefix);
}

- (id<JavaUtilList>)getListOfCausesWithJavaLangThrowable:(JavaLangThrowable *)ex {
  return IoReactivexExceptionsCompositeException_getListOfCausesWithJavaLangThrowable_(self, ex);
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(exceptions_)) size];
}

- (JavaLangThrowable *)getRootCauseWithJavaLangThrowable:(JavaLangThrowable *)e {
  return IoReactivexExceptionsCompositeException_getRootCauseWithJavaLangThrowable_(self, e);
}

- (void)dealloc {
  RELEASE_(exceptions_);
  RELEASE_(message_);
  RELEASE_(cause_CompositeException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x2, 13, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangThrowableArray:);
  methods[1].selector = @selector(initWithJavaLangIterable:);
  methods[2].selector = @selector(getExceptions);
  methods[3].selector = @selector(getMessage);
  methods[4].selector = @selector(getCause);
  methods[5].selector = @selector(printStackTrace);
  methods[6].selector = @selector(printStackTraceWithJavaIoPrintStream:);
  methods[7].selector = @selector(printStackTraceWithJavaIoPrintWriter:);
  methods[8].selector = @selector(printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter:);
  methods[9].selector = @selector(appendStackTraceWithJavaLangStringBuilder:withJavaLangThrowable:withNSString:);
  methods[10].selector = @selector(getListOfCausesWithJavaLangThrowable:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(getRootCauseWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexExceptionsCompositeException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "exceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cause_CompositeException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 15, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaLangThrowable;", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Throwable;>;)V", "()Ljava/util/List<Ljava/lang/Throwable;>;", "printStackTrace", "LJavaIoPrintStream;", "LJavaIoPrintWriter;", "LIoReactivexExceptionsCompositeException_PrintStreamOrWriter;", "appendStackTrace", "LJavaLangStringBuilder;LJavaLangThrowable;LNSString;", "getListOfCauses", "LJavaLangThrowable;", "(Ljava/lang/Throwable;)Ljava/util/List<Ljava/lang/Throwable;>;", "getRootCause", "Ljava/util/List<Ljava/lang/Throwable;>;", "cause", "LIoReactivexExceptionsCompositeException_PrintStreamOrWriter;LIoReactivexExceptionsCompositeException_WrappedPrintStream;LIoReactivexExceptionsCompositeException_WrappedPrintWriter;LIoReactivexExceptionsCompositeException_CompositeExceptionCausalChain;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsCompositeException = { "CompositeException", "io.reactivex.exceptions", ptrTable, methods, fields, 7, 0x11, 13, 4, -1, 16, -1, -1, -1 };
  return &_IoReactivexExceptionsCompositeException;
}

@end

void IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_(IoReactivexExceptionsCompositeException *self, IOSObjectArray *exceptions) {
  IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(self, exceptions == nil ? JavaUtilCollections_singletonListWithId_(create_JavaLangNullPointerException_initWithNSString_(@"exceptions was null")) : JavaUtilArrays_asListWithNSObjectArray_(exceptions));
}

IoReactivexExceptionsCompositeException *new_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_(IOSObjectArray *exceptions) {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsCompositeException, initWithJavaLangThrowableArray_, exceptions)
}

IoReactivexExceptionsCompositeException *create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_(IOSObjectArray *exceptions) {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsCompositeException, initWithJavaLangThrowableArray_, exceptions)
}

void IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(IoReactivexExceptionsCompositeException *self, id<JavaLangIterable> errors) {
  JavaLangRuntimeException_init(self);
  id<JavaUtilSet> deDupedExceptions = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilList> localExceptions = create_JavaUtilArrayList_init();
  if (errors != nil) {
    for (JavaLangThrowable * __strong ex in errors) {
      if ([ex isKindOfClass:[IoReactivexExceptionsCompositeException class]]) {
        [deDupedExceptions addAllWithJavaUtilCollection:[((IoReactivexExceptionsCompositeException *) nil_chk(((IoReactivexExceptionsCompositeException *) cast_chk(ex, [IoReactivexExceptionsCompositeException class])))) getExceptions]];
      }
      else if (ex != nil) {
        [deDupedExceptions addWithId:ex];
      }
      else {
        [deDupedExceptions addWithId:create_JavaLangNullPointerException_initWithNSString_(@"Throwable was null!")];
      }
    }
  }
  else {
    [deDupedExceptions addWithId:create_JavaLangNullPointerException_initWithNSString_(@"errors was null")];
  }
  if ([deDupedExceptions isEmpty]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"errors is empty");
  }
  [localExceptions addAllWithJavaUtilCollection:deDupedExceptions];
  JreStrongAssign(&self->exceptions_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(localExceptions));
  JreStrongAssign(&self->message_, JreStrcat("I$", [((id<JavaUtilList>) nil_chk(self->exceptions_)) size], @" exceptions occurred. "));
}

IoReactivexExceptionsCompositeException *new_IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(id<JavaLangIterable> errors) {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsCompositeException, initWithJavaLangIterable_, errors)
}

IoReactivexExceptionsCompositeException *create_IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(id<JavaLangIterable> errors) {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsCompositeException, initWithJavaLangIterable_, errors)
}

void IoReactivexExceptionsCompositeException_printStackTraceWithIoReactivexExceptionsCompositeException_PrintStreamOrWriter_(IoReactivexExceptionsCompositeException *self, IoReactivexExceptionsCompositeException_PrintStreamOrWriter *s) {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_initWithInt_(128);
  [((JavaLangStringBuilder *) nil_chk([b appendWithId:self])) appendWithChar:0x000a];
  {
    IOSObjectArray *a__ = [self getStackTrace];
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *myStackElement = *b__++;
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"\tat "])) appendWithId:myStackElement])) appendWithChar:0x000a];
    }
  }
  jint i = 1;
  for (JavaLangThrowable * __strong ex in nil_chk(self->exceptions_)) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"  ComposedException "])) appendWithInt:i])) appendWithNSString:@" :\n"];
    IoReactivexExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withJavaLangThrowable_withNSString_(self, b, ex, @"\t");
    i++;
  }
  [((IoReactivexExceptionsCompositeException_PrintStreamOrWriter *) nil_chk(s)) printlnWithId:[b description]];
}

void IoReactivexExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withJavaLangThrowable_withNSString_(IoReactivexExceptionsCompositeException *self, JavaLangStringBuilder *b, JavaLangThrowable *ex, NSString *prefix) {
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:prefix])) appendWithId:ex])) appendWithChar:0x000a];
  {
    IOSObjectArray *a__ = [((JavaLangThrowable *) nil_chk(ex)) getStackTrace];
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *stackElement = *b__++;
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"\t\tat "])) appendWithId:stackElement])) appendWithChar:0x000a];
    }
  }
  if ([ex getCause] != nil) {
    [b appendWithNSString:@"\tCaused by: "];
    IoReactivexExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withJavaLangThrowable_withNSString_(self, b, [ex getCause], @"");
  }
}

id<JavaUtilList> IoReactivexExceptionsCompositeException_getListOfCausesWithJavaLangThrowable_(IoReactivexExceptionsCompositeException *self, JavaLangThrowable *ex) {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  JavaLangThrowable *root = [((JavaLangThrowable *) nil_chk(ex)) getCause];
  if (root == nil || root == ex) {
    return list;
  }
  else {
    while (true) {
      [list addWithId:root];
      JavaLangThrowable *cause = [root getCause];
      if (cause == nil || cause == root) {
        return list;
      }
      else {
        root = cause;
      }
    }
  }
}

JavaLangThrowable *IoReactivexExceptionsCompositeException_getRootCauseWithJavaLangThrowable_(IoReactivexExceptionsCompositeException *self, JavaLangThrowable *e) {
  JavaLangThrowable *root = [((JavaLangThrowable *) nil_chk(e)) getCause];
  if (root == nil || self->cause_CompositeException_ == root) {
    return e;
  }
  while (true) {
    JavaLangThrowable *cause = [root getCause];
    if (cause == nil || cause == root) {
      return root;
    }
    root = cause;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsCompositeException)

@implementation IoReactivexExceptionsCompositeException_PrintStreamOrWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexExceptionsCompositeException_PrintStreamOrWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)printlnWithId:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(printlnWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "println", "LNSObject;", "LIoReactivexExceptionsCompositeException;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsCompositeException_PrintStreamOrWriter = { "PrintStreamOrWriter", "io.reactivex.exceptions", ptrTable, methods, NULL, 7, 0x408, 2, 0, 2, -1, -1, -1, -1 };
  return &_IoReactivexExceptionsCompositeException_PrintStreamOrWriter;
}

@end

void IoReactivexExceptionsCompositeException_PrintStreamOrWriter_init(IoReactivexExceptionsCompositeException_PrintStreamOrWriter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsCompositeException_PrintStreamOrWriter)

@implementation IoReactivexExceptionsCompositeException_WrappedPrintStream

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)printStream {
  IoReactivexExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(self, printStream);
  return self;
}

- (void)printlnWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk(printStream_)) printlnWithId:o];
}

- (void)dealloc {
  RELEASE_(printStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoPrintStream:);
  methods[1].selector = @selector(printlnWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "printStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintStream;", "println", "LNSObject;", "LIoReactivexExceptionsCompositeException;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsCompositeException_WrappedPrintStream = { "WrappedPrintStream", "io.reactivex.exceptions", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_IoReactivexExceptionsCompositeException_WrappedPrintStream;
}

@end

void IoReactivexExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(IoReactivexExceptionsCompositeException_WrappedPrintStream *self, JavaIoPrintStream *printStream) {
  IoReactivexExceptionsCompositeException_PrintStreamOrWriter_init(self);
  JreStrongAssign(&self->printStream_, printStream);
}

IoReactivexExceptionsCompositeException_WrappedPrintStream *new_IoReactivexExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream) {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsCompositeException_WrappedPrintStream, initWithJavaIoPrintStream_, printStream)
}

IoReactivexExceptionsCompositeException_WrappedPrintStream *create_IoReactivexExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream) {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsCompositeException_WrappedPrintStream, initWithJavaIoPrintStream_, printStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsCompositeException_WrappedPrintStream)

@implementation IoReactivexExceptionsCompositeException_WrappedPrintWriter

- (instancetype)initWithJavaIoPrintWriter:(JavaIoPrintWriter *)printWriter {
  IoReactivexExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(self, printWriter);
  return self;
}

- (void)printlnWithId:(id)o {
  [((JavaIoPrintWriter *) nil_chk(printWriter_)) printlnWithId:o];
}

- (void)dealloc {
  RELEASE_(printWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoPrintWriter:);
  methods[1].selector = @selector(printlnWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "printWriter_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintWriter;", "println", "LNSObject;", "LIoReactivexExceptionsCompositeException;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsCompositeException_WrappedPrintWriter = { "WrappedPrintWriter", "io.reactivex.exceptions", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_IoReactivexExceptionsCompositeException_WrappedPrintWriter;
}

@end

void IoReactivexExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(IoReactivexExceptionsCompositeException_WrappedPrintWriter *self, JavaIoPrintWriter *printWriter) {
  IoReactivexExceptionsCompositeException_PrintStreamOrWriter_init(self);
  JreStrongAssign(&self->printWriter_, printWriter);
}

IoReactivexExceptionsCompositeException_WrappedPrintWriter *new_IoReactivexExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter) {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsCompositeException_WrappedPrintWriter, initWithJavaIoPrintWriter_, printWriter)
}

IoReactivexExceptionsCompositeException_WrappedPrintWriter *create_IoReactivexExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter) {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsCompositeException_WrappedPrintWriter, initWithJavaIoPrintWriter_, printWriter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsCompositeException_WrappedPrintWriter)

NSString *IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE = @"Chain of Causes for CompositeException In Order Received =>";

@implementation IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain

+ (NSString *)MESSAGE {
  return IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getMessage {
  return IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE, "LIoReactivexExceptionsCompositeException;" };
  static const J2ObjcClassInfo _IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain = { "CompositeExceptionCausalChain", "io.reactivex.exceptions", ptrTable, methods, fields, 7, 0x18, 2, 2, 1, -1, -1, -1, -1 };
  return &_IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain;
}

@end

void IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_init(IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain *self) {
  JavaLangRuntimeException_init(self);
}

IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain *new_IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_init() {
  J2OBJC_NEW_IMPL(IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain, init)
}

IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain *create_IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain_init() {
  J2OBJC_CREATE_IMPL(IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexExceptionsCompositeException_CompositeExceptionCausalChain)
