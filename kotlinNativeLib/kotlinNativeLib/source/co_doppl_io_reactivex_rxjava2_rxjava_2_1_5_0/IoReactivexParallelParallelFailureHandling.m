//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexParallelParallelFailureHandling.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"

__attribute__((unused)) static void IoReactivexParallelParallelFailureHandling_initWithNSString_withInt_(IoReactivexParallelParallelFailureHandling *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(IoReactivexParallelParallelFailureHandling)

IoReactivexParallelParallelFailureHandling *IoReactivexParallelParallelFailureHandling_values_[4];

@implementation IoReactivexParallelParallelFailureHandling

+ (IoReactivexParallelParallelFailureHandling *)STOP {
  return JreEnum(IoReactivexParallelParallelFailureHandling, STOP);
}

+ (IoReactivexParallelParallelFailureHandling *)ERROR {
  return JreEnum(IoReactivexParallelParallelFailureHandling, ERROR);
}

+ (IoReactivexParallelParallelFailureHandling *)SKIP {
  return JreEnum(IoReactivexParallelParallelFailureHandling, SKIP);
}

+ (IoReactivexParallelParallelFailureHandling *)RETRY {
  return JreEnum(IoReactivexParallelParallelFailureHandling, RETRY);
}

- (IoReactivexParallelParallelFailureHandling *)applyWithId:(JavaLangLong *)t1
                                                     withId:(JavaLangThrowable *)t2 {
  return self;
}

+ (IOSObjectArray *)values {
  return IoReactivexParallelParallelFailureHandling_values();
}

+ (IoReactivexParallelParallelFailureHandling *)valueOfWithNSString:(NSString *)name {
  return IoReactivexParallelParallelFailureHandling_valueOfWithNSString_(name);
}

- (IoReactivexParallelParallelFailureHandling_Enum)toNSEnum {
  return (IoReactivexParallelParallelFailureHandling_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexParallelParallelFailureHandling;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LIoReactivexParallelParallelFailureHandling;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexParallelParallelFailureHandling;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:withId:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STOP", "LIoReactivexParallelParallelFailureHandling;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ERROR", "LIoReactivexParallelParallelFailureHandling;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SKIP", "LIoReactivexParallelParallelFailureHandling;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "RETRY", "LIoReactivexParallelParallelFailureHandling;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LJavaLangLong;LJavaLangThrowable;", "valueOf", "LNSString;", &JreEnum(IoReactivexParallelParallelFailureHandling, STOP), &JreEnum(IoReactivexParallelParallelFailureHandling, ERROR), &JreEnum(IoReactivexParallelParallelFailureHandling, SKIP), &JreEnum(IoReactivexParallelParallelFailureHandling, RETRY), "Ljava/lang/Enum<Lio/reactivex/parallel/ParallelFailureHandling;>;Lio/reactivex/functions/BiFunction<Ljava/lang/Long;Ljava/lang/Throwable;Lio/reactivex/parallel/ParallelFailureHandling;>;" };
  static const J2ObjcClassInfo _IoReactivexParallelParallelFailureHandling = { "ParallelFailureHandling", "io.reactivex.parallel", ptrTable, methods, fields, 7, 0x4011, 3, 4, -1, -1, -1, 8, -1 };
  return &_IoReactivexParallelParallelFailureHandling;
}

+ (void)initialize {
  if (self == [IoReactivexParallelParallelFailureHandling class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      (IoReactivexParallelParallelFailureHandling_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      IoReactivexParallelParallelFailureHandling_initWithNSString_withInt_(e, JreEnumConstantName(IoReactivexParallelParallelFailureHandling_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(IoReactivexParallelParallelFailureHandling)
  }
}

@end

void IoReactivexParallelParallelFailureHandling_initWithNSString_withInt_(IoReactivexParallelParallelFailureHandling *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *IoReactivexParallelParallelFailureHandling_values() {
  IoReactivexParallelParallelFailureHandling_initialize();
  return [IOSObjectArray arrayWithObjects:IoReactivexParallelParallelFailureHandling_values_ count:4 type:IoReactivexParallelParallelFailureHandling_class_()];
}

IoReactivexParallelParallelFailureHandling *IoReactivexParallelParallelFailureHandling_valueOfWithNSString_(NSString *name) {
  IoReactivexParallelParallelFailureHandling_initialize();
  for (int i = 0; i < 4; i++) {
    IoReactivexParallelParallelFailureHandling *e = IoReactivexParallelParallelFailureHandling_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

IoReactivexParallelParallelFailureHandling *IoReactivexParallelParallelFailureHandling_fromOrdinal(NSUInteger ordinal) {
  IoReactivexParallelParallelFailureHandling_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return IoReactivexParallelParallelFailureHandling_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexParallelParallelFailureHandling)
