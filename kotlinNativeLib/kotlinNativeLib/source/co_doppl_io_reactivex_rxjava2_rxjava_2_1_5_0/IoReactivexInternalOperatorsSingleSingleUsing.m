//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsCompositeException.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleUsing.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_serialVersionUID -5331524057054083935LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleUsing

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resourceSupplier
                  withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)singleFunction
                  withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer
                                       withBoolean:(jboolean)eager {
  IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(self, resourceSupplier, singleFunction, disposer, eager);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  id resource;
  @try {
    resource = [((id<JavaUtilConcurrentCallable>) nil_chk(resourceSupplier_)) call];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(ex, s);
    return;
  }
  id<IoReactivexSingleSource> source;
  @try {
    source = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(singleFunction_)) applyWithId:resource], @"The singleFunction returned a null SingleSource");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    if (eager_) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *exc) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
        ex = create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, exc } count:2 type:JavaLangThrowable_class_()]);
      }
    }
    IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexSingleObserver_(ex, s);
    if (!eager_) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:resource];
      }
      @catch (JavaLangThrowable *exc) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(exc);
      }
    }
    return;
  }
  [((id<IoReactivexSingleSource>) nil_chk(source)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(s, resource, eager_, disposer_)];
}

- (void)dealloc {
  RELEASE_(resourceSupplier_);
  RELEASE_(singleFunction_);
  RELEASE_(disposer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:withIoReactivexFunctionsFunction:withIoReactivexFunctionsConsumer:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "singleFunction_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "disposer_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "eager_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LIoReactivexFunctionsFunction;LIoReactivexFunctionsConsumer;Z", "(Ljava/util/concurrent/Callable<TU;>;Lio/reactivex/functions/Function<-TU;+Lio/reactivex/SingleSource<+TT;>;>;Lio/reactivex/functions/Consumer<-TU;>;Z)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "Lio/reactivex/functions/Function<-TU;+Lio/reactivex/SingleSource<+TT;>;>;", "Lio/reactivex/functions/Consumer<-TU;>;", "LIoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleUsing = { "SingleUsing", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleUsing;
}

@end

void IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(IoReactivexInternalOperatorsSingleSingleUsing *self, id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->resourceSupplier_, resourceSupplier);
  JreStrongAssign(&self->singleFunction_, singleFunction);
  JreStrongAssign(&self->disposer_, disposer);
  self->eager_ = eager;
}

IoReactivexInternalOperatorsSingleSingleUsing *new_IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleUsing, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_, resourceSupplier, singleFunction, disposer, eager)
}

IoReactivexInternalOperatorsSingleSingleUsing *create_IoReactivexInternalOperatorsSingleSingleUsing_initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_(id<JavaUtilConcurrentCallable> resourceSupplier, id<IoReactivexFunctionsFunction> singleFunction, id<IoReactivexFunctionsConsumer> disposer, jboolean eager) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleUsing, initWithJavaUtilConcurrentCallable_withIoReactivexFunctionsFunction_withIoReactivexFunctionsConsumer_withBoolean_, resourceSupplier, singleFunction, disposer, eager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleUsing)

@implementation IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)resource
                                      withBoolean:(jboolean)eager
                 withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)disposer {
  IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(self, actual, resource, eager, disposer);
  return self;
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(JreLoadVolatileId(&d_))) dispose];
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  [self disposeAfter];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(JreLoadVolatileId(&d_))) isDisposed];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(JreLoadVolatileId(&self->d_), d)) {
    JreVolatileStrongAssign(&self->d_, d);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  if (eager_) {
    id u = [self getAndSetWithId:self];
    if (u != self) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:u];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
        return;
      }
    }
    else {
      return;
    }
  }
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
  if (!eager_) {
    [self disposeAfter];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreVolatileStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  if (eager_) {
    id u = [self getAndSetWithId:self];
    if (u != self) {
      @try {
        [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:u];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        e = create_IoReactivexExceptionsCompositeException_initWithJavaLangThrowableArray_([IOSObjectArray arrayWithObjects:(id[]){ e, ex } count:2 type:JavaLangThrowable_class_()]);
      }
    }
    else {
      return;
    }
  }
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  if (!eager_) {
    [self disposeAfter];
  }
}

- (void)disposeAfter {
  id u = [self getAndSetWithId:self];
  if (u != self) {
    @try {
      [((id<IoReactivexFunctionsConsumer>) nil_chk(disposer_)) acceptWithId:u];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
    }
  }
}

- (void)__javaClone:(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&d_, &original->d_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(disposer_);
  JreReleaseVolatile(&d_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withId:withBoolean:withIoReactivexFunctionsConsumer:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(disposeAfter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "disposer_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "eager_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LNSObject;ZLIoReactivexFunctionsConsumer;", "(Lio/reactivex/SingleObserver<-TT;>;TU;ZLio/reactivex/functions/Consumer<-TU;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "Lio/reactivex/functions/Consumer<-TU;>;", "LIoReactivexInternalOperatorsSingleSingleUsing;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lio/reactivex/SingleObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver = { "UsingSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 7, 5, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *self, id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer) {
  JavaUtilConcurrentAtomicAtomicReference_initWithId_(self, resource);
  JreStrongAssign(&self->actual_, actual);
  self->eager_ = eager;
  JreStrongAssign(&self->disposer_, disposer);
}

IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *new_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_, actual, resource, eager, disposer)
}

IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver *create_IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver_initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_(id<IoReactivexSingleObserver> actual, id resource, jboolean eager, id<IoReactivexFunctionsConsumer> disposer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver, initWithIoReactivexSingleObserver_withId_withBoolean_withIoReactivexFunctionsConsumer_, actual, resource, eager, disposer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleUsing_UsingSingleObserver)
