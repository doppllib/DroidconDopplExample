//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableCache.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexInternalUtilLinkedArrayList.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_serialVersionUID -2557562030197141021LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_get_CANCELLED();
#define IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED -1LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, CANCELLED, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableCache

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(self, source, capacityHint);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)t {
  IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *rp = create_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(t, state_);
  [((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_)) addChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:rp];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(t)) onSubscribeWithOrgReactivestreamsSubscription:rp];
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) get] && [once_ compareAndSetWithBoolean:false withBoolean:true]) {
    [state_ connect];
  }
}

- (jboolean)isConnected {
  return JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_))->isConnected_);
}

- (jboolean)hasSubscribers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_))->subscribers_)) get]))->size_ != 0;
}

- (jint)cachedEventCount {
  return [((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_)) size];
}

- (void)dealloc {
  RELEASE_(state_);
  RELEASE_(once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(isConnected);
  methods[3].selector = @selector(hasSubscribers);
  methods[4].selector = @selector(cachedEventCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LIoReactivexInternalOperatorsFlowableFlowableCache_CacheState;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;I", "(Lio/reactivex/Flowable<TT;>;I)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableCache_CacheState;LIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCache = { "FlowableCache", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCache;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableFlowableCache *self, IoReactivexFlowable *source, jint capacityHint) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssignAndConsume(&self->state_, new_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(source, capacityHint));
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
}

IoReactivexInternalOperatorsFlowableFlowableCache *new_IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache, initWithIoReactivexFlowable_withInt_, source, capacityHint)
}

IoReactivexInternalOperatorsFlowableFlowableCache *create_IoReactivexInternalOperatorsFlowableFlowableCache_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache, initWithIoReactivexFlowable_withInt_, source, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCache)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState)

IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED;

@implementation IoReactivexInternalOperatorsFlowableFlowableCache_CacheState

+ (IOSObjectArray *)EMPTY {
  return IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED;
}

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)capacityHint {
  IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(self, source, capacityHint);
  return self;
}

- (void)addChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *)p {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED) {
      return;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, p);
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)removeChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *)p {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    if (n == 0) {
      return;
    }
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if ([((IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *) nil_chk(IOSObjectArray_Get(a, i))) isEqual:p]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(connection_, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)connect {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:self];
  JreAssignVolatileBoolean(&isConnected_, true);
}

- (void)onNextWithId:(id)t {
  if (!sourceDone_) {
    id o = IoReactivexInternalUtilNotificationLite_nextWithId_(t);
    [self addWithId:o];
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *rp = *b__++;
        [((IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *) nil_chk(rp)) replay];
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (!sourceDone_) {
    sourceDone_ = true;
    id o = IoReactivexInternalUtilNotificationLite_errorWithJavaLangThrowable_(e);
    [self addWithId:o];
    IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(connection_);
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED];
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *rp = *b__++;
        [((IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *) nil_chk(rp)) replay];
      }
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  if (!sourceDone_) {
    sourceDone_ = true;
    id o = IoReactivexInternalUtilNotificationLite_complete();
    [self addWithId:o];
    IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(connection_);
    {
      IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED];
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *rp = *b__++;
        [((IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *) nil_chk(rp)) replay];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(connection_);
  RELEASE_(subscribers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withInt:);
  methods[1].selector = @selector(addChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:);
  methods[2].selector = @selector(removeChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:);
  methods[3].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[4].selector = @selector(connect);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[7].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "connection_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "isConnected_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceDone_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;I", "(Lio/reactivex/Flowable<TT;>;I)V", "addChild", "LIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;", "(Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription<TT;>;)V", "removeChild", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Flowable<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/flowable/FlowableCache$ReplaySubscription<TT;>;>;", &IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY, &IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED, "LIoReactivexInternalOperatorsFlowableFlowableCache;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/util/LinkedArrayList;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCache_CacheState = { "CacheState", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 8, 7, 18, -1, -1, 19, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableCache_CacheState class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *self, IoReactivexFlowable *source, jint capacityHint) {
  IoReactivexInternalUtilLinkedArrayList_initWithInt_(self, capacityHint);
  JreStrongAssignAndConsume(&self->connection_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_EMPTY));
}

IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *new_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, initWithIoReactivexFlowable_withInt_, source, capacityHint)
}

IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *create_IoReactivexInternalOperatorsFlowableFlowableCache_CacheState_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState, initWithIoReactivexFlowable_withInt_, source, capacityHint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState)

@implementation IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child
withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState:(IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *)state {
  IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(self, child, state);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    for (; ; ) {
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      if (r == IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED) {
        return;
      }
      jlong u = IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r, n);
      if ([requested_ compareAndSetWithLong:r withLong:u]) {
        [self replay];
        return;
      }
    }
  }
}

- (void)cancel {
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) getAndSetWithLong:IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED] != IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED) {
    [((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_)) removeChildWithIoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription:self];
  }
}

- (void)replay {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> child = self->child_;
  JavaUtilConcurrentAtomicAtomicLong *rq = requested_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rq)) get];
    if (r < 0LL) {
      return;
    }
    jint s = [((IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *) nil_chk(state_)) size];
    if (s != 0) {
      IOSObjectArray *b = currentBuffer_;
      if (b == nil) {
        b = [state_ head];
        JreStrongAssign(&currentBuffer_, b);
      }
      jint n = ((IOSObjectArray *) nil_chk(b))->size_ - 1;
      jint j = index_;
      jint k = currentIndexInBuffer_;
      jint valuesProduced = 0;
      while (j < s && r > 0) {
        if ([rq get] == IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED) {
          return;
        }
        if (k == n) {
          b = (IOSObjectArray *) cast_check(IOSObjectArray_Get(b, n), IOSClass_arrayType(NSObject_class_(), 1));
          k = 0;
        }
        id o = IOSObjectArray_Get(nil_chk(b), k);
        if (IoReactivexInternalUtilNotificationLite_acceptWithId_withOrgReactivestreamsSubscriber_(o, child)) {
          return;
        }
        k++;
        j++;
        r--;
        valuesProduced++;
      }
      if ([rq get] == IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED) {
        return;
      }
      if (r == 0) {
        id o = IOSObjectArray_Get(b, k);
        if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(o)) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onComplete];
          return;
        }
        else if (IoReactivexInternalUtilNotificationLite_isErrorWithId_(o)) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onErrorWithJavaLangThrowable:IoReactivexInternalUtilNotificationLite_getErrorWithId_(o)];
          return;
        }
      }
      if (valuesProduced != 0) {
        IoReactivexInternalUtilBackpressureHelper_producedCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(rq, valuesProduced);
      }
      index_ = j;
      currentIndexInBuffer_ = k;
      JreStrongAssign(&currentBuffer_, b);
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(child_);
  RELEASE_(state_);
  RELEASE_(requested_);
  RELEASE_(currentBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(replay);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "CANCELLED", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_CANCELLED, 0x1a, -1, -1, -1, -1 },
    { "child_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "state_", "LIoReactivexInternalOperatorsFlowableFlowableCache_CacheState;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "currentBuffer_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentIndexInBuffer_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexInternalOperatorsFlowableFlowableCache_CacheState;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState<TT;>;)V", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/operators/flowable/FlowableCache$CacheState<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableCache;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription = { "ReplaySubscription", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 8, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *self, id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->child_, child);
  JreStrongAssign(&self->state_, state);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *new_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_, child, state)
}

IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription *create_IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_(id<OrgReactivestreamsSubscriber> child, IoReactivexInternalOperatorsFlowableFlowableCache_CacheState *state) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription, initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowableCache_CacheState_, child, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableCache_ReplaySubscription)
