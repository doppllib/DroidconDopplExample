//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalOperatorsMaybeMaybeFromCallable.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexMaybeObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsMaybeMaybeFromCallable

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(self, callable);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  id<IoReactivexDisposablesDisposable> d = IoReactivexDisposablesDisposables_empty();
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (![((id<IoReactivexDisposablesDisposable>) nil_chk(d)) isDisposed]) {
    id v;
    @try {
      v = [((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      if (![d isDisposed]) {
        [observer onErrorWithJavaLangThrowable:ex];
      }
      else {
        IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
      }
      return;
    }
    if (![d isDisposed]) {
      if (v == nil) {
        [observer onComplete];
      }
      else {
        [observer onSuccessWithId:v];
      }
    }
  }
}

- (id)call {
  return [((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call];
}

- (void)dealloc {
  RELEASE_(callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  methods[2].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+TT;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "LJavaLangException;", "()TT;", "Ljava/util/concurrent/Callable<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;Ljava/util/concurrent/Callable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFromCallable = { "MaybeFromCallable", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFromCallable;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsMaybeMaybeFromCallable *self, id<JavaUtilConcurrentCallable> callable) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->callable_, callable);
}

IoReactivexInternalOperatorsMaybeMaybeFromCallable *new_IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

IoReactivexInternalOperatorsMaybeMaybeFromCallable *create_IoReactivexInternalOperatorsMaybeMaybeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromCallable, initWithJavaUtilConcurrentCallable_, callable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFromCallable)
