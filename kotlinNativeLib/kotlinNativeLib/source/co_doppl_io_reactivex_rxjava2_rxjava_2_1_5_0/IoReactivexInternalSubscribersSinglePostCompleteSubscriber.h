//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSubscribersSinglePostCompleteSubscriber")
#ifdef RESTRICT_IoReactivexInternalSubscribersSinglePostCompleteSubscriber
#define INCLUDE_ALL_IoReactivexInternalSubscribersSinglePostCompleteSubscriber 0
#else
#define INCLUDE_ALL_IoReactivexInternalSubscribersSinglePostCompleteSubscriber 1
#endif
#undef RESTRICT_IoReactivexInternalSubscribersSinglePostCompleteSubscriber

#if !defined (IoReactivexInternalSubscribersSinglePostCompleteSubscriber_) && (INCLUDE_ALL_IoReactivexInternalSubscribersSinglePostCompleteSubscriber || defined(INCLUDE_IoReactivexInternalSubscribersSinglePostCompleteSubscriber))
#define IoReactivexInternalSubscribersSinglePostCompleteSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalSubscribersSinglePostCompleteSubscriber : JavaUtilConcurrentAtomicAtomicLong < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<OrgReactivestreamsSubscription> s_;
  id value_SinglePostCompleteSubscriber_;
  jlong produced_;
}

+ (jlong)COMPLETE_MASK;

+ (jlong)REQUEST_MASK;

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual;

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Protected

- (void)completeWithId:(id)n;

- (void)onDropWithId:(id)n;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSubscribersSinglePostCompleteSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersSinglePostCompleteSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersSinglePostCompleteSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersSinglePostCompleteSubscriber, value_SinglePostCompleteSubscriber_, id)

inline jlong IoReactivexInternalSubscribersSinglePostCompleteSubscriber_get_COMPLETE_MASK();
#define IoReactivexInternalSubscribersSinglePostCompleteSubscriber_COMPLETE_MASK ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscribersSinglePostCompleteSubscriber, COMPLETE_MASK, jlong)

inline jlong IoReactivexInternalSubscribersSinglePostCompleteSubscriber_get_REQUEST_MASK();
#define IoReactivexInternalSubscribersSinglePostCompleteSubscriber_REQUEST_MASK 9223372036854775807LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalSubscribersSinglePostCompleteSubscriber, REQUEST_MASK, jlong)

FOUNDATION_EXPORT void IoReactivexInternalSubscribersSinglePostCompleteSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalSubscribersSinglePostCompleteSubscriber *self, id<OrgReactivestreamsSubscriber> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSubscribersSinglePostCompleteSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSubscribersSinglePostCompleteSubscriber")
