//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSubscribersForEachWhileSubscriber")
#ifdef RESTRICT_IoReactivexInternalSubscribersForEachWhileSubscriber
#define INCLUDE_ALL_IoReactivexInternalSubscribersForEachWhileSubscriber 0
#else
#define INCLUDE_ALL_IoReactivexInternalSubscribersForEachWhileSubscriber 1
#endif
#undef RESTRICT_IoReactivexInternalSubscribersForEachWhileSubscriber

#if !defined (IoReactivexInternalSubscribersForEachWhileSubscriber_) && (INCLUDE_ALL_IoReactivexInternalSubscribersForEachWhileSubscriber || defined(INCLUDE_IoReactivexInternalSubscribersForEachWhileSubscriber))
#define IoReactivexInternalSubscribersForEachWhileSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsConsumer;
@protocol IoReactivexFunctionsPredicate;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalSubscribersForEachWhileSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexFunctionsPredicate> onNext_;
  id<IoReactivexFunctionsConsumer> onError_;
  id<IoReactivexFunctionsAction> onComplete_;
  jboolean done_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)onNext
                     withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                       withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete;

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSubscribersForEachWhileSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersForEachWhileSubscriber, onNext_, id<IoReactivexFunctionsPredicate>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersForEachWhileSubscriber, onError_, id<IoReactivexFunctionsConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSubscribersForEachWhileSubscriber, onComplete_, id<IoReactivexFunctionsAction>)

FOUNDATION_EXPORT void IoReactivexInternalSubscribersForEachWhileSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(IoReactivexInternalSubscribersForEachWhileSubscriber *self, id<IoReactivexFunctionsPredicate> onNext, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete);

FOUNDATION_EXPORT IoReactivexInternalSubscribersForEachWhileSubscriber *new_IoReactivexInternalSubscribersForEachWhileSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexFunctionsPredicate> onNext, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSubscribersForEachWhileSubscriber *create_IoReactivexInternalSubscribersForEachWhileSubscriber_initWithIoReactivexFunctionsPredicate_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexFunctionsPredicate> onNext, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSubscribersForEachWhileSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSubscribersForEachWhileSubscriber")
