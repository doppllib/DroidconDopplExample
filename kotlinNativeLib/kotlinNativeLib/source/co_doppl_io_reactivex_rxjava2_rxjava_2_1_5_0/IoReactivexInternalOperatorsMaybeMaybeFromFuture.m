//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexInternalOperatorsMaybeMaybeFromFuture.h"
#include "IoReactivexMaybe.h"
#include "IoReactivexMaybeObserver.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"

@implementation IoReactivexInternalOperatorsMaybeMaybeFromFuture

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                        withLong:(jlong)timeout
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  IoReactivexInternalOperatorsMaybeMaybeFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(self, future, timeout, unit);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  id<IoReactivexDisposablesDisposable> d = IoReactivexDisposablesDisposables_empty();
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (![((id<IoReactivexDisposablesDisposable>) nil_chk(d)) isDisposed]) {
    id v;
    @try {
      if (timeout_ <= 0LL) {
        v = [((id<JavaUtilConcurrentFuture>) nil_chk(future_)) get];
      }
      else {
        v = [((id<JavaUtilConcurrentFuture>) nil_chk(future_)) getWithLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
      }
    }
    @catch (JavaLangInterruptedException *ex) {
      if (![d isDisposed]) {
        [observer onErrorWithJavaLangThrowable:ex];
      }
      return;
    }
    @catch (JavaUtilConcurrentExecutionException *ex) {
      if (![d isDisposed]) {
        [observer onErrorWithJavaLangThrowable:[ex getCause]];
      }
      return;
    }
    @catch (JavaUtilConcurrentTimeoutException *ex) {
      if (![d isDisposed]) {
        [observer onErrorWithJavaLangThrowable:ex];
      }
      return;
    }
    if (![d isDisposed]) {
      if (v == nil) {
        [observer onComplete];
      }
      else {
        [observer onSuccessWithId:v];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(future_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "future_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;JLJavaUtilConcurrentTimeUnit;", "(Ljava/util/concurrent/Future<+TT;>;JLjava/util/concurrent/TimeUnit;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "Ljava/util/concurrent/Future<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFromFuture = { "MaybeFromFuture", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFromFuture;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(IoReactivexInternalOperatorsMaybeMaybeFromFuture *self, id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->future_, future);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
}

IoReactivexInternalOperatorsMaybeMaybeFromFuture *new_IoReactivexInternalOperatorsMaybeMaybeFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

IoReactivexInternalOperatorsMaybeMaybeFromFuture *create_IoReactivexInternalOperatorsMaybeMaybeFromFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromFuture, initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_, future, timeout, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFromFuture)
