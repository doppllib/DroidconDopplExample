//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleEquals
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleEquals

#if !defined (IoReactivexInternalOperatorsSingleSingleEquals_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleEquals))
#define IoReactivexInternalOperatorsSingleSingleEquals_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

@class JavaLangBoolean;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleEquals : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> first_;
  id<IoReactivexSingleSource> second_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)first
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)second;

- (JavaLangBoolean *)blockingGet;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleEquals)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals, first_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals, second_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleEquals *self, id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleEquals *new_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleEquals *create_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleEquals)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver))
#define IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

@class IOSObjectArray;
@class IoReactivexDisposablesCompositeDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver : NSObject < IoReactivexSingleObserver > {
 @public
  jint index_;
  IoReactivexDisposablesCompositeDisposable *set_;
  IOSObjectArray *values_;
  id<IoReactivexSingleObserver> s_;
  JavaUtilConcurrentAtomicAtomicInteger *count_;
}

#pragma mark Public

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)index
withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
          withNSObjectArray:(IOSObjectArray *)values
withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)count;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, s_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver, count_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *self, jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *new_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver *create_IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver_initWithInt_withIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withIoReactivexSingleObserver_withJavaUtilConcurrentAtomicAtomicInteger_(jint index, IoReactivexDisposablesCompositeDisposable *set, IOSObjectArray *values, id<IoReactivexSingleObserver> s, JavaUtilConcurrentAtomicAtomicInteger *count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleEquals_InnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleEquals")
