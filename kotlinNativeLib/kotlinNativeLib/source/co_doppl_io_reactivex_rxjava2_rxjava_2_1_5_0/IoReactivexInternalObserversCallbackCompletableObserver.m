//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsOnErrorNotImplementedException.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalObserversCallbackCompletableObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalObserversCallbackCompletableObserver_get_serialVersionUID();
#define IoReactivexInternalObserversCallbackCompletableObserver_serialVersionUID -4361286194466301354LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalObserversCallbackCompletableObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalObserversCallbackCompletableObserver

- (instancetype)initWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete {
  IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsAction_(self, onComplete);
  return self;
}

- (instancetype)initWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete {
  IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(self, onError, onComplete);
  return self;
}

- (void)acceptWithId:(JavaLangThrowable *)e {
  IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(create_IoReactivexExceptionsOnErrorNotImplementedException_initWithJavaLangThrowable_(e));
}

- (void)onComplete {
  @try {
    [((id<IoReactivexFunctionsAction>) nil_chk(onComplete_)) run];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
  [self lazySetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(onError_)) acceptWithId:e];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(ex);
  }
  [self lazySetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return [self get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (jboolean)hasCustomOnError {
  return onError_ != self;
}

- (void)dealloc {
  RELEASE_(onError_);
  RELEASE_(onComplete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFunctionsAction:);
  methods[1].selector = @selector(initWithIoReactivexFunctionsConsumer:withIoReactivexFunctionsAction:);
  methods[2].selector = @selector(acceptWithId:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[5].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  methods[8].selector = @selector(hasCustomOnError);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalObserversCallbackCompletableObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "onError_", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
    { "onComplete_", "LIoReactivexFunctionsAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFunctionsAction;", "LIoReactivexFunctionsConsumer;LIoReactivexFunctionsAction;", "(Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;Lio/reactivex/functions/Action;)V", "accept", "LJavaLangThrowable;", "onError", "onSubscribe", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/Disposable;Lio/reactivex/functions/Consumer<Ljava/lang/Throwable;>;Lio/reactivex/observers/LambdaConsumerIntrospection;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversCallbackCompletableObserver = { "CallbackCompletableObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x11, 9, 3, -1, -1, -1, 9, -1 };
  return &_IoReactivexInternalObserversCallbackCompletableObserver;
}

@end

void IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsAction_(IoReactivexInternalObserversCallbackCompletableObserver *self, id<IoReactivexFunctionsAction> onComplete) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->onError_, self);
  JreStrongAssign(&self->onComplete_, onComplete);
}

IoReactivexInternalObserversCallbackCompletableObserver *new_IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsAction_(id<IoReactivexFunctionsAction> onComplete) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversCallbackCompletableObserver, initWithIoReactivexFunctionsAction_, onComplete)
}

IoReactivexInternalObserversCallbackCompletableObserver *create_IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsAction_(id<IoReactivexFunctionsAction> onComplete) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversCallbackCompletableObserver, initWithIoReactivexFunctionsAction_, onComplete)
}

void IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(IoReactivexInternalObserversCallbackCompletableObserver *self, id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->onError_, onError);
  JreStrongAssign(&self->onComplete_, onComplete);
}

IoReactivexInternalObserversCallbackCompletableObserver *new_IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversCallbackCompletableObserver, initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_, onError, onComplete)
}

IoReactivexInternalObserversCallbackCompletableObserver *create_IoReactivexInternalObserversCallbackCompletableObserver_initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexFunctionsConsumer> onError, id<IoReactivexFunctionsAction> onComplete) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversCallbackCompletableObserver, initWithIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_, onError, onComplete)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversCallbackCompletableObserver)
