//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableObserveOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableObserveOn

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableObserveOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableObserveOn))
#define IoReactivexInternalOperatorsObservableObservableObserveOn_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableObserveOn : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
  jboolean delayError_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                        withBoolean:(jboolean)delayError
                                            withInt:(jint)bufferSize;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableObserveOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableObserveOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_withBoolean_withInt_(IoReactivexInternalOperatorsObservableObservableObserveOn *self, id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableObserveOn *new_IoReactivexInternalOperatorsObservableObservableObserveOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_withBoolean_withInt_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler, jboolean delayError, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableObserveOn *create_IoReactivexInternalOperatorsObservableObservableObserveOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_withBoolean_withInt_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler, jboolean delayError, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableObserveOn)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver))
#define IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver_

#define RESTRICT_IoReactivexInternalObserversBasicIntQueueDisposable 1
#define INCLUDE_IoReactivexInternalObserversBasicIntQueueDisposable 1
#include "IoReactivexInternalObserversBasicIntQueueDisposable.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler_Worker;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexInternalFuseableSimpleQueue;

@interface IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver : IoReactivexInternalObserversBasicIntQueueDisposable < IoReactivexObserver, JavaLangRunnable > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexScheduler_Worker *worker_;
  jboolean delayError_;
  jint bufferSize_;
  id<IoReactivexInternalFuseableSimpleQueue> queue_;
  id<IoReactivexDisposablesDisposable> s_;
  JavaLangThrowable *error_;
  volatile_jboolean done_;
  volatile_jboolean cancelled_;
  jint sourceMode_;
  jboolean outputFused_;
}

#pragma mark Public

- (void)clear;

- (void)dispose;

- (NSUInteger)hash;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (id __nullable)poll;

- (jint)requestFusionWithInt:(jint)mode;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                withBoolean:(jboolean)delayError
                                    withInt:(jint)bufferSize;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
               withIoReactivexObserver:(id<IoReactivexObserver>)a;

- (void)drainFused;

- (void)drainNormal;

- (void)schedule;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver, queue_, id<IoReactivexInternalFuseableSimpleQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver, error_, JavaLangThrowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver_initWithIoReactivexObserver_withIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver *self, id<IoReactivexObserver> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver *new_IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver_initWithIoReactivexObserver_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexObserver> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver *create_IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver_initWithIoReactivexObserver_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexObserver> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableObserveOn_ObserveOnObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableObserveOn")
