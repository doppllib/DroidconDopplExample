//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableFlowableZip.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsPublisher.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_serialVersionUID -2434867452883857743LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_serialVersionUID -4627193790118206028LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableZip

- (instancetype)initWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                    withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable
                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                                 withInt:(jint)bufferSize
                                             withBoolean:(jboolean)delayError {
  IoReactivexInternalOperatorsFlowableFlowableZip_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(self, sources, sourcesIterable, zipper, bufferSize, delayError);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IOSObjectArray *sources = self->sources_;
  jint count = 0;
  if (sources == nil) {
    sources = [IOSObjectArray arrayWithLength:8 type:OrgReactivestreamsPublisher_class_()];
    for (id<OrgReactivestreamsPublisher> __strong p in nil_chk(sourcesIterable_)) {
      if (count == sources->size_) {
        IOSObjectArray *b = [IOSObjectArray arrayWithLength:count + (JreRShift32(count, 2)) type:OrgReactivestreamsPublisher_class_()];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sources, 0, b, 0, count);
        sources = b;
      }
      IOSObjectArray_Set(sources, count++, p);
    }
  }
  else {
    count = sources->size_;
  }
  if (count == 0) {
    IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(s);
    return;
  }
  IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *coordinator = create_IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(s, zipper_, count, bufferSize_, delayError_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:coordinator];
  [coordinator subscribeWithOrgReactivestreamsPublisherArray:sources withInt:count];
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(sourcesIterable_);
  RELEASE_(zipper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisherArray:withJavaLangIterable:withIoReactivexFunctionsFunction:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "sourcesIterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "zipper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgReactivestreamsPublisher;LJavaLangIterable;LIoReactivexFunctionsFunction;IZ", "([Lorg/reactivestreams/Publisher<+TT;>;Ljava/lang/Iterable<+Lorg/reactivestreams/Publisher<+TT;>;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "[Lorg/reactivestreams/Publisher<+TT;>;", "Ljava/lang/Iterable<+Lorg/reactivestreams/Publisher<+TT;>;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator;LIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableZip = { "FlowableZip", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, 8, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableZip;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableZip_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableZip *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->sourcesIterable_, sourcesIterable);
  JreStrongAssign(&self->zipper_, zipper);
  self->bufferSize_ = bufferSize;
  self->delayError_ = delayError;
}

IoReactivexInternalOperatorsFlowableFlowableZip *new_IoReactivexInternalOperatorsFlowableFlowableZip_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip, initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_, sources, sourcesIterable, zipper, bufferSize, delayError)
}

IoReactivexInternalOperatorsFlowableFlowableZip *create_IoReactivexInternalOperatorsFlowableFlowableZip_initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable, id<IoReactivexFunctionsFunction> zipper, jint bufferSize, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip, initWithOrgReactivestreamsPublisherArray_withJavaLangIterable_withIoReactivexFunctionsFunction_withInt_withBoolean_, sources, sourcesIterable, zipper, bufferSize, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableZip)

@implementation IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper
                                             withInt:(jint)n
                                             withInt:(jint)prefetch
                                         withBoolean:(jboolean)delayErrors {
  IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(self, actual, zipper, n, prefetch, delayErrors);
  return self;
}

- (void)subscribeWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)sources
                                              withInt:(jint)n {
  IOSObjectArray *a = subscribers_;
  for (jint i = 0; i < n; i++) {
    if (JreLoadVolatileBoolean(&cancelled_) || (!delayErrors_ && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get] != nil)) {
      return;
    }
    [((id<OrgReactivestreamsPublisher>) nil_chk(IOSObjectArray_Get(nil_chk(sources), i))) subscribeWithOrgReactivestreamsSubscriber:IOSObjectArray_Get(nil_chk(a), i)];
  }
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self cancelAll];
  }
}

- (void)errorWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber:(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *)inner
                                                         withJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:e]) {
    JreAssignVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *) nil_chk(inner))->done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)cancelAll {
  {
    IOSObjectArray *a__ = subscribers_;
    IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *s = *b__++;
      [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *) nil_chk(s)) cancel];
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  IOSObjectArray *qs = subscribers_;
  jint n = ((IOSObjectArray *) nil_chk(qs))->size_;
  IOSObjectArray *values = current_;
  jint missed = 1;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (r != e) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (!delayErrors_ && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get] != nil) {
        [self cancelAll];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate]];
        return;
      }
      jboolean empty = false;
      for (jint j = 0; j < n; j++) {
        IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *inner = IOSObjectArray_Get(qs, j);
        if (IOSObjectArray_Get(nil_chk(values), j) == nil) {
          @try {
            jboolean d = JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *) nil_chk(inner))->done_);
            id<IoReactivexInternalFuseableSimpleQueue> q = inner->queue_;
            id v = q != nil ? [q poll] : nil;
            jboolean sourceEmpty = v == nil;
            if (d && sourceEmpty) {
              [self cancelAll];
              JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
              if (ex != nil) {
                [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              }
              else {
                [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
              }
              return;
            }
            if (!sourceEmpty) {
              IOSObjectArray_Set(values, j, v);
            }
            else {
              empty = true;
            }
          }
          @catch (JavaLangThrowable *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex];
            if (!delayErrors_) {
              [self cancelAll];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
            empty = true;
          }
        }
      }
      if (empty) {
        break;
      }
      id v;
      @try {
        v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(zipper_)) applyWithId:[((IOSObjectArray *) nil_chk(values)) java_clone]], @"The zipper returned a null value");
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [self cancelAll];
        [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
        return;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
      JavaUtilArrays_fillWithNSObjectArray_withId_(values, nil);
    }
    if (r == e) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (!delayErrors_ && [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get] != nil) {
        [self cancelAll];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) terminate]];
        return;
      }
      for (jint j = 0; j < n; j++) {
        IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *inner = IOSObjectArray_Get(qs, j);
        if (IOSObjectArray_Get(nil_chk(values), j) == nil) {
          @try {
            jboolean d = JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *) nil_chk(inner))->done_);
            id<IoReactivexInternalFuseableSimpleQueue> q = inner->queue_;
            id v = q != nil ? [q poll] : nil;
            jboolean empty = v == nil;
            if (d && empty) {
              [self cancelAll];
              JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) get];
              if (ex != nil) {
                [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              }
              else {
                [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
              }
              return;
            }
            if (!empty) {
              IOSObjectArray_Set(values, j, v);
            }
          }
          @catch (JavaLangThrowable *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
            [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(errors_)) addThrowableWithJavaLangThrowable:ex];
            if (!delayErrors_) {
              [self cancelAll];
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[errors_ terminate]];
              return;
            }
          }
        }
      }
    }
    if (e != 0LL) {
      {
        IOSObjectArray *a__ = qs;
        IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber * const *b__ = a__->buffer_;
        IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *inner = *b__++;
          [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *) nil_chk(inner)) requestWithLong:e];
        }
      }
      if (r != JavaLangLong_MAX_VALUE) {
        [requested_ addAndGetWithLong:-e];
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(subscribers_);
  RELEASE_(zipper_);
  RELEASE_(requested_);
  RELEASE_(errors_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withInt:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsPublisherArray:withInt:);
  methods[2].selector = @selector(requestWithLong:);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(errorWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber:withJavaLangThrowable:);
  methods[5].selector = @selector(cancelAll);
  methods[6].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "subscribers_", "[LIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "zipper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errors_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayErrors_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "current_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;IIZ", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;IIZ)V", "subscribe", "[LOrgReactivestreamsPublisher;I", "([Lorg/reactivestreams/Publisher<+TT;>;I)V", "request", "J", "error", "LIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber;LJavaLangThrowable;", "(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber<TT;TR;>;Ljava/lang/Throwable;)V", "Lorg/reactivestreams/Subscriber<-TR;>;", "[Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber<TT;TR;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "LIoReactivexInternalOperatorsFlowableFlowableZip;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator = { "ZipCoordinator", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 9, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> zipper, jint n, jint prefetch, jboolean delayErrors) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->zipper_, zipper);
  self->delayErrors_ = delayErrors;
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:n type:IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(a, i, new_IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_(self, prefetch));
  }
  JreStrongAssignAndConsume(&self->current_, [IOSObjectArray newArrayWithLength:n type:NSObject_class_()]);
  JreStrongAssign(&self->subscribers_, a);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->errors_, new_IoReactivexInternalUtilAtomicThrowable_init());
}

IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *new_IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> zipper, jint n, jint prefetch, jboolean delayErrors) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_, actual, zipper, n, prefetch, delayErrors)
}

IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *create_IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> zipper, jint n, jint prefetch, jboolean delayErrors) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withInt_withBoolean_, actual, zipper, n, prefetch, delayErrors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator)

@implementation IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator:(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *)parent
                                                                               withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_(self, parent, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> f = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(f)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY | IoReactivexInternalFuseableQueueFuseable_BOUNDARY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, f);
        JreAssignVolatileBoolean(&done_, true);
        [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *) nil_chk(parent_)) drain];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreStrongAssign(&queue_, f);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_));
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)onNextWithId:(id)t {
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_ASYNC) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:t];
  }
  [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *) nil_chk(parent_)) drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *) nil_chk(parent_)) errorWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber:self withJavaLangThrowable:t];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *) nil_chk(parent_)) drain];
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)requestWithLong:(jlong)n {
  if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = produced_ + n;
    if (p >= limit_) {
      produced_ = 0LL;
      [((id<OrgReactivestreamsSubscription>) nil_chk([self get])) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
  }
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator;I", "(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator<TT;TR;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator<TT;TR;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableZip;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber = { "ZipSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 8, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *parent, jint prefetch) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->prefetch_ = prefetch;
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
}

IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *parent, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_, parent, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_(IoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator *parent, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableZip_ZipCoordinator_withInt_, parent, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableZip_ZipSubscriber)
