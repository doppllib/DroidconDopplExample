//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor")
#ifdef RESTRICT_IoReactivexProcessorsAsyncProcessor
#define INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor 0
#else
#define INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor 1
#endif
#undef RESTRICT_IoReactivexProcessorsAsyncProcessor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexProcessorsAsyncProcessor_) && (INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor || defined(INCLUDE_IoReactivexProcessorsAsyncProcessor))
#define IoReactivexProcessorsAsyncProcessor_

#define RESTRICT_IoReactivexProcessorsFlowableProcessor 1
#define INCLUDE_IoReactivexProcessorsFlowableProcessor 1
#include "IoReactivexProcessorsFlowableProcessor.h"

@class IOSObjectArray;
@class IoReactivexProcessorsAsyncProcessor_AsyncSubscription;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexProcessorsAsyncProcessor : IoReactivexProcessorsFlowableProcessor {
 @public
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaLangThrowable *error_;
  id value_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexProcessorsAsyncProcessor * __nonnull)create;

- (JavaLangThrowable *)getThrowable;

- (id)getValue;

- (IOSObjectArray *)getValues;

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)array;

- (jboolean)hasComplete;

- (jboolean)hasSubscribers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)addWithIoReactivexProcessorsAsyncProcessor_AsyncSubscription:(IoReactivexProcessorsAsyncProcessor_AsyncSubscription *)ps;

- (void)nullOnNext;

- (void)removeWithIoReactivexProcessorsAsyncProcessor_AsyncSubscription:(IoReactivexProcessorsAsyncProcessor_AsyncSubscription *)ps;

@end

J2OBJC_STATIC_INIT(IoReactivexProcessorsAsyncProcessor)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsAsyncProcessor, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsAsyncProcessor, error_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsAsyncProcessor, value_, id)

inline IOSObjectArray *IoReactivexProcessorsAsyncProcessor_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsAsyncProcessor_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsAsyncProcessor, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexProcessorsAsyncProcessor_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexProcessorsAsyncProcessor_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexProcessorsAsyncProcessor, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexProcessorsAsyncProcessor *IoReactivexProcessorsAsyncProcessor_create();

FOUNDATION_EXPORT void IoReactivexProcessorsAsyncProcessor_init(IoReactivexProcessorsAsyncProcessor *self);

FOUNDATION_EXPORT IoReactivexProcessorsAsyncProcessor *new_IoReactivexProcessorsAsyncProcessor_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsAsyncProcessor *create_IoReactivexProcessorsAsyncProcessor_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsAsyncProcessor)

#endif

#if !defined (IoReactivexProcessorsAsyncProcessor_AsyncSubscription_) && (INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor || defined(INCLUDE_IoReactivexProcessorsAsyncProcessor_AsyncSubscription))
#define IoReactivexProcessorsAsyncProcessor_AsyncSubscription_

#define RESTRICT_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#include "IoReactivexInternalSubscriptionsDeferredScalarSubscription.h"

@class IoReactivexProcessorsAsyncProcessor;
@class JavaLangThrowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexProcessorsAsyncProcessor_AsyncSubscription : IoReactivexInternalSubscriptionsDeferredScalarSubscription {
 @public
  IoReactivexProcessorsAsyncProcessor *parent_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
             withIoReactivexProcessorsAsyncProcessor:(IoReactivexProcessorsAsyncProcessor *)parent;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsAsyncProcessor_AsyncSubscription)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsAsyncProcessor_AsyncSubscription, parent_, IoReactivexProcessorsAsyncProcessor *)

FOUNDATION_EXPORT void IoReactivexProcessorsAsyncProcessor_AsyncSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsAsyncProcessor_(IoReactivexProcessorsAsyncProcessor_AsyncSubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsAsyncProcessor *parent);

FOUNDATION_EXPORT IoReactivexProcessorsAsyncProcessor_AsyncSubscription *new_IoReactivexProcessorsAsyncProcessor_AsyncSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsAsyncProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsAsyncProcessor *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsAsyncProcessor_AsyncSubscription *create_IoReactivexProcessorsAsyncProcessor_AsyncSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsAsyncProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsAsyncProcessor *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsAsyncProcessor_AsyncSubscription)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexProcessorsAsyncProcessor")
