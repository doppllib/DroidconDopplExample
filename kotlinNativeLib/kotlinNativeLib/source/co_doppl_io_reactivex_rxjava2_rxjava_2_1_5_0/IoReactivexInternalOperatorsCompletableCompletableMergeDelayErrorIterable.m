//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray.h"
#include "IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources {
  IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable_initWithJavaLangIterable_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  id<JavaUtilIterator> iterator;
  @try {
    iterator = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaLangIterable>) nil_chk(sources_)) iterator], @"The source iterator returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [s onErrorWithJavaLangThrowable:e];
    return;
  }
  JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1);
  IoReactivexInternalUtilAtomicThrowable *error = create_IoReactivexInternalUtilAtomicThrowable_init();
  for (; ; ) {
    if ([set isDisposed]) {
      return;
    }
    jboolean b;
    @try {
      b = [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext];
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [error addThrowableWithJavaLangThrowable:e];
      break;
    }
    if (!b) {
      break;
    }
    if ([set isDisposed]) {
      return;
    }
    id<IoReactivexCompletableSource> c;
    @try {
      c = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([iterator next], @"The iterator returned a null CompletableSource");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [error addThrowableWithJavaLangThrowable:e];
      break;
    }
    if ([set isDisposed]) {
      return;
    }
    [wip getAndIncrement];
    [((id<IoReactivexCompletableSource>) nil_chk(c)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(s, set, error, wip)];
  }
  if ([wip decrementAndGet] == 0) {
    JavaLangThrowable *ex = [error terminate];
    if (ex == nil) {
      [s onComplete];
    }
    else {
      [s onErrorWithJavaLangThrowable:ex];
    }
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable = { "CompletableMergeDelayErrorIterable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable *self, id<JavaLangIterable> sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable *new_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable, initWithJavaLangIterable_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable *create_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable, initWithJavaLangIterable_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorIterable)
