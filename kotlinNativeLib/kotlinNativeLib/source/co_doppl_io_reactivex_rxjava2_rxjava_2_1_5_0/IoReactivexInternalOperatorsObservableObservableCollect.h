//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableCollect
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableCollect

#if !defined (IoReactivexInternalOperatorsObservableObservableCollect_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableCollect))
#define IoReactivexInternalOperatorsObservableObservableCollect_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsObservableObservableCollect : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> initialSupplier_;
  id<IoReactivexFunctionsBiConsumer> collector_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
                 withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableCollect)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect, initialSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect, collector_, id<IoReactivexFunctionsBiConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableCollect_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsObservableObservableCollect *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableCollect *new_IoReactivexInternalOperatorsObservableObservableCollect_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableCollect *create_IoReactivexInternalOperatorsObservableObservableCollect_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableCollect)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver))
#define IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsBiConsumer;

@interface IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsBiConsumer> collector_;
  id u_;
  id<IoReactivexDisposablesDisposable> s_;
  jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                     withId:(id)u
         withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver, collector_, id<IoReactivexFunctionsBiConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver, u_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver *self, id<IoReactivexObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver *new_IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver *create_IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver_initWithIoReactivexObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableCollect_CollectObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableCollect")
