//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalQueueSpscLinkedArrayQueue.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexProcessorsFlowableProcessor.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$1();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$2();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$3();

__attribute__((unused)) static IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$4();

@interface IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription () {
 @public
  IoReactivexProcessorsUnicastProcessor *this$0_;
}

@end

inline jlong IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_get_serialVersionUID();
#define IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_serialVersionUID -4896760517184205454LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription, serialVersionUID, jlong)

@implementation IoReactivexProcessorsUnicastProcessor

+ (IoReactivexProcessorsUnicastProcessor *)create {
  return IoReactivexProcessorsUnicastProcessor_create();
}

+ (IoReactivexProcessorsUnicastProcessor *)createWithInt:(jint)capacityHint {
  return IoReactivexProcessorsUnicastProcessor_createWithInt_(capacityHint);
}

+ (IoReactivexProcessorsUnicastProcessor *)createWithBoolean:(jboolean)delayError {
  return IoReactivexProcessorsUnicastProcessor_createWithBoolean_(delayError);
}

+ (IoReactivexProcessorsUnicastProcessor *)createWithInt:(jint)capacityHint
                                    withJavaLangRunnable:(id<JavaLangRunnable>)onCancelled {
  return IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(capacityHint, onCancelled);
}

+ (IoReactivexProcessorsUnicastProcessor *)createWithInt:(jint)capacityHint
                                    withJavaLangRunnable:(id<JavaLangRunnable>)onCancelled
                                             withBoolean:(jboolean)delayError {
  return IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_withBoolean_(capacityHint, onCancelled, delayError);
}

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexProcessorsUnicastProcessor_initWithInt_(self, capacityHint);
  return self;
}

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate {
  IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(self, capacityHint, onTerminate);
  return self;
}

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate
                withBoolean:(jboolean)delayError {
  IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(self, capacityHint, onTerminate, delayError);
  return self;
}

- (void)doTerminate {
  id<JavaLangRunnable> r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(onTerminate_)) get];
  if (r != nil && [onTerminate_ compareAndSetWithId:r withId:nil]) {
    [r run];
  }
}

- (void)drainRegularWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jboolean failFast = !delayError_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (r != e) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id t = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      jboolean empty = t == nil;
      if ([self checkTerminatedWithBoolean:failFast withBoolean:d withBoolean:empty withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:t];
      e++;
    }
    if (r == e && [self checkTerminatedWithBoolean:failFast withBoolean:JreLoadVolatileBoolean(&done_) withBoolean:[((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) isEmpty] withOrgReactivestreamsSubscriber:a withIoReactivexInternalQueueSpscLinkedArrayQueue:q]) {
      return;
    }
    if (e != 0 && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    missed = [((IoReactivexInternalSubscriptionsBasicIntQueueSubscription *) nil_chk(wip_)) addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drainFusedWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  jboolean failFast = !delayError_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    if (failFast && d && error_ != nil) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:error_];
      return;
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:nil];
    if (d) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      JavaLangThrowable *ex = error_;
      if (ex != nil) {
        [a onErrorWithJavaLangThrowable:ex];
      }
      else {
        [a onComplete];
      }
      return;
    }
    missed = [((IoReactivexInternalSubscriptionsBasicIntQueueSubscription *) nil_chk(wip_)) addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drain {
  if ([((IoReactivexInternalSubscriptionsBasicIntQueueSubscription *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get];
  for (; ; ) {
    if (a != nil) {
      if (enableOperatorFusion_) {
        [self drainFusedWithOrgReactivestreamsSubscriber:a];
      }
      else {
        [self drainRegularWithOrgReactivestreamsSubscriber:a];
      }
      return;
    }
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    a = [actual_ get];
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)failFast
                           withBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
    return true;
  }
  if (d) {
    if (failFast && error_ != nil) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:error_];
      return true;
    }
    if (empty) {
      JavaLangThrowable *e = error_;
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      if (e != nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
      }
      else {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      }
      return true;
    }
  }
  return false;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&cancelled_)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
  }
  else {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  if (t == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:t];
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&cancelled_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self doTerminate];
  [self drain];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self doTerminate];
  [self drain];
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) get] && [once_ compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:wip_];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) setWithId:s];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      [actual_ lazySetWithId:nil];
    }
    else {
      [self drain];
    }
  }
  else {
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(create_JavaLangIllegalStateException_initWithNSString_(@"This processor allows only a single Subscriber"), s);
  }
}

- (jboolean)hasSubscribers {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get] != nil;
}

- (JavaLangThrowable *)getThrowable {
  if (JreLoadVolatileBoolean(&done_)) {
    return error_;
  }
  return nil;
}

- (jboolean)hasComplete {
  return JreLoadVolatileBoolean(&done_) && error_ == nil;
}

- (jboolean)hasThrowable {
  return JreLoadVolatileBoolean(&done_) && error_ != nil;
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(onTerminate_);
  RELEASE_(error_);
  RELEASE_(actual_);
  RELEASE_(once_);
  RELEASE_(wip_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexProcessorsUnicastProcessor;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, "LIoReactivexProcessorsUnicastProcessor;", 0x9, 2, 3, -1, 4, 5, -1 },
    { NULL, "LIoReactivexProcessorsUnicastProcessor;", 0x9, 2, 6, -1, 7, 8, -1 },
    { NULL, "LIoReactivexProcessorsUnicastProcessor;", 0x9, 2, 9, -1, 10, 11, -1 },
    { NULL, "LIoReactivexProcessorsUnicastProcessor;", 0x9, 2, 12, -1, 13, 14, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x0, 18, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithInt:);
  methods[2].selector = @selector(createWithBoolean:);
  methods[3].selector = @selector(createWithInt:withJavaLangRunnable:);
  methods[4].selector = @selector(createWithInt:withJavaLangRunnable:withBoolean:);
  methods[5].selector = @selector(initWithInt:);
  methods[6].selector = @selector(initWithInt:withJavaLangRunnable:);
  methods[7].selector = @selector(initWithInt:withJavaLangRunnable:withBoolean:);
  methods[8].selector = @selector(doTerminate);
  methods[9].selector = @selector(drainRegularWithOrgReactivestreamsSubscriber:);
  methods[10].selector = @selector(drainFusedWithOrgReactivestreamsSubscriber:);
  methods[11].selector = @selector(drain);
  methods[12].selector = @selector(checkTerminatedWithBoolean:withBoolean:withBoolean:withOrgReactivestreamsSubscriber:withIoReactivexInternalQueueSpscLinkedArrayQueue:);
  methods[13].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[14].selector = @selector(onNextWithId:);
  methods[15].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[16].selector = @selector(onComplete);
  methods[17].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[18].selector = @selector(hasSubscribers);
  methods[19].selector = @selector(getThrowable);
  methods[20].selector = @selector(hasComplete);
  methods[21].selector = @selector(hasThrowable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 30, -1 },
    { "onTerminate_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 31, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 32, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LIoReactivexInternalSubscriptionsBasicIntQueueSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, 33, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "enableOperatorFusion_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/processors/UnicastProcessor<TT;>;", (void *)&IoReactivexProcessorsUnicastProcessor__Annotations$0, "create", "I", "<T:Ljava/lang/Object;>(I)Lio/reactivex/processors/UnicastProcessor<TT;>;", (void *)&IoReactivexProcessorsUnicastProcessor__Annotations$1, "Z", "<T:Ljava/lang/Object;>(Z)Lio/reactivex/processors/UnicastProcessor<TT;>;", (void *)&IoReactivexProcessorsUnicastProcessor__Annotations$2, "ILJavaLangRunnable;", "<T:Ljava/lang/Object;>(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor<TT;>;", (void *)&IoReactivexProcessorsUnicastProcessor__Annotations$3, "ILJavaLangRunnable;Z", "<T:Ljava/lang/Object;>(ILjava/lang/Runnable;Z)Lio/reactivex/processors/UnicastProcessor<TT;>;", (void *)&IoReactivexProcessorsUnicastProcessor__Annotations$4, "drainRegular", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "drainFused", "checkTerminated", "ZZZLOrgReactivestreamsSubscriber;LIoReactivexInternalQueueSpscLinkedArrayQueue;", "(ZZZLorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;)Z", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "subscribeActual", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Runnable;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscriber<-TT;>;>;", "Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;", "LIoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription;", "<T:Ljava/lang/Object;>Lio/reactivex/processors/FlowableProcessor<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsUnicastProcessor = { "UnicastProcessor", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x11, 22, 11, -1, 34, -1, 35, -1 };
  return &_IoReactivexProcessorsUnicastProcessor;
}

@end

IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_create() {
  IoReactivexProcessorsUnicastProcessor_initialize();
  return create_IoReactivexProcessorsUnicastProcessor_initWithInt_(IoReactivexFlowable_bufferSize());
}

IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithInt_(jint capacityHint) {
  IoReactivexProcessorsUnicastProcessor_initialize();
  return create_IoReactivexProcessorsUnicastProcessor_initWithInt_(capacityHint);
}

IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithBoolean_(jboolean delayError) {
  IoReactivexProcessorsUnicastProcessor_initialize();
  return create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(IoReactivexFlowable_bufferSize(), nil, delayError);
}

IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onCancelled) {
  IoReactivexProcessorsUnicastProcessor_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onCancelled, @"onTerminate");
  return create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(capacityHint, onCancelled);
}

IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onCancelled, jboolean delayError) {
  IoReactivexProcessorsUnicastProcessor_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onCancelled, @"onTerminate");
  return create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(capacityHint, onCancelled, delayError);
}

void IoReactivexProcessorsUnicastProcessor_initWithInt_(IoReactivexProcessorsUnicastProcessor *self, jint capacityHint) {
  IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(self, capacityHint, nil, true);
}

IoReactivexProcessorsUnicastProcessor *new_IoReactivexProcessorsUnicastProcessor_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_, capacityHint)
}

IoReactivexProcessorsUnicastProcessor *create_IoReactivexProcessorsUnicastProcessor_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_, capacityHint)
}

void IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(IoReactivexProcessorsUnicastProcessor *self, jint capacityHint, id<JavaLangRunnable> onTerminate) {
  IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(self, capacityHint, onTerminate, true);
}

IoReactivexProcessorsUnicastProcessor *new_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_withJavaLangRunnable_, capacityHint, onTerminate)
}

IoReactivexProcessorsUnicastProcessor *create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_withJavaLangRunnable_, capacityHint, onTerminate)
}

void IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(IoReactivexProcessorsUnicastProcessor *self, jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError) {
  IoReactivexProcessorsFlowableProcessor_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint")));
  JreStrongAssignAndConsume(&self->onTerminate_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(onTerminate));
  self->delayError_ = delayError;
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->wip_, new_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(self));
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexProcessorsUnicastProcessor *new_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_withJavaLangRunnable_withBoolean_, capacityHint, onTerminate, delayError)
}

IoReactivexProcessorsUnicastProcessor *create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_withBoolean_(jint capacityHint, id<JavaLangRunnable> onTerminate, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsUnicastProcessor, initWithInt_withJavaLangRunnable_withBoolean_, capacityHint, onTerminate, delayError)
}

IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexProcessorsUnicastProcessor__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsUnicastProcessor)

@implementation IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription

- (instancetype)initWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)outer$ {
  IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(self, outer$);
  return self;
}

- (id __nullable)poll {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) poll];
}

- (jboolean)isEmpty {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) isEmpty];
}

- (void)clear {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) clear];
}

- (jint)requestFusionWithInt:(jint)requestedMode {
  if ((requestedMode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    this$0_->enableOperatorFusion_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(this$0_->requested_, n);
    [this$0_ drain];
  }
}

- (void)cancel {
  if (JreLoadVolatileBoolean(&this$0_->cancelled_)) {
    return;
  }
  JreAssignVolatileBoolean(&this$0_->cancelled_, true);
  [this$0_ doTerminate];
  if (!this$0_->enableOperatorFusion_) {
    if ([((IoReactivexInternalSubscriptionsBasicIntQueueSubscription *) nil_chk(this$0_->wip_)) getAndIncrement] == 0) {
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) clear];
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->actual_)) lazySetWithId:nil];
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexProcessorsUnicastProcessor:);
  methods[1].selector = @selector(poll);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(requestFusionWithInt:);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "requestFusion", "I", "request", "J", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexProcessorsUnicastProcessor;", "Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription = { "UnicastQueueSubscription", "io.reactivex.processors", ptrTable, methods, fields, 7, 0x10, 7, 2, 6, -1, -1, 7, -1 };
  return &_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription;
}

@end

void IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *self, IoReactivexProcessorsUnicastProcessor *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
}

IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *new_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription, initWithIoReactivexProcessorsUnicastProcessor_, outer$)
}

IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *create_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription, initWithIoReactivexProcessorsUnicastProcessor_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription)
