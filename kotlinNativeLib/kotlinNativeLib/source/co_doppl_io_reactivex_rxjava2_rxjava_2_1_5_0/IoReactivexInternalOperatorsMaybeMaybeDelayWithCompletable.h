//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable))
#define IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "IoReactivexMaybe.h"

@protocol IoReactivexCompletableSource;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable : IoReactivexMaybe {
 @public
  id<IoReactivexMaybeSource> source_;
  id<IoReactivexCompletableSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)subscriber;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable, source_, id<IoReactivexMaybeSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable, other_, id<IoReactivexCompletableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_initWithIoReactivexMaybeSource_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable *self, id<IoReactivexMaybeSource> source, id<IoReactivexCompletableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable *new_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_initWithIoReactivexMaybeSource_withIoReactivexCompletableSource_(id<IoReactivexMaybeSource> source, id<IoReactivexCompletableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable *create_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_initWithIoReactivexMaybeSource_withIoReactivexCompletableSource_(id<IoReactivexMaybeSource> source, id<IoReactivexCompletableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver))
#define IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexMaybeSource> source_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                      withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver, source_, id<IoReactivexMaybeSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver *new_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver *create_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_OtherObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver))
#define IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver : NSObject < IoReactivexMaybeObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *parent_;
  id<IoReactivexMaybeObserver> actual_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent
                                   withIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver, parent_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver, actual_, id<IoReactivexMaybeObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver *self, JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver *new_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver *create_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexMaybeObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable_DelayWithMainObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelayWithCompletable")
