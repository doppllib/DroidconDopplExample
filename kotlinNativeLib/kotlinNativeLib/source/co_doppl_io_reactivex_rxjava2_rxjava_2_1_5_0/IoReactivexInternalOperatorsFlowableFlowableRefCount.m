//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexDisposablesDisposables.h"
#include "IoReactivexFlowablesConnectableFlowable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableRefCount.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount ()

- (id<IoReactivexFunctionsConsumer>)onSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

- (id<IoReactivexDisposablesDisposable>)disconnectWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current;

@end

__attribute__((unused)) static id<IoReactivexFunctionsConsumer> IoReactivexInternalOperatorsFlowableFlowableRefCount_onSubscribeWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

__attribute__((unused)) static id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsFlowableFlowableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, IoReactivexDisposablesCompositeDisposable *current);

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableRefCount *this$0_;
}

@end

inline jlong IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_serialVersionUID 152064694420235350LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableRefCount *this$0_;
  id<OrgReactivestreamsSubscriber> subscriber_;
  JavaUtilConcurrentAtomicAtomicBoolean *writeLocked_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer, subscriber_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer, writeLocked_, JavaUtilConcurrentAtomicAtomicBoolean *)

@interface IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableRefCount *this$0_;
  IoReactivexDisposablesCompositeDisposable *current_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask, current_, IoReactivexDisposablesCompositeDisposable *)

@implementation IoReactivexInternalOperatorsFlowableFlowableRefCount

- (instancetype)initWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)source {
  IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(self, source);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(subscriptionCount_)) incrementAndGet] == 1) {
    JavaUtilConcurrentAtomicAtomicBoolean *writeLocked = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
    @try {
      [((IoReactivexFlowablesConnectableFlowable *) nil_chk(source_FlowableRefCount_)) connectWithIoReactivexFunctionsConsumer:IoReactivexInternalOperatorsFlowableFlowableRefCount_onSubscribeWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked)];
    }
    @finally {
      if ([writeLocked get]) {
        [lock_ unlock];
      }
    }
  }
  else {
    @try {
      [self doSubscribeWithOrgReactivestreamsSubscriber:subscriber withIoReactivexDisposablesCompositeDisposable:JreLoadVolatileId(&baseDisposable_)];
    }
    @finally {
      [lock_ unlock];
    }
  }
}

- (id<IoReactivexFunctionsConsumer>)onSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  return IoReactivexInternalOperatorsFlowableFlowableRefCount_onSubscribeWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

- (void)doSubscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
      withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase {
  id<IoReactivexDisposablesDisposable> d = IoReactivexInternalOperatorsFlowableFlowableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(self, currentBase);
  IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *connection = create_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(self, subscriber, currentBase, d);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber)) onSubscribeWithOrgReactivestreamsSubscription:connection];
  [((IoReactivexFlowablesConnectableFlowable *) nil_chk(source_FlowableRefCount_)) subscribeWithIoReactivexFlowableSubscriber:connection];
}

- (id<IoReactivexDisposablesDisposable>)disconnectWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current {
  return IoReactivexInternalOperatorsFlowableFlowableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(self, current);
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&baseDisposable_, &original->baseDisposable_);
}

- (void)dealloc {
  RELEASE_(source_FlowableRefCount_);
  JreReleaseVolatile(&baseDisposable_);
  RELEASE_(subscriptionCount_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsConsumer;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowablesConnectableFlowable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(onSubscribeWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[3].selector = @selector(doSubscribeWithOrgReactivestreamsSubscriber:withIoReactivexDisposablesCompositeDisposable:);
  methods[4].selector = @selector(disconnectWithIoReactivexDisposablesCompositeDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_FlowableRefCount_", "LIoReactivexFlowablesConnectableFlowable;", .constantValue.asLong = 0, 0x10, 13, -1, 14, -1 },
    { "baseDisposable_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowablesConnectableFlowable;", "(Lio/reactivex/flowables/ConnectableFlowable<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;", "doSubscribe", "LOrgReactivestreamsSubscriber;LIoReactivexDisposablesCompositeDisposable;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/disposables/CompositeDisposable;)V", "disconnect", "LIoReactivexDisposablesCompositeDisposable;", "source", "Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber;LIoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer;LIoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRefCount = { "FlowableRefCount", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, 15, -1, 16, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRefCount;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, IoReactivexFlowablesConnectableFlowable *source) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreVolatileStrongAssign(&self->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssignAndConsume(&self->subscriptionCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->source_FlowableRefCount_, source);
}

IoReactivexInternalOperatorsFlowableFlowableRefCount *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexFlowablesConnectableFlowable *source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount, initWithIoReactivexFlowablesConnectableFlowable_, source)
}

IoReactivexInternalOperatorsFlowableFlowableRefCount *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_initWithIoReactivexFlowablesConnectableFlowable_(IoReactivexFlowablesConnectableFlowable *source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount, initWithIoReactivexFlowablesConnectableFlowable_, source)
}

id<IoReactivexFunctionsConsumer> IoReactivexInternalOperatorsFlowableFlowableRefCount_onSubscribeWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  return create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsFlowableFlowableRefCount_disconnectWithIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *self, IoReactivexDisposablesCompositeDisposable *current) {
  return IoReactivexDisposablesDisposables_fromRunnableWithJavaLangRunnable_(create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(self, current));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRefCount)

@implementation IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                                            withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                               withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase
                                        withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(self, outer$, subscriber, currentBase, resource);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredSetOnceWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withOrgReactivestreamsSubscription_(self, requested_, s);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [self cleanup];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber_)) onErrorWithJavaLangThrowable:e];
}

- (void)onNextWithId:(id)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber_)) onNextWithId:t];
}

- (void)onComplete {
  [self cleanup];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(subscriber_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  IoReactivexInternalSubscriptionsSubscriptionHelper_deferredRequestWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicLong_withLong_(self, requested_, n);
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(resource_)) dispose];
}

- (void)cleanup {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseDisposable_) == currentBase_) {
      if ([IoReactivexDisposablesDisposable_class_() isInstance:this$0_->source_FlowableRefCount_]) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(((id<IoReactivexDisposablesDisposable>) cast_check(this$0_->source_FlowableRefCount_, IoReactivexDisposablesDisposable_class_())))) dispose];
      }
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) dispose];
      JreVolatileStrongAssign(&this$0_->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) setWithInt:0];
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(subscriber_);
  RELEASE_(currentBase_);
  RELEASE_(resource_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:withOrgReactivestreamsSubscriber:withIoReactivexDisposablesCompositeDisposable:withIoReactivexDisposablesDisposable:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(cleanup);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 11, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "subscriber_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "currentBase_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resource_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexDisposablesCompositeDisposable;LIoReactivexDisposablesDisposable;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/disposables/Disposable;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onError", "LJavaLangThrowable;", "onNext", "LNSObject;", "(TT;)V", "request", "J", "Lio/reactivex/internal/operators/flowable/FlowableRefCount<TT;>;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber = { "ConnectionSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 8, 6, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->subscriber_, subscriber);
  JreStrongAssign(&self->currentBase_, currentBase);
  JreStrongAssign(&self->resource_, resource);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_, outer$, subscriber, currentBase, resource)
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_, outer$, subscriber, currentBase, resource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRefCount_ConnectionSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                                            withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                   withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, subscriber, writeLocked);
  return self;
}

- (void)acceptWithId:(id<IoReactivexDisposablesDisposable>)subscription {
  @try {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) addWithIoReactivexDisposablesDisposable:subscription];
    [this$0_ doSubscribeWithOrgReactivestreamsSubscriber:subscriber_ withIoReactivexDisposablesCompositeDisposable:JreLoadVolatileId(&this$0_->baseDisposable_)];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) unlock];
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(writeLocked_)) setWithBoolean:false];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(subscriber_);
  RELEASE_(writeLocked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:withOrgReactivestreamsSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(acceptWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "subscriber_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "writeLocked_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "accept", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/operators/flowable/FlowableRefCount<TT;>;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;", "Ljava/lang/Object;Lio/reactivex/functions/Consumer<Lio/reactivex/disposables/Disposable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer = { "DisposeConsumer", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 3, 6, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->subscriber_, subscriber);
  JreStrongAssign(&self->writeLocked_, writeLocked);
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, subscriber, writeLocked)
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, id<OrgReactivestreamsSubscriber> subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withOrgReactivestreamsSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, subscriber, writeLocked)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeConsumer)

@implementation IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:(IoReactivexInternalOperatorsFlowableFlowableRefCount *)outer$
                               withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)current {
  IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(self, outer$, current);
  return self;
}

- (void)run {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if (JreLoadVolatileId(&this$0_->baseDisposable_) == current_) {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) decrementAndGet] == 0) {
        if ([IoReactivexDisposablesDisposable_class_() isInstance:this$0_->source_FlowableRefCount_]) {
          [((id<IoReactivexDisposablesDisposable>) nil_chk(((id<IoReactivexDisposablesDisposable>) cast_check(this$0_->source_FlowableRefCount_, IoReactivexDisposablesDisposable_class_())))) dispose];
        }
        [((IoReactivexDisposablesCompositeDisposable *) nil_chk(JreLoadVolatileId(&this$0_->baseDisposable_))) dispose];
        JreVolatileStrongAssign(&this$0_->baseDisposable_, create_IoReactivexDisposablesCompositeDisposable_init());
      }
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableRefCount:withIoReactivexDisposablesCompositeDisposable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "current_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexDisposablesCompositeDisposable;", "Lio/reactivex/internal/operators/flowable/FlowableRefCount<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableRefCount;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask = { "DisposeTask", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 2, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *self, IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->current_, current);
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *new_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_, outer$, current)
}

IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask *create_IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask_initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_(IoReactivexInternalOperatorsFlowableFlowableRefCount *outer$, IoReactivexDisposablesCompositeDisposable *current) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask, initWithIoReactivexInternalOperatorsFlowableFlowableRefCount_withIoReactivexDisposablesCompositeDisposable_, outer$, current)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableRefCount_DisposeTask)
