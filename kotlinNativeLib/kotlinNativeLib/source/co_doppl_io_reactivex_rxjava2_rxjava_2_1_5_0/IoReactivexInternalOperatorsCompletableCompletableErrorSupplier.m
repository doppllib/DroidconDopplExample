//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsCompletableCompletableErrorSupplier.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableErrorSupplier

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)errorSupplier {
  IoReactivexInternalOperatorsCompletableCompletableErrorSupplier_initWithJavaUtilConcurrentCallable_(self, errorSupplier);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  JavaLangThrowable *error;
  @try {
    error = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(errorSupplier_)) call], @"The error returned is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    error = e;
  }
  IoReactivexInternalDisposablesEmptyDisposable_errorWithJavaLangThrowable_withIoReactivexCompletableObserver_(error, s);
}

- (void)dealloc {
  RELEASE_(errorSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "errorSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+Ljava/lang/Throwable;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Ljava/util/concurrent/Callable<+Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableErrorSupplier = { "CompletableErrorSupplier", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableErrorSupplier;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableErrorSupplier_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsCompletableCompletableErrorSupplier *self, id<JavaUtilConcurrentCallable> errorSupplier) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->errorSupplier_, errorSupplier);
}

IoReactivexInternalOperatorsCompletableCompletableErrorSupplier *new_IoReactivexInternalOperatorsCompletableCompletableErrorSupplier_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableErrorSupplier, initWithJavaUtilConcurrentCallable_, errorSupplier)
}

IoReactivexInternalOperatorsCompletableCompletableErrorSupplier *create_IoReactivexInternalOperatorsCompletableCompletableErrorSupplier_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableErrorSupplier, initWithJavaUtilConcurrentCallable_, errorSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableErrorSupplier)
