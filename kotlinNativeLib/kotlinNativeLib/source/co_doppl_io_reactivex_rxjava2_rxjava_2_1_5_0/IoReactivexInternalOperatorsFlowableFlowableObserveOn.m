//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalFuseableSimpleQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableObserveOn.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_serialVersionUID -8241002408341274697LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self);

__attribute__((unused)) static jboolean IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self, jboolean d, jboolean empty, id<OrgReactivestreamsSubscriber> a);

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_clear(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self);

inline jlong IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_serialVersionUID -4547113800637756442LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_serialVersionUID 644624475404284533LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableObserveOn

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                withBoolean:(jboolean)delayError
                                    withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_(self, source, scheduler, delayError, prefetch);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexScheduler_Worker *worker = [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker];
  if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:s]) {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(s, IoReactivexInternalFuseableConditionalSubscriber_class_()), worker, delayError_, prefetch_)];
  }
  else {
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(s, worker, delayError_, prefetch_)];
  }
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexScheduler:withBoolean:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexScheduler;ZI", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/Scheduler;ZI)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber;LIoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber;LIoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableObserveOn = { "FlowableObserveOn", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableObserveOn;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn *self, IoReactivexFlowable *source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->delayError_ = delayError;
  self->prefetch_ = prefetch;
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_(IoReactivexFlowable *source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn, initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_, source, scheduler, delayError, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_(IoReactivexFlowable *source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn, initWithIoReactivexFlowable_withIoReactivexScheduler_withBoolean_withInt_, source, scheduler, delayError, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableObserveOn)

@implementation IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber

- (instancetype)initWithIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                        withBoolean:(jboolean)delayError
                                            withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_initWithIoReactivexScheduler_Worker_withBoolean_withInt_(self, worker, delayError, prefetch);
  return self;
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
    IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
    return;
  }
  if (![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) offerWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    JreStrongAssignAndConsume(&error_, new_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue is full?!"));
    JreAssignVolatileBoolean(&done_, true);
  }
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
}

- (void)onComplete {
  if (!JreLoadVolatileBoolean(&done_)) {
    JreAssignVolatileBoolean(&done_, true);
    IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
  }
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
  }
}

- (void)cancel {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
  if ([self getAndIncrement] == 0) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) clear];
  }
}

- (void)trySchedule {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(self);
}

- (void)run {
  if (outputFused_) {
    [self runBackfused];
  }
  else if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_SYNC) {
    [self runSync];
  }
  else {
    [self runAsync];
  }
}

- (void)runBackfused {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)runSync {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)runAsync {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a {
  return IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(self, d, empty, a);
}

- (jint)requestFusionWithInt:(jint)requestedMode {
  if ((requestedMode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)clear {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_clear(self);
}

- (jboolean)isEmpty {
  return [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) isEmpty];
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(worker_);
  RELEASE_(requested_);
  RELEASE_(s_);
  RELEASE_(queue_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, 8, 9, -1, 10, -1, -1 },
    { NULL, "I", 0x11, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexScheduler_Worker:withBoolean:withInt:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(requestWithLong:);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(trySchedule);
  methods[7].selector = @selector(run);
  methods[8].selector = @selector(runBackfused);
  methods[9].selector = @selector(runSync);
  methods[10].selector = @selector(runAsync);
  methods[11].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:);
  methods[12].selector = @selector(requestFusionWithInt:);
  methods[13].selector = @selector(clear);
  methods[14].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexScheduler_Worker;ZI", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;", "(ZZLorg/reactivestreams/Subscriber<*>;)Z", "requestFusion", "I", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableObserveOn;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber = { "BaseObserveOnSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x408, 15, 14, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_initWithIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->worker_, worker);
  self->delayError_ = delayError;
  self->prefetch_ = prefetch;
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
}

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_trySchedule(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self) {
  if ([self getAndIncrement] != 0) {
    return;
  }
  [((IoReactivexScheduler_Worker *) nil_chk(self->worker_)) scheduleWithJavaLangRunnable:self];
}

jboolean IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self, jboolean d, jboolean empty, id<OrgReactivestreamsSubscriber> a) {
  if (JreLoadVolatileBoolean(&self->cancelled_)) {
    IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_clear(self);
    return true;
  }
  if (d) {
    if (self->delayError_) {
      if (empty) {
        JavaLangThrowable *e = self->error_;
        if (e != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
        [((IoReactivexScheduler_Worker *) nil_chk(self->worker_)) dispose];
        return true;
      }
    }
    else {
      JavaLangThrowable *e = self->error_;
      if (e != nil) {
        IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_clear(self);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
        [((IoReactivexScheduler_Worker *) nil_chk(self->worker_)) dispose];
        return true;
      }
      else if (empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        [((IoReactivexScheduler_Worker *) nil_chk(self->worker_)) dispose];
        return true;
      }
    }
  }
  return false;
}

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_clear(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self) {
  [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(self->queue_)) clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                         withBoolean:(jboolean)delayError
                                             withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(self, actual, worker, delayError, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> f = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(f)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY | IoReactivexInternalFuseableQueueFuseable_BOUNDARY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = IoReactivexInternalFuseableQueueFuseable_SYNC;
        JreStrongAssign(&queue_, f);
        JreAssignVolatileBoolean(&done_, true);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
        return;
      }
      else if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = IoReactivexInternalFuseableQueueFuseable_ASYNC;
        JreStrongAssign(&queue_, f);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_));
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)runSync {
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  jlong e = produced_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    while (e != r) {
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (v == nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if ([((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
      [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
      return;
    }
    jint w = [self get];
    if (missed == w) {
      produced_ = e;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)runAsync {
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  jlong e = produced_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    while (e != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [q clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      jboolean empty = v == nil;
      if (IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(self, d, empty, a)) {
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
      if (e == limit_) {
        if (r != JavaLangLong_MAX_VALUE) {
          r = [requested_ addAndGetWithLong:-e];
        }
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:e];
        e = 0LL;
      }
    }
    if (e == r && IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(self, JreLoadVolatileBoolean(&done_), [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty], a)) {
      return;
    }
    jint w = [self get];
    if (missed == w) {
      produced_ = e;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)runBackfused {
  jint missed = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:nil];
    if (d) {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        [actual_ onErrorWithJavaLangThrowable:e];
      }
      else {
        [actual_ onComplete];
      }
      [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
      return;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) poll];
  if (v != nil && sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = produced_ + 1;
    if (p == limit_) {
      produced_ = 0;
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:p];
    }
    else {
      produced_ = p;
    }
  }
  return v;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexScheduler_Worker:withBoolean:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(runSync);
  methods[3].selector = @selector(runAsync);
  methods[4].selector = @selector(runBackfused);
  methods[5].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexScheduler_Worker;ZI", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/Scheduler$Worker;ZI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "LJavaLangException;", "()TT;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableObserveOn;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber = { "ObserveOnSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 2, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_initWithIoReactivexScheduler_Worker_withBoolean_withInt_(self, worker, delayError, prefetch);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_, actual, worker, delayError, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_, actual, worker, delayError, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                         withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                                             withBoolean:(jboolean)delayError
                                                                 withInt:(jint)prefetch {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(self, actual, worker, delayError, prefetch);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> f = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(f)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY | IoReactivexInternalFuseableQueueFuseable_BOUNDARY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = IoReactivexInternalFuseableQueueFuseable_SYNC;
        JreStrongAssign(&queue_, f);
        JreAssignVolatileBoolean(&done_, true);
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
        return;
      }
      else if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = IoReactivexInternalFuseableQueueFuseable_ASYNC;
        JreStrongAssign(&queue_, f);
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
        return;
      }
    }
    JreStrongAssignAndConsume(&queue_, new_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch_));
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)runSync {
  jint missed = 1;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  jlong e = produced_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    while (e != r) {
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      if (JreLoadVolatileBoolean(&cancelled_)) {
        return;
      }
      if (v == nil) {
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      if ([((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:v]) {
        e++;
      }
    }
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    if ([((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty]) {
      [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
      [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
      return;
    }
    jint w = [self get];
    if (missed == w) {
      produced_ = e;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)runAsync {
  jint missed = 1;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  jlong emitted = produced_;
  jlong polled = consumed_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    while (emitted != r) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
      }
      @catch (JavaLangThrowable *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [q clear];
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      jboolean empty = v == nil;
      if (IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(self, d, empty, a)) {
        return;
      }
      if (empty) {
        break;
      }
      if ([((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:v]) {
        emitted++;
      }
      polled++;
      if (polled == limit_) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:polled];
        polled = 0LL;
      }
    }
    if (emitted == r && IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_(self, JreLoadVolatileBoolean(&done_), [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty], a)) {
      return;
    }
    jint w = [self get];
    if (missed == w) {
      produced_ = emitted;
      consumed_ = polled;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (void)runBackfused {
  jint missed = 1;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onNextWithId:nil];
    if (d) {
      JavaLangThrowable *e = error_;
      if (e != nil) {
        [actual_ onErrorWithJavaLangThrowable:e];
      }
      else {
        [actual_ onComplete];
      }
      [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
      return;
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (id __nullable)poll {
  id v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(queue_)) poll];
  if (v != nil && sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
    jlong p = consumed_ + 1;
    if (p == limit_) {
      consumed_ = 0;
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:p];
    }
    else {
      consumed_ = p;
    }
  }
  return v;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withIoReactivexScheduler_Worker:withBoolean:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(runSync);
  methods[3].selector = @selector(runAsync);
  methods[4].selector = @selector(runBackfused);
  methods[5].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "consumed_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;LIoReactivexScheduler_Worker;ZI", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;Lio/reactivex/Scheduler$Worker;ZI)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "LJavaLangException;", "()TT;", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableObserveOn;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber = { "ObserveOnConditionalSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 6, 3, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_initWithIoReactivexScheduler_Worker_withBoolean_withInt_(self, worker, delayError, prefetch);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_, actual, worker, delayError, prefetch)
}

IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_, actual, worker, delayError, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber)
