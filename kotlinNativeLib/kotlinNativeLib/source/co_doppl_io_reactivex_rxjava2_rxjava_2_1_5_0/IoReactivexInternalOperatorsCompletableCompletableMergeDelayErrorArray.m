//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexCompletableObserver.h"
#include "IoReactivexCompletableSource.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray.h"
#include "IoReactivexInternalUtilAtomicThrowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray

- (instancetype)initWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources {
  IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_initWithIoReactivexCompletableSourceArray_(self, sources);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(((IOSObjectArray *) nil_chk(sources_))->size_ + 1);
  IoReactivexInternalUtilAtomicThrowable *error = create_IoReactivexInternalUtilAtomicThrowable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  {
    IOSObjectArray *a__ = sources_;
    id<IoReactivexCompletableSource> const *b__ = a__->buffer_;
    id<IoReactivexCompletableSource> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<IoReactivexCompletableSource> c = *b__++;
      if ([set isDisposed]) {
        return;
      }
      if (c == nil) {
        JavaLangThrowable *ex = create_JavaLangNullPointerException_initWithNSString_(@"A completable source is null");
        [error addThrowableWithJavaLangThrowable:ex];
        [wip decrementAndGet];
        continue;
      }
      [c subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(s, set, error, wip)];
    }
  }
  if ([wip decrementAndGet] == 0) {
    JavaLangThrowable *ex = [error terminate];
    if (ex == nil) {
      [s onComplete];
    }
    else {
      [s onErrorWithJavaLangThrowable:ex];
    }
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSourceArray:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;", "LIoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray = { "CompletableMergeDelayErrorArray", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 3, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_initWithIoReactivexCompletableSourceArray_(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray *self, IOSObjectArray *sources) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray *new_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray, initWithIoReactivexCompletableSourceArray_, sources)
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray *create_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_initWithIoReactivexCompletableSourceArray_(IOSObjectArray *sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray, initWithIoReactivexCompletableSourceArray_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray)

@implementation IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s
         withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
            withIoReactivexInternalUtilAtomicThrowable:(IoReactivexInternalUtilAtomicThrowable *)error
             withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)wip {
  IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(self, s, set, error, wip);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithJavaLangThrowable:e]) {
    [self tryTerminate];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
}

- (void)onComplete {
  [self tryTerminate];
}

- (void)tryTerminate {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] == 0) {
    JavaLangThrowable *ex = [((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) terminate];
    if (ex == nil) {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onComplete];
    }
    else {
      [((id<IoReactivexCompletableObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(set_);
  RELEASE_(error_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableObserver:withIoReactivexDisposablesCompositeDisposable:withIoReactivexInternalUtilAtomicThrowable:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(tryTerminate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableObserver;LIoReactivexDisposablesCompositeDisposable;LIoReactivexInternalUtilAtomicThrowable;LJavaUtilConcurrentAtomicAtomicInteger;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LJavaLangThrowable;", "LIoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver = { "MergeInnerCompletableObserver", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x18, 5, 4, 5, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver *self, id<IoReactivexCompletableObserver> s, IoReactivexDisposablesCompositeDisposable *set, IoReactivexInternalUtilAtomicThrowable *error, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, s);
  JreStrongAssign(&self->set_, set);
  JreStrongAssign(&self->error_, error);
  JreStrongAssign(&self->wip_, wip);
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver *new_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(id<IoReactivexCompletableObserver> s, IoReactivexDisposablesCompositeDisposable *set, IoReactivexInternalUtilAtomicThrowable *error, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_, s, set, error, wip)
}

IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver *create_IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_(id<IoReactivexCompletableObserver> s, IoReactivexDisposablesCompositeDisposable *set, IoReactivexInternalUtilAtomicThrowable *error, JavaUtilConcurrentAtomicAtomicInteger *wip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver, initWithIoReactivexCompletableObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexInternalUtilAtomicThrowable_withJavaUtilConcurrentAtomicAtomicInteger_, s, set, error, wip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableMergeDelayErrorArray_MergeInnerCompletableObserver)
