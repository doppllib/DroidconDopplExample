//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelFlatMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelFlatMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelFlatMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelFlatMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelFlatMap

#if !defined (IoReactivexInternalOperatorsParallelParallelFlatMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelFlatMap))
#define IoReactivexInternalOperatorsParallelParallelFlatMap_

#define RESTRICT_IoReactivexParallelParallelFlowable 1
#define INCLUDE_IoReactivexParallelParallelFlowable 1
#include "IoReactivexParallelParallelFlowable.h"

@class IOSObjectArray;
@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsParallelParallelFlatMap : IoReactivexParallelParallelFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayError_;
  jint maxConcurrency_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                withBoolean:(jboolean)delayError
                                                    withInt:(jint)maxConcurrency
                                                    withInt:(jint)prefetch;

- (jint)parallelism;

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelFlatMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelFlatMap, source_, IoReactivexParallelParallelFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelFlatMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelFlatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelFlatMap *self, IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelFlatMap *new_IoReactivexInternalOperatorsParallelParallelFlatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelFlatMap *create_IoReactivexInternalOperatorsParallelParallelFlatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexParallelParallelFlowable *source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelFlatMap)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelFlatMap")
