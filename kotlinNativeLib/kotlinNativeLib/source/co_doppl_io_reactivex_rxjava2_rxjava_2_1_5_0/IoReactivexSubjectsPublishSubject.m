//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAnnotationsCheckReturnValue.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubjectsPublishSubject.h"
#include "IoReactivexSubjectsSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsPublishSubject__Annotations$0();

inline jlong IoReactivexSubjectsPublishSubject_PublishDisposable_get_serialVersionUID();
#define IoReactivexSubjectsPublishSubject_PublishDisposable_serialVersionUID 3562861878281475070LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsPublishSubject_PublishDisposable, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(IoReactivexSubjectsPublishSubject)

IOSObjectArray *IoReactivexSubjectsPublishSubject_TERMINATED;
IOSObjectArray *IoReactivexSubjectsPublishSubject_EMPTY;

@implementation IoReactivexSubjectsPublishSubject

+ (IOSObjectArray *)TERMINATED {
  return IoReactivexSubjectsPublishSubject_TERMINATED;
}

+ (IOSObjectArray *)EMPTY {
  return IoReactivexSubjectsPublishSubject_EMPTY;
}

+ (IoReactivexSubjectsPublishSubject *)create {
  return IoReactivexSubjectsPublishSubject_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexSubjectsPublishSubject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  IoReactivexSubjectsPublishSubject_PublishDisposable *ps = create_IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(t, self);
  [((id<IoReactivexObserver>) nil_chk(t)) onSubscribeWithIoReactivexDisposablesDisposable:ps];
  if ([self addWithIoReactivexSubjectsPublishSubject_PublishDisposable:ps]) {
    if ([ps isDisposed]) {
      [self removeWithIoReactivexSubjectsPublishSubject_PublishDisposable:ps];
    }
  }
  else {
    JavaLangThrowable *ex = error_;
    if (ex != nil) {
      [t onErrorWithJavaLangThrowable:ex];
    }
    else {
      [t onComplete];
    }
  }
}

- (jboolean)addWithIoReactivexSubjectsPublishSubject_PublishDisposable:(IoReactivexSubjectsPublishSubject_PublishDisposable *)ps {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexSubjectsPublishSubject_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:n + 1 type:IoReactivexSubjectsPublishSubject_PublishDisposable_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    IOSObjectArray_Set(b, n, ps);
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexSubjectsPublishSubject_PublishDisposable:(IoReactivexSubjectsPublishSubject_PublishDisposable *)ps {
  for (; ; ) {
    IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (a == IoReactivexSubjectsPublishSubject_TERMINATED || a == IoReactivexSubjectsPublishSubject_EMPTY) {
      return;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == ps) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = IoReactivexSubjectsPublishSubject_EMPTY;
    }
    else {
      b = [IOSObjectArray arrayWithLength:n - 1 type:IoReactivexSubjectsPublishSubject_PublishDisposable_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
  }
}

- (void)onNextWithId:(id)t {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED) {
    return;
  }
  if (t == nil) {
    [self onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  {
    IOSObjectArray *a__ = [subscribers_ get];
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsPublishSubject_PublishDisposable *s = *b__++;
      [((IoReactivexSubjectsPublishSubject_PublishDisposable *) nil_chk(s)) onNextWithId:t];
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  JreStrongAssign(&error_, t);
  {
    IOSObjectArray *a__ = [subscribers_ getAndSetWithId:IoReactivexSubjectsPublishSubject_TERMINATED];
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsPublishSubject_PublishDisposable *s = *b__++;
      [((IoReactivexSubjectsPublishSubject_PublishDisposable *) nil_chk(s)) onErrorWithJavaLangThrowable:t];
    }
  }
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED) {
    return;
  }
  {
    IOSObjectArray *a__ = [subscribers_ getAndSetWithId:IoReactivexSubjectsPublishSubject_TERMINATED];
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexSubjectsPublishSubject_PublishDisposable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexSubjectsPublishSubject_PublishDisposable *s = *b__++;
      [((IoReactivexSubjectsPublishSubject_PublishDisposable *) nil_chk(s)) onComplete];
    }
  }
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get]))->size_ != 0;
}

- (JavaLangThrowable *)getThrowable {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED) {
    return error_;
  }
  return nil;
}

- (jboolean)hasThrowable {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED && error_ != nil;
}

- (jboolean)hasComplete {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexSubjectsPublishSubject_TERMINATED && error_ == nil;
}

- (void)dealloc {
  RELEASE_(subscribers_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexSubjectsPublishSubject;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 6, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[3].selector = @selector(addWithIoReactivexSubjectsPublishSubject_PublishDisposable:);
  methods[4].selector = @selector(removeWithIoReactivexSubjectsPublishSubject_PublishDisposable:);
  methods[5].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(onNextWithId:);
  methods[7].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[8].selector = @selector(onComplete);
  methods[9].selector = @selector(hasObservers);
  methods[10].selector = @selector(getThrowable);
  methods[11].selector = @selector(hasThrowable);
  methods[12].selector = @selector(hasComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TERMINATED", "[LIoReactivexSubjectsPublishSubject_PublishDisposable;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "EMPTY", "[LIoReactivexSubjectsPublishSubject_PublishDisposable;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/subjects/PublishSubject<TT;>;", (void *)&IoReactivexSubjectsPublishSubject__Annotations$0, "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "add", "LIoReactivexSubjectsPublishSubject_PublishDisposable;", "(Lio/reactivex/subjects/PublishSubject$PublishDisposable<TT;>;)Z", "remove", "(Lio/reactivex/subjects/PublishSubject$PublishDisposable<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", &IoReactivexSubjectsPublishSubject_TERMINATED, &IoReactivexSubjectsPublishSubject_EMPTY, "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/subjects/PublishSubject$PublishDisposable<TT;>;>;", "<T:Ljava/lang/Object;>Lio/reactivex/subjects/Subject<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsPublishSubject = { "PublishSubject", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x11, 13, 4, -1, 6, -1, 20, -1 };
  return &_IoReactivexSubjectsPublishSubject;
}

+ (void)initialize {
  if (self == [IoReactivexSubjectsPublishSubject class]) {
    JreStrongAssignAndConsume(&IoReactivexSubjectsPublishSubject_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsPublishSubject_PublishDisposable_class_()]);
    JreStrongAssignAndConsume(&IoReactivexSubjectsPublishSubject_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexSubjectsPublishSubject_PublishDisposable_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexSubjectsPublishSubject)
  }
}

@end

IoReactivexSubjectsPublishSubject *IoReactivexSubjectsPublishSubject_create() {
  IoReactivexSubjectsPublishSubject_initialize();
  return create_IoReactivexSubjectsPublishSubject_init();
}

void IoReactivexSubjectsPublishSubject_init(IoReactivexSubjectsPublishSubject *self) {
  IoReactivexSubjectsSubject_init(self);
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexSubjectsPublishSubject_EMPTY));
}

IoReactivexSubjectsPublishSubject *new_IoReactivexSubjectsPublishSubject_init() {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsPublishSubject, init)
}

IoReactivexSubjectsPublishSubject *create_IoReactivexSubjectsPublishSubject_init() {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsPublishSubject, init)
}

IOSObjectArray *IoReactivexSubjectsPublishSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsPublishSubject)

@implementation IoReactivexSubjectsPublishSubject_PublishDisposable

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
      withIoReactivexSubjectsPublishSubject:(IoReactivexSubjectsPublishSubject *)parent {
  IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(self, actual, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (![self get]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if ([self get]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
  else {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  }
}

- (void)onComplete {
  if (![self get]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dispose {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexSubjectsPublishSubject *) nil_chk(parent_)) removeWithIoReactivexSubjectsPublishSubject_PublishDisposable:self];
  }
}

- (jboolean)isDisposed {
  return [self get];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexSubjectsPublishSubject:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsPublishSubject_PublishDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "parent_", "LIoReactivexSubjectsPublishSubject;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexSubjectsPublishSubject;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/subjects/PublishSubject<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/subjects/PublishSubject<TT;>;", "LIoReactivexSubjectsPublishSubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsPublishSubject_PublishDisposable = { "PublishDisposable", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x18, 6, 3, 9, -1, -1, 10, -1 };
  return &_IoReactivexSubjectsPublishSubject_PublishDisposable;
}

@end

void IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(IoReactivexSubjectsPublishSubject_PublishDisposable *self, id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexSubjectsPublishSubject_PublishDisposable *new_IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsPublishSubject_PublishDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_, actual, parent)
}

IoReactivexSubjectsPublishSubject_PublishDisposable *create_IoReactivexSubjectsPublishSubject_PublishDisposable_initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_(id<IoReactivexObserver> actual, IoReactivexSubjectsPublishSubject *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsPublishSubject_PublishDisposable, initWithIoReactivexObserver_withIoReactivexSubjectsPublishSubject_, actual, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsPublishSubject_PublishDisposable)
