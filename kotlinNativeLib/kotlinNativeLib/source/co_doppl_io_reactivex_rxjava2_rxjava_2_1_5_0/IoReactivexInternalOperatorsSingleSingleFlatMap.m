//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleFlatMap.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_serialVersionUID 3258103020495908596LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleFlatMap

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsSingleSingleFlatMap_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(self, source, mapper);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(actual, mapper_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/SingleSource<+TT;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/SingleSource<+TR;>;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TR;>;)V", "Lio/reactivex/SingleSource<+TT;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/SingleSource<+TR;>;>;", "LIoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Single<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFlatMap = { "SingleFlatMap", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFlatMap;
}

@end

void IoReactivexInternalOperatorsSingleSingleFlatMap_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMap *self, id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->mapper_, mapper);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsSingleSingleFlatMap *new_IoReactivexInternalOperatorsSingleSingleFlatMap_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap, initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_, source, mapper)
}

IoReactivexInternalOperatorsSingleSingleFlatMap *create_IoReactivexInternalOperatorsSingleSingleFlatMap_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap, initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_, source, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFlatMap)

@implementation IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(self, actual, mapper);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d)) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  id<IoReactivexSingleSource> o;
  @try {
    o = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value], @"The single returned by the mapper is null");
  }
  @catch (JavaLangThrowable *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
    return;
  }
  if (![self isDisposed]) {
    [((id<IoReactivexSingleSource>) nil_chk(o)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(self, actual_)];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexFunctionsFunction;", "(Lio/reactivex/SingleObserver<-TR;>;Lio/reactivex/functions/Function<-TT;+Lio/reactivex/SingleSource<+TR;>;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Lio/reactivex/SingleSource<+TR;>;>;", "LIoReactivexInternalOperatorsSingleSingleFlatMap;", "LIoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback = { "SingleFlatMapCallback", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 6, 3, 11, 12, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback;
}

@end

void IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback *self, id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback *new_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback, initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback *create_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback, initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_, actual, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback)

@implementation IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent
                                  withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(self, parent, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_replaceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(parent_, d);
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;LIoReactivexSingleObserver;", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<-TR;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TR;)V", "onError", "LJavaLangThrowable;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/SingleObserver<-TR;>;", "LIoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback;", "<R:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/SingleObserver<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver = { "FlatMapSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 4, 2, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver *self, JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->parent_, parent);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver *new_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver, initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_, parent, actual)
}

IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver *create_IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver, initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_, parent, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFlatMap_SingleFlatMapCallback_FlatMapSingleObserver)
