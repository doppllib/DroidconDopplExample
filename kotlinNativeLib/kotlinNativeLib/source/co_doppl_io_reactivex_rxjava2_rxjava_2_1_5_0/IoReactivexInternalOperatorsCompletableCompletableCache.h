//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableCache
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableCache

#if !defined (IoReactivexInternalOperatorsCompletableCompletableCache_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableCache))
#define IoReactivexInternalOperatorsCompletableCompletableCache_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexCompletableSource;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsCompletableCompletableCache : IoReactivexCompletable < IoReactivexCompletableObserver > {
 @public
  id<IoReactivexCompletableSource> source_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  JavaLangThrowable *error_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

#pragma mark Package-Private

- (jboolean)addWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *)inner;

- (void)removeWithIoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *)inner;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableCache)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableCache, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableCache, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableCache, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableCache, error_, JavaLangThrowable *)

inline IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsCompletableCompletableCache, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsCompletableCompletableCache_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsCompletableCompletableCache, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableCache *self, id<IoReactivexCompletableSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableCache *new_IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableCache *create_IoReactivexInternalOperatorsCompletableCompletableCache_initWithIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableCache)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache))
#define IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexInternalOperatorsCompletableCompletableCache;
@protocol IoReactivexCompletableObserver;

@interface IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableCache:(IoReactivexInternalOperatorsCompletableCompletableCache *)outer$
                                             withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache, actual_, id<IoReactivexCompletableObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *self, IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *new_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache *create_IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache_initWithIoReactivexInternalOperatorsCompletableCompletableCache_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableCache *outer$, id<IoReactivexCompletableObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableCache_InnerCompletableCache)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableCache")
