//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTakeUntil
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTakeUntil

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<OrgReactivestreamsPublisher> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil, other_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil *self, IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithIoReactivexFlowable_withOrgReactivestreamsPublisher_(IoReactivexFlowable *source, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "OrgReactivestreamsSubscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexFlowableSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *other_;
}

#pragma mark Public

- (void)cancel;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, other_, IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;
@class JavaLangThrowable;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber : JavaUtilConcurrentAtomicAtomicReference < IoReactivexFlowableSubscriber >

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)accumulateAndGetWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndAccumulateWithId:(id<OrgReactivestreamsSubscription>)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (id<OrgReactivestreamsSubscription>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id<OrgReactivestreamsSubscription>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil")
