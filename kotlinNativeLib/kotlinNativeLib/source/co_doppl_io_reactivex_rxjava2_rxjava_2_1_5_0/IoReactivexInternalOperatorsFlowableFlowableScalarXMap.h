//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableScalarXMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableScalarXMap

#if !defined (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableScalarXMap))
#define IoReactivexInternalOperatorsFlowableFlowableScalarXMap_

@class IoReactivexFlowable;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableScalarXMap : NSObject

#pragma mark Public

+ (IoReactivexFlowable *)scalarXMapWithId:(id)value
         withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

+ (jboolean)tryScalarXMapSubscribeWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                 withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableScalarXMap)

FOUNDATION_EXPORT jboolean IoReactivexInternalOperatorsFlowableFlowableScalarXMap_tryScalarXMapSubscribeWithOrgReactivestreamsPublisher_withOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsSubscriber> subscriber, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableScalarXMap_scalarXMapWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableScalarXMap)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable))
#define IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable : IoReactivexFlowable {
 @public
  id value_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value
withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *self, id value, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *new_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable *create_IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable_initWithId_withIoReactivexFunctionsFunction_(id value, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableScalarXMap_ScalarXMapFlowable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScalarXMap")
