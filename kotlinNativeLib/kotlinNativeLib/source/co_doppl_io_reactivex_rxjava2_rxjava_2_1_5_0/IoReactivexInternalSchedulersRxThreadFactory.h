//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory")
#ifdef RESTRICT_IoReactivexInternalSchedulersRxThreadFactory
#define INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersRxThreadFactory

#if !defined (IoReactivexInternalSchedulersRxThreadFactory_) && (INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory || defined(INCLUDE_IoReactivexInternalSchedulersRxThreadFactory))
#define IoReactivexInternalSchedulersRxThreadFactory_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_JavaUtilConcurrentThreadFactory 1
#define INCLUDE_JavaUtilConcurrentThreadFactory 1
#include "java/util/concurrent/ThreadFactory.h"

@class JavaLangThread;
@protocol JavaLangRunnable;

@interface IoReactivexInternalSchedulersRxThreadFactory : JavaUtilConcurrentAtomicAtomicLong < JavaUtilConcurrentThreadFactory > {
 @public
  NSString *prefix_;
  jint priority_;
  jboolean nonBlocking_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)prefix;

- (instancetype)initWithNSString:(NSString *)prefix
                         withInt:(jint)priority;

- (instancetype)initWithNSString:(NSString *)prefix
                         withInt:(jint)priority
                     withBoolean:(jboolean)nonBlocking;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersRxThreadFactory)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersRxThreadFactory, prefix_, NSString *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix);

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(NSString *prefix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_(NSString *prefix);

FOUNDATION_EXPORT void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix, jint priority);

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(NSString *prefix, jint priority) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_(NSString *prefix, jint priority);

FOUNDATION_EXPORT void IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(IoReactivexInternalSchedulersRxThreadFactory *self, NSString *prefix, jint priority, jboolean nonBlocking);

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *new_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(NSString *prefix, jint priority, jboolean nonBlocking) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory *create_IoReactivexInternalSchedulersRxThreadFactory_initWithNSString_withInt_withBoolean_(NSString *prefix, jint priority, jboolean nonBlocking);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersRxThreadFactory)

#endif

#if !defined (IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_) && (INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory || defined(INCLUDE_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread))
#define IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_

#define RESTRICT_JavaLangThread 1
#define INCLUDE_JavaLangThread 1
#include "java/lang/Thread.h"

#define RESTRICT_IoReactivexInternalSchedulersNonBlockingThread 1
#define INCLUDE_IoReactivexInternalSchedulersNonBlockingThread 1
#include "IoReactivexInternalSchedulersNonBlockingThread.h"

@class JavaLangThreadGroup;
@protocol JavaLangRunnable;

@interface IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread : JavaLangThread < IoReactivexInternalSchedulersNonBlockingThread >

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run
                            withNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                       withJavaLangRunnable:(id<JavaLangRunnable>)arg1 NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                       withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                               withNSString:(NSString *)arg2 NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                       withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                               withNSString:(NSString *)arg2
                                   withLong:(jlong)arg3 NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                               withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *self, id<JavaLangRunnable> run, NSString *name);

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *new_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> run, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread *create_IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> run, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersRxThreadFactory_RxCustomThread)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersRxThreadFactory")
