//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubscribersDisposableSubscriber")
#ifdef RESTRICT_IoReactivexSubscribersDisposableSubscriber
#define INCLUDE_ALL_IoReactivexSubscribersDisposableSubscriber 0
#else
#define INCLUDE_ALL_IoReactivexSubscribersDisposableSubscriber 1
#endif
#undef RESTRICT_IoReactivexSubscribersDisposableSubscriber

#if !defined (IoReactivexSubscribersDisposableSubscriber_) && (INCLUDE_ALL_IoReactivexSubscribersDisposableSubscriber || defined(INCLUDE_IoReactivexSubscribersDisposableSubscriber))
#define IoReactivexSubscribersDisposableSubscriber_

#define RESTRICT_IoReactivexFlowableSubscriber 1
#define INCLUDE_IoReactivexFlowableSubscriber 1
#include "IoReactivexFlowableSubscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexSubscribersDisposableSubscriber : NSObject < IoReactivexFlowableSubscriber, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *s_;
}

#pragma mark Public

- (instancetype)init;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)cancel;

- (void)onStart;

- (void)requestWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubscribersDisposableSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexSubscribersDisposableSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexSubscribersDisposableSubscriber_init(IoReactivexSubscribersDisposableSubscriber *self);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubscribersDisposableSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexSubscribersDisposableSubscriber")
