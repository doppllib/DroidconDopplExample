//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimeout
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimeout

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimeout_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimeout))
#define IoReactivexInternalOperatorsCompletableCompletableTimeout_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "IoReactivexCompletable.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout : IoReactivexCompletable {
 @public
  id<IoReactivexCompletableSource> source_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexCompletableSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, other_, id<IoReactivexCompletableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableTimeout *self, id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimeout)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver))
#define IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

@class IoReactivexDisposablesCompositeDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver : NSObject < IoReactivexCompletableObserver >

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)once
                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *self, IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *set, JavaUtilConcurrentAtomicAtomicBoolean *once, id<IoReactivexCompletableObserver> s);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimeout_TimeOutObserver)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask))
#define IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsCompletableCompletableTimeout;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@protocol IoReactivexCompletableObserver;

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask : NSObject < JavaLangRunnable > {
 @public
  IoReactivexDisposablesCompositeDisposable *set_;
  id<IoReactivexCompletableObserver> s_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:(IoReactivexInternalOperatorsCompletableCompletableTimeout *)outer$
                                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)once
                                    withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)set
                                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask, s_, id<IoReactivexCompletableObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *self, IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *once, IoReactivexDisposablesCompositeDisposable *set, id<IoReactivexCompletableObserver> s);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver))
#define IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "IoReactivexCompletableObserver.h"

@class IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask;
@class JavaLangThrowable;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver : NSObject < IoReactivexCompletableObserver >

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask:(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *self, IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimeout_DisposeTask_DisposeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout")
