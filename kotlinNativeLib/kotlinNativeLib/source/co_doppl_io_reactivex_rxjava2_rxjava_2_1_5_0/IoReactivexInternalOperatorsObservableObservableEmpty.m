//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexInternalDisposablesEmptyDisposable.h"
#include "IoReactivexInternalOperatorsObservableObservableEmpty.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserver.h"
#include "J2ObjC_source.h"

@interface IoReactivexInternalOperatorsObservableObservableEmpty ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableEmpty_init(IoReactivexInternalOperatorsObservableObservableEmpty *self);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableEmpty *new_IoReactivexInternalOperatorsObservableObservableEmpty_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableEmpty *create_IoReactivexInternalOperatorsObservableObservableEmpty_init();

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableEmpty)

IoReactivexObservable *IoReactivexInternalOperatorsObservableObservableEmpty_INSTANCE;

@implementation IoReactivexInternalOperatorsObservableObservableEmpty

+ (IoReactivexObservable *)INSTANCE {
  return IoReactivexInternalOperatorsObservableObservableEmpty_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsObservableObservableEmpty_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)o {
  IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(o);
}

- (id)call {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[2].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LIoReactivexObservable;", .constantValue.asLong = 0, 0x19, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Ljava/lang/Object;>;)V", &IoReactivexInternalOperatorsObservableObservableEmpty_INSTANCE, "Lio/reactivex/Observable<Ljava/lang/Object;>;", "Lio/reactivex/Observable<Ljava/lang/Object;>;Lio/reactivex/internal/fuseable/ScalarCallable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableEmpty = { "ObservableEmpty", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableEmpty;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableEmpty class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableEmpty_INSTANCE, new_IoReactivexInternalOperatorsObservableObservableEmpty_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableEmpty)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableEmpty_init(IoReactivexInternalOperatorsObservableObservableEmpty *self) {
  IoReactivexObservable_init(self);
}

IoReactivexInternalOperatorsObservableObservableEmpty *new_IoReactivexInternalOperatorsObservableObservableEmpty_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableEmpty, init)
}

IoReactivexInternalOperatorsObservableObservableEmpty *create_IoReactivexInternalOperatorsObservableObservableEmpty_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableEmpty, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableEmpty)
