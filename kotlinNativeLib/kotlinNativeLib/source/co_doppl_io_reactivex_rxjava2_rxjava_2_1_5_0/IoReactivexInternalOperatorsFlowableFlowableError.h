//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableError")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableError
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableError 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableError 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableError

#if !defined (IoReactivexInternalOperatorsFlowableFlowableError_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableError || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableError))
#define IoReactivexInternalOperatorsFlowableFlowableError_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "IoReactivexFlowable.h"

@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableError : IoReactivexFlowable {
 @public
  id<JavaUtilConcurrentCallable> errorSupplier_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)errorSupplier;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableError)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableError, errorSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableError_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableError *self, id<JavaUtilConcurrentCallable> errorSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableError *new_IoReactivexInternalOperatorsFlowableFlowableError_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableError *create_IoReactivexInternalOperatorsFlowableFlowableError_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> errorSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableError)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableError")
