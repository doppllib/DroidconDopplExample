//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableFlowableEmpty.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"

@interface IoReactivexInternalOperatorsFlowableFlowableEmpty ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableEmpty_init(IoReactivexInternalOperatorsFlowableFlowableEmpty *self);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableEmpty *new_IoReactivexInternalOperatorsFlowableFlowableEmpty_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableEmpty *create_IoReactivexInternalOperatorsFlowableFlowableEmpty_init();

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableEmpty)

IoReactivexFlowable *IoReactivexInternalOperatorsFlowableFlowableEmpty_INSTANCE;

@implementation IoReactivexInternalOperatorsFlowableFlowableEmpty

+ (IoReactivexFlowable *)INSTANCE {
  return IoReactivexInternalOperatorsFlowableFlowableEmpty_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalOperatorsFlowableFlowableEmpty_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalSubscriptionsEmptySubscription_completeWithOrgReactivestreamsSubscriber_(s);
}

- (id)call {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[2].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LIoReactivexFlowable;", .constantValue.asLong = 0, 0x19, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Ljava/lang/Object;>;)V", &IoReactivexInternalOperatorsFlowableFlowableEmpty_INSTANCE, "Lio/reactivex/Flowable<Ljava/lang/Object;>;", "Lio/reactivex/Flowable<Ljava/lang/Object;>;Lio/reactivex/internal/fuseable/ScalarCallable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableEmpty = { "FlowableEmpty", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 5, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableEmpty;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableEmpty class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableEmpty_INSTANCE, new_IoReactivexInternalOperatorsFlowableFlowableEmpty_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableEmpty)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableEmpty_init(IoReactivexInternalOperatorsFlowableFlowableEmpty *self) {
  IoReactivexFlowable_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableEmpty *new_IoReactivexInternalOperatorsFlowableFlowableEmpty_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableEmpty, init)
}

IoReactivexInternalOperatorsFlowableFlowableEmpty *create_IoReactivexInternalOperatorsFlowableFlowableEmpty_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableEmpty, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableEmpty)
