//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableSkipLast.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayDeque.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_serialVersionUID -3807491841935125653LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableSkipLast

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                    withInt:(jint)skip {
  IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithIoReactivexFlowable_withInt_(self, source, skip);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(s, skip_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withInt:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;I", "(Lio/reactivex/Flowable<TT;>;I)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSkipLast = { "FlowableSkipLast", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSkipLast;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithIoReactivexFlowable_withInt_(IoReactivexInternalOperatorsFlowableFlowableSkipLast *self, IoReactivexFlowable *source, jint skip) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->skip_ = skip;
}

IoReactivexInternalOperatorsFlowableFlowableSkipLast *new_IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint skip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSkipLast, initWithIoReactivexFlowable_withInt_, source, skip)
}

IoReactivexInternalOperatorsFlowableFlowableSkipLast *create_IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint skip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSkipLast, initWithIoReactivexFlowable_withInt_, source, skip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSkipLast)

@implementation IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)skip {
  IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(self, actual, skip);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  if (skip_ == [self size]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:[self poll]];
  }
  else {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
  }
  [self offerWithId:t];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "skip_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;I", "(Lorg/reactivestreams/Subscriber<-TT;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableSkipLast;", "<T:Ljava/lang/Object;>Ljava/util/ArrayDeque<TT;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber = { "SkipLastSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 4, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint skip) {
  JavaUtilArrayDeque_initWithInt_(self, skip);
  JreStrongAssign(&self->actual_, actual);
  self->skip_ = skip;
}

IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint skip) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber, initWithOrgReactivestreamsSubscriber_withInt_, actual, skip)
}

IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint skip) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber, initWithOrgReactivestreamsSubscriber_withInt_, actual, skip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber)
