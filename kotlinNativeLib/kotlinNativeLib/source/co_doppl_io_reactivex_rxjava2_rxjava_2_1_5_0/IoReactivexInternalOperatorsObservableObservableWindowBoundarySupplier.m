//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalObserversQueueDrainObserver.h"
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"
#include "IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObserver.h"
#include "IoReactivexObserversDisposableObserver.h"
#include "IoReactivexObserversSerializedObserver.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSubjectsUnicastSubject.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_(self, source, other, bufferSize);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_(create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(t), other_, bufferSize_)];
}

- (void)dealloc {
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withJavaUtilConcurrentCallable:withInt:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LJavaUtilConcurrentCallable;I", "(Lio/reactivex/ObservableSource<TT;>;Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<TB;>;>;I)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;)V", "Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<TB;>;>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver;LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;Lio/reactivex/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier = { "ObservableWindowBoundarySupplier", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier *self, id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->other_, other);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_, source, other, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_(id<IoReactivexObservableSource> source, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier, initWithIoReactivexObservableSource_withJavaUtilConcurrentCallable_withInt_, source, other, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver)

id IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT;

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver

+ (id)NEXT {
  return IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)other
                                    withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_(self, actual, other, bufferSize);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<IoReactivexObserver> a = actual_;
    [((id<IoReactivexObserver>) nil_chk(a)) onSubscribeWithIoReactivexDisposablesDisposable:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id<IoReactivexObservableSource> p;
    @try {
      p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(other_)) call], @"The first window ObservableSource supplied is null");
    }
    @catch (JavaLangThrowable *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
      [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
      [a onErrorWithJavaLangThrowable:e];
      return;
    }
    IoReactivexSubjectsUnicastSubject *w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
    JreStrongAssign(&window_, w);
    [a onNextWithId:w];
    IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver *inner = create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(self);
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:nil withId:inner]) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) getAndIncrement];
      [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:inner];
    }
  }
}

- (void)onNextWithId:(id)t {
  if ([self fastEnter]) {
    IoReactivexSubjectsUnicastSubject *w = window_;
    [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:t];
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (void)drainLoop {
  IoReactivexInternalQueueMpscLinkedQueue *q = (IoReactivexInternalQueueMpscLinkedQueue *) cast_chk(queue_, [IoReactivexInternalQueueMpscLinkedQueue class]);
  id<IoReactivexObserver> a = actual_;
  jint missed = 1;
  IoReactivexSubjectsUnicastSubject *w = window_;
  for (; ; ) {
    for (; ; ) {
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((IoReactivexInternalQueueMpscLinkedQueue *) nil_chk(q)) poll];
      jboolean empty = o == nil;
      if (d && empty) {
        IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
        JavaLangThrowable *e = error_;
        if (e != nil) {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
        }
        else {
          [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
      if (o == IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT) {
        [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onComplete];
        if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(windows_)) decrementAndGet] == 0) {
          IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
          return;
        }
        if (JreLoadVolatileBoolean(&cancelled_)) {
          continue;
        }
        id<IoReactivexObservableSource> p;
        @try {
          p = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(other_)) call], @"The ObservableSource supplied is null");
        }
        @catch (JavaLangThrowable *e) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(e);
          IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(boundary_);
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithJavaLangThrowable:e];
          return;
        }
        w = IoReactivexSubjectsUnicastSubject_createWithInt_(bufferSize_);
        [windows_ getAndIncrement];
        JreStrongAssign(&window_, w);
        [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:w];
        IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver *b = create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(self);
        if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(boundary_)) compareAndSetWithId:[boundary_ get] withId:b]) {
          [((id<IoReactivexObservableSource>) nil_chk(p)) subscribeWithIoReactivexObserver:b];
        }
        continue;
      }
      [((IoReactivexSubjectsUnicastSubject *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      return;
    }
  }
}

- (void)next {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(other_);
  RELEASE_(s_);
  RELEASE_(boundary_);
  RELEASE_(window_);
  RELEASE_(windows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withJavaUtilConcurrentCallable:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(drainLoop);
  methods[8].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "boundary_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "window_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "NEXT", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "windows_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LJavaUtilConcurrentCallable;I", "(Lio/reactivex/Observer<-Lio/reactivex/Observable<TT;>;>;Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<TB;>;>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<TB;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", &IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT, "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainObserver<TT;Ljava/lang/Object;Lio/reactivex/Observable<TT;>;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver = { "WindowBoundaryMainObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 7, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_NEXT, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver)
  }
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *self, id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->boundary_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->other_, other);
  self->bufferSize_ = bufferSize;
  [self->windows_ lazySetWithLong:1];
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_, actual, other, bufferSize)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_(id<IoReactivexObserver> actual, id<JavaUtilConcurrentCallable> other, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver, initWithIoReactivexObserver_withJavaUtilConcurrentCallable_withInt_, actual, other, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver)

@implementation IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *)parent {
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(self, parent);
  return self;
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  done_ = true;
  [self dispose];
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *) nil_chk(parent_)) next];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *) nil_chk(parent_)) onErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  [((IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *) nil_chk(parent_)) onComplete];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver;", "(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver<TT;TB;>;)V", "onNext", "LNSObject;", "(TB;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver<TT;TB;>;", "LIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier;", "<T:Ljava/lang/Object;B:Ljava/lang/Object;>Lio/reactivex/observers/DisposableObserver<TB;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver = { "WindowBoundaryInnerObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 4, 2, 8, -1, -1, 9, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver *self, IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *parent) {
  IoReactivexObserversDisposableObserver_init(self);
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_, parent)
}

IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver, initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryMainObserver_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableWindowBoundarySupplier_WindowBoundaryInnerObserver)
