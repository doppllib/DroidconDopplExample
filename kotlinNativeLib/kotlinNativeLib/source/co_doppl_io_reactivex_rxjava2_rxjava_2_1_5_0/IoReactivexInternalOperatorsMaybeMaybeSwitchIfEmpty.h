//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_

#define RESTRICT_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#include "IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream.h"

@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty : IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream {
 @public
  id<IoReactivexMaybeSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                    withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty, other_, id<IoReactivexMaybeSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty *self, id<IoReactivexMaybeSource> source, id<IoReactivexMaybeSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source, id<IoReactivexMaybeSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_initWithIoReactivexMaybeSource_withIoReactivexMaybeSource_(id<IoReactivexMaybeSource> source, id<IoReactivexMaybeSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexMaybeSource;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexMaybeSource> other_;
}

#pragma mark Public

- (id<IoReactivexDisposablesDisposable>)accumulateAndGetWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndAccumulateWithId:(id<IoReactivexDisposablesDisposable>)arg0
                            withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (id<IoReactivexDisposablesDisposable>)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (id<IoReactivexDisposablesDisposable>)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                      withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)other;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver, other_, id<IoReactivexMaybeSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver *self, id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> actual, id<IoReactivexMaybeSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver_

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "IoReactivexMaybeObserver.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver : NSObject < IoReactivexMaybeObserver > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *parent_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
     withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver, parent_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver *self, id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver_initWithIoReactivexMaybeObserver_withJavaUtilConcurrentAtomicAtomicReference_(id<IoReactivexMaybeObserver> actual, JavaUtilConcurrentAtomicAtomicReference *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty_SwitchIfEmptyMaybeObserver_OtherMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSwitchIfEmpty")
