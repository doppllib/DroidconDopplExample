//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableSkipWhile
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableSkipWhile

#if !defined (IoReactivexInternalOperatorsObservableObservableSkipWhile_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSkipWhile))
#define IoReactivexInternalOperatorsObservableObservableSkipWhile_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsPredicate;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableSkipWhile : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsPredicate> predicate_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                  withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSkipWhile)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSkipWhile, predicate_, id<IoReactivexFunctionsPredicate>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSkipWhile_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsObservableObservableSkipWhile *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSkipWhile *new_IoReactivexInternalOperatorsObservableObservableSkipWhile_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSkipWhile *create_IoReactivexInternalOperatorsObservableObservableSkipWhile_initWithIoReactivexObservableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsPredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSkipWhile)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver))
#define IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "IoReactivexObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class JavaLangThrowable;
@protocol IoReactivexFunctionsPredicate;

@interface IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsPredicate> predicate_;
  id<IoReactivexDisposablesDisposable> s_;
  jboolean notSkipping_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
          withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver, predicate_, id<IoReactivexFunctionsPredicate>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> predicate);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver *new_IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver *create_IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver_initWithIoReactivexObserver_withIoReactivexFunctionsPredicate_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsPredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableSkipWhile_SkipWhileObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableSkipWhile")
