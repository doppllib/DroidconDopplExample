//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalObserversResumeSingleObserver.h"
#include "IoReactivexInternalOperatorsSingleSingleDelayWithSingle.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_serialVersionUID -8565274649390031272LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleDelayWithSingle

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsSingleSingleDelayWithSingle_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(self, source, other);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)subscriber {
  [((id<IoReactivexSingleSource>) nil_chk(other_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(subscriber, source_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<TT;>;Lio/reactivex/SingleSource<TU;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lio/reactivex/SingleSource<TU;>;", "LIoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleDelayWithSingle = { "SingleDelayWithSingle", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleDelayWithSingle;
}

@end

void IoReactivexInternalOperatorsSingleSingleDelayWithSingle_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleDelayWithSingle *self, id<IoReactivexSingleSource> source, id<IoReactivexSingleSource> other) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsSingleSingleDelayWithSingle *new_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleDelayWithSingle, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, source, other)
}

IoReactivexInternalOperatorsSingleSingleDelayWithSingle *create_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleDelayWithSingle, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, source, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleDelayWithSingle)

@implementation IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                      withIoReactivexSingleSource:(id<IoReactivexSingleSource>)source {
  IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(self, actual, source);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d)) {
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onSuccessWithId:(id)value {
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalObserversResumeSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(self, actual_)];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withIoReactivexSingleSource:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;LIoReactivexSingleSource;", "(Lio/reactivex/SingleObserver<-TT;>;Lio/reactivex/SingleSource<TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TU;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/SingleObserver<-TT;>;", "Lio/reactivex/SingleSource<TT;>;", "LIoReactivexInternalOperatorsSingleSingleDelayWithSingle;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TU;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver = { "OtherObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 6, 3, 11, -1, -1, 12, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> source) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver *new_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, source)
}

IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver *create_IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver_initWithIoReactivexSingleObserver_withIoReactivexSingleSource_(id<IoReactivexSingleObserver> actual, id<IoReactivexSingleSource> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver, initWithIoReactivexSingleObserver_withIoReactivexSingleSource_, actual, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleDelayWithSingle_OtherObserver)
