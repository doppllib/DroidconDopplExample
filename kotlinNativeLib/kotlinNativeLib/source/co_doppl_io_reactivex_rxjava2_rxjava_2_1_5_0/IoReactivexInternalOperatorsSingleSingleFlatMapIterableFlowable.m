//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable.h"
#include "IoReactivexInternalSubscriptionsBasicIntQueueSubscription.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexSingleSource.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

inline jlong IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_serialVersionUID -8938804753851907758LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
               withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(self, source, mapper);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(s, mapper_)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(mapper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexFunctionsFunction;", "(Lio/reactivex/SingleSource<TT;>;Lio/reactivex/functions/Function<-TT;+Ljava/lang/Iterable<+TR;>;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TR;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lio/reactivex/functions/Function<-TT;+Ljava/lang/Iterable<+TR;>;>;", "LIoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable = { "SingleFlatMapIterableFlowable", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable;
}

@end

void IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable *self, id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->mapper_, mapper);
}

IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable *new_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable, initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_, source, mapper)
}

IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable *create_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_(id<IoReactivexSingleSource> source, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable, initWithIoReactivexSingleSource_withIoReactivexFunctionsFunction_, source, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable)

@implementation IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(self, actual, mapper);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->d_, d)) {
    JreStrongAssign(&self->d_, d);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onSuccessWithId:(id)value {
  id<JavaUtilIterator> iterator;
  jboolean has;
  @try {
    iterator = [((id<JavaLangIterable>) nil_chk([((id<IoReactivexFunctionsFunction>) nil_chk(mapper_)) applyWithId:value])) iterator];
    has = [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:ex];
    return;
  }
  if (!has) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
    return;
  }
  JreVolatileStrongAssign(&self->it_, iterator);
  [self drain];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
  [((id<IoReactivexDisposablesDisposable>) nil_chk(d_)) dispose];
  JreStrongAssign(&d_, JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED));
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<JavaUtilIterator> iterator = JreLoadVolatileId(&self->it_);
  if (outputFused_ && iterator != nil) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:nil];
    [a onComplete];
    return;
  }
  jint missed = 1;
  for (; ; ) {
    if (iterator != nil) {
      jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
      jlong e = 0LL;
      if (r == JavaLangLong_MAX_VALUE) {
        [self slowPathWithOrgReactivestreamsSubscriber:a withJavaUtilIterator:iterator];
        return;
      }
      while (e != r) {
        if (JreLoadVolatileBoolean(&cancelled_)) {
          return;
        }
        id v;
        @try {
          v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([iterator next], @"The iterator returned a null value");
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          return;
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
        if (JreLoadVolatileBoolean(&cancelled_)) {
          return;
        }
        e++;
        jboolean b;
        @try {
          b = [iterator hasNext];
        }
        @catch (JavaLangThrowable *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
          [a onErrorWithJavaLangThrowable:ex];
          return;
        }
        if (!b) {
          [a onComplete];
          return;
        }
      }
      if (e != 0LL) {
        IoReactivexInternalUtilBackpressureHelper_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, e);
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    if (iterator == nil) {
      iterator = JreLoadVolatileId(&it_);
    }
  }
}

- (void)slowPathWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                            withJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  for (; ; ) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    id v;
    @try {
      v = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
      return;
    }
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jboolean b;
    @try {
      b = [iterator hasNext];
    }
    @catch (JavaLangThrowable *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
      [a onErrorWithJavaLangThrowable:ex];
      return;
    }
    if (!b) {
      [a onComplete];
      return;
    }
  }
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    outputFused_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (void)clear {
  JreVolatileStrongAssign(&it_, nil);
}

- (jboolean)isEmpty {
  return JreLoadVolatileId(&it_) == nil;
}

- (id __nullable)poll {
  id<JavaUtilIterator> iterator = JreLoadVolatileId(&it_);
  if (iterator != nil) {
    id v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([iterator next], @"The iterator returned a null value");
    if (![iterator hasNext]) {
      JreVolatileStrongAssign(&it_, nil);
    }
    return v;
  }
  return nil;
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)__javaClone:(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&it_, &original->it_);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(mapper_);
  RELEASE_(requested_);
  RELEASE_(d_);
  JreReleaseVolatile(&it_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 16, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(requestWithLong:);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(drain);
  methods[7].selector = @selector(slowPathWithOrgReactivestreamsSubscriber:withJavaUtilIterator:);
  methods[8].selector = @selector(requestFusionWithInt:);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(isEmpty);
  methods[11].selector = @selector(poll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "mapper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "d_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x40, -1, -1, 20, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "outputFused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;", "(Lorg/reactivestreams/Subscriber<-TR;>;Lio/reactivex/functions/Function<-TT;+Ljava/lang/Iterable<+TR;>;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "slowPath", "LOrgReactivestreamsSubscriber;LJavaUtilIterator;", "(Lorg/reactivestreams/Subscriber<-TR;>;Ljava/util/Iterator<+TR;>;)V", "requestFusion", "I", "LJavaLangException;", "()TR;", "Lorg/reactivestreams/Subscriber<-TR;>;", "Lio/reactivex/functions/Function<-TT;+Ljava/lang/Iterable<+TR;>;>;", "Ljava/util/Iterator<+TR;>;", "LIoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription<TR;>;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver = { "FlatMapIterableObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 12, 8, 21, -1, -1, 22, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->mapper_, mapper);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver *new_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_, actual, mapper)
}

IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver *create_IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_, actual, mapper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleFlatMapIterableFlowable_FlatMapIterableObserver)
