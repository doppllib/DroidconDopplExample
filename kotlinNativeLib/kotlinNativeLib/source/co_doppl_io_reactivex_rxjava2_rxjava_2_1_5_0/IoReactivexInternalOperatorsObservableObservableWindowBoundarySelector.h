//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector))
#define IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream.h"

@class IoReactivexObservable;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexObservableSource> open_;
  id<IoReactivexFunctionsFunction> close_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)open
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                            withInt:(jint)bufferSize;

- (IoReactivexObservable *)blockingFirst;

- (IoReactivexObservable *)blockingFirstWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingLast;

- (IoReactivexObservable *)blockingLastWithId:(IoReactivexObservable *)arg0;

- (IoReactivexObservable *)blockingSingle;

- (IoReactivexObservable *)blockingSingleWithId:(IoReactivexObservable *)arg0;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector, open_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector, close_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_initWithIoReactivexObservableSource_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_

#define RESTRICT_IoReactivexInternalObserversQueueDrainObserver 1
#define INCLUDE_IoReactivexInternalObserversQueueDrainObserver 1
#include "IoReactivexInternalObserversQueueDrainObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;
@protocol JavaUtilList;

@interface IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver : IoReactivexInternalObserversQueueDrainObserver < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObservableSource> open_;
  id<IoReactivexFunctionsFunction> close_;
  jint bufferSize_;
  IoReactivexDisposablesCompositeDisposable *resources_;
  id<IoReactivexDisposablesDisposable> s_;
  JavaUtilConcurrentAtomicAtomicReference *boundary_;
  id<JavaUtilList> ws_;
  JavaUtilConcurrentAtomicAtomicLong *windows_;
}

#pragma mark Public

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id)v;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)open
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)close
                                    withInt:(jint)bufferSize;

- (void)closeWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *)w;

- (void)disposeBoundary;

- (void)drainLoop;

- (void)errorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)openWithId:(id)b;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)arg0
withIoReactivexInternalFuseableSimplePlainQueue:(id<IoReactivexInternalFuseableSimplePlainQueue>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, open_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, close_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, resources_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, boundary_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, ws_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver, windows_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *self, id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_initWithIoReactivexObserver_withIoReactivexObservableSource_withIoReactivexFunctionsFunction_withInt_(id<IoReactivexObserver> actual, id<IoReactivexObservableSource> open, id<IoReactivexFunctionsFunction> close, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation))
#define IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_

@class IoReactivexSubjectsUnicastSubject;

@interface IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation : NSObject {
 @public
  IoReactivexSubjectsUnicastSubject *w_;
  id open_;
}

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w
                                                   withId:(id)open;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation, w_, IoReactivexSubjectsUnicastSubject *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation, open_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *self, IoReactivexSubjectsUnicastSubject *w, id open);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexSubjectsUnicastSubject *w, id open) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation_initWithIoReactivexSubjectsUnicastSubject_withId_(IoReactivexSubjectsUnicastSubject *w, id open);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowOperation)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_

#define RESTRICT_IoReactivexObserversDisposableObserver 1
#define INCLUDE_IoReactivexObserversDisposableObserver 1
#include "IoReactivexObserversDisposableObserver.h"

@class IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver : IoReactivexObserversDisposableObserver {
 @public
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver, parent_, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *self, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryOpenObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver))
#define IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_

#define RESTRICT_IoReactivexObserversDisposableObserver 1
#define INCLUDE_IoReactivexObserversDisposableObserver 1
#include "IoReactivexObserversDisposableObserver.h"

@class IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver;
@class IoReactivexSubjectsUnicastSubject;
@class JavaLangThrowable;

@interface IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver : IoReactivexObserversDisposableObserver {
 @public
  IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent_;
  IoReactivexSubjectsUnicastSubject *w_;
  jboolean done_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver:(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)parent
                                                                                    withIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)w;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver, parent_, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver, w_, IoReactivexSubjectsUnicastSubject *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *self, IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *new_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver *create_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver_initWithIoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver_withIoReactivexSubjectsUnicastSubject_(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_WindowBoundaryMainObserver *parent, IoReactivexSubjectsUnicastSubject *w);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector_OperatorWindowBoundaryCloseObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableWindowBoundarySelector")
