//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSubjectsSingleSubject")
#ifdef RESTRICT_IoReactivexSubjectsSingleSubject
#define INCLUDE_ALL_IoReactivexSubjectsSingleSubject 0
#else
#define INCLUDE_ALL_IoReactivexSubjectsSingleSubject 1
#endif
#undef RESTRICT_IoReactivexSubjectsSingleSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexSubjectsSingleSubject_) && (INCLUDE_ALL_IoReactivexSubjectsSingleSubject || defined(INCLUDE_IoReactivexSubjectsSingleSubject))
#define IoReactivexSubjectsSingleSubject_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "IoReactivexSingle.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "IoReactivexSingleObserver.h"

@class IOSObjectArray;
@class IoReactivexSubjectsSingleSubject_SingleDisposable;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexSubjectsSingleSubject : IoReactivexSingle < IoReactivexSingleObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  id value_;
  JavaLangThrowable *error_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

+ (IoReactivexSubjectsSingleSubject * __nonnull)create;

- (JavaLangThrowable * __nullable)getThrowable;

- (id __nullable)getValue;

- (jboolean)hasObservers;

- (jboolean)hasThrowable;

- (jboolean)hasValue;

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable * __nonnull)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable> __nonnull)d;

- (void)onSuccessWithId:(id __nonnull)value;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver> __nonnull)observer;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)addWithIoReactivexSubjectsSingleSubject_SingleDisposable:(IoReactivexSubjectsSingleSubject_SingleDisposable * __nonnull)inner;

- (jint)observerCount;

- (void)removeWithIoReactivexSubjectsSingleSubject_SingleDisposable:(IoReactivexSubjectsSingleSubject_SingleDisposable * __nonnull)inner;

@end

J2OBJC_STATIC_INIT(IoReactivexSubjectsSingleSubject)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsSingleSubject, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsSingleSubject, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsSingleSubject, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexSubjectsSingleSubject, error_, JavaLangThrowable *)

inline IOSObjectArray *IoReactivexSubjectsSingleSubject_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsSingleSubject_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsSingleSubject, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexSubjectsSingleSubject_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexSubjectsSingleSubject_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexSubjectsSingleSubject, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT IoReactivexSubjectsSingleSubject *IoReactivexSubjectsSingleSubject_create();

FOUNDATION_EXPORT void IoReactivexSubjectsSingleSubject_init(IoReactivexSubjectsSingleSubject *self);

FOUNDATION_EXPORT IoReactivexSubjectsSingleSubject *new_IoReactivexSubjectsSingleSubject_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsSingleSubject *create_IoReactivexSubjectsSingleSubject_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsSingleSubject)

#endif

#if !defined (IoReactivexSubjectsSingleSubject_SingleDisposable_) && (INCLUDE_ALL_IoReactivexSubjectsSingleSubject || defined(INCLUDE_IoReactivexSubjectsSingleSubject_SingleDisposable))
#define IoReactivexSubjectsSingleSubject_SingleDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@class IoReactivexSubjectsSingleSubject;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionUnaryOperator;

@interface IoReactivexSubjectsSingleSubject_SingleDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
}

#pragma mark Public

- (IoReactivexSubjectsSingleSubject *)accumulateAndGetWithId:(IoReactivexSubjectsSingleSubject *)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (void)dispose;

- (IoReactivexSubjectsSingleSubject *)get;

- (IoReactivexSubjectsSingleSubject *)getAndAccumulateWithId:(IoReactivexSubjectsSingleSubject *)arg0
                          withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)arg1;

- (IoReactivexSubjectsSingleSubject *)getAndSetWithId:(IoReactivexSubjectsSingleSubject *)arg0;

- (IoReactivexSubjectsSingleSubject *)getAndUpdateWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

- (jboolean)isDisposed;

- (IoReactivexSubjectsSingleSubject *)updateAndGetWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
             withIoReactivexSubjectsSingleSubject:(IoReactivexSubjectsSingleSubject *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSubjectsSingleSubject_SingleDisposable)

J2OBJC_FIELD_SETTER(IoReactivexSubjectsSingleSubject_SingleDisposable, actual_, id<IoReactivexSingleObserver>)

FOUNDATION_EXPORT void IoReactivexSubjectsSingleSubject_SingleDisposable_initWithIoReactivexSingleObserver_withIoReactivexSubjectsSingleSubject_(IoReactivexSubjectsSingleSubject_SingleDisposable *self, id<IoReactivexSingleObserver> actual, IoReactivexSubjectsSingleSubject *parent);

FOUNDATION_EXPORT IoReactivexSubjectsSingleSubject_SingleDisposable *new_IoReactivexSubjectsSingleSubject_SingleDisposable_initWithIoReactivexSingleObserver_withIoReactivexSubjectsSingleSubject_(id<IoReactivexSingleObserver> actual, IoReactivexSubjectsSingleSubject *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSubjectsSingleSubject_SingleDisposable *create_IoReactivexSubjectsSingleSubject_SingleDisposable_initWithIoReactivexSingleObserver_withIoReactivexSubjectsSingleSubject_(id<IoReactivexSingleObserver> actual, IoReactivexSubjectsSingleSubject *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSubjectsSingleSubject_SingleDisposable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexSubjectsSingleSubject")
