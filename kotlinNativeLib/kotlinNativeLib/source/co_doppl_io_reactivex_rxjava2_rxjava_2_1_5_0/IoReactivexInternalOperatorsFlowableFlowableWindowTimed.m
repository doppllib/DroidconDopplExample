//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalDisposablesSequentialDisposable.h"
#include "IoReactivexInternalFuseableSimplePlainQueue.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableWindowTimed.h"
#include "IoReactivexInternalQueueMpscLinkedQueue.h"
#include "IoReactivexInternalSubscribersQueueDrainSubscriber.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilNotificationLite.h"
#include "IoReactivexProcessorsUnicastProcessor.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSubscribersSerializedSubscriber.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion () {
 @public
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *this$0_;
  IoReactivexProcessorsUnicastProcessor *processor_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion, processor_, IoReactivexProcessorsUnicastProcessor *)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                   withLong:(jlong)timespan
                                   withLong:(jlong)timeskip
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                   withLong:(jlong)maxSize
                                    withInt:(jint)bufferSize
                                withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(self, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexSubscribersSerializedSubscriber *actual = create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s);
  if (timespan_ == timeskip_) {
    if (maxSize_ == JavaLangLong_MAX_VALUE) {
      [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(actual, timespan_, unit_, scheduler_, bufferSize_)];
      return;
    }
    [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(actual, timespan_, unit_, scheduler_, bufferSize_, maxSize_, restartTimerOnMaxSize_)];
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(actual, timespan_, timeskip_, unit_, [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker], bufferSize_)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withLong:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;JIZ", "(Lio/reactivex/Flowable<TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Flowable<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed = { "FlowableWindowTimed", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 7, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed *self, IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->maxSize_ = maxSize;
  self->bufferSize_ = bufferSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed, initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_(IoReactivexFlowable *source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jlong maxSize, jint bufferSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed, initWithIoReactivexFlowable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withLong_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, maxSize, bufferSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed)

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber)

id IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT;

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber

+ (id)NEXT {
  return IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT;
}

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(self, actual, timespan, unit, scheduler, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    JreStrongAssign(&window_, IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_));
    id<OrgReactivestreamsSubscriber> a = actual_;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:self];
    jlong r = [self requested];
    if (r != 0LL) {
      [a onNextWithId:window_];
      if (r != JavaLangLong_MAX_VALUE) {
        [self producedWithLong:1];
      }
    }
    else {
      JreAssignVolatileBoolean(&cancelled_, true);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      [a onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver first window due to lack of requests.")];
      return;
    }
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      if ([((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(timer_)) replaceWithIoReactivexDisposablesDisposable:[((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_]]) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&terminated_)) {
    return;
  }
  if ([self fastEnter]) {
    [((IoReactivexProcessorsUnicastProcessor *) nil_chk(window_)) onNextWithId:t];
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self dispose];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [self dispose];
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)run {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&terminated_, true);
    [self dispose];
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexProcessorsUnicastProcessor *w = window_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      jboolean term = JreLoadVolatileBoolean(&terminated_);
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) poll];
      if (d && (o == nil || o == IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT)) {
        JreStrongAssign(&window_, nil);
        [q clear];
        [self dispose];
        JavaLangThrowable *err = error_;
        if (err != nil) {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onErrorWithJavaLangThrowable:err];
        }
        else {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
        }
        return;
      }
      if (o == nil) {
        break;
      }
      if (o == IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT) {
        [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
        if (!term) {
          w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
          JreStrongAssign(&window_, w);
          jlong r = [self requested];
          if (r != 0LL) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
            if (r != JavaLangLong_MAX_VALUE) {
              [self producedWithLong:1];
            }
          }
          else {
            JreStrongAssign(&window_, nil);
            [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
            [self dispose];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver first window due to lack of requests.")];
            return;
          }
        }
        else {
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        }
        continue;
      }
      [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  RELEASE_(window_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "timer_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "NEXT", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;I", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lio/reactivex/processors/UnicastProcessor<TT;>;", &IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT, "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;Ljava/lang/Object;Lio/reactivex/Flowable<TT;>;>;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber = { "WindowExactUnboundedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 10, 9, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_NEXT, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_, actual, timespan, unit, scheduler, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_, actual, timespan, unit, scheduler, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactUnboundedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                             withInt:(jint)bufferSize
                                            withLong:(jlong)maxSize
                                         withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(self, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<OrgReactivestreamsSubscriber> a = actual_;
    [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
    JreStrongAssign(&window_, w);
    jlong r = [self requested];
    if (r != 0LL) {
      [a onNextWithId:w];
      if (r != JavaLangLong_MAX_VALUE) {
        [self producedWithLong:1];
      }
    }
    else {
      JreAssignVolatileBoolean(&cancelled_, true);
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      [a onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver initial window due to lack of requests.")];
      return;
    }
    id<IoReactivexDisposablesDisposable> d;
    IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *consumerIndexHolder = create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(producerIndex_, self);
    if (restartTimerOnMaxSize_) {
      d = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:consumerIndexHolder withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
    }
    else {
      d = [((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:consumerIndexHolder withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
    }
    if ([((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(timer_)) replaceWithIoReactivexDisposablesDisposable:d]) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&terminated_)) {
    return;
  }
  if ([self fastEnter]) {
    IoReactivexProcessorsUnicastProcessor *w = window_;
    [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:t];
    jlong c = count_ + 1;
    if (c >= maxSize_) {
      producerIndex_++;
      count_ = 0;
      [w onComplete];
      jlong r = [self requested];
      if (r != 0LL) {
        w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
        JreStrongAssign(&window_, w);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:w];
        if (r != JavaLangLong_MAX_VALUE) {
          [self producedWithLong:1];
        }
        if (restartTimerOnMaxSize_) {
          id<IoReactivexDisposablesDisposable> tm = [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(timer_)) get];
          [((id<IoReactivexDisposablesDisposable>) nil_chk(tm)) dispose];
          id<IoReactivexDisposablesDisposable> task = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(producerIndex_, self) withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
          if (![timer_ compareAndSetWithId:tm withId:task]) {
            [((id<IoReactivexDisposablesDisposable>) nil_chk(task)) dispose];
          }
        }
      }
      else {
        JreStrongAssign(&window_, nil);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver window due to lack of requests")];
        [self dispose];
        return;
      }
    }
    else {
      count_ = c;
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self dispose];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [self dispose];
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
  IoReactivexScheduler_Worker *w = worker_;
  if (w != nil) {
    [w dispose];
  }
}

- (void)drainLoop {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  IoReactivexProcessorsUnicastProcessor *w = window_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&terminated_)) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) clear];
        [self dispose];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id o = [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) poll];
      jboolean empty = o == nil;
      jboolean isHolder = [o isKindOfClass:[IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder class]];
      if (d && (empty || isHolder)) {
        JreStrongAssign(&window_, nil);
        [q clear];
        JavaLangThrowable *err = error_;
        if (err != nil) {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onErrorWithJavaLangThrowable:err];
        }
        else {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
        }
        [self dispose];
        return;
      }
      if (empty) {
        break;
      }
      if (isHolder) {
        IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *consumerIndexHolder = (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *) cast_chk(o, [IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder class]);
        if (restartTimerOnMaxSize_ || producerIndex_ == ((IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *) nil_chk(consumerIndexHolder))->index_) {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
          count_ = 0;
          w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
          JreStrongAssign(&window_, w);
          jlong r = [self requested];
          if (r != 0LL) {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
            if (r != JavaLangLong_MAX_VALUE) {
              [self producedWithLong:1];
            }
          }
          else {
            JreStrongAssign(&window_, nil);
            [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) clear];
            [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver first window due to lack of requests.")];
            [self dispose];
            return;
          }
        }
        continue;
      }
      [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:IoReactivexInternalUtilNotificationLite_getValueWithId_(o)];
      jlong c = count_ + 1;
      if (c >= maxSize_) {
        producerIndex_++;
        count_ = 0;
        [w onComplete];
        jlong r = [self requested];
        if (r != 0LL) {
          w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
          JreStrongAssign(&window_, w);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:w];
          if (r != JavaLangLong_MAX_VALUE) {
            [self producedWithLong:1];
          }
          if (restartTimerOnMaxSize_) {
            id<IoReactivexDisposablesDisposable> tm = [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(timer_)) get];
            [((id<IoReactivexDisposablesDisposable>) nil_chk(tm)) dispose];
            id<IoReactivexDisposablesDisposable> task = [((IoReactivexScheduler_Worker *) nil_chk(worker_)) schedulePeriodicallyWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(producerIndex_, self) withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
            if (![timer_ compareAndSetWithId:tm withId:task]) {
              [((id<IoReactivexDisposablesDisposable>) nil_chk(task)) dispose];
            }
          }
        }
        else {
          JreStrongAssign(&window_, nil);
          [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not deliver window due to lack of requests")];
          [self dispose];
          return;
        }
      }
      else {
        count_ = c;
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(worker_);
  RELEASE_(s_);
  RELEASE_(window_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withInt:withLong:withBoolean:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(drainLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "window_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "timer_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;IJZ", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;Ljava/lang/Object;Lio/reactivex/Flowable<TT;>;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber = { "WindowExactBoundedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 9, 13, 12, 13, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->bufferSize_ = bufferSize;
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
  if (restartTimerOnMaxSize) {
    JreStrongAssign(&self->worker_, [((IoReactivexScheduler *) nil_chk(scheduler)) createWorker]);
  }
  else {
    JreStrongAssign(&self->worker_, nil);
  }
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jint bufferSize, jlong maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withInt_withLong_withBoolean_, actual, timespan, unit, scheduler, bufferSize, maxSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder

- (instancetype)initWithLong:(jlong)index
withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *)parent {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(self, index, parent);
  return self;
}

- (void)run {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *p = parent_;
  if (!JreLoadVolatileBoolean(&((IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *) nil_chk(p))->cancelled_)) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(p->queue_)) offerWithId:self];
  }
  else {
    JreAssignVolatileBoolean(&p->terminated_, true);
    [p dispose];
  }
  if ([p enter]) {
    [p drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "JLIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;", "(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber<*>;)V", "Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowExactBoundedSubscriber<*>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder = { "ConsumerIndexHolder", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 2, 2, 3, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *self, jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent) {
  NSObject_init(self);
  self->index_ = index;
  JreStrongAssign(&self->parent_, parent);
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder, initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_, index, parent)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder_initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_(jlong index, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber *parent) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder, initWithLong_withIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_, index, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowExactBoundedSubscriber_ConsumerIndexHolder)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)timespan
                                            withLong:(jlong)timeskip
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                             withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(self, actual, timespan, timeskip, unit, worker, bufferSize);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    jlong r = [self requested];
    if (r != 0LL) {
      IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
      [((id<JavaUtilList>) nil_chk(windows_)) addWithId:w];
      [actual_ onNextWithId:w];
      if (r != JavaLangLong_MAX_VALUE) {
        [self producedWithLong:1];
      }
      [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(self, w) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
      [worker_ schedulePeriodicallyWithJavaLangRunnable:self withLong:timeskip_ withLong:timeskip_ withJavaUtilConcurrentTimeUnit:unit_];
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      [actual_ onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not emit the first window due to lack of requests")];
    }
  }
}

- (void)onNextWithId:(id)t {
  if ([self fastEnter]) {
    for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(windows_)) {
      [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:t];
    }
    if ([self leaveWithInt:-1] == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:t];
    if (![self enter]) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
  [self dispose];
}

- (void)onComplete {
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    [self drainLoop];
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  [self dispose];
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  JreAssignVolatileBoolean(&cancelled_, true);
}

- (void)dispose {
  [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
}

- (void)completeWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w {
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(w, false)];
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  id<IoReactivexInternalFuseableSimplePlainQueue> q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  id<JavaUtilList> ws = windows_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&terminated_)) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
        [self dispose];
        [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) clear];
        [((id<JavaUtilList>) nil_chk(ws)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v = [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(q)) poll];
      jboolean empty = v == nil;
      jboolean sw = [v isKindOfClass:[IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork class]];
      if (d && (empty || sw)) {
        [q clear];
        JavaLangThrowable *e = error_;
        if (e != nil) {
          for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
            [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onErrorWithJavaLangThrowable:e];
          }
        }
        else {
          for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
            [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onComplete];
          }
        }
        [ws clear];
        [self dispose];
        return;
      }
      if (empty) {
        break;
      }
      if (sw) {
        IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *work = (IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *) cast_chk(v, [IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork class]);
        if (((IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *) nil_chk(work))->open_) {
          if (JreLoadVolatileBoolean(&cancelled_)) {
            continue;
          }
          jlong r = [self requested];
          if (r != 0LL) {
            IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
            [((id<JavaUtilList>) nil_chk(ws)) addWithId:w];
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:w];
            if (r != JavaLangLong_MAX_VALUE) {
              [self producedWithLong:1];
            }
            [((IoReactivexScheduler_Worker *) nil_chk(worker_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(self, w) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
          }
          else {
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Can't emit window due to lack of requests")];
          }
        }
        else {
          [((id<JavaUtilList>) nil_chk(ws)) removeWithId:work->w_];
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(work->w_)) onComplete];
          if ([ws isEmpty] && JreLoadVolatileBoolean(&cancelled_)) {
            JreAssignVolatileBoolean(&terminated_, true);
          }
        }
      }
      else {
        for (IoReactivexProcessorsUnicastProcessor * __strong w in nil_chk(ws)) {
          [((IoReactivexProcessorsUnicastProcessor *) nil_chk(w)) onNextWithId:v];
        }
      }
    }
    missed = [self leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)run {
  IoReactivexProcessorsUnicastProcessor *w = IoReactivexProcessorsUnicastProcessor_createWithInt_(bufferSize_);
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *sw = create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(w, true);
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:sw];
  }
  if ([self enter]) {
    [self drainLoop];
  }
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(worker_);
  RELEASE_(windows_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(completeWithIoReactivexProcessorsUnicastProcessor:);
  methods[9].selector = @selector(drainLoop);
  methods[10].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "windows_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;I", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Flowable<TT;>;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "complete", "LIoReactivexProcessorsUnicastProcessor;", "(Lio/reactivex/processors/UnicastProcessor<TT;>;)V", "Ljava/util/List<Lio/reactivex/processors/UnicastProcessor<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork;LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;Ljava/lang/Object;Lio/reactivex/Flowable<TT;>;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber = { "WindowSkipSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 11, 8, 15, 16, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->worker_, worker);
  self->bufferSize_ = bufferSize;
  JreStrongAssignAndConsume(&self->windows_, new_JavaUtilLinkedList_init());
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_, actual, timespan, timeskip, unit, worker, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_(id<OrgReactivestreamsSubscriber> actual, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber, initWithOrgReactivestreamsSubscriber_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withInt_, actual, timespan, timeskip, unit, worker, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork

- (instancetype)initWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)w
                                                  withBoolean:(jboolean)open {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(self, w, open);
  return self;
}

- (void)dealloc {
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexProcessorsUnicastProcessor:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "open_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexProcessorsUnicastProcessor;Z", "(Lio/reactivex/processors/UnicastProcessor<TT;>;Z)V", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork = { "SubjectWork", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 1, 2, 3, -1, -1, 4, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *self, IoReactivexProcessorsUnicastProcessor *w, jboolean open) {
  NSObject_init(self);
  JreStrongAssign(&self->w_, w);
  self->open_ = open;
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexProcessorsUnicastProcessor *w, jboolean open) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork, initWithIoReactivexProcessorsUnicastProcessor_withBoolean_, w, open)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork_initWithIoReactivexProcessorsUnicastProcessor_withBoolean_(IoReactivexProcessorsUnicastProcessor *w, jboolean open) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork, initWithIoReactivexProcessorsUnicastProcessor_withBoolean_, w, open)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_SubjectWork)

@implementation IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber:(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *)outer$
                                                           withIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)processor {
  IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(self, outer$, processor);
  return self;
}

- (void)run {
  [this$0_ completeWithIoReactivexProcessorsUnicastProcessor:processor_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(processor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber:withIoReactivexProcessorsUnicastProcessor:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "processor_", "LIoReactivexProcessorsUnicastProcessor;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexProcessorsUnicastProcessor;", "(Lio/reactivex/processors/UnicastProcessor<TT;>;)V", "Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$WindowSkipSubscriber<TT;>;", "Lio/reactivex/processors/UnicastProcessor<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion = { "Completion", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x10, 2, 2, 4, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *self, IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->processor_, processor);
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *new_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion, initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_, outer$, processor)
}

IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion *create_IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion_initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber *outer$, IoReactivexProcessorsUnicastProcessor *processor) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion, initWithIoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_withIoReactivexProcessorsUnicastProcessor_, outer$, processor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableWindowTimed_WindowSkipSubscriber_Completion)
