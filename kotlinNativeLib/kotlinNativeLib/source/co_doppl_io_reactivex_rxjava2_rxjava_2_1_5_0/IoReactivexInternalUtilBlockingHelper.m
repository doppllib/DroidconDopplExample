//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexInternalSchedulersNonBlockingThread.h"
#include "IoReactivexInternalUtilBlockingHelper.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/CountDownLatch.h"

@interface IoReactivexInternalUtilBlockingHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalUtilBlockingHelper_init(IoReactivexInternalUtilBlockingHelper *self);

__attribute__((unused)) static IoReactivexInternalUtilBlockingHelper *new_IoReactivexInternalUtilBlockingHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalUtilBlockingHelper *create_IoReactivexInternalUtilBlockingHelper_init();

@implementation IoReactivexInternalUtilBlockingHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilBlockingHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)awaitForCompleteWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                        withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)subscription {
  IoReactivexInternalUtilBlockingHelper_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withIoReactivexDisposablesDisposable_(latch, subscription);
}

+ (void)verifyNonBlocking {
  IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(awaitForCompleteWithJavaUtilConcurrentCountDownLatch:withIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(verifyNonBlocking);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "awaitForComplete", "LJavaUtilConcurrentCountDownLatch;LIoReactivexDisposablesDisposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilBlockingHelper = { "BlockingHelper", "io.reactivex.internal.util", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalUtilBlockingHelper;
}

@end

void IoReactivexInternalUtilBlockingHelper_init(IoReactivexInternalUtilBlockingHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalUtilBlockingHelper *new_IoReactivexInternalUtilBlockingHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilBlockingHelper, init)
}

IoReactivexInternalUtilBlockingHelper *create_IoReactivexInternalUtilBlockingHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilBlockingHelper, init)
}

void IoReactivexInternalUtilBlockingHelper_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withIoReactivexDisposablesDisposable_(JavaUtilConcurrentCountDownLatch *latch, id<IoReactivexDisposablesDisposable> subscription) {
  IoReactivexInternalUtilBlockingHelper_initialize();
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(latch)) getCount] == 0) {
    return;
  }
  @try {
    IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
    [latch await];
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(subscription)) dispose];
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"Interrupted while waiting for subscription to complete.", e);
  }
}

void IoReactivexInternalUtilBlockingHelper_verifyNonBlocking() {
  IoReactivexInternalUtilBlockingHelper_initialize();
  if (IoReactivexPluginsRxJavaPlugins_isFailOnNonBlockingScheduler() && ([IoReactivexInternalSchedulersNonBlockingThread_class_() isInstance:JavaLangThread_currentThread()] || IoReactivexPluginsRxJavaPlugins_onBeforeBlocking())) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Attempt to block on a Scheduler ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @" that doesn't support blocking operators as they may lead to deadlock"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilBlockingHelper)
