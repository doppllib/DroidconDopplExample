//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexDisposablesReferenceDisposable")
#ifdef RESTRICT_IoReactivexDisposablesReferenceDisposable
#define INCLUDE_ALL_IoReactivexDisposablesReferenceDisposable 0
#else
#define INCLUDE_ALL_IoReactivexDisposablesReferenceDisposable 1
#endif
#undef RESTRICT_IoReactivexDisposablesReferenceDisposable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexDisposablesReferenceDisposable_) && (INCLUDE_ALL_IoReactivexDisposablesReferenceDisposable || defined(INCLUDE_IoReactivexDisposablesReferenceDisposable))
#define IoReactivexDisposablesReferenceDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "IoReactivexDisposablesDisposable.h"

@interface IoReactivexDisposablesReferenceDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Protected

- (void)onDisposedWithId:(id __nonnull)value;

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexDisposablesReferenceDisposable)

FOUNDATION_EXPORT void IoReactivexDisposablesReferenceDisposable_initWithId_(IoReactivexDisposablesReferenceDisposable *self, id value);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexDisposablesReferenceDisposable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexDisposablesReferenceDisposable")
