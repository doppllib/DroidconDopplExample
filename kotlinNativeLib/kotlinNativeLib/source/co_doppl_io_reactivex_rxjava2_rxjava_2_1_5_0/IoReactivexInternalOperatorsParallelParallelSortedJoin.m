//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexInternalOperatorsParallelParallelSortedJoin.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_serialVersionUID 3481980673745556697LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_serialVersionUID 6751017204873808094LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsParallelParallelSortedJoin

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                                     withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  IoReactivexInternalOperatorsParallelParallelSortedJoin_initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_(self, source, comparator);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *parent = create_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_(s, [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism], comparator_);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent];
  [source_ subscribeWithOrgReactivestreamsSubscriberArray:parent->subscribers_];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexParallelParallelFlowable:withJavaUtilComparator:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexParallelParallelFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexParallelParallelFlowable;LJavaUtilComparator;", "(Lio/reactivex/parallel/ParallelFlowable<Ljava/util/List<TT;>;>;Ljava/util/Comparator<-TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/parallel/ParallelFlowable<Ljava/util/List<TT;>;>;", "Ljava/util/Comparator<-TT;>;", "LIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription;LIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelSortedJoin = { "ParallelSortedJoin", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelSortedJoin;
}

@end

void IoReactivexInternalOperatorsParallelParallelSortedJoin_initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_(IoReactivexInternalOperatorsParallelParallelSortedJoin *self, IoReactivexParallelParallelFlowable *source, id<JavaUtilComparator> comparator) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->comparator_, comparator);
}

IoReactivexInternalOperatorsParallelParallelSortedJoin *new_IoReactivexInternalOperatorsParallelParallelSortedJoin_initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_(IoReactivexParallelParallelFlowable *source, id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin, initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_, source, comparator)
}

IoReactivexInternalOperatorsParallelParallelSortedJoin *create_IoReactivexInternalOperatorsParallelParallelSortedJoin_initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_(IoReactivexParallelParallelFlowable *source, id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin, initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_, source, comparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelSortedJoin)

@implementation IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_(self, actual, n, comparator);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(remaining_)) get] == 0) {
      [self drain];
    }
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self cancelAll];
    if ([self getAndIncrement] == 0) {
      JavaUtilArrays_fillWithNSObjectArray_withId_(lists_, nil);
    }
  }
}

- (void)cancelAll {
  {
    IOSObjectArray *a__ = subscribers_;
    IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber *s = *b__++;
      [((IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber *) nil_chk(s)) cancel];
    }
  }
}

- (void)innerNextWithJavaUtilList:(id<JavaUtilList>)value
                          withInt:(jint)index {
  IOSObjectArray_Set(nil_chk(lists_), index, value);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(remaining_)) decrementAndGet] == 0) {
    [self drain];
  }
}

- (void)innerErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) compareAndSetWithId:nil withId:e]) {
    [self drain];
  }
  else {
    if (e != [error_ get]) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
    }
  }
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  id<OrgReactivestreamsSubscriber> a = actual_;
  IOSObjectArray *lists = self->lists_;
  IOSIntArray *indexes = self->indexes_;
  jint n = ((IOSIntArray *) nil_chk(indexes))->size_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        return;
      }
      JavaLangThrowable *ex = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get];
      if (ex != nil) {
        [self cancelAll];
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      id min = nil;
      jint minIndex = -1;
      for (jint i = 0; i < n; i++) {
        id<JavaUtilList> list = IOSObjectArray_Get(nil_chk(lists), i);
        jint index = IOSIntArray_Get(indexes, i);
        if ([((id<JavaUtilList>) nil_chk(list)) size] != index) {
          if (min == nil) {
            min = [list getWithInt:index];
            minIndex = i;
          }
          else {
            id b = [list getWithInt:index];
            jboolean smaller;
            @try {
              smaller = ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:min withId:b] > 0);
            }
            @catch (JavaLangThrowable *exc) {
              IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(exc);
              [self cancelAll];
              JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
              if (![error_ compareAndSetWithId:nil withId:exc]) {
                IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(exc);
              }
              [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:[error_ get]];
              return;
            }
            if (smaller) {
              min = b;
              minIndex = i;
            }
          }
        }
      }
      if (min == nil) {
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:min];
      (*IOSIntArray_GetRef(indexes, minIndex))++;
      e++;
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        return;
      }
      JavaLangThrowable *ex = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get];
      if (ex != nil) {
        [self cancelAll];
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
        return;
      }
      jboolean empty = true;
      for (jint i = 0; i < n; i++) {
        if (IOSIntArray_Get(indexes, i) != [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(lists), i))) size]) {
          empty = false;
          break;
        }
      }
      if (empty) {
        JavaUtilArrays_fillWithNSObjectArray_withId_(lists, nil);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        return;
      }
    }
    if (e != 0 && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    jint w = [self get];
    if (w == missed) {
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(subscribers_);
  RELEASE_(lists_);
  RELEASE_(indexes_);
  RELEASE_(comparator_);
  RELEASE_(requested_);
  RELEASE_(remaining_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withJavaUtilComparator:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(cancelAll);
  methods[4].selector = @selector(innerNextWithJavaUtilList:withInt:);
  methods[5].selector = @selector(innerErrorWithJavaLangThrowable:);
  methods[6].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "subscribers_", "[LIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "lists_", "[LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "indexes_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "remaining_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;ILJavaUtilComparator;", "(Lorg/reactivestreams/Subscriber<-TT;>;ILjava/util/Comparator<-TT;>;)V", "request", "J", "innerNext", "LJavaUtilList;I", "(Ljava/util/List<TT;>;I)V", "innerError", "LJavaLangThrowable;", "Lorg/reactivestreams/Subscriber<-TT;>;", "[Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinInnerSubscriber<TT;>;", "[Ljava/util/List<TT;>;", "Ljava/util/Comparator<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LIoReactivexInternalOperatorsParallelParallelSortedJoin;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription = { "SortedJoinSubscription", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 7, 10, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription;
}

@end

void IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *self, id<OrgReactivestreamsSubscriber> actual, jint n, id<JavaUtilComparator> comparator) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->remaining_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->error_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->comparator_, comparator);
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:n type:IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(s, i, new_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_(self, i));
  }
  JreStrongAssign(&self->subscribers_, s);
  JreStrongAssignAndConsume(&self->lists_, [IOSObjectArray newArrayWithLength:n type:JavaUtilList_class_()]);
  JreStrongAssignAndConsume(&self->indexes_, [IOSIntArray newArrayWithLength:n]);
  [self->remaining_ lazySetWithInt:n];
}

IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *new_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_(id<OrgReactivestreamsSubscriber> actual, jint n, id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription, initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_, actual, n, comparator)
}

IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *create_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_(id<OrgReactivestreamsSubscriber> actual, jint n, id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription, initWithOrgReactivestreamsSubscriber_withInt_withJavaUtilComparator_, actual, n, comparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription)

@implementation IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber

- (instancetype)initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription:(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *)parent
                                                                                              withInt:(jint)index {
  IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_(self, parent, index);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self, s)) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  }
}

- (void)onNextWithId:(id<JavaUtilList>)t {
  [((IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *) nil_chk(parent_)) innerNextWithJavaUtilList:t withInt:index_];
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  [((IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *) nil_chk(parent_)) innerErrorWithJavaLangThrowable:t];
}

- (void)onComplete {
}

- (void)cancel {
  IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription:withInt:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription;I", "(Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription<TT;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "onError", "LJavaLangThrowable;", "Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription<TT;>;", "LIoReactivexInternalOperatorsParallelParallelSortedJoin;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;Lio/reactivex/FlowableSubscriber<Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber = { "SortedJoinInnerSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 6, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber *self, IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *parent, jint index) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
}

IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber *new_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *parent, jint index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber, initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_, parent, index)
}

IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber *create_IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription *parent, jint index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber, initWithIoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinSubscription_withInt_, parent, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelSortedJoin_SortedJoinInnerSubscriber)
