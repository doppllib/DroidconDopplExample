//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFunctionsCancellable.h"
#include "IoReactivexInternalDisposablesCancellableDisposable.h"
#include "IoReactivexInternalDisposablesDisposableHelper.h"
#include "IoReactivexInternalOperatorsSingleSingleCreate.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexSingle.h"
#include "IoReactivexSingleObserver.h"
#include "IoReactivexSingleOnSubscribe.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsSingleSingleCreate_Emitter_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleCreate_Emitter_serialVersionUID -2467358622224974244LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleCreate_Emitter, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleCreate

- (instancetype)initWithIoReactivexSingleOnSubscribe:(id<IoReactivexSingleOnSubscribe>)source {
  IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IoReactivexInternalOperatorsSingleSingleCreate_Emitter *parent = create_IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(s);
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  @try {
    [((id<IoReactivexSingleOnSubscribe>) nil_chk(source_)) subscribeWithIoReactivexSingleEmitter:parent];
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    [parent onErrorWithJavaLangThrowable:ex];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleOnSubscribe:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleOnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleOnSubscribe;", "(Lio/reactivex/SingleOnSubscribe<TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleOnSubscribe<TT;>;", "LIoReactivexInternalOperatorsSingleSingleCreate_Emitter;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleCreate = { "SingleCreate", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleCreate;
}

@end

void IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(IoReactivexInternalOperatorsSingleSingleCreate *self, id<IoReactivexSingleOnSubscribe> source) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsSingleSingleCreate *new_IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(id<IoReactivexSingleOnSubscribe> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleCreate, initWithIoReactivexSingleOnSubscribe_, source)
}

IoReactivexInternalOperatorsSingleSingleCreate *create_IoReactivexInternalOperatorsSingleSingleCreate_initWithIoReactivexSingleOnSubscribe_(id<IoReactivexSingleOnSubscribe> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleCreate, initWithIoReactivexSingleOnSubscribe_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleCreate)

@implementation IoReactivexInternalOperatorsSingleSingleCreate_Emitter

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual {
  IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(self, actual);
  return self;
}

- (void)onSuccessWithId:(id)value {
  if ([self get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    id<IoReactivexDisposablesDisposable> d = [self getAndSetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
    if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      @try {
        if (value == nil) {
          [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:create_JavaLangNullPointerException_initWithNSString_(@"onSuccess called with null. Null values are generally not allowed in 2.x operators and sources.")];
        }
        else {
          [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:value];
        }
      }
      @finally {
        if (d != nil) {
          [d dispose];
        }
      }
    }
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (![self tryOnErrorWithJavaLangThrowable:t]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
  }
}

- (jboolean)tryOnErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if ([self get] != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
    id<IoReactivexDisposablesDisposable> d = [self getAndSetWithId:JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)];
    if (d != JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED)) {
      @try {
        [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithJavaLangThrowable:t];
      }
      @finally {
        if (d != nil) {
          [d dispose];
        }
      }
      return true;
    }
  }
  return false;
}

- (void)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)setCancellableWithIoReactivexFunctionsCancellable:(id<IoReactivexFunctionsCancellable>)c {
  [self setDisposableWithIoReactivexDisposablesDisposable:create_IoReactivexInternalDisposablesCancellableDisposable_initWithIoReactivexFunctionsCancellable_(c)];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:);
  methods[1].selector = @selector(onSuccessWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(tryOnErrorWithJavaLangThrowable:);
  methods[4].selector = @selector(setDisposableWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(setCancellableWithIoReactivexFunctionsCancellable:);
  methods[6].selector = @selector(dispose);
  methods[7].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleCreate_Emitter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "tryOnError", "setDisposable", "LIoReactivexDisposablesDisposable;", "setCancellable", "LIoReactivexFunctionsCancellable;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleCreate;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleEmitter<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleCreate_Emitter = { "Emitter", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 8, 2, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleCreate_Emitter;
}

@end

void IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleCreate_Emitter *self, id<IoReactivexSingleObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsSingleSingleCreate_Emitter *new_IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleCreate_Emitter, initWithIoReactivexSingleObserver_, actual)
}

IoReactivexInternalOperatorsSingleSingleCreate_Emitter *create_IoReactivexInternalOperatorsSingleSingleCreate_Emitter_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleCreate_Emitter, initWithIoReactivexSingleObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleCreate_Emitter)
