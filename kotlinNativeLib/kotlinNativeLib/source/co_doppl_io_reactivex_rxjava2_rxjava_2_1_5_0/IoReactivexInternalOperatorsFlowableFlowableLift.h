//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableLift")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableLift
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableLift 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableLift 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableLift

#if !defined (IoReactivexInternalOperatorsFlowableFlowableLift_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableLift || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableLift))
#define IoReactivexInternalOperatorsFlowableFlowableLift_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"

@class IoReactivexFlowable;
@protocol IoReactivexFlowableOperator;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableLift : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFlowableOperator> operator__;
}

#pragma mark Public

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
            withIoReactivexFlowableOperator:(id<IoReactivexFlowableOperator>)operator_;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableLift)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableLift, operator__, id<IoReactivexFlowableOperator>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexInternalOperatorsFlowableFlowableLift *self, IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableLift *new_IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableLift *create_IoReactivexInternalOperatorsFlowableFlowableLift_initWithIoReactivexFlowable_withIoReactivexFlowableOperator_(IoReactivexFlowable *source, id<IoReactivexFlowableOperator> operator_);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableLift)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableLift")
