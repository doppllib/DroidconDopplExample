//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexExceptionsMissingBackpressureException.h"
#include "IoReactivexInternalFuseableConditionalSubscriber.h"
#include "IoReactivexInternalOperatorsParallelParallelRunOn.h"
#include "IoReactivexInternalQueueSpscArrayQueue.h"
#include "IoReactivexInternalSubscriptionsSubscriptionHelper.h"
#include "IoReactivexInternalUtilBackpressureHelper.h"
#include "IoReactivexParallelParallelFlowable.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_serialVersionUID 9222303586456402150LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber, serialVersionUID, jlong)

__attribute__((unused)) static void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_onErrorWithJavaLangThrowable_(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self, JavaLangThrowable *t);

__attribute__((unused)) static void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self);

inline jlong IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_serialVersionUID 1075119423897941642LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_serialVersionUID 1075119423897941642LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsParallelParallelRunOn

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)parent
                                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                    withInt:(jint)prefetch {
  IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(self, parent, scheduler, prefetch);
  return self;
}

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  if (![self validateWithOrgReactivestreamsSubscriberArray:subscribers]) {
    return;
  }
  jint n = ((IOSObjectArray *) nil_chk(subscribers))->size_;
  IOSObjectArray *parents = [IOSObjectArray arrayWithLength:n type:OrgReactivestreamsSubscriber_class_()];
  jint prefetch = self->prefetch_;
  for (jint i = 0; i < n; i++) {
    id<OrgReactivestreamsSubscriber> a = IOSObjectArray_Get(subscribers, i);
    IoReactivexScheduler_Worker *w = [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker];
    IoReactivexInternalQueueSpscArrayQueue *q = create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(prefetch);
    if ([IoReactivexInternalFuseableConditionalSubscriber_class_() isInstance:a]) {
      IOSObjectArray_SetAndConsume(parents, i, new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_((id<IoReactivexInternalFuseableConditionalSubscriber>) cast_check(a, IoReactivexInternalFuseableConditionalSubscriber_class_()), prefetch, q, w));
    }
    else {
      IOSObjectArray_SetAndConsume(parents, i, new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(a, prefetch, q, w));
    }
  }
  [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriberArray:parents];
}

- (jint)parallelism {
  return [((IoReactivexParallelParallelFlowable *) nil_chk(source_)) parallelism];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexParallelParallelFlowable:withIoReactivexScheduler:withInt:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  methods[2].selector = @selector(parallelism);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexParallelParallelFlowable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexParallelParallelFlowable;LIoReactivexScheduler;I", "(Lio/reactivex/parallel/ParallelFlowable<+TT;>;Lio/reactivex/Scheduler;I)V", "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/parallel/ParallelFlowable<+TT;>;", "LIoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber;LIoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber;LIoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/parallel/ParallelFlowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelRunOn = { "ParallelRunOn", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelRunOn;
}

@end

void IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexInternalOperatorsParallelParallelRunOn *self, IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch) {
  IoReactivexParallelParallelFlowable_init(self);
  JreStrongAssign(&self->source_, parent);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->prefetch_ = prefetch;
}

IoReactivexInternalOperatorsParallelParallelRunOn *new_IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn, initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_, parent, scheduler, prefetch)
}

IoReactivexInternalOperatorsParallelParallelRunOn *create_IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *parent, IoReactivexScheduler *scheduler, jint prefetch) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn, initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_, parent, scheduler, prefetch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelRunOn)

@implementation IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber

- (instancetype)initWithInt:(jint)prefetch
withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_initWithInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(self, prefetch, queue, worker);
  return self;
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (![((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(queue_)) offerWithId:t]) {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_onErrorWithJavaLangThrowable_(self, create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Queue is full?!"));
    return;
  }
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(self);
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t {
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_onErrorWithJavaLangThrowable_(self, t);
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(self);
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(self);
  }
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
    if ([self getAndIncrement] == 0) {
      [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(queue_)) clear];
    }
  }
}

- (void)schedule {
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(self);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(worker_);
  RELEASE_(s_);
  RELEASE_(error_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withIoReactivexInternalQueueSpscArrayQueue:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(requestWithLong:);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(schedule);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "prefetch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "worker_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "consumed_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILIoReactivexInternalQueueSpscArrayQueue;LIoReactivexScheduler_Worker;", "(ILio/reactivex/internal/queue/SpscArrayQueue<TT;>;Lio/reactivex/Scheduler$Worker;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "request", "J", "Lio/reactivex/internal/queue/SpscArrayQueue<TT;>;", "LIoReactivexInternalOperatorsParallelParallelRunOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/FlowableSubscriber<TT;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber = { "BaseRunOnSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x408, 7, 11, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_initWithInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->prefetch_ = prefetch;
  JreStrongAssign(&self->queue_, queue);
  self->limit_ = prefetch - (JreRShift32(prefetch, 2));
  JreStrongAssign(&self->worker_, worker);
}

void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_onErrorWithJavaLangThrowable_(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self, JavaLangThrowable *t) {
  if (JreLoadVolatileBoolean(&self->done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(t);
    return;
  }
  JreStrongAssign(&self->error_, t);
  JreAssignVolatileBoolean(&self->done_, true);
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(self);
}

void IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_schedule(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber *self) {
  if ([self getAndIncrement] == 0) {
    [((IoReactivexScheduler_Worker *) nil_chk(self->worker_)) scheduleWithJavaLangRunnable:self];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber)

@implementation IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)prefetch
          withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(self, actual, prefetch, queue, worker);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)run {
  jint missed = 1;
  jint c = consumed_;
  IoReactivexInternalQueueSpscArrayQueue *q = queue_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  jint lim = limit_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
      }
      id v = [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) poll];
      jboolean empty = v == nil;
      if (d && empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      if (empty) {
        break;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
      e++;
      jint p = ++c;
      if (p == lim) {
        c = 0;
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:p];
      }
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
        return;
      }
      if (JreLoadVolatileBoolean(&done_)) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
        if ([((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) isEmpty]) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    jint w = [self get];
    if (w == missed) {
      consumed_ = c;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withInt:withIoReactivexInternalQueueSpscArrayQueue:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;ILIoReactivexInternalQueueSpscArrayQueue;LIoReactivexScheduler_Worker;", "(Lorg/reactivestreams/Subscriber<-TT;>;ILio/reactivex/internal/queue/SpscArrayQueue<TT;>;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsParallelParallelRunOn;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber = { "RunOnSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_initWithInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(self, prefetch, queue, worker);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber, initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_, actual, prefetch, queue, worker)
}

IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber *create_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber, initWithOrgReactivestreamsSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_, actual, prefetch, queue, worker)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnSubscriber)

@implementation IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                                                 withInt:(jint)prefetch
                              withIoReactivexInternalQueueSpscArrayQueue:(IoReactivexInternalQueueSpscArrayQueue *)queue
                                         withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker {
  IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(self, actual, prefetch, queue, worker);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch_];
  }
}

- (void)run {
  jint missed = 1;
  jint c = consumed_;
  IoReactivexInternalQueueSpscArrayQueue *q = queue_;
  id<IoReactivexInternalFuseableConditionalSubscriber> a = actual_;
  jint lim = limit_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get];
    jlong e = 0LL;
    while (e != r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      if (d) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
          [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
      }
      id v = [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) poll];
      jboolean empty = v == nil;
      if (d && empty) {
        [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
        [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
        return;
      }
      if (empty) {
        break;
      }
      if ([((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) tryOnNextWithId:v]) {
        e++;
      }
      jint p = ++c;
      if (p == lim) {
        c = 0;
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:p];
      }
    }
    if (e == r) {
      if (JreLoadVolatileBoolean(&cancelled_)) {
        [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
        return;
      }
      if (JreLoadVolatileBoolean(&done_)) {
        JavaLangThrowable *ex = error_;
        if (ex != nil) {
          [((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) clear];
          [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onErrorWithJavaLangThrowable:ex];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
        if ([((IoReactivexInternalQueueSpscArrayQueue *) nil_chk(q)) isEmpty]) {
          [((id<IoReactivexInternalFuseableConditionalSubscriber>) nil_chk(a)) onComplete];
          [((IoReactivexScheduler_Worker *) nil_chk(worker_)) dispose];
          return;
        }
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [requested_ addAndGetWithLong:-e];
    }
    jint w = [self get];
    if (w == missed) {
      consumed_ = c;
      missed = [self addAndGetWithInt:-missed];
      if (missed == 0) {
        break;
      }
    }
    else {
      missed = w;
    }
  }
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalFuseableConditionalSubscriber:withInt:withIoReactivexInternalQueueSpscArrayQueue:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexInternalFuseableConditionalSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalFuseableConditionalSubscriber;ILIoReactivexInternalQueueSpscArrayQueue;LIoReactivexScheduler_Worker;", "(Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;ILio/reactivex/internal/queue/SpscArrayQueue<TT;>;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "Lio/reactivex/internal/fuseable/ConditionalSubscriber<-TT;>;", "LIoReactivexInternalOperatorsParallelParallelRunOn;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber = { "RunOnConditionalSubscriber", "io.reactivex.internal.operators.parallel", ptrTable, methods, fields, 7, 0x18, 3, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber;
}

@end

void IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  IoReactivexInternalOperatorsParallelParallelRunOn_BaseRunOnSubscriber_initWithInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(self, prefetch, queue, worker);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *new_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_, actual, prefetch, queue, worker)
}

IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber *create_IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, jint prefetch, IoReactivexInternalQueueSpscArrayQueue *queue, IoReactivexScheduler_Worker *worker) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber, initWithIoReactivexInternalFuseableConditionalSubscriber_withInt_withIoReactivexInternalQueueSpscArrayQueue_withIoReactivexScheduler_Worker_, actual, prefetch, queue, worker)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsParallelParallelRunOn_RunOnConditionalSubscriber)
