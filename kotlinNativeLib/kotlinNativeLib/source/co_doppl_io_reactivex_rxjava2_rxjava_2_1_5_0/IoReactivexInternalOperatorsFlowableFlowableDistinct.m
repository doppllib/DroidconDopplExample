//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IoReactivexExceptionsExceptions.h"
#include "IoReactivexFlowable.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexInternalFunctionsObjectHelper.h"
#include "IoReactivexInternalFuseableQueueFuseable.h"
#include "IoReactivexInternalFuseableQueueSubscription.h"
#include "IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream.h"
#include "IoReactivexInternalOperatorsFlowableFlowableDistinct.h"
#include "IoReactivexInternalSubscribersBasicFuseableSubscriber.h"
#include "IoReactivexInternalSubscriptionsEmptySubscription.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "J2ObjC_source.h"
#include "OrgReactivestreamsSubscriber.h"
#include "OrgReactivestreamsSubscription.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsFlowableFlowableDistinct

- (instancetype)initWithIoReactivexFlowable:(IoReactivexFlowable *)source
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier {
  IoReactivexInternalOperatorsFlowableFlowableDistinct_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(self, source, keySelector, collectionSupplier);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)observer {
  id<JavaUtilCollection> collection;
  @try {
    collection = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(collectionSupplier_)) call], @"The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");
  }
  @catch (JavaLangThrowable *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithJavaLangThrowable_(ex);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithJavaLangThrowable_withOrgReactivestreamsSubscriber_(ex, observer);
    return;
  }
  [((IoReactivexFlowable *) nil_chk(source_)) subscribeWithIoReactivexFlowableSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_(observer, keySelector_, collection)];
}

- (void)dealloc {
  RELEASE_(keySelector_);
  RELEASE_(collectionSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexFlowable:withIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "collectionSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexFlowable;LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/Flowable<TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Ljava/util/concurrent/Callable<+Ljava/util/Collection<-TK;>;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Lio/reactivex/functions/Function<-TT;TK;>;", "Ljava/util/concurrent/Callable<+Ljava/util/Collection<-TK;>;>;", "LIoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDistinct = { "FlowableDistinct", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDistinct;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDistinct_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableDistinct *self, IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilConcurrentCallable> collectionSupplier) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithIoReactivexFlowable_(self, source);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->collectionSupplier_, collectionSupplier);
}

IoReactivexInternalOperatorsFlowableFlowableDistinct *new_IoReactivexInternalOperatorsFlowableFlowableDistinct_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinct, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, keySelector, collectionSupplier)
}

IoReactivexInternalOperatorsFlowableFlowableDistinct *create_IoReactivexInternalOperatorsFlowableFlowableDistinct_initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexFlowable *source, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilConcurrentCallable> collectionSupplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinct, initWithIoReactivexFlowable_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_, source, keySelector, collectionSupplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDistinct)

@implementation IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)keySelector
                              withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_(self, actual, keySelector, collection);
  return self;
}

- (void)onNextWithId:(id)value {
  if (done_) {
    return;
  }
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE) {
    id key;
    jboolean b;
    @try {
      key = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:value], @"The keySelector returned a null key");
      b = [((id<JavaUtilCollection>) nil_chk(collection_)) addWithId:key];
    }
    @catch (JavaLangThrowable *ex) {
      [self failWithJavaLangThrowable:ex];
      return;
    }
    if (b) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:value];
    }
    else {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
    }
  }
  else {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:nil];
  }
}

- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithJavaLangThrowable_(e);
  }
  else {
    done_ = true;
    [((id<JavaUtilCollection>) nil_chk(collection_)) clear];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithJavaLangThrowable:e];
  }
}

- (void)onComplete {
  if (!done_) {
    done_ = true;
    [((id<JavaUtilCollection>) nil_chk(collection_)) clear];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (jint)requestFusionWithInt:(jint)mode {
  return [self transitiveBoundaryFusionWithInt:mode];
}

- (id __nullable)poll {
  for (; ; ) {
    id v = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs_)) poll];
    if (v == nil || [((id<JavaUtilCollection>) nil_chk(collection_)) addWithId:IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(keySelector_)) applyWithId:v], @"The keySelector returned a null key")]) {
      return v;
    }
    else {
      if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:1];
      }
    }
  }
}

- (void)clear {
  [((id<JavaUtilCollection>) nil_chk(collection_)) clear];
  [super clear];
}

- (void)dealloc {
  RELEASE_(collection_);
  RELEASE_(keySelector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, 10, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexFunctionsFunction:withJavaUtilCollection:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithJavaLangThrowable:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(requestFusionWithInt:);
  methods[5].selector = @selector(poll);
  methods[6].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "collection_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "keySelector_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexFunctionsFunction;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/functions/Function<-TT;TK;>;Ljava/util/Collection<-TK;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LJavaLangThrowable;", "requestFusion", "I", "LJavaLangException;", "()TT;", "Ljava/util/Collection<-TK;>;", "Lio/reactivex/functions/Function<-TT;TK;>;", "LIoReactivexInternalOperatorsFlowableFlowableDistinct;", "<T:Ljava/lang/Object;K:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/BasicFuseableSubscriber<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber = { "DistinctSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 2, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilCollection> collection) {
  IoReactivexInternalSubscribersBasicFuseableSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  JreStrongAssign(&self->keySelector_, keySelector);
  JreStrongAssign(&self->collection_, collection);
}

IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_, actual, keySelector, collection)
}

IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> keySelector, id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withJavaUtilCollection_, actual, keySelector, collection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableDistinct_DistinctSubscriber)
