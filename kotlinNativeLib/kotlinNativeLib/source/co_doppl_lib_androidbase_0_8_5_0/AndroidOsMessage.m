//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsBundle.h"
#include "AndroidOsHandler.h"
#include "AndroidOsMessage.h"
#include "AndroidUtilTimeUtils.h"
#include "J2ObjC_source.h"
#include "android/os/SystemClock.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"

inline id AndroidOsMessage_get_sPoolSync();
static id AndroidOsMessage_sPoolSync;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsMessage, sPoolSync, id)

inline AndroidOsMessage *AndroidOsMessage_get_sPool();
inline AndroidOsMessage *AndroidOsMessage_set_sPool(AndroidOsMessage *value);
static AndroidOsMessage *AndroidOsMessage_sPool;
J2OBJC_STATIC_FIELD_OBJ(AndroidOsMessage, sPool, AndroidOsMessage *)

inline jint AndroidOsMessage_get_sPoolSize();
inline jint AndroidOsMessage_set_sPoolSize(jint value);
inline jint *AndroidOsMessage_getRef_sPoolSize();
static jint AndroidOsMessage_sPoolSize = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidOsMessage, sPoolSize, jint)

inline jint AndroidOsMessage_get_MAX_POOL_SIZE();
#define AndroidOsMessage_MAX_POOL_SIZE 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, MAX_POOL_SIZE, jint)

J2OBJC_INITIALIZED_DEFN(AndroidOsMessage)

@implementation AndroidOsMessage

+ (jint)FLAG_IN_USE {
  return AndroidOsMessage_FLAG_IN_USE;
}

+ (jint)FLAGS_RESERVED {
  return AndroidOsMessage_FLAGS_RESERVED;
}

+ (jint)FLAGS_TO_CLEAR_ON_COPY_FROM {
  return AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM;
}

+ (AndroidOsMessage *)obtain {
  return AndroidOsMessage_obtain();
}

+ (AndroidOsMessage *)obtainWithAndroidOsMessage:(AndroidOsMessage *)orig {
  return AndroidOsMessage_obtainWithAndroidOsMessage_(orig);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h {
  return AndroidOsMessage_obtainWithAndroidOsHandler_(h);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                            withJavaLangRunnable:(id<JavaLangRunnable>)callback {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(h, callback);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(h, what);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                          withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(h, what, obj);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2 {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(h, what, arg1, arg2);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2
                                          withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(h, what, arg1, arg2, obj);
}

- (void)recycle {
  [self clearForRecycle];
  @synchronized(AndroidOsMessage_sPoolSync) {
    if (AndroidOsMessage_sPoolSize < AndroidOsMessage_MAX_POOL_SIZE) {
      JreStrongAssign(&next_, AndroidOsMessage_sPool);
      JreStrongAssign(&AndroidOsMessage_sPool, self);
      AndroidOsMessage_sPoolSize++;
    }
  }
}

- (void)copyFromWithAndroidOsMessage:(AndroidOsMessage *)o {
  self->flags_ = ((AndroidOsMessage *) nil_chk(o))->flags_ & ~AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM;
  self->what_ = o->what_;
  self->arg1_ = o->arg1_;
  self->arg2_ = o->arg2_;
  JreStrongAssign(&self->obj_, o->obj_);
  if (o->data_ != nil) {
    JreStrongAssign(&self->data_, (AndroidOsBundle *) cast_chk([o->data_ java_clone], [AndroidOsBundle class]));
  }
  else {
    JreStrongAssign(&self->data_, nil);
  }
}

- (jlong)getWhen {
  return when_;
}

- (void)setTargetWithAndroidOsHandler:(AndroidOsHandler *)target {
  JreStrongAssign(&self->target_, target);
}

- (AndroidOsHandler *)getTarget {
  return target_;
}

- (id<JavaLangRunnable>)getCallback {
  return callback_;
}

- (AndroidOsBundle *)getData {
  if (data_ == nil) {
    JreStrongAssignAndConsume(&data_, new_AndroidOsBundle_init());
  }
  return data_;
}

- (AndroidOsBundle *)peekData {
  return data_;
}

- (void)setDataWithAndroidOsBundle:(AndroidOsBundle *)data {
  JreStrongAssign(&self->data_, data);
}

- (void)sendToTarget {
  [((AndroidOsHandler *) nil_chk(target_)) sendMessageWithAndroidOsMessage:self];
}

- (void)clearForRecycle {
  flags_ = 0;
  what_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  JreStrongAssign(&obj_, nil);
  when_ = 0;
  JreStrongAssign(&target_, nil);
  JreStrongAssign(&callback_, nil);
  JreStrongAssign(&data_, nil);
}

- (jboolean)isInUse {
  return (flags_ & AndroidOsMessage_FLAG_IN_USE) == AndroidOsMessage_FLAG_IN_USE;
}

- (void)markInUse {
  flags_ |= AndroidOsMessage_FLAG_IN_USE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidOsMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return [self toStringWithLong:AndroidOsSystemClock_uptimeMillis()];
}

- (NSString *)toStringWithLong:(jlong)now {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:@"{ what="];
  [b appendWithInt:what_];
  [b appendWithNSString:@" when="];
  AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(when_ - now, b);
  if (arg1_ != 0) {
    [b appendWithNSString:@" arg1="];
    [b appendWithInt:arg1_];
  }
  if (arg2_ != 0) {
    [b appendWithNSString:@" arg2="];
    [b appendWithInt:arg2_];
  }
  if (obj_ != nil) {
    [b appendWithNSString:@" obj="];
    [b appendWithId:obj_];
  }
  [b appendWithNSString:@" }"];
  return [b description];
}

- (jint)describeContents {
  return 0;
}

- (void)dealloc {
  RELEASE_(obj_);
  RELEASE_(data_);
  RELEASE_(target_);
  RELEASE_(callback_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidOsMessage;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(obtain);
  methods[1].selector = @selector(obtainWithAndroidOsMessage:);
  methods[2].selector = @selector(obtainWithAndroidOsHandler:);
  methods[3].selector = @selector(obtainWithAndroidOsHandler:withJavaLangRunnable:);
  methods[4].selector = @selector(obtainWithAndroidOsHandler:withInt:);
  methods[5].selector = @selector(obtainWithAndroidOsHandler:withInt:withId:);
  methods[6].selector = @selector(obtainWithAndroidOsHandler:withInt:withInt:withInt:);
  methods[7].selector = @selector(obtainWithAndroidOsHandler:withInt:withInt:withInt:withId:);
  methods[8].selector = @selector(recycle);
  methods[9].selector = @selector(copyFromWithAndroidOsMessage:);
  methods[10].selector = @selector(getWhen);
  methods[11].selector = @selector(setTargetWithAndroidOsHandler:);
  methods[12].selector = @selector(getTarget);
  methods[13].selector = @selector(getCallback);
  methods[14].selector = @selector(getData);
  methods[15].selector = @selector(peekData);
  methods[16].selector = @selector(setDataWithAndroidOsBundle:);
  methods[17].selector = @selector(sendToTarget);
  methods[18].selector = @selector(clearForRecycle);
  methods[19].selector = @selector(isInUse);
  methods[20].selector = @selector(markInUse);
  methods[21].selector = @selector(init);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(toStringWithLong:);
  methods[24].selector = @selector(describeContents);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "what_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "FLAG_IN_USE", "I", .constantValue.asInt = AndroidOsMessage_FLAG_IN_USE, 0x18, -1, -1, -1, -1 },
    { "FLAGS_RESERVED", "I", .constantValue.asInt = AndroidOsMessage_FLAGS_RESERVED, 0x18, -1, -1, -1, -1 },
    { "FLAGS_TO_CLEAR_ON_COPY_FROM", "I", .constantValue.asInt = AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM, 0x18, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "when_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "data_", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "target_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callback_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LAndroidOsMessage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sPoolSync", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "sPool", "LAndroidOsMessage;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "sPoolSize", "I", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "MAX_POOL_SIZE", "I", .constantValue.asInt = AndroidOsMessage_MAX_POOL_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "obtain", "LAndroidOsMessage;", "LAndroidOsHandler;", "LAndroidOsHandler;LJavaLangRunnable;", "LAndroidOsHandler;I", "LAndroidOsHandler;ILNSObject;", "LAndroidOsHandler;III", "LAndroidOsHandler;IIILNSObject;", "copyFrom", "setTarget", "setData", "LAndroidOsBundle;", "toString", "J", &AndroidOsMessage_sPoolSync, &AndroidOsMessage_sPool, &AndroidOsMessage_sPoolSize };
  static const J2ObjcClassInfo _AndroidOsMessage = { "Message", "android.os", ptrTable, methods, fields, 7, 0x11, 25, 17, -1, -1, -1, -1, -1 };
  return &_AndroidOsMessage;
}

+ (void)initialize {
  if (self == [AndroidOsMessage class]) {
    JreStrongAssignAndConsume(&AndroidOsMessage_sPoolSync, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(AndroidOsMessage)
  }
}

@end

AndroidOsMessage *AndroidOsMessage_obtain() {
  AndroidOsMessage_initialize();
  @synchronized(AndroidOsMessage_sPoolSync) {
    if (AndroidOsMessage_sPool != nil) {
      AndroidOsMessage *m = AndroidOsMessage_sPool;
      JreStrongAssign(&AndroidOsMessage_sPool, m->next_);
      JreStrongAssign(&m->next_, nil);
      AndroidOsMessage_sPoolSize--;
      return JreRetainedLocalValue(m);
    }
  }
  return create_AndroidOsMessage_init();
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsMessage_(AndroidOsMessage *orig) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  ((AndroidOsMessage *) nil_chk(m))->what_ = ((AndroidOsMessage *) nil_chk(orig))->what_;
  m->arg1_ = orig->arg1_;
  m->arg2_ = orig->arg2_;
  JreStrongAssign(&m->obj_, orig->obj_);
  if (orig->data_ != nil) {
    JreStrongAssignAndConsume(&m->data_, new_AndroidOsBundle_initWithAndroidOsBundle_(orig->data_));
  }
  JreStrongAssign(&m->target_, orig->target_);
  JreStrongAssign(&m->callback_, orig->callback_);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_(AndroidOsHandler *h) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(AndroidOsHandler *h, id<JavaLangRunnable> callback) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  JreStrongAssign(&m->callback_, callback);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(AndroidOsHandler *h, jint what) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(AndroidOsHandler *h, jint what, id obj) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(AndroidOsHandler *h, jint what, jint arg1, jint arg2) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(AndroidOsHandler *h, jint what, jint arg1, jint arg2, id obj) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

void AndroidOsMessage_init(AndroidOsMessage *self) {
  NSObject_init(self);
}

AndroidOsMessage *new_AndroidOsMessage_init() {
  J2OBJC_NEW_IMPL(AndroidOsMessage, init)
}

AndroidOsMessage *create_AndroidOsMessage_init() {
  J2OBJC_CREATE_IMPL(AndroidOsMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsMessage)
