//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidAppApplication.h"
#include "AndroidAppSharedPreferencesImpl.h"
#include "AndroidContentContext.h"
#include "AndroidContentIOSContext.h"
#include "AndroidContentSharedPreferences.h"
#include "AndroidDatabaseDatabaseErrorHandler.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidInternalUtilXmlUtils.h"
#include "AndroidOsFileUtils.h"
#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface AndroidContentIOSContext () {
 @public
  id mSync_;
  JavaIoFile *mPreferencesDir_;
  JavaUtilHashMap *sSharedPrefs_;
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile;

- (JavaIoFile *)makeFilenameWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)name;

- (JavaIoFile *)getPreferencesDir;

- (JavaIoFile *)findLocalFileWithNSString:(NSString *)name;

- (NSString *)getRootDirString;

@end

J2OBJC_FIELD_SETTER(AndroidContentIOSContext, mSync_, id)
J2OBJC_FIELD_SETTER(AndroidContentIOSContext, mPreferencesDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(AndroidContentIOSContext, sSharedPrefs_, JavaUtilHashMap *)

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(AndroidContentIOSContext *self, JavaIoFile *base, NSString *name);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_getPreferencesDir(AndroidContentIOSContext *self);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_findLocalFileWithNSString_(AndroidContentIOSContext *self, NSString *name);

__attribute__((unused)) static NSString *AndroidContentIOSContext_getRootDirString(AndroidContentIOSContext *self);

NSString *AndroidContentIOSContext_DATABASES = @"databases";
NSString *AndroidContentIOSContext_TAG = @"IOSContext";

@implementation AndroidContentIOSContext

+ (NSString *)DATABASES {
  return AndroidContentIOSContext_DATABASES;
}

+ (NSString *)TAG {
  return AndroidContentIOSContext_TAG;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidContentIOSContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidOsLooper *)getMainLooper {
  return AndroidOsLooper_getMainLooper();
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile {
  return AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(prefsFile);
}

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name {
  return AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(self, AndroidContentIOSContext_getPreferencesDir(self), JreStrcat("$$", name, @".xml"));
}

- (JavaIoFile *)makeFilenameWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)name {
  return AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(self, base, name);
}

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode {
  AndroidAppSharedPreferencesImpl *sp;
  JavaIoFile *prefsFile;
  jboolean needInitialLoad = false;
  @synchronized(sSharedPrefs_) {
    sp = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(sSharedPrefs_)) getWithId:name]);
    if (sp != nil && ![sp hasFileChangedUnexpectedly]) {
      return JreRetainedLocalValue(sp);
    }
    prefsFile = JreRetainedLocalValue([self getSharedPrefsFileWithNSString:name]);
    if (sp == nil) {
      sp = JreRetainedLocalValue(create_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(prefsFile, mode, nil, create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper())));
      [sSharedPrefs_ putWithId:name withId:sp];
      needInitialLoad = true;
    }
  }
  @synchronized(sp) {
    if (needInitialLoad && [sp isLoaded]) {
      return JreRetainedLocalValue(sp);
    }
    JavaIoFile *backup = AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(prefsFile);
    if ([((JavaIoFile *) nil_chk(backup)) exists]) {
      [((JavaIoFile *) nil_chk(prefsFile)) delete__];
      [backup renameToWithJavaIoFile:prefsFile];
    }
    if ([((JavaIoFile *) nil_chk(prefsFile)) exists] && ![prefsFile canRead]) {
      AndroidUtilLog_wWithNSString_withNSString_(AndroidContentIOSContext_TAG, JreStrcat("$@$", @"Attempt to read preferences file ", prefsFile, @" without permission"));
    }
    id<JavaUtilMap> map = nil;
    AndroidOsFileUtils_FileStatus *stat = create_AndroidOsFileUtils_FileStatus_init();
    if (AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_([prefsFile getPath], stat) && [prefsFile canRead]) {
      @try {
        JavaIoFileInputStream *str = create_JavaIoFileInputStream_initWithJavaIoFile_(prefsFile);
        map = AndroidInternalUtilXmlUtils_readMapXmlWithJavaIoInputStream_(str);
        [str close];
      }
      @catch (OrgXmlpullV1XmlPullParserException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
      @catch (JavaIoFileNotFoundException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
      @catch (JavaIoIOException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
    }
    [sp replaceWithJavaUtilMap:map withAndroidOsFileUtils_FileStatus:stat];
  }
  return sp;
}

- (JavaIoFile *)getPreferencesDir {
  return AndroidContentIOSContext_getPreferencesDir(self);
}

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name {
  return create_JavaIoFileInputStream_initWithJavaIoFile_(AndroidContentIOSContext_findLocalFileWithNSString_(self, name));
}

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode {
  return create_JavaIoFileOutputStream_initWithJavaIoFile_(AndroidContentIOSContext_findLocalFileWithNSString_(self, name));
}

- (JavaIoFile *)findLocalFileWithNSString:(NSString *)name {
  return AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
}

- (jboolean)deleteFileWithNSString:(NSString *)name {
  JavaIoFile *localFile = AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
  return [((JavaIoFile *) nil_chk(localFile)) delete__];
}

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name {
  return AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
}

- (JavaIoFile *)getFilesDir {
  return [self getDirWithNSString:@"files" withInt:AndroidContentContext_MODE_PRIVATE];
}

- (JavaIoFile *)getRootDir {
  JavaIoFile *file = create_JavaIoFile_initWithNSString_(AndroidContentIOSContext_getRootDirString(self));
  [file mkdirs];
  return file;
}

- (NSString *)getRootDirString {
  return AndroidContentIOSContext_getRootDirString(self);
}

- (JavaIoFile *)getExternalFilesDirWithNSString:(NSString * __nullable)type {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaIoFile *)getCacheDir {
  return [self getDirWithNSString:@"cache" withInt:AndroidContentContext_MODE_PRIVATE];
}

- (IOSObjectArray *)fileList {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode {
  JavaIoFile *rootDir = [self getRootDir];
  JavaIoFile *filesDir = create_JavaIoFile_initWithJavaIoFile_withNSString_(rootDir, name);
  [filesDir mkdirs];
  return filesDir;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_([self getDatabasePathWithNSString:name], factory);
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_([((JavaIoFile *) nil_chk([self getDatabasePathWithNSString:name])) getPath], factory, errorHandler);
}

- (jboolean)deleteDatabaseWithNSString:(NSString *)name {
  return [((JavaIoFile *) nil_chk([self getDatabasePathWithNSString:name])) delete__];
}

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name {
  JavaIoFile *dbDir = [self getDirWithNSString:AndroidContentIOSContext_DATABASES withInt:AndroidContentContext_MODE_PRIVATE];
  JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(dbDir, name);
  return file;
}

- (IOSObjectArray *)databaseList {
  return [((JavaIoFile *) nil_chk([self getDirWithNSString:AndroidContentIOSContext_DATABASES withInt:AndroidContentContext_MODE_PRIVATE])) list];
}

- (void)dealloc {
  RELEASE_(mSync_);
  RELEASE_(mPreferencesDir_);
  RELEASE_(sSharedPrefs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileInputStream;", 0x1, 8, 3, 9, -1, -1, -1 },
    { NULL, "LJavaIoFileOutputStream;", 0x1, 10, 7, 9, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 11, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaIoFile;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 16, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMainLooper);
  methods[2].selector = @selector(makeBackupFileWithJavaIoFile:);
  methods[3].selector = @selector(getSharedPrefsFileWithNSString:);
  methods[4].selector = @selector(makeFilenameWithJavaIoFile:withNSString:);
  methods[5].selector = @selector(getSharedPreferencesWithNSString:withInt:);
  methods[6].selector = @selector(getPreferencesDir);
  methods[7].selector = @selector(openFileInputWithNSString:);
  methods[8].selector = @selector(openFileOutputWithNSString:withInt:);
  methods[9].selector = @selector(findLocalFileWithNSString:);
  methods[10].selector = @selector(deleteFileWithNSString:);
  methods[11].selector = @selector(getFileStreamPathWithNSString:);
  methods[12].selector = @selector(getFilesDir);
  methods[13].selector = @selector(getRootDir);
  methods[14].selector = @selector(getRootDirString);
  methods[15].selector = @selector(getExternalFilesDirWithNSString:);
  methods[16].selector = @selector(getExternalFilesDirsWithNSString:);
  methods[17].selector = @selector(getCacheDir);
  methods[18].selector = @selector(fileList);
  methods[19].selector = @selector(getDirWithNSString:withInt:);
  methods[20].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[21].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[22].selector = @selector(deleteDatabaseWithNSString:);
  methods[23].selector = @selector(getDatabasePathWithNSString:);
  methods[24].selector = @selector(databaseList);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATABASES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "mSync_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreferencesDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sSharedPrefs_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "makeBackupFile", "LJavaIoFile;", "getSharedPrefsFile", "LNSString;", "makeFilename", "LJavaIoFile;LNSString;", "getSharedPreferences", "LNSString;I", "openFileInput", "LJavaIoFileNotFoundException;", "openFileOutput", "findLocalFile", "deleteFile", "getFileStreamPath", "getExternalFilesDir", "getExternalFilesDirs", "getDir", "openOrCreateDatabase", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "deleteDatabase", "getDatabasePath", &AndroidContentIOSContext_DATABASES, &AndroidContentIOSContext_TAG, "Ljava/util/HashMap<Ljava/lang/String;Landroid/app/SharedPreferencesImpl;>;" };
  static const J2ObjcClassInfo _AndroidContentIOSContext = { "IOSContext", "android.content", ptrTable, methods, fields, 7, 0x1, 25, 5, -1, -1, -1, -1, -1 };
  return &_AndroidContentIOSContext;
}

@end

void AndroidContentIOSContext_init(AndroidContentIOSContext *self) {
  AndroidAppApplication_init(self);
  JreStrongAssignAndConsume(&self->mSync_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->sSharedPrefs_, new_JavaUtilHashMap_init());
}

AndroidContentIOSContext *new_AndroidContentIOSContext_init() {
  J2OBJC_NEW_IMPL(AndroidContentIOSContext, init)
}

AndroidContentIOSContext *create_AndroidContentIOSContext_init() {
  J2OBJC_CREATE_IMPL(AndroidContentIOSContext, init)
}

JavaIoFile *AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile) {
  AndroidContentIOSContext_initialize();
  return create_JavaIoFile_initWithNSString_(JreStrcat("$$", [((JavaIoFile *) nil_chk(prefsFile)) getPath], @".bak"));
}

JavaIoFile *AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(AndroidContentIOSContext *self, JavaIoFile *base, NSString *name) {
  if ([((NSString *) nil_chk(name)) java_indexOf:JreLoadStatic(JavaIoFile, separatorChar)] < 0) {
    return create_JavaIoFile_initWithJavaIoFile_withNSString_(base, name);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"File ", name, @" contains a path separator"));
}

JavaIoFile *AndroidContentIOSContext_getPreferencesDir(AndroidContentIOSContext *self) {
  @synchronized(self->mSync_) {
    if (self->mPreferencesDir_ == nil) {
      JreStrongAssign(&self->mPreferencesDir_, [self getDirWithNSString:@"shared_prefs" withInt:AndroidContentContext_MODE_PRIVATE]);
    }
    return JreRetainedLocalValue(self->mPreferencesDir_);
  }
}

JavaIoFile *AndroidContentIOSContext_findLocalFileWithNSString_(AndroidContentIOSContext *self, NSString *name) {
  return create_JavaIoFile_initWithJavaIoFile_withNSString_([self getFilesDir], name);
}

NSString *AndroidContentIOSContext_getRootDirString(AndroidContentIOSContext *self) {
  NSArray *paths = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, YES);
  
  NSString *documentsDirectory = [paths firstObject];
  
  return documentsDirectory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidContentIOSContext)
