//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteAccessPermException")
#ifdef RESTRICT_AndroidDatabaseSqliteSQLiteAccessPermException
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteAccessPermException 0
#else
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteAccessPermException 1
#endif
#undef RESTRICT_AndroidDatabaseSqliteSQLiteAccessPermException

#if !defined (AndroidDatabaseSqliteSQLiteAccessPermException_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteAccessPermException || defined(INCLUDE_AndroidDatabaseSqliteSQLiteAccessPermException))
#define AndroidDatabaseSqliteSQLiteAccessPermException_

#define RESTRICT_AndroidDatabaseSqliteSQLiteException 1
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#include "AndroidDatabaseSqliteSQLiteException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteAccessPermException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteAccessPermException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAccessPermException_init(AndroidDatabaseSqliteSQLiteAccessPermException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_init();

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(AndroidDatabaseSqliteSQLiteAccessPermException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteAccessPermException)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteAccessPermException")
