//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException")
#ifdef RESTRICT_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException 0
#else
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException 1
#endif
#undef RESTRICT_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException

#if !defined (AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException || defined(INCLUDE_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException))
#define AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_

#define RESTRICT_AndroidDatabaseSqliteSQLiteException 1
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#include "AndroidDatabaseSqliteSQLiteException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteCantOpenDatabaseException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init();

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException")
