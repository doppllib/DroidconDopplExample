//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool")
#ifdef RESTRICT_AndroidDatabaseSqliteSQLiteConnectionPool
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool 0
#else
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool 1
#endif
#undef RESTRICT_AndroidDatabaseSqliteSQLiteConnectionPool

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidDatabaseSqliteSQLiteConnectionPool_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConnectionPool))
#define AndroidDatabaseSqliteSQLiteConnectionPool_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class AndroidDatabaseSqliteSQLiteConnection;
@class AndroidDatabaseSqliteSQLiteDatabaseConfiguration;
@class AndroidOsCancellationSignal;
@class JavaUtilArrayList;
@protocol AndroidUtilPrinter;

@interface AndroidDatabaseSqliteSQLiteConnectionPool : NSObject < JavaIoCloseable >

+ (jint)CONNECTION_FLAG_READ_ONLY;

+ (jint)CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;

+ (jint)CONNECTION_FLAG_INTERACTIVE;

#pragma mark Public

- (AndroidDatabaseSqliteSQLiteConnection *)acquireConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags
                                         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)close;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

+ (AndroidDatabaseSqliteSQLiteConnectionPool *)openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection;

- (jboolean)shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
                                                                   withInt:(jint)connectionFlags;

- (NSString *)description;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

- (void)onConnectionLeaked;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_READ_ONLY();
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_READ_ONLY, jint)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY();
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY, jint)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_INTERACTIVE();
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_INTERACTIVE, jint)

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool *AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnectionPool)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus))
#define AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum) {
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_NORMAL = 0,
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_RECONFIGURE = 1,
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_DISCARD = 2,
};

@interface AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus : JavaLangEnum

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)NORMAL;

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)RECONFIGURE;

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)DISCARD;

#pragma mark Public

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[];

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_NORMAL();
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL)

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_RECONFIGURE();
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE)

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_DISCARD();
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)

FOUNDATION_EXPORT IOSObjectArray *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values();

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteConnectionPool")
