//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCharArrayBuffer.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@implementation AndroidDatabaseCharArrayBuffer

- (instancetype)initWithInt:(jint)size {
  AndroidDatabaseCharArrayBuffer_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)buf {
  AndroidDatabaseCharArrayBuffer_initWithCharArray_(self, buf);
  return self;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[C", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sizeCopied_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[C" };
  static const J2ObjcClassInfo _AndroidDatabaseCharArrayBuffer = { "CharArrayBuffer", "android.database", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCharArrayBuffer;
}

@end

void AndroidDatabaseCharArrayBuffer_initWithInt_(AndroidDatabaseCharArrayBuffer *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->data_, [IOSCharArray newArrayWithLength:size]);
}

AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCharArrayBuffer, initWithInt_, size)
}

AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCharArrayBuffer, initWithInt_, size)
}

void AndroidDatabaseCharArrayBuffer_initWithCharArray_(AndroidDatabaseCharArrayBuffer *self, IOSCharArray *buf) {
  NSObject_init(self);
  JreStrongAssign(&self->data_, buf);
}

AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCharArrayBuffer, initWithCharArray_, buf)
}

AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCharArrayBuffer, initWithCharArray_, buf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCharArrayBuffer)
