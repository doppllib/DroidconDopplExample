//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "AndroidContentContext.h"
#include "AndroidDatabaseAbstractWindowedCursor.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseSQLException.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "AndroidDatabaseSqliteSQLiteProgram.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/CollationKey.h"
#include "java/text/Collator.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface AndroidDatabaseDatabaseUtils ()

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr;

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name;

@end

inline NSString *AndroidDatabaseDatabaseUtils_get_TAG();
static NSString *AndroidDatabaseDatabaseUtils_TAG = @"DatabaseUtils";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseDatabaseUtils, TAG, NSString *)

inline jboolean AndroidDatabaseDatabaseUtils_get_DEBUG();
#define AndroidDatabaseDatabaseUtils_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, DEBUG, jboolean)

inline JavaTextCollator *AndroidDatabaseDatabaseUtils_get_mColl();
inline JavaTextCollator *AndroidDatabaseDatabaseUtils_set_mColl(JavaTextCollator *value);
static JavaTextCollator *AndroidDatabaseDatabaseUtils_mColl;
J2OBJC_STATIC_FIELD_OBJ(AndroidDatabaseDatabaseUtils, mColl, JavaTextCollator *)

__attribute__((unused)) static jint AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr);

__attribute__((unused)) static IOSByteArray *AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name);

@interface AndroidDatabaseDatabaseUtils_InsertHelper () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDb_;
  NSString *mTableName_;
  JavaUtilHashMap *mColumns_;
  NSString *mInsertSQL_;
  AndroidDatabaseSqliteSQLiteStatement *mInsertStatement_;
  AndroidDatabaseSqliteSQLiteStatement *mReplaceStatement_;
  AndroidDatabaseSqliteSQLiteStatement *mPreparedStatement_;
}

- (void)buildSQL;

- (AndroidDatabaseSqliteSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace;

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mDb_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mTableName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mColumns_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mInsertSQL_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mInsertStatement_, AndroidDatabaseSqliteSQLiteStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mReplaceStatement_, AndroidDatabaseSqliteSQLiteStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mPreparedStatement_, AndroidDatabaseSqliteSQLiteStatement *)

__attribute__((unused)) static void AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(AndroidDatabaseDatabaseUtils_InsertHelper *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteStatement *AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, jboolean allowReplace);

__attribute__((unused)) static jlong AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0();

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseDatabaseUtils)

@implementation AndroidDatabaseDatabaseUtils

+ (jint)STATEMENT_SELECT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_SELECT;
}

+ (jint)STATEMENT_UPDATE {
  return AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE;
}

+ (jint)STATEMENT_ATTACH {
  return AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH;
}

+ (jint)STATEMENT_BEGIN {
  return AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN;
}

+ (jint)STATEMENT_COMMIT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
}

+ (jint)STATEMENT_ABORT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_ABORT;
}

+ (jint)STATEMENT_PRAGMA {
  return AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA;
}

+ (jint)STATEMENT_DDL {
  return AndroidDatabaseDatabaseUtils_STATEMENT_DDL;
}

+ (jint)STATEMENT_UNPREPARED {
  return AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED;
}

+ (jint)STATEMENT_OTHER {
  return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseDatabaseUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram:(AndroidDatabaseSqliteSQLiteProgram *)prog
                                                          withInt:(jint)index
                                                           withId:(id)value {
  AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(prog, index, value);
}

+ (jint)getTypeOfObjectWithId:(id)obj {
  return AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(obj);
}

+ (void)cursorFillWindowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                          withInt:(jint)position
                  withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(cursor, position, window);
}

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString {
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sb, sqlString);
}

+ (NSString *)sqlEscapeStringWithNSString:(NSString *)value {
  return AndroidDatabaseDatabaseUtils_sqlEscapeStringWithNSString_(value);
}

+ (void)appendValueToSqlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                           withId:(id)value {
  AndroidDatabaseDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(sql, value);
}

+ (NSString *)concatenateWhereWithNSString:(NSString *)a
                              withNSString:(NSString *)b {
  return AndroidDatabaseDatabaseUtils_concatenateWhereWithNSString_withNSString_(a, b);
}

+ (NSString *)getCollationKeyWithNSString:(NSString *)name {
  return AndroidDatabaseDatabaseUtils_getCollationKeyWithNSString_(name);
}

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr {
  return AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(arr);
}

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name {
  return AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                  withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCursorToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCurrentRowToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return AndroidDatabaseDatabaseUtils_dumpCurrentRowToStringWithAndroidDatabaseCursor_(cursor);
}

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorStringToInsertHelperWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
              withAndroidDatabaseDatabaseUtils_InsertHelper:(AndroidDatabaseDatabaseUtils_InsertHelper *)inserter
                                                    withInt:(jint)index {
  AndroidDatabaseDatabaseUtils_cursorStringToInsertHelperWithAndroidDatabaseCursor_withNSString_withAndroidDatabaseDatabaseUtils_InsertHelper_withInt_(cursor, field, inserter, index);
}

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values
                                              withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorDoubleToCursorValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
                            withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorDoubleToCursorValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorDoubleToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorRowToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorRowToContentValuesWithAndroidDatabaseCursor_withAndroidContentContentValues_(cursor, values);
}

+ (jint)cursorPickFillWindowStartPositionWithInt:(jint)cursorPosition
                                         withInt:(jint)cursorWindowCapacity {
  return AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(cursorPosition, cursorWindowCapacity);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, table);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(db, table, selection);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection
                                              withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, selection, selectionArgs);
}

+ (jboolean)queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table {
  return AndroidDatabaseDatabaseUtils_queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, table);
}

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                withNSString:(NSString *)query
                                           withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                            withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                       withNSString:(NSString *)query
                                                  withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                                   withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (void)cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                    withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                       withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)createDbFromSqlStatementsWithAndroidContentContext:(AndroidContentContext *)context
                                              withNSString:(NSString *)dbName
                                                   withInt:(jint)dbVersion
                                              withNSString:(NSString *)sqlStatements {
  AndroidDatabaseDatabaseUtils_createDbFromSqlStatementsWithAndroidContentContext_withNSString_withInt_withNSString_(context, dbName, dbVersion, sqlStatements);
}

+ (jint)getSqlStatementTypeWithNSString:(NSString *)sql {
  return AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
}

+ (IOSObjectArray *)appendSelectionArgsWithNSStringArray:(IOSObjectArray *)originalValues
                                       withNSStringArray:(IOSObjectArray *)newValues {
  return AndroidDatabaseDatabaseUtils_appendSelectionArgsWithNSStringArray_withNSStringArray_(originalValues, newValues);
}

+ (jint)findRowIdColumnIndexWithNSStringArray:(IOSObjectArray *)columnNames {
  return AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(columnNames);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 36, 37, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 42, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 45, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 46, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 46, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 50, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 51, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 53, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 56, 9, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 57, 58, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 59, 60, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram:withInt:withId:);
  methods[2].selector = @selector(getTypeOfObjectWithId:);
  methods[3].selector = @selector(cursorFillWindowWithAndroidDatabaseCursor:withInt:withAndroidDatabaseCursorWindow:);
  methods[4].selector = @selector(appendEscapedSQLStringWithJavaLangStringBuilder:withNSString:);
  methods[5].selector = @selector(sqlEscapeStringWithNSString:);
  methods[6].selector = @selector(appendValueToSqlWithJavaLangStringBuilder:withId:);
  methods[7].selector = @selector(concatenateWhereWithNSString:withNSString:);
  methods[8].selector = @selector(getCollationKeyWithNSString:);
  methods[9].selector = @selector(getKeyLenWithByteArray:);
  methods[10].selector = @selector(getCollationKeyInBytesWithNSString:);
  methods[11].selector = @selector(dumpCursorWithAndroidDatabaseCursor:);
  methods[12].selector = @selector(dumpCursorWithAndroidDatabaseCursor:withJavaIoPrintStream:);
  methods[13].selector = @selector(dumpCursorWithAndroidDatabaseCursor:withJavaLangStringBuilder:);
  methods[14].selector = @selector(dumpCursorToStringWithAndroidDatabaseCursor:);
  methods[15].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:);
  methods[16].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:withJavaIoPrintStream:);
  methods[17].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:withJavaLangStringBuilder:);
  methods[18].selector = @selector(dumpCurrentRowToStringWithAndroidDatabaseCursor:);
  methods[19].selector = @selector(cursorStringToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[20].selector = @selector(cursorStringToInsertHelperWithAndroidDatabaseCursor:withNSString:withAndroidDatabaseDatabaseUtils_InsertHelper:withInt:);
  methods[21].selector = @selector(cursorStringToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[22].selector = @selector(cursorIntToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[23].selector = @selector(cursorIntToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[24].selector = @selector(cursorLongToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[25].selector = @selector(cursorLongToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[26].selector = @selector(cursorDoubleToCursorValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[27].selector = @selector(cursorDoubleToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[28].selector = @selector(cursorRowToContentValuesWithAndroidDatabaseCursor:withAndroidContentContentValues:);
  methods[29].selector = @selector(cursorPickFillWindowStartPositionWithInt:withInt:);
  methods[30].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[31].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSString:);
  methods[32].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSString:withNSStringArray:);
  methods[33].selector = @selector(queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[34].selector = @selector(longForQueryWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSStringArray:);
  methods[35].selector = @selector(longForQueryWithAndroidDatabaseSqliteSQLiteStatement:withNSStringArray:);
  methods[36].selector = @selector(stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSStringArray:);
  methods[37].selector = @selector(stringForQueryWithAndroidDatabaseSqliteSQLiteStatement:withNSStringArray:);
  methods[38].selector = @selector(cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[39].selector = @selector(cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[40].selector = @selector(cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[41].selector = @selector(cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[42].selector = @selector(cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[43].selector = @selector(cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[44].selector = @selector(createDbFromSqlStatementsWithAndroidContentContext:withNSString:withInt:withNSString:);
  methods[45].selector = @selector(getSqlStatementTypeWithNSString:);
  methods[46].selector = @selector(appendSelectionArgsWithNSStringArray:withNSStringArray:);
  methods[47].selector = @selector(findRowIdColumnIndexWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = AndroidDatabaseDatabaseUtils_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "STATEMENT_SELECT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_SELECT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_UPDATE", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_ATTACH", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_BEGIN", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_COMMIT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_ABORT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_ABORT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_PRAGMA", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_DDL", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_DDL, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_UNPREPARED", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_OTHER", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_OTHER, 0x19, -1, -1, -1, -1 },
    { "mColl", "LJavaTextCollator;", .constantValue.asLong = 0, 0xa, -1, 62, -1, -1 },
  };
  static const void *ptrTable[] = { "bindObjectToProgram", "LAndroidDatabaseSqliteSQLiteProgram;ILNSObject;", "getTypeOfObject", "LNSObject;", "cursorFillWindow", "LAndroidDatabaseCursor;ILAndroidDatabaseCursorWindow;", "appendEscapedSQLString", "LJavaLangStringBuilder;LNSString;", "sqlEscapeString", "LNSString;", "appendValueToSql", "LJavaLangStringBuilder;LNSObject;", "concatenateWhere", "LNSString;LNSString;", "getCollationKey", "getKeyLen", "[B", "getCollationKeyInBytes", "dumpCursor", "LAndroidDatabaseCursor;", "LAndroidDatabaseCursor;LJavaIoPrintStream;", "LAndroidDatabaseCursor;LJavaLangStringBuilder;", "dumpCursorToString", "dumpCurrentRow", "dumpCurrentRowToString", "cursorStringToContentValues", "LAndroidDatabaseCursor;LNSString;LAndroidContentContentValues;", "cursorStringToInsertHelper", "LAndroidDatabaseCursor;LNSString;LAndroidDatabaseDatabaseUtils_InsertHelper;I", "LAndroidDatabaseCursor;LNSString;LAndroidContentContentValues;LNSString;", "cursorIntToContentValues", "cursorLongToContentValues", "cursorDoubleToCursorValues", "cursorDoubleToContentValues", "cursorRowToContentValues", "LAndroidDatabaseCursor;LAndroidContentContentValues;", "cursorPickFillWindowStartPosition", "II", "queryNumEntries", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LNSString;[LNSString;", "queryIsEmpty", "longForQuery", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSString;", "LAndroidDatabaseSqliteSQLiteStatement;[LNSString;", "stringForQuery", "cursorStringToContentValuesIfPresent", "LAndroidDatabaseCursor;LAndroidContentContentValues;LNSString;", "cursorLongToContentValuesIfPresent", "cursorShortToContentValuesIfPresent", "cursorIntToContentValuesIfPresent", "cursorFloatToContentValuesIfPresent", "cursorDoubleToContentValuesIfPresent", "createDbFromSqlStatements", "LAndroidContentContext;LNSString;ILNSString;", "getSqlStatementType", "appendSelectionArgs", "[LNSString;[LNSString;", "findRowIdColumnIndex", "[LNSString;", &AndroidDatabaseDatabaseUtils_TAG, &AndroidDatabaseDatabaseUtils_mColl, "LAndroidDatabaseDatabaseUtils_InsertHelper;" };
  static const J2ObjcClassInfo _AndroidDatabaseDatabaseUtils = { "DatabaseUtils", "android.database", ptrTable, methods, fields, 7, 0x1, 48, 13, -1, 63, -1, -1, -1 };
  return &_AndroidDatabaseDatabaseUtils;
}

+ (void)initialize {
  if (self == [AndroidDatabaseDatabaseUtils class]) {
    JreStrongAssign(&AndroidDatabaseDatabaseUtils_mColl, nil);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseDatabaseUtils)
  }
}

@end

void AndroidDatabaseDatabaseUtils_init(AndroidDatabaseDatabaseUtils *self) {
  NSObject_init(self);
}

AndroidDatabaseDatabaseUtils *new_AndroidDatabaseDatabaseUtils_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseDatabaseUtils, init)
}

AndroidDatabaseDatabaseUtils *create_AndroidDatabaseDatabaseUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDatabaseUtils, init)
}

void AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(AndroidDatabaseSqliteSQLiteProgram *prog, jint index, id value) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindNullWithInt:index];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]] || [value isKindOfClass:[JavaLangFloat class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindDoubleWithInt:index withDouble:[((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue]];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:[((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue]];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:1];
    }
    else {
      [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:0];
    }
  }
  else if ([value isKindOfClass:[IOSByteArray class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindBlobWithInt:index withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindStringWithInt:index withNSString:[value description]];
  }
}

jint AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(id obj) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (obj == nil) {
    return AndroidDatabaseCursor_FIELD_TYPE_NULL;
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_BLOB;
  }
  else if ([obj isKindOfClass:[JavaLangFloat class]] || [obj isKindOfClass:[JavaLangDouble class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_FLOAT;
  }
  else if ([obj isKindOfClass:[JavaLangLong class]] || [obj isKindOfClass:[JavaLangInteger class]] || [obj isKindOfClass:[JavaLangShort class]] || [obj isKindOfClass:[JavaLangByte class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_INTEGER;
  }
  else {
    return AndroidDatabaseCursor_FIELD_TYPE_STRING;
  }
}

void AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(id<AndroidDatabaseCursor> cursor, jint position, AndroidDatabaseCursorWindow *window) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (position < 0 || position >= [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getCount]) {
    return;
  }
  jint oldPos = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getPosition];
  jint numColumns = [cursor getColumnCount];
  [((AndroidDatabaseCursorWindow *) nil_chk(window)) clear];
  [window setStartPositionWithInt:position];
  [window setNumColumnsWithInt:numColumns];
  if ([cursor moveToPositionWithInt:position]) {
    do {
      if (![window allocRow]) {
        break;
      }
      for (jint i = 0; i < numColumns; i++) {
        jint type = [cursor getTypeWithInt:i];
        jboolean success;
        switch (type) {
          case AndroidDatabaseCursor_FIELD_TYPE_NULL:
          success = [window putNullWithInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_INTEGER:
          success = [window putLongWithLong:[cursor getLongWithInt:i] withInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_FLOAT:
          success = [window putDoubleWithDouble:[cursor getDoubleWithInt:i] withInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_BLOB:
          {
            IOSByteArray *value = [cursor getBlobWithInt:i];
            success = value != nil ? [window putBlobWithByteArray:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
          default:
          case AndroidDatabaseCursor_FIELD_TYPE_STRING:
          {
            NSString *value = [cursor getStringWithInt:i];
            success = value != nil ? [window putStringWithNSString:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
        }
        if (!success) {
          [window freeLastRow];
          break;
        }
      }
      position += 1;
    }
    while ([cursor moveToNext]);
  }
  [cursor moveToPositionWithInt:oldPos];
}

void AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\''];
  if ([((NSString *) nil_chk(sqlString)) java_indexOf:'\''] != -1) {
    jint length = [sqlString java_length];
    for (jint i = 0; i < length; i++) {
      jchar c = [sqlString charAtWithInt:i];
      if (c == '\'') {
        [sb appendWithChar:'\''];
      }
      [sb appendWithChar:c];
    }
  }
  else [sb appendWithNSString:sqlString];
  [sb appendWithChar:'\''];
}

NSString *AndroidDatabaseDatabaseUtils_sqlEscapeStringWithNSString_(NSString *value) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *escaper = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(escaper, value);
  return [escaper description];
}

void AndroidDatabaseDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sql, id value) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (value == nil) {
    [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"NULL"];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'1'];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'0'];
    }
  }
  else {
    AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sql, [value description]);
  }
}

NSString *AndroidDatabaseDatabaseUtils_concatenateWhereWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(a)) {
    return b;
  }
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(b)) {
    return a;
  }
  return JreStrcat("C$$$C", '(', a, @") AND (", b, ')');
}

NSString *AndroidDatabaseDatabaseUtils_getCollationKeyWithNSString_(NSString *name) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSByteArray *arr = AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
  @try {
    return [NSString java_stringWithBytes:arr offset:0 length:AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(arr) charsetName:@"ISO8859_1"];
  }
  @catch (JavaLangException *ex) {
    return @"";
  }
}

jint AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (IOSByteArray_Get(arr, ((IOSByteArray *) nil_chk(arr))->size_ - 1) != 0) {
    return arr->size_;
  }
  else {
    return arr->size_ - 1;
  }
}

IOSByteArray *AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (AndroidDatabaseDatabaseUtils_mColl == nil) {
    JreStrongAssign(&AndroidDatabaseDatabaseUtils_mColl, JavaTextCollator_getInstance());
    [((JavaTextCollator *) nil_chk(AndroidDatabaseDatabaseUtils_mColl)) setStrengthWithInt:JavaTextCollator_PRIMARY];
  }
  return [((JavaTextCollationKey *) nil_chk([((JavaTextCollator *) nil_chk(AndroidDatabaseDatabaseUtils_mColl)) getCollationKeyWithNSString:name])) toByteArray];
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$@", @">>>>> Dumping cursor ", cursor)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [stream printlnWithNSString:@"<<<<<"];
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$@C", @">>>>> Dumping cursor ", cursor, 0x000a)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [sb appendWithNSString:@"<<<<<\n"];
}

NSString *AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("I$", [cursor getPosition], @" {")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      value = @"<unprintable>";
    }
    [stream printlnWithNSString:JreStrcat("$$C$", @"   ", IOSObjectArray_Get(cols, i), '=', value)];
  }
  [stream printlnWithNSString:@"}"];
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("I$", [cursor getPosition], @" {\n")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      value = @"<unprintable>";
    }
    [sb appendWithNSString:JreStrcat("$$C$C", @"   ", IOSObjectArray_Get(cols, i), '=', value, 0x000a)];
  }
  [sb appendWithNSString:@"}\n"];
}

NSString *AndroidDatabaseDatabaseUtils_dumpCurrentRowToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorStringToInsertHelperWithAndroidDatabaseCursor_withNSString_withAndroidDatabaseDatabaseUtils_InsertHelper_withInt_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidDatabaseDatabaseUtils_InsertHelper *inserter, jint index) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseDatabaseUtils_InsertHelper *) nil_chk(inserter)) bindWithInt:index withNSString:[((id<AndroidDatabaseCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withNSString:[((id<AndroidDatabaseCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    JavaLangLong *value = JavaLangLong_valueOfWithLong_([cursor getLongWithInt:colIndex]);
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:value];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToCursorValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorRowToContentValuesWithAndroidDatabaseCursor_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseAbstractWindowedCursor *awc = ([cursor isKindOfClass:[AndroidDatabaseAbstractWindowedCursor class]]) ? (AndroidDatabaseAbstractWindowedCursor *) cast_chk(cursor, [AndroidDatabaseAbstractWindowedCursor class]) : nil;
  IOSObjectArray *columns = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < length; i++) {
    if (awc != nil && [awc isBlobWithInt:i]) {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withByteArray:[cursor getBlobWithInt:i]];
    }
    else {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withNSString:[cursor getStringWithInt:i]];
    }
  }
}

jint AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(jint cursorPosition, jint cursorWindowCapacity) {
  AndroidDatabaseDatabaseUtils_initialize();
  return JavaLangMath_maxWithInt_withInt_(cursorPosition - cursorWindowCapacity / 3, 0);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table) {
  AndroidDatabaseDatabaseUtils_initialize();
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, nil, nil);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection) {
  AndroidDatabaseDatabaseUtils_initialize();
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, selection, nil);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  NSString *s = (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(selection)) ? JreStrcat("$$", @" where ", selection) : @"";
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, JreStrcat("$$$", @"select count(*) from ", table, s), selectionArgs);
}

jboolean AndroidDatabaseDatabaseUtils_queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table) {
  AndroidDatabaseDatabaseUtils_initialize();
  jlong isEmpty = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, JreStrcat("$$C", @"select exists(select 1 from ", table, ')'), nil);
  return isEmpty == 0;
}

jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteStatement *prog = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) close];
  }
}

jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) bindAllArgsAsStringsWithNSStringArray:selectionArgs];
  return [prog simpleQueryForLong];
}

NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteStatement *prog = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) close];
  }
}

NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) bindAllArgsAsStringsWithNSStringArray:selectionArgs];
  return [prog simpleQueryForString];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withNSString:[cursor getStringWithInt:index]];
  }
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangLong:JavaLangLong_valueOfWithLong_([cursor getLongWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangShort:JavaLangShort_valueOfWithShort_([cursor getShortWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangFloat:JavaLangFloat_valueOfWithFloat_([cursor getFloatWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_createDbFromSqlStatementsWithAndroidContentContext_withNSString_withInt_withNSString_(AndroidContentContext *context, NSString *dbName, jint dbVersion, NSString *sqlStatements) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteDatabase *db = [((AndroidContentContext *) nil_chk(context)) openOrCreateDatabaseWithNSString:dbName withInt:0 withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil];
  IOSObjectArray *statements = AndroidTextTextUtils_splitWithNSString_withNSString_(sqlStatements, @";\n");
  {
    IOSObjectArray *a__ = statements;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *statement = *b__++;
      if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(statement)) continue;
      [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) execSQLWithNSString:statement];
    }
  }
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) setVersionWithInt:dbVersion];
  [db close];
}

jint AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(NSString *sql) {
  AndroidDatabaseDatabaseUtils_initialize();
  sql = [((NSString *) nil_chk(sql)) java_trim];
  if ([((NSString *) nil_chk(sql)) java_length] < 3) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
  }
  NSString *prefixSql = [((NSString *) nil_chk([sql java_substring:0 endIndex:3])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  if ([((NSString *) nil_chk(prefixSql)) isEqual:@"SEL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_SELECT;
  }
  else if ([prefixSql isEqual:@"INS"] || [prefixSql isEqual:@"UPD"] || [prefixSql isEqual:@"REP"] || [prefixSql isEqual:@"DEL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE;
  }
  else if ([prefixSql isEqual:@"ATT"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH;
  }
  else if ([prefixSql isEqual:@"COM"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
  }
  else if ([prefixSql isEqual:@"END"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
  }
  else if ([prefixSql isEqual:@"ROL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_ABORT;
  }
  else if ([prefixSql isEqual:@"BEG"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN;
  }
  else if ([prefixSql isEqual:@"PRA"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA;
  }
  else if ([prefixSql isEqual:@"CRE"] || [prefixSql isEqual:@"DRO"] || [prefixSql isEqual:@"ALT"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_DDL;
  }
  else if ([prefixSql isEqual:@"ANA"] || [prefixSql isEqual:@"DET"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED;
  }
  return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
}

IOSObjectArray *AndroidDatabaseDatabaseUtils_appendSelectionArgsWithNSStringArray_withNSStringArray_(IOSObjectArray *originalValues, IOSObjectArray *newValues) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (originalValues == nil || originalValues->size_ == 0) {
    return newValues;
  }
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:originalValues->size_ + ((IOSObjectArray *) nil_chk(newValues))->size_ type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(originalValues, 0, result, 0, originalValues->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newValues, 0, result, originalValues->size_, newValues->size_);
  return result;
}

jint AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(IOSObjectArray *columnNames) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) isEqual:@"_id"]) {
      return i;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDatabaseUtils)

@implementation AndroidDatabaseDatabaseUtils_InsertHelper

+ (jint)TABLE_INFO_PRAGMA_COLUMNNAME_INDEX {
  return AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX;
}

+ (jint)TABLE_INFO_PRAGMA_DEFAULT_INDEX {
  return AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX;
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)tableName {
  AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, tableName);
  return self;
}

- (void)buildSQL {
  AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
}

- (AndroidDatabaseSqliteSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace {
  return AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
}

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, allowReplace);
}

- (jint)getColumnIndexWithNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false);
  JavaLangInteger *index = [((JavaUtilHashMap *) nil_chk(mColumns_)) getWithId:key];
  if (index == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", key, @"' is invalid"));
  }
  return [index intValue];
}

- (void)bindWithInt:(jint)index
         withDouble:(jdouble)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
          withFloat:(jfloat)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
           withLong:(jlong)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
            withInt:(jint)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
        withBoolean:(jboolean)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value ? 1 : 0];
}

- (void)bindNullWithInt:(jint)index {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
}

- (void)bindWithInt:(jint)index
      withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindBlobWithInt:index withByteArray:value];
  }
}

- (void)bindWithInt:(jint)index
       withNSString:(NSString *)value {
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindStringWithInt:index withNSString:value];
  }
}

- (jlong)insertWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, false);
}

- (jlong)execute {
  if (mPreparedStatement_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"you must prepare this inserter before calling execute");
  }
  @try {
    return [mPreparedStatement_ executeInsert];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseDatabaseUtils_TAG, JreStrcat("$$", @"Error executing InsertHelper with table ", mTableName_), e);
    return -1;
  }
  @finally {
    JreStrongAssign(&mPreparedStatement_, nil);
  }
}

- (void)prepareForInsert {
  JreStrongAssign(&mPreparedStatement_, AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false));
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (void)prepareForReplace {
  JreStrongAssign(&mPreparedStatement_, AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, true));
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (jlong)replaceWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, true);
}

- (void)close {
  if (mInsertStatement_ != nil) {
    [mInsertStatement_ close];
    JreStrongAssign(&mInsertStatement_, nil);
  }
  if (mReplaceStatement_ != nil) {
    [mReplaceStatement_ close];
    JreStrongAssign(&mReplaceStatement_, nil);
  }
  JreStrongAssign(&mInsertSQL_, nil);
  JreStrongAssign(&mColumns_, nil);
}

- (void)dealloc {
  RELEASE_(mDb_);
  RELEASE_(mTableName_);
  RELEASE_(mColumns_);
  RELEASE_(mInsertSQL_);
  RELEASE_(mInsertStatement_);
  RELEASE_(mReplaceStatement_);
  RELEASE_(mPreparedStatement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteStatement;", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[1].selector = @selector(buildSQL);
  methods[2].selector = @selector(getStatementWithBoolean:);
  methods[3].selector = @selector(insertInternalWithAndroidContentContentValues:withBoolean:);
  methods[4].selector = @selector(getColumnIndexWithNSString:);
  methods[5].selector = @selector(bindWithInt:withDouble:);
  methods[6].selector = @selector(bindWithInt:withFloat:);
  methods[7].selector = @selector(bindWithInt:withLong:);
  methods[8].selector = @selector(bindWithInt:withInt:);
  methods[9].selector = @selector(bindWithInt:withBoolean:);
  methods[10].selector = @selector(bindNullWithInt:);
  methods[11].selector = @selector(bindWithInt:withByteArray:);
  methods[12].selector = @selector(bindWithInt:withNSString:);
  methods[13].selector = @selector(insertWithAndroidContentContentValues:);
  methods[14].selector = @selector(execute);
  methods[15].selector = @selector(prepareForInsert);
  methods[16].selector = @selector(prepareForReplace);
  methods[17].selector = @selector(replaceWithAndroidContentContentValues:);
  methods[18].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDb_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTableName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "mInsertSQL_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsertStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReplaceStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreparedStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_COLUMNNAME_INDEX", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX, 0x19, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_DEFAULT_INDEX", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;", "LAndroidDatabaseSQLException;", "getStatement", "Z", "insertInternal", "LAndroidContentContentValues;Z", "getColumnIndex", "LNSString;", "bind", "ID", "IF", "IJ", "II", "IZ", "bindNull", "I", "I[B", "ILNSString;", "insert", "LAndroidContentContentValues;", "replace", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LAndroidDatabaseDatabaseUtils;", (void *)&AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0 };
  static const J2ObjcClassInfo _AndroidDatabaseDatabaseUtils_InsertHelper = { "InsertHelper", "android.database", ptrTable, methods, fields, 7, 0x9, 19, 9, 22, -1, -1, -1, 23 };
  return &_AndroidDatabaseDatabaseUtils_InsertHelper;
}

@end

void AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  NSObject_init(self);
  JreStrongAssign(&self->mInsertSQL_, nil);
  JreStrongAssign(&self->mInsertStatement_, nil);
  JreStrongAssign(&self->mReplaceStatement_, nil);
  JreStrongAssign(&self->mPreparedStatement_, nil);
  JreStrongAssign(&self->mDb_, db);
  JreStrongAssign(&self->mTableName_, tableName);
}

AndroidDatabaseDatabaseUtils_InsertHelper *new_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_NEW_IMPL(AndroidDatabaseDatabaseUtils_InsertHelper, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_, db, tableName)
}

AndroidDatabaseDatabaseUtils_InsertHelper *create_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDatabaseUtils_InsertHelper, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_, db, tableName)
}

void AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(AndroidDatabaseDatabaseUtils_InsertHelper *self) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(128);
  [sb appendWithNSString:@"INSERT INTO "];
  [sb appendWithNSString:self->mTableName_];
  [sb appendWithNSString:@" ("];
  JavaLangStringBuilder *sbv = create_JavaLangStringBuilder_initWithInt_(128);
  [sbv appendWithNSString:@"VALUES ("];
  jint i = 1;
  id<AndroidDatabaseCursor> cur = nil;
  @try {
    cur = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) rawQueryWithNSString:JreStrcat("$$C", @"PRAGMA table_info(", self->mTableName_, ')') withNSStringArray:nil];
    JreStrongAssignAndConsume(&self->mColumns_, new_JavaUtilHashMap_initWithInt_([((id<AndroidDatabaseCursor>) nil_chk(cur)) getCount]));
    while ([cur moveToNext]) {
      NSString *columnName = [cur getStringWithInt:AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX];
      NSString *defaultValue = [cur getStringWithInt:AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX];
      [((JavaUtilHashMap *) nil_chk(self->mColumns_)) putWithId:columnName withId:JavaLangInteger_valueOfWithInt_(i)];
      [sb appendWithNSString:@"'"];
      [sb appendWithNSString:columnName];
      [sb appendWithNSString:@"'"];
      if (defaultValue == nil) {
        [sbv appendWithNSString:@"?"];
      }
      else {
        [sbv appendWithNSString:@"COALESCE(?, "];
        [sbv appendWithNSString:defaultValue];
        [sbv appendWithNSString:@")"];
      }
      [sb appendWithNSString:i == [cur getCount] ? @") " : @", "];
      [sbv appendWithNSString:i == [cur getCount] ? @");" : @", "];
      ++i;
    }
  }
  @finally {
    if (cur != nil) [cur close];
  }
  [sb appendWithJavaLangCharSequence:sbv];
  JreStrongAssign(&self->mInsertSQL_, [sb description]);
}

AndroidDatabaseSqliteSQLiteStatement *AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, jboolean allowReplace) {
  if (allowReplace) {
    if (self->mReplaceStatement_ == nil) {
      if (self->mInsertSQL_ == nil) AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
      NSString *replaceSQL = JreStrcat("$$", @"INSERT OR REPLACE", [((NSString *) nil_chk(self->mInsertSQL_)) java_substring:6]);
      JreStrongAssign(&self->mReplaceStatement_, [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:replaceSQL]);
    }
    return self->mReplaceStatement_;
  }
  else {
    if (self->mInsertStatement_ == nil) {
      if (self->mInsertSQL_ == nil) AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
      JreStrongAssign(&self->mInsertStatement_, [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:self->mInsertSQL_]);
    }
    return self->mInsertStatement_;
  }
}

jlong AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace) {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) beginTransactionNonExclusive];
  @try {
    AndroidDatabaseSqliteSQLiteStatement *stmt = AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt)) clearBindings];
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((AndroidContentContentValues *) nil_chk(values)) valueSet])) {
      NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
      jint i = [self getColumnIndexWithNSString:key];
      AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(stmt, i, [e getValue]);
    }
    jlong result = [stmt executeInsert];
    [self->mDb_ setTransactionSuccessful];
    return result;
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseDatabaseUtils_TAG, JreStrcat("$@$$", @"Error inserting ", values, @" into table  ", self->mTableName_), e);
    return -1;
  }
  @finally {
    [self->mDb_ endTransaction];
  }
}

IOSObjectArray *AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDatabaseUtils_InsertHelper)
