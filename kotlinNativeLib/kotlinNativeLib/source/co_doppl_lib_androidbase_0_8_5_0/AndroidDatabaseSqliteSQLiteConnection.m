//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseCursorWindow.h"
#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException.h"
#include "AndroidDatabaseSqliteSQLiteConnection.h"
#include "AndroidDatabaseSqliteSQLiteConnectionPool.h"
#include "AndroidDatabaseSqliteSQLiteCustomFunction.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteDatabaseConfiguration.h"
#include "AndroidDatabaseSqliteSQLiteDatabaseLockedException.h"
#include "AndroidDatabaseSqliteSQLiteDebug.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "AndroidDatabaseSqliteSQLiteGlobal.h"
#include "AndroidDatabaseSqliteSQLiteStatementInfo.h"
#include "AndroidOsCancellationSignal.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "android/util/LruCache.h"
#include "android/util/Printer.h"
#include "dalvik/system/BlockGuard.h"
#include "dalvik/system/CloseGuard.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class AndroidDatabaseSqliteSQLiteConnection_Operation;
@class AndroidDatabaseSqliteSQLiteConnection_OperationLog;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidDatabaseSqliteSQLiteConnection () {
 @public
  DalvikSystemCloseGuard *mCloseGuard_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mPool_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfiguration_;
  jint mConnectionId_;
  jboolean mIsPrimaryConnection_;
  jboolean mIsReadOnlyConnection_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *mPreparedStatementCache_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPreparedStatementPool_;
  AndroidDatabaseSqliteSQLiteConnection_OperationLog *mRecentOperations_;
  jlong mConnectionPtr_;
  jboolean mOnlyAllowReadOnlyOperations_;
  jint mCancellationSignalAttachCount_;
}

+ (jlong)nativeOpenWithNSString:(NSString *)path
                        withInt:(jint)openFlags
                   withNSString:(NSString *)label
                    withBoolean:(jboolean)enableTrace
                    withBoolean:(jboolean)enableProfile;

+ (void)nativeCloseWithLong:(jlong)connectionPtr;

+ (void)nativeRegisterCustomFunctionWithLong:(jlong)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function;

+ (void)nativeRegisterLocalizedCollatorsWithLong:(jlong)connectionPtr
                                    withNSString:(NSString *)locale;

+ (jlong)nativePrepareStatementWithLong:(jlong)connectionPtr
                           withNSString:(NSString *)sql;

+ (void)nativeFinalizeStatementWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr;

+ (jint)nativeGetParameterCountWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr;

+ (jboolean)nativeIsReadOnlyWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr;

+ (jint)nativeGetColumnCountWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr;

+ (NSString *)nativeGetColumnNameWithLong:(jlong)connectionPtr
                                 withLong:(jlong)statementPtr
                                  withInt:(jint)index;

+ (void)nativeBindNullWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index;

+ (void)nativeBindLongWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                      withLong:(jlong)value;

+ (void)nativeBindDoubleWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                      withDouble:(jdouble)value;

+ (void)nativeBindStringWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                    withNSString:(NSString *)value;

+ (void)nativeBindBlobWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                 withByteArray:(IOSByteArray *)value;

+ (void)nativeResetStatementAndClearBindingsWithLong:(jlong)connectionPtr
                                            withLong:(jlong)statementPtr;

+ (void)nativeExecuteWithLong:(jlong)connectionPtr
                     withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForLongWithLong:(jlong)connectionPtr
                             withLong:(jlong)statementPtr;

+ (NSString *)nativeExecuteForStringWithLong:(jlong)connectionPtr
                                    withLong:(jlong)statementPtr;

+ (jint)nativeExecuteForChangedRowCountWithLong:(jlong)connectionPtr
                                       withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForLastInsertedRowIdWithLong:(jlong)connectionPtr
                                          withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForCursorWindowWithLong:(jlong)connectionPtr
                                     withLong:(jlong)statementPtr
                                     withLong:(jlong)windowPtr
                                      withInt:(jint)startPos
                                      withInt:(jint)requiredPos
                                  withBoolean:(jboolean)countAllRows;

+ (jint)nativeGetDbLookasideWithLong:(jlong)connectionPtr;

+ (void)nativeCancelWithLong:(jlong)connectionPtr;

+ (void)nativeResetCancelWithLong:(jlong)connectionPtr
                      withBoolean:(jboolean)cancelable;

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
             withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                          withInt:(jint)connectionId
                                                      withBoolean:(jboolean)primaryConnection;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (void)setPageSize;

- (void)setAutoCheckpointInterval;

- (void)setJournalSizeLimit;

- (void)setForeignKeyModeFromConfiguration;

- (void)setWalModeFromConfiguration;

- (void)setSyncModeWithNSString:(NSString *)newValue;

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value;

- (void)setJournalModeWithNSString:(NSString *)newValue;

- (void)setLocaleFromConfiguration;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql;

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)attachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)detachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (jboolean)isCacheableWithInt:(jint)statementType;

- (void)applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                        withLong:(jlong)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly;

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mCloseGuard_, DalvikSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPool_, AndroidDatabaseSqliteSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mConfiguration_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementCache_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementPool_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mRecentOperations_, AndroidDatabaseSqliteSQLiteConnection_OperationLog *)

inline NSString *AndroidDatabaseSqliteSQLiteConnection_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteConnection_TAG = @"SQLiteConnection";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, TAG, NSString *)

inline jboolean AndroidDatabaseSqliteSQLiteConnection_get_DEBUG();
#define AndroidDatabaseSqliteSQLiteConnection_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection, DEBUG, jboolean)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_STRING_ARRAY, IOSObjectArray *)

inline IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_BYTE_ARRAY();
static IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY, IOSByteArray *)

inline JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteConnection_get_TRIM_SQL_PATTERN();
static JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, TRIM_SQL_PATTERN, JavaUtilRegexPattern *)

jlong AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile);

void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(jlong connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(jlong connectionPtr, NSString *locale);

jlong AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(jlong connectionPtr, NSString *sql);

void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(jlong connectionPtr, jlong statementPtr, jint index, jlong value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(jlong connectionPtr, jlong statementPtr, jint index, jdouble value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(jlong connectionPtr, jlong statementPtr, jint index, NSString *value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(jlong connectionPtr, jlong statementPtr, jint index, IOSByteArray *value);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(jlong connectionPtr, jboolean cancelable);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, jlong statementPtr, jint numParameters, jint type, jboolean readOnly);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql);

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatement : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPoolNext_;
  NSString *mSql_;
  jlong mStatementPtr_;
  jint mNumParameters_;
  jint mType_;
  jboolean mReadOnly_;
  jboolean mInCache_;
  jboolean mInUse_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mPoolNext_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mSql_, NSString *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache : AndroidUtilLruCache {
 @public
  __unsafe_unretained AndroidDatabaseSqliteSQLiteConnection *this$0_;
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                      withInt:(jint)size;

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)getWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)createWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)removeWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)putWithId:(NSString *)arg0
                                                                withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@interface AndroidDatabaseSqliteSQLiteConnection_OperationLog : NSObject {
 @public
  IOSObjectArray *mOperations_;
  jint mIndex_;
  jint mGeneration_;
}

- (instancetype)init;

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex;

- (void)endOperationWithInt:(jint)cookie;

- (jboolean)endOperationDeferLogWithInt:(jint)cookie;

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail;

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie;

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail;

- (jint)newOperationCookieLockedWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie;

- (NSString *)describeCurrentOperation;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_OperationLog, mOperations_, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_MAX_RECENT_OPERATIONS();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS 20
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, MAX_RECENT_OPERATIONS, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_GENERATION_SHIFT();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_GENERATION_SHIFT, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_INDEX_MASK();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_INDEX_MASK, jint)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init();

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

@interface AndroidDatabaseSqliteSQLiteConnection_Operation : NSObject {
 @public
  jlong mStartTime_;
  jlong mEndTime_;
  NSString *mKind_;
  NSString *mSql_;
  JavaUtilArrayList *mBindArgs_;
  jboolean mFinished_;
  JavaLangException *mException_;
  jint mCookie_;
}

- (instancetype)init;

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose;

- (NSString *)getStatus;

- (NSString *)getFormattedStartTime;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_Operation)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mKind_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mBindArgs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mException_, JavaLangException *)

inline JavaTextSimpleDateFormat *AndroidDatabaseSqliteSQLiteConnection_Operation_get_sDateFormat();
static JavaTextSimpleDateFormat *AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection_Operation, sDateFormat, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init();

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_Operation)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection

+ (jlong)nativeOpenWithNSString:(NSString *)path
                        withInt:(jint)openFlags
                   withNSString:(NSString *)label
                    withBoolean:(jboolean)enableTrace
                    withBoolean:(jboolean)enableProfile {
  return AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(path, openFlags, label, enableTrace, enableProfile);
}

+ (void)nativeCloseWithLong:(jlong)connectionPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(connectionPtr);
}

+ (void)nativeRegisterCustomFunctionWithLong:(jlong)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function {
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(connectionPtr, function);
}

+ (void)nativeRegisterLocalizedCollatorsWithLong:(jlong)connectionPtr
                                    withNSString:(NSString *)locale {
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(connectionPtr, locale);
}

+ (jlong)nativePrepareStatementWithLong:(jlong)connectionPtr
                           withNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(connectionPtr, sql);
}

+ (void)nativeFinalizeStatementWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeGetParameterCountWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jboolean)nativeIsReadOnlyWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeGetColumnCountWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (NSString *)nativeGetColumnNameWithLong:(jlong)connectionPtr
                                 withLong:(jlong)statementPtr
                                  withInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindNullWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindLongWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                      withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindDoubleWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                      withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindStringWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                    withNSString:(NSString *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindBlobWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                 withByteArray:(IOSByteArray *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeResetStatementAndClearBindingsWithLong:(jlong)connectionPtr
                                            withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(connectionPtr, statementPtr);
}

+ (void)nativeExecuteWithLong:(jlong)connectionPtr
                     withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLongWithLong:(jlong)connectionPtr
                             withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(connectionPtr, statementPtr);
}

+ (NSString *)nativeExecuteForStringWithLong:(jlong)connectionPtr
                                    withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeExecuteForChangedRowCountWithLong:(jlong)connectionPtr
                                       withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLastInsertedRowIdWithLong:(jlong)connectionPtr
                                          withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForCursorWindowWithLong:(jlong)connectionPtr
                                     withLong:(jlong)statementPtr
                                     withLong:(jlong)windowPtr
                                      withInt:(jint)startPos
                                      withInt:(jint)requiredPos
                                  withBoolean:(jboolean)countAllRows {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

+ (jint)nativeGetDbLookasideWithLong:(jlong)connectionPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(connectionPtr);
}

+ (void)nativeCancelWithLong:(jlong)connectionPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(connectionPtr);
}

+ (void)nativeResetCancelWithLong:(jlong)connectionPtr
                      withBoolean:(jboolean)cancelable {
  AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(connectionPtr, cancelable);
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
             withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                          withInt:(jint)connectionId
                                                      withBoolean:(jboolean)primaryConnection {
  AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, pool, configuration, connectionId, primaryConnection);
  return self;
}

- (void)java_finalize {
  @try {
    if (mPool_ != nil && mConnectionPtr_ != 0) {
      [mPool_ onConnectionLeaked];
    }
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

+ (AndroidDatabaseSqliteSQLiteConnection *)openWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                                        withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                     withInt:(jint)connectionId
                                                                                 withBoolean:(jboolean)primaryConnection {
  return AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
}

- (void)close {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, false);
}

- (void)open {
  AndroidDatabaseSqliteSQLiteConnection_open(self);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, finalized);
}

- (void)setPageSize {
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
}

- (void)setAutoCheckpointInterval {
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
}

- (void)setJournalSizeLimit {
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
}

- (void)setForeignKeyModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
}

- (void)setWalModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
}

- (void)setSyncModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, newValue);
}

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value {
  return AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value);
}

- (void)setJournalModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, newValue);
}

- (void)setLocaleFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
}

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  mOnlyAllowReadOnlyOperations_ = false;
  jint functionCount = [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [configuration->customFunctions_ getWithInt:i];
    if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->customFunctions_ containsWithId:function]) {
      AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(mConnectionPtr_, function);
    }
  }
  jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->foreignKeyConstraintsEnabled_;
  jboolean walModeChanged = ((configuration->openFlags_ ^ mConfiguration_->openFlags_) & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  jboolean localeChanged = ![((JavaUtilLocale *) nil_chk(configuration->locale_)) isEqual:mConfiguration_->locale_];
  [mConfiguration_ updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:configuration];
  [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) resizeWithInt:configuration->maxSqlCacheSize_];
  if (foreignKeyModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  }
  if (walModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  }
  if (localeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
  }
}

- (void)setOnlyAllowReadOnlyOperationsWithBoolean:(jboolean)readOnly {
  mOnlyAllowReadOnlyOperations_ = readOnly;
}

- (jboolean)isPreparedStatementInCacheWithNSString:(NSString *)sql {
  return [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) getWithId:sql] != nil;
}

- (jint)getConnectionId {
  return mConnectionId_;
}

- (jboolean)isPrimaryConnection {
  return mIsPrimaryConnection_;
}

- (void)prepareWithNSString:(NSString *)sql
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"prepare" withNSString:sql withNSObjectArray:nil];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      if (outStatementInfo != nil) {
        outStatementInfo->numParameters_ = ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_;
        outStatementInfo->readOnly_ = statement->mReadOnly_;
        jint columnCount = AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(mConnectionPtr_, statement->mStatementPtr_);
        if (columnCount == 0) {
          JreStrongAssign(&outStatementInfo->columnNames_, AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY);
        }
        else {
          JreStrongAssignAndConsume(&outStatementInfo->columnNames_, [IOSObjectArray newArrayWithLength:columnCount type:NSString_class_()]);
          for (jint i = 0; i < columnCount; i++) {
            IOSObjectArray_Set(nil_chk(outStatementInfo->columnNames_), i, AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(mConnectionPtr_, statement->mStatementPtr_, i));
          }
        }
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"execute" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
    withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLong" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForString" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint changedRows = 0;
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForChangedRowCount" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        changedRows = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
        return changedRows;
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
      [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$I", @"changedRows=", changedRows)];
    }
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLastInsertedRowId" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  [window acquireReference];
  @try {
    jint actualPos = -1;
    jint countedRows = -1;
    jint filledRows = -1;
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForCursorWindow" withNSString:sql withNSObjectArray:bindArgs];
    @try {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
        AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
        AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
        AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
        @try {
          jlong result = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_, window->mWindowPtr_, startPos, requiredPos, countAllRows);
          actualPos = (jint) (JreRShift64(result, 32));
          countedRows = (jint) result;
          filledRows = [window getNumRows];
          [window setStartPositionWithInt:actualPos];
          return countedRows;
        }
        @finally {
          AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
        }
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
      @throw ex;
    }
    @finally {
      if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
        [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$@$I$I$I$I", @"window='", window, @"', startPos=", startPos, @", actualPos=", actualPos, @", filledRows=", filledRows, @", countedRows=", countedRows)];
      }
    }
  }
  @finally {
    [window releaseReference];
  }
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
}

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)attachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
}

- (void)detachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
}

- (void)onCancel {
  AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(mConnectionPtr_);
}

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
}

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (jboolean)isCacheableWithInt:(jint)statementType {
  return AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(statementType);
}

- (void)applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  [self dumpUnsafeWithAndroidUtilPrinter:printer withBoolean:verbose];
}

- (void)dumpUnsafeWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                             withBoolean:(jboolean)verbose {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$IC", @"Connection #", mConnectionId_, ':')];
  if (verbose) {
    [printer printlnWithNSString:JreStrcat("$$", @"  connectionPtr: 0x", JavaLangLong_toHexStringWithLong_(mConnectionPtr_))];
  }
  [printer printlnWithNSString:JreStrcat("$Z", @"  isPrimaryConnection: ", mIsPrimaryConnection_)];
  [printer printlnWithNSString:JreStrcat("$Z", @"  onlyAllowReadOnlyOperations: ", mOnlyAllowReadOnlyOperations_)];
  [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
  if (verbose) {
    [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) dumpWithAndroidUtilPrinter:printer];
  }
}

- (NSString *)describeCurrentOperationUnsafe {
  return [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) describeCurrentOperation];
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  jint lookaside = AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(mConnectionPtr_);
  jlong pageCount = 0;
  jlong pageSize = 0;
  @try {
    pageCount = [self executeForLongWithNSString:@"PRAGMA page_count;" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    pageSize = [self executeForLongWithNSString:@"PRAGMA page_size;" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize)];
  AndroidDatabaseCursorWindow *window = create_AndroidDatabaseCursorWindow_initWithNSString_(@"collectDbStats");
  @try {
    [self executeForCursorWindowWithNSString:@"PRAGMA database_list;" withNSObjectArray:nil withAndroidDatabaseCursorWindow:window withInt:0 withInt:0 withBoolean:false withAndroidOsCancellationSignal:nil];
    for (jint i = 1; i < [window getNumRows]; i++) {
      NSString *name = [window getStringWithInt:i withInt:1];
      NSString *path = [window getStringWithInt:i withInt:2];
      pageCount = 0;
      pageSize = 0;
      @try {
        pageCount = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_count;") withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
        pageSize = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_size;") withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      }
      @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      }
      NSString *label = JreStrcat("$$", @"  (attached) ", name);
      if (![((NSString *) nil_chk(path)) java_isEmpty]) {
        JreStrAppend(&label, "$$", @": ", path);
      }
      [dbStatsList addWithId:create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, 0, 0, 0, 0)];
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  @finally {
    [window close];
  }
}

- (void)collectDbStatsUnsafeWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, 0, 0, 0)];
}

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize {
  return AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize);
}

- (NSString *)description {
  return JreStrcat("$$$IC", @"SQLiteConnection: ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, @" (", mConnectionId_, ')');
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                        withLong:(jlong)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly {
  return AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
}

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteConnection class]);
  RELEASE_(mCloseGuard_);
  RELEASE_(mPool_);
  RELEASE_(mConfiguration_);
  RELEASE_(mPreparedStatementCache_);
  RELEASE_(mPreparedStatementPool_);
  RELEASE_(mRecentOperations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 12, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 13, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 25, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 26, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 27, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 28, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 29, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 30, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 33, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 34, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 35, 36, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 38, -1, 39, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x8, 40, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 45, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 49, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 50, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 55, 54, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 56, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, 54, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 58, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", 0x2, 61, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 76, 75, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 77, 78, -1, 79, -1, -1 },
    { NULL, "V", 0x0, 80, 78, -1, 79, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDebug_DbStats;", 0x2, 81, 82, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 83, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", 0x2, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 63, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 87, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(nativeOpenWithNSString:withInt:withNSString:withBoolean:withBoolean:);
  methods[1].selector = @selector(nativeCloseWithLong:);
  methods[2].selector = @selector(nativeRegisterCustomFunctionWithLong:withAndroidDatabaseSqliteSQLiteCustomFunction:);
  methods[3].selector = @selector(nativeRegisterLocalizedCollatorsWithLong:withNSString:);
  methods[4].selector = @selector(nativePrepareStatementWithLong:withNSString:);
  methods[5].selector = @selector(nativeFinalizeStatementWithLong:withLong:);
  methods[6].selector = @selector(nativeGetParameterCountWithLong:withLong:);
  methods[7].selector = @selector(nativeIsReadOnlyWithLong:withLong:);
  methods[8].selector = @selector(nativeGetColumnCountWithLong:withLong:);
  methods[9].selector = @selector(nativeGetColumnNameWithLong:withLong:withInt:);
  methods[10].selector = @selector(nativeBindNullWithLong:withLong:withInt:);
  methods[11].selector = @selector(nativeBindLongWithLong:withLong:withInt:withLong:);
  methods[12].selector = @selector(nativeBindDoubleWithLong:withLong:withInt:withDouble:);
  methods[13].selector = @selector(nativeBindStringWithLong:withLong:withInt:withNSString:);
  methods[14].selector = @selector(nativeBindBlobWithLong:withLong:withInt:withByteArray:);
  methods[15].selector = @selector(nativeResetStatementAndClearBindingsWithLong:withLong:);
  methods[16].selector = @selector(nativeExecuteWithLong:withLong:);
  methods[17].selector = @selector(nativeExecuteForLongWithLong:withLong:);
  methods[18].selector = @selector(nativeExecuteForStringWithLong:withLong:);
  methods[19].selector = @selector(nativeExecuteForChangedRowCountWithLong:withLong:);
  methods[20].selector = @selector(nativeExecuteForLastInsertedRowIdWithLong:withLong:);
  methods[21].selector = @selector(nativeExecuteForCursorWindowWithLong:withLong:withLong:withInt:withInt:withBoolean:);
  methods[22].selector = @selector(nativeGetDbLookasideWithLong:);
  methods[23].selector = @selector(nativeCancelWithLong:);
  methods[24].selector = @selector(nativeResetCancelWithLong:withBoolean:);
  methods[25].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[26].selector = @selector(java_finalize);
  methods[27].selector = @selector(openWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[28].selector = @selector(close);
  methods[29].selector = @selector(open);
  methods[30].selector = @selector(disposeWithBoolean:);
  methods[31].selector = @selector(setPageSize);
  methods[32].selector = @selector(setAutoCheckpointInterval);
  methods[33].selector = @selector(setJournalSizeLimit);
  methods[34].selector = @selector(setForeignKeyModeFromConfiguration);
  methods[35].selector = @selector(setWalModeFromConfiguration);
  methods[36].selector = @selector(setSyncModeWithNSString:);
  methods[37].selector = @selector(canonicalizeSyncModeWithNSString:);
  methods[38].selector = @selector(setJournalModeWithNSString:);
  methods[39].selector = @selector(setLocaleFromConfiguration);
  methods[40].selector = @selector(reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[41].selector = @selector(setOnlyAllowReadOnlyOperationsWithBoolean:);
  methods[42].selector = @selector(isPreparedStatementInCacheWithNSString:);
  methods[43].selector = @selector(getConnectionId);
  methods[44].selector = @selector(isPrimaryConnection);
  methods[45].selector = @selector(prepareWithNSString:withAndroidDatabaseSqliteSQLiteStatementInfo:);
  methods[46].selector = @selector(executeWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[47].selector = @selector(executeForLongWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[48].selector = @selector(executeForStringWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[49].selector = @selector(executeForChangedRowCountWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[50].selector = @selector(executeForLastInsertedRowIdWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[51].selector = @selector(executeForCursorWindowWithNSString:withNSObjectArray:withAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:withAndroidOsCancellationSignal:);
  methods[52].selector = @selector(acquirePreparedStatementWithNSString:);
  methods[53].selector = @selector(releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[54].selector = @selector(finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[55].selector = @selector(attachCancellationSignalWithAndroidOsCancellationSignal:);
  methods[56].selector = @selector(detachCancellationSignalWithAndroidOsCancellationSignal:);
  methods[57].selector = @selector(onCancel);
  methods[58].selector = @selector(bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:withNSObjectArray:);
  methods[59].selector = @selector(throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[60].selector = @selector(isCacheableWithInt:);
  methods[61].selector = @selector(applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[62].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  methods[63].selector = @selector(dumpUnsafeWithAndroidUtilPrinter:withBoolean:);
  methods[64].selector = @selector(describeCurrentOperationUnsafe);
  methods[65].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[66].selector = @selector(collectDbStatsUnsafeWithJavaUtilArrayList:);
  methods[67].selector = @selector(getMainDbStatsUnsafeWithInt:withLong:withLong:);
  methods[68].selector = @selector(description);
  methods[69].selector = @selector(obtainPreparedStatementWithNSString:withLong:withInt:withInt:withBoolean:);
  methods[70].selector = @selector(recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[71].selector = @selector(trimSqlForDisplayWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteConnection_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 89, -1, -1 },
    { "EMPTY_BYTE_ARRAY", "[B", .constantValue.asLong = 0, 0x1a, -1, 90, -1, -1 },
    { "TRIM_SQL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 91, -1, -1 },
    { "mCloseGuard_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPool_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfiguration_", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsPrimaryConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsReadOnlyConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementCache_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementPool_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRecentOperations_", "LAndroidDatabaseSqliteSQLiteConnection_OperationLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPtr_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnlyAllowReadOnlyOperations_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancellationSignalAttachCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeOpen", "LNSString;ILNSString;ZZ", "nativeClose", "J", "nativeRegisterCustomFunction", "JLAndroidDatabaseSqliteSQLiteCustomFunction;", "nativeRegisterLocalizedCollators", "JLNSString;", "nativePrepareStatement", "nativeFinalizeStatement", "JJ", "nativeGetParameterCount", "nativeIsReadOnly", "nativeGetColumnCount", "nativeGetColumnName", "JJI", "nativeBindNull", "nativeBindLong", "JJIJ", "nativeBindDouble", "JJID", "nativeBindString", "JJILNSString;", "nativeBindBlob", "JJI[B", "nativeResetStatementAndClearBindings", "nativeExecute", "nativeExecuteForLong", "nativeExecuteForString", "nativeExecuteForChangedRowCount", "nativeExecuteForLastInsertedRowId", "nativeExecuteForCursorWindow", "JJJIIZ", "nativeGetDbLookaside", "nativeCancel", "nativeResetCancel", "JZ", "LAndroidDatabaseSqliteSQLiteConnectionPool;LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;IZ", "finalize", "LJavaLangThrowable;", "open", "dispose", "Z", "setSyncMode", "LNSString;", "canonicalizeSyncMode", "setJournalMode", "reconfigure", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", "setOnlyAllowReadOnlyOperations", "isPreparedStatementInCache", "prepare", "LNSString;LAndroidDatabaseSqliteSQLiteStatementInfo;", "execute", "LNSString;[LNSObject;LAndroidOsCancellationSignal;", "executeForLong", "executeForString", "executeForChangedRowCount", "executeForLastInsertedRowId", "executeForCursorWindow", "LNSString;[LNSObject;LAndroidDatabaseCursorWindow;IIZLAndroidOsCancellationSignal;", "acquirePreparedStatement", "releasePreparedStatement", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", "finalizePreparedStatement", "attachCancellationSignal", "LAndroidOsCancellationSignal;", "detachCancellationSignal", "bindArguments", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;[LNSObject;", "throwIfStatementForbidden", "isCacheable", "I", "applyBlockGuardPolicy", "dump", "LAndroidUtilPrinter;Z", "dumpUnsafe", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V", "collectDbStatsUnsafe", "getMainDbStatsUnsafe", "IJJ", "toString", "obtainPreparedStatement", "LNSString;JIIZ", "recyclePreparedStatement", "trimSqlForDisplay", &AndroidDatabaseSqliteSQLiteConnection_TAG, &AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY, &AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY, &AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;LAndroidDatabaseSqliteSQLiteConnection_OperationLog;LAndroidDatabaseSqliteSQLiteConnection_Operation;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection = { "SQLiteConnection", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 72, 17, -1, 92, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnection class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssign(&AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\s]*\\n+[\\s]*"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnection)
  }
}

@end

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeOpen(JNIEnv *_env_, jclass _cls_, jstring path, jint openFlags, jstring label, jboolean enableTrace, jboolean enableProfile);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile) {
  return Java_android_database_sqlite_SQLiteConnection_nativeOpen(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), path, openFlags, label, enableTrace, enableProfile);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeClose(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(jlong connectionPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeClose(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeRegisterCustomFunction(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jobject function);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(jlong connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function) {
  Java_android_database_sqlite_SQLiteConnection_nativeRegisterCustomFunction(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, function);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeRegisterLocalizedCollators(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jstring locale);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(jlong connectionPtr, NSString *locale) {
  Java_android_database_sqlite_SQLiteConnection_nativeRegisterLocalizedCollators(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, locale);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativePrepareStatement(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jstring sql);

jlong AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(jlong connectionPtr, NSString *sql) {
  return Java_android_database_sqlite_SQLiteConnection_nativePrepareStatement(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, sql);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeFinalizeStatement(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeFinalizeStatement(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetParameterCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetParameterCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jboolean Java_android_database_sqlite_SQLiteConnection_nativeIsReadOnly(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeIsReadOnly(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetColumnCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetColumnCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jstring Java_android_database_sqlite_SQLiteConnection_nativeGetColumnName(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index) {
  return (NSString *) Java_android_database_sqlite_SQLiteConnection_nativeGetColumnName(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindNull(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindNull(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindLong(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jlong value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(jlong connectionPtr, jlong statementPtr, jint index, jlong value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindLong(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindDouble(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jdouble value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(jlong connectionPtr, jlong statementPtr, jint index, jdouble value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindDouble(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindString(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jstring value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(jlong connectionPtr, jlong statementPtr, jint index, NSString *value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindString(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindBlob(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jarray value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(jlong connectionPtr, jlong statementPtr, jint index, IOSByteArray *value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindBlob(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeResetStatementAndClearBindings(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeResetStatementAndClearBindings(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeExecute(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeExecute(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLong(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLong(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jstring Java_android_database_sqlite_SQLiteConnection_nativeExecuteForString(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return (NSString *) Java_android_database_sqlite_SQLiteConnection_nativeExecuteForString(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeExecuteForChangedRowCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForChangedRowCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLastInsertedRowId(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLastInsertedRowId(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForCursorWindow(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForCursorWindow(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetDbLookaside(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(jlong connectionPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetDbLookaside(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeCancel(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(jlong connectionPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeCancel(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeResetCancel(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jboolean cancelable);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(jlong connectionPtr, jboolean cancelable) {
  Java_android_database_sqlite_SQLiteConnection_nativeResetCancel(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, cancelable);
}

void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  NSObject_init(self);
  JreStrongAssign(&self->mCloseGuard_, DalvikSystemCloseGuard_get());
  JreStrongAssignAndConsume(&self->mRecentOperations_, new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init());
  JreStrongAssign(&self->mPool_, pool);
  JreStrongAssignAndConsume(&self->mConfiguration_, new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration));
  self->mConnectionId_ = connectionId;
  self->mIsPrimaryConnection_ = primaryConnection;
  self->mIsReadOnlyConnection_ = ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY) != 0);
  JreStrongAssignAndConsume(&self->mPreparedStatementCache_, new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, self->mConfiguration_->maxSqlCacheSize_));
  [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  AndroidDatabaseSqliteSQLiteConnection *connection = create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
  @try {
    AndroidDatabaseSqliteSQLiteConnection_open(connection);
    return connection;
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(connection, false);
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self) {
  self->mConnectionPtr_ = AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_, self->mConfiguration_->openFlags_, self->mConfiguration_->label_, JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_STATEMENTS), JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_TIME));
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
  jint functionCount = [((JavaUtilArrayList *) nil_chk(self->mConfiguration_->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [self->mConfiguration_->customFunctions_ getWithInt:i];
    AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(self->mConnectionPtr_, function);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (self->mConnectionPtr_ != 0) {
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(self->mRecentOperations_)) beginOperationWithNSString:@"close" withNSString:nil withNSObjectArray:nil];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) evictAll];
      AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(self->mConnectionPtr_);
      self->mConnectionPtr_ = 0;
    }
    @finally {
      [self->mRecentOperations_ endOperationWithInt:cookie];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize();
    jlong value = [self executeForLongWithNSString:@"PRAGMA page_size" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA page_size=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint();
    jlong value = [self executeForLongWithNSString:@"PRAGMA wal_autocheckpoint" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA wal_autocheckpoint=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit();
    jlong value = [self executeForLongWithNSString:@"PRAGMA journal_size_limit" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA journal_size_limit=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (!self->mIsReadOnlyConnection_) {
    jlong newValue = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->foreignKeyConstraintsEnabled_ ? 1 : 0;
    jlong value = [self executeForLongWithNSString:@"PRAGMA foreign_keys" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA foreign_keys=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    if ((self->mConfiguration_->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, @"WAL");
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode());
    }
    else {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode());
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode());
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA synchronous" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  if (![((NSString *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value))) java_equalsIgnoreCase:AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(newValue)]) {
    [self executeWithNSString:JreStrcat("$$", @"PRAGMA synchronous=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  }
}

NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if ([((NSString *) nil_chk(value)) isEqual:@"0"]) {
    return @"OFF";
  }
  else if ([value isEqual:@"1"]) {
    return @"NORMAL";
  }
  else if ([value isEqual:@"2"]) {
    return @"FULL";
  }
  return value;
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA journal_mode" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  if (![((NSString *) nil_chk(value)) java_equalsIgnoreCase:newValue]) {
    @try {
      NSString *result = [self executeForStringWithNSString:JreStrcat("$$", @"PRAGMA journal_mode=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      if ([((NSString *) nil_chk(result)) java_equalsIgnoreCase:newValue]) {
        return;
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseLockedException *ex) {
    }
    AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, JreStrcat("$$$$$$$", @"Could not change the database journal mode of '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @"' from '", value, @"' to '", newValue, @"' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode."));
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS) != 0) {
    return;
  }
  NSString *newLocale = [((JavaUtilLocale *) nil_chk(self->mConfiguration_->locale_)) description];
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(self->mConnectionPtr_, newLocale);
  if (self->mIsReadOnlyConnection_) {
    return;
  }
  @try {
    [self executeWithNSString:@"CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    NSString *oldLocale = [self executeForStringWithNSString:@"SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (oldLocale != nil && [oldLocale isEqual:newLocale]) {
      return;
    }
    [self executeWithNSString:@"BEGIN" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    jboolean success = false;
    @try {
      [self executeWithNSString:@"DELETE FROM android_metadata" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      [self executeWithNSString:@"INSERT INTO android_metadata (locale) VALUES(?)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ newLocale } count:1 type:NSObject_class_()] withAndroidOsCancellationSignal:nil];
      [self executeWithNSString:@"REINDEX LOCALIZED" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      success = true;
    }
    @finally {
      [self executeWithNSString:success ? @"COMMIT" : @"ROLLBACK" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"Failed to change locale for db '", self->mConfiguration_->label_, @"' to '", newLocale, @"'."), ex);
  }
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) getWithId:sql];
  jboolean skipCache = false;
  if (statement != nil) {
    if (!statement->mInUse_) {
      return statement;
    }
    skipCache = true;
  }
  jlong statementPtr = AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(self->mConnectionPtr_, sql);
  @try {
    jint numParameters = AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    jint type = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
    jboolean readOnly = AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    statement = AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
    if (!skipCache && AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(type)) {
      [self->mPreparedStatementCache_ putWithId:sql withId:statement];
      ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_ = true;
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    if (statement == nil || !statement->mInCache_) {
      AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    }
    @throw ex;
  }
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = true;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = false;
  if (statement->mInCache_) {
    @try {
      AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(self->mConnectionPtr_, statement->mStatementPtr_);
    }
    @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) removeWithId:statement->mSql_];
    }
  }
  else {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(self->mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

void AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
    self->mCancellationSignalAttachCount_ += 1;
    if (self->mCancellationSignalAttachCount_ == 1) {
      AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(self->mConnectionPtr_, true);
      [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:self];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    JreAssert(self->mCancellationSignalAttachCount_ > 0, @"android/database/sqlite/SQLiteConnection.java:908 condition failed: assert mCancellationSignalAttachCount > 0;");
    self->mCancellationSignalAttachCount_ -= 1;
    if (self->mCancellationSignalAttachCount_ == 0) {
      [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:nil];
      AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(self->mConnectionPtr_, false);
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs) {
  jint count = bindArgs != nil ? bindArgs->size_ : 0;
  if (count != ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_) {
    @throw create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(JreStrcat("$I$I$", @"Expected ", statement->mNumParameters_, @" bind arguments but ", count, @" were provided."));
  }
  if (count == 0) {
    return;
  }
  jlong statementPtr = statement->mStatementPtr_;
  for (jint i = 0; i < count; i++) {
    id arg = IOSObjectArray_Get(nil_chk(bindArgs), i);
    switch (AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(arg)) {
      case AndroidDatabaseCursor_FIELD_TYPE_NULL:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(self->mConnectionPtr_, statementPtr, i + 1);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_INTEGER:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) longLongValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_FLOAT:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) doubleValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_BLOB:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(self->mConnectionPtr_, statementPtr, i + 1, (IOSByteArray *) cast_chk(arg, [IOSByteArray class]));
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_STRING:
      default:
      if ([arg isKindOfClass:[JavaLangBoolean class]]) {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(arg, [JavaLangBoolean class])))) booleanValue] ? 1 : 0);
      }
      else {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(self->mConnectionPtr_, statementPtr, i + 1, [nil_chk(arg) description]);
      }
      break;
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  if (self->mOnlyAllowReadOnlyOperations_ && !((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
    @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(@"Cannot execute this statement because it might modify the database but the connection is read-only.");
  }
}

jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if (statementType == AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE || statementType == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT) {
    return true;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb]) {
    if (((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
      [((id<DalvikSystemBlockGuard_Policy>) nil_chk(DalvikSystemBlockGuard_getThreadPolicy())) onReadFromDisk];
    }
    else {
      [((id<DalvikSystemBlockGuard_Policy>) nil_chk(DalvikSystemBlockGuard_getThreadPolicy())) onWriteToDisk];
    }
  }
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize) {
  NSString *label = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_;
  if (!self->mIsPrimaryConnection_) {
    JreStrAppend(&label, "$IC", @" (", self->mConnectionId_, ')');
  }
  return create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, lookaside, [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) hitCount], [self->mPreparedStatementCache_ missCount], [self->mPreparedStatementCache_ size]);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, jlong statementPtr, jint numParameters, jint type, jboolean readOnly) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = self->mPreparedStatementPool_;
  if (statement != nil) {
    JreStrongAssign(&self->mPreparedStatementPool_, statement->mPoolNext_);
    JreStrongAssign(&statement->mPoolNext_, nil);
    statement->mInCache_ = false;
  }
  else {
    statement = create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();
  }
  JreStrongAssign(&statement->mSql_, sql);
  statement->mStatementPtr_ = statementPtr;
  statement->mNumParameters_ = numParameters;
  statement->mType_ = type;
  statement->mReadOnly_ = readOnly;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  JreStrongAssign(&((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mSql_, nil);
  JreStrongAssign(&statement->mPoolNext_, self->mPreparedStatementPool_);
  JreStrongAssign(&self->mPreparedStatementPool_, statement);
}

NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN)) matcherWithJavaLangCharSequence:sql])) replaceAllWithNSString:@" "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mPoolNext_);
  RELEASE_(mSql_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPoolNext_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStatementPtr_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mNumParameters_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mReadOnly_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInCache_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInUse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatement = { "PreparedStatement", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 1, 8, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, init)
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                      withInt:(jint)size {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, outer$, size);
  return self;
}

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(oldValue))->mInCache_ = false;
  if (!oldValue->mInUse_) {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(this$0_, oldValue);
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Prepared statement cache:"];
  id<JavaUtilMap> cache = [self snapshot];
  if (![((id<JavaUtilMap>) nil_chk(cache)) isEmpty]) {
    jint i = 0;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([cache entrySet])) {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_) {
        NSString *sql = [entry_ getKey];
        [printer printlnWithNSString:JreStrcat("$I$$$I$I$Z$$C", @"    ", i, @": statementPtr=0x", JavaLangLong_toHexStringWithLong_(statement->mStatementPtr_), @", numParameters=", statement->mNumParameters_, @", type=", statement->mType_, @", readOnly=", statement->mReadOnly_, @", sql=\"", AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql), '"')];
      }
      i += 1;
    }
  }
  else {
    [printer printlnWithNSString:@"    <none>"];
  }
}

- (void)__javaClone:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnection:withInt:);
  methods[1].selector = @selector(entryRemovedWithBoolean:withId:withId:withId:);
  methods[2].selector = @selector(dumpWithAndroidUtilPrinter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseSqliteSQLiteConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "entryRemoved", "ZLNSString;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", "dump", "LAndroidUtilPrinter;", "LAndroidDatabaseSqliteSQLiteConnection;", "Landroid/util/LruCache<Ljava/lang/String;Landroid/database/sqlite/SQLiteConnection$PreparedStatement;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache = { "PreparedStatementCache", "android.database.sqlite", ptrTable, methods, fields, 7, 0x12, 3, 1, 5, -1, -1, 6, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  self->this$0_ = outer$;
  AndroidUtilLruCache_initWithInt_(self, size);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache, initWithAndroidDatabaseSqliteSQLiteConnection_withInt_, outer$, size)
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache, initWithAndroidDatabaseSqliteSQLiteConnection_withInt_, outer$, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@implementation AndroidDatabaseSqliteSQLiteConnection_OperationLog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  @synchronized(mOperations_) {
    jint index = (mIndex_ + 1) % AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation == nil) {
      operation = create_AndroidDatabaseSqliteSQLiteConnection_Operation_init();
      IOSObjectArray_Set(mOperations_, index, operation);
    }
    else {
      operation->mFinished_ = false;
      JreStrongAssign(&operation->mException_, nil);
      if (operation->mBindArgs_ != nil) {
        [operation->mBindArgs_ clear];
      }
    }
    operation->mStartTime_ = JavaLangSystem_currentTimeMillis();
    JreStrongAssign(&operation->mKind_, kind);
    JreStrongAssign(&operation->mSql_, sql);
    if (bindArgs != nil) {
      if (operation->mBindArgs_ == nil) {
        JreStrongAssignAndConsume(&operation->mBindArgs_, new_JavaUtilArrayList_init());
      }
      else {
        [operation->mBindArgs_ clear];
      }
      for (jint i = 0; i < bindArgs->size_; i++) {
        id arg = IOSObjectArray_Get(bindArgs, i);
        if (arg != nil && [arg isKindOfClass:[IOSByteArray class]]) {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:JreLoadStatic(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY)];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:arg];
        }
      }
    }
    operation->mCookie_ = AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
    mIndex_ = index;
    return operation->mCookie_;
  }
}

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
    if (operation != nil) {
      JreStrongAssign(&operation->mException_, ex);
    }
  }
}

- (void)endOperationWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    if (AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie)) {
      AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, nil);
    }
  }
}

- (jboolean)endOperationDeferLogWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
  }
}

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
  }
}

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
}

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
}

- (jint)newOperationCookieLockedWithInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
}

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
}

- (NSString *)describeCurrentOperation {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), mIndex_);
    if (operation != nil && !operation->mFinished_) {
      JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
      [operation describeWithJavaLangStringBuilder:msg withBoolean:false];
      return JreRetainedLocalValue([msg description]);
    }
    return JreRetainedLocalValue(nil);
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  @synchronized(mOperations_) {
    [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Most recently executed operations:"];
    jint index = mIndex_;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation != nil) {
      jint n = 0;
      do {
        JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"    "])) appendWithInt:n])) appendWithNSString:@": ["];
        [msg appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(operation)];
        [msg appendWithNSString:@"] "];
        [operation describeWithJavaLangStringBuilder:msg withBoolean:verbose];
        [printer printlnWithNSString:[msg description]];
        if (index > 0) {
          index -= 1;
        }
        else {
          index = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS - 1;
        }
        n += 1;
        operation = IOSObjectArray_Get(mOperations_, index);
      }
      while (operation != nil && n < AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS);
    }
    else {
      [printer printlnWithNSString:@"    <none>"];
    }
  }
}

- (void)dealloc {
  RELEASE_(mOperations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_Operation;", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(beginOperationWithNSString:withNSString:withNSObjectArray:);
  methods[2].selector = @selector(failOperationWithInt:withJavaLangException:);
  methods[3].selector = @selector(endOperationWithInt:);
  methods[4].selector = @selector(endOperationDeferLogWithInt:);
  methods[5].selector = @selector(logOperationWithInt:withNSString:);
  methods[6].selector = @selector(endOperationDeferLogLockedWithInt:);
  methods[7].selector = @selector(logOperationLockedWithInt:withNSString:);
  methods[8].selector = @selector(newOperationCookieLockedWithInt:);
  methods[9].selector = @selector(getOperationLockedWithInt:);
  methods[10].selector = @selector(describeCurrentOperation);
  methods[11].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_RECENT_OPERATIONS", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_GENERATION_SHIFT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_INDEX_MASK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK, 0x1a, -1, -1, -1, -1 },
    { "mOperations_", "[LAndroidDatabaseSqliteSQLiteConnection_Operation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGeneration_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "beginOperation", "LNSString;LNSString;[LNSObject;", "failOperation", "ILJavaLangException;", "endOperation", "I", "endOperationDeferLog", "logOperation", "ILNSString;", "endOperationDeferLogLocked", "logOperationLocked", "newOperationCookieLocked", "getOperationLocked", "dump", "LAndroidUtilPrinter;Z", "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_OperationLog = { "OperationLog", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 12, 6, 15, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_OperationLog;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mOperations_, [IOSObjectArray newArrayWithLength:AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS type:AndroidDatabaseSqliteSQLiteConnection_Operation_class_()]);
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_OperationLog, init)
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_OperationLog, init)
}

jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  if (operation != nil) {
    operation->mEndTime_ = JavaLangSystem_currentTimeMillis();
    operation->mFinished_ = true;
    return false;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
  [((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation)) describeWithJavaLangStringBuilder:msg withBoolean:false];
  if (detail != nil) {
    [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", "])) appendWithNSString:detail];
  }
  AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, [msg description]);
}

jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index) {
  jint generation = self->mGeneration_++;
  return (JreLShift32(generation, AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT)) | index;
}

AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  jint index = cookie & AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK;
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(self->mOperations_), index);
  return ((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation))->mCookie_ == cookie ? operation : nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnection_Operation)

@implementation AndroidDatabaseSqliteSQLiteConnection_Operation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_Operation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose {
  [((JavaLangStringBuilder *) nil_chk(msg)) appendWithNSString:mKind_];
  if (mFinished_) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" took "])) appendWithLong:mEndTime_ - mStartTime_])) appendWithNSString:@"ms"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" started "])) appendWithLong:JavaLangSystem_currentTimeMillis() - mStartTime_])) appendWithNSString:@"ms ago"];
  }
  [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" - "])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self)];
  if (mSql_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", sql=\""])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(mSql_)])) appendWithNSString:@"\""];
  }
  if (verbose && mBindArgs_ != nil && [mBindArgs_ size] != 0) {
    [msg appendWithNSString:@", bindArgs=["];
    jint count = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) size];
    for (jint i = 0; i < count; i++) {
      id arg = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) getWithInt:i];
      if (i != 0) {
        [msg appendWithNSString:@", "];
      }
      if (arg == nil) {
        [msg appendWithNSString:@"null"];
      }
      else if ([arg isKindOfClass:[IOSByteArray class]]) {
        [msg appendWithNSString:@"<byte[]>"];
      }
      else if ([arg isKindOfClass:[NSString class]]) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"\""])) appendWithNSString:(NSString *) cast_chk(arg, [NSString class])])) appendWithNSString:@"\""];
      }
      else {
        [msg appendWithId:arg];
      }
    }
    [msg appendWithNSString:@"]"];
  }
  if (mException_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", exception=\""])) appendWithNSString:[((JavaLangException *) nil_chk(mException_)) getMessage]])) appendWithNSString:@"\""];
  }
}

- (NSString *)getStatus {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self);
}

- (NSString *)getFormattedStartTime {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(self);
}

- (void)dealloc {
  RELEASE_(mKind_);
  RELEASE_(mSql_);
  RELEASE_(mBindArgs_);
  RELEASE_(mException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(describeWithJavaLangStringBuilder:withBoolean:);
  methods[2].selector = @selector(getStatus);
  methods[3].selector = @selector(getFormattedStartTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sDateFormat", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "mStartTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mEndTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mKind_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBindArgs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1, -1, -1, 3, -1 },
    { "mFinished_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mException_", "LJavaLangException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCookie_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "describe", "LJavaLangStringBuilder;Z", &AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat, "Ljava/util/ArrayList<Ljava/lang/Object;>;", "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_Operation = { "Operation", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 4, 9, 4, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_Operation;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnection_Operation class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat, new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss.SSS"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnection_Operation)
  }
}

@end

void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_Operation, init)
}

AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_Operation, init)
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  if (!self->mFinished_) {
    return @"running";
  }
  return self->mException_ != nil ? @"failed" : @"succeeded";
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  return [((JavaTextSimpleDateFormat *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(self->mStartTime_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_Operation)
