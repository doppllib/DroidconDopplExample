//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseDatabaseErrorHandler.h"
#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseDefaultDatabaseErrorHandler.h"
#include "AndroidDatabaseSQLException.h"
#include "AndroidDatabaseSqliteSQLiteClosable.h"
#include "AndroidDatabaseSqliteSQLiteConnectionPool.h"
#include "AndroidDatabaseSqliteSQLiteCursorDriver.h"
#include "AndroidDatabaseSqliteSQLiteCustomFunction.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteDatabaseConfiguration.h"
#include "AndroidDatabaseSqliteSQLiteDatabaseCorruptException.h"
#include "AndroidDatabaseSqliteSQLiteDirectCursorDriver.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "AndroidDatabaseSqliteSQLiteGlobal.h"
#include "AndroidDatabaseSqliteSQLiteQueryBuilder.h"
#include "AndroidDatabaseSqliteSQLiteSession.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "AndroidDatabaseSqliteSQLiteTransactionListener.h"
#include "AndroidOsCancellationSignal.h"
#include "AndroidOsLooper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "android/util/Pair.h"
#include "android/util/Printer.h"
#include "dalvik/system/CloseGuard.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidDatabaseSqliteSQLiteDatabase () {
 @public
  JavaLangThreadLocal *mThreadSession_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mCursorFactory_;
  id<AndroidDatabaseDatabaseErrorHandler> mErrorHandler_;
  id mLock_;
  DalvikSystemCloseGuard *mCloseGuardLocked_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfigurationLocked_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mConnectionPoolLocked_;
  jboolean mHasAttachedDbsLocked_;
}

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (void)disposeWithBoolean:(jboolean)finalized;

+ (jboolean)isMainThread;

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive;

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay;

- (void)open;

- (void)openInner;

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)isReadOnlyLocked;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

+ (JavaUtilArrayList *)getActiveDatabases;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

- (void)throwIfNotOpenLocked;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mThreadSession_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCursorFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mErrorHandler_, id<AndroidDatabaseDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCloseGuardLocked_, DalvikSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConfigurationLocked_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConnectionPoolLocked_, AndroidDatabaseSqliteSQLiteConnectionPool *)

inline NSString *AndroidDatabaseSqliteSQLiteDatabase_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteDatabase_TAG = @"SQLiteDatabase";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, TAG, NSString *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_EVENT_DB_CORRUPT();
#define AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT 75004
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, EVENT_DB_CORRUPT, jint)

inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_get_sActiveDatabases();
inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_set_sActiveDatabases(JavaUtilWeakHashMap *value);
static JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases;
J2OBJC_STATIC_FIELD_OBJ(AndroidDatabaseSqliteSQLiteDatabase, sActiveDatabases, JavaUtilWeakHashMap *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_VALUES();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_OPEN_READ_MASK();
#define AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, OPEN_READ_MASK, jint)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread();

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList);

__attribute__((unused)) static JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases();

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$0();

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$1();

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$2();

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$3();

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$4();

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$5();

@interface AndroidDatabaseSqliteSQLiteDatabase_1 : JavaLangThreadLocal {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *this$0_;
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$;

- (AndroidDatabaseSqliteSQLiteSession *)initialValue OBJC_METHOD_FAMILY_NONE;

- (AndroidDatabaseSqliteSQLiteSession *)get;

- (AndroidDatabaseSqliteSQLiteSession *)childValueWithId:(AndroidDatabaseSqliteSQLiteSession *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_1)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_1 *new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_1 *create_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$);

@interface AndroidDatabaseSqliteSQLiteDatabase_2 : NSObject < JavaIoFileFilter > {
 @public
  NSString *val$prefix_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_2)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_2 *self, NSString *capture$0);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_2 *new_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_2 *create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0);

@interface AndroidDatabaseSqliteSQLiteDatabase_CursorFactory : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteDatabase_CustomFunction : NSObject

@end

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase

+ (jint)CONFLICT_ROLLBACK {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK;
}

+ (jint)CONFLICT_ABORT {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT;
}

+ (jint)CONFLICT_FAIL {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL;
}

+ (jint)CONFLICT_IGNORE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE;
}

+ (jint)CONFLICT_REPLACE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE;
}

+ (jint)CONFLICT_NONE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE;
}

+ (jint)SQLITE_MAX_LIKE_PATTERN_LENGTH {
  return AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH;
}

+ (jint)OPEN_READWRITE {
  return AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE;
}

+ (jint)OPEN_READONLY {
  return AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY;
}

+ (jint)NO_LOCALIZED_COLLATORS {
  return AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS;
}

+ (jint)CREATE_IF_NECESSARY {
  return AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY;
}

+ (jint)ENABLE_WRITE_AHEAD_LOGGING {
  return AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
}

+ (jint)MAX_SQL_CACHE_SIZE {
  return AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE;
}

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(self, path, openFlags, cursorFactory, errorHandler);
  return self;
}

- (void)java_finalize {
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

- (void)onAllReferencesReleased {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, finalized);
}

+ (jint)releaseMemory {
  return AndroidDatabaseSqliteSQLiteDatabase_releaseMemory();
}

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled {
}

- (NSString *)getLabel {
  @synchronized(mLock_) {
    return JreRetainedLocalValue(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->label_);
  }
}

- (void)onCorruption {
  [((id<AndroidDatabaseDatabaseErrorHandler>) nil_chk(mErrorHandler_)) onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:self];
}

- (AndroidDatabaseSqliteSQLiteSession *)getThreadSession {
  return [((JavaLangThreadLocal *) nil_chk(mThreadSession_)) get];
}

- (AndroidDatabaseSqliteSQLiteSession *)createSession {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    pool = JreRetainedLocalValue(mConnectionPoolLocked_);
  }
  return create_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(pool);
}

- (jint)getThreadDefaultConnectionFlagsWithBoolean:(jboolean)readOnly {
  jint flags = readOnly ? AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY : AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
  if (AndroidDatabaseSqliteSQLiteDatabase_isMainThread()) {
    flags |= AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE;
  }
  return flags;
}

+ (jboolean)isMainThread {
  return AndroidDatabaseSqliteSQLiteDatabase_isMainThread();
}

- (void)beginTransaction {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, true);
}

- (void)beginTransactionNonExclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, false);
}

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, true);
}

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, false);
}

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, exclusive);
}

- (void)endTransaction {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) endTransactionWithAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

- (void)setTransactionSuccessful {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) setTransactionSuccessful];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)inTransaction {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByCurrentThread {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasConnection];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByOtherThreads {
  return false;
}

- (jboolean)yieldIfContended {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, false, -1);
}

- (jboolean)yieldIfContendedSafely {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, -1);
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, sleepAfterYieldDelay);
}

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, throwIfUnsafe, sleepAfterYieldDelay);
}

- (id<JavaUtilMap>)getSyncedTables {
  return create_JavaUtilHashMap_initWithInt_(0);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(path, factory, flags);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags
                          withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, errorHandler);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                      withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(file, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(path, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, factory, errorHandler);
}

+ (jboolean)deleteDatabaseWithJavaIoFile:(JavaIoFile *)file {
  return AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(file);
}

- (void)reopenReadWrite {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (!AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return;
    }
    jint oldOpenFlags = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_;
    mConfigurationLocked_->openFlags_ = (mConfigurationLocked_->openFlags_ & ~AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) | AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ = oldOpenFlags;
      @throw ex;
    }
  }
}

- (void)open {
  AndroidDatabaseSqliteSQLiteDatabase_open(self);
}

- (void)openInner {
  AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(factory);
}

- (void)addCustomFunctionWithNSString:(NSString *)name
                              withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)function {
  AndroidDatabaseSqliteSQLiteCustomFunction *wrapper = create_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(name, numArgs, function);
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->customFunctions_)) addWithId:wrapper];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      [mConfigurationLocked_->customFunctions_ removeWithId:wrapper];
      @throw ex;
    }
  }
}

- (jint)getVersion {
  return [JavaLangLong_valueOfWithLong_(AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA user_version;", nil)) intValue];
}

- (void)setVersionWithInt:(jint)version_ {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", version_)];
}

- (jlong)getMaximumSize {
  jlong pageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA max_page_count;", nil);
  return pageCount * [self getPageSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  jlong pageSize = [self getPageSize];
  jlong numPages = numBytes / pageSize;
  if ((numBytes % pageSize) != 0) {
    numPages++;
  }
  jlong newPageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, JreStrcat("$J", @"PRAGMA max_page_count = ", numPages), nil);
  return newPageCount * pageSize;
}

- (jlong)getPageSize {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA page_size;", nil);
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [self execSQLWithNSString:JreStrcat("$J", @"PRAGMA page_size = ", numBytes)];
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable {
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable {
}

+ (NSString *)findEditTableWithNSString:(NSString *)tables {
  return AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(tables);
}

- (AndroidDatabaseSqliteSQLiteStatement *)compileStatementWithNSString:(NSString *)sql {
  [self acquireReference];
  @try {
    return create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, nil);
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:cancellationSignal];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit
                                                                   withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  [self acquireReference];
  @try {
    NSString *sql = AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, table, columns, selection, groupBy, having, orderBy, limit);
    return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(table) withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:nil];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy
                                  withNSString:(NSString *)limit {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs
                  withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil withAndroidOsCancellationSignal:cancellationSignal];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:editTable withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable
                                                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  [self acquireReference];
  @try {
    id<AndroidDatabaseSqliteSQLiteCursorDriver> driver = create_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(self, sql, editTable, cancellationSignal);
    return [driver queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory != nil ? cursorFactory : mCursorFactory_ withNSStringArray:selectionArgs];
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", values), e);
    return -1;
  }
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", initialValues), e);
    return -1;
  }
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = create_JavaLangStringBuilder_init();
    [sql appendWithNSString:@"INSERT"];
    [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    [sql appendWithNSString:@" INTO "];
    [sql appendWithNSString:table];
    [sql appendWithChar:'('];
    IOSObjectArray *bindArgs = nil;
    jint size = (initialValues != nil && [initialValues size] > 0) ? [((AndroidContentContentValues *) nil_chk(initialValues)) size] : 0;
    if (size > 0) {
      bindArgs = [IOSObjectArray arrayWithLength:size type:NSObject_class_()];
      jint i = 0;
      for (NSString * __strong colName in nil_chk([((AndroidContentContentValues *) nil_chk(initialValues)) keySet])) {
        [sql appendWithNSString:(i > 0) ? @"," : @""];
        [sql appendWithNSString:colName];
        IOSObjectArray_Set(bindArgs, i++, [initialValues getWithNSString:colName]);
      }
      [sql appendWithChar:')'];
      [sql appendWithNSString:@" VALUES ("];
      for (i = 0; i < size; i++) {
        [sql appendWithNSString:(i > 0) ? @",?" : @"?"];
      }
    }
    else {
      [sql appendWithNSString:JreStrcat("$$", nullColumnHack, @") VALUES (NULL")];
    }
    [sql appendWithChar:')'];
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeInsert];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  [self acquireReference];
  @try {
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, JreStrcat("$$$", @"DELETE FROM ", table, (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @"")), whereArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self updateWithOnConflictWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  if (values == nil || [values size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = create_JavaLangStringBuilder_initWithInt_(120);
    [sql appendWithNSString:@"UPDATE "];
    [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    [sql appendWithNSString:table];
    [sql appendWithNSString:@" SET "];
    jint setValuesSize = [values size];
    jint bindArgsSize = (whereArgs == nil) ? setValuesSize : (setValuesSize + ((IOSObjectArray *) nil_chk(whereArgs))->size_);
    IOSObjectArray *bindArgs = [IOSObjectArray arrayWithLength:bindArgsSize type:NSObject_class_()];
    jint i = 0;
    for (NSString * __strong colName in nil_chk([values keySet])) {
      [sql appendWithNSString:(i > 0) ? @"," : @""];
      [sql appendWithNSString:colName];
      IOSObjectArray_Set(bindArgs, i++, [values getWithNSString:colName]);
      [sql appendWithNSString:@"=?"];
    }
    if (whereArgs != nil) {
      for (i = setValuesSize; i < bindArgsSize; i++) {
        IOSObjectArray_Set(bindArgs, i, IOSObjectArray_Get(whereArgs, i - setValuesSize));
      }
    }
    if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause)) {
      [sql appendWithNSString:@" WHERE "];
      [sql appendWithNSString:whereClause];
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (void)execSQLWithNSString:(NSString *)sql {
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, nil);
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (bindArgs == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty bindArgs");
  }
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs {
  return AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jboolean)isReadOnly {
  @synchronized(mLock_) {
    return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
  }
}

- (jboolean)isReadOnlyLocked {
  return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
}

- (jboolean)isInMemoryDatabase {
  @synchronized(mLock_) {
    return [((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_)) isInMemoryDb];
  }
}

- (jboolean)isOpen {
  @synchronized(mLock_) {
    return mConnectionPoolLocked_ != nil;
  }
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return newVersion > [self getVersion];
}

- (NSString *)getPath {
  return AndroidDatabaseSqliteSQLiteDatabase_getPath(self);
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"locale must not be null.");
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    JavaUtilLocale *oldLocale = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->locale_;
    JreStrongAssign(&mConfigurationLocked_->locale_, locale);
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      JreStrongAssign(&mConfigurationLocked_->locale_, oldLocale);
      @throw ex;
    }
  }
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  if (cacheSize > AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE || cacheSize < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"expected value between 0 and ", AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE));
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    jint oldMaxSqlCacheSize = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->maxSqlCacheSize_;
    mConfigurationLocked_->maxSqlCacheSize_ = cacheSize;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->maxSqlCacheSize_ = oldMaxSqlCacheSize;
      @throw ex;
    }
  }
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->foreignKeyConstraintsEnabled_ == enable) {
      return;
    }
    mConfigurationLocked_->foreignKeyConstraintsEnabled_ = enable;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->foreignKeyConstraintsEnabled_ = !enable;
      @throw ex;
    }
  }
}

- (jboolean)enableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      return true;
    }
    if (AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return false;
    }
    if ([mConfigurationLocked_ isInMemoryDb]) {
      AndroidUtilLog_iWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, @"can't enable WAL for memory databases.");
      return false;
    }
    if (mHasAttachedDbsLocked_) {
      if (AndroidUtilLog_isLoggableWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabase_TAG, AndroidUtilLog_DEBUG)) {
        AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"this database: ", mConfigurationLocked_->label_, @" has attached databases. can't  enable WAL."));
      }
      return false;
    }
    mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
  return true;
}

- (void)disableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) == 0) {
      return;
    }
    mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
}

- (jboolean)isWriteAheadLoggingEnabled {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  }
}

+ (JavaUtilArrayList *)getDbStats {
  return AndroidDatabaseSqliteSQLiteDatabase_getDbStats();
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(self, dbStatsList);
}

+ (JavaUtilArrayList *)getActiveDatabases {
  return AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases();
}

+ (void)dumpAllWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                          withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(printer, verbose);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(self, printer, verbose);
}

- (id<JavaUtilList>)getAttachedDbs {
  JavaUtilArrayList *attachedDbs = create_JavaUtilArrayList_init();
  @synchronized(mLock_) {
    if (mConnectionPoolLocked_ == nil) {
      return JreRetainedLocalValue(nil);
    }
    if (!mHasAttachedDbsLocked_) {
      [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_(@"main", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->path_)];
      return JreRetainedLocalValue(attachedDbs);
    }
    [self acquireReference];
  }
  @try {
    id<AndroidDatabaseCursor> c = nil;
    @try {
      c = [self rawQueryWithNSString:@"pragma database_list;" withNSStringArray:nil];
      while ([((id<AndroidDatabaseCursor>) nil_chk(c)) moveToNext]) {
        [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_([c getStringWithInt:1], [c getStringWithInt:2])];
      }
    }
    @finally {
      if (c != nil) {
        [c close];
      }
    }
    return attachedDbs;
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDatabaseIntegrityOk {
  [self acquireReference];
  @try {
    id<JavaUtilList> attachedDbs = nil;
    @try {
      attachedDbs = [self getAttachedDbs];
      if (attachedDbs == nil) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"databaselist for: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self), @" couldn't be retrieved. probably because the database is closed"));
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      attachedDbs = create_JavaUtilArrayList_init();
      [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_(@"main", AndroidDatabaseSqliteSQLiteDatabase_getPath(self))];
    }
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(attachedDbs)) size]; i++) {
      AndroidUtilPair *p = [attachedDbs getWithInt:i];
      AndroidDatabaseSqliteSQLiteStatement *prog = nil;
      @try {
        prog = [self compileStatementWithNSString:JreStrcat("$$$", @"PRAGMA ", ((AndroidUtilPair *) nil_chk(p))->first_, @".integrity_check(1);")];
        NSString *rslt = [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) simpleQueryForString];
        if (![((NSString *) nil_chk(rslt)) java_equalsIgnoreCase:@"ok"]) {
          AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$$", @"PRAGMA integrity_check on ", p->second_, @" returned: ", rslt));
          return false;
        }
      }
      @finally {
        if (prog != nil) [prog close];
      }
    }
  }
  @finally {
    [self releaseReference];
  }
  return true;
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDatabase: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self));
}

- (void)throwIfNotOpenLocked {
  AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteDatabase class]);
  RELEASE_(mThreadSession_);
  RELEASE_(mCursorFactory_);
  RELEASE_(mErrorHandler_);
  RELEASE_(mLock_);
  RELEASE_(mCloseGuardLocked_);
  RELEASE_(mConfigurationLocked_);
  RELEASE_(mConnectionPoolLocked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, 6, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 19, 20, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 21, 23, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 26, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 36, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, 40, -1 },
    { NULL, "V", 0x1, 38, 41, -1, -1, 42, -1 },
    { NULL, "LNSString;", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteStatement;", 0x1, 45, 44, 46, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 49, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 50, 52, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 53, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 54, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 55, 57, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 58, 60, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 63, 62, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 64, 62, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 65, 62, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 70, 71, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 44, 46, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, 46, -1, -1, -1 },
    { NULL, "I", 0x2, 76, 75, 46, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 77, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x8, -1, -1, -1, 82, -1, -1 },
    { NULL, "V", 0x2, 83, 84, -1, 85, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, -1, -1, -1, 86, -1, -1 },
    { NULL, "V", 0x8, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 88, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 90, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 91, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[1].selector = @selector(java_finalize);
  methods[2].selector = @selector(onAllReferencesReleased);
  methods[3].selector = @selector(disposeWithBoolean:);
  methods[4].selector = @selector(releaseMemory);
  methods[5].selector = @selector(setLockingEnabledWithBoolean:);
  methods[6].selector = @selector(getLabel);
  methods[7].selector = @selector(onCorruption);
  methods[8].selector = @selector(getThreadSession);
  methods[9].selector = @selector(createSession);
  methods[10].selector = @selector(getThreadDefaultConnectionFlagsWithBoolean:);
  methods[11].selector = @selector(isMainThread);
  methods[12].selector = @selector(beginTransaction);
  methods[13].selector = @selector(beginTransactionNonExclusive);
  methods[14].selector = @selector(beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[15].selector = @selector(beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[16].selector = @selector(beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:withBoolean:);
  methods[17].selector = @selector(endTransaction);
  methods[18].selector = @selector(setTransactionSuccessful);
  methods[19].selector = @selector(inTransaction);
  methods[20].selector = @selector(isDbLockedByCurrentThread);
  methods[21].selector = @selector(isDbLockedByOtherThreads);
  methods[22].selector = @selector(yieldIfContended);
  methods[23].selector = @selector(yieldIfContendedSafely);
  methods[24].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[25].selector = @selector(yieldIfContendedHelperWithBoolean:withLong:);
  methods[26].selector = @selector(getSyncedTables);
  methods[27].selector = @selector(openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:);
  methods[28].selector = @selector(openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:);
  methods[29].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[30].selector = @selector(openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[31].selector = @selector(openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[32].selector = @selector(deleteDatabaseWithJavaIoFile:);
  methods[33].selector = @selector(reopenReadWrite);
  methods[34].selector = @selector(open);
  methods[35].selector = @selector(openInner);
  methods[36].selector = @selector(createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[37].selector = @selector(addCustomFunctionWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:);
  methods[38].selector = @selector(getVersion);
  methods[39].selector = @selector(setVersionWithInt:);
  methods[40].selector = @selector(getMaximumSize);
  methods[41].selector = @selector(setMaximumSizeWithLong:);
  methods[42].selector = @selector(getPageSize);
  methods[43].selector = @selector(setPageSizeWithLong:);
  methods[44].selector = @selector(markTableSyncableWithNSString:withNSString:);
  methods[45].selector = @selector(markTableSyncableWithNSString:withNSString:withNSString:);
  methods[46].selector = @selector(findEditTableWithNSString:);
  methods[47].selector = @selector(compileStatementWithNSString:);
  methods[48].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[49].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[50].selector = @selector(queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[51].selector = @selector(queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[52].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[53].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[54].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[55].selector = @selector(rawQueryWithNSString:withNSStringArray:withAndroidOsCancellationSignal:);
  methods[56].selector = @selector(rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:);
  methods[57].selector = @selector(rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:withAndroidOsCancellationSignal:);
  methods[58].selector = @selector(insertWithNSString:withNSString:withAndroidContentContentValues:);
  methods[59].selector = @selector(insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[60].selector = @selector(replaceWithNSString:withNSString:withAndroidContentContentValues:);
  methods[61].selector = @selector(replaceOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[62].selector = @selector(insertWithOnConflictWithNSString:withNSString:withAndroidContentContentValues:withInt:);
  methods[63].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[64].selector = @selector(updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:);
  methods[65].selector = @selector(updateWithOnConflictWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:withInt:);
  methods[66].selector = @selector(execSQLWithNSString:);
  methods[67].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[68].selector = @selector(executeSqlWithNSString:withNSObjectArray:);
  methods[69].selector = @selector(isReadOnly);
  methods[70].selector = @selector(isReadOnlyLocked);
  methods[71].selector = @selector(isInMemoryDatabase);
  methods[72].selector = @selector(isOpen);
  methods[73].selector = @selector(needUpgradeWithInt:);
  methods[74].selector = @selector(getPath);
  methods[75].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[76].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[77].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[78].selector = @selector(enableWriteAheadLogging);
  methods[79].selector = @selector(disableWriteAheadLogging);
  methods[80].selector = @selector(isWriteAheadLoggingEnabled);
  methods[81].selector = @selector(getDbStats);
  methods[82].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[83].selector = @selector(getActiveDatabases);
  methods[84].selector = @selector(dumpAllWithAndroidUtilPrinter:withBoolean:);
  methods[85].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  methods[86].selector = @selector(getAttachedDbs);
  methods[87].selector = @selector(isDatabaseIntegrityOk);
  methods[88].selector = @selector(description);
  methods[89].selector = @selector(throwIfNotOpenLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 92, -1, -1 },
    { "EVENT_DB_CORRUPT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT, 0x1a, -1, -1, -1, -1 },
    { "sActiveDatabases", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0xa, -1, 93, 94, -1 },
    { "mThreadSession_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 95, -1 },
    { "mCursorFactory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mErrorHandler_", "LAndroidDatabaseDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCloseGuardLocked_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfigurationLocked_", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPoolLocked_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasAttachedDbsLocked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CONFLICT_ROLLBACK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_ABORT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_FAIL", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_IGNORE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_REPLACE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_NONE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_VALUES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 96, -1, -1 },
    { "SQLITE_MAX_LIKE_PATTERN_LENGTH", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH, 0x19, -1, -1, -1, -1 },
    { "OPEN_READWRITE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE, 0x19, -1, -1, -1, -1 },
    { "OPEN_READONLY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY, 0x19, -1, -1, -1, -1 },
    { "OPEN_READ_MASK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK, 0x1a, -1, -1, -1, -1 },
    { "NO_LOCALIZED_COLLATORS", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS, 0x19, -1, -1, -1, -1 },
    { "CREATE_IF_NECESSARY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, 0x19, -1, -1, -1, -1 },
    { "ENABLE_WRITE_AHEAD_LOGGING", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING, 0x19, -1, -1, -1, -1 },
    { "MAX_SQL_CACHE_SIZE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "finalize", "LJavaLangThrowable;", "dispose", "Z", "setLockingEnabled", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$0, "getThreadDefaultConnectionFlags", "beginTransactionWithListener", "LAndroidDatabaseSqliteSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "beginTransaction", "LAndroidDatabaseSqliteSQLiteTransactionListener;Z", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$1, (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$2, "yieldIfContendedSafely", "J", "yieldIfContendedHelper", "ZJ", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$3, "openDatabase", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;I", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;", "openOrCreateDatabase", "LJavaIoFile;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "deleteDatabase", "LJavaIoFile;", "create", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "addCustomFunction", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;", "setVersion", "I", "setMaximumSize", "setPageSize", "markTableSyncable", "LNSString;LNSString;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$4, "LNSString;LNSString;LNSString;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$5, "findEditTable", "LNSString;", "compileStatement", "LAndroidDatabaseSQLException;", "query", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LAndroidOsCancellationSignal;", "queryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LAndroidOsCancellationSignal;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "rawQuery", "LNSString;[LNSString;", "LNSString;[LNSString;LAndroidOsCancellationSignal;", "rawQueryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;LAndroidOsCancellationSignal;", "insert", "LNSString;LNSString;LAndroidContentContentValues;", "insertOrThrow", "replace", "replaceOrThrow", "insertWithOnConflict", "LNSString;LNSString;LAndroidContentContentValues;I", "delete", "LNSString;LNSString;[LNSString;", "update", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;", "updateWithOnConflict", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;I", "execSQL", "LNSString;[LNSObject;", "executeSql", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V", "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDatabase;>;", "dumpAll", "LAndroidUtilPrinter;Z", "dump", "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "toString", &AndroidDatabaseSqliteSQLiteDatabase_TAG, &AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases, "Ljava/util/WeakHashMap<Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/Object;>;", "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;", &AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES, "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase = { "SQLiteDatabase", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 90, 26, -1, 97, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDatabase class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases, new_JavaUtilWeakHashMap_init());
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDatabase)
  }
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  JreStrongAssignAndConsume(&self->mThreadSession_, new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self));
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssign(&self->mCloseGuardLocked_, DalvikSystemCloseGuard_get());
  JreStrongAssign(&self->mCursorFactory_, cursorFactory);
  JreStrongAssign(&self->mErrorHandler_, errorHandler != nil ? errorHandler : create_AndroidDatabaseDefaultDatabaseErrorHandler_init());
  JreStrongAssignAndConsume(&self->mConfigurationLocked_, new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(path, openFlags));
}

AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized) {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(self->mLock_) {
    if (self->mCloseGuardLocked_ != nil) {
      if (finalized) {
        [self->mCloseGuardLocked_ warnIfOpen];
      }
      [self->mCloseGuardLocked_ close];
    }
    pool = JreRetainedLocalValue(self->mConnectionPoolLocked_);
    JreStrongAssign(&self->mConnectionPoolLocked_, nil);
  }
  if (!finalized) {
    @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
      [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) removeWithId:self];
    }
    if (pool != nil) {
      [pool close];
    }
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_releaseMemory() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteGlobal_releaseMemory();
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidOsLooper *looper = AndroidOsLooper_myLooper();
  return looper != nil && looper == AndroidOsLooper_getMainLooper();
}

void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive) {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) beginTransactionWithInt:exclusive ? AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE : AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE withAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener withInt:[self getThreadDefaultConnectionFlagsWithBoolean:false] withAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay) {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) yieldTransactionWithLong:sleepAfterYieldDelay withBoolean:throwIfUnsafe withAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidDatabaseSqliteSQLiteDatabase *db = create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, flags, factory, errorHandler);
  AndroidDatabaseSqliteSQLiteDatabase_open(db);
  return db;
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(JavaIoFile *file, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_([((JavaIoFile *) nil_chk(file)) getPath], factory);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, errorHandler);
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(JavaIoFile *file) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (file == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"file must not be null");
  }
  jboolean deleted = false;
  deleted |= [file delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-journal")) delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-shm")) delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-wal")) delete__];
  JavaIoFile *dir = [file getParentFile];
  if (dir != nil) {
    NSString *prefix = JreStrcat("$$", [file getName], @"-mj");
    IOSObjectArray *files = [dir listFilesWithJavaIoFileFilter:create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(prefix)];
    if (files != nil) {
      {
        IOSObjectArray *a__ = files;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *masterJournal = *b__++;
          deleted |= [((JavaIoFile *) nil_chk(masterJournal)) delete__];
        }
      }
    }
  }
  return deleted;
}

void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @try {
    @try {
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"Failed to open database '", [self getLabel], @"'."), ex);
    [self close];
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    JreAssert(self->mConnectionPoolLocked_ == nil, @"android/database/sqlite/SQLiteDatabase.java:803 condition failed: assert mConnectionPoolLocked == null;");
    JreStrongAssign(&self->mConnectionPoolLocked_, AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(self->mConfigurationLocked_));
    [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuardLocked_)) openWithNSString:@"close"];
  }
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) putWithId:self withId:nil];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY);
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(NSString *tables) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(tables)) {
    jint spacepos = [((NSString *) nil_chk(tables)) java_indexOf:' '];
    jint commapos = [tables java_indexOf:','];
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return [tables java_substring:0 endIndex:spacepos];
    }
    else if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return [tables java_substring:0 endIndex:commapos];
    }
    return tables;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Invalid tables");
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs) {
  [self acquireReference];
  @try {
    if (AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql) == AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH) {
      jboolean disableWal = false;
      @synchronized(self->mLock_) {
        if (!self->mHasAttachedDbsLocked_) {
          self->mHasAttachedDbsLocked_ = true;
          disableWal = true;
        }
      }
      if (disableWal) {
        [self disableWriteAheadLogging];
      }
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) == AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY;
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    return JreRetainedLocalValue(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->path_);
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getDbStats() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *dbStatsList = create_JavaUtilArrayList_init();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(nil_chk(db), dbStatsList);
  }
  return dbStatsList;
}

void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [self->mConnectionPoolLocked_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *databases = create_JavaUtilArrayList_init();
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    [databases addAllWithJavaUtilCollection:[((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) keySet]];
  }
  return databases;
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(id<AndroidUtilPrinter> printer, jboolean verbose) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(nil_chk(db), printer, verbose);
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@""];
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPoolLocked_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
    }
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  if (self->mConnectionPoolLocked_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"The database '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->label_, @"' is not open."));
  }
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase_1

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$ {
  AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, outer$);
  return self;
}

- (AndroidDatabaseSqliteSQLiteSession *)initialValue {
  return [this$0_ createSession];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_1 = { "", "android.database.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, 1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_1;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThreadLocal_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_1 *new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

AndroidDatabaseSqliteSQLiteDatabase_1 *create_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

@implementation AndroidDatabaseSqliteSQLiteDatabase_2

- (instancetype)initWithNSString:(NSString *)capture$0 {
  AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate {
  return [((NSString *) nil_chk([((JavaIoFile *) nil_chk(candidate)) getName])) java_hasPrefix:val$prefix_];
}

- (void)dealloc {
  RELEASE_(val$prefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$prefix_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaIoFile;", "LAndroidDatabaseSqliteSQLiteDatabase;", "deleteDatabaseWithJavaIoFile:" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_2 = { "", "android.database.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_2;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_2 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$prefix_, capture$0);
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_2 *new_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_2, initWithNSString_, capture$0)
}

AndroidDatabaseSqliteSQLiteDatabase_2 *create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_2, initWithNSString_, capture$0)
}

@implementation AndroidDatabaseSqliteSQLiteDatabase_CursorFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidDatabaseCursor;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "LAndroidDatabaseSqliteSQLiteDatabase;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CursorFactory = { "CursorFactory", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CursorFactory)

@implementation AndroidDatabaseSqliteSQLiteDatabase_CustomFunction

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callbackWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "callback", "[LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CustomFunction = { "CustomFunction", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CustomFunction;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CustomFunction)
