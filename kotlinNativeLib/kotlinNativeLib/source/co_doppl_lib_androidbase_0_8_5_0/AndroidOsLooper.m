//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "AndroidOsMessage.h"
#include "AndroidOsMessageQueue.h"
#include "J2ObjC_source.h"
#include "android/util/Printer.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"

@interface AndroidOsLooper () {
 @public
  id<AndroidUtilPrinter> mLogging_;
}

+ (void)setMainLooperWithAndroidOsLooper:(AndroidOsLooper *)looper;

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidOsLooper, mLogging_, id<AndroidUtilPrinter>)

inline NSString *AndroidOsLooper_get_TAG();
static NSString *AndroidOsLooper_TAG = @"Looper";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsLooper, TAG, NSString *)

inline AndroidOsLooper *AndroidOsLooper_get_mMainLooper();
inline AndroidOsLooper *AndroidOsLooper_set_mMainLooper(AndroidOsLooper *value);
static AndroidOsLooper *AndroidOsLooper_mMainLooper;
J2OBJC_STATIC_FIELD_OBJ(AndroidOsLooper, mMainLooper, AndroidOsLooper *)

__attribute__((unused)) static void AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper *looper);

__attribute__((unused)) static void AndroidOsLooper_init(AndroidOsLooper *self);

__attribute__((unused)) static AndroidOsLooper *new_AndroidOsLooper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsLooper *create_AndroidOsLooper_init();

@interface AndroidOsLooper_Profiler : NSObject

@end

J2OBJC_INITIALIZED_DEFN(AndroidOsLooper)

JavaLangThreadLocal *AndroidOsLooper_sThreadLocal;

@implementation AndroidOsLooper

+ (JavaLangThreadLocal *)sThreadLocal {
  return AndroidOsLooper_sThreadLocal;
}

+ (void)prepare {
  AndroidOsLooper_prepare();
}

+ (void)prepareMainLooper {
  AndroidOsLooper_prepareMainLooper();
}

+ (void)setMainLooperWithAndroidOsLooper:(AndroidOsLooper *)looper {
  AndroidOsLooper_setMainLooperWithAndroidOsLooper_(looper);
}

+ (AndroidOsLooper *)getMainLooper {
  return AndroidOsLooper_getMainLooper();
}

- (void)nudge {
  AndroidOsLooper_loop();
}

+ (void)loop {
  AndroidOsLooper_loop();
}

+ (AndroidOsLooper *)myLooper {
  return AndroidOsLooper_myLooper();
}

- (void)setMessageLoggingWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer {
  JreStrongAssign(&mLogging_, printer);
}

+ (AndroidOsMessageQueue *)myQueue {
  return AndroidOsLooper_myQueue();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidOsLooper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)quit {
  AndroidOsMessage *msg = AndroidOsMessage_obtain();
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) enqueueMessageWithAndroidOsMessage:msg withLong:0];
}

- (JavaLangThread *)getThread {
  return mThread_;
}

- (AndroidOsMessageQueue *)getQueue {
  return mQueue_;
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)pw
                      withNSString:(NSString *)prefix {
}

- (NSString *)description {
  return JreStrcat("$$C", @"Looper{", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self)), '}');
}

- (void)dealloc {
  RELEASE_(mQueue_);
  RELEASE_(mThread_);
  RELEASE_(mLogging_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2a, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessageQueue;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessageQueue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(prepare);
  methods[1].selector = @selector(prepareMainLooper);
  methods[2].selector = @selector(setMainLooperWithAndroidOsLooper:);
  methods[3].selector = @selector(getMainLooper);
  methods[4].selector = @selector(nudge);
  methods[5].selector = @selector(loop);
  methods[6].selector = @selector(myLooper);
  methods[7].selector = @selector(setMessageLoggingWithAndroidUtilPrinter:);
  methods[8].selector = @selector(myQueue);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(quit);
  methods[11].selector = @selector(getThread);
  methods[12].selector = @selector(getQueue);
  methods[13].selector = @selector(dumpWithAndroidUtilPrinter:withNSString:);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "sThreadLocal", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x18, -1, 8, 9, -1 },
    { "mQueue_", "LAndroidOsMessageQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mRun_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "mLogging_", "LAndroidUtilPrinter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMainLooper", "LAndroidOsLooper;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "setMainLooper", "LAndroidOsLooper;", "setMessageLogging", "LAndroidUtilPrinter;", "dump", "LAndroidUtilPrinter;LNSString;", "toString", &AndroidOsLooper_TAG, &AndroidOsLooper_sThreadLocal, "Ljava/lang/ThreadLocal<Landroid/os/Looper;>;", &AndroidOsLooper_mMainLooper, "LAndroidOsLooper_Profiler;" };
  static const J2ObjcClassInfo _AndroidOsLooper = { "Looper", "android.os", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, 11, -1, -1, -1 };
  return &_AndroidOsLooper;
}

+ (void)initialize {
  if (self == [AndroidOsLooper class]) {
    JreStrongAssignAndConsume(&AndroidOsLooper_sThreadLocal, new_JavaLangThreadLocal_init());
    JreStrongAssign(&AndroidOsLooper_mMainLooper, nil);
    J2OBJC_SET_INITIALIZED(AndroidOsLooper)
  }
}

@end

void AndroidOsLooper_prepare() {
  AndroidOsLooper_initialize();
  if ([((JavaLangThreadLocal *) nil_chk(AndroidOsLooper_sThreadLocal)) get] != nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Only one Looper may be created per thread");
  }
  [AndroidOsLooper_sThreadLocal setWithId:create_AndroidOsLooper_init()];
}

void AndroidOsLooper_prepareMainLooper() {
  AndroidOsLooper_initialize();
  AndroidOsLooper_prepare();
  AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper_myLooper());
  ((AndroidOsMessageQueue *) nil_chk(((AndroidOsLooper *) nil_chk(AndroidOsLooper_myLooper()))->mQueue_))->mQuitAllowed_ = false;
}

void AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper *looper) {
  AndroidOsLooper_initialize();
  @synchronized(AndroidOsLooper_class_()) {
    JreStrongAssign(&AndroidOsLooper_mMainLooper, looper);
  }
}

AndroidOsLooper *AndroidOsLooper_getMainLooper() {
  AndroidOsLooper_initialize();
  @synchronized(AndroidOsLooper_class_()) {
    return JreRetainedLocalValue(AndroidOsLooper_mMainLooper);
  }
}

void AndroidOsLooper_loop() {
  AndroidOsLooper_initialize();
  AndroidOsLooper *me = AndroidOsLooper_myLooper();
  if (me == nil) {
    AndroidOsLooper_prepare();
    me = AndroidOsLooper_myLooper();
  }
  AndroidOsMessageQueue *queue = ((AndroidOsLooper *) nil_chk(me))->mQueue_;
  while (true) {
    AndroidOsMessage *msg = [((AndroidOsMessageQueue *) nil_chk(queue)) next];
    if (msg == nil) {
      return;
    }
    else {
      if (msg->target_ == nil) {
        return;
      }
      jlong wallStart = 0;
      jlong threadStart = 0;
      [msg->target_ dispatchMessageWithAndroidOsMessage:msg];
      [msg recycle];
    }
  }
}

AndroidOsLooper *AndroidOsLooper_myLooper() {
  AndroidOsLooper_initialize();
  return [((JavaLangThreadLocal *) nil_chk(AndroidOsLooper_sThreadLocal)) get];
}

AndroidOsMessageQueue *AndroidOsLooper_myQueue() {
  AndroidOsLooper_initialize();
  return ((AndroidOsLooper *) nil_chk(AndroidOsLooper_myLooper()))->mQueue_;
}

void AndroidOsLooper_init(AndroidOsLooper *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mLogging_, nil);
  JreStrongAssignAndConsume(&self->mQueue_, new_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(self));
  JreAssignVolatileBoolean(&self->mRun_, true);
  JreStrongAssign(&self->mThread_, JavaLangThread_currentThread());
}

AndroidOsLooper *new_AndroidOsLooper_init() {
  J2OBJC_NEW_IMPL(AndroidOsLooper, init)
}

AndroidOsLooper *create_AndroidOsLooper_init() {
  J2OBJC_CREATE_IMPL(AndroidOsLooper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsLooper)

@implementation AndroidOsLooper_Profiler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(profileWithAndroidOsMessage:withLong:withLong:withLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "profile", "LAndroidOsMessage;JJJJ", "LAndroidOsLooper;" };
  static const J2ObjcClassInfo _AndroidOsLooper_Profiler = { "Profiler", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidOsLooper_Profiler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsLooper_Profiler)
