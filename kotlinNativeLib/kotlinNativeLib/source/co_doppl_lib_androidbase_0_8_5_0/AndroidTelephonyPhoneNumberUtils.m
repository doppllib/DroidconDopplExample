//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidTelephonyJapanesePhoneNumberFormatter.h"
#include "AndroidTelephonyPhoneNumberUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/text/Editable.h"
#include "android/text/SpannableStringBuilder.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "android/util/SparseIntArray.h"
#include "java/lang/CharSequence.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;

@interface AndroidTelephonyPhoneNumberUtils ()

+ (jboolean)isSeparatorWithChar:(jchar)ch;

+ (jint)minPositiveWithInt:(jint)a
                   withInt:(jint)b;

+ (void)logWithNSString:(NSString *)msg;

+ (jint)indexOfLastNetworkCharWithNSString:(NSString *)a;

+ (NSString *)internalGetStrippedReversedWithNSString:(NSString *)np
                                              withInt:(jint)numDigits;

+ (void)internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                          withByteArray:(IOSByteArray *)bytes
                                                                withInt:(jint)offset
                                                                withInt:(jint)length;

+ (jchar)bcdToCharWithByte:(jbyte)b;

+ (jint)charToBCDWithChar:(jchar)c;

+ (jboolean)isDialableWithNSString:(NSString *)address;

+ (jboolean)isNonSeparatorWithNSString:(NSString *)address;

+ (IOSByteArray *)numberToCalledPartyBCDHelperWithNSString:(NSString *)number
                                               withBoolean:(jboolean)includeLength;

+ (jboolean)isTwoToNineWithChar:(jchar)c;

+ (jint)getFormatTypeFromCountryCodeWithNSString:(NSString *)country;

+ (jboolean)isNanpWithNSString:(NSString *)dialStr;

+ (jboolean)isOneNanpWithNSString:(NSString *)dialStr;

+ (jint)findDialableIndexFromPostDialStrWithNSString:(NSString *)postDialStr;

+ (NSString *)appendPwCharBackToOrigDialStrWithInt:(jint)dialableIndex
                                      withNSString:(NSString *)origStr
                                      withNSString:(NSString *)dialStr;

+ (jboolean)matchIntlPrefixWithNSString:(NSString *)a
                                withInt:(jint)len;

+ (jboolean)matchIntlPrefixAndCCWithNSString:(NSString *)a
                                     withInt:(jint)len;

+ (jboolean)matchTrunkPrefixWithNSString:(NSString *)a
                                 withInt:(jint)len;

+ (jboolean)isCountryCallingCodeWithInt:(jint)countryCallingCodeCandidate;

+ (jint)tryGetISODigitWithChar:(jchar)ch;

+ (AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *)tryGetCountryCallingCodeAndNewIndexWithNSString:(NSString *)str
                                                                                                        withBoolean:(jboolean)acceptThailandCase;

+ (jint)tryGetTrunkPrefixOmittedIndexWithNSString:(NSString *)str
                                          withInt:(jint)currentIndex;

+ (jboolean)checkPrefixIsIgnorableWithNSString:(NSString *)str
                                       withInt:(jint)forwardIndex
                                       withInt:(jint)backwardIndex;

@end

inline jboolean AndroidTelephonyPhoneNumberUtils_get_DBG();
#define AndroidTelephonyPhoneNumberUtils_DBG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, DBG, jboolean)

inline JavaUtilRegexPattern *AndroidTelephonyPhoneNumberUtils_get_GLOBAL_PHONE_NUMBER_PATTERN();
static JavaUtilRegexPattern *AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, GLOBAL_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern *)

inline IOSObjectArray *AndroidTelephonyPhoneNumberUtils_get_NANP_COUNTRIES();
static IOSObjectArray *AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, NANP_COUNTRIES, IOSObjectArray *)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_DIGIT();
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_DIGIT, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_PLUS();
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_PLUS, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_ONE();
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_ONE, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_DASH();
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_DASH, jint)

inline AndroidUtilSparseIntArray *AndroidTelephonyPhoneNumberUtils_get_KEYPAD_MAP();
static AndroidUtilSparseIntArray *AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, KEYPAD_MAP, AndroidUtilSparseIntArray *)

inline jchar AndroidTelephonyPhoneNumberUtils_get_PLUS_SIGN_CHAR();
#define AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_CHAR '+'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, PLUS_SIGN_CHAR, jchar)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_PLUS_SIGN_STRING();
static NSString *AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_STRING = @"+";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, PLUS_SIGN_STRING, NSString *)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_NANP_IDP_STRING();
static NSString *AndroidTelephonyPhoneNumberUtils_NANP_IDP_STRING = @"011";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, NANP_IDP_STRING, NSString *)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_LENGTH();
#define AndroidTelephonyPhoneNumberUtils_NANP_LENGTH 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_LENGTH, jint)

inline IOSBooleanArray *AndroidTelephonyPhoneNumberUtils_get_COUNTLY_CALLING_CALL();
static IOSBooleanArray *AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, COUNTLY_CALLING_CALL, IOSBooleanArray *)

inline jint AndroidTelephonyPhoneNumberUtils_get_CCC_LENGTH();
static jint AndroidTelephonyPhoneNumberUtils_CCC_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(AndroidTelephonyPhoneNumberUtils, CCC_LENGTH, jint)

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(jchar ch);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(jint a, jint b);

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_logWithNSString_(NSString *msg);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(NSString *a);

__attribute__((unused)) static NSString *AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(NSString *np, jint numDigits);

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(JavaLangStringBuilder *sb, IOSByteArray *bytes, jint offset, jint length);

__attribute__((unused)) static jchar AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(jbyte b);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(jchar c);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(NSString *address);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(NSString *address);

__attribute__((unused)) static IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(NSString *number, jboolean includeLength);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(jchar c);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(NSString *country);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(NSString *dialStr);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(NSString *dialStr);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(NSString *postDialStr);

__attribute__((unused)) static NSString *AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(jint dialableIndex, NSString *origStr, NSString *dialStr);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(jint countryCallingCodeCandidate);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(jchar ch);

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(NSString *str, jboolean acceptThailandCase);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(NSString *str, jint currentIndex);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(NSString *str, jint forwardIndex, jint backwardIndex);

@interface AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex : NSObject {
 @public
  jint countryCallingCode_;
  jint newIndex_;
}

- (instancetype)initWithInt:(jint)countryCode
                    withInt:(jint)newIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *self, jint countryCode, jint newIndex);

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *new_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)

J2OBJC_INITIALIZED_DEFN(AndroidTelephonyPhoneNumberUtils)

NSString *AndroidTelephonyPhoneNumberUtils_LOG_TAG = @"PhoneNumberUtils";

@implementation AndroidTelephonyPhoneNumberUtils

+ (jchar)PAUSE {
  return AndroidTelephonyPhoneNumberUtils_PAUSE;
}

+ (jchar)WAIT {
  return AndroidTelephonyPhoneNumberUtils_WAIT;
}

+ (jchar)WILD {
  return AndroidTelephonyPhoneNumberUtils_WILD;
}

+ (jint)TOA_International {
  return AndroidTelephonyPhoneNumberUtils_TOA_International;
}

+ (jint)TOA_Unknown {
  return AndroidTelephonyPhoneNumberUtils_TOA_Unknown;
}

+ (NSString *)LOG_TAG {
  return AndroidTelephonyPhoneNumberUtils_LOG_TAG;
}

+ (jint)FORMAT_UNKNOWN {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN;
}

+ (jint)FORMAT_NANP {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
}

+ (jint)FORMAT_JAPAN {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
}

+ (jint)MIN_MATCH {
  return AndroidTelephonyPhoneNumberUtils_MIN_MATCH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidTelephonyPhoneNumberUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isISODigitWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c);
}

+ (jboolean)is12KeyWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(c);
}

+ (jboolean)isDialableWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c);
}

+ (jboolean)isReallyDialableWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(c);
}

+ (jboolean)isNonSeparatorWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c);
}

+ (jboolean)isStartsPostDialWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c);
}

+ (jboolean)isSeparatorWithChar:(jchar)ch {
  return AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(ch);
}

+ (NSString *)extractNetworkPortionWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(phoneNumber);
}

+ (NSString *)extractNetworkPortionAltWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
}

+ (NSString *)stripSeparatorsWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(phoneNumber);
}

+ (jint)minPositiveWithInt:(jint)a
                   withInt:(jint)b {
  return AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(a, b);
}

+ (void)logWithNSString:(NSString *)msg {
  AndroidTelephonyPhoneNumberUtils_logWithNSString_(msg);
}

+ (jint)indexOfLastNetworkCharWithNSString:(NSString *)a {
  return AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(a);
}

+ (NSString *)extractPostDialPortionWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(phoneNumber);
}

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(a, b);
}

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b
                    withBoolean:(jboolean)useStrictComparation {
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, useStrictComparation);
}

+ (jboolean)compareLooselyWithNSString:(NSString *)a
                          withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(a, b);
}

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(a, b);
}

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b
                            withBoolean:(jboolean)acceptInvalidCCCPrefix {
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(a, b, acceptInvalidCCCPrefix);
}

+ (NSString *)toCallerIDMinMatchWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(phoneNumber);
}

+ (NSString *)getStrippedReversedWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(phoneNumber);
}

+ (NSString *)internalGetStrippedReversedWithNSString:(NSString *)np
                                              withInt:(jint)numDigits {
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, numDigits);
}

+ (NSString *)stringFromStringAndTOAWithNSString:(NSString *)s
                                         withInt:(jint)TOA {
  return AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(s, TOA);
}

+ (jint)toaFromStringWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(s);
}

+ (NSString *)calledPartyBCDToStringWithByteArray:(IOSByteArray *)bytes
                                          withInt:(jint)offset
                                          withInt:(jint)length {
  return AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(bytes, offset, length);
}

+ (void)internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                          withByteArray:(IOSByteArray *)bytes
                                                                withInt:(jint)offset
                                                                withInt:(jint)length {
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(sb, bytes, offset, length);
}

+ (NSString *)calledPartyBCDFragmentToStringWithByteArray:(IOSByteArray *)bytes
                                                  withInt:(jint)offset
                                                  withInt:(jint)length {
  return AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(bytes, offset, length);
}

+ (jchar)bcdToCharWithByte:(jbyte)b {
  return AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(b);
}

+ (jint)charToBCDWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(c);
}

+ (jboolean)isWellFormedSmsAddressWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(address);
}

+ (jboolean)isGlobalPhoneNumberWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(phoneNumber);
}

+ (jboolean)isDialableWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(address);
}

+ (jboolean)isNonSeparatorWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(address);
}

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(s);
}

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithLengthWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(s);
}

+ (IOSByteArray *)numberToCalledPartyBCDWithNSString:(NSString *)number {
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(number);
}

+ (IOSByteArray *)numberToCalledPartyBCDHelperWithNSString:(NSString *)number
                                               withBoolean:(jboolean)includeLength {
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(number, includeLength);
}

+ (NSString *)formatNumberWithNSString:(NSString *)source {
  return AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(source);
}

+ (NSString *)formatNumberWithNSString:(NSString *)source
                               withInt:(jint)defaultFormattingType {
  return AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(source, defaultFormattingType);
}

+ (jint)getFormatTypeForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(locale);
}

+ (void)formatNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text
                                    withInt:(jint)defaultFormattingType {
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, defaultFormattingType);
}

+ (void)formatNanpNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text {
  AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(text);
}

+ (void)formatJapaneseNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text {
  AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(text);
}

+ (NSString *)convertKeypadLettersToDigitsWithNSString:(NSString *)input {
  return AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(input);
}

+ (jboolean)isTwoToNineWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(c);
}

+ (jint)getFormatTypeFromCountryCodeWithNSString:(NSString *)country {
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(country);
}

+ (jboolean)isNanpWithNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(dialStr);
}

+ (jboolean)isOneNanpWithNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(dialStr);
}

+ (jboolean)isUriNumberWithNSString:(NSString *)number {
  return AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(number);
}

+ (jint)findDialableIndexFromPostDialStrWithNSString:(NSString *)postDialStr {
  return AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(postDialStr);
}

+ (NSString *)appendPwCharBackToOrigDialStrWithInt:(jint)dialableIndex
                                      withNSString:(NSString *)origStr
                                      withNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(dialableIndex, origStr, dialStr);
}

+ (jboolean)matchIntlPrefixWithNSString:(NSString *)a
                                withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(a, len);
}

+ (jboolean)matchIntlPrefixAndCCWithNSString:(NSString *)a
                                     withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(a, len);
}

+ (jboolean)matchTrunkPrefixWithNSString:(NSString *)a
                                 withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(a, len);
}

+ (jboolean)isCountryCallingCodeWithInt:(jint)countryCallingCodeCandidate {
  return AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(countryCallingCodeCandidate);
}

+ (jint)tryGetISODigitWithChar:(jchar)ch {
  return AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch);
}

+ (AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *)tryGetCountryCallingCodeAndNewIndexWithNSString:(NSString *)str
                                                                                                        withBoolean:(jboolean)acceptThailandCase {
  return AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(str, acceptThailandCase);
}

+ (jint)tryGetTrunkPrefixOmittedIndexWithNSString:(NSString *)str
                                          withInt:(jint)currentIndex {
  return AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(str, currentIndex);
}

+ (jboolean)checkPrefixIsIgnorableWithNSString:(NSString *)str
                                       withInt:(jint)forwardIndex
                                       withInt:(jint)backwardIndex {
  return AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(str, forwardIndex, backwardIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 27, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 32, 29, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 35, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 36, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 38, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 39, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 40, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 43, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 43, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 43, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 50, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 51, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 52, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 53, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 54, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 55, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 56, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 57, 58, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 59, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 60, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 61, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 62, 63, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 64, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;", 0xa, 65, 42, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 66, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 67, 68, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isISODigitWithChar:);
  methods[2].selector = @selector(is12KeyWithChar:);
  methods[3].selector = @selector(isDialableWithChar:);
  methods[4].selector = @selector(isReallyDialableWithChar:);
  methods[5].selector = @selector(isNonSeparatorWithChar:);
  methods[6].selector = @selector(isStartsPostDialWithChar:);
  methods[7].selector = @selector(isSeparatorWithChar:);
  methods[8].selector = @selector(extractNetworkPortionWithNSString:);
  methods[9].selector = @selector(extractNetworkPortionAltWithNSString:);
  methods[10].selector = @selector(stripSeparatorsWithNSString:);
  methods[11].selector = @selector(minPositiveWithInt:withInt:);
  methods[12].selector = @selector(logWithNSString:);
  methods[13].selector = @selector(indexOfLastNetworkCharWithNSString:);
  methods[14].selector = @selector(extractPostDialPortionWithNSString:);
  methods[15].selector = @selector(compareWithNSString:withNSString:);
  methods[16].selector = @selector(compareWithNSString:withNSString:withBoolean:);
  methods[17].selector = @selector(compareLooselyWithNSString:withNSString:);
  methods[18].selector = @selector(compareStrictlyWithNSString:withNSString:);
  methods[19].selector = @selector(compareStrictlyWithNSString:withNSString:withBoolean:);
  methods[20].selector = @selector(toCallerIDMinMatchWithNSString:);
  methods[21].selector = @selector(getStrippedReversedWithNSString:);
  methods[22].selector = @selector(internalGetStrippedReversedWithNSString:withInt:);
  methods[23].selector = @selector(stringFromStringAndTOAWithNSString:withInt:);
  methods[24].selector = @selector(toaFromStringWithNSString:);
  methods[25].selector = @selector(calledPartyBCDToStringWithByteArray:withInt:withInt:);
  methods[26].selector = @selector(internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:withByteArray:withInt:withInt:);
  methods[27].selector = @selector(calledPartyBCDFragmentToStringWithByteArray:withInt:withInt:);
  methods[28].selector = @selector(bcdToCharWithByte:);
  methods[29].selector = @selector(charToBCDWithChar:);
  methods[30].selector = @selector(isWellFormedSmsAddressWithNSString:);
  methods[31].selector = @selector(isGlobalPhoneNumberWithNSString:);
  methods[32].selector = @selector(isDialableWithNSString:);
  methods[33].selector = @selector(isNonSeparatorWithNSString:);
  methods[34].selector = @selector(networkPortionToCalledPartyBCDWithNSString:);
  methods[35].selector = @selector(networkPortionToCalledPartyBCDWithLengthWithNSString:);
  methods[36].selector = @selector(numberToCalledPartyBCDWithNSString:);
  methods[37].selector = @selector(numberToCalledPartyBCDHelperWithNSString:withBoolean:);
  methods[38].selector = @selector(formatNumberWithNSString:);
  methods[39].selector = @selector(formatNumberWithNSString:withInt:);
  methods[40].selector = @selector(getFormatTypeForLocaleWithJavaUtilLocale:);
  methods[41].selector = @selector(formatNumberWithAndroidTextEditable:withInt:);
  methods[42].selector = @selector(formatNanpNumberWithAndroidTextEditable:);
  methods[43].selector = @selector(formatJapaneseNumberWithAndroidTextEditable:);
  methods[44].selector = @selector(convertKeypadLettersToDigitsWithNSString:);
  methods[45].selector = @selector(isTwoToNineWithChar:);
  methods[46].selector = @selector(getFormatTypeFromCountryCodeWithNSString:);
  methods[47].selector = @selector(isNanpWithNSString:);
  methods[48].selector = @selector(isOneNanpWithNSString:);
  methods[49].selector = @selector(isUriNumberWithNSString:);
  methods[50].selector = @selector(findDialableIndexFromPostDialStrWithNSString:);
  methods[51].selector = @selector(appendPwCharBackToOrigDialStrWithInt:withNSString:withNSString:);
  methods[52].selector = @selector(matchIntlPrefixWithNSString:withInt:);
  methods[53].selector = @selector(matchIntlPrefixAndCCWithNSString:withInt:);
  methods[54].selector = @selector(matchTrunkPrefixWithNSString:withInt:);
  methods[55].selector = @selector(isCountryCallingCodeWithInt:);
  methods[56].selector = @selector(tryGetISODigitWithChar:);
  methods[57].selector = @selector(tryGetCountryCallingCodeAndNewIndexWithNSString:withBoolean:);
  methods[58].selector = @selector(tryGetTrunkPrefixOmittedIndexWithNSString:withInt:);
  methods[59].selector = @selector(checkPrefixIsIgnorableWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PAUSE", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_PAUSE, 0x19, -1, -1, -1, -1 },
    { "WAIT", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_WAIT, 0x19, -1, -1, -1, -1 },
    { "WILD", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_WILD, 0x19, -1, -1, -1, -1 },
    { "TOA_International", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_TOA_International, 0x19, -1, -1, -1, -1 },
    { "TOA_Unknown", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_TOA_Unknown, 0x19, -1, -1, -1, -1 },
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 69, -1, -1 },
    { "DBG", "Z", .constantValue.asBOOL = AndroidTelephonyPhoneNumberUtils_DBG, 0x1a, -1, -1, -1, -1 },
    { "GLOBAL_PHONE_NUMBER_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "FORMAT_UNKNOWN", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "FORMAT_NANP", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_NANP, 0x19, -1, -1, -1, -1 },
    { "FORMAT_JAPAN", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN, 0x19, -1, -1, -1, -1 },
    { "NANP_COUNTRIES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "NANP_STATE_DIGIT", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_PLUS", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_ONE", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_DASH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH, 0x1a, -1, -1, -1, -1 },
    { "MIN_MATCH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_MIN_MATCH, 0x18, -1, -1, -1, -1 },
    { "KEYPAD_MAP", "LAndroidUtilSparseIntArray;", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "PLUS_SIGN_CHAR", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_CHAR, 0x1a, -1, -1, -1, -1 },
    { "PLUS_SIGN_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "NANP_IDP_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "NANP_LENGTH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "COUNTLY_CALLING_CALL", "[Z", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "CCC_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
  };
  static const void *ptrTable[] = { "isISODigit", "C", "is12Key", "isDialable", "isReallyDialable", "isNonSeparator", "isStartsPostDial", "isSeparator", "extractNetworkPortion", "LNSString;", "extractNetworkPortionAlt", "stripSeparators", "minPositive", "II", "log", "indexOfLastNetworkChar", "extractPostDialPortion", "compare", "LNSString;LNSString;", "LNSString;LNSString;Z", "compareLoosely", "compareStrictly", "toCallerIDMinMatch", "getStrippedReversed", "internalGetStrippedReversed", "LNSString;I", "stringFromStringAndTOA", "toaFromString", "calledPartyBCDToString", "[BII", "internalCalledPartyBCDFragmentToString", "LJavaLangStringBuilder;[BII", "calledPartyBCDFragmentToString", "bcdToChar", "B", "charToBCD", "isWellFormedSmsAddress", "isGlobalPhoneNumber", "networkPortionToCalledPartyBCD", "networkPortionToCalledPartyBCDWithLength", "numberToCalledPartyBCD", "numberToCalledPartyBCDHelper", "LNSString;Z", "formatNumber", "getFormatTypeForLocale", "LJavaUtilLocale;", "LAndroidTextEditable;I", "formatNanpNumber", "LAndroidTextEditable;", "formatJapaneseNumber", "convertKeypadLettersToDigits", "isTwoToNine", "getFormatTypeFromCountryCode", "isNanp", "isOneNanp", "isUriNumber", "findDialableIndexFromPostDialStr", "appendPwCharBackToOrigDialStr", "ILNSString;LNSString;", "matchIntlPrefix", "matchIntlPrefixAndCC", "matchTrunkPrefix", "isCountryCallingCode", "I", "tryGetISODigit", "tryGetCountryCallingCodeAndNewIndex", "tryGetTrunkPrefixOmittedIndex", "checkPrefixIsIgnorable", "LNSString;II", &AndroidTelephonyPhoneNumberUtils_LOG_TAG, &AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN, &AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, &AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP, &AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_STRING, &AndroidTelephonyPhoneNumberUtils_NANP_IDP_STRING, &AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL, &AndroidTelephonyPhoneNumberUtils_CCC_LENGTH, "LAndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;" };
  static const J2ObjcClassInfo _AndroidTelephonyPhoneNumberUtils = { "PhoneNumberUtils", "android.telephony", ptrTable, methods, fields, 7, 0x1, 60, 24, -1, 77, -1, -1, -1 };
  return &_AndroidTelephonyPhoneNumberUtils;
}

+ (void)initialize {
  if (self == [AndroidTelephonyPhoneNumberUtils class]) {
    JreStrongAssign(&AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\+]?[0-9.-]+"));
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, [IOSObjectArray newArrayWithObjects:(id[]){ @"US", @"CA", @"AS", @"AI", @"AG", @"BS", @"BB", @"BM", @"VG", @"KY", @"DM", @"DO", @"GD", @"GU", @"JM", @"PR", @"MS", @"MP", @"KN", @"LC", @"VC", @"TT", @"TC", @"VI" } count:24 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP, new_AndroidUtilSparseIntArray_init());
    {
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'a' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'b' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'c' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'A' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'B' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'C' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'d' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'e' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'f' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'D' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'E' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'F' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'g' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'h' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'i' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'G' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'H' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'I' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'j' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'k' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'l' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'J' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'K' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'L' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'m' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'n' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'o' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'M' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'N' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'O' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'p' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'q' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'r' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'s' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'P' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Q' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'R' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'S' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'t' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'u' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'v' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'T' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'U' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'V' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'w' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'x' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'y' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'z' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'W' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'X' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Y' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Z' withInt:'9'];
    }
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false } count:100]);
    AndroidTelephonyPhoneNumberUtils_CCC_LENGTH = AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL->size_;
    J2OBJC_SET_INITIALIZED(AndroidTelephonyPhoneNumberUtils)
  }
}

@end

void AndroidTelephonyPhoneNumberUtils_init(AndroidTelephonyPhoneNumberUtils *self) {
  NSObject_init(self);
}

AndroidTelephonyPhoneNumberUtils *new_AndroidTelephonyPhoneNumberUtils_init() {
  J2OBJC_NEW_IMPL(AndroidTelephonyPhoneNumberUtils, init)
}

AndroidTelephonyPhoneNumberUtils *create_AndroidTelephonyPhoneNumberUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidTelephonyPhoneNumberUtils, init)
}

jboolean AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return c >= '0' && c <= '9';
}

jboolean AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#';
}

jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == AndroidTelephonyPhoneNumberUtils_WILD;
}

jboolean AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+';
}

jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == AndroidTelephonyPhoneNumberUtils_WILD || c == AndroidTelephonyPhoneNumberUtils_WAIT || c == AndroidTelephonyPhoneNumberUtils_PAUSE;
}

jboolean AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return c == AndroidTelephonyPhoneNumberUtils_PAUSE || c == AndroidTelephonyPhoneNumberUtils_WAIT;
}

jboolean AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(jchar ch) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return !AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch) && !(('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));
}

NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  jboolean firstCharAdded = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c) && (c != '+' || !firstCharAdded)) {
      firstCharAdded = true;
      [ret appendWithChar:c];
    }
    else if (AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c)) {
      break;
    }
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  jboolean haveSeenPlus = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (c == '+') {
      if (haveSeenPlus) {
        continue;
      }
      haveSeenPlus = true;
    }
    if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c)) {
      [ret appendWithChar:c];
    }
    else if (AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c)) {
      break;
    }
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      [ret appendWithChar:c];
    }
  }
  return [ret description];
}

jint AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(jint a, jint b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (a >= 0 && b >= 0) {
    return (a < b) ? a : b;
  }
  else if (a >= 0) {
    return a;
  }
  else if (b >= 0) {
    return b;
  }
  else {
    return -1;
  }
}

void AndroidTelephonyPhoneNumberUtils_logWithNSString_(NSString *msg) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidUtilLog_dWithNSString_withNSString_(AndroidTelephonyPhoneNumberUtils_LOG_TAG, msg);
}

jint AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(NSString *a) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint pIndex;
  jint wIndex;
  jint origLength;
  jint trimIndex;
  origLength = [((NSString *) nil_chk(a)) java_length];
  pIndex = [a java_indexOf:AndroidTelephonyPhoneNumberUtils_PAUSE];
  wIndex = [a java_indexOf:AndroidTelephonyPhoneNumberUtils_WAIT];
  trimIndex = AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(pIndex, wIndex);
  if (trimIndex < 0) {
    return origLength - 1;
  }
  else {
    return trimIndex - 1;
  }
}

NSString *AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) return nil;
  jint trimIndex;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_init();
  trimIndex = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(phoneNumber);
  for (jint i = trimIndex + 1, s = [phoneNumber java_length]; i < s; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      [ret appendWithChar:c];
    }
  }
  return [ret description];
}

jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
}

jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean useStrictComparation) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (useStrictComparation ? AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(a, b) : AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(a, b));
}

jboolean AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint ia;
  jint ib;
  jint matched;
  jint numNonDialableCharsInA = 0;
  jint numNonDialableCharsInB = 0;
  if (a == nil || b == nil) return a == b;
  if ([a java_length] == 0 || [b java_length] == 0) {
    return false;
  }
  ia = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(a);
  ib = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(b);
  matched = 0;
  while (ia >= 0 && ib >= 0) {
    jchar ca;
    jchar cb;
    jboolean skipCmp = false;
    ca = [a charAtWithInt:ia];
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ca)) {
      ia--;
      skipCmp = true;
      numNonDialableCharsInA++;
    }
    cb = [b charAtWithInt:ib];
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(cb)) {
      ib--;
      skipCmp = true;
      numNonDialableCharsInB++;
    }
    if (!skipCmp) {
      if (cb != ca && ca != AndroidTelephonyPhoneNumberUtils_WILD && cb != AndroidTelephonyPhoneNumberUtils_WILD) {
        break;
      }
      ia--;
      ib--;
      matched++;
    }
  }
  if (matched < AndroidTelephonyPhoneNumberUtils_MIN_MATCH) {
    jint effectiveALen = [a java_length] - numNonDialableCharsInA;
    jint effectiveBLen = [b java_length] - numNonDialableCharsInB;
    if (effectiveALen == effectiveBLen && effectiveALen == matched) {
      return true;
    }
    return false;
  }
  if (matched >= AndroidTelephonyPhoneNumberUtils_MIN_MATCH && (ia < 0 || ib < 0)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(a, ia + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(b, ib + 1)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(a, ia + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(b, ib + 1)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(b, ib + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(a, ia + 1)) {
    return true;
  }
  return false;
}

jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(a, b, true);
}

jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean acceptInvalidCCCPrefix) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (a == nil || b == nil) {
    return a == b;
  }
  else if ([a java_length] == 0 && [b java_length] == 0) {
    return false;
  }
  jint forwardIndexA = 0;
  jint forwardIndexB = 0;
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *cccA = AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(a, acceptInvalidCCCPrefix);
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *cccB = AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(b, acceptInvalidCCCPrefix);
  jboolean bothHasCountryCallingCode = false;
  jboolean okToIgnorePrefix = true;
  jboolean trunkPrefixIsOmittedA = false;
  jboolean trunkPrefixIsOmittedB = false;
  if (cccA != nil && cccB != nil) {
    if (cccA->countryCallingCode_ != cccB->countryCallingCode_) {
      return false;
    }
    okToIgnorePrefix = false;
    bothHasCountryCallingCode = true;
    forwardIndexA = cccA->newIndex_;
    forwardIndexB = cccB->newIndex_;
  }
  else if (cccA == nil && cccB == nil) {
    okToIgnorePrefix = false;
  }
  else {
    if (cccA != nil) {
      forwardIndexA = cccA->newIndex_;
    }
    else {
      jint tmp = AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(b, 0);
      if (tmp >= 0) {
        forwardIndexA = tmp;
        trunkPrefixIsOmittedA = true;
      }
    }
    if (cccB != nil) {
      forwardIndexB = cccB->newIndex_;
    }
    else {
      jint tmp = AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(b, 0);
      if (tmp >= 0) {
        forwardIndexB = tmp;
        trunkPrefixIsOmittedB = true;
      }
    }
  }
  jint backwardIndexA = [a java_length] - 1;
  jint backwardIndexB = [b java_length] - 1;
  while (backwardIndexA >= forwardIndexA && backwardIndexB >= forwardIndexB) {
    jboolean skip_compare = false;
    jchar chA = [a charAtWithInt:backwardIndexA];
    jchar chB = [b charAtWithInt:backwardIndexB];
    if (AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(chA)) {
      backwardIndexA--;
      skip_compare = true;
    }
    if (AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(chB)) {
      backwardIndexB--;
      skip_compare = true;
    }
    if (!skip_compare) {
      if (chA != chB) {
        return false;
      }
      backwardIndexA--;
      backwardIndexB--;
    }
  }
  if (okToIgnorePrefix) {
    if ((trunkPrefixIsOmittedA && forwardIndexA <= backwardIndexA) || !AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(a, forwardIndexA, backwardIndexA)) {
      if (acceptInvalidCCCPrefix) {
        return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
      }
      else {
        return false;
      }
    }
    if ((trunkPrefixIsOmittedB && forwardIndexB <= backwardIndexB) || !AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(b, forwardIndexA, backwardIndexB)) {
      if (acceptInvalidCCCPrefix) {
        return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
      }
      else {
        return false;
      }
    }
  }
  else {
    jboolean maybeNamp = !bothHasCountryCallingCode;
    while (backwardIndexA >= forwardIndexA) {
      jchar chA = [a charAtWithInt:backwardIndexA];
      if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(chA)) {
        if (maybeNamp && AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(chA) == 1) {
          maybeNamp = false;
        }
        else {
          return false;
        }
      }
      backwardIndexA--;
    }
    while (backwardIndexB >= forwardIndexB) {
      jchar chB = [b charAtWithInt:backwardIndexB];
      if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(chB)) {
        if (maybeNamp && AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(chB) == 1) {
          maybeNamp = false;
        }
        else {
          return false;
        }
      }
      backwardIndexB--;
    }
  }
  return true;
}

NSString *AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *np = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, AndroidTelephonyPhoneNumberUtils_MIN_MATCH);
}

NSString *AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *np = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
  if (np == nil) return nil;
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, [np java_length]);
}

NSString *AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(NSString *np, jint numDigits) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (np == nil) return nil;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(numDigits);
  jint length = [np java_length];
  for (jint i = length - 1, s = length; i >= 0 && (s - i) <= numDigits; i--) {
    jchar c = [np charAtWithInt:i];
    [ret appendWithChar:c];
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(NSString *s, jint TOA) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (s == nil) return nil;
  if (TOA == AndroidTelephonyPhoneNumberUtils_TOA_International && [s java_length] > 0 && [s charAtWithInt:0] != '+') {
    return JreStrcat("C$", '+', s);
  }
  return s;
}

jint AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (s != nil && [s java_length] > 0 && [s charAtWithInt:0] == '+') {
    return AndroidTelephonyPhoneNumberUtils_TOA_International;
  }
  return AndroidTelephonyPhoneNumberUtils_TOA_Unknown;
}

NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean prependPlus = false;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(1 + length * 2);
  if (length < 2) {
    return @"";
  }
  if ((IOSByteArray_Get(nil_chk(bytes), offset) & (jint) 0xf0) == (AndroidTelephonyPhoneNumberUtils_TOA_International & (jint) 0xf0)) {
    prependPlus = true;
  }
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(ret, bytes, offset + 1, length - 1);
  if (prependPlus && [ret java_length] == 0) {
    return @"";
  }
  if (prependPlus) {
    NSString *retString = [ret description];
    JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"(^[#*])(.*)([#*])(.*)(#)$");
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:retString];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      if ([@"" isEqual:[m groupWithInt:2]]) {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:[m groupWithInt:4]];
        [ret appendWithNSString:[m groupWithInt:5]];
        [ret appendWithNSString:@"+"];
      }
      else {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:2]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:@"+"];
        [ret appendWithNSString:[m groupWithInt:4]];
        [ret appendWithNSString:[m groupWithInt:5]];
      }
    }
    else {
      p = JavaUtilRegexPattern_compileWithNSString_(@"(^[#*])(.*)([#*])(.*)");
      m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:retString];
      if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:2]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:@"+"];
        [ret appendWithNSString:[m groupWithInt:4]];
      }
      else {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithChar:'+'];
        [ret appendWithNSString:retString];
      }
    }
  }
  return [ret description];
}

void AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(JavaLangStringBuilder *sb, IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = offset; i < length + offset; i++) {
    jbyte b;
    jchar c;
    c = AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_((jbyte) (IOSByteArray_Get(nil_chk(bytes), i) & (jint) 0xf));
    if (c == 0) {
      return;
    }
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
    b = (jbyte) ((JreRShift32(IOSByteArray_Get(bytes, i), 4)) & (jint) 0xf);
    if (b == (jint) 0xf && i + 1 == length + offset) {
      break;
    }
    c = AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(b);
    if (c == 0) {
      return;
    }
    [sb appendWithChar:c];
  }
}

NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(length * 2);
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(ret, bytes, offset, length);
  return [ret description];
}

jchar AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(jbyte b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (b < (jint) 0xa) {
    return (jchar) ('0' + b);
  }
  else switch (b) {
    case (jint) 0xa:
    return '*';
    case (jint) 0xb:
    return '#';
    case (jint) 0xc:
    return AndroidTelephonyPhoneNumberUtils_PAUSE;
    case (jint) 0xd:
    return AndroidTelephonyPhoneNumberUtils_WILD;
    default:
    return 0;
  }
}

jint AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
  else if (c == '*') {
    return (jint) 0xa;
  }
  else if (c == '#') {
    return (jint) 0xb;
  }
  else if (c == AndroidTelephonyPhoneNumberUtils_PAUSE) {
    return (jint) 0xc;
  }
  else if (c == AndroidTelephonyPhoneNumberUtils_WILD) {
    return (jint) 0xd;
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$C", @"invalid char for BCD ", c));
  }
}

jboolean AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(address);
  return (!([((NSString *) nil_chk(networkPortion)) isEqual:@"+"] || AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(networkPortion))) && AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(networkPortion);
}

jboolean AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(phoneNumber)) {
    return false;
  }
  JavaUtilRegexMatcher *match = [((JavaUtilRegexPattern *) nil_chk(AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN)) matcherWithJavaLangCharSequence:phoneNumber];
  return [((JavaUtilRegexMatcher *) nil_chk(match)) matches];
}

jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = 0, count = [((NSString *) nil_chk(address)) java_length]; i < count; i++) {
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_([address charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = 0, count = [((NSString *) nil_chk(address)) java_length]; i < count; i++) {
    if (!AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_([address charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(s);
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(networkPortion, false);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(s);
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(networkPortion, true);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(NSString *number) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(number, false);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(NSString *number, jboolean includeLength) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint numberLenReal = [((NSString *) nil_chk(number)) java_length];
  jint numberLenEffective = numberLenReal;
  jboolean hasPlus = [number java_indexOf:'+'] != -1;
  if (hasPlus) numberLenEffective--;
  if (numberLenEffective == 0) return nil;
  jint resultLen = (numberLenEffective + 1) / 2;
  jint extraBytes = 1;
  if (includeLength) extraBytes++;
  resultLen += extraBytes;
  IOSByteArray *result = [IOSByteArray arrayWithLength:resultLen];
  jint digitCount = 0;
  for (jint i = 0; i < numberLenReal; i++) {
    jchar c = [number charAtWithInt:i];
    if (c == '+') continue;
    jint shift = ((digitCount & (jint) 0x01) == 1) ? 4 : 0;
    *IOSByteArray_GetRef(result, extraBytes + (JreRShift32(digitCount, 1))) |= (jbyte) (JreLShift32((AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(c) & (jint) 0x0F), shift));
    digitCount++;
  }
  if ((digitCount & (jint) 0x01) == 1) *IOSByteArray_GetRef(result, extraBytes + (JreRShift32(digitCount, 1))) |= (jint) 0xF0;
  jint offset = 0;
  if (includeLength) *IOSByteArray_GetRef(result, offset++) = (jbyte) (resultLen - 1);
  *IOSByteArray_GetRef(result, offset) = (jbyte) (hasPlus ? AndroidTelephonyPhoneNumberUtils_TOA_International : AndroidTelephonyPhoneNumberUtils_TOA_Unknown);
  return result;
}

NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(NSString *source) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTextSpannableStringBuilder *text = create_AndroidTextSpannableStringBuilder_initWithJavaLangCharSequence_(source);
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale_getDefault()));
  return [text description];
}

NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(NSString *source, jint defaultFormattingType) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTextSpannableStringBuilder *text = create_AndroidTextSpannableStringBuilder_initWithJavaLangCharSequence_(source);
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, defaultFormattingType);
  return [text description];
}

jint AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *country = [((JavaUtilLocale *) nil_chk(locale)) getCountry];
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(country);
}

void AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(id<AndroidTextEditable> text, jint defaultFormattingType) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint formatType = defaultFormattingType;
  if ([((id<AndroidTextEditable>) nil_chk(text)) java_length] > 2 && [text charAtWithInt:0] == '+') {
    if ([text charAtWithInt:1] == '1') {
      formatType = AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
    }
    else if ([text java_length] >= 3 && [text charAtWithInt:1] == '8' && [text charAtWithInt:2] == '1') {
      formatType = AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
    }
    else {
      return;
    }
  }
  switch (formatType) {
    case AndroidTelephonyPhoneNumberUtils_FORMAT_NANP:
    AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(text);
    return;
    case AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN:
    AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(text);
    return;
  }
}

void AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(id<AndroidTextEditable> text) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = [((id<AndroidTextEditable>) nil_chk(text)) java_length];
  if (length > [@"+1-nnn-nnn-nnnn" java_length]) {
    return;
  }
  else if (length <= 5) {
    return;
  }
  id<JavaLangCharSequence> saved = [text subSequenceFrom:0 to:length];
  jint p = 0;
  while (p < [text java_length]) {
    if ([text charAtWithInt:p] == '-') {
      [text delete__WithInt:p withInt:p + 1];
    }
    else {
      p++;
    }
  }
  length = [text java_length];
  IOSIntArray *dashPositions = [IOSIntArray arrayWithLength:3];
  jint numDashes = 0;
  jint state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT;
  jint numDigits = 0;
  for (jint i = 0; i < length; i++) {
    jchar c = [text charAtWithInt:i];
    switch (c) {
      case '1':
      if (numDigits == 0 || state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS) {
        state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE;
        break;
      }
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '0':
      if (state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS) {
        [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
        return;
      }
      else if (state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE) {
        *IOSIntArray_GetRef(dashPositions, numDashes++) = i;
      }
      else if (state != AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH && (numDigits == 3 || numDigits == 6)) {
        *IOSIntArray_GetRef(dashPositions, numDashes++) = i;
      }
      state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT;
      numDigits++;
      break;
      case '-':
      state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH;
      break;
      case '+':
      if (i == 0) {
        state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS;
        break;
      }
      default:
      [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
      return;
    }
  }
  if (numDigits == 7) {
    numDashes--;
  }
  for (jint i = 0; i < numDashes; i++) {
    jint pos = IOSIntArray_Get(dashPositions, i);
    [text replaceWithInt:pos + i withInt:pos + i withJavaLangCharSequence:@"-"];
  }
  jint len = [text java_length];
  while (len > 0) {
    if ([text charAtWithInt:len - 1] == '-') {
      [text delete__WithInt:len - 1 withInt:len];
      len--;
    }
    else {
      break;
    }
  }
}

void AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(id<AndroidTextEditable> text) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTelephonyJapanesePhoneNumberFormatter_formatWithAndroidTextEditable_(text);
}

NSString *AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(NSString *input) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (input == nil) {
    return input;
  }
  jint len = [input java_length];
  if (len == 0) {
    return input;
  }
  IOSCharArray *out = [input java_toCharArray];
  for (jint i = 0; i < len; i++) {
    jchar c = IOSCharArray_Get(nil_chk(out), i);
    *IOSCharArray_GetRef(out, i) = (jchar) [((AndroidUtilSparseIntArray *) nil_chk(AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP)) getWithInt:c withInt:c];
  }
  return [NSString java_stringWithCharacters:out];
}

jboolean AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (c >= '2' && c <= '9') {
    return true;
  }
  else {
    return false;
  }
}

jint AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(NSString *country) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, i))) java_compareToIgnoreCase:country] == 0) {
      return AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
    }
  }
  if ([@"jp" java_compareToIgnoreCase:country] == 0) {
    return AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
  }
  return AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN;
}

jboolean AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean retVal = false;
  if (dialStr != nil) {
    if ([dialStr java_length] == AndroidTelephonyPhoneNumberUtils_NANP_LENGTH) {
      if (AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_([dialStr charAtWithInt:0]) && AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_([dialStr charAtWithInt:3])) {
        retVal = true;
        for (jint i = 1; i < AndroidTelephonyPhoneNumberUtils_NANP_LENGTH; i++) {
          jchar c = [dialStr charAtWithInt:i];
          if (!AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) {
            retVal = false;
            break;
          }
        }
      }
    }
  }
  else {
    AndroidUtilLog_eWithNSString_withNSString_(@"isNanp: null dialStr passed in", dialStr);
  }
  return retVal;
}

jboolean AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean retVal = false;
  if (dialStr != nil) {
    NSString *newDialStr = [dialStr java_substring:1];
    if (([dialStr charAtWithInt:0] == '1') && AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(newDialStr)) {
      retVal = true;
    }
  }
  else {
    AndroidUtilLog_eWithNSString_withNSString_(@"isOneNanp: null dialStr passed in", dialStr);
  }
  return retVal;
}

jboolean AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(NSString *number) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return number != nil && ([number java_contains:@"@"] || [number java_contains:@"%40"]);
}

jint AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(NSString *postDialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint index = 0; index < [((NSString *) nil_chk(postDialStr)) java_length]; index++) {
    jchar c = [postDialStr charAtWithInt:index];
    if (AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(c)) {
      return index;
    }
  }
  return -1;
}

NSString *AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(jint dialableIndex, NSString *origStr, NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *retStr;
  if (dialableIndex == 1) {
    JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithNSString_(origStr);
    ret = [ret appendWithChar:[((NSString *) nil_chk(dialStr)) charAtWithInt:0]];
    retStr = [((JavaLangStringBuilder *) nil_chk(ret)) description];
  }
  else {
    NSString *nonDigitStr = [((NSString *) nil_chk(dialStr)) java_substring:0 endIndex:dialableIndex];
    retStr = [((NSString *) nil_chk(origStr)) java_concat:nonDigitStr];
  }
  return retStr;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    switch (state) {
      case 0:
      if (c == '+') state = 1;
      else if (c == '0') state = 2;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 2:
      if (c == '0') state = 3;
      else if (c == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 4:
      if (c == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      default:
      if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
    }
  }
  return state == 1 || state == 3 || state == 5;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    switch (state) {
      case 0:
      if (c == '+') state = 1;
      else if (c == '0') state = 2;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 2:
      if (c == '0') state = 3;
      else if (c == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 4:
      if (c == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 1:
      case 3:
      case 5:
      if (AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) state = 6;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 6:
      case 7:
      if (AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) state++;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      default:
      if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
    }
  }
  return state == 6 || state == 7 || state == 8;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean found;
  found = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    if (c == '0' && !found) {
      found = true;
    }
    else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      return false;
    }
  }
  return found;
}

jboolean AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(jint countryCallingCodeCandidate) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return countryCallingCodeCandidate > 0 && countryCallingCodeCandidate < AndroidTelephonyPhoneNumberUtils_CCC_LENGTH && IOSBooleanArray_Get(nil_chk(AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL), countryCallingCodeCandidate);
}

jint AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(jchar ch) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if ('0' <= ch && ch <= '9') {
    return ch - '0';
  }
  else {
    return -1;
  }
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(NSString *str, jboolean acceptThailandCase) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  jint ccc = 0;
  jint length = [((NSString *) nil_chk(str)) java_length];
  for (jint i = 0; i < length; i++) {
    jchar ch = [str charAtWithInt:i];
    switch (state) {
      case 0:
      if (ch == '+') state = 1;
      else if (ch == '0') state = 2;
      else if (ch == '1') {
        if (acceptThailandCase) {
          state = 8;
        }
        else {
          return nil;
        }
      }
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 2:
      if (ch == '0') state = 3;
      else if (ch == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 4:
      if (ch == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
      {
        jint ret = AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch);
        if (ret > 0) {
          ccc = ccc * 10 + ret;
          if (ccc >= 100 || AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(ccc)) {
            return create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(ccc, i + 1);
          }
          if (state == 1 || state == 3 || state == 5) {
            state = 6;
          }
          else {
            state++;
          }
        }
        else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
          return nil;
        }
      }
      break;
      case 8:
      if (ch == '6') state = 9;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 9:
      if (ch == '6') {
        return create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(66, i + 1);
      }
      else {
        return nil;
      }
      default:
      return nil;
    }
  }
  return nil;
}

jint AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(NSString *str, jint currentIndex) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = [((NSString *) nil_chk(str)) java_length];
  for (jint i = currentIndex; i < length; i++) {
    jchar ch = [str charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch) >= 0) {
      return i + 1;
    }
    else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
      return -1;
    }
  }
  return -1;
}

jboolean AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(NSString *str, jint forwardIndex, jint backwardIndex) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean trunk_prefix_was_read = false;
  while (backwardIndex >= forwardIndex) {
    if (AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_([((NSString *) nil_chk(str)) charAtWithInt:backwardIndex]) >= 0) {
      if (trunk_prefix_was_read) {
        return false;
      }
      else {
        trunk_prefix_was_read = true;
      }
    }
    else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_([str charAtWithInt:backwardIndex])) {
      return false;
    }
    backwardIndex--;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidTelephonyPhoneNumberUtils)

@implementation AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex

- (instancetype)initWithInt:(jint)countryCode
                    withInt:(jint)newIndex {
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(self, countryCode, newIndex);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "countryCallingCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "newIndex_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LAndroidTelephonyPhoneNumberUtils;" };
  static const J2ObjcClassInfo _AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex = { "CountryCallingCodeAndNewIndex", "android.telephony", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;
}

@end

void AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *self, jint countryCode, jint newIndex) {
  NSObject_init(self);
  self->countryCallingCode_ = countryCode;
  self->newIndex_ = newIndex;
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *new_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) {
  J2OBJC_NEW_IMPL(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex, initWithInt_withInt_, countryCode, newIndex)
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) {
  J2OBJC_CREATE_IMPL(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex, initWithInt_withInt_, countryCode, newIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)
