//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComAndroidInternalUtilGrowingArrayUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/android/internal/util/ArrayUtils.h"
#include "java/lang/System.h"

@interface ComAndroidInternalUtilGrowingArrayUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComAndroidInternalUtilGrowingArrayUtils_init(ComAndroidInternalUtilGrowingArrayUtils *self);

__attribute__((unused)) static ComAndroidInternalUtilGrowingArrayUtils *new_ComAndroidInternalUtilGrowingArrayUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAndroidInternalUtilGrowingArrayUtils *create_ComAndroidInternalUtilGrowingArrayUtils_init();

@implementation ComAndroidInternalUtilGrowingArrayUtils

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(array, currentSize, element);
}

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(array, currentSize, element);
}

+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(array, currentSize, element);
}

+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(array, currentSize, element);
}

+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(array, currentSize, index, element);
}

+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(array, currentSize, index, element);
}

+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(array, currentSize, index, element);
}

+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(array, currentSize, index, element);
}

+ (jint)growSizeWithInt:(jint)currentSize {
  return ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComAndroidInternalUtilGrowingArrayUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "[I", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "[I", 0x9, 6, 9, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 6, 10, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 6, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(appendWithNSObjectArray:withInt:withId:);
  methods[1].selector = @selector(appendWithIntArray:withInt:withInt:);
  methods[2].selector = @selector(appendWithLongArray:withInt:withLong:);
  methods[3].selector = @selector(appendWithBooleanArray:withInt:withBoolean:);
  methods[4].selector = @selector(insertWithNSObjectArray:withInt:withInt:withId:);
  methods[5].selector = @selector(insertWithIntArray:withInt:withInt:withInt:);
  methods[6].selector = @selector(insertWithLongArray:withInt:withInt:withLong:);
  methods[7].selector = @selector(insertWithBooleanArray:withInt:withInt:withBoolean:);
  methods[8].selector = @selector(growSizeWithInt:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "append", "[LNSObject;ILNSObject;", "<T:Ljava/lang/Object;>([TT;ITT;)[TT;", "[III", "[JIJ", "[ZIZ", "insert", "[LNSObject;IILNSObject;", "<T:Ljava/lang/Object;>([TT;IITT;)[TT;", "[IIII", "[JIIJ", "[ZIIZ", "growSize", "I" };
  static const J2ObjcClassInfo _ComAndroidInternalUtilGrowingArrayUtils = { "GrowingArrayUtils", "com.android.internal.util", ptrTable, methods, NULL, 7, 0x11, 10, 0, -1, -1, -1, -1, -1 };
  return &_ComAndroidInternalUtilGrowingArrayUtils;
}

@end

IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:41 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSObjectArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedArrayWithIOSClass_withInt_([[array java_getClass] getComponentType], ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  IOSObjectArray_Set(nil_chk(array), currentSize, element);
  return array;
}

IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:58 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSIntArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSIntArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:73 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSLongArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedLongArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSLongArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:88 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSBooleanArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedBooleanArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSBooleanArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:111 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    IOSObjectArray_Set(array, index, element);
    return array;
  }
  IOSObjectArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedArrayWithIOSClass_withInt_([[array java_getClass] getComponentType], ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  IOSObjectArray_Set(nil_chk(newArray), index, element);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:132 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSIntArray_GetRef(array, index) = element;
    return array;
  }
  IOSIntArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSIntArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:151 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSLongArray_GetRef(array, index) = element;
    return array;
  }
  IOSLongArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedLongArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSLongArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:170 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSBooleanArray_GetRef(array, index) = element;
    return array;
  }
  IOSBooleanArray *newArray = ComAndroidInternalUtilArrayUtils_newUnpaddedBooleanArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSBooleanArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

jint ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(jint currentSize) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  return currentSize <= 4 ? 8 : currentSize * 2;
}

void ComAndroidInternalUtilGrowingArrayUtils_init(ComAndroidInternalUtilGrowingArrayUtils *self) {
  NSObject_init(self);
}

ComAndroidInternalUtilGrowingArrayUtils *new_ComAndroidInternalUtilGrowingArrayUtils_init() {
  J2OBJC_NEW_IMPL(ComAndroidInternalUtilGrowingArrayUtils, init)
}

ComAndroidInternalUtilGrowingArrayUtils *create_ComAndroidInternalUtilGrowingArrayUtils_init() {
  J2OBJC_CREATE_IMPL(ComAndroidInternalUtilGrowingArrayUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAndroidInternalUtilGrowingArrayUtils)
