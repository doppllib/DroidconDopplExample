//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsCancellationSignal.h"
#include "AndroidOsOperationCanceledException.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"

@interface AndroidOsCancellationSignal () {
 @public
  jboolean mIsCanceled_;
  id<AndroidOsCancellationSignal_OnCancelListener> mOnCancelListener_;
  jboolean mCancelInProgress_;
}

- (void)waitForCancelFinishedLocked;

@end

J2OBJC_FIELD_SETTER(AndroidOsCancellationSignal, mOnCancelListener_, id<AndroidOsCancellationSignal_OnCancelListener>)

__attribute__((unused)) static void AndroidOsCancellationSignal_waitForCancelFinishedLocked(AndroidOsCancellationSignal *self);

@interface AndroidOsCancellationSignal_OnCancelListener : NSObject

@end

@implementation AndroidOsCancellationSignal

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidOsCancellationSignal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isCanceled {
  @synchronized(self) {
    return mIsCanceled_;
  }
}

- (void)throwIfCanceled {
  if ([self isCanceled]) {
    @throw create_AndroidOsOperationCanceledException_init();
  }
}

- (void)cancel {
  id<AndroidOsCancellationSignal_OnCancelListener> listener;
  @synchronized(self) {
    if (mIsCanceled_) {
      return;
    }
    mIsCanceled_ = true;
    mCancelInProgress_ = true;
    listener = JreRetainedLocalValue(mOnCancelListener_);
  }
  @try {
    if (listener != nil) {
      [listener onCancel];
    }
  }
  @finally {
    @synchronized(self) {
      mCancelInProgress_ = false;
      [self java_notifyAll];
    }
  }
}

- (void)setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:(id<AndroidOsCancellationSignal_OnCancelListener>)listener {
  @synchronized(self) {
    AndroidOsCancellationSignal_waitForCancelFinishedLocked(self);
    if (mOnCancelListener_ == listener) {
      return;
    }
    JreStrongAssign(&mOnCancelListener_, listener);
    if (!mIsCanceled_ || listener == nil) {
      return;
    }
  }
  [listener onCancel];
}

- (void)waitForCancelFinishedLocked {
  AndroidOsCancellationSignal_waitForCancelFinishedLocked(self);
}

- (void)dealloc {
  RELEASE_(mOnCancelListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isCanceled);
  methods[2].selector = @selector(throwIfCanceled);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:);
  methods[5].selector = @selector(waitForCancelFinishedLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIsCanceled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnCancelListener_", "LAndroidOsCancellationSignal_OnCancelListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancelInProgress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setOnCancelListener", "LAndroidOsCancellationSignal_OnCancelListener;" };
  static const J2ObjcClassInfo _AndroidOsCancellationSignal = { "CancellationSignal", "android.os", ptrTable, methods, fields, 7, 0x11, 6, 3, -1, 1, -1, -1, -1 };
  return &_AndroidOsCancellationSignal;
}

@end

void AndroidOsCancellationSignal_init(AndroidOsCancellationSignal *self) {
  NSObject_init(self);
}

AndroidOsCancellationSignal *new_AndroidOsCancellationSignal_init() {
  J2OBJC_NEW_IMPL(AndroidOsCancellationSignal, init)
}

AndroidOsCancellationSignal *create_AndroidOsCancellationSignal_init() {
  J2OBJC_CREATE_IMPL(AndroidOsCancellationSignal, init)
}

void AndroidOsCancellationSignal_waitForCancelFinishedLocked(AndroidOsCancellationSignal *self) {
  while (self->mCancelInProgress_) {
    @try {
      [self java_wait];
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsCancellationSignal)

@implementation AndroidOsCancellationSignal_OnCancelListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCancel);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidOsCancellationSignal;" };
  static const J2ObjcClassInfo _AndroidOsCancellationSignal_OnCancelListener = { "OnCancelListener", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_AndroidOsCancellationSignal_OnCancelListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsCancellationSignal_OnCancelListener)
