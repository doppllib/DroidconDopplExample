//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidAppQueuedWork.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"

inline JavaUtilConcurrentConcurrentLinkedQueue *AndroidAppQueuedWork_get_sPendingWorkFinishers();
static JavaUtilConcurrentConcurrentLinkedQueue *AndroidAppQueuedWork_sPendingWorkFinishers;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidAppQueuedWork, sPendingWorkFinishers, JavaUtilConcurrentConcurrentLinkedQueue *)

inline id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_get_sSingleThreadExecutor();
inline id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_set_sSingleThreadExecutor(id<JavaUtilConcurrentExecutorService> value);
static id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_sSingleThreadExecutor;
J2OBJC_STATIC_FIELD_OBJ(AndroidAppQueuedWork, sSingleThreadExecutor, id<JavaUtilConcurrentExecutorService>)

J2OBJC_INITIALIZED_DEFN(AndroidAppQueuedWork)

@implementation AndroidAppQueuedWork

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidAppQueuedWork_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilConcurrentExecutorService>)singleThreadExecutor {
  return AndroidAppQueuedWork_singleThreadExecutor();
}

+ (void)addWithJavaLangRunnable:(id<JavaLangRunnable>)finisher {
  AndroidAppQueuedWork_addWithJavaLangRunnable_(finisher);
}

+ (void)removeWithJavaLangRunnable:(id<JavaLangRunnable>)finisher {
  AndroidAppQueuedWork_removeWithJavaLangRunnable_(finisher);
}

+ (void)waitToFinish {
  AndroidAppQueuedWork_waitToFinish();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(singleThreadExecutor);
  methods[2].selector = @selector(addWithJavaLangRunnable:);
  methods[3].selector = @selector(removeWithJavaLangRunnable:);
  methods[4].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sPendingWorkFinishers", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
    { "sSingleThreadExecutor", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LJavaLangRunnable;", "remove", &AndroidAppQueuedWork_sPendingWorkFinishers, "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Runnable;>;", &AndroidAppQueuedWork_sSingleThreadExecutor };
  static const J2ObjcClassInfo _AndroidAppQueuedWork = { "QueuedWork", "android.app", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_AndroidAppQueuedWork;
}

+ (void)initialize {
  if (self == [AndroidAppQueuedWork class]) {
    JreStrongAssignAndConsume(&AndroidAppQueuedWork_sPendingWorkFinishers, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
    JreStrongAssign(&AndroidAppQueuedWork_sSingleThreadExecutor, nil);
    J2OBJC_SET_INITIALIZED(AndroidAppQueuedWork)
  }
}

@end

void AndroidAppQueuedWork_init(AndroidAppQueuedWork *self) {
  NSObject_init(self);
}

AndroidAppQueuedWork *new_AndroidAppQueuedWork_init() {
  J2OBJC_NEW_IMPL(AndroidAppQueuedWork, init)
}

AndroidAppQueuedWork *create_AndroidAppQueuedWork_init() {
  J2OBJC_CREATE_IMPL(AndroidAppQueuedWork, init)
}

id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_singleThreadExecutor() {
  AndroidAppQueuedWork_initialize();
  @synchronized(AndroidAppQueuedWork_class_()) {
    if (AndroidAppQueuedWork_sSingleThreadExecutor == nil) {
      JreStrongAssign(&AndroidAppQueuedWork_sSingleThreadExecutor, JavaUtilConcurrentExecutors_newSingleThreadExecutor());
    }
    return JreRetainedLocalValue(AndroidAppQueuedWork_sSingleThreadExecutor);
  }
}

void AndroidAppQueuedWork_addWithJavaLangRunnable_(id<JavaLangRunnable> finisher) {
  AndroidAppQueuedWork_initialize();
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) addWithId:finisher];
}

void AndroidAppQueuedWork_removeWithJavaLangRunnable_(id<JavaLangRunnable> finisher) {
  AndroidAppQueuedWork_initialize();
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) removeWithId:finisher];
}

void AndroidAppQueuedWork_waitToFinish() {
  AndroidAppQueuedWork_initialize();
  id<JavaLangRunnable> toFinish;
  while ((toFinish = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) poll]) != nil) {
    [((id<JavaLangRunnable>) nil_chk(toFinish)) run];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppQueuedWork)
