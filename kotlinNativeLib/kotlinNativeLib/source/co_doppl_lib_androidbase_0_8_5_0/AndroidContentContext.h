//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidContentContext")
#ifdef RESTRICT_AndroidContentContext
#define INCLUDE_ALL_AndroidContentContext 0
#else
#define INCLUDE_ALL_AndroidContentContext 1
#endif
#undef RESTRICT_AndroidContentContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidContentContext_) && (INCLUDE_ALL_AndroidContentContext || defined(INCLUDE_AndroidContentContext))
#define AndroidContentContext_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsLooper;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoFileInputStream;
@class JavaIoFileOutputStream;
@protocol AndroidContentSharedPreferences;
@protocol AndroidDatabaseDatabaseErrorHandler;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@interface AndroidContentContext : NSObject

+ (jint)MODE_PRIVATE;

+ (jint)MODE_WORLD_READABLE;

+ (jint)MODE_WORLD_WRITEABLE;

+ (jint)MODE_APPEND;

+ (jint)MODE_ENABLE_WRITE_AHEAD_LOGGING;

#pragma mark Public

- (instancetype)init;

- (IOSObjectArray *)databaseList;

- (jboolean)deleteDatabaseWithNSString:(NSString *)name;

- (jboolean)deleteFileWithNSString:(NSString *)name;

- (IOSObjectArray *)fileList;

- (AndroidContentContext *)getApplicationContext;

- (JavaIoFile *)getCacheDir;

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name;

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode;

- (JavaIoFile * __nullable)getExternalFilesDirWithNSString:(NSString * __nullable)type;

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type;

- (JavaIoFile *)getFilesDir;

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name;

- (AndroidOsLooper *)getMainLooper;

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode;

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name;

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name;

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentContext)

inline jint AndroidContentContext_get_MODE_PRIVATE();
#define AndroidContentContext_MODE_PRIVATE 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_PRIVATE, jint)

inline jint AndroidContentContext_get_MODE_WORLD_READABLE();
#define AndroidContentContext_MODE_WORLD_READABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_WORLD_READABLE, jint)

inline jint AndroidContentContext_get_MODE_WORLD_WRITEABLE();
#define AndroidContentContext_MODE_WORLD_WRITEABLE 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_WORLD_WRITEABLE, jint)

inline jint AndroidContentContext_get_MODE_APPEND();
#define AndroidContentContext_MODE_APPEND 32768
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_APPEND, jint)

inline jint AndroidContentContext_get_MODE_ENABLE_WRITE_AHEAD_LOGGING();
#define AndroidContentContext_MODE_ENABLE_WRITE_AHEAD_LOGGING 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_ENABLE_WRITE_AHEAD_LOGGING, jint)

FOUNDATION_EXPORT void AndroidContentContext_init(AndroidContentContext *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidContentContext")
