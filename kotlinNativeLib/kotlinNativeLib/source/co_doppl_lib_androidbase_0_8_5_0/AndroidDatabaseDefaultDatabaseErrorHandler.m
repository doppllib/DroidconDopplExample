//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseDefaultDatabaseErrorHandler.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteException.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "android/util/Pair.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"
#include "java/util/List.h"

@interface AndroidDatabaseDefaultDatabaseErrorHandler ()

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName;

@end

inline NSString *AndroidDatabaseDefaultDatabaseErrorHandler_get_TAG();
static NSString *AndroidDatabaseDefaultDatabaseErrorHandler_TAG = @"DefaultDatabaseErrorHandler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseDefaultDatabaseErrorHandler, TAG, NSString *)

__attribute__((unused)) static void AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(AndroidDatabaseDefaultDatabaseErrorHandler *self, NSString *fileName);

@implementation AndroidDatabaseDefaultDatabaseErrorHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseDefaultDatabaseErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj {
  AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"Corruption reported by sqlite on database: ", [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(dbObj)) getPath]));
  if (![dbObj isOpen]) {
    AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, [dbObj getPath]);
    return;
  }
  id<JavaUtilList> attachedDbs = nil;
  @try {
    @try {
      attachedDbs = [dbObj getAttachedDbs];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
    }
    @try {
      [dbObj close];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
    }
  }
  @finally {
    if (attachedDbs != nil) {
      for (AndroidUtilPair * __strong p in attachedDbs) {
        AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, ((AndroidUtilPair *) nil_chk(p))->second_);
      }
    }
    else {
      AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, [dbObj getPath]);
    }
  }
}

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName {
  AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, fileName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[2].selector = @selector(deleteDatabaseFileWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "onCorruption", "LAndroidDatabaseSqliteSQLiteDatabase;", "deleteDatabaseFile", "LNSString;", &AndroidDatabaseDefaultDatabaseErrorHandler_TAG };
  static const J2ObjcClassInfo _AndroidDatabaseDefaultDatabaseErrorHandler = { "DefaultDatabaseErrorHandler", "android.database", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseDefaultDatabaseErrorHandler;
}

@end

void AndroidDatabaseDefaultDatabaseErrorHandler_init(AndroidDatabaseDefaultDatabaseErrorHandler *self) {
  NSObject_init(self);
}

AndroidDatabaseDefaultDatabaseErrorHandler *new_AndroidDatabaseDefaultDatabaseErrorHandler_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseDefaultDatabaseErrorHandler, init)
}

AndroidDatabaseDefaultDatabaseErrorHandler *create_AndroidDatabaseDefaultDatabaseErrorHandler_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDefaultDatabaseErrorHandler, init)
}

void AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(AndroidDatabaseDefaultDatabaseErrorHandler *self, NSString *fileName) {
  if ([((NSString *) nil_chk(fileName)) java_equalsIgnoreCase:@":memory:"] || [((NSString *) nil_chk([fileName java_trim])) java_length] == 0) {
    return;
  }
  AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"deleting the database file: ", fileName));
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(create_JavaIoFile_initWithNSString_(fileName));
  }
  @catch (JavaLangException *e) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"delete failed: ", [e getMessage]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDefaultDatabaseErrorHandler)
