//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidOsMessage")
#ifdef RESTRICT_AndroidOsMessage
#define INCLUDE_ALL_AndroidOsMessage 0
#else
#define INCLUDE_ALL_AndroidOsMessage 1
#endif
#undef RESTRICT_AndroidOsMessage

#if !defined (AndroidOsMessage_) && (INCLUDE_ALL_AndroidOsMessage || defined(INCLUDE_AndroidOsMessage))
#define AndroidOsMessage_

@class AndroidOsBundle;
@class AndroidOsHandler;
@protocol JavaLangRunnable;

@interface AndroidOsMessage : NSObject {
 @public
  jint what_;
  jint arg1_;
  jint arg2_;
  id obj_;
  jint flags_;
  jlong when_;
  AndroidOsBundle *data_;
  AndroidOsHandler *target_;
  id<JavaLangRunnable> callback_;
  AndroidOsMessage *next_;
}

+ (jint)FLAG_IN_USE;

+ (jint)FLAGS_RESERVED;

+ (jint)FLAGS_TO_CLEAR_ON_COPY_FROM;

#pragma mark Public

- (instancetype)init;

- (void)copyFromWithAndroidOsMessage:(AndroidOsMessage *)o OBJC_METHOD_FAMILY_NONE;

- (jint)describeContents;

- (id<JavaLangRunnable>)getCallback;

- (AndroidOsBundle *)getData;

- (AndroidOsHandler *)getTarget;

- (jlong)getWhen;

+ (AndroidOsMessage *)obtain;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2
                                          withId:(id)obj;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                          withId:(id)obj;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                            withJavaLangRunnable:(id<JavaLangRunnable>)callback;

+ (AndroidOsMessage *)obtainWithAndroidOsMessage:(AndroidOsMessage *)orig;

- (AndroidOsBundle *)peekData;

- (void)recycle;

- (void)sendToTarget;

- (void)setDataWithAndroidOsBundle:(AndroidOsBundle *)data;

- (void)setTargetWithAndroidOsHandler:(AndroidOsHandler *)target;

- (NSString *)description;

#pragma mark Package-Private

- (void)clearForRecycle;

- (jboolean)isInUse;

- (void)markInUse;

- (NSString *)toStringWithLong:(jlong)now;

@end

J2OBJC_STATIC_INIT(AndroidOsMessage)

J2OBJC_FIELD_SETTER(AndroidOsMessage, obj_, id)
J2OBJC_FIELD_SETTER(AndroidOsMessage, data_, AndroidOsBundle *)
J2OBJC_FIELD_SETTER(AndroidOsMessage, target_, AndroidOsHandler *)
J2OBJC_FIELD_SETTER(AndroidOsMessage, callback_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(AndroidOsMessage, next_, AndroidOsMessage *)

inline jint AndroidOsMessage_get_FLAG_IN_USE();
#define AndroidOsMessage_FLAG_IN_USE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAG_IN_USE, jint)

inline jint AndroidOsMessage_get_FLAGS_RESERVED();
#define AndroidOsMessage_FLAGS_RESERVED -2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAGS_RESERVED, jint)

inline jint AndroidOsMessage_get_FLAGS_TO_CLEAR_ON_COPY_FROM();
#define AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAGS_TO_CLEAR_ON_COPY_FROM, jint)

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtain();

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsMessage_(AndroidOsMessage *orig);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_(AndroidOsHandler *h);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(AndroidOsHandler *h, id<JavaLangRunnable> callback);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(AndroidOsHandler *h, jint what);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(AndroidOsHandler *h, jint what, id obj);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(AndroidOsHandler *h, jint what, jint arg1, jint arg2);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(AndroidOsHandler *h, jint what, jint arg1, jint arg2, id obj);

FOUNDATION_EXPORT void AndroidOsMessage_init(AndroidOsMessage *self);

FOUNDATION_EXPORT AndroidOsMessage *new_AndroidOsMessage_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsMessage *create_AndroidOsMessage_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsMessage)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidOsMessage")
