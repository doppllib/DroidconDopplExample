//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseAbstractCursor.h"
#include "AndroidDatabaseContentObserver.h"
#include "AndroidDatabaseCursor.h"
#include "AndroidDatabaseDataSetObserver.h"
#include "AndroidDatabaseMergeCursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface AndroidDatabaseMergeCursor () {
 @public
  AndroidDatabaseDataSetObserver *mObserver_;
  id<AndroidDatabaseCursor> mCursor_;
  IOSObjectArray *mCursors_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mObserver_, AndroidDatabaseDataSetObserver *)
J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mCursor_, id<AndroidDatabaseCursor>)
J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mCursors_, IOSObjectArray *)

@interface AndroidDatabaseMergeCursor_1 : AndroidDatabaseDataSetObserver {
 @public
  AndroidDatabaseMergeCursor *this$0_;
}

- (instancetype)initWithAndroidDatabaseMergeCursor:(AndroidDatabaseMergeCursor *)outer$;

- (void)onChanged;

- (void)onInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseMergeCursor_1)

__attribute__((unused)) static void AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor_1 *self, AndroidDatabaseMergeCursor *outer$);

__attribute__((unused)) static AndroidDatabaseMergeCursor_1 *new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseMergeCursor_1 *create_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$);

@implementation AndroidDatabaseMergeCursor

- (instancetype)initWithAndroidDatabaseCursorArray:(IOSObjectArray *)cursors {
  AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(self, cursors);
  return self;
}

- (jint)getCount {
  jint count = 0;
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      count += [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) getCount];
    }
  }
  return count;
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  JreStrongAssign(&mCursor_, nil);
  jint cursorStartPos = 0;
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) {
      continue;
    }
    if (newPosition < (cursorStartPos + [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) getCount])) {
      JreStrongAssign(&mCursor_, IOSObjectArray_Get(nil_chk(mCursors_), i));
      break;
    }
    cursorStartPos += [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(nil_chk(mCursors_), i))) getCount];
  }
  if (mCursor_ != nil) {
    jboolean ret = [mCursor_ moveToPositionWithInt:newPosition - cursorStartPos];
    return ret;
  }
  return false;
}

- (NSString *)getStringWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getStringWithInt:column];
}

- (jshort)getShortWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getShortWithInt:column];
}

- (jint)getIntWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getIntWithInt:column];
}

- (jlong)getLongWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getLongWithInt:column];
}

- (jfloat)getFloatWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getFloatWithInt:column];
}

- (jdouble)getDoubleWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getDoubleWithInt:column];
}

- (jint)getTypeWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getTypeWithInt:column];
}

- (jboolean)isNullWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isNullWithInt:column];
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getBlobWithInt:column];
}

- (IOSObjectArray *)getColumnNames {
  if (mCursor_ != nil) {
    return [mCursor_ getColumnNames];
  }
  else {
    return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
}

- (void)deactivate {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) deactivate];
    }
  }
  [super deactivate];
}

- (void)close {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) continue;
    [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) close];
  }
  [super close];
}

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) registerContentObserverWithAndroidDatabaseContentObserver:observer];
    }
  }
}

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) unregisterContentObserverWithAndroidDatabaseContentObserver:observer];
    }
  }
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) registerDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
    }
  }
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
    }
  }
}

- (jboolean)requery {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) {
      continue;
    }
    if ([((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) requery] == false) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseMergeCursor class]);
  RELEASE_(mObserver_);
  RELEASE_(mCursor_);
  RELEASE_(mCursors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseCursorArray:);
  methods[1].selector = @selector(getCount);
  methods[2].selector = @selector(onMoveWithInt:withInt:);
  methods[3].selector = @selector(getStringWithInt:);
  methods[4].selector = @selector(getShortWithInt:);
  methods[5].selector = @selector(getIntWithInt:);
  methods[6].selector = @selector(getLongWithInt:);
  methods[7].selector = @selector(getFloatWithInt:);
  methods[8].selector = @selector(getDoubleWithInt:);
  methods[9].selector = @selector(getTypeWithInt:);
  methods[10].selector = @selector(isNullWithInt:);
  methods[11].selector = @selector(getBlobWithInt:);
  methods[12].selector = @selector(getColumnNames);
  methods[13].selector = @selector(deactivate);
  methods[14].selector = @selector(close);
  methods[15].selector = @selector(registerContentObserverWithAndroidDatabaseContentObserver:);
  methods[16].selector = @selector(unregisterContentObserverWithAndroidDatabaseContentObserver:);
  methods[17].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[18].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[19].selector = @selector(requery);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mObserver_", "LAndroidDatabaseDataSetObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursor_", "LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursors_", "[LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LAndroidDatabaseCursor;", "onMove", "II", "getString", "I", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getType", "isNull", "getBlob", "registerContentObserver", "LAndroidDatabaseContentObserver;", "unregisterContentObserver", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver" };
  static const J2ObjcClassInfo _AndroidDatabaseMergeCursor = { "MergeCursor", "android.database", ptrTable, methods, fields, 7, 0x1, 20, 3, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseMergeCursor;
}

@end

void AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(AndroidDatabaseMergeCursor *self, IOSObjectArray *cursors) {
  AndroidDatabaseAbstractCursor_init(self);
  JreStrongAssignAndConsume(&self->mObserver_, new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(self));
  JreStrongAssign(&self->mCursors_, cursors);
  JreStrongAssign(&self->mCursor_, IOSObjectArray_Get(nil_chk(cursors), 0));
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->mCursors_))->size_; i++) {
    if (IOSObjectArray_Get(self->mCursors_, i) == nil) continue;
    [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(self->mCursors_, i))) registerDataSetObserverWithAndroidDatabaseDataSetObserver:self->mObserver_];
  }
}

AndroidDatabaseMergeCursor *new_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMergeCursor, initWithAndroidDatabaseCursorArray_, cursors)
}

AndroidDatabaseMergeCursor *create_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMergeCursor, initWithAndroidDatabaseCursorArray_, cursors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseMergeCursor)

@implementation AndroidDatabaseMergeCursor_1

- (instancetype)initWithAndroidDatabaseMergeCursor:(AndroidDatabaseMergeCursor *)outer$ {
  AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(self, outer$);
  return self;
}

- (void)onChanged {
  this$0_->mPos_ = -1;
}

- (void)onInvalidated {
  this$0_->mPos_ = -1;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseMergeCursor:);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseMergeCursor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseMergeCursor;" };
  static const J2ObjcClassInfo _AndroidDatabaseMergeCursor_1 = { "", "android.database", ptrTable, methods, fields, 7, 0x8018, 3, 1, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseMergeCursor_1;
}

@end

void AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor_1 *self, AndroidDatabaseMergeCursor *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidDatabaseDataSetObserver_init(self);
}

AndroidDatabaseMergeCursor_1 *new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMergeCursor_1, initWithAndroidDatabaseMergeCursor_, outer$)
}

AndroidDatabaseMergeCursor_1 *create_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMergeCursor_1, initWithAndroidDatabaseMergeCursor_, outer$)
}
