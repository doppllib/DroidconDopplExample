//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseConfiguration")
#ifdef RESTRICT_AndroidDatabaseSqliteSQLiteDatabaseConfiguration
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseConfiguration 0
#else
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseConfiguration 1
#endif
#undef RESTRICT_AndroidDatabaseSqliteSQLiteDatabaseConfiguration

#if !defined (AndroidDatabaseSqliteSQLiteDatabaseConfiguration_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseConfiguration || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseConfiguration))
#define AndroidDatabaseSqliteSQLiteDatabaseConfiguration_

@class JavaUtilArrayList;
@class JavaUtilLocale;

@interface AndroidDatabaseSqliteSQLiteDatabaseConfiguration : NSObject {
 @public
  NSString *path_;
  NSString *label_;
  jint openFlags_;
  jint maxSqlCacheSize_;
  JavaUtilLocale *locale_;
  jboolean foreignKeyConstraintsEnabled_;
  JavaUtilArrayList *customFunctions_;
}

+ (NSString *)MEMORY_DB_PATH;

#pragma mark Public

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other;

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags;

- (jboolean)isInMemoryDb;

- (void)updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, path_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, label_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, customFunctions_, JavaUtilArrayList *)

inline NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_get_MEMORY_DB_PATH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, MEMORY_DB_PATH, NSString *)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, NSString *path, jint openFlags);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseConfiguration")
