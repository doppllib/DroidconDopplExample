//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidNetUri.h"
#include "AndroidOsParcel.h"
#include "AndroidOsParcelable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URLEncoder.h"
#include "java/util/AbstractList.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidNetUri ()

- (instancetype)init;

+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow;

@end

inline NSString *AndroidNetUri_get_LOG();
static NSString *AndroidNetUri_LOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, LOG, NSString *)

inline NSString *AndroidNetUri_get_NOT_CACHED();
static NSString *AndroidNetUri_NOT_CACHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, NOT_CACHED, NSString *)

inline jint AndroidNetUri_get_NOT_FOUND();
#define AndroidNetUri_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NOT_FOUND, jint)

inline jint AndroidNetUri_get_NOT_CALCULATED();
#define AndroidNetUri_NOT_CALCULATED -2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NOT_CALCULATED, jint)

inline NSString *AndroidNetUri_get_NOT_HIERARCHICAL();
static NSString *AndroidNetUri_NOT_HIERARCHICAL = @"This isn't a hierarchical URI.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, NOT_HIERARCHICAL, NSString *)

inline NSString *AndroidNetUri_get_DEFAULT_ENCODING();
static NSString *AndroidNetUri_DEFAULT_ENCODING = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, DEFAULT_ENCODING, NSString *)

inline jint AndroidNetUri_get_NULL_TYPE_ID();
#define AndroidNetUri_NULL_TYPE_ID 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NULL_TYPE_ID, jint)

inline IOSCharArray *AndroidNetUri_get_HEX_DIGITS();
static IOSCharArray *AndroidNetUri_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static void AndroidNetUri_init(AndroidNetUri *self);

__attribute__((unused)) static jboolean AndroidNetUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow);

@interface AndroidNetUri_AbstractHierarchicalUri : AndroidNetUri {
 @public
  AndroidNetUri_Part *userInfo_;
  volatile_id host_;
  volatile_jint port_;
}

- (instancetype)init;

- (NSString *)getLastPathSegment;

- (AndroidNetUri_Part *)getUserInfoPart;

- (NSString *)getEncodedUserInfo;

- (NSString *)parseUserInfo;

- (NSString *)getUserInfo;

- (NSString *)getHost;

- (NSString *)parseHost;

- (jint)getPort;

- (jint)parsePort;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_AbstractHierarchicalUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_AbstractHierarchicalUri, userInfo_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_AbstractHierarchicalUri, host_, NSString *)

__attribute__((unused)) static void AndroidNetUri_AbstractHierarchicalUri_init(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_AbstractHierarchicalUri_parseHost(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static jint AndroidNetUri_AbstractHierarchicalUri_parsePort(AndroidNetUri_AbstractHierarchicalUri *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_AbstractHierarchicalUri)

@interface AndroidNetUri_StringUri : AndroidNetUri_AbstractHierarchicalUri {
 @public
  NSString *uriString_;
  volatile_jint cachedSsi_;
  volatile_jint cachedFsi_;
  volatile_id scheme_;
  AndroidNetUri_Part *ssp_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
}

- (instancetype)initWithNSString:(NSString *)uriString;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jint)findSchemeSeparator;

- (jint)findFragmentSeparator;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)parseScheme;

- (AndroidNetUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)parseSsp;

- (AndroidNetUri_Part *)getAuthorityPart;

- (NSString *)getEncodedAuthority;

- (NSString *)getAuthority;

- (AndroidNetUri_PathPart *)getPathPart;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)parsePath;

- (AndroidNetUri_Part *)getQueryPart;

- (NSString *)getEncodedQuery;

- (NSString *)parseQuery;

- (NSString *)getQuery;

- (AndroidNetUri_Part *)getFragmentPart;

- (NSString *)getEncodedFragment;

- (NSString *)parseFragment;

- (NSString *)getFragment;

- (NSString *)description;

+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi;

+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_StringUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, uriString_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_StringUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, ssp_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, fragment_, AndroidNetUri_Part *)

inline jint AndroidNetUri_StringUri_get_TYPE_ID();
#define AndroidNetUri_StringUri_TYPE_ID 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_StringUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_StringUri_initWithNSString_(AndroidNetUri_StringUri *self, NSString *uriString);

__attribute__((unused)) static AndroidNetUri_StringUri *new_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_StringUri *create_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

__attribute__((unused)) static jint AndroidNetUri_StringUri_findSchemeSeparator(AndroidNetUri_StringUri *self);

__attribute__((unused)) static jint AndroidNetUri_StringUri_findFragmentSeparator(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseScheme(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getSsp(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseSsp(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getAuthorityPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_PathPart *AndroidNetUri_StringUri_getPathPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parsePath(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getQueryPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseQuery(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getFragmentPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseFragment(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_StringUri)

@interface AndroidNetUri_OpaqueUri : AndroidNetUri {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *ssp_;
  AndroidNetUri_Part *fragment_;
  volatile_id cachedString_;
}

- (instancetype)initWithNSString:(NSString *)scheme
          withAndroidNetUri_Part:(AndroidNetUri_Part *)ssp
          withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)getLastPathSegment;

- (NSString *)getUserInfo;

- (NSString *)getEncodedUserInfo;

- (NSString *)getHost;

- (jint)getPort;

- (NSString *)description;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_OpaqueUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, ssp_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, fragment_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_OpaqueUri, cachedString_, NSString *)

inline jint AndroidNetUri_OpaqueUri_get_TYPE_ID();
#define AndroidNetUri_OpaqueUri_TYPE_ID 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_OpaqueUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_OpaqueUri *self, NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri_OpaqueUri *new_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_OpaqueUri *create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_OpaqueUri)

@interface AndroidNetUri_HierarchicalUri : AndroidNetUri_AbstractHierarchicalUri {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
  AndroidNetUri_Part *ssp_;
  volatile_id uriString_;
}

- (instancetype)initWithNSString:(NSString *)scheme
          withAndroidNetUri_Part:(AndroidNetUri_Part *)authority
      withAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path
          withAndroidNetUri_Part:(AndroidNetUri_Part *)query
          withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (AndroidNetUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)makeSchemeSpecificPart;

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getEncodedPath;

- (NSString *)getPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)description;

- (NSString *)makeUriString;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_HierarchicalUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, fragment_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, ssp_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_HierarchicalUri, uriString_, NSString *)

inline jint AndroidNetUri_HierarchicalUri_get_TYPE_ID();
#define AndroidNetUri_HierarchicalUri_TYPE_ID 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_HierarchicalUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_HierarchicalUri *self, NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri_HierarchicalUri *new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_HierarchicalUri *create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_HierarchicalUri_getSsp(AndroidNetUri_HierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(AndroidNetUri_HierarchicalUri *self);

__attribute__((unused)) static void AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(AndroidNetUri_HierarchicalUri *self, JavaLangStringBuilder *builder);

__attribute__((unused)) static NSString *AndroidNetUri_HierarchicalUri_makeUriString(AndroidNetUri_HierarchicalUri *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_HierarchicalUri)

@interface AndroidNetUri_Builder () {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *opaquePart_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
}

- (jboolean)hasSchemeOrAuthority;

@end

J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, opaquePart_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, fragment_, AndroidNetUri_Part *)

__attribute__((unused)) static jboolean AndroidNetUri_Builder_hasSchemeOrAuthority(AndroidNetUri_Builder *self);

@interface AndroidNetUri_1 : NSObject < AndroidOsParcelable_Creator >

- (instancetype)init;

- (AndroidNetUri *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_1)

__attribute__((unused)) static void AndroidNetUri_1_init(AndroidNetUri_1 *self);

__attribute__((unused)) static AndroidNetUri_1 *new_AndroidNetUri_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_1 *create_AndroidNetUri_1_init();

__attribute__((unused)) static NSString *AndroidNetUri_AbstractPart_getDecoded(AndroidNetUri_AbstractPart *self);

__attribute__((unused)) static void AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(AndroidNetUri_AbstractPart *self, AndroidOsParcel *parcel);

@interface AndroidNetUri_Part ()

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

@end

__attribute__((unused)) static void AndroidNetUri_Part_initWithNSString_withNSString_(AndroidNetUri_Part *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static AndroidNetUri_Part *new_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_Part *create_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

@interface AndroidNetUri_Part_EmptyPart : AndroidNetUri_Part

- (instancetype)initWithNSString:(NSString *)value;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_Part_EmptyPart)

__attribute__((unused)) static void AndroidNetUri_Part_EmptyPart_initWithNSString_(AndroidNetUri_Part_EmptyPart *self, NSString *value);

__attribute__((unused)) static AndroidNetUri_Part_EmptyPart *new_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_Part_EmptyPart *create_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_Part_EmptyPart)

@interface AndroidNetUri_PathPart () {
 @public
  AndroidNetUri_PathSegments *pathSegments_;
}

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

@end

J2OBJC_FIELD_SETTER(AndroidNetUri_PathPart, pathSegments_, AndroidNetUri_PathSegments *)

__attribute__((unused)) static void AndroidNetUri_PathPart_initWithNSString_withNSString_(AndroidNetUri_PathPart *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static AndroidNetUri_PathPart *new_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_PathPart *create_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

J2OBJC_INITIALIZED_DEFN(AndroidNetUri)

AndroidNetUri *AndroidNetUri_EMPTY;
id<AndroidOsParcelable_Creator> AndroidNetUri_CREATOR;

@implementation AndroidNetUri

+ (AndroidNetUri *)EMPTY {
  return AndroidNetUri_EMPTY;
}

+ (id<AndroidOsParcelable_Creator>)CREATOR {
  return AndroidNetUri_CREATOR;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isHierarchical {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isOpaque {
  return ![self isHierarchical];
}

- (jboolean)isRelative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAbsolute {
  return ![self isRelative];
}

- (NSString *)getScheme {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getHost {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getPathSegments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getLastPathSegment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[AndroidNetUri class]])) {
    return false;
  }
  AndroidNetUri *other = (AndroidNetUri *) cast_chk(o, [AndroidNetUri class]);
  return [((NSString *) nil_chk([self description])) isEqual:[((AndroidNetUri *) nil_chk(other)) description]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

- (jint)compareToWithId:(AndroidNetUri *)other {
  cast_chk(other, [AndroidNetUri class]);
  return [((NSString *) nil_chk([self description])) compareToWithId:[((AndroidNetUri *) nil_chk(other)) description]];
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toSafeString {
  NSString *scheme = [self getScheme];
  NSString *ssp = [self getSchemeSpecificPart];
  if (scheme != nil) {
    if ([scheme java_equalsIgnoreCase:@"tel"] || [scheme java_equalsIgnoreCase:@"sip"] || [scheme java_equalsIgnoreCase:@"sms"] || [scheme java_equalsIgnoreCase:@"smsto"] || [scheme java_equalsIgnoreCase:@"mailto"]) {
      JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
      [builder appendWithNSString:scheme];
      [builder appendWithChar:':'];
      if (ssp != nil) {
        for (jint i = 0; i < [ssp java_length]; i++) {
          jchar c = [ssp charAtWithInt:i];
          if (c == '-' || c == '@' || c == '.') {
            [builder appendWithChar:c];
          }
          else {
            [builder appendWithChar:'x'];
          }
        }
      }
      return [builder description];
    }
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
  if (scheme != nil) {
    [builder appendWithNSString:scheme];
    [builder appendWithChar:':'];
  }
  if (ssp != nil) {
    [builder appendWithNSString:ssp];
  }
  return [builder description];
}

- (AndroidNetUri_Builder *)buildUpon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (AndroidNetUri *)parseWithNSString:(NSString *)uriString {
  return AndroidNetUri_parseWithNSString_(uriString);
}

+ (AndroidNetUri *)fromFileWithJavaIoFile:(JavaIoFile *)file {
  return AndroidNetUri_fromFileWithJavaIoFile_(file);
}

+ (AndroidNetUri *)fromPartsWithNSString:(NSString *)scheme
                            withNSString:(NSString *)ssp
                            withNSString:(NSString *)fragment {
  return AndroidNetUri_fromPartsWithNSString_withNSString_withNSString_(scheme, ssp, fragment);
}

- (id<JavaUtilSet>)getQueryParameterNames {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return JavaUtilCollections_emptySet();
  }
  id<JavaUtilSet> names = create_JavaUtilLinkedHashSet_init();
  jint start = 0;
  do {
    jint next = [query java_indexOf:'&' fromIndex:start];
    jint end = (next == -1) ? [query java_length] : next;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    NSString *name = [query java_substring:start endIndex:separator];
    [names addWithId:AndroidNetUri_decodeWithNSString_(name)];
    start = end + 1;
  }
  while (start < [query java_length]);
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(names);
}

- (id<JavaUtilList>)getQueryParametersWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return JavaUtilCollections_emptyList();
  }
  NSString *encodedKey;
  @try {
    encodedKey = JavaNetURLEncoder_encodeWithNSString_withNSString_(key, AndroidNetUri_DEFAULT_ENCODING);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : [query java_length];
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        [values addWithId:@""];
      }
      else {
        [values addWithId:AndroidNetUri_decodeWithNSString_([query java_substring:separator + 1 endIndex:end])];
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(values);
}

- (NSString *)getQueryParameterWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return nil;
  }
  NSString *encodedKey = AndroidNetUri_encodeWithNSString_withNSString_(key, nil);
  jint length = [query java_length];
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : length;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        return @"";
      }
      else {
        NSString *encodedValue = [query java_substring:separator + 1 endIndex:end];
        @throw create_JavaLangUnsupportedOperationException_init();
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return nil;
}

- (jboolean)getBooleanQueryParameterWithNSString:(NSString *)key
                                     withBoolean:(jboolean)defaultValue {
  NSString *flag = [self getQueryParameterWithNSString:key];
  if (flag == nil) {
    return defaultValue;
  }
  flag = [flag java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  return (![@"false" isEqual:flag] && ![@"0" isEqual:flag]);
}

- (AndroidNetUri *)normalizeScheme {
  NSString *scheme = [self getScheme];
  if (scheme == nil) return self;
  NSString *lowerScheme = [scheme java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  if ([scheme isEqual:lowerScheme]) return self;
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([self buildUpon])) schemeWithNSString:lowerScheme])) build];
}

+ (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)outArg
                       withAndroidNetUri:(AndroidNetUri *)uri {
  AndroidNetUri_writeToParcelWithAndroidOsParcel_withAndroidNetUri_(outArg, uri);
}

+ (NSString *)encodeWithNSString:(NSString *)s {
  return AndroidNetUri_encodeWithNSString_(s);
}

+ (NSString *)encodeWithNSString:(NSString *)s
                    withNSString:(NSString *)allow {
  return AndroidNetUri_encodeWithNSString_withNSString_(s, allow);
}

+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow {
  return AndroidNetUri_isAllowedWithChar_withNSString_(c, allow);
}

+ (NSString *)decodeWithNSString:(NSString *)s {
  return AndroidNetUri_decodeWithNSString_(s);
}

+ (AndroidNetUri *)withAppendedPathWithAndroidNetUri:(AndroidNetUri *)baseUri
                                        withNSString:(NSString *)pathSegment {
  return AndroidNetUri_withAppendedPathWithAndroidNetUri_withNSString_(baseUri, pathSegment);
}

- (AndroidNetUri *)getCanonicalUri {
  if ([@"file" isEqual:[self getScheme]]) {
    NSString *canonicalPath;
    @try {
      canonicalPath = [create_JavaIoFile_initWithNSString_([self getPath]) getCanonicalPath];
    }
    @catch (JavaIoIOException *e) {
      return self;
    }
    return AndroidNetUri_fromFileWithJavaIoFile_(create_JavaIoFile_initWithNSString_(canonicalPath));
  }
  else {
    return self;
  }
}

- (void)checkFileUriExposedWithNSString:(NSString *)location {
}

- (jboolean)isPathPrefixMatchWithAndroidNetUri:(AndroidNetUri *)prefix {
  if (!JavaUtilObjects_equalsWithId_withId_([self getScheme], [((AndroidNetUri *) nil_chk(prefix)) getScheme])) return false;
  if (!JavaUtilObjects_equalsWithId_withId_([self getAuthority], [prefix getAuthority])) return false;
  id<JavaUtilList> seg = [self getPathSegments];
  id<JavaUtilList> prefixSeg = [prefix getPathSegments];
  jint prefixSize = [((id<JavaUtilList>) nil_chk(prefixSeg)) size];
  if ([((id<JavaUtilList>) nil_chk(seg)) size] < prefixSize) return false;
  for (jint i = 0; i < prefixSize; i++) {
    if (!JavaUtilObjects_equalsWithId_withId_([seg getWithInt:i], [prefixSeg getWithInt:i])) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 14, 8, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isHierarchical);
  methods[2].selector = @selector(isOpaque);
  methods[3].selector = @selector(isRelative);
  methods[4].selector = @selector(isAbsolute);
  methods[5].selector = @selector(getScheme);
  methods[6].selector = @selector(getSchemeSpecificPart);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getAuthority);
  methods[9].selector = @selector(getEncodedAuthority);
  methods[10].selector = @selector(getUserInfo);
  methods[11].selector = @selector(getEncodedUserInfo);
  methods[12].selector = @selector(getHost);
  methods[13].selector = @selector(getPort);
  methods[14].selector = @selector(getPath);
  methods[15].selector = @selector(getEncodedPath);
  methods[16].selector = @selector(getQuery);
  methods[17].selector = @selector(getEncodedQuery);
  methods[18].selector = @selector(getFragment);
  methods[19].selector = @selector(getEncodedFragment);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(getLastPathSegment);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(compareToWithId:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toSafeString);
  methods[27].selector = @selector(buildUpon);
  methods[28].selector = @selector(parseWithNSString:);
  methods[29].selector = @selector(fromFileWithJavaIoFile:);
  methods[30].selector = @selector(fromPartsWithNSString:withNSString:withNSString:);
  methods[31].selector = @selector(getQueryParameterNames);
  methods[32].selector = @selector(getQueryParametersWithNSString:);
  methods[33].selector = @selector(getQueryParameterWithNSString:);
  methods[34].selector = @selector(getBooleanQueryParameterWithNSString:withBoolean:);
  methods[35].selector = @selector(normalizeScheme);
  methods[36].selector = @selector(writeToParcelWithAndroidOsParcel:withAndroidNetUri:);
  methods[37].selector = @selector(encodeWithNSString:);
  methods[38].selector = @selector(encodeWithNSString:withNSString:);
  methods[39].selector = @selector(isAllowedWithChar:withNSString:);
  methods[40].selector = @selector(decodeWithNSString:);
  methods[41].selector = @selector(withAppendedPathWithAndroidNetUri:withNSString:);
  methods[42].selector = @selector(getCanonicalUri);
  methods[43].selector = @selector(checkFileUriExposedWithNSString:);
  methods[44].selector = @selector(isPathPrefixMatchWithAndroidNetUri:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "NOT_CACHED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "EMPTY", "LAndroidNetUri;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "NOT_FOUND", "I", .constantValue.asInt = AndroidNetUri_NOT_FOUND, 0x1a, -1, -1, -1, -1 },
    { "NOT_CALCULATED", "I", .constantValue.asInt = AndroidNetUri_NOT_CALCULATED, 0x1a, -1, -1, -1, -1 },
    { "NOT_HIERARCHICAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "DEFAULT_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "NULL_TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_NULL_TYPE_ID, 0x1a, -1, -1, -1, -1 },
    { "CREATOR", "LAndroidOsParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 35, 36, -1 },
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "equals", "LNSObject;", "hashCode", "compareTo", "LAndroidNetUri;", "toString", "parse", "LNSString;", "fromFile", "LJavaIoFile;", "fromParts", "LNSString;LNSString;LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "getQueryParameters", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "getQueryParameter", "getBooleanQueryParameter", "LNSString;Z", "writeToParcel", "LAndroidOsParcel;LAndroidNetUri;", "encode", "LNSString;LNSString;", "isAllowed", "CLNSString;", "decode", "withAppendedPath", "LAndroidNetUri;LNSString;", "checkFileUriExposed", "isPathPrefixMatch", &AndroidNetUri_LOG, &AndroidNetUri_NOT_CACHED, &AndroidNetUri_EMPTY, &AndroidNetUri_NOT_HIERARCHICAL, &AndroidNetUri_DEFAULT_ENCODING, &AndroidNetUri_CREATOR, "Landroid/os/Parcelable$Creator<Landroid/net/Uri;>;", &AndroidNetUri_HEX_DIGITS, "LAndroidNetUri_StringUri;LAndroidNetUri_OpaqueUri;LAndroidNetUri_PathSegments;LAndroidNetUri_PathSegmentsBuilder;LAndroidNetUri_AbstractHierarchicalUri;LAndroidNetUri_HierarchicalUri;LAndroidNetUri_Builder;LAndroidNetUri_AbstractPart;LAndroidNetUri_Part;LAndroidNetUri_PathPart;", "Ljava/lang/Object;Landroid/os/Parcelable;Ljava/lang/Comparable<Landroid/net/Uri;>;" };
  static const J2ObjcClassInfo _AndroidNetUri = { "Uri", "android.net", ptrTable, methods, fields, 7, 0x401, 45, 10, -1, 38, -1, 39, -1 };
  return &_AndroidNetUri;
}

+ (void)initialize {
  if (self == [AndroidNetUri class]) {
    JreStrongAssign(&AndroidNetUri_LOG, [AndroidNetUri_class_() getSimpleName]);
    JreStrongAssign(&AndroidNetUri_NOT_CACHED, @"NOT CACHED");
    JreStrongAssignAndConsume(&AndroidNetUri_EMPTY, new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(nil, JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_PathPart, EMPTY), JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_Part, NULL)));
    JreStrongAssignAndConsume(&AndroidNetUri_CREATOR, new_AndroidNetUri_1_init());
    JreStrongAssign(&AndroidNetUri_HEX_DIGITS, [@"0123456789ABCDEF" java_toCharArray]);
    J2OBJC_SET_INITIALIZED(AndroidNetUri)
  }
}

@end

void AndroidNetUri_init(AndroidNetUri *self) {
  NSObject_init(self);
}

AndroidNetUri *AndroidNetUri_parseWithNSString_(NSString *uriString) {
  AndroidNetUri_initialize();
  return create_AndroidNetUri_StringUri_initWithNSString_(uriString);
}

AndroidNetUri *AndroidNetUri_fromFileWithJavaIoFile_(JavaIoFile *file) {
  AndroidNetUri_initialize();
  if (file == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"file");
  }
  AndroidNetUri_PathPart *path = AndroidNetUri_PathPart_fromDecodedWithNSString_([file getAbsolutePath]);
  return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(@"file", JreLoadStatic(AndroidNetUri_Part, EMPTY), path, JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_Part, NULL));
}

AndroidNetUri *AndroidNetUri_fromPartsWithNSString_withNSString_withNSString_(NSString *scheme, NSString *ssp, NSString *fragment) {
  AndroidNetUri_initialize();
  if (scheme == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheme");
  }
  if (ssp == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"ssp");
  }
  return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme, AndroidNetUri_Part_fromDecodedWithNSString_(ssp), AndroidNetUri_Part_fromDecodedWithNSString_(fragment));
}

void AndroidNetUri_writeToParcelWithAndroidOsParcel_withAndroidNetUri_(AndroidOsParcel *outArg, AndroidNetUri *uri) {
  AndroidNetUri_initialize();
  if (uri == nil) {
    [((AndroidOsParcel *) nil_chk(outArg)) writeIntWithInt:AndroidNetUri_NULL_TYPE_ID];
  }
  else {
    [uri writeToParcelWithAndroidOsParcel:outArg withInt:0];
  }
}

NSString *AndroidNetUri_encodeWithNSString_(NSString *s) {
  AndroidNetUri_initialize();
  return AndroidNetUri_encodeWithNSString_withNSString_(s, nil);
}

NSString *AndroidNetUri_encodeWithNSString_withNSString_(NSString *s, NSString *allow) {
  AndroidNetUri_initialize();
  if (s == nil) {
    return nil;
  }
  JavaLangStringBuilder *encoded = nil;
  jint oldLength = [s java_length];
  jint current = 0;
  while (current < oldLength) {
    jint nextToEncode = current;
    while (nextToEncode < oldLength && AndroidNetUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextToEncode], allow)) {
      nextToEncode++;
    }
    if (nextToEncode == oldLength) {
      if (current == 0) {
        return s;
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(encoded)) appendWithJavaLangCharSequence:s withInt:current withInt:oldLength];
        return [encoded description];
      }
    }
    if (encoded == nil) {
      encoded = create_JavaLangStringBuilder_init();
    }
    if (nextToEncode > current) {
      [encoded appendWithJavaLangCharSequence:s withInt:current withInt:nextToEncode];
    }
    else {
    }
    current = nextToEncode;
    jint nextAllowed = current + 1;
    while (nextAllowed < oldLength && !AndroidNetUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextAllowed], allow)) {
      nextAllowed++;
    }
    NSString *toEncode = [s java_substring:current endIndex:nextAllowed];
    @try {
      IOSByteArray *bytes = [((NSString *) nil_chk(toEncode)) java_getBytesWithCharsetName:AndroidNetUri_DEFAULT_ENCODING];
      jint bytesLength = ((IOSByteArray *) nil_chk(bytes))->size_;
      for (jint i = 0; i < bytesLength; i++) {
        [encoded appendWithChar:'%'];
        [encoded appendWithChar:IOSCharArray_Get(nil_chk(AndroidNetUri_HEX_DIGITS), JreRShift32((IOSByteArray_Get(bytes, i) & (jint) 0xf0), 4))];
        [encoded appendWithChar:IOSCharArray_Get(AndroidNetUri_HEX_DIGITS, IOSByteArray_Get(bytes, i) & (jint) 0xf)];
      }
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw create_JavaLangAssertionError_initWithId_(e);
    }
    current = nextAllowed;
  }
  return encoded == nil ? s : [encoded description];
}

jboolean AndroidNetUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow) {
  AndroidNetUri_initialize();
  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || [@"_-!.~'()*" java_indexOf:c] != AndroidNetUri_NOT_FOUND || (allow != nil && [allow java_indexOf:c] != AndroidNetUri_NOT_FOUND);
}

NSString *AndroidNetUri_decodeWithNSString_(NSString *s) {
  AndroidNetUri_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

AndroidNetUri *AndroidNetUri_withAppendedPathWithAndroidNetUri_withNSString_(AndroidNetUri *baseUri, NSString *pathSegment) {
  AndroidNetUri_initialize();
  AndroidNetUri_Builder *builder = [((AndroidNetUri *) nil_chk(baseUri)) buildUpon];
  builder = [((AndroidNetUri_Builder *) nil_chk(builder)) appendEncodedPathWithNSString:pathSegment];
  return [((AndroidNetUri_Builder *) nil_chk(builder)) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri)

@implementation AndroidNetUri_AbstractHierarchicalUri

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getLastPathSegment {
  id<JavaUtilList> segments = [self getPathSegments];
  jint size = [((id<JavaUtilList>) nil_chk(segments)) size];
  if (size == 0) {
    return nil;
  }
  return [segments getWithInt:size - 1];
}

- (AndroidNetUri_Part *)getUserInfoPart {
  return AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self);
}

- (NSString *)getEncodedUserInfo {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self))) getEncoded];
}

- (NSString *)parseUserInfo {
  return AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(self);
}

- (NSString *)getUserInfo {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self)));
}

- (NSString *)getHost {
  jboolean cached = (JreLoadVolatileId(&host_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&host_) : (JreVolatileStrongAssign(&host_, AndroidNetUri_AbstractHierarchicalUri_parseHost(self)));
}

- (NSString *)parseHost {
  return AndroidNetUri_AbstractHierarchicalUri_parseHost(self);
}

- (jint)getPort {
  return JreLoadVolatileInt(&port_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&port_, AndroidNetUri_AbstractHierarchicalUri_parsePort(self)) : JreLoadVolatileInt(&port_);
}

- (jint)parsePort {
  return AndroidNetUri_AbstractHierarchicalUri_parsePort(self);
}

- (void)__javaClone:(AndroidNetUri_AbstractHierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&host_, &original->host_);
}

- (void)dealloc {
  RELEASE_(userInfo_);
  JreReleaseVolatile(&host_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLastPathSegment);
  methods[2].selector = @selector(getUserInfoPart);
  methods[3].selector = @selector(getEncodedUserInfo);
  methods[4].selector = @selector(parseUserInfo);
  methods[5].selector = @selector(getUserInfo);
  methods[6].selector = @selector(getHost);
  methods[7].selector = @selector(parseHost);
  methods[8].selector = @selector(getPort);
  methods[9].selector = @selector(parsePort);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "userInfo_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractHierarchicalUri = { "AbstractHierarchicalUri", "android.net", ptrTable, methods, fields, 7, 0x40a, 10, 3, 0, -1, -1, -1, -1 };
  return &_AndroidNetUri_AbstractHierarchicalUri;
}

@end

void AndroidNetUri_AbstractHierarchicalUri_init(AndroidNetUri_AbstractHierarchicalUri *self) {
  AndroidNetUri_init(self);
  JreVolatileStrongAssign(&self->host_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreAssignVolatileInt(&self->port_, AndroidNetUri_NOT_CALCULATED);
}

AndroidNetUri_Part *AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(AndroidNetUri_AbstractHierarchicalUri *self) {
  return self->userInfo_ == nil ? JreStrongAssign(&self->userInfo_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(self))) : self->userInfo_;
}

NSString *AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return nil;
  }
  jint end = [authority java_indexOf:'@'];
  return end == AndroidNetUri_NOT_FOUND ? nil : [authority java_substring:0 endIndex:end];
}

NSString *AndroidNetUri_AbstractHierarchicalUri_parseHost(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return nil;
  }
  jint userInfoSeparator = [authority java_indexOf:'@'];
  jint portSeparator = [authority java_indexOf:':' fromIndex:userInfoSeparator];
  NSString *encodedHost = portSeparator == AndroidNetUri_NOT_FOUND ? [authority java_substring:userInfoSeparator + 1] : [authority java_substring:userInfoSeparator + 1 endIndex:portSeparator];
  return AndroidNetUri_decodeWithNSString_(encodedHost);
}

jint AndroidNetUri_AbstractHierarchicalUri_parsePort(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return -1;
  }
  jint userInfoSeparator = [authority java_indexOf:'@'];
  jint portSeparator = [authority java_indexOf:':' fromIndex:userInfoSeparator];
  if (portSeparator == AndroidNetUri_NOT_FOUND) {
    return -1;
  }
  NSString *portString = AndroidNetUri_decodeWithNSString_([authority java_substring:portSeparator + 1]);
  @try {
    return JavaLangInteger_parseIntWithNSString_(portString);
  }
  @catch (JavaLangNumberFormatException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(JreLoadStatic(AndroidNetUri, LOG), @"Error parsing port string.", e);
    return -1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractHierarchicalUri)

@implementation AndroidNetUri_StringUri

- (instancetype)initWithNSString:(NSString *)uriString {
  AndroidNetUri_StringUri_initWithNSString_(self, uriString);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_StringUri_TYPE_ID];
  [parcel writeStringWithNSString:uriString_];
}

- (jint)findSchemeSeparator {
  return AndroidNetUri_StringUri_findSchemeSeparator(self);
}

- (jint)findFragmentSeparator {
  return AndroidNetUri_StringUri_findFragmentSeparator(self);
}

- (jboolean)isHierarchical {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  if (ssi == AndroidNetUri_NOT_FOUND) {
    return true;
  }
  if ([((NSString *) nil_chk(uriString_)) java_length] == ssi + 1) {
    return false;
  }
  return [uriString_ charAtWithInt:ssi + 1] == '/';
}

- (jboolean)isRelative {
  return AndroidNetUri_StringUri_findSchemeSeparator(self) == AndroidNetUri_NOT_FOUND;
}

- (NSString *)getScheme {
  jboolean cached = (JreLoadVolatileId(&scheme_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&scheme_) : (JreVolatileStrongAssign(&scheme_, AndroidNetUri_StringUri_parseScheme(self)));
}

- (NSString *)parseScheme {
  return AndroidNetUri_StringUri_parseScheme(self);
}

- (AndroidNetUri_Part *)getSsp {
  return AndroidNetUri_StringUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getSsp(self)));
}

- (NSString *)parseSsp {
  return AndroidNetUri_StringUri_parseSsp(self);
}

- (AndroidNetUri_Part *)getAuthorityPart {
  return AndroidNetUri_StringUri_getAuthorityPart(self);
}

- (NSString *)getEncodedAuthority {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getAuthorityPart(self))) getEncoded];
}

- (NSString *)getAuthority {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getAuthorityPart(self)));
}

- (AndroidNetUri_PathPart *)getPathPart {
  return AndroidNetUri_StringUri_getPathPart(self);
}

- (NSString *)getPath {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getPathPart(self)));
}

- (NSString *)getEncodedPath {
  return [((AndroidNetUri_PathPart *) nil_chk(AndroidNetUri_StringUri_getPathPart(self))) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((AndroidNetUri_PathPart *) nil_chk(AndroidNetUri_StringUri_getPathPart(self))) getPathSegments];
}

- (NSString *)parsePath {
  return AndroidNetUri_StringUri_parsePath(self);
}

- (AndroidNetUri_Part *)getQueryPart {
  return AndroidNetUri_StringUri_getQueryPart(self);
}

- (NSString *)getEncodedQuery {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getQueryPart(self))) getEncoded];
}

- (NSString *)parseQuery {
  return AndroidNetUri_StringUri_parseQuery(self);
}

- (NSString *)getQuery {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getQueryPart(self)));
}

- (AndroidNetUri_Part *)getFragmentPart {
  return AndroidNetUri_StringUri_getFragmentPart(self);
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getFragmentPart(self))) getEncoded];
}

- (NSString *)parseFragment {
  return AndroidNetUri_StringUri_parseFragment(self);
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getFragmentPart(self)));
}

- (NSString *)description {
  return uriString_;
}

+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi {
  return AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(uriString, ssi);
}

+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi {
  return AndroidNetUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

- (AndroidNetUri_Builder *)buildUpon {
  if ([self isHierarchical]) {
    return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:[self getScheme]])) authorityWithAndroidNetUri_Part:AndroidNetUri_StringUri_getAuthorityPart(self)])) pathWithAndroidNetUri_PathPart:AndroidNetUri_StringUri_getPathPart(self)])) queryWithAndroidNetUri_Part:AndroidNetUri_StringUri_getQueryPart(self)])) fragmentWithAndroidNetUri_Part:AndroidNetUri_StringUri_getFragmentPart(self)];
  }
  else {
    return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:[self getScheme]])) opaquePartWithAndroidNetUri_Part:AndroidNetUri_StringUri_getSsp(self)])) fragmentWithAndroidNetUri_Part:AndroidNetUri_StringUri_getFragmentPart(self)];
  }
}

- (void)__javaClone:(AndroidNetUri_StringUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&scheme_, &original->scheme_);
}

- (void)dealloc {
  RELEASE_(uriString_);
  JreReleaseVolatile(&scheme_);
  RELEASE_(ssp_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(findSchemeSeparator);
  methods[5].selector = @selector(findFragmentSeparator);
  methods[6].selector = @selector(isHierarchical);
  methods[7].selector = @selector(isRelative);
  methods[8].selector = @selector(getScheme);
  methods[9].selector = @selector(parseScheme);
  methods[10].selector = @selector(getSsp);
  methods[11].selector = @selector(getEncodedSchemeSpecificPart);
  methods[12].selector = @selector(getSchemeSpecificPart);
  methods[13].selector = @selector(parseSsp);
  methods[14].selector = @selector(getAuthorityPart);
  methods[15].selector = @selector(getEncodedAuthority);
  methods[16].selector = @selector(getAuthority);
  methods[17].selector = @selector(getPathPart);
  methods[18].selector = @selector(getPath);
  methods[19].selector = @selector(getEncodedPath);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(parsePath);
  methods[22].selector = @selector(getQueryPart);
  methods[23].selector = @selector(getEncodedQuery);
  methods[24].selector = @selector(parseQuery);
  methods[25].selector = @selector(getQuery);
  methods[26].selector = @selector(getFragmentPart);
  methods[27].selector = @selector(getEncodedFragment);
  methods[28].selector = @selector(parseFragment);
  methods[29].selector = @selector(getFragment);
  methods[30].selector = @selector(description);
  methods[31].selector = @selector(parseAuthorityWithNSString:withInt:);
  methods[32].selector = @selector(parsePathWithNSString:withInt:);
  methods[33].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_StringUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedSsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cachedFsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "parseAuthority", "LNSString;I", "parsePath", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_StringUri = { "StringUri", "android.net", ptrTable, methods, fields, 7, 0xa, 34, 10, 10, -1, -1, -1, -1 };
  return &_AndroidNetUri_StringUri;
}

@end

void AndroidNetUri_StringUri_initWithNSString_(AndroidNetUri_StringUri *self, NSString *uriString) {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  JreAssignVolatileInt(&self->cachedSsi_, AndroidNetUri_NOT_CALCULATED);
  JreAssignVolatileInt(&self->cachedFsi_, AndroidNetUri_NOT_CALCULATED);
  JreVolatileStrongAssign(&self->scheme_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  if (uriString == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"uriString");
  }
  JreStrongAssign(&self->uriString_, uriString);
}

AndroidNetUri_StringUri *new_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_NEW_IMPL(AndroidNetUri_StringUri, initWithNSString_, uriString)
}

AndroidNetUri_StringUri *create_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_StringUri, initWithNSString_, uriString)
}

AndroidNetUri *AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_StringUri_initialize();
  return create_AndroidNetUri_StringUri_initWithNSString_([((AndroidOsParcel *) nil_chk(parcel)) readString]);
}

jint AndroidNetUri_StringUri_findSchemeSeparator(AndroidNetUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedSsi_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedSsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:':']) : JreLoadVolatileInt(&self->cachedSsi_);
}

jint AndroidNetUri_StringUri_findFragmentSeparator(AndroidNetUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedFsi_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedFsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:'#' fromIndex:AndroidNetUri_StringUri_findSchemeSeparator(self)]) : JreLoadVolatileInt(&self->cachedFsi_);
}

NSString *AndroidNetUri_StringUri_parseScheme(AndroidNetUri_StringUri *self) {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  return ssi == AndroidNetUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:0 endIndex:ssi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getSsp(AndroidNetUri_StringUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseSsp(self))) : self->ssp_;
}

NSString *AndroidNetUri_StringUri_parseSsp(AndroidNetUri_StringUri *self) {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  return fsi == AndroidNetUri_NOT_FOUND ? [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1] : [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1 endIndex:fsi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getAuthorityPart(AndroidNetUri_StringUri *self) {
  if (self->authority_ == nil) {
    NSString *encodedAuthority = AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(self->uriString_, AndroidNetUri_StringUri_findSchemeSeparator(self));
    return JreStrongAssign(&self->authority_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedAuthority));
  }
  return self->authority_;
}

AndroidNetUri_PathPart *AndroidNetUri_StringUri_getPathPart(AndroidNetUri_StringUri *self) {
  return self->path_ == nil ? JreStrongAssign(&self->path_, AndroidNetUri_PathPart_fromEncodedWithNSString_(AndroidNetUri_StringUri_parsePath(self))) : self->path_;
}

NSString *AndroidNetUri_StringUri_parsePath(AndroidNetUri_StringUri *self) {
  NSString *uriString = self->uriString_;
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  if (ssi > -1) {
    jboolean schemeOnly = ssi + 1 == [((NSString *) nil_chk(uriString)) java_length];
    if (schemeOnly) {
      return nil;
    }
    if ([uriString charAtWithInt:ssi + 1] != '/') {
      return nil;
    }
  }
  else {
  }
  return AndroidNetUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getQueryPart(AndroidNetUri_StringUri *self) {
  return self->query_ == nil ? JreStrongAssign(&self->query_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseQuery(self))) : self->query_;
}

NSString *AndroidNetUri_StringUri_parseQuery(AndroidNetUri_StringUri *self) {
  jint qsi = [((NSString *) nil_chk(self->uriString_)) java_indexOf:'?' fromIndex:AndroidNetUri_StringUri_findSchemeSeparator(self)];
  if (qsi == AndroidNetUri_NOT_FOUND) {
    return nil;
  }
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  if (fsi == AndroidNetUri_NOT_FOUND) {
    return [self->uriString_ java_substring:qsi + 1];
  }
  if (fsi < qsi) {
    return nil;
  }
  return [self->uriString_ java_substring:qsi + 1 endIndex:fsi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getFragmentPart(AndroidNetUri_StringUri *self) {
  return self->fragment_ == nil ? JreStrongAssign(&self->fragment_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseFragment(self))) : self->fragment_;
}

NSString *AndroidNetUri_StringUri_parseFragment(AndroidNetUri_StringUri *self) {
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  return fsi == AndroidNetUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:fsi + 1];
}

NSString *AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi) {
  AndroidNetUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    jint end = ssi + 3;
    while (end < length) {
      switch ([uriString charAtWithInt:end]) {
        case '/':
        case '?':
        case '#':
        goto break_LOOP;
      }
      end++;
    }
    break_LOOP: ;
    return [uriString java_substring:ssi + 3 endIndex:end];
  }
  else {
    return nil;
  }
}

NSString *AndroidNetUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi) {
  AndroidNetUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  jint pathStart;
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    pathStart = ssi + 3;
    while (pathStart < length) {
      switch ([uriString charAtWithInt:pathStart]) {
        case '?':
        case '#':
        return @"";
        case '/':
        goto break_LOOP;
      }
      pathStart++;
    }
    break_LOOP: ;
  }
  else {
    pathStart = ssi + 1;
  }
  jint pathEnd = pathStart;
  while (pathEnd < length) {
    switch ([uriString charAtWithInt:pathEnd]) {
      case '?':
      case '#':
      goto break_LOOP_2;
    }
    pathEnd++;
  }
  break_LOOP_2: ;
  return [uriString java_substring:pathStart endIndex:pathEnd];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_StringUri)

@implementation AndroidNetUri_OpaqueUri

- (instancetype)initWithNSString:(NSString *)scheme
          withAndroidNetUri_Part:(AndroidNetUri_Part *)ssp
          withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(self, scheme, ssp, fragment);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_OpaqueUri_TYPE_ID];
  [parcel writeStringWithNSString:scheme_];
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(ssp_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(fragment_), parcel);
}

- (jboolean)isHierarchical {
  return false;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return self->scheme_;
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(ssp_)) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(ssp_));
}

- (NSString *)getAuthority {
  return nil;
}

- (NSString *)getEncodedAuthority {
  return nil;
}

- (NSString *)getPath {
  return nil;
}

- (NSString *)getEncodedPath {
  return nil;
}

- (NSString *)getQuery {
  return nil;
}

- (NSString *)getEncodedQuery {
  return nil;
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(fragment_));
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return JavaUtilCollections_emptyList();
}

- (NSString *)getLastPathSegment {
  return nil;
}

- (NSString *)getUserInfo {
  return nil;
}

- (NSString *)getEncodedUserInfo {
  return nil;
}

- (NSString *)getHost {
  return nil;
}

- (jint)getPort {
  return -1;
}

- (NSString *)description {
  jboolean cached = JreLoadVolatileId(&cachedString_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  if (cached) {
    return JreLoadVolatileId(&cachedString_);
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:scheme_])) appendWithChar:':'];
  [sb appendWithNSString:[self getEncodedSchemeSpecificPart]];
  if (![((AndroidNetUri_Part *) nil_chk(fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'#'])) appendWithNSString:[fragment_ getEncoded]];
  }
  return JreVolatileStrongAssign(&cachedString_, [sb description]);
}

- (AndroidNetUri_Builder *)buildUpon {
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:self->scheme_])) opaquePartWithAndroidNetUri_Part:self->ssp_])) fragmentWithAndroidNetUri_Part:self->fragment_];
}

- (void)__javaClone:(AndroidNetUri_OpaqueUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&cachedString_, &original->cachedString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(ssp_);
  RELEASE_(fragment_);
  JreReleaseVolatile(&cachedString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withAndroidNetUri_Part:withAndroidNetUri_Part:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(isHierarchical);
  methods[5].selector = @selector(isRelative);
  methods[6].selector = @selector(getScheme);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getSchemeSpecificPart);
  methods[9].selector = @selector(getAuthority);
  methods[10].selector = @selector(getEncodedAuthority);
  methods[11].selector = @selector(getPath);
  methods[12].selector = @selector(getEncodedPath);
  methods[13].selector = @selector(getQuery);
  methods[14].selector = @selector(getEncodedQuery);
  methods[15].selector = @selector(getFragment);
  methods[16].selector = @selector(getEncodedFragment);
  methods[17].selector = @selector(getPathSegments);
  methods[18].selector = @selector(getLastPathSegment);
  methods[19].selector = @selector(getUserInfo);
  methods[20].selector = @selector(getEncodedUserInfo);
  methods[21].selector = @selector(getHost);
  methods[22].selector = @selector(getPort);
  methods[23].selector = @selector(description);
  methods[24].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_OpaqueUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LAndroidNetUri_Part;LAndroidNetUri_Part;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_OpaqueUri = { "OpaqueUri", "android.net", ptrTable, methods, fields, 7, 0xa, 25, 5, 7, -1, -1, -1, -1 };
  return &_AndroidNetUri_OpaqueUri;
}

@end

void AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_OpaqueUri *self, NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  AndroidNetUri_init(self);
  JreVolatileStrongAssign(&self->cachedString_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->ssp_, ssp);
  JreStrongAssign(&self->fragment_, fragment == nil ? JreLoadStatic(AndroidNetUri_Part, NULL) : fragment);
}

AndroidNetUri_OpaqueUri *new_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  J2OBJC_NEW_IMPL(AndroidNetUri_OpaqueUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, ssp, fragment)
}

AndroidNetUri_OpaqueUri *create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_OpaqueUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, ssp, fragment)
}

AndroidNetUri *AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_OpaqueUri_initialize();
  return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_([((AndroidOsParcel *) nil_chk(parcel)) readString], AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_OpaqueUri)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_PathSegments)

AndroidNetUri_PathSegments *AndroidNetUri_PathSegments_EMPTY;

@implementation AndroidNetUri_PathSegments

+ (AndroidNetUri_PathSegments *)EMPTY {
  return AndroidNetUri_PathSegments_EMPTY;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)segments
                              withInt:(jint)size {
  AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(self, segments, size);
  return self;
}

- (NSString *)getWithInt:(jint)index {
  if (index >= size_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(segments_), index);
}

- (jint)size {
  return self->size_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "LAndroidNetUri_PathSegments;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "get", "I", &AndroidNetUri_PathSegments_EMPTY, "LAndroidNetUri;", "Ljava/util/AbstractList<Ljava/lang/String;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathSegments = { "PathSegments", "android.net", ptrTable, methods, fields, 7, 0x8, 3, 3, 4, -1, -1, 5, -1 };
  return &_AndroidNetUri_PathSegments;
}

+ (void)initialize {
  if (self == [AndroidNetUri_PathSegments class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_PathSegments_EMPTY, new_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(nil, 0));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_PathSegments)
  }
}

@end

void AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(AndroidNetUri_PathSegments *self, IOSObjectArray *segments, jint size) {
  JavaUtilAbstractList_init(self);
  JreStrongAssign(&self->segments_, segments);
  self->size_ = size;
}

AndroidNetUri_PathSegments *new_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

AndroidNetUri_PathSegments *create_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathSegments)

@implementation AndroidNetUri_PathSegmentsBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_PathSegmentsBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithNSString:(NSString *)segment {
  if (segments_ == nil) {
    JreStrongAssignAndConsume(&segments_, [IOSObjectArray newArrayWithLength:4 type:NSString_class_()]);
  }
  else if (size_ + 1 == segments_->size_) {
    IOSObjectArray *expanded = [IOSObjectArray arrayWithLength:segments_->size_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(segments_, 0, expanded, 0, segments_->size_);
    JreStrongAssign(&segments_, expanded);
  }
  IOSObjectArray_Set(segments_, size_++, segment);
}

- (AndroidNetUri_PathSegments *)build {
  if (segments_ == nil) {
    return JreLoadStatic(AndroidNetUri_PathSegments, EMPTY);
  }
  @try {
    return create_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(segments_, size_);
  }
  @finally {
    JreStrongAssign(&segments_, nil);
  }
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithNSString:);
  methods[2].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSString;", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathSegmentsBuilder = { "PathSegmentsBuilder", "android.net", ptrTable, methods, fields, 7, 0x8, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidNetUri_PathSegmentsBuilder;
}

@end

void AndroidNetUri_PathSegmentsBuilder_init(AndroidNetUri_PathSegmentsBuilder *self) {
  NSObject_init(self);
  self->size_ = 0;
}

AndroidNetUri_PathSegmentsBuilder *new_AndroidNetUri_PathSegmentsBuilder_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathSegmentsBuilder, init)
}

AndroidNetUri_PathSegmentsBuilder *create_AndroidNetUri_PathSegmentsBuilder_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathSegmentsBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathSegmentsBuilder)

@implementation AndroidNetUri_HierarchicalUri

- (instancetype)initWithNSString:(NSString *)scheme
          withAndroidNetUri_Part:(AndroidNetUri_Part *)authority
      withAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path
          withAndroidNetUri_Part:(AndroidNetUri_Part *)query
          withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(self, scheme, authority, path, query, fragment);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_HierarchicalUri_TYPE_ID];
  [parcel writeStringWithNSString:scheme_];
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(authority_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(path_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(query_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(fragment_), parcel);
}

- (jboolean)isHierarchical {
  return true;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return scheme_;
}

- (AndroidNetUri_Part *)getSsp {
  return AndroidNetUri_HierarchicalUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_HierarchicalUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_HierarchicalUri_getSsp(self)));
}

- (NSString *)makeSchemeSpecificPart {
  return AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(self);
}

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder {
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
}

- (NSString *)getAuthority {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->authority_));
}

- (NSString *)getEncodedAuthority {
  return [((AndroidNetUri_Part *) nil_chk(self->authority_)) getEncoded];
}

- (NSString *)getEncodedPath {
  return [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getEncoded];
}

- (NSString *)getPath {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->path_));
}

- (NSString *)getQuery {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->query_));
}

- (NSString *)getEncodedQuery {
  return [((AndroidNetUri_Part *) nil_chk(self->query_)) getEncoded];
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->fragment_));
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(self->fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getPathSegments];
}

- (NSString *)description {
  jboolean cached = (JreLoadVolatileId(&uriString_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&uriString_) : (JreVolatileStrongAssign(&uriString_, AndroidNetUri_HierarchicalUri_makeUriString(self)));
}

- (NSString *)makeUriString {
  return AndroidNetUri_HierarchicalUri_makeUriString(self);
}

- (AndroidNetUri_Builder *)buildUpon {
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:scheme_])) authorityWithAndroidNetUri_Part:authority_])) pathWithAndroidNetUri_PathPart:path_])) queryWithAndroidNetUri_Part:query_])) fragmentWithAndroidNetUri_Part:fragment_];
}

- (void)__javaClone:(AndroidNetUri_HierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&uriString_, &original->uriString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  RELEASE_(ssp_);
  JreReleaseVolatile(&uriString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withAndroidNetUri_Part:withAndroidNetUri_PathPart:withAndroidNetUri_Part:withAndroidNetUri_Part:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(isHierarchical);
  methods[5].selector = @selector(isRelative);
  methods[6].selector = @selector(getScheme);
  methods[7].selector = @selector(getSsp);
  methods[8].selector = @selector(getEncodedSchemeSpecificPart);
  methods[9].selector = @selector(getSchemeSpecificPart);
  methods[10].selector = @selector(makeSchemeSpecificPart);
  methods[11].selector = @selector(appendSspToWithJavaLangStringBuilder:);
  methods[12].selector = @selector(getAuthority);
  methods[13].selector = @selector(getEncodedAuthority);
  methods[14].selector = @selector(getEncodedPath);
  methods[15].selector = @selector(getPath);
  methods[16].selector = @selector(getQuery);
  methods[17].selector = @selector(getEncodedQuery);
  methods[18].selector = @selector(getFragment);
  methods[19].selector = @selector(getEncodedFragment);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(makeUriString);
  methods[23].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_HierarchicalUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LAndroidNetUri_Part;LAndroidNetUri_PathPart;LAndroidNetUri_Part;LAndroidNetUri_Part;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "appendSspTo", "LJavaLangStringBuilder;", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_HierarchicalUri = { "HierarchicalUri", "android.net", ptrTable, methods, fields, 7, 0xa, 24, 8, 9, -1, -1, -1, -1 };
  return &_AndroidNetUri_HierarchicalUri;
}

@end

void AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_HierarchicalUri *self, NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  JreVolatileStrongAssign(&self->uriString_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->authority_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(authority));
  JreStrongAssign(&self->path_, path == nil ? JreLoadStatic(AndroidNetUri_PathPart, NULL) : path);
  JreStrongAssign(&self->query_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(query));
  JreStrongAssign(&self->fragment_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(fragment));
}

AndroidNetUri_HierarchicalUri *new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  J2OBJC_NEW_IMPL(AndroidNetUri_HierarchicalUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, authority, path, query, fragment)
}

AndroidNetUri_HierarchicalUri *create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_HierarchicalUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, authority, path, query, fragment)
}

AndroidNetUri *AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_HierarchicalUri_initialize();
  return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_([((AndroidOsParcel *) nil_chk(parcel)) readString], AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel));
}

AndroidNetUri_Part *AndroidNetUri_HierarchicalUri_getSsp(AndroidNetUri_HierarchicalUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(self))) : self->ssp_;
}

NSString *AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(AndroidNetUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  return [builder description];
}

void AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(AndroidNetUri_HierarchicalUri *self, JavaLangStringBuilder *builder) {
  NSString *encodedAuthority = [((AndroidNetUri_Part *) nil_chk(self->authority_)) getEncoded];
  if (encodedAuthority != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"//"])) appendWithNSString:encodedAuthority];
  }
  NSString *encodedPath = [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getEncoded];
  if (encodedPath != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:encodedPath];
  }
  if (![((AndroidNetUri_Part *) nil_chk(self->query_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'?'])) appendWithNSString:[self->query_ getEncoded]];
  }
}

NSString *AndroidNetUri_HierarchicalUri_makeUriString(AndroidNetUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  if (self->scheme_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:self->scheme_])) appendWithChar:':'];
  }
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  if (![((AndroidNetUri_Part *) nil_chk(self->fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'#'])) appendWithNSString:[self->fragment_ getEncoded]];
  }
  return [builder description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_HierarchicalUri)

@implementation AndroidNetUri_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidNetUri_Builder *)schemeWithNSString:(NSString *)scheme {
  JreStrongAssign(&self->scheme_, scheme);
  return self;
}

- (AndroidNetUri_Builder *)opaquePartWithAndroidNetUri_Part:(AndroidNetUri_Part *)opaquePart {
  JreStrongAssign(&self->opaquePart_, opaquePart);
  return self;
}

- (AndroidNetUri_Builder *)opaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(opaquePart)];
}

- (AndroidNetUri_Builder *)encodedOpaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(opaquePart)];
}

- (AndroidNetUri_Builder *)authorityWithAndroidNetUri_Part:(AndroidNetUri_Part *)authority {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->authority_, authority);
  return self;
}

- (AndroidNetUri_Builder *)authorityWithNSString:(NSString *)authority {
  return [self authorityWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(authority)];
}

- (AndroidNetUri_Builder *)encodedAuthorityWithNSString:(NSString *)authority {
  return [self authorityWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(authority)];
}

- (AndroidNetUri_Builder *)pathWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->path_, path);
  return self;
}

- (AndroidNetUri_Builder *)pathWithNSString:(NSString *)path {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_fromDecodedWithNSString_(path)];
}

- (AndroidNetUri_Builder *)encodedPathWithNSString:(NSString *)path {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_fromEncodedWithNSString_(path)];
}

- (AndroidNetUri_Builder *)appendPathWithNSString:(NSString *)newSegment {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(path_, newSegment)];
}

- (AndroidNetUri_Builder *)appendEncodedPathWithNSString:(NSString *)newSegment {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(path_, newSegment)];
}

- (AndroidNetUri_Builder *)queryWithAndroidNetUri_Part:(AndroidNetUri_Part *)query {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->query_, query);
  return self;
}

- (AndroidNetUri_Builder *)queryWithNSString:(NSString *)query {
  return [self queryWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(query)];
}

- (AndroidNetUri_Builder *)encodedQueryWithNSString:(NSString *)query {
  return [self queryWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(query)];
}

- (AndroidNetUri_Builder *)fragmentWithAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  JreStrongAssign(&self->fragment_, fragment);
  return self;
}

- (AndroidNetUri_Builder *)fragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(fragment)];
}

- (AndroidNetUri_Builder *)encodedFragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(fragment)];
}

- (AndroidNetUri_Builder *)appendQueryParameterWithNSString:(NSString *)key
                                               withNSString:(NSString *)value {
  JreStrongAssign(&self->opaquePart_, nil);
  NSString *encodedParameter = JreStrcat("$C$", AndroidNetUri_encodeWithNSString_withNSString_(key, nil), '=', AndroidNetUri_encodeWithNSString_withNSString_(value, nil));
  if (query_ == nil) {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedParameter));
    return self;
  }
  NSString *oldQuery = [query_ getEncoded];
  if (oldQuery == nil || [oldQuery java_length] == 0) {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedParameter));
  }
  else {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(JreStrcat("$C$", oldQuery, '&', encodedParameter)));
  }
  return self;
}

- (AndroidNetUri_Builder *)clearQuery {
  return [self queryWithAndroidNetUri_Part:nil];
}

- (AndroidNetUri *)build {
  if (opaquePart_ != nil) {
    if (self->scheme_ == nil) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"An opaque URI must have a scheme.");
    }
    return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme_, opaquePart_, fragment_);
  }
  else {
    AndroidNetUri_PathPart *path = self->path_;
    if (path == nil || path == JreLoadStatic(AndroidNetUri_PathPart, NULL)) {
      path = JreLoadStatic(AndroidNetUri_PathPart, EMPTY);
    }
    else {
      if (AndroidNetUri_Builder_hasSchemeOrAuthority(self)) {
        path = AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(path);
      }
    }
    return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme_, authority_, path, query_, fragment_);
  }
}

- (jboolean)hasSchemeOrAuthority {
  return AndroidNetUri_Builder_hasSchemeOrAuthority(self);
}

- (NSString *)description {
  return [((AndroidNetUri *) nil_chk([self build])) description];
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(opaquePart_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 12, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(schemeWithNSString:);
  methods[2].selector = @selector(opaquePartWithAndroidNetUri_Part:);
  methods[3].selector = @selector(opaquePartWithNSString:);
  methods[4].selector = @selector(encodedOpaquePartWithNSString:);
  methods[5].selector = @selector(authorityWithAndroidNetUri_Part:);
  methods[6].selector = @selector(authorityWithNSString:);
  methods[7].selector = @selector(encodedAuthorityWithNSString:);
  methods[8].selector = @selector(pathWithAndroidNetUri_PathPart:);
  methods[9].selector = @selector(pathWithNSString:);
  methods[10].selector = @selector(encodedPathWithNSString:);
  methods[11].selector = @selector(appendPathWithNSString:);
  methods[12].selector = @selector(appendEncodedPathWithNSString:);
  methods[13].selector = @selector(queryWithAndroidNetUri_Part:);
  methods[14].selector = @selector(queryWithNSString:);
  methods[15].selector = @selector(encodedQueryWithNSString:);
  methods[16].selector = @selector(fragmentWithAndroidNetUri_Part:);
  methods[17].selector = @selector(fragmentWithNSString:);
  methods[18].selector = @selector(encodedFragmentWithNSString:);
  methods[19].selector = @selector(appendQueryParameterWithNSString:withNSString:);
  methods[20].selector = @selector(clearQuery);
  methods[21].selector = @selector(build);
  methods[22].selector = @selector(hasSchemeOrAuthority);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opaquePart_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "scheme", "LNSString;", "opaquePart", "LAndroidNetUri_Part;", "encodedOpaquePart", "authority", "encodedAuthority", "path", "LAndroidNetUri_PathPart;", "encodedPath", "appendPath", "appendEncodedPath", "query", "encodedQuery", "fragment", "encodedFragment", "appendQueryParameter", "LNSString;LNSString;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_Builder = { "Builder", "android.net", ptrTable, methods, fields, 7, 0x19, 24, 6, 19, -1, -1, -1, -1 };
  return &_AndroidNetUri_Builder;
}

@end

void AndroidNetUri_Builder_init(AndroidNetUri_Builder *self) {
  NSObject_init(self);
}

AndroidNetUri_Builder *new_AndroidNetUri_Builder_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_Builder, init)
}

AndroidNetUri_Builder *create_AndroidNetUri_Builder_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Builder, init)
}

jboolean AndroidNetUri_Builder_hasSchemeOrAuthority(AndroidNetUri_Builder *self) {
  return self->scheme_ != nil || (self->authority_ != nil && self->authority_ != JreLoadStatic(AndroidNetUri_Part, NULL));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Builder)

@implementation AndroidNetUri_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidNetUri *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg {
  jint type = [((AndroidOsParcel *) nil_chk(inArg)) readInt];
  switch (type) {
    case AndroidNetUri_NULL_TYPE_ID:
    return nil;
    case AndroidNetUri_StringUri_TYPE_ID:
    return AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(inArg);
    case AndroidNetUri_OpaqueUri_TYPE_ID:
    return AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(inArg);
    case AndroidNetUri_HierarchicalUri_TYPE_ID:
    return AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(inArg);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown URI type: ", type));
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:AndroidNetUri_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LAndroidNetUri;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "newArray", "I", "LAndroidNetUri;", "Ljava/lang/Object;Landroid/os/Parcelable$Creator<Landroid/net/Uri;>;" };
  static const J2ObjcClassInfo _AndroidNetUri_1 = { "", "android.net", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_AndroidNetUri_1;
}

@end

void AndroidNetUri_1_init(AndroidNetUri_1 *self) {
  NSObject_init(self);
}

AndroidNetUri_1 *new_AndroidNetUri_1_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_1, init)
}

AndroidNetUri_1 *create_AndroidNetUri_1_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_1, init)
}

@implementation AndroidNetUri_AbstractPart

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDecoded {
  return AndroidNetUri_AbstractPart_getDecoded(self);
}

- (void)writeToWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(self, parcel);
}

- (void)__javaClone:(AndroidNetUri_AbstractPart *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&encoded_, &original->encoded_);
  JreCloneVolatileStrong(&decoded_, &original->decoded_);
}

- (void)dealloc {
  JreReleaseVolatile(&encoded_);
  JreReleaseVolatile(&decoded_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getDecoded);
  methods[3].selector = @selector(writeToWithAndroidOsParcel:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "decoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "writeTo", "LAndroidOsParcel;", "LAndroidNetUri;", "LAndroidNetUri_AbstractPart_Representation;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractPart = { "AbstractPart", "android.net", ptrTable, methods, fields, 7, 0x408, 4, 2, 3, 4, -1, -1, -1 };
  return &_AndroidNetUri_AbstractPart;
}

@end

void AndroidNetUri_AbstractPart_initWithNSString_withNSString_(AndroidNetUri_AbstractPart *self, NSString *encoded, NSString *decoded) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->encoded_, encoded);
  JreVolatileStrongAssign(&self->decoded_, decoded);
}

NSString *AndroidNetUri_AbstractPart_getDecoded(AndroidNetUri_AbstractPart *self) {
  jboolean hasDecoded = JreLoadVolatileId(&self->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasDecoded ? JreLoadVolatileId(&self->decoded_) : (JreVolatileStrongAssign(&self->decoded_, AndroidNetUri_decodeWithNSString_(JreLoadVolatileId(&self->encoded_))));
}

void AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(AndroidNetUri_AbstractPart *self, AndroidOsParcel *parcel) {
  jboolean hasEncoded = JreLoadVolatileId(&self->encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  jboolean hasDecoded = JreLoadVolatileId(&self->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  if (hasEncoded && hasDecoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_BOTH];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->encoded_)];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->decoded_)];
  }
  else if (hasEncoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_ENCODED];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->encoded_)];
  }
  else if (hasDecoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_DECODED];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->decoded_)];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Neither encoded nor decoded");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractPart)

@implementation AndroidNetUri_AbstractPart_Representation

+ (jint)BOTH {
  return AndroidNetUri_AbstractPart_Representation_BOTH;
}

+ (jint)ENCODED {
  return AndroidNetUri_AbstractPart_Representation_ENCODED;
}

+ (jint)DECODED {
  return AndroidNetUri_AbstractPart_Representation_DECODED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidNetUri_AbstractPart_Representation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BOTH", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_BOTH, 0x18, -1, -1, -1, -1 },
    { "ENCODED", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_ENCODED, 0x18, -1, -1, -1, -1 },
    { "DECODED", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_DECODED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidNetUri_AbstractPart;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractPart_Representation = { "Representation", "android.net", ptrTable, methods, fields, 7, 0x8, 1, 3, 0, -1, -1, -1, -1 };
  return &_AndroidNetUri_AbstractPart_Representation;
}

@end

void AndroidNetUri_AbstractPart_Representation_init(AndroidNetUri_AbstractPart_Representation *self) {
  NSObject_init(self);
}

AndroidNetUri_AbstractPart_Representation *new_AndroidNetUri_AbstractPart_Representation_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_AbstractPart_Representation, init)
}

AndroidNetUri_AbstractPart_Representation *create_AndroidNetUri_AbstractPart_Representation_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_AbstractPart_Representation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractPart_Representation)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_Part)

AndroidNetUri_Part *AndroidNetUri_Part_NULL;
AndroidNetUri_Part *AndroidNetUri_Part_EMPTY;

@implementation AndroidNetUri_Part

+ (AndroidNetUri_Part *)NULL_ {
  return AndroidNetUri_Part_NULL;
}

+ (AndroidNetUri_Part *)EMPTY {
  return AndroidNetUri_Part_EMPTY;
}

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  AndroidNetUri_Part_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (jboolean)isEmpty {
  return false;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, AndroidNetUri_encodeWithNSString_(JreLoadVolatileId(&decoded_))));
}

+ (AndroidNetUri_Part *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel);
}

+ (AndroidNetUri_Part *)nonNullWithAndroidNetUri_Part:(AndroidNetUri_Part *)part {
  return AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(part);
}

+ (AndroidNetUri_Part *)fromEncodedWithNSString:(NSString *)encoded {
  return AndroidNetUri_Part_fromEncodedWithNSString_(encoded);
}

+ (AndroidNetUri_Part *)fromDecodedWithNSString:(NSString *)decoded {
  return AndroidNetUri_Part_fromDecodedWithNSString_(decoded);
}

+ (AndroidNetUri_Part *)fromWithNSString:(NSString *)encoded
                            withNSString:(NSString *)decoded {
  return AndroidNetUri_Part_fromWithNSString_withNSString_(encoded, decoded);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 7, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(getEncoded);
  methods[3].selector = @selector(readFromWithAndroidOsParcel:);
  methods[4].selector = @selector(nonNullWithAndroidNetUri_Part:);
  methods[5].selector = @selector(fromEncodedWithNSString:);
  methods[6].selector = @selector(fromDecodedWithNSString:);
  methods[7].selector = @selector(fromWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "EMPTY", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "readFrom", "LAndroidOsParcel;", "nonNull", "LAndroidNetUri_Part;", "fromEncoded", "LNSString;", "fromDecoded", "from", &AndroidNetUri_Part_NULL, &AndroidNetUri_Part_EMPTY, "LAndroidNetUri;", "LAndroidNetUri_Part_EmptyPart;" };
  static const J2ObjcClassInfo _AndroidNetUri_Part = { "Part", "android.net", ptrTable, methods, fields, 7, 0x8, 8, 2, 11, 12, -1, -1, -1 };
  return &_AndroidNetUri_Part;
}

+ (void)initialize {
  if (self == [AndroidNetUri_Part class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_Part_NULL, new_AndroidNetUri_Part_EmptyPart_initWithNSString_(nil));
    JreStrongAssignAndConsume(&AndroidNetUri_Part_EMPTY, new_AndroidNetUri_Part_EmptyPart_initWithNSString_(@""));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_Part)
  }
}

@end

void AndroidNetUri_Part_initWithNSString_withNSString_(AndroidNetUri_Part *self, NSString *encoded, NSString *decoded) {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

AndroidNetUri_Part *new_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(AndroidNetUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_Part *create_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_Part *AndroidNetUri_Part_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_Part_initialize();
  jint representation = [((AndroidOsParcel *) nil_chk(parcel)) readInt];
  switch (representation) {
    case AndroidNetUri_AbstractPart_Representation_BOTH:
    return AndroidNetUri_Part_fromWithNSString_withNSString_([parcel readString], [parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_ENCODED:
    return AndroidNetUri_Part_fromEncodedWithNSString_([parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_DECODED:
    return AndroidNetUri_Part_fromDecodedWithNSString_([parcel readString]);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown representation: ", representation));
  }
}

AndroidNetUri_Part *AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(AndroidNetUri_Part *part) {
  AndroidNetUri_Part_initialize();
  return part == nil ? AndroidNetUri_Part_NULL : part;
}

AndroidNetUri_Part *AndroidNetUri_Part_fromEncodedWithNSString_(NSString *encoded) {
  AndroidNetUri_Part_initialize();
  return AndroidNetUri_Part_fromWithNSString_withNSString_(encoded, JreLoadStatic(AndroidNetUri, NOT_CACHED));
}

AndroidNetUri_Part *AndroidNetUri_Part_fromDecodedWithNSString_(NSString *decoded) {
  AndroidNetUri_Part_initialize();
  return AndroidNetUri_Part_fromWithNSString_withNSString_(JreLoadStatic(AndroidNetUri, NOT_CACHED), decoded);
}

AndroidNetUri_Part *AndroidNetUri_Part_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  AndroidNetUri_Part_initialize();
  if (encoded == nil) {
    return AndroidNetUri_Part_NULL;
  }
  if ([encoded java_length] == 0) {
    return AndroidNetUri_Part_EMPTY;
  }
  if (decoded == nil) {
    return AndroidNetUri_Part_NULL;
  }
  if ([decoded java_length] == 0) {
    return AndroidNetUri_Part_EMPTY;
  }
  return create_AndroidNetUri_Part_initWithNSString_withNSString_(encoded, decoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Part)

@implementation AndroidNetUri_Part_EmptyPart

- (instancetype)initWithNSString:(NSString *)value {
  AndroidNetUri_Part_EmptyPart_initWithNSString_(self, value);
  return self;
}

- (jboolean)isEmpty {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidNetUri_Part;" };
  static const J2ObjcClassInfo _AndroidNetUri_Part_EmptyPart = { "EmptyPart", "android.net", ptrTable, methods, NULL, 7, 0xa, 2, 0, 1, -1, -1, -1, -1 };
  return &_AndroidNetUri_Part_EmptyPart;
}

@end

void AndroidNetUri_Part_EmptyPart_initWithNSString_(AndroidNetUri_Part_EmptyPart *self, NSString *value) {
  AndroidNetUri_Part_initWithNSString_withNSString_(self, value, value);
}

AndroidNetUri_Part_EmptyPart *new_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(AndroidNetUri_Part_EmptyPart, initWithNSString_, value)
}

AndroidNetUri_Part_EmptyPart *create_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Part_EmptyPart, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Part_EmptyPart)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_PathPart)

AndroidNetUri_PathPart *AndroidNetUri_PathPart_NULL;
AndroidNetUri_PathPart *AndroidNetUri_PathPart_EMPTY;

@implementation AndroidNetUri_PathPart

+ (AndroidNetUri_PathPart *)NULL_ {
  return AndroidNetUri_PathPart_NULL;
}

+ (AndroidNetUri_PathPart *)EMPTY {
  return AndroidNetUri_PathPart_EMPTY;
}

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  AndroidNetUri_PathPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, AndroidNetUri_encodeWithNSString_withNSString_(JreLoadVolatileId(&decoded_), @"/")));
}

- (AndroidNetUri_PathSegments *)getPathSegments {
  if (pathSegments_ != nil) {
    return pathSegments_;
  }
  NSString *path = [self getEncoded];
  if (path == nil) {
    return JreStrongAssign(&pathSegments_, JreLoadStatic(AndroidNetUri_PathSegments, EMPTY));
  }
  AndroidNetUri_PathSegmentsBuilder *segmentBuilder = create_AndroidNetUri_PathSegmentsBuilder_init();
  jint previous = 0;
  jint current;
  while ((current = [path java_indexOf:'/' fromIndex:previous]) > -1) {
    if (previous < current) {
      NSString *decodedSegment = AndroidNetUri_decodeWithNSString_([path java_substring:previous endIndex:current]);
      [segmentBuilder addWithNSString:decodedSegment];
    }
    previous = current + 1;
  }
  if (previous < [path java_length]) {
    [segmentBuilder addWithNSString:AndroidNetUri_decodeWithNSString_([path java_substring:previous])];
  }
  return JreStrongAssign(&pathSegments_, [segmentBuilder build]);
}

+ (AndroidNetUri_PathPart *)appendEncodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)newSegment {
  return AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, newSegment);
}

+ (AndroidNetUri_PathPart *)appendDecodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, decoded);
}

+ (AndroidNetUri_PathPart *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(parcel);
}

+ (AndroidNetUri_PathPart *)fromEncodedWithNSString:(NSString *)encoded {
  return AndroidNetUri_PathPart_fromEncodedWithNSString_(encoded);
}

+ (AndroidNetUri_PathPart *)fromDecodedWithNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_fromDecodedWithNSString_(decoded);
}

+ (AndroidNetUri_PathPart *)fromWithNSString:(NSString *)encoded
                                withNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(encoded, decoded);
}

+ (AndroidNetUri_PathPart *)makeAbsoluteWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart {
  return AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(oldPart);
}

- (void)dealloc {
  RELEASE_(pathSegments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 3, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 8, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 9, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getPathSegments);
  methods[3].selector = @selector(appendEncodedSegmentWithAndroidNetUri_PathPart:withNSString:);
  methods[4].selector = @selector(appendDecodedSegmentWithAndroidNetUri_PathPart:withNSString:);
  methods[5].selector = @selector(readFromWithAndroidOsParcel:);
  methods[6].selector = @selector(fromEncodedWithNSString:);
  methods[7].selector = @selector(fromDecodedWithNSString:);
  methods[8].selector = @selector(fromWithNSString:withNSString:);
  methods[9].selector = @selector(makeAbsoluteWithAndroidNetUri_PathPart:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "EMPTY", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
    { "pathSegments_", "LAndroidNetUri_PathSegments;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "appendEncodedSegment", "LAndroidNetUri_PathPart;LNSString;", "appendDecodedSegment", "readFrom", "LAndroidOsParcel;", "fromEncoded", "LNSString;", "fromDecoded", "from", "makeAbsolute", "LAndroidNetUri_PathPart;", &AndroidNetUri_PathPart_NULL, &AndroidNetUri_PathPart_EMPTY, "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathPart = { "PathPart", "android.net", ptrTable, methods, fields, 7, 0x8, 10, 3, 14, -1, -1, -1, -1 };
  return &_AndroidNetUri_PathPart;
}

+ (void)initialize {
  if (self == [AndroidNetUri_PathPart class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_PathPart_NULL, new_AndroidNetUri_PathPart_initWithNSString_withNSString_(nil, nil));
    JreStrongAssignAndConsume(&AndroidNetUri_PathPart_EMPTY, new_AndroidNetUri_PathPart_initWithNSString_withNSString_(@"", @""));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_PathPart)
  }
}

@end

void AndroidNetUri_PathPart_initWithNSString_withNSString_(AndroidNetUri_PathPart *self, NSString *encoded, NSString *decoded) {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

AndroidNetUri_PathPart *new_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_PathPart *create_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *newSegment) {
  AndroidNetUri_PathPart_initialize();
  if (oldPart == nil) {
    return AndroidNetUri_PathPart_fromEncodedWithNSString_(JreStrcat("C$", '/', newSegment));
  }
  NSString *oldPath = [oldPart getEncoded];
  if (oldPath == nil) {
    oldPath = @"";
  }
  jint oldPathLength = [oldPath java_length];
  NSString *newPath;
  if (oldPathLength == 0) {
    newPath = JreStrcat("C$", '/', newSegment);
  }
  else if ([oldPath charAtWithInt:oldPathLength - 1] == '/') {
    newPath = JreStrcat("$$", oldPath, newSegment);
  }
  else {
    newPath = JreStrcat("$C$", oldPath, '/', newSegment);
  }
  return AndroidNetUri_PathPart_fromEncodedWithNSString_(newPath);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  NSString *encoded = AndroidNetUri_encodeWithNSString_(decoded);
  return AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, encoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_PathPart_initialize();
  jint representation = [((AndroidOsParcel *) nil_chk(parcel)) readInt];
  switch (representation) {
    case AndroidNetUri_AbstractPart_Representation_BOTH:
    return AndroidNetUri_PathPart_fromWithNSString_withNSString_([parcel readString], [parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_ENCODED:
    return AndroidNetUri_PathPart_fromEncodedWithNSString_([parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_DECODED:
    return AndroidNetUri_PathPart_fromDecodedWithNSString_([parcel readString]);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Bad representation: ", representation));
  }
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromEncodedWithNSString_(NSString *encoded) {
  AndroidNetUri_PathPart_initialize();
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(encoded, JreLoadStatic(AndroidNetUri, NOT_CACHED));
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromDecodedWithNSString_(NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(JreLoadStatic(AndroidNetUri, NOT_CACHED), decoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  if (encoded == nil) {
    return AndroidNetUri_PathPart_NULL;
  }
  if ([encoded java_length] == 0) {
    return AndroidNetUri_PathPart_EMPTY;
  }
  return create_AndroidNetUri_PathPart_initWithNSString_withNSString_(encoded, decoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(AndroidNetUri_PathPart *oldPart) {
  AndroidNetUri_PathPart_initialize();
  jboolean encodedCached = JreLoadVolatileId(&((AndroidNetUri_PathPart *) nil_chk(oldPart))->encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  NSString *oldPath = encodedCached ? JreLoadVolatileId(&oldPart->encoded_) : JreLoadVolatileId(&oldPart->decoded_);
  if (oldPath == nil || [oldPath java_length] == 0 || [oldPath java_hasPrefix:@"/"]) {
    return oldPart;
  }
  NSString *newEncoded = encodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->encoded_)) : JreLoadStatic(AndroidNetUri, NOT_CACHED);
  jboolean decodedCached = JreLoadVolatileId(&oldPart->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  NSString *newDecoded = decodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->decoded_)) : JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return create_AndroidNetUri_PathPart_initWithNSString_withNSString_(newEncoded, newDecoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathPart)
