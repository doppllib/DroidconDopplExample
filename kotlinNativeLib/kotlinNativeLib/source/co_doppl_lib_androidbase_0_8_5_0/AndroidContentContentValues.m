//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContentValues.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"

@interface AndroidContentContentValues () {
 @public
  JavaUtilHashMap *mValues_;
}

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)values;

@end

J2OBJC_FIELD_SETTER(AndroidContentContentValues, mValues_, JavaUtilHashMap *)

__attribute__((unused)) static void AndroidContentContentValues_initWithJavaUtilHashMap_(AndroidContentContentValues *self, JavaUtilHashMap *values);

__attribute__((unused)) static AndroidContentContentValues *new_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidContentContentValues *create_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values);

__attribute__((unused)) static IOSObjectArray *AndroidContentContentValues__Annotations$0();

__attribute__((unused)) static IOSObjectArray *AndroidContentContentValues__Annotations$1();

NSString *AndroidContentContentValues_TAG = @"ContentValues";

@implementation AndroidContentContentValues

+ (NSString *)TAG {
  return AndroidContentContentValues_TAG;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidContentContentValues_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)size {
  AndroidContentContentValues_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithAndroidContentContentValues:(AndroidContentContentValues *)from {
  AndroidContentContentValues_initWithAndroidContentContentValues_(self, from);
  return self;
}

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  AndroidContentContentValues_initWithJavaUtilHashMap_(self, values);
  return self;
}

- (jboolean)isEqual:(id)object {
  if (!([object isKindOfClass:[AndroidContentContentValues class]])) {
    return false;
  }
  return [((JavaUtilHashMap *) nil_chk(mValues_)) isEqual:((AndroidContentContentValues *) nil_chk(((AndroidContentContentValues *) cast_chk(object, [AndroidContentContentValues class]))))->mValues_];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilHashMap *) nil_chk(mValues_)) hash]);
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putAllWithAndroidContentContentValues:(AndroidContentContentValues *)other {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putAllWithJavaUtilMap:((AndroidContentContentValues *) nil_chk(other))->mValues_];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putNullWithNSString:(NSString *)key {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:nil];
}

- (jint)size {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) size];
}

- (void)removeWithNSString:(NSString *)key {
  [((JavaUtilHashMap *) nil_chk(mValues_)) removeWithId:key];
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(mValues_)) clear];
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
}

- (NSString *)getAsStringWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  return value != nil ? [value description] : nil;
}

- (JavaLangLong *)getAsLongWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangLong_valueOfWithLong_([((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangLong_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Long value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Long: ", value), e);
      return nil;
    }
  }
}

- (JavaLangInteger *)getAsIntegerWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangInteger_valueOfWithInt_([((NSNumber *) cast_chk(value, [NSNumber class])) intValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangInteger_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Integer value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Integer: ", value), e);
      return nil;
    }
  }
}

- (JavaLangShort *)getAsShortWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangShort_valueOfWithShort_([((NSNumber *) cast_chk(value, [NSNumber class])) shortValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangShort_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Short value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Short: ", value), e);
      return nil;
    }
  }
}

- (JavaLangByte *)getAsByteWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangByte_valueOfWithByte_([((NSNumber *) cast_chk(value, [NSNumber class])) charValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangByte_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Byte value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Byte: ", value), e);
      return nil;
    }
  }
}

- (JavaLangDouble *)getAsDoubleWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangDouble_valueOfWithDouble_([((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangDouble_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Double value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Double: ", value), e);
      return nil;
    }
  }
}

- (JavaLangFloat *)getAsFloatWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangFloat_valueOfWithFloat_([((NSNumber *) cast_chk(value, [NSNumber class])) floatValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangFloat_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Float value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Float: ", value), e);
      return nil;
    }
  }
}

- (JavaLangBoolean *)getAsBooleanWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      return JavaLangBoolean_valueOfWithNSString_([nil_chk(value) description]);
    }
    else if ([value isKindOfClass:[NSNumber class]]) {
      return JavaLangBoolean_valueOfWithBoolean_([((NSNumber *) nil_chk(((NSNumber *) cast_chk(value, [NSNumber class])))) intValue] != 0);
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Boolean: ", value), e);
      return nil;
    }
  }
}

- (IOSByteArray *)getAsByteArrayWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  if ([value isKindOfClass:[IOSByteArray class]]) {
    return (IOSByteArray *) cast_chk(value, [IOSByteArray class]);
  }
  else {
    return nil;
  }
}

- (id<JavaUtilSet>)valueSet {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) entrySet];
}

- (id<JavaUtilSet>)keySet {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) keySet];
}

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key {
  return (JavaUtilArrayList *) cast_chk([((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key], [JavaUtilArrayList class]);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (NSString * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(mValues_)) keySet])) {
    NSString *value = [self getAsStringWithNSString:name];
    if ([sb java_length] > 0) [sb appendWithNSString:@" "];
    [sb appendWithNSString:JreStrcat("$C$", name, '=', value)];
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 25, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 27, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 28, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 29, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, 30, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 31, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 32, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, 36, 37, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 38, 19, -1, 39, 40, -1 },
    { NULL, "LNSString;", 0x1, 41, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithAndroidContentContentValues:);
  methods[3].selector = @selector(initWithJavaUtilHashMap:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(putWithNSString:withNSString:);
  methods[7].selector = @selector(putAllWithAndroidContentContentValues:);
  methods[8].selector = @selector(putWithNSString:withJavaLangByte:);
  methods[9].selector = @selector(putWithNSString:withJavaLangShort:);
  methods[10].selector = @selector(putWithNSString:withJavaLangInteger:);
  methods[11].selector = @selector(putWithNSString:withJavaLangLong:);
  methods[12].selector = @selector(putWithNSString:withJavaLangFloat:);
  methods[13].selector = @selector(putWithNSString:withJavaLangDouble:);
  methods[14].selector = @selector(putWithNSString:withJavaLangBoolean:);
  methods[15].selector = @selector(putWithNSString:withByteArray:);
  methods[16].selector = @selector(putNullWithNSString:);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(removeWithNSString:);
  methods[19].selector = @selector(clear);
  methods[20].selector = @selector(containsKeyWithNSString:);
  methods[21].selector = @selector(getWithNSString:);
  methods[22].selector = @selector(getAsStringWithNSString:);
  methods[23].selector = @selector(getAsLongWithNSString:);
  methods[24].selector = @selector(getAsIntegerWithNSString:);
  methods[25].selector = @selector(getAsShortWithNSString:);
  methods[26].selector = @selector(getAsByteWithNSString:);
  methods[27].selector = @selector(getAsDoubleWithNSString:);
  methods[28].selector = @selector(getAsFloatWithNSString:);
  methods[29].selector = @selector(getAsBooleanWithNSString:);
  methods[30].selector = @selector(getAsByteArrayWithNSString:);
  methods[31].selector = @selector(valueSet);
  methods[32].selector = @selector(keySet);
  methods[33].selector = @selector(putStringArrayListWithNSString:withJavaUtilArrayList:);
  methods[34].selector = @selector(getStringArrayListWithNSString:);
  methods[35].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "mValues_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 43, -1 },
  };
  static const void *ptrTable[] = { "I", "LAndroidContentContentValues;", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;)V", "equals", "LNSObject;", "hashCode", "put", "LNSString;LNSString;", "putAll", "LNSString;LJavaLangByte;", "LNSString;LJavaLangShort;", "LNSString;LJavaLangInteger;", "LNSString;LJavaLangLong;", "LNSString;LJavaLangFloat;", "LNSString;LJavaLangDouble;", "LNSString;LJavaLangBoolean;", "LNSString;[B", "putNull", "LNSString;", "remove", "containsKey", "get", "getAsString", "getAsLong", "getAsInteger", "getAsShort", "getAsByte", "getAsDouble", "getAsFloat", "getAsBoolean", "getAsByteArray", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "putStringArrayList", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", (void *)&AndroidContentContentValues__Annotations$0, "getStringArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;", (void *)&AndroidContentContentValues__Annotations$1, "toString", &AndroidContentContentValues_TAG, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _AndroidContentContentValues = { "ContentValues", "android.content", ptrTable, methods, fields, 7, 0x11, 36, 2, -1, -1, -1, -1, -1 };
  return &_AndroidContentContentValues;
}

@end

void AndroidContentContentValues_init(AndroidContentContentValues *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithInt_(8));
}

AndroidContentContentValues *new_AndroidContentContentValues_init() {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, init)
}

AndroidContentContentValues *create_AndroidContentContentValues_init() {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, init)
}

void AndroidContentContentValues_initWithInt_(AndroidContentContentValues *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithInt_withFloat_(size, 1.0f));
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithInt_, size)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithInt_, size)
}

void AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *self, AndroidContentContentValues *from) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithJavaUtilMap_(((AndroidContentContentValues *) nil_chk(from))->mValues_));
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithAndroidContentContentValues_, from)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithAndroidContentContentValues_, from)
}

void AndroidContentContentValues_initWithJavaUtilHashMap_(AndroidContentContentValues *self, JavaUtilHashMap *values) {
  NSObject_init(self);
  JreStrongAssign(&self->mValues_, values);
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithJavaUtilHashMap_, values)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithJavaUtilHashMap_, values)
}

IOSObjectArray *AndroidContentContentValues__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidContentContentValues__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidContentContentValues)
