//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseDatabaseUtils.h"
#include "AndroidDatabaseSqliteSQLiteClosable.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteProgram.h"
#include "AndroidDatabaseSqliteSQLiteSession.h"
#include "AndroidDatabaseSqliteSQLiteStatementInfo.h"
#include "AndroidOsCancellationSignal.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"

@interface AndroidDatabaseSqliteSQLiteProgram () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDatabase_;
  NSString *mSql_;
  jboolean mReadOnly_;
  IOSObjectArray *mColumnNames_;
  jint mNumParameters_;
  IOSObjectArray *mBindArgs_;
}

- (void)bindWithInt:(jint)index
             withId:(id)value;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mDatabase_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mColumnNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mBindArgs_, IOSObjectArray *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteProgram, EMPTY_STRING_ARRAY, IOSObjectArray *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram__Annotations$0();

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteProgram)

@implementation AndroidDatabaseSqliteSQLiteProgram

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)sql
                                          withNSObjectArray:(IOSObjectArray *)bindArgs
                            withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignalForPrepare {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(self, db, sql, bindArgs, cancellationSignalForPrepare);
  return self;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase {
  return mDatabase_;
}

- (NSString *)getSql {
  return mSql_;
}

- (IOSObjectArray *)getBindArgs {
  return mBindArgs_;
}

- (IOSObjectArray *)getColumnNames {
  return mColumnNames_;
}

- (AndroidDatabaseSqliteSQLiteSession *)getSession {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadSession];
}

- (jint)getConnectionFlags {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadDefaultConnectionFlagsWithBoolean:mReadOnly_];
}

- (void)onCorruption {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) onCorruption];
}

- (jint)getUniqueId {
  return -1;
}

- (void)bindNullWithInt:(jint)index {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, nil);
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangLong_valueOfWithLong_(value));
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangDouble_valueOfWithDouble_(value));
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)clearBindings {
  if (mBindArgs_ != nil) {
    JavaUtilArrays_fillWithNSObjectArray_withId_(mBindArgs_, nil);
  }
}

- (void)bindAllArgsAsStringsWithNSStringArray:(IOSObjectArray *)bindArgs {
  if (bindArgs != nil) {
    for (jint i = bindArgs->size_; i != 0; i--) {
      [self bindStringWithInt:i withNSString:IOSObjectArray_Get(bindArgs, i - 1)];
    }
  }
}

- (void)onAllReferencesReleased {
  [self clearBindings];
}

- (void)bindWithInt:(jint)index
             withId:(id)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)dealloc {
  RELEASE_(mDatabase_);
  RELEASE_(mSql_);
  RELEASE_(mColumnNames_);
  RELEASE_(mBindArgs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[1].selector = @selector(getDatabase);
  methods[2].selector = @selector(getSql);
  methods[3].selector = @selector(getBindArgs);
  methods[4].selector = @selector(getColumnNames);
  methods[5].selector = @selector(getSession);
  methods[6].selector = @selector(getConnectionFlags);
  methods[7].selector = @selector(onCorruption);
  methods[8].selector = @selector(getUniqueId);
  methods[9].selector = @selector(bindNullWithInt:);
  methods[10].selector = @selector(bindLongWithInt:withLong:);
  methods[11].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[12].selector = @selector(bindStringWithInt:withNSString:);
  methods[13].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[14].selector = @selector(clearBindings);
  methods[15].selector = @selector(bindAllArgsAsStringsWithNSStringArray:);
  methods[16].selector = @selector(onAllReferencesReleased);
  methods[17].selector = @selector(bindWithInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "mDatabase_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mReadOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumnNames_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNumParameters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSObject;LAndroidOsCancellationSignal;", (void *)&AndroidDatabaseSqliteSQLiteProgram__Annotations$0, "bindNull", "I", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindBlob", "I[B", "bindAllArgsAsStrings", "[LNSString;", "bind", "ILNSObject;", &AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteProgram = { "SQLiteProgram", "android.database.sqlite", ptrTable, methods, fields, 7, 0x401, 18, 7, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteProgram;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteProgram class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteProgram)
  }
}

@end

void AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteProgram *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs, AndroidOsCancellationSignal *cancellationSignalForPrepare) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  JreStrongAssign(&self->mDatabase_, db);
  JreStrongAssign(&self->mSql_, [((NSString *) nil_chk(sql)) java_trim]);
  jint n = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(self->mSql_);
  {
    jboolean assumeReadOnly;
    AndroidDatabaseSqliteSQLiteStatementInfo *info;
    switch (n) {
      case AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN:
      case AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT:
      case AndroidDatabaseDatabaseUtils_STATEMENT_ABORT:
      self->mReadOnly_ = false;
      JreStrongAssign(&self->mColumnNames_, AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY);
      self->mNumParameters_ = 0;
      break;
      default:
      assumeReadOnly = (n == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT);
      info = create_AndroidDatabaseSqliteSQLiteStatementInfo_init();
      [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getThreadSession])) prepareWithNSString:self->mSql_ withInt:[db getThreadDefaultConnectionFlagsWithBoolean:assumeReadOnly] withAndroidOsCancellationSignal:cancellationSignalForPrepare withAndroidDatabaseSqliteSQLiteStatementInfo:info];
      self->mReadOnly_ = info->readOnly_;
      JreStrongAssign(&self->mColumnNames_, info->columnNames_);
      self->mNumParameters_ = info->numParameters_;
      break;
    }
  }
  if (bindArgs != nil && bindArgs->size_ > self->mNumParameters_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Too many bind arguments.  ", bindArgs->size_, @" arguments were provided but the statement needs ", self->mNumParameters_, @" arguments."));
  }
  if (self->mNumParameters_ != 0) {
    JreStrongAssignAndConsume(&self->mBindArgs_, [IOSObjectArray newArrayWithLength:self->mNumParameters_ type:NSObject_class_()]);
    if (bindArgs != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bindArgs, 0, self->mBindArgs_, 0, bindArgs->size_);
    }
  }
  else {
    JreStrongAssign(&self->mBindArgs_, nil);
  }
}

void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value) {
  if (index < 1 || index > self->mNumParameters_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Cannot bind argument at index ", index, @" because the index is out of range.  The statement has ", self->mNumParameters_, @" parameters."));
  }
  IOSObjectArray_Set(nil_chk(self->mBindArgs_), index - 1, value);
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteProgram)
