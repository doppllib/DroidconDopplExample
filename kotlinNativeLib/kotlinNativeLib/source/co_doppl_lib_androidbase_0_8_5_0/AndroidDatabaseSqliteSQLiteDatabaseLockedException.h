//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseLockedException")
#ifdef RESTRICT_AndroidDatabaseSqliteSQLiteDatabaseLockedException
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseLockedException 0
#else
#define INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseLockedException 1
#endif
#undef RESTRICT_AndroidDatabaseSqliteSQLiteDatabaseLockedException

#if !defined (AndroidDatabaseSqliteSQLiteDatabaseLockedException_) && (INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseLockedException || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseLockedException))
#define AndroidDatabaseSqliteSQLiteDatabaseLockedException_

#define RESTRICT_AndroidDatabaseSqliteSQLiteException 1
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#include "AndroidDatabaseSqliteSQLiteException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDatabaseLockedException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabaseLockedException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init();

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabaseLockedException)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidDatabaseSqliteSQLiteDatabaseLockedException")
