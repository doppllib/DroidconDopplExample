//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsHandlerThread.h"
#include "AndroidOsLooper.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"

@implementation AndroidOsHandlerThread

- (instancetype)initWithNSString:(NSString *)name {
  AndroidOsHandlerThread_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)priority {
  AndroidOsHandlerThread_initWithNSString_withInt_(self, name, priority);
  return self;
}

- (void)onLooperPrepared {
}

- (void)run {
  AndroidOsLooper_prepare();
  @synchronized(self) {
    JreStrongAssign(&mLooper_, AndroidOsLooper_myLooper());
    [self java_notifyAll];
  }
  [self onLooperPrepared];
  AndroidOsLooper_loop();
}

- (AndroidOsLooper *)getLooper {
  if (![self isAlive]) {
    return nil;
  }
  @synchronized(self) {
    while ([self isAlive] && mLooper_ == nil) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
  return mLooper_;
}

- (jboolean)quit {
  AndroidOsLooper *looper = [self getLooper];
  if (looper != nil) {
    [looper quit];
    return true;
  }
  return false;
}

- (jint)getThreadId {
  return -1;
}

- (void)dealloc {
  RELEASE_(mLooper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(onLooperPrepared);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(getLooper);
  methods[5].selector = @selector(quit);
  methods[6].selector = @selector(getThreadId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPriority_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLooper_", "LAndroidOsLooper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;I" };
  static const J2ObjcClassInfo _AndroidOsHandlerThread = { "HandlerThread", "android.os", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_AndroidOsHandlerThread;
}

@end

void AndroidOsHandlerThread_initWithNSString_(AndroidOsHandlerThread *self, NSString *name) {
  JavaLangThread_initWithNSString_(self, name);
  self->mPriority_ = 0;
}

AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidOsHandlerThread, initWithNSString_, name)
}

AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidOsHandlerThread, initWithNSString_, name)
}

void AndroidOsHandlerThread_initWithNSString_withInt_(AndroidOsHandlerThread *self, NSString *name, jint priority) {
  JavaLangThread_initWithNSString_(self, name);
  self->mPriority_ = priority;
}

AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_NEW_IMPL(AndroidOsHandlerThread, initWithNSString_withInt_, name, priority)
}

AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_CREATE_IMPL(AndroidOsHandlerThread, initWithNSString_withInt_, name, priority)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsHandlerThread)
