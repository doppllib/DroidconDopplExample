//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidTelephonyPhoneNumberUtils")
#ifdef RESTRICT_AndroidTelephonyPhoneNumberUtils
#define INCLUDE_ALL_AndroidTelephonyPhoneNumberUtils 0
#else
#define INCLUDE_ALL_AndroidTelephonyPhoneNumberUtils 1
#endif
#undef RESTRICT_AndroidTelephonyPhoneNumberUtils

#if !defined (AndroidTelephonyPhoneNumberUtils_) && (INCLUDE_ALL_AndroidTelephonyPhoneNumberUtils || defined(INCLUDE_AndroidTelephonyPhoneNumberUtils))
#define AndroidTelephonyPhoneNumberUtils_

@class IOSByteArray;
@class JavaUtilLocale;
@protocol AndroidTextEditable;

@interface AndroidTelephonyPhoneNumberUtils : NSObject

+ (jchar)PAUSE;

+ (jchar)WAIT;

+ (jchar)WILD;

+ (jint)TOA_International;

+ (jint)TOA_Unknown;

+ (NSString *)LOG_TAG;

+ (jint)FORMAT_UNKNOWN;

+ (jint)FORMAT_NANP;

+ (jint)FORMAT_JAPAN;

+ (jint)MIN_MATCH;

#pragma mark Public

- (instancetype)init;

+ (NSString *)calledPartyBCDFragmentToStringWithByteArray:(IOSByteArray *)bytes
                                                  withInt:(jint)offset
                                                  withInt:(jint)length;

+ (NSString *)calledPartyBCDToStringWithByteArray:(IOSByteArray *)bytes
                                          withInt:(jint)offset
                                          withInt:(jint)length;

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b;

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b
                    withBoolean:(jboolean)useStrictComparation;

+ (jboolean)compareLooselyWithNSString:(NSString *)a
                          withNSString:(NSString *)b;

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b;

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b
                            withBoolean:(jboolean)acceptInvalidCCCPrefix;

+ (NSString *)convertKeypadLettersToDigitsWithNSString:(NSString *)input;

+ (NSString *)extractNetworkPortionWithNSString:(NSString *)phoneNumber;

+ (NSString *)extractNetworkPortionAltWithNSString:(NSString *)phoneNumber;

+ (NSString *)extractPostDialPortionWithNSString:(NSString *)phoneNumber;

+ (void)formatJapaneseNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text;

+ (void)formatNanpNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text;

+ (void)formatNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text
                                    withInt:(jint)defaultFormattingType;

+ (NSString *)formatNumberWithNSString:(NSString *)source;

+ (NSString *)formatNumberWithNSString:(NSString *)source
                               withInt:(jint)defaultFormattingType;

+ (jint)getFormatTypeForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

+ (NSString *)getStrippedReversedWithNSString:(NSString *)phoneNumber;

+ (jboolean)is12KeyWithChar:(jchar)c;

+ (jboolean)isDialableWithChar:(jchar)c;

+ (jboolean)isGlobalPhoneNumberWithNSString:(NSString *)phoneNumber;

+ (jboolean)isISODigitWithChar:(jchar)c;

+ (jboolean)isNonSeparatorWithChar:(jchar)c;

+ (jboolean)isReallyDialableWithChar:(jchar)c;

+ (jboolean)isStartsPostDialWithChar:(jchar)c;

+ (jboolean)isUriNumberWithNSString:(NSString *)number;

+ (jboolean)isWellFormedSmsAddressWithNSString:(NSString *)address;

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithNSString:(NSString *)s;

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithLengthWithNSString:(NSString *)s;

+ (IOSByteArray *)numberToCalledPartyBCDWithNSString:(NSString *)number;

+ (NSString *)stringFromStringAndTOAWithNSString:(NSString *)s
                                         withInt:(jint)TOA;

+ (NSString *)stripSeparatorsWithNSString:(NSString *)phoneNumber;

+ (jint)toaFromStringWithNSString:(NSString *)s;

+ (NSString *)toCallerIDMinMatchWithNSString:(NSString *)phoneNumber;

@end

J2OBJC_STATIC_INIT(AndroidTelephonyPhoneNumberUtils)

inline jchar AndroidTelephonyPhoneNumberUtils_get_PAUSE();
#define AndroidTelephonyPhoneNumberUtils_PAUSE ','
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, PAUSE, jchar)

inline jchar AndroidTelephonyPhoneNumberUtils_get_WAIT();
#define AndroidTelephonyPhoneNumberUtils_WAIT ';'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, WAIT, jchar)

inline jchar AndroidTelephonyPhoneNumberUtils_get_WILD();
#define AndroidTelephonyPhoneNumberUtils_WILD 'N'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, WILD, jchar)

inline jint AndroidTelephonyPhoneNumberUtils_get_TOA_International();
#define AndroidTelephonyPhoneNumberUtils_TOA_International 145
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, TOA_International, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_TOA_Unknown();
#define AndroidTelephonyPhoneNumberUtils_TOA_Unknown 129
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, TOA_Unknown, jint)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_LOG_TAG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_LOG_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, LOG_TAG, NSString *)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_UNKNOWN();
#define AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_UNKNOWN, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_NANP();
#define AndroidTelephonyPhoneNumberUtils_FORMAT_NANP 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_NANP, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_JAPAN();
#define AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_JAPAN, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_MIN_MATCH();
#define AndroidTelephonyPhoneNumberUtils_MIN_MATCH 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, MIN_MATCH, jint)

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_init(AndroidTelephonyPhoneNumberUtils *self);

FOUNDATION_EXPORT AndroidTelephonyPhoneNumberUtils *new_AndroidTelephonyPhoneNumberUtils_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTelephonyPhoneNumberUtils *create_AndroidTelephonyPhoneNumberUtils_init();

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(jchar c);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean useStrictComparation);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean acceptInvalidCCCPrefix);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(NSString *s, jint TOA);

FOUNDATION_EXPORT jint AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(NSString *number);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(NSString *source);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(NSString *source, jint defaultFormattingType);

FOUNDATION_EXPORT jint AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(id<AndroidTextEditable> text, jint defaultFormattingType);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(id<AndroidTextEditable> text);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(id<AndroidTextEditable> text);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(NSString *input);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(NSString *number);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTelephonyPhoneNumberUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidTelephonyPhoneNumberUtils")
