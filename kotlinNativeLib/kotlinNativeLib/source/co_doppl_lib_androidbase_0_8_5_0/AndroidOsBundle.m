//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidOsBundle.h"
#include "AndroidOsParcel.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/io/Serializable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface AndroidOsBundle () {
 @public
  jboolean mHasFds_;
  jboolean mFdsKnown_;
  jboolean mAllowFds_;
  JavaLangClassLoader *mClassLoader_;
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

@end

J2OBJC_FIELD_SETTER(AndroidOsBundle, mClassLoader_, JavaLangClassLoader *)

inline NSString *AndroidOsBundle_get_LOG_TAG();
static NSString *AndroidOsBundle_LOG_TAG = @"Bundle";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsBundle, LOG_TAG, NSString *)

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e);

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e);

J2OBJC_INITIALIZED_DEFN(AndroidOsBundle)

AndroidOsBundle *AndroidOsBundle_EMPTY;

@implementation AndroidOsBundle

+ (AndroidOsBundle *)EMPTY {
  return AndroidOsBundle_EMPTY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidOsBundle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsBundle_initWithJavaLangClassLoader_(self, loader);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  AndroidOsBundle_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithAndroidOsBundle:(AndroidOsBundle *)b {
  AndroidOsBundle_initWithAndroidOsBundle_(self, b);
  return self;
}

+ (AndroidOsBundle *)forPairWithNSString:(NSString *)key
                            withNSString:(NSString *)value {
  return AndroidOsBundle_forPairWithNSString_withNSString_(key, value);
}

- (NSString *)getPairValue {
  jint size = [((id<JavaUtilMap>) nil_chk(mMap_)) size];
  if (size > 1) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, @"getPairValue() used on Bundle with multiple pairs.");
  }
  if (size == 0) {
    return nil;
  }
  id o = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(mMap_)) values])) iterator])) next];
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, @"getPairValue()", o, @"String", e);
    return nil;
  }
}

- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  JreStrongAssign(&mClassLoader_, loader);
}

- (JavaLangClassLoader *)getClassLoader {
  return mClassLoader_;
}

- (jboolean)setAllowFdsWithBoolean:(jboolean)allowFds {
  jboolean orig = mAllowFds_;
  mAllowFds_ = allowFds;
  return orig;
}

- (id)java_clone {
  return create_AndroidOsBundle_initWithAndroidOsBundle_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) isEmpty];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(mMap_)) clear];
  mHasFds_ = false;
  mFdsKnown_ = true;
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
}

- (void)removeWithNSString:(NSString *)key {
  [((id<JavaUtilMap>) nil_chk(mMap_)) removeWithId:key];
}

- (void)putAllWithAndroidOsBundle:(AndroidOsBundle *)map {
  [((id<JavaUtilMap>) nil_chk(((AndroidOsBundle *) nil_chk(map))->mMap_)) putAllWithJavaUtilMap:map->mMap_];
  mHasFds_ |= map->mHasFds_;
  mFdsKnown_ = (mFdsKnown_ && map->mFdsKnown_);
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) keySet];
}

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(jboolean)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangBoolean_valueOfWithBoolean_(value)];
}

- (void)putByteWithNSString:(NSString *)key
                   withByte:(jbyte)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangByte_valueOfWithByte_(value)];
}

- (void)putCharWithNSString:(NSString *)key
                   withChar:(jchar)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangCharacter_valueOfWithChar_(value)];
}

- (void)putShortWithNSString:(NSString *)key
                   withShort:(jshort)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangShort_valueOfWithShort_(value)];
}

- (void)putIntWithNSString:(NSString *)key
                   withInt:(jint)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangInteger_valueOfWithInt_(value)];
}

- (void)putLongWithNSString:(NSString *)key
                   withLong:(jlong)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangLong_valueOfWithLong_(value)];
}

- (void)putFloatWithNSString:(NSString *)key
                   withFloat:(jfloat)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangFloat_valueOfWithFloat_(value)];
}

- (void)putDoubleWithNSString:(NSString *)key
                   withDouble:(jdouble)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangDouble_valueOfWithDouble_(value)];
}

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceWithNSString:(NSString *)key
           withJavaLangCharSequence:(id<JavaLangCharSequence>)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntegerArrayListWithNSString:(NSString *)key
                  withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayListWithNSString:(NSString *)key
                       withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putSerializableWithNSString:(NSString *)key
             withJavaIoSerializable:(id<JavaIoSerializable>)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBooleanArrayWithNSString:(NSString *)key
                   withBooleanArray:(IOSBooleanArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putByteArrayWithNSString:(NSString *)key
                   withByteArray:(IOSByteArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putShortArrayWithNSString:(NSString *)key
                   withShortArray:(IOSShortArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharArrayWithNSString:(NSString *)key
                   withCharArray:(IOSCharArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntArrayWithNSString:(NSString *)key
                   withIntArray:(IOSIntArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putLongArrayWithNSString:(NSString *)key
                   withLongArray:(IOSLongArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putFloatArrayWithNSString:(NSString *)key
                   withFloatArray:(IOSFloatArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putDoubleArrayWithNSString:(NSString *)key
                   withDoubleArray:(IOSDoubleArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayWithNSString:(NSString *)key
                 withNSStringArray:(IOSObjectArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayWithNSString:(NSString *)key
           withJavaLangCharSequenceArray:(IOSObjectArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBundleWithNSString:(NSString *)key
          withAndroidOsBundle:(AndroidOsBundle *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  return [self getBooleanWithNSString:key withBoolean:false];
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, defaultValue, e);
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, value, className_, e);
}

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangBoolean *) cast_chk(o, [JavaLangBoolean class]) booleanValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Boolean", JavaLangBoolean_valueOfWithBoolean_(defaultValue), e);
    return defaultValue;
  }
}

- (jbyte)getByteWithNSString:(NSString *)key {
  return [((JavaLangByte *) nil_chk([self getByteWithNSString:key withByte:(jbyte) 0])) charValue];
}

- (JavaLangByte *)getByteWithNSString:(NSString *)key
                             withByte:(jbyte)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
  @try {
    return (JavaLangByte *) cast_chk(o, [JavaLangByte class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Byte", JavaLangByte_valueOfWithByte_(defaultValue), e);
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
}

- (jchar)getCharWithNSString:(NSString *)key {
  return [self getCharWithNSString:key withChar:(jchar) 0];
}

- (jchar)getCharWithNSString:(NSString *)key
                    withChar:(jchar)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangCharacter *) cast_chk(o, [JavaLangCharacter class]) charValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Character", JavaLangCharacter_valueOfWithChar_(defaultValue), e);
    return defaultValue;
  }
}

- (jshort)getShortWithNSString:(NSString *)key {
  return [self getShortWithNSString:key withShort:(jshort) 0];
}

- (jshort)getShortWithNSString:(NSString *)key
                     withShort:(jshort)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangShort *) cast_chk(o, [JavaLangShort class]) shortValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Short", JavaLangShort_valueOfWithShort_(defaultValue), e);
    return defaultValue;
  }
}

- (jint)getIntWithNSString:(NSString *)key {
  return [self getIntWithNSString:key withInt:0];
}

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangInteger *) cast_chk(o, [JavaLangInteger class]) intValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Integer", JavaLangInteger_valueOfWithInt_(defaultValue), e);
    return defaultValue;
  }
}

- (jlong)getLongWithNSString:(NSString *)key {
  return [self getLongWithNSString:key withLong:0LL];
}

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangLong *) cast_chk(o, [JavaLangLong class]) longLongValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Long", JavaLangLong_valueOfWithLong_(defaultValue), e);
    return defaultValue;
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key {
  return [self getFloatWithNSString:key withFloat:0.0f];
}

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangFloat *) cast_chk(o, [JavaLangFloat class]) floatValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Float", JavaLangFloat_valueOfWithFloat_(defaultValue), e);
    return defaultValue;
  }
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  return [self getDoubleWithNSString:key withDouble:0.0];
}

- (jdouble)getDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangDouble *) cast_chk(o, [JavaLangDouble class]) doubleValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Double", JavaLangDouble_valueOfWithDouble_(defaultValue), e);
    return defaultValue;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return nil;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return defaultValue;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return nil;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return defaultValue;
  }
}

- (AndroidOsBundle *)getBundleWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (AndroidOsBundle *) cast_chk(o, [AndroidOsBundle class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Bundle", e);
    return nil;
  }
}

- (id<JavaIoSerializable>)getSerializableWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaIoSerializable>) cast_check(o, JavaIoSerializable_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Serializable", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getIntegerArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<Integer>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<String>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getCharSequenceArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<CharSequence>", e);
    return nil;
  }
}

- (IOSBooleanArray *)getBooleanArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSBooleanArray *) cast_chk(o, [IOSBooleanArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSByteArray *)getByteArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSByteArray *) cast_chk(o, [IOSByteArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSShortArray *)getShortArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSShortArray *) cast_chk(o, [IOSShortArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"short[]", e);
    return nil;
  }
}

- (IOSCharArray *)getCharArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSCharArray *) cast_chk(o, [IOSCharArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"char[]", e);
    return nil;
  }
}

- (IOSIntArray *)getIntArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSIntArray *) cast_chk(o, [IOSIntArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"int[]", e);
    return nil;
  }
}

- (IOSLongArray *)getLongArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSLongArray *) cast_chk(o, [IOSLongArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"long[]", e);
    return nil;
  }
}

- (IOSFloatArray *)getFloatArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSFloatArray *) cast_chk(o, [IOSFloatArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"float[]", e);
    return nil;
  }
}

- (IOSDoubleArray *)getDoubleArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSDoubleArray *) cast_chk(o, [IOSDoubleArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"double[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSString_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getCharSequenceArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(JavaLangCharSequence_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence[]", e);
    return nil;
  }
}

- (NSString *)description {
  @synchronized(self) {
    return JreRetainedLocalValue(JreStrcat("$$C", @"Bundle[", [((id<JavaUtilMap>) nil_chk(mMap_)) description], ']'));
  }
}

- (jint)describeContents {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)dest
                                 withInt:(jint)flags {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(mMap_);
  RELEASE_(mClassLoader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangClassLoader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, 38, -1, -1 },
    { NULL, "V", 0x1, 39, 35, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 65, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 68, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 65, 16, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 69, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 69, 18, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 70, 10, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 70, 20, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 71, 10, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 71, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 73, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 73, 26, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 74, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 74, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 75, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 75, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 76, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 76, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 77, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 77, 33, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 78, 10, -1, -1, -1, -1 },
    { NULL, "LJavaIoSerializable;", 0x1, 79, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 80, 10, -1, 81, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 82, 10, -1, 83, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 84, 10, -1, 85, -1, -1 },
    { NULL, "[Z", 0x1, 86, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 87, 10, -1, -1, -1, -1 },
    { NULL, "[S", 0x1, 88, 10, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 89, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 90, 10, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, 91, 10, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 92, 10, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 93, 10, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 94, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaLangCharSequence;", 0x1, 95, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 96, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 98, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaLangClassLoader:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithAndroidOsBundle:);
  methods[4].selector = @selector(forPairWithNSString:withNSString:);
  methods[5].selector = @selector(getPairValue);
  methods[6].selector = @selector(setClassLoaderWithJavaLangClassLoader:);
  methods[7].selector = @selector(getClassLoader);
  methods[8].selector = @selector(setAllowFdsWithBoolean:);
  methods[9].selector = @selector(java_clone);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(containsKeyWithNSString:);
  methods[14].selector = @selector(getWithNSString:);
  methods[15].selector = @selector(removeWithNSString:);
  methods[16].selector = @selector(putAllWithAndroidOsBundle:);
  methods[17].selector = @selector(keySet);
  methods[18].selector = @selector(putBooleanWithNSString:withBoolean:);
  methods[19].selector = @selector(putByteWithNSString:withByte:);
  methods[20].selector = @selector(putCharWithNSString:withChar:);
  methods[21].selector = @selector(putShortWithNSString:withShort:);
  methods[22].selector = @selector(putIntWithNSString:withInt:);
  methods[23].selector = @selector(putLongWithNSString:withLong:);
  methods[24].selector = @selector(putFloatWithNSString:withFloat:);
  methods[25].selector = @selector(putDoubleWithNSString:withDouble:);
  methods[26].selector = @selector(putStringWithNSString:withNSString:);
  methods[27].selector = @selector(putCharSequenceWithNSString:withJavaLangCharSequence:);
  methods[28].selector = @selector(putIntegerArrayListWithNSString:withJavaUtilArrayList:);
  methods[29].selector = @selector(putStringArrayListWithNSString:withJavaUtilArrayList:);
  methods[30].selector = @selector(putCharSequenceArrayListWithNSString:withJavaUtilArrayList:);
  methods[31].selector = @selector(putSerializableWithNSString:withJavaIoSerializable:);
  methods[32].selector = @selector(putBooleanArrayWithNSString:withBooleanArray:);
  methods[33].selector = @selector(putByteArrayWithNSString:withByteArray:);
  methods[34].selector = @selector(putShortArrayWithNSString:withShortArray:);
  methods[35].selector = @selector(putCharArrayWithNSString:withCharArray:);
  methods[36].selector = @selector(putIntArrayWithNSString:withIntArray:);
  methods[37].selector = @selector(putLongArrayWithNSString:withLongArray:);
  methods[38].selector = @selector(putFloatArrayWithNSString:withFloatArray:);
  methods[39].selector = @selector(putDoubleArrayWithNSString:withDoubleArray:);
  methods[40].selector = @selector(putStringArrayWithNSString:withNSStringArray:);
  methods[41].selector = @selector(putCharSequenceArrayWithNSString:withJavaLangCharSequenceArray:);
  methods[42].selector = @selector(putBundleWithNSString:withAndroidOsBundle:);
  methods[43].selector = @selector(getBooleanWithNSString:);
  methods[44].selector = @selector(typeWarningWithNSString:withId:withNSString:withId:withJavaLangClassCastException:);
  methods[45].selector = @selector(typeWarningWithNSString:withId:withNSString:withJavaLangClassCastException:);
  methods[46].selector = @selector(getBooleanWithNSString:withBoolean:);
  methods[47].selector = @selector(getByteWithNSString:);
  methods[48].selector = @selector(getByteWithNSString:withByte:);
  methods[49].selector = @selector(getCharWithNSString:);
  methods[50].selector = @selector(getCharWithNSString:withChar:);
  methods[51].selector = @selector(getShortWithNSString:);
  methods[52].selector = @selector(getShortWithNSString:withShort:);
  methods[53].selector = @selector(getIntWithNSString:);
  methods[54].selector = @selector(getIntWithNSString:withInt:);
  methods[55].selector = @selector(getLongWithNSString:);
  methods[56].selector = @selector(getLongWithNSString:withLong:);
  methods[57].selector = @selector(getFloatWithNSString:);
  methods[58].selector = @selector(getFloatWithNSString:withFloat:);
  methods[59].selector = @selector(getDoubleWithNSString:);
  methods[60].selector = @selector(getDoubleWithNSString:withDouble:);
  methods[61].selector = @selector(getStringWithNSString:);
  methods[62].selector = @selector(getStringWithNSString:withNSString:);
  methods[63].selector = @selector(getCharSequenceWithNSString:);
  methods[64].selector = @selector(getCharSequenceWithNSString:withJavaLangCharSequence:);
  methods[65].selector = @selector(getBundleWithNSString:);
  methods[66].selector = @selector(getSerializableWithNSString:);
  methods[67].selector = @selector(getIntegerArrayListWithNSString:);
  methods[68].selector = @selector(getStringArrayListWithNSString:);
  methods[69].selector = @selector(getCharSequenceArrayListWithNSString:);
  methods[70].selector = @selector(getBooleanArrayWithNSString:);
  methods[71].selector = @selector(getByteArrayWithNSString:);
  methods[72].selector = @selector(getShortArrayWithNSString:);
  methods[73].selector = @selector(getCharArrayWithNSString:);
  methods[74].selector = @selector(getIntArrayWithNSString:);
  methods[75].selector = @selector(getLongArrayWithNSString:);
  methods[76].selector = @selector(getFloatArrayWithNSString:);
  methods[77].selector = @selector(getDoubleArrayWithNSString:);
  methods[78].selector = @selector(getStringArrayWithNSString:);
  methods[79].selector = @selector(getCharSequenceArrayWithNSString:);
  methods[80].selector = @selector(description);
  methods[81].selector = @selector(describeContents);
  methods[82].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 99, -1, -1 },
    { "EMPTY", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x19, -1, 100, -1, -1 },
    { "mMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 101, -1 },
    { "mHasFds_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFdsKnown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAllowFds_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mClassLoader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangClassLoader;", "I", "LAndroidOsBundle;", "forPair", "LNSString;LNSString;", "setClassLoader", "setAllowFds", "Z", "clone", "containsKey", "LNSString;", "get", "remove", "putAll", "()Ljava/util/Set<Ljava/lang/String;>;", "putBoolean", "LNSString;Z", "putByte", "LNSString;B", "putChar", "LNSString;C", "putShort", "LNSString;S", "putInt", "LNSString;I", "putLong", "LNSString;J", "putFloat", "LNSString;F", "putDouble", "LNSString;D", "putString", "putCharSequence", "LNSString;LJavaLangCharSequence;", "putIntegerArrayList", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Integer;>;)V", "putStringArrayList", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "putCharSequenceArrayList", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/CharSequence;>;)V", "putSerializable", "LNSString;LJavaIoSerializable;", "putBooleanArray", "LNSString;[Z", "putByteArray", "LNSString;[B", "putShortArray", "LNSString;[S", "putCharArray", "LNSString;[C", "putIntArray", "LNSString;[I", "putLongArray", "LNSString;[J", "putFloatArray", "LNSString;[F", "putDoubleArray", "LNSString;[D", "putStringArray", "LNSString;[LNSString;", "putCharSequenceArray", "LNSString;[LJavaLangCharSequence;", "putBundle", "LNSString;LAndroidOsBundle;", "getBoolean", "typeWarning", "LNSString;LNSObject;LNSString;LNSObject;LJavaLangClassCastException;", "LNSString;LNSObject;LNSString;LJavaLangClassCastException;", "getByte", "getChar", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getString", "getCharSequence", "getBundle", "getSerializable", "getIntegerArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/Integer;>;", "getStringArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;", "getCharSequenceArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/CharSequence;>;", "getBooleanArray", "getByteArray", "getShortArray", "getCharArray", "getIntArray", "getLongArray", "getFloatArray", "getDoubleArray", "getStringArray", "getCharSequenceArray", "toString", "writeToParcel", "LAndroidOsParcel;I", &AndroidOsBundle_LOG_TAG, &AndroidOsBundle_EMPTY, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _AndroidOsBundle = { "Bundle", "android.os", ptrTable, methods, fields, 7, 0x11, 83, 7, -1, -1, -1, -1, -1 };
  return &_AndroidOsBundle;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [AndroidOsBundle class]) {
    {
      JreStrongAssignAndConsume(&AndroidOsBundle_EMPTY, new_AndroidOsBundle_init());
      JreStrongAssign(&AndroidOsBundle_EMPTY->mMap_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(create_JavaUtilHashMap_init()));
    }
    J2OBJC_SET_INITIALIZED(AndroidOsBundle)
  }
}

@end

void AndroidOsBundle_init(AndroidOsBundle *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->mClassLoader_, [[self java_getClass] getClassLoader]);
}

AndroidOsBundle *new_AndroidOsBundle_init() {
  J2OBJC_NEW_IMPL(AndroidOsBundle, init)
}

AndroidOsBundle *create_AndroidOsBundle_init() {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, init)
}

void AndroidOsBundle_initWithJavaLangClassLoader_(AndroidOsBundle *self, JavaLangClassLoader *loader) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->mClassLoader_, loader);
}

AndroidOsBundle *new_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithJavaLangClassLoader_, loader)
}

AndroidOsBundle *create_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithJavaLangClassLoader_, loader)
}

void AndroidOsBundle_initWithInt_(AndroidOsBundle *self, jint capacity) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_initWithInt_(capacity));
  JreStrongAssign(&self->mClassLoader_, [[self java_getClass] getClassLoader]);
}

AndroidOsBundle *new_AndroidOsBundle_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithInt_, capacity)
}

AndroidOsBundle *create_AndroidOsBundle_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithInt_, capacity)
}

void AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *self, AndroidOsBundle *b) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  if (((AndroidOsBundle *) nil_chk(b))->mMap_ != nil) {
    JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_initWithJavaUtilMap_(b->mMap_));
  }
  else {
    JreStrongAssign(&self->mMap_, nil);
  }
  self->mHasFds_ = b->mHasFds_;
  self->mFdsKnown_ = b->mFdsKnown_;
  JreStrongAssign(&self->mClassLoader_, b->mClassLoader_);
}

AndroidOsBundle *new_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithAndroidOsBundle_, b)
}

AndroidOsBundle *create_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithAndroidOsBundle_, b)
}

AndroidOsBundle *AndroidOsBundle_forPairWithNSString_withNSString_(NSString *key, NSString *value) {
  AndroidOsBundle_initialize();
  AndroidOsBundle *b = create_AndroidOsBundle_initWithInt_(1);
  [b putStringWithNSString:key withNSString:value];
  return b;
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"Key "];
  [sb appendWithNSString:key];
  [sb appendWithNSString:@" expected "];
  [sb appendWithNSString:className_];
  [sb appendWithNSString:@" but value was a "];
  [sb appendWithNSString:[[nil_chk(value) java_getClass] getName]];
  [sb appendWithNSString:@".  The default value "];
  [sb appendWithId:defaultValue];
  [sb appendWithNSString:@" was returned."];
  AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, [sb description]);
  AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidOsBundle_LOG_TAG, @"Attempt to cast generated internal exception:", e);
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e) {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, @"<null>", e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBundle)
