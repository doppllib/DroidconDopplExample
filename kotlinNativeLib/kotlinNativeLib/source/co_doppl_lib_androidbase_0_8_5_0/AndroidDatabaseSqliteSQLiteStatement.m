//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "AndroidDatabaseSqliteSQLiteDatabaseCorruptException.h"
#include "AndroidDatabaseSqliteSQLiteProgram.h"
#include "AndroidDatabaseSqliteSQLiteSession.h"
#include "AndroidDatabaseSqliteSQLiteStatement.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"

@implementation AndroidDatabaseSqliteSQLiteStatement

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)sql
                                          withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, db, sql, bindArgs);
  return self;
}

- (void)execute {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)executeUpdateDelete {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForChangedRowCountWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)executeInsert {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForLastInsertedRowIdWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)simpleQueryForLong {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForLongWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)simpleQueryForString {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForStringWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteProgram: ", [self getSql]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(executeUpdateDelete);
  methods[3].selector = @selector(executeInsert);
  methods[4].selector = @selector(simpleQueryForLong);
  methods[5].selector = @selector(simpleQueryForString);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSObject;", "toString" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteStatement = { "SQLiteStatement", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteStatement;
}

@end

void AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteStatement *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(self, db, sql, bindArgs, nil);
}

AndroidDatabaseSqliteSQLiteStatement *new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_, db, sql, bindArgs)
}

AndroidDatabaseSqliteSQLiteStatement *create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_, db, sql, bindArgs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteStatement)
