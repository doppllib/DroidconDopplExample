//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidContentContentValues")
#ifdef RESTRICT_AndroidContentContentValues
#define INCLUDE_ALL_AndroidContentContentValues 0
#else
#define INCLUDE_ALL_AndroidContentContentValues 1
#endif
#undef RESTRICT_AndroidContentContentValues

#if !defined (AndroidContentContentValues_) && (INCLUDE_ALL_AndroidContentContentValues || defined(INCLUDE_AndroidContentContentValues))
#define AndroidContentContentValues_

@class IOSByteArray;
@class JavaLangBoolean;
@class JavaLangByte;
@class JavaLangDouble;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangShort;
@class JavaUtilArrayList;
@protocol JavaUtilSet;

@interface AndroidContentContentValues : NSObject

+ (NSString *)TAG;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithAndroidContentContentValues:(AndroidContentContentValues *)from;

- (instancetype)initWithInt:(jint)size;

- (void)clear;

- (jboolean)containsKeyWithNSString:(NSString *)key;

- (jboolean)isEqual:(id)object;

- (id)getWithNSString:(NSString *)key;

- (JavaLangBoolean *)getAsBooleanWithNSString:(NSString *)key;

- (JavaLangByte *)getAsByteWithNSString:(NSString *)key;

- (IOSByteArray *)getAsByteArrayWithNSString:(NSString *)key;

- (JavaLangDouble *)getAsDoubleWithNSString:(NSString *)key;

- (JavaLangFloat *)getAsFloatWithNSString:(NSString *)key;

- (JavaLangInteger *)getAsIntegerWithNSString:(NSString *)key;

- (JavaLangLong *)getAsLongWithNSString:(NSString *)key;

- (JavaLangShort *)getAsShortWithNSString:(NSString *)key;

- (NSString *)getAsStringWithNSString:(NSString *)key;

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key;

- (NSUInteger)hash;

- (id<JavaUtilSet>)keySet;

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value;

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value;

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value;

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value;

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value;

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value;

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value;

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value;

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value;

- (void)putAllWithAndroidContentContentValues:(AndroidContentContentValues *)other;

- (void)putNullWithNSString:(NSString *)key;

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value;

- (void)removeWithNSString:(NSString *)key;

- (jint)size;

- (NSString *)description;

- (id<JavaUtilSet>)valueSet;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentContentValues)

inline NSString *AndroidContentContentValues_get_TAG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidContentContentValues_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidContentContentValues, TAG, NSString *)

FOUNDATION_EXPORT void AndroidContentContentValues_init(AndroidContentContentValues *self);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_init();

FOUNDATION_EXPORT void AndroidContentContentValues_initWithInt_(AndroidContentContentValues *self, jint size);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_initWithInt_(jint size);

FOUNDATION_EXPORT void AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *self, AndroidContentContentValues *from);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from);

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentContentValues)

#endif

#pragma pop_macro("INCLUDE_ALL_AndroidContentContentValues")
