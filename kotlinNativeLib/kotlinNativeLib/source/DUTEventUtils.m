//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATBlock.h"
#include "DDATEvent.h"
#include "DDATTimeBlock.h"
#include "DUTEventUtils.h"
#include "DVMHourBlock.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "java/lang/Long.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface DUTEventUtils ()

+ (jboolean)hasConflictWithDDATEvent:(DDATEvent *)event
                    withJavaUtilList:(id<JavaUtilList>)dataSet;

@end

__attribute__((unused)) static jboolean DUTEventUtils_hasConflictWithDDATEvent_withJavaUtilList_(DDATEvent *event, id<JavaUtilList> dataSet);

@interface DUTEventUtils_EventRow : NSObject

@end

@implementation DUTEventUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DUTEventUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)styleEventRowWithDVMHourBlock:(DVMHourBlock *)scheduleBlockHour
                     withJavaUtilList:(id<JavaUtilList>)dataSet
           withDUTEventUtils_EventRow:(id<DUTEventUtils_EventRow>)row
                          withBoolean:(jboolean)allEvents {
  DUTEventUtils_styleEventRowWithDVMHourBlock_withJavaUtilList_withDUTEventUtils_EventRow_withBoolean_(scheduleBlockHour, dataSet, row, allEvents);
}

+ (jboolean)hasConflictWithDDATEvent:(DDATEvent *)event
                    withJavaUtilList:(id<JavaUtilList>)dataSet {
  return DUTEventUtils_hasConflictWithDDATEvent_withJavaUtilList_(event, dataSet);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(styleEventRowWithDVMHourBlock:withJavaUtilList:withDUTEventUtils_EventRow:withBoolean:);
  methods[2].selector = @selector(hasConflictWithDDATEvent:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "styleEventRow", "LDVMHourBlock;LJavaUtilList;LDUTEventUtils_EventRow;Z", "hasConflict", "LDDATEvent;LJavaUtilList;", "LDUTEventUtils_EventRow;" };
  static const J2ObjcClassInfo _DUTEventUtils = { "EventUtils", "co.touchlab.droidconandroid.shared.utils", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 4, -1, -1, -1 };
  return &_DUTEventUtils;
}

@end

void DUTEventUtils_init(DUTEventUtils *self) {
  NSObject_init(self);
}

DUTEventUtils *new_DUTEventUtils_init() {
  J2OBJC_NEW_IMPL(DUTEventUtils, init)
}

DUTEventUtils *create_DUTEventUtils_init() {
  J2OBJC_CREATE_IMPL(DUTEventUtils, init)
}

void DUTEventUtils_styleEventRowWithDVMHourBlock_withJavaUtilList_withDUTEventUtils_EventRow_withBoolean_(DVMHourBlock *scheduleBlockHour, id<JavaUtilList> dataSet, id<DUTEventUtils_EventRow> row, jboolean allEvents) {
  DUTEventUtils_initialize();
  jboolean isFirstInBlock = ![((NSString *) nil_chk([((DVMHourBlock *) nil_chk(scheduleBlockHour)) getHourStringDisplay])) java_isEmpty];
  [((id<DUTEventUtils_EventRow>) nil_chk(row)) setTimeGapWithBoolean:isFirstInBlock];
  if ([((id<DDATTimeBlock>) nil_chk([scheduleBlockHour getTimeBlock])) isBlock]) {
    DDATBlock *block = (DDATBlock *) cast_chk([scheduleBlockHour getTimeBlock], [DDATBlock class]);
    [row setTitleTextWithNSString:((DDATBlock *) nil_chk(block))->name_];
    [row setTimeTextWithNSString:[((NSString *) nil_chk([scheduleBlockHour getHourStringDisplay])) java_lowercaseStringWithJRELocale:JavaUtilLocale_getDefault()]];
    [row setSpeakerTextWithNSString:@""];
    [row setDescriptionWithNSString:block->description__];
    [row setLiveNowVisibleWithBoolean:false];
    [row setRsvpVisibleWithBoolean:false withBoolean:false];
    [row setRsvpConflictWithBoolean:false];
  }
  else {
    DDATEvent *event = (DDATEvent *) cast_chk([scheduleBlockHour getTimeBlock], [DDATEvent class]);
    [row setTimeTextWithNSString:[((NSString *) nil_chk([scheduleBlockHour getHourStringDisplay])) java_lowercaseStringWithJRELocale:JavaUtilLocale_getDefault()]];
    [row setTitleTextWithNSString:((DDATEvent *) nil_chk(event))->name_];
    [row setSpeakerTextWithNSString:[event allSpeakersString]];
    [row setDescriptionWithNSString:event->description__];
    [row setLiveNowVisibleWithBoolean:[event isNow]];
    [row setRsvpVisibleWithBoolean:allEvents && [event isRsvped] withBoolean:[event isPast]];
    [row setRsvpConflictWithBoolean:allEvents && DUTEventUtils_hasConflictWithDDATEvent_withJavaUtilList_(event, dataSet)];
  }
}

jboolean DUTEventUtils_hasConflictWithDDATEvent_withJavaUtilList_(DDATEvent *event, id<JavaUtilList> dataSet) {
  DUTEventUtils_initialize();
  if ([((DDATEvent *) nil_chk(event)) isRsvped] && ![event isPast]) {
    for (id __strong o in nil_chk(dataSet)) {
      if ([o isKindOfClass:[DVMHourBlock class]] && [[((DVMHourBlock *) nil_chk(((DVMHourBlock *) cast_chk(o, [DVMHourBlock class])))) getTimeBlock] isKindOfClass:[DDATEvent class]]) {
        DDATEvent *e = (DDATEvent *) cast_chk([((DVMHourBlock *) nil_chk(((DVMHourBlock *) cast_chk(o, [DVMHourBlock class])))) getTimeBlock], [DDATEvent class]);
        if (event->id__ != ((DDATEvent *) nil_chk(e))->id__ && !AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(e->rsvpUuid_) && [((JavaLangLong *) nil_chk(event->startDateLong_)) longLongValue] < [((JavaLangLong *) nil_chk(e->endDateLong_)) longLongValue] && [event->endDateLong_ longLongValue] > [e->startDateLong_ longLongValue]) {
          return true;
        }
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DUTEventUtils)

@implementation DUTEventUtils_EventRow

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setTimeGapWithBoolean:);
  methods[1].selector = @selector(setTitleTextWithNSString:);
  methods[2].selector = @selector(setTimeTextWithNSString:);
  methods[3].selector = @selector(setSpeakerTextWithNSString:);
  methods[4].selector = @selector(setDescriptionWithNSString:);
  methods[5].selector = @selector(setLiveNowVisibleWithBoolean:);
  methods[6].selector = @selector(setRsvpVisibleWithBoolean:withBoolean:);
  methods[7].selector = @selector(setRsvpConflictWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setTimeGap", "Z", "setTitleText", "LNSString;", "setTimeText", "setSpeakerText", "setDescription", "setLiveNowVisible", "setRsvpVisible", "ZZ", "setRsvpConflict", "LDUTEventUtils;" };
  static const J2ObjcClassInfo _DUTEventUtils_EventRow = { "EventRow", "co.touchlab.droidconandroid.shared.utils", ptrTable, methods, NULL, 7, 0x609, 8, 0, 11, -1, -1, -1, -1 };
  return &_DUTEventUtils_EventRow;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DUTEventUtils_EventRow)
