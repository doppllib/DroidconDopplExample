//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATAppPrefs.h"
#include "DDATBlock.h"
#include "DDATDatabaseHelper.h"
#include "DDATEvent.h"
#include "DDATEventSpeaker.h"
#include "DDATTimeBlock.h"
#include "DDATUserAccount.h"
#include "DDATVenue.h"
#include "DNETDConvention.h"
#include "DNETDNetworkEvent.h"
#include "DNETDNetworkUserAccount.h"
#include "DNETDNetworkVenue.h"
#include "DUTTimeUtils.h"
#include "DVMConferenceDataHelper.h"
#include "DVMDaySchedule.h"
#include "DVMHourBlock.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexSingle.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/Callable.h"
#include "javax/inject/Inject.h"
#include "javax/inject/Singleton.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface DVMConferenceDataHelper () {
 @public
  DDATAppPrefs *appPrefs_;
  DDATDatabaseHelper *helper_;
}

- (id<JavaUtilList>)getDaySchedules;

- (void)saveConventionDataWithDNETDConvention:(DNETDConvention *)convention;

@end

J2OBJC_FIELD_SETTER(DVMConferenceDataHelper, appPrefs_, DDATAppPrefs *)
J2OBJC_FIELD_SETTER(DVMConferenceDataHelper, helper_, DDATDatabaseHelper *)

inline JavaLangThreadLocal *DVMConferenceDataHelper_get_DATE_FORMAT();
static JavaLangThreadLocal *DVMConferenceDataHelper_DATE_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DVMConferenceDataHelper, DATE_FORMAT, JavaLangThreadLocal *)

inline JavaLangThreadLocal *DVMConferenceDataHelper_get_TIME_FORMAT();
static JavaLangThreadLocal *DVMConferenceDataHelper_TIME_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DVMConferenceDataHelper, TIME_FORMAT, JavaLangThreadLocal *)

__attribute__((unused)) static id<JavaUtilList> DVMConferenceDataHelper_getDaySchedules(DVMConferenceDataHelper *self);

__attribute__((unused)) static void DVMConferenceDataHelper_saveConventionDataWithDNETDConvention_(DVMConferenceDataHelper *self, DNETDConvention *convention);

__attribute__((unused)) static IOSObjectArray *DVMConferenceDataHelper__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DVMConferenceDataHelper__Annotations$1();

@interface DVMConferenceDataHelper_1 : JavaLangThreadLocal

- (instancetype)init;

- (JavaTextSimpleDateFormat *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaTextSimpleDateFormat *)get;

- (JavaTextSimpleDateFormat *)childValueWithId:(JavaTextSimpleDateFormat *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_1)

__attribute__((unused)) static void DVMConferenceDataHelper_1_init(DVMConferenceDataHelper_1 *self);

__attribute__((unused)) static DVMConferenceDataHelper_1 *new_DVMConferenceDataHelper_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataHelper_1 *create_DVMConferenceDataHelper_1_init();

@interface DVMConferenceDataHelper_2 : JavaLangThreadLocal

- (instancetype)init;

- (JavaTextSimpleDateFormat *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaTextSimpleDateFormat *)get;

- (JavaTextSimpleDateFormat *)childValueWithId:(JavaTextSimpleDateFormat *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_2)

__attribute__((unused)) static void DVMConferenceDataHelper_2_init(DVMConferenceDataHelper_2 *self);

__attribute__((unused)) static DVMConferenceDataHelper_2 *new_DVMConferenceDataHelper_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataHelper_2 *create_DVMConferenceDataHelper_2_init();

@interface DVMConferenceDataHelper_$Lambda$1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  DVMConferenceDataHelper *target$_;
}

- (id)call;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_$Lambda$1)

__attribute__((unused)) static void DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper_$Lambda$1 *self, DVMConferenceDataHelper *outer$);

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$1 *new_DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$1 *create_DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper *outer$);

@interface DVMConferenceDataHelper_$Lambda$2 : NSObject < IoReactivexFunctionsAction > {
 @public
  DVMConferenceDataHelper *this$0_;
  DNETDConvention *val$convention_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_$Lambda$2)

__attribute__((unused)) static void DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper_$Lambda$2 *self, DVMConferenceDataHelper *outer$, DNETDConvention *capture$0);

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$2 *new_DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$2 *create_DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0);

@interface DVMConferenceDataHelper_$Lambda$3 : NSObject < JavaLangRunnable > {
 @public
  DVMConferenceDataHelper *this$0_;
  DNETDConvention *val$convention_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_$Lambda$3)

__attribute__((unused)) static void DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper_$Lambda$3 *self, DVMConferenceDataHelper *outer$, DNETDConvention *capture$0);

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$3 *new_DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMConferenceDataHelper_$Lambda$3 *create_DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0);

J2OBJC_INITIALIZED_DEFN(DVMConferenceDataHelper)

@implementation DVMConferenceDataHelper

- (instancetype)initWithDDATAppPrefs:(DDATAppPrefs *)appPrefs
              withDDATDatabaseHelper:(DDATDatabaseHelper *)helper {
  DVMConferenceDataHelper_initWithDDATAppPrefs_withDDATDatabaseHelper_(self, appPrefs, helper);
  return self;
}

+ (NSString *)dateToDayStringWithJavaUtilDate:(JavaUtilDate *)d {
  return DVMConferenceDataHelper_dateToDayStringWithJavaUtilDate_(d);
}

- (IoReactivexSingle *)getDays {
  return IoReactivexSingle_fromCallableWithJavaUtilConcurrentCallable_(create_DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(self));
}

- (id<JavaUtilList>)getDaySchedules {
  return DVMConferenceDataHelper_getDaySchedules(self);
}

- (jint)sortTimeBlocksWithDDATTimeBlock:(id<DDATTimeBlock>)o1
                      withDDATTimeBlock:(id<DDATTimeBlock>)o2 {
  jlong compTimes = [((JavaLangLong *) nil_chk([((id<DDATTimeBlock>) nil_chk(o1)) getStartLong])) longLongValue] - [((JavaLangLong *) nil_chk([((id<DDATTimeBlock>) nil_chk(o2)) getStartLong])) longLongValue];
  if (compTimes != 0) {
    return compTimes > 0 ? 1 : - 1;
  }
  if ([o1 isBlock] && [o2 isBlock]) {
    return 0;
  }
  if ([o1 isBlock]) {
    return 1;
  }
  if ([o2 isBlock]) {
    return - 1;
  }
  return [((NSString *) nil_chk(((DDATVenue *) nil_chk(((DDATEvent *) cast_chk(o1, [DDATEvent class]))->venue_))->name_)) compareToWithId:((DDATEvent *) cast_chk(o2, [DDATEvent class]))->venue_->name_];
}

- (JavaUtilTreeMap *)formatHourBlocksWithJavaUtilList:(id<JavaUtilList>)eventAndBlockList {
  JavaUtilTreeMap *dateWithBlocksTreeMap = create_JavaUtilTreeMap_init();
  NSString *lastHourDisplay = @"";
  for (id<DDATTimeBlock> __strong timeBlock in nil_chk(eventAndBlockList)) {
    JavaUtilDate *startDateObj = create_JavaUtilDate_initWithLong_([((JavaLangLong *) nil_chk([((id<DDATTimeBlock>) nil_chk(timeBlock)) getStartLong])) longLongValue]);
    NSString *startDate = [((JavaTextSimpleDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(DVMConferenceDataHelper_DATE_FORMAT)) get])) formatWithJavaUtilDate:startDateObj];
    id<JavaUtilList> blockHourList = [dateWithBlocksTreeMap getWithId:startDate];
    if (blockHourList == nil) {
      blockHourList = create_JavaUtilArrayList_init();
      [dateWithBlocksTreeMap putWithId:startDate withId:blockHourList];
    }
    NSString *startTime = [((JavaTextSimpleDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(DVMConferenceDataHelper_TIME_FORMAT)) get])) formatWithJavaUtilDate:startDateObj];
    jboolean newHourDisplay = ![((NSString *) nil_chk(lastHourDisplay)) isEqual:startTime];
    if (newHourDisplay) {
      [blockHourList addWithId:create_DVMHourBlock_initWithNSString_withDDATTimeBlock_(startTime, nil)];
    }
    [blockHourList addWithId:create_DVMHourBlock_initWithNSString_withDDATTimeBlock_(@"", timeBlock)];
    lastHourDisplay = startTime;
  }
  return dateWithBlocksTreeMap;
}

- (id<JavaUtilList>)convertMapToDayScheduleWithJavaUtilTreeMap:(JavaUtilTreeMap *)dateWithBlocksTreeMap {
  id<JavaUtilList> dayScheduleList = create_JavaUtilArrayList_init();
  for (NSString * __strong dateString in nil_chk([((JavaUtilTreeMap *) nil_chk(dateWithBlocksTreeMap)) keySet])) {
    id<JavaUtilList> hourBlocksMap = [dateWithBlocksTreeMap getWithId:dateString];
    DVMDaySchedule *daySchedule = create_DVMDaySchedule_initWithNSString_withDVMHourBlockArray_(dateString, [((id<JavaUtilList>) nil_chk(hourBlocksMap)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[hourBlocksMap size] type:DVMHourBlock_class_()]]);
    [dayScheduleList addWithId:daySchedule];
  }
  return dayScheduleList;
}

- (IoReactivexCompletable *)saveConventionWithDNETDConvention:(DNETDConvention *)convention {
  return IoReactivexCompletable_fromActionWithIoReactivexFunctionsAction_(create_DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(self, convention));
}

- (void)saveConventionDataWithDNETDConvention:(DNETDConvention *)convention {
  DVMConferenceDataHelper_saveConventionDataWithDNETDConvention_(self, convention);
}

- (void)dealloc {
  RELEASE_(appPrefs_);
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexSingle;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTreeMap;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LIoReactivexCompletable;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDDATAppPrefs:withDDATDatabaseHelper:);
  methods[1].selector = @selector(dateToDayStringWithJavaUtilDate:);
  methods[2].selector = @selector(getDays);
  methods[3].selector = @selector(getDaySchedules);
  methods[4].selector = @selector(sortTimeBlocksWithDDATTimeBlock:withDDATTimeBlock:);
  methods[5].selector = @selector(formatHourBlocksWithJavaUtilList:);
  methods[6].selector = @selector(convertMapToDayScheduleWithJavaUtilTreeMap:);
  methods[7].selector = @selector(saveConventionWithDNETDConvention:);
  methods[8].selector = @selector(saveConventionDataWithDNETDConvention:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATE_FORMAT", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 17, 18, -1 },
    { "TIME_FORMAT", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 19, 18, -1 },
    { "appPrefs_", "LDDATAppPrefs;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "helper_", "LDDATDatabaseHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDDATAppPrefs;LDDATDatabaseHelper;", (void *)&DVMConferenceDataHelper__Annotations$0, "dateToDayString", "LJavaUtilDate;", "()Lio/reactivex/Single<Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/TimeBlock;>;>;", "()Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/TimeBlock;>;", "sortTimeBlocks", "LDDATTimeBlock;LDDATTimeBlock;", "formatHourBlocks", "LJavaUtilList;", "(Ljava/util/List<Lco/touchlab/droidconandroid/shared/data/TimeBlock;>;)Ljava/util/TreeMap<Ljava/lang/String;Ljava/util/List<Lco/touchlab/droidconandroid/shared/viewmodel/HourBlock;>;>;", "convertMapToDaySchedule", "LJavaUtilTreeMap;", "(Ljava/util/TreeMap<Ljava/lang/String;Ljava/util/List<Lco/touchlab/droidconandroid/shared/viewmodel/HourBlock;>;>;)Ljava/util/List<Lco/touchlab/droidconandroid/shared/viewmodel/DaySchedule;>;", "saveConvention", "LDNETDConvention;", "saveConventionData", &DVMConferenceDataHelper_DATE_FORMAT, "Ljava/lang/ThreadLocal<Ljava/text/SimpleDateFormat;>;", &DVMConferenceDataHelper_TIME_FORMAT, (void *)&DVMConferenceDataHelper__Annotations$1 };
  static const J2ObjcClassInfo _DVMConferenceDataHelper = { "ConferenceDataHelper", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, 20 };
  return &_DVMConferenceDataHelper;
}

+ (void)initialize {
  if (self == [DVMConferenceDataHelper class]) {
    JreStrongAssignAndConsume(&DVMConferenceDataHelper_DATE_FORMAT, new_DVMConferenceDataHelper_1_init());
    JreStrongAssignAndConsume(&DVMConferenceDataHelper_TIME_FORMAT, new_DVMConferenceDataHelper_2_init());
    J2OBJC_SET_INITIALIZED(DVMConferenceDataHelper)
  }
}

@end

void DVMConferenceDataHelper_initWithDDATAppPrefs_withDDATDatabaseHelper_(DVMConferenceDataHelper *self, DDATAppPrefs *appPrefs, DDATDatabaseHelper *helper) {
  NSObject_init(self);
  JreStrongAssign(&self->appPrefs_, appPrefs);
  JreStrongAssign(&self->helper_, helper);
}

DVMConferenceDataHelper *new_DVMConferenceDataHelper_initWithDDATAppPrefs_withDDATDatabaseHelper_(DDATAppPrefs *appPrefs, DDATDatabaseHelper *helper) {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper, initWithDDATAppPrefs_withDDATDatabaseHelper_, appPrefs, helper)
}

DVMConferenceDataHelper *create_DVMConferenceDataHelper_initWithDDATAppPrefs_withDDATDatabaseHelper_(DDATAppPrefs *appPrefs, DDATDatabaseHelper *helper) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper, initWithDDATAppPrefs_withDDATDatabaseHelper_, appPrefs, helper)
}

NSString *DVMConferenceDataHelper_dateToDayStringWithJavaUtilDate_(JavaUtilDate *d) {
  DVMConferenceDataHelper_initialize();
  return [((JavaTextSimpleDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(DVMConferenceDataHelper_DATE_FORMAT)) get])) formatWithJavaUtilDate:d];
}

id<JavaUtilList> DVMConferenceDataHelper_getDaySchedules(DVMConferenceDataHelper *self) {
  id<JavaUtilList> eventAndBlockList = create_JavaUtilArrayList_init();
  id<JavaUtilList> eventList = [((DDATDatabaseHelper *) nil_chk(self->helper_)) getEventsWithSpeakersList];
  [eventAndBlockList addAllWithJavaUtilCollection:[self->helper_ getBlocksList]];
  [eventAndBlockList addAllWithJavaUtilCollection:eventList];
  return eventAndBlockList;
}

void DVMConferenceDataHelper_saveConventionDataWithDNETDConvention_(DVMConferenceDataHelper *self, DNETDConvention *convention) {
  if (convention == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"No convention results");
  }
  [((DDATDatabaseHelper *) nil_chk(self->helper_)) runInTransactionWithJavaLangRunnable:create_DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(self, convention)];
}

IOSObjectArray *DVMConferenceDataHelper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DVMConferenceDataHelper__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectSingleton() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMConferenceDataHelper)

@implementation DVMConferenceDataHelper_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DVMConferenceDataHelper_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaTextSimpleDateFormat *)initialValue {
  return DUTTimeUtils_makeDateFormatWithNSString_(@"MM/dd/yyyy");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextSimpleDateFormat;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LDVMConferenceDataHelper;", "Ljava/lang/ThreadLocal<Ljava/text/SimpleDateFormat;>;" };
  static const J2ObjcClassInfo _DVMConferenceDataHelper_1 = { "", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_DVMConferenceDataHelper_1;
}

@end

void DVMConferenceDataHelper_1_init(DVMConferenceDataHelper_1 *self) {
  JavaLangThreadLocal_init(self);
}

DVMConferenceDataHelper_1 *new_DVMConferenceDataHelper_1_init() {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_1, init)
}

DVMConferenceDataHelper_1 *create_DVMConferenceDataHelper_1_init() {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_1, init)
}

@implementation DVMConferenceDataHelper_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DVMConferenceDataHelper_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaTextSimpleDateFormat *)initialValue {
  return DUTTimeUtils_makeDateFormatWithNSString_(@"h:mma");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextSimpleDateFormat;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LDVMConferenceDataHelper;", "Ljava/lang/ThreadLocal<Ljava/text/SimpleDateFormat;>;" };
  static const J2ObjcClassInfo _DVMConferenceDataHelper_2 = { "", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_DVMConferenceDataHelper_2;
}

@end

void DVMConferenceDataHelper_2_init(DVMConferenceDataHelper_2 *self) {
  JavaLangThreadLocal_init(self);
}

DVMConferenceDataHelper_2 *new_DVMConferenceDataHelper_2_init() {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_2, init)
}

DVMConferenceDataHelper_2 *create_DVMConferenceDataHelper_2_init() {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_2, init)
}

@implementation DVMConferenceDataHelper_$Lambda$1

- (id)call {
  return DVMConferenceDataHelper_getDaySchedules(target$_);
}

- (void)dealloc {
  RELEASE_(target$_);
  [super dealloc];
}

@end

void DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper_$Lambda$1 *self, DVMConferenceDataHelper *outer$) {
  JreStrongAssign(&self->target$_, outer$);
  NSObject_init(self);
}

DVMConferenceDataHelper_$Lambda$1 *new_DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper *outer$) {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_$Lambda$1, initWithDVMConferenceDataHelper_, outer$)
}

DVMConferenceDataHelper_$Lambda$1 *create_DVMConferenceDataHelper_$Lambda$1_initWithDVMConferenceDataHelper_(DVMConferenceDataHelper *outer$) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_$Lambda$1, initWithDVMConferenceDataHelper_, outer$)
}

@implementation DVMConferenceDataHelper_$Lambda$2

- (void)run {
  DVMConferenceDataHelper_saveConventionDataWithDNETDConvention_(this$0_, val$convention_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$convention_);
  [super dealloc];
}

@end

void DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper_$Lambda$2 *self, DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$convention_, capture$0);
  NSObject_init(self);
}

DVMConferenceDataHelper_$Lambda$2 *new_DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_$Lambda$2, initWithDVMConferenceDataHelper_withDNETDConvention_, outer$, capture$0)
}

DVMConferenceDataHelper_$Lambda$2 *create_DVMConferenceDataHelper_$Lambda$2_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_$Lambda$2, initWithDVMConferenceDataHelper_withDNETDConvention_, outer$, capture$0)
}

@implementation DVMConferenceDataHelper_$Lambda$3

- (void)run {
  [((DDATAppPrefs *) nil_chk(this$0_->appPrefs_)) setConventionDatesWithNSString:((DNETDConvention *) nil_chk(val$convention_))->startDate_ withNSString:val$convention_->endDate_];
  id<JavaUtilList> newVenueList = val$convention_->venues_;
  id<JavaUtilList> newBlockList = val$convention_->blocks_;
  id<JavaUtilSet> eventIdList = create_JavaUtilHashSet_init();
  @try {
    for (DNETDNetworkVenue * __strong newVenue in nil_chk(newVenueList)) {
      for (DNETDNetworkEvent * __strong newEvent in nil_chk(((DNETDNetworkVenue *) nil_chk(newVenue))->events_)) {
        [eventIdList addWithId:JavaLangLong_valueOfWithLong_(((DNETDNetworkEvent *) nil_chk(newEvent))->id__)];
        NSString *matchingRsvpUuid = [((DDATDatabaseHelper *) nil_chk(this$0_->helper_)) getRsvpUuidForEventWithIdWithLong:newEvent->id__];
        JreStrongAssign(&newEvent->venue_, newVenue);
        if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(newEvent->startDate_) || AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(newEvent->endDate_)) {
          continue;
        }
        JreStrongAssign(&newEvent->startDateLong_, JavaLangLong_valueOfWithLong_(DUTTimeUtils_parseTimeWithNSString_(newEvent->startDate_)));
        JreStrongAssign(&newEvent->endDateLong_, JavaLangLong_valueOfWithLong_(DUTTimeUtils_parseTimeWithNSString_(newEvent->endDate_)));
        if (matchingRsvpUuid != nil) {
          JreStrongAssign(&newEvent->rsvpUuid_, matchingRsvpUuid);
        }
        [this$0_->helper_ createEventWithDDATEvent:newEvent];
        jint speakerCount = 0;
        for (DNETDNetworkUserAccount * __strong newSpeaker in nil_chk(newEvent->speakers_)) {
          DDATUserAccount *oldSpeaker = [this$0_->helper_ getUserAccountWithLong:[((JavaLangLong *) nil_chk(((DNETDNetworkUserAccount *) nil_chk(newSpeaker))->id__)) longLongValue]];
          if (oldSpeaker == nil) {
            oldSpeaker = create_DDATUserAccount_init();
          }
          [this$0_->helper_ convertAndSaveUserAccountWithDNETDNetworkUserAccount:newSpeaker withDDATUserAccount:oldSpeaker];
          DDATEventSpeaker *eventSpeaker = [this$0_->helper_ getSpeakerForEventWithIdWithLong:newEvent->id__ withLong:[((JavaLangLong *) nil_chk(newSpeaker->id__)) longLongValue]];
          if (eventSpeaker == nil) {
            eventSpeaker = create_DDATEventSpeaker_init();
          }
          eventSpeaker->eventId_ = newEvent->id__;
          JreStrongAssign(&eventSpeaker->name_, oldSpeaker->name_);
          eventSpeaker->userAccountId_ = [((JavaLangLong *) nil_chk(oldSpeaker->id__)) longLongValue];
          eventSpeaker->displayOrder_ = speakerCount++;
          [this$0_->helper_ updateSpeakerWithDDATEventSpeaker:eventSpeaker];
        }
      }
    }
    if (![eventIdList isEmpty]) {
      [((DDATDatabaseHelper *) nil_chk(this$0_->helper_)) deleteEventsNotInWithJavaUtilSet:eventIdList];
    }
    if ([((id<JavaUtilList>) nil_chk(newBlockList)) size] > 0) {
      [((DDATDatabaseHelper *) nil_chk(this$0_->helper_)) deleteBlocksWithJavaUtilList:[this$0_->helper_ getBlocksList]];
      for (DDATBlock * __strong newBlock in newBlockList) {
        JreStrongAssign(&((DDATBlock *) nil_chk(newBlock))->startDateLong_, JavaLangLong_valueOfWithLong_(DUTTimeUtils_parseTimeWithNSString_(newBlock->startDate_)));
        JreStrongAssign(&newBlock->endDateLong_, JavaLangLong_valueOfWithLong_(DUTTimeUtils_parseTimeWithNSString_(newBlock->endDate_)));
        [this$0_->helper_ updateBlockWithDDATBlock:newBlock];
      }
    }
  }
  @catch (JavaTextParseException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$convention_);
  [super dealloc];
}

@end

void DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper_$Lambda$3 *self, DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$convention_, capture$0);
  NSObject_init(self);
}

DVMConferenceDataHelper_$Lambda$3 *new_DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  J2OBJC_NEW_IMPL(DVMConferenceDataHelper_$Lambda$3, initWithDVMConferenceDataHelper_withDNETDConvention_, outer$, capture$0)
}

DVMConferenceDataHelper_$Lambda$3 *create_DVMConferenceDataHelper_$Lambda$3_initWithDVMConferenceDataHelper_withDNETDConvention_(DVMConferenceDataHelper *outer$, DNETDConvention *capture$0) {
  J2OBJC_CREATE_IMPL(DVMConferenceDataHelper_$Lambda$3, initWithDVMConferenceDataHelper_withDNETDConvention_, outer$, capture$0)
}
