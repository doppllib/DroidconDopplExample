//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DVMConferenceDataHelper_Factory")
#ifdef RESTRICT_DVMConferenceDataHelper_Factory
#define INCLUDE_ALL_DVMConferenceDataHelper_Factory 0
#else
#define INCLUDE_ALL_DVMConferenceDataHelper_Factory 1
#endif
#undef RESTRICT_DVMConferenceDataHelper_Factory

#if !defined (DVMConferenceDataHelper_Factory_) && (INCLUDE_ALL_DVMConferenceDataHelper_Factory || defined(INCLUDE_DVMConferenceDataHelper_Factory))
#define DVMConferenceDataHelper_Factory_

#define RESTRICT_DaggerInternalFactory 1
#define INCLUDE_DaggerInternalFactory 1
#include "DaggerInternalFactory.h"

@class DVMConferenceDataHelper;
@protocol JavaxInjectProvider;

@interface DVMConferenceDataHelper_Factory : NSObject < DaggerInternalFactory >

#pragma mark Public

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider
                    withJavaxInjectProvider:(id<JavaxInjectProvider>)helperProvider;

+ (id<DaggerInternalFactory>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)appPrefsProvider
                                   withJavaxInjectProvider:(id<JavaxInjectProvider>)helperProvider;

- (DVMConferenceDataHelper *)get;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMConferenceDataHelper_Factory)

FOUNDATION_EXPORT void DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(DVMConferenceDataHelper_Factory *self, id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider);

FOUNDATION_EXPORT DVMConferenceDataHelper_Factory *new_DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DVMConferenceDataHelper_Factory *create_DVMConferenceDataHelper_Factory_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider);

FOUNDATION_EXPORT id<DaggerInternalFactory> DVMConferenceDataHelper_Factory_createWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> appPrefsProvider, id<JavaxInjectProvider> helperProvider);

J2OBJC_TYPE_LITERAL_HEADER(DVMConferenceDataHelper_Factory)

@compatibility_alias CoTouchlabDroidconandroidSharedViewmodelConferenceDataHelper_Factory DVMConferenceDataHelper_Factory;

#endif

#pragma pop_macro("INCLUDE_ALL_DVMConferenceDataHelper_Factory")
