//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DaggerInternalDelegateFactory.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "javax/inject/Provider.h"

@interface DaggerInternalDelegateFactory () {
 @public
  id<JavaxInjectProvider> delegate_;
}

@end

J2OBJC_FIELD_SETTER(DaggerInternalDelegateFactory, delegate_, id<JavaxInjectProvider>)

@implementation DaggerInternalDelegateFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalDelegateFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)get {
  if (delegate_ == nil) {
    @throw create_JavaLangIllegalStateException_init();
  }
  return [delegate_ get];
}

- (void)setDelegatedProviderWithJavaxInjectProvider:(id<JavaxInjectProvider>)delegate {
  if (delegate == nil) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  if (self->delegate_ != nil) {
    @throw create_JavaLangIllegalStateException_init();
  }
  JreStrongAssign(&self->delegate_, delegate);
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(setDelegatedProviderWithJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "setDelegatedProvider", "LJavaxInjectProvider;", "(Ljavax/inject/Provider<TT;>;)V", "Ljavax/inject/Provider<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ldagger/internal/Factory<TT;>;" };
  static const J2ObjcClassInfo _DaggerInternalDelegateFactory = { "DelegateFactory", "dagger.internal", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 5, -1 };
  return &_DaggerInternalDelegateFactory;
}

@end

void DaggerInternalDelegateFactory_init(DaggerInternalDelegateFactory *self) {
  NSObject_init(self);
}

DaggerInternalDelegateFactory *new_DaggerInternalDelegateFactory_init() {
  J2OBJC_NEW_IMPL(DaggerInternalDelegateFactory, init)
}

DaggerInternalDelegateFactory *create_DaggerInternalDelegateFactory_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalDelegateFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalDelegateFactory)
