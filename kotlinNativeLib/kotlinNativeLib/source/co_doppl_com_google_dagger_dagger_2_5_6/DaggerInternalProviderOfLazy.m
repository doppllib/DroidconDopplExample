//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DaggerInternalDoubleCheck.h"
#include "DaggerInternalPreconditions.h"
#include "DaggerInternalProviderOfLazy.h"
#include "DaggerLazy.h"
#include "J2ObjC_source.h"
#include "javax/inject/Provider.h"

@interface DaggerInternalProviderOfLazy () {
 @public
  id<JavaxInjectProvider> provider_;
}

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider;

@end

J2OBJC_FIELD_SETTER(DaggerInternalProviderOfLazy, provider_, id<JavaxInjectProvider>)

__attribute__((unused)) static void DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(DaggerInternalProviderOfLazy *self, id<JavaxInjectProvider> provider);

__attribute__((unused)) static DaggerInternalProviderOfLazy *new_DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalProviderOfLazy *create_DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider);

@implementation DaggerInternalProviderOfLazy

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(self, provider);
  return self;
}

- (id<DaggerLazy>)get {
  return DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(provider_);
}

+ (id<JavaxInjectProvider>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  return DaggerInternalProviderOfLazy_createWithJavaxInjectProvider_(provider);
}

- (void)dealloc {
  RELEASE_(provider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDaggerLazy;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaxInjectProvider;", 0x9, 3, 0, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(createWithJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "provider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;", "(Ljavax/inject/Provider<TT;>;)V", "()Ldagger/Lazy<TT;>;", "create", "<T:Ljava/lang/Object;>(Ljavax/inject/Provider<TT;>;)Ljavax/inject/Provider<Ldagger/Lazy<TT;>;>;", "Ljavax/inject/Provider<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljavax/inject/Provider<Ldagger/Lazy<TT;>;>;" };
  static const J2ObjcClassInfo _DaggerInternalProviderOfLazy = { "ProviderOfLazy", "dagger.internal", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 6, -1 };
  return &_DaggerInternalProviderOfLazy;
}

@end

void DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(DaggerInternalProviderOfLazy *self, id<JavaxInjectProvider> provider) {
  NSObject_init(self);
  JreAssert(provider != nil, @"dagger/internal/ProviderOfLazy.java:31 condition failed: assert provider != null;");
  JreStrongAssign(&self->provider_, provider);
}

DaggerInternalProviderOfLazy *new_DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  J2OBJC_NEW_IMPL(DaggerInternalProviderOfLazy, initWithJavaxInjectProvider_, provider)
}

DaggerInternalProviderOfLazy *create_DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  J2OBJC_CREATE_IMPL(DaggerInternalProviderOfLazy, initWithJavaxInjectProvider_, provider)
}

id<JavaxInjectProvider> DaggerInternalProviderOfLazy_createWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  DaggerInternalProviderOfLazy_initialize();
  return create_DaggerInternalProviderOfLazy_initWithJavaxInjectProvider_(DaggerInternalPreconditions_checkNotNullWithId_(provider));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalProviderOfLazy)
