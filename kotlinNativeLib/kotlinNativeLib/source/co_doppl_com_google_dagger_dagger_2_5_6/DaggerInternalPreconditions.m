//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DaggerInternalPreconditions.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"

@interface DaggerInternalPreconditions ()

- (instancetype)init;

@end

__attribute__((unused)) static void DaggerInternalPreconditions_init(DaggerInternalPreconditions *self);

__attribute__((unused)) static DaggerInternalPreconditions *new_DaggerInternalPreconditions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalPreconditions *create_DaggerInternalPreconditions_init();

@implementation DaggerInternalPreconditions

+ (id)checkNotNullWithId:(id)reference {
  return DaggerInternalPreconditions_checkNotNullWithId_(reference);
}

+ (id)checkNotNullWithId:(id)reference
            withNSString:(NSString *)errorMessage {
  return DaggerInternalPreconditions_checkNotNullWithId_withNSString_(reference, errorMessage);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalPreconditions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkNotNullWithId:);
  methods[1].selector = @selector(checkNotNullWithId:withNSString:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkNotNull", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)TT;", "LNSObject;LNSString;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)TT;" };
  static const J2ObjcClassInfo _DaggerInternalPreconditions = { "Preconditions", "dagger.internal", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_DaggerInternalPreconditions;
}

@end

id DaggerInternalPreconditions_checkNotNullWithId_(id reference) {
  DaggerInternalPreconditions_initialize();
  if (reference == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  return reference;
}

id DaggerInternalPreconditions_checkNotNullWithId_withNSString_(id reference, NSString *errorMessage) {
  DaggerInternalPreconditions_initialize();
  if (reference == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(errorMessage);
  }
  return reference;
}

void DaggerInternalPreconditions_init(DaggerInternalPreconditions *self) {
  NSObject_init(self);
}

DaggerInternalPreconditions *new_DaggerInternalPreconditions_init() {
  J2OBJC_NEW_IMPL(DaggerInternalPreconditions, init)
}

DaggerInternalPreconditions *create_DaggerInternalPreconditions_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalPreconditions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalPreconditions)
