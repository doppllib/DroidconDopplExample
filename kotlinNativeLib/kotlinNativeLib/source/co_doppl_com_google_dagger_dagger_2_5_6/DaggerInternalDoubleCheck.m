//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DaggerInternalDoubleCheck.h"
#include "DaggerInternalPreconditions.h"
#include "DaggerLazy.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "javax/inject/Provider.h"

@interface DaggerInternalDoubleCheck () {
 @public
  volatile_id provider_;
  volatile_id instance_;
}

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider;

@end

J2OBJC_VOLATILE_FIELD_SETTER(DaggerInternalDoubleCheck, provider_, id<JavaxInjectProvider>)
J2OBJC_VOLATILE_FIELD_SETTER(DaggerInternalDoubleCheck, instance_, id)

inline id DaggerInternalDoubleCheck_get_UNINITIALIZED();
static id DaggerInternalDoubleCheck_UNINITIALIZED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DaggerInternalDoubleCheck, UNINITIALIZED, id)

__attribute__((unused)) static void DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(DaggerInternalDoubleCheck *self, id<JavaxInjectProvider> provider);

__attribute__((unused)) static DaggerInternalDoubleCheck *new_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheck *create_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider);

J2OBJC_INITIALIZED_DEFN(DaggerInternalDoubleCheck)

@implementation DaggerInternalDoubleCheck

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(self, provider);
  return self;
}

- (id)get {
  id result = JreLoadVolatileId(&instance_);
  if (result == DaggerInternalDoubleCheck_UNINITIALIZED) {
    @synchronized(self) {
      result = JreRetainedLocalValue(JreLoadVolatileId(&instance_));
      if (result == DaggerInternalDoubleCheck_UNINITIALIZED) {
        result = JreRetainedLocalValue([((id<JavaxInjectProvider>) nil_chk(JreLoadVolatileId(&provider_))) get]);
        id currentInstance = JreLoadVolatileId(&instance_);
        if (currentInstance != DaggerInternalDoubleCheck_UNINITIALIZED && currentInstance != result) {
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Scoped provider was invoked recursively returning different results: ", currentInstance, @" & ", result));
        }
        JreVolatileStrongAssign(&instance_, result);
        JreVolatileStrongAssign(&provider_, nil);
      }
    }
  }
  return result;
}

+ (id<JavaxInjectProvider>)providerWithJavaxInjectProvider:(id<JavaxInjectProvider>)delegate {
  return DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(delegate);
}

+ (id<DaggerLazy>)lazyWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  return DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(provider);
}

- (void)__javaClone:(DaggerInternalDoubleCheck *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&provider_, &original->provider_);
  JreCloneVolatileStrong(&instance_, &original->instance_);
}

- (void)dealloc {
  JreReleaseVolatile(&provider_);
  JreReleaseVolatile(&instance_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaxInjectProvider;", 0x9, 3, 0, -1, 4, -1, -1 },
    { NULL, "LDaggerLazy;", 0x9, 5, 0, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(providerWithJavaxInjectProvider:);
  methods[3].selector = @selector(lazyWithJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNINITIALIZED", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "provider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x42, -1, -1, 8, -1 },
    { "instance_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;", "(Ljavax/inject/Provider<TT;>;)V", "()TT;", "provider", "<T:Ljava/lang/Object;>(Ljavax/inject/Provider<TT;>;)Ljavax/inject/Provider<TT;>;", "lazy", "<T:Ljava/lang/Object;>(Ljavax/inject/Provider<TT;>;)Ldagger/Lazy<TT;>;", &DaggerInternalDoubleCheck_UNINITIALIZED, "Ljavax/inject/Provider<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljavax/inject/Provider<TT;>;Ldagger/Lazy<TT;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheck = { "DoubleCheck", "dagger.internal", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, -1, -1, 9, -1 };
  return &_DaggerInternalDoubleCheck;
}

+ (void)initialize {
  if (self == [DaggerInternalDoubleCheck class]) {
    JreStrongAssignAndConsume(&DaggerInternalDoubleCheck_UNINITIALIZED, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(DaggerInternalDoubleCheck)
  }
}

@end

void DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(DaggerInternalDoubleCheck *self, id<JavaxInjectProvider> provider) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->instance_, DaggerInternalDoubleCheck_UNINITIALIZED);
  JreAssert(provider != nil, @"dagger/internal/DoubleCheck.java:34 condition failed: assert provider != null;");
  JreVolatileStrongAssign(&self->provider_, provider);
}

DaggerInternalDoubleCheck *new_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheck, initWithJavaxInjectProvider_, provider)
}

DaggerInternalDoubleCheck *create_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheck, initWithJavaxInjectProvider_, provider)
}

id<JavaxInjectProvider> DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(id<JavaxInjectProvider> delegate) {
  DaggerInternalDoubleCheck_initialize();
  DaggerInternalPreconditions_checkNotNullWithId_(delegate);
  if ([delegate isKindOfClass:[DaggerInternalDoubleCheck class]]) {
    return delegate;
  }
  return create_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(delegate);
}

id<DaggerLazy> DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  DaggerInternalDoubleCheck_initialize();
  if ([DaggerLazy_class_() isInstance:provider]) {
    id<DaggerLazy> lazy = (id<DaggerLazy>) cast_check(provider, DaggerLazy_class_());
    return lazy;
  }
  return create_DaggerInternalDoubleCheck_initWithJavaxInjectProvider_(DaggerInternalPreconditions_checkNotNullWithId_(provider));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalDoubleCheck)
