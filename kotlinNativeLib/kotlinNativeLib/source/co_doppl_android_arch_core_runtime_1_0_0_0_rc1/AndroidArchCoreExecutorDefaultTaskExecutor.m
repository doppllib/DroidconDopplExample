//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorDefaultTaskExecutor.h"
#include "AndroidArchCoreExecutorTaskExecutor.h"
#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"

@interface AndroidArchCoreExecutorDefaultTaskExecutor () {
 @public
  id mLock_;
  id<JavaUtilConcurrentExecutorService> mDiskIO_;
  volatile_id mMainHandler_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorDefaultTaskExecutor, mLock_, id)
J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorDefaultTaskExecutor, mDiskIO_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidArchCoreExecutorDefaultTaskExecutor, mMainHandler_, AndroidOsHandler *)

@implementation AndroidArchCoreExecutorDefaultTaskExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchCoreExecutorDefaultTaskExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeOnDiskIOWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(mDiskIO_)) executeWithJavaLangRunnable:runnable];
}

- (void)postToMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if (JreLoadVolatileId(&mMainHandler_) == nil) {
    @synchronized(mLock_) {
      if (JreLoadVolatileId(&mMainHandler_) == nil) {
        JreVolatileStrongAssign(&mMainHandler_, create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper()));
      }
    }
  }
  [((AndroidOsHandler *) nil_chk(JreLoadVolatileId(&mMainHandler_))) postWithJavaLangRunnable:runnable];
}

- (jboolean)isMainThread {
  return [((AndroidOsLooper *) nil_chk(AndroidOsLooper_getMainLooper())) getThread] == JavaLangThread_currentThread();
}

- (void)__javaClone:(AndroidArchCoreExecutorDefaultTaskExecutor *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mMainHandler_, &original->mMainHandler_);
}

- (void)dealloc {
  RELEASE_(mLock_);
  RELEASE_(mDiskIO_);
  JreReleaseVolatile(&mMainHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeOnDiskIOWithJavaLangRunnable:);
  methods[2].selector = @selector(postToMainThreadWithJavaLangRunnable:);
  methods[3].selector = @selector(isMainThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDiskIO_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMainHandler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "executeOnDiskIO", "LJavaLangRunnable;", "postToMainThread" };
  static const J2ObjcClassInfo _AndroidArchCoreExecutorDefaultTaskExecutor = { "DefaultTaskExecutor", "android.arch.core.executor", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_AndroidArchCoreExecutorDefaultTaskExecutor;
}

@end

void AndroidArchCoreExecutorDefaultTaskExecutor_init(AndroidArchCoreExecutorDefaultTaskExecutor *self) {
  AndroidArchCoreExecutorTaskExecutor_init(self);
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssign(&self->mDiskIO_, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(2));
}

AndroidArchCoreExecutorDefaultTaskExecutor *new_AndroidArchCoreExecutorDefaultTaskExecutor_init() {
  J2OBJC_NEW_IMPL(AndroidArchCoreExecutorDefaultTaskExecutor, init)
}

AndroidArchCoreExecutorDefaultTaskExecutor *create_AndroidArchCoreExecutorDefaultTaskExecutor_init() {
  J2OBJC_CREATE_IMPL(AndroidArchCoreExecutorDefaultTaskExecutor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchCoreExecutorDefaultTaskExecutor)
