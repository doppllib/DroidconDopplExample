//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreExecutorArchTaskExecutor.h"
#include "AndroidArchCoreExecutorDefaultTaskExecutor.h"
#include "AndroidArchCoreExecutorTaskExecutor.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/Executor.h"

@interface AndroidArchCoreExecutorArchTaskExecutor () {
 @public
  AndroidArchCoreExecutorTaskExecutor *mDelegate_;
  AndroidArchCoreExecutorTaskExecutor *mDefaultTaskExecutor_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorArchTaskExecutor, mDelegate_, AndroidArchCoreExecutorTaskExecutor *)
J2OBJC_FIELD_SETTER(AndroidArchCoreExecutorArchTaskExecutor, mDefaultTaskExecutor_, AndroidArchCoreExecutorTaskExecutor *)

inline AndroidArchCoreExecutorArchTaskExecutor *AndroidArchCoreExecutorArchTaskExecutor_get_sInstance();
inline AndroidArchCoreExecutorArchTaskExecutor *AndroidArchCoreExecutorArchTaskExecutor_set_sInstance(AndroidArchCoreExecutorArchTaskExecutor *value);
static volatile_id AndroidArchCoreExecutorArchTaskExecutor_sInstance;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(AndroidArchCoreExecutorArchTaskExecutor, sInstance, AndroidArchCoreExecutorArchTaskExecutor *)

inline id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_get_sMainThreadExecutor();
static id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_sMainThreadExecutor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchCoreExecutorArchTaskExecutor, sMainThreadExecutor, id<JavaUtilConcurrentExecutor>)

inline id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_get_sIOThreadExecutor();
static id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_sIOThreadExecutor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchCoreExecutorArchTaskExecutor, sIOThreadExecutor, id<JavaUtilConcurrentExecutor>)

__attribute__((unused)) static void AndroidArchCoreExecutorArchTaskExecutor_init(AndroidArchCoreExecutorArchTaskExecutor *self);

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor *new_AndroidArchCoreExecutorArchTaskExecutor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor *create_AndroidArchCoreExecutorArchTaskExecutor_init();

@interface AndroidArchCoreExecutorArchTaskExecutor_1 : NSObject < JavaUtilConcurrentExecutor >

- (instancetype)init;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchCoreExecutorArchTaskExecutor_1)

__attribute__((unused)) static void AndroidArchCoreExecutorArchTaskExecutor_1_init(AndroidArchCoreExecutorArchTaskExecutor_1 *self);

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor_1 *new_AndroidArchCoreExecutorArchTaskExecutor_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor_1 *create_AndroidArchCoreExecutorArchTaskExecutor_1_init();

@interface AndroidArchCoreExecutorArchTaskExecutor_2 : NSObject < JavaUtilConcurrentExecutor >

- (instancetype)init;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchCoreExecutorArchTaskExecutor_2)

__attribute__((unused)) static void AndroidArchCoreExecutorArchTaskExecutor_2_init(AndroidArchCoreExecutorArchTaskExecutor_2 *self);

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor_2 *new_AndroidArchCoreExecutorArchTaskExecutor_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchCoreExecutorArchTaskExecutor_2 *create_AndroidArchCoreExecutorArchTaskExecutor_2_init();

J2OBJC_INITIALIZED_DEFN(AndroidArchCoreExecutorArchTaskExecutor)

@implementation AndroidArchCoreExecutorArchTaskExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchCoreExecutorArchTaskExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (AndroidArchCoreExecutorArchTaskExecutor *)getInstance {
  return AndroidArchCoreExecutorArchTaskExecutor_getInstance();
}

- (void)setDelegateWithAndroidArchCoreExecutorTaskExecutor:(AndroidArchCoreExecutorTaskExecutor * __nullable)taskExecutor {
  JreStrongAssign(&mDelegate_, taskExecutor == nil ? mDefaultTaskExecutor_ : taskExecutor);
}

- (void)executeOnDiskIOWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) executeOnDiskIOWithJavaLangRunnable:runnable];
}

- (void)postToMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) postToMainThreadWithJavaLangRunnable:runnable];
}

+ (id<JavaUtilConcurrentExecutor> __nonnull)getMainThreadExecutor {
  return AndroidArchCoreExecutorArchTaskExecutor_getMainThreadExecutor();
}

+ (id<JavaUtilConcurrentExecutor> __nonnull)getIOThreadExecutor {
  return AndroidArchCoreExecutorArchTaskExecutor_getIOThreadExecutor();
}

- (jboolean)isMainThread {
  return [((AndroidArchCoreExecutorTaskExecutor *) nil_chk(mDelegate_)) isMainThread];
}

- (void)dealloc {
  RELEASE_(mDelegate_);
  RELEASE_(mDefaultTaskExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchCoreExecutorArchTaskExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(setDelegateWithAndroidArchCoreExecutorTaskExecutor:);
  methods[3].selector = @selector(executeOnDiskIOWithJavaLangRunnable:);
  methods[4].selector = @selector(postToMainThreadWithJavaLangRunnable:);
  methods[5].selector = @selector(getMainThreadExecutor);
  methods[6].selector = @selector(getIOThreadExecutor);
  methods[7].selector = @selector(isMainThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sInstance", "LAndroidArchCoreExecutorArchTaskExecutor;", .constantValue.asLong = 0, 0x4a, -1, 5, -1, -1 },
    { "mDelegate_", "LAndroidArchCoreExecutorTaskExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultTaskExecutor_", "LAndroidArchCoreExecutorTaskExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sMainThreadExecutor", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "sIOThreadExecutor", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "setDelegate", "LAndroidArchCoreExecutorTaskExecutor;", "executeOnDiskIO", "LJavaLangRunnable;", "postToMainThread", &AndroidArchCoreExecutorArchTaskExecutor_sInstance, &AndroidArchCoreExecutorArchTaskExecutor_sMainThreadExecutor, &AndroidArchCoreExecutorArchTaskExecutor_sIOThreadExecutor };
  static const J2ObjcClassInfo _AndroidArchCoreExecutorArchTaskExecutor = { "ArchTaskExecutor", "android.arch.core.executor", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, -1, -1, -1, -1 };
  return &_AndroidArchCoreExecutorArchTaskExecutor;
}

+ (void)initialize {
  if (self == [AndroidArchCoreExecutorArchTaskExecutor class]) {
    JreStrongAssignAndConsume(&AndroidArchCoreExecutorArchTaskExecutor_sMainThreadExecutor, new_AndroidArchCoreExecutorArchTaskExecutor_1_init());
    JreStrongAssignAndConsume(&AndroidArchCoreExecutorArchTaskExecutor_sIOThreadExecutor, new_AndroidArchCoreExecutorArchTaskExecutor_2_init());
    J2OBJC_SET_INITIALIZED(AndroidArchCoreExecutorArchTaskExecutor)
  }
}

@end

void AndroidArchCoreExecutorArchTaskExecutor_init(AndroidArchCoreExecutorArchTaskExecutor *self) {
  AndroidArchCoreExecutorTaskExecutor_init(self);
  JreStrongAssignAndConsume(&self->mDefaultTaskExecutor_, new_AndroidArchCoreExecutorDefaultTaskExecutor_init());
  JreStrongAssign(&self->mDelegate_, self->mDefaultTaskExecutor_);
}

AndroidArchCoreExecutorArchTaskExecutor *new_AndroidArchCoreExecutorArchTaskExecutor_init() {
  J2OBJC_NEW_IMPL(AndroidArchCoreExecutorArchTaskExecutor, init)
}

AndroidArchCoreExecutorArchTaskExecutor *create_AndroidArchCoreExecutorArchTaskExecutor_init() {
  J2OBJC_CREATE_IMPL(AndroidArchCoreExecutorArchTaskExecutor, init)
}

AndroidArchCoreExecutorArchTaskExecutor *AndroidArchCoreExecutorArchTaskExecutor_getInstance() {
  AndroidArchCoreExecutorArchTaskExecutor_initialize();
  if (JreLoadVolatileId(&AndroidArchCoreExecutorArchTaskExecutor_sInstance) != nil) {
    return JreLoadVolatileId(&AndroidArchCoreExecutorArchTaskExecutor_sInstance);
  }
  @synchronized(AndroidArchCoreExecutorArchTaskExecutor_class_()) {
    if (JreLoadVolatileId(&AndroidArchCoreExecutorArchTaskExecutor_sInstance) == nil) {
      JreVolatileStrongAssign(&AndroidArchCoreExecutorArchTaskExecutor_sInstance, create_AndroidArchCoreExecutorArchTaskExecutor_init());
    }
  }
  return JreLoadVolatileId(&AndroidArchCoreExecutorArchTaskExecutor_sInstance);
}

id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_getMainThreadExecutor() {
  AndroidArchCoreExecutorArchTaskExecutor_initialize();
  return AndroidArchCoreExecutorArchTaskExecutor_sMainThreadExecutor;
}

id<JavaUtilConcurrentExecutor> AndroidArchCoreExecutorArchTaskExecutor_getIOThreadExecutor() {
  AndroidArchCoreExecutorArchTaskExecutor_initialize();
  return AndroidArchCoreExecutorArchTaskExecutor_sIOThreadExecutor;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchCoreExecutorArchTaskExecutor)

@implementation AndroidArchCoreExecutorArchTaskExecutor_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchCoreExecutorArchTaskExecutor_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) postToMainThreadWithJavaLangRunnable:command];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LAndroidArchCoreExecutorArchTaskExecutor;" };
  static const J2ObjcClassInfo _AndroidArchCoreExecutorArchTaskExecutor_1 = { "", "android.arch.core.executor", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_AndroidArchCoreExecutorArchTaskExecutor_1;
}

@end

void AndroidArchCoreExecutorArchTaskExecutor_1_init(AndroidArchCoreExecutorArchTaskExecutor_1 *self) {
  NSObject_init(self);
}

AndroidArchCoreExecutorArchTaskExecutor_1 *new_AndroidArchCoreExecutorArchTaskExecutor_1_init() {
  J2OBJC_NEW_IMPL(AndroidArchCoreExecutorArchTaskExecutor_1, init)
}

AndroidArchCoreExecutorArchTaskExecutor_1 *create_AndroidArchCoreExecutorArchTaskExecutor_1_init() {
  J2OBJC_CREATE_IMPL(AndroidArchCoreExecutorArchTaskExecutor_1, init)
}

@implementation AndroidArchCoreExecutorArchTaskExecutor_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchCoreExecutorArchTaskExecutor_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((AndroidArchCoreExecutorArchTaskExecutor *) nil_chk(AndroidArchCoreExecutorArchTaskExecutor_getInstance())) executeOnDiskIOWithJavaLangRunnable:command];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LAndroidArchCoreExecutorArchTaskExecutor;" };
  static const J2ObjcClassInfo _AndroidArchCoreExecutorArchTaskExecutor_2 = { "", "android.arch.core.executor", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_AndroidArchCoreExecutorArchTaskExecutor_2;
}

@end

void AndroidArchCoreExecutorArchTaskExecutor_2_init(AndroidArchCoreExecutorArchTaskExecutor_2 *self) {
  NSObject_init(self);
}

AndroidArchCoreExecutorArchTaskExecutor_2 *new_AndroidArchCoreExecutorArchTaskExecutor_2_init() {
  J2OBJC_NEW_IMPL(AndroidArchCoreExecutorArchTaskExecutor_2, init)
}

AndroidArchCoreExecutorArchTaskExecutor_2 *create_AndroidArchCoreExecutorArchTaskExecutor_2_init() {
  J2OBJC_CREATE_IMPL(AndroidArchCoreExecutorArchTaskExecutor_2, init)
}
