//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DVMScheduleDataViewModel_Factory_MembersInjector")
#ifdef RESTRICT_DVMScheduleDataViewModel_Factory_MembersInjector
#define INCLUDE_ALL_DVMScheduleDataViewModel_Factory_MembersInjector 0
#else
#define INCLUDE_ALL_DVMScheduleDataViewModel_Factory_MembersInjector 1
#endif
#undef RESTRICT_DVMScheduleDataViewModel_Factory_MembersInjector

#if !defined (DVMScheduleDataViewModel_Factory_MembersInjector_) && (INCLUDE_ALL_DVMScheduleDataViewModel_Factory_MembersInjector || defined(INCLUDE_DVMScheduleDataViewModel_Factory_MembersInjector))
#define DVMScheduleDataViewModel_Factory_MembersInjector_

#define RESTRICT_DaggerMembersInjector 1
#define INCLUDE_DaggerMembersInjector 1
#include "DaggerMembersInjector.h"

@class DVMScheduleDataViewModel_Factory;
@protocol JavaxInjectProvider;

@interface DVMScheduleDataViewModel_Factory_MembersInjector : NSObject < DaggerMembersInjector >

#pragma mark Public

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)interactorProvider;

+ (id<DaggerMembersInjector>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)interactorProvider;

+ (void)injectInteractorWithDVMScheduleDataViewModel_Factory:(DVMScheduleDataViewModel_Factory *)instance
                                     withJavaxInjectProvider:(id<JavaxInjectProvider>)interactorProvider;

- (void)injectMembersWithId:(DVMScheduleDataViewModel_Factory *)instance;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMScheduleDataViewModel_Factory_MembersInjector)

FOUNDATION_EXPORT void DVMScheduleDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(DVMScheduleDataViewModel_Factory_MembersInjector *self, id<JavaxInjectProvider> interactorProvider);

FOUNDATION_EXPORT DVMScheduleDataViewModel_Factory_MembersInjector *new_DVMScheduleDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(id<JavaxInjectProvider> interactorProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DVMScheduleDataViewModel_Factory_MembersInjector *create_DVMScheduleDataViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_(id<JavaxInjectProvider> interactorProvider);

FOUNDATION_EXPORT id<DaggerMembersInjector> DVMScheduleDataViewModel_Factory_MembersInjector_createWithJavaxInjectProvider_(id<JavaxInjectProvider> interactorProvider);

FOUNDATION_EXPORT void DVMScheduleDataViewModel_Factory_MembersInjector_injectInteractorWithDVMScheduleDataViewModel_Factory_withJavaxInjectProvider_(DVMScheduleDataViewModel_Factory *instance, id<JavaxInjectProvider> interactorProvider);

J2OBJC_TYPE_LITERAL_HEADER(DVMScheduleDataViewModel_Factory_MembersInjector)

@compatibility_alias CoTouchlabDroidconandroidSharedViewmodelScheduleDataViewModel_Factory_MembersInjector DVMScheduleDataViewModel_Factory_MembersInjector;

#endif

#pragma pop_macro("INCLUDE_ALL_DVMScheduleDataViewModel_Factory_MembersInjector")
