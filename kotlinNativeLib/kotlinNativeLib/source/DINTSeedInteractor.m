//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "CoTouchlabDroidconandroidCrashReport.h"
#include "ComGoogleGsonGson.h"
#include "DDATAppPrefs.h"
#include "DINTSeedInteractor.h"
#include "DNETDConvention.h"
#include "DVMAppManager.h"
#include "DVMConferenceDataHelper.h"
#include "DVMLoadDataSeed.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAndroidSchedulersAndroidSchedulers.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFunctionsAction.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersSchedulers.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/inject/Inject.h"
#include "javax/inject/Singleton.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface DINTSeedInteractor () {
 @public
  DVMConferenceDataHelper *conferenceDataHelper_;
  DDATAppPrefs *appPrefs_;
}

@end

J2OBJC_FIELD_SETTER(DINTSeedInteractor, conferenceDataHelper_, DVMConferenceDataHelper *)
J2OBJC_FIELD_SETTER(DINTSeedInteractor, appPrefs_, DDATAppPrefs *)

__attribute__((unused)) static IOSObjectArray *DINTSeedInteractor__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DINTSeedInteractor__Annotations$1();

@interface DINTSeedInteractor_$Lambda$1 : NSObject < IoReactivexFunctionsAction >

- (void)run;

@end

J2OBJC_STATIC_INIT(DINTSeedInteractor_$Lambda$1)

inline DINTSeedInteractor_$Lambda$1 *DINTSeedInteractor_$Lambda$1_get_instance();
static DINTSeedInteractor_$Lambda$1 *DINTSeedInteractor_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTSeedInteractor_$Lambda$1, instance, DINTSeedInteractor_$Lambda$1 *)

__attribute__((unused)) static void DINTSeedInteractor_$Lambda$1_init(DINTSeedInteractor_$Lambda$1 *self);

__attribute__((unused)) static DINTSeedInteractor_$Lambda$1 *new_DINTSeedInteractor_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTSeedInteractor_$Lambda$1 *create_DINTSeedInteractor_$Lambda$1_init();

@interface DINTSeedInteractor_$Lambda$2 : NSObject < IoReactivexFunctionsConsumer >

- (void)acceptWithId:(JavaLangThrowable *)a;

@end

J2OBJC_STATIC_INIT(DINTSeedInteractor_$Lambda$2)

inline DINTSeedInteractor_$Lambda$2 *DINTSeedInteractor_$Lambda$2_get_instance();
static DINTSeedInteractor_$Lambda$2 *DINTSeedInteractor_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTSeedInteractor_$Lambda$2, instance, DINTSeedInteractor_$Lambda$2 *)

__attribute__((unused)) static void DINTSeedInteractor_$Lambda$2_init(DINTSeedInteractor_$Lambda$2 *self);

__attribute__((unused)) static DINTSeedInteractor_$Lambda$2 *new_DINTSeedInteractor_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTSeedInteractor_$Lambda$2 *create_DINTSeedInteractor_$Lambda$2_init();

@implementation DINTSeedInteractor

- (instancetype)initWithDVMConferenceDataHelper:(DVMConferenceDataHelper *)conferenceDataHelper
                               withDDATAppPrefs:(DDATAppPrefs *)appPrefs {
  DINTSeedInteractor_initWithDVMConferenceDataHelper_withDDATAppPrefs_(self, conferenceDataHelper, appPrefs);
  return self;
}

- (void)seedDatabaseWithDVMLoadDataSeed:(id<DVMLoadDataSeed>)loadDataSeed {
  if ([((DDATAppPrefs *) nil_chk(appPrefs_)) onceWithNSString:DVMAppManager_FIRST_SEED]) {
    @try {
      NSString *seed = [((id<DVMLoadDataSeed>) nil_chk(loadDataSeed)) dataSeed];
      [((IoReactivexCompletable *) nil_chk([((IoReactivexCompletable *) nil_chk([((IoReactivexCompletable *) nil_chk([((DVMConferenceDataHelper *) nil_chk(conferenceDataHelper_)) saveConventionWithDNETDConvention:[create_ComGoogleGsonGson_init() fromJsonWithNSString:seed withIOSClass:DNETDConvention_class_()]])) subscribeOnWithIoReactivexScheduler:IoReactivexSchedulersSchedulers_io()])) observeOnWithIoReactivexScheduler:IoReactivexAndroidSchedulersAndroidSchedulers_mainThread()])) subscribeWithIoReactivexFunctionsAction:JreLoadStatic(DINTSeedInteractor_$Lambda$1, instance) withIoReactivexFunctionsConsumer:JreLoadStatic(DINTSeedInteractor_$Lambda$2, instance)];
    }
    @catch (JavaLangRuntimeException *e) {
      CoTouchlabDroidconandroidCrashReport_logExceptionWithJavaLangThrowable_(e);
    }
  }
}

- (void)dealloc {
  RELEASE_(conferenceDataHelper_);
  RELEASE_(appPrefs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDVMConferenceDataHelper:withDDATAppPrefs:);
  methods[1].selector = @selector(seedDatabaseWithDVMLoadDataSeed:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "conferenceDataHelper_", "LDVMConferenceDataHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "appPrefs_", "LDDATAppPrefs;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDVMConferenceDataHelper;LDDATAppPrefs;", (void *)&DINTSeedInteractor__Annotations$0, "seedDatabase", "LDVMLoadDataSeed;", (void *)&DINTSeedInteractor__Annotations$1 };
  static const J2ObjcClassInfo _DINTSeedInteractor = { "SeedInteractor", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, 4 };
  return &_DINTSeedInteractor;
}

@end

void DINTSeedInteractor_initWithDVMConferenceDataHelper_withDDATAppPrefs_(DINTSeedInteractor *self, DVMConferenceDataHelper *conferenceDataHelper, DDATAppPrefs *appPrefs) {
  NSObject_init(self);
  JreStrongAssign(&self->conferenceDataHelper_, conferenceDataHelper);
  JreStrongAssign(&self->appPrefs_, appPrefs);
}

DINTSeedInteractor *new_DINTSeedInteractor_initWithDVMConferenceDataHelper_withDDATAppPrefs_(DVMConferenceDataHelper *conferenceDataHelper, DDATAppPrefs *appPrefs) {
  J2OBJC_NEW_IMPL(DINTSeedInteractor, initWithDVMConferenceDataHelper_withDDATAppPrefs_, conferenceDataHelper, appPrefs)
}

DINTSeedInteractor *create_DINTSeedInteractor_initWithDVMConferenceDataHelper_withDDATAppPrefs_(DVMConferenceDataHelper *conferenceDataHelper, DDATAppPrefs *appPrefs) {
  J2OBJC_CREATE_IMPL(DINTSeedInteractor, initWithDVMConferenceDataHelper_withDDATAppPrefs_, conferenceDataHelper, appPrefs)
}

IOSObjectArray *DINTSeedInteractor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTSeedInteractor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectSingleton() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DINTSeedInteractor)

J2OBJC_INITIALIZED_DEFN(DINTSeedInteractor_$Lambda$1)

@implementation DINTSeedInteractor_$Lambda$1

- (void)run {
}

+ (void)initialize {
  if (self == [DINTSeedInteractor_$Lambda$1 class]) {
    JreStrongAssignAndConsume(&DINTSeedInteractor_$Lambda$1_instance, new_DINTSeedInteractor_$Lambda$1_init());
    J2OBJC_SET_INITIALIZED(DINTSeedInteractor_$Lambda$1)
  }
}

@end

void DINTSeedInteractor_$Lambda$1_init(DINTSeedInteractor_$Lambda$1 *self) {
  NSObject_init(self);
}

DINTSeedInteractor_$Lambda$1 *new_DINTSeedInteractor_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(DINTSeedInteractor_$Lambda$1, init)
}

DINTSeedInteractor_$Lambda$1 *create_DINTSeedInteractor_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(DINTSeedInteractor_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(DINTSeedInteractor_$Lambda$2)

@implementation DINTSeedInteractor_$Lambda$2

- (void)acceptWithId:(JavaLangThrowable *)a {
  CoTouchlabDroidconandroidCrashReport_logExceptionWithJavaLangThrowable_(a);
}

+ (void)initialize {
  if (self == [DINTSeedInteractor_$Lambda$2 class]) {
    JreStrongAssignAndConsume(&DINTSeedInteractor_$Lambda$2_instance, new_DINTSeedInteractor_$Lambda$2_init());
    J2OBJC_SET_INITIALIZED(DINTSeedInteractor_$Lambda$2)
  }
}

@end

void DINTSeedInteractor_$Lambda$2_init(DINTSeedInteractor_$Lambda$2 *self) {
  NSObject_init(self);
}

DINTSeedInteractor_$Lambda$2 *new_DINTSeedInteractor_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(DINTSeedInteractor_$Lambda$2, init)
}

DINTSeedInteractor_$Lambda$2 *create_DINTSeedInteractor_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(DINTSeedInteractor_$Lambda$2, init)
}
