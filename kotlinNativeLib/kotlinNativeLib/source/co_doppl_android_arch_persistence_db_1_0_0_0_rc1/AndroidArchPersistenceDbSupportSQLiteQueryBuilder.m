//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchPersistenceDbSimpleSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteQuery.h"
#include "AndroidArchPersistenceDbSupportSQLiteQueryBuilder.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface AndroidArchPersistenceDbSupportSQLiteQueryBuilder () {
 @public
  jboolean mDistinct_;
  NSString *mTable_;
  IOSObjectArray *mColumns_;
  NSString *mSelection_;
  IOSObjectArray *mBindArgs_;
  NSString *mGroupBy_;
  NSString *mHaving_;
  NSString *mOrderBy_;
  NSString *mLimit_;
}

- (instancetype)initWithNSString:(NSString *)table;

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause;

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns;

+ (jboolean)isEmptyWithNSString:(NSString *)input;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mTable_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mSelection_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mBindArgs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mGroupBy_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mHaving_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mOrderBy_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mLimit_, NSString *)

inline JavaUtilRegexPattern *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_get_sLimitPattern();
static JavaUtilRegexPattern *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, sLimitPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(AndroidArchPersistenceDbSupportSQLiteQueryBuilder *self, NSString *table);

__attribute__((unused)) static AndroidArchPersistenceDbSupportSQLiteQueryBuilder *new_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbSupportSQLiteQueryBuilder *create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table);

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause);

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns);

__attribute__((unused)) static jboolean AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(NSString *input);

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)

@implementation AndroidArchPersistenceDbSupportSQLiteQueryBuilder

+ (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)builderWithNSString:(NSString *)tableName {
  return AndroidArchPersistenceDbSupportSQLiteQueryBuilder_builderWithNSString_(tableName);
}

- (instancetype)initWithNSString:(NSString *)table {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(self, table);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)distinct {
  mDistinct_ = true;
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)columnsWithNSStringArray:(IOSObjectArray *)columns {
  JreStrongAssign(&mColumns_, columns);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)selectionWithNSString:(NSString *)selection
                                                           withNSObjectArray:(IOSObjectArray *)bindArgs {
  JreStrongAssign(&mSelection_, selection);
  JreStrongAssign(&mBindArgs_, bindArgs);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)groupByWithNSString:(NSString *)groupBy {
  JreStrongAssign(&mGroupBy_, groupBy);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)havingWithNSString:(NSString *)having {
  JreStrongAssign(&mHaving_, having);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)orderByWithNSString:(NSString *)orderBy {
  JreStrongAssign(&mOrderBy_, orderBy);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)limitWithNSString:(NSString *)limit {
  if (!AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(limit) && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern)) matcherWithJavaLangCharSequence:limit])) matches]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid LIMIT clauses:", limit));
  }
  JreStrongAssign(&mLimit_, limit);
  return self;
}

- (id<AndroidArchPersistenceDbSupportSQLiteQuery>)create {
  if (AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(mGroupBy_) && !AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(mHaving_)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"HAVING clauses are only permitted when using a groupBy clause");
  }
  __unused JavaLangStringBuilder *query = create_JavaLangStringBuilder_initWithInt_(120);
  [query appendWithNSString:@"SELECT "];
  if (mDistinct_) {
    [query appendWithNSString:@"DISTINCT "];
  }
  if (mColumns_ != nil && mColumns_->size_ != 0) {
    AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(query, mColumns_);
  }
  else {
    [query appendWithNSString:@" * "];
  }
  [query appendWithNSString:@" FROM "];
  [query appendWithNSString:mTable_];
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" WHERE ", mSelection_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" GROUP BY ", mGroupBy_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" HAVING ", mHaving_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", mOrderBy_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", mLimit_);
  return create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_([query description], mBindArgs_);
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(s, name, clause);
}

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(s, columns);
}

+ (jboolean)isEmptyWithNSString:(NSString *)input {
  return AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(input);
}

- (void)dealloc {
  RELEASE_(mTable_);
  RELEASE_(mColumns_);
  RELEASE_(mSelection_);
  RELEASE_(mBindArgs_);
  RELEASE_(mGroupBy_);
  RELEASE_(mHaving_);
  RELEASE_(mOrderBy_);
  RELEASE_(mLimit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 14, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(builderWithNSString:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(distinct);
  methods[3].selector = @selector(columnsWithNSStringArray:);
  methods[4].selector = @selector(selectionWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(groupByWithNSString:);
  methods[6].selector = @selector(havingWithNSString:);
  methods[7].selector = @selector(orderByWithNSString:);
  methods[8].selector = @selector(limitWithNSString:);
  methods[9].selector = @selector(create);
  methods[10].selector = @selector(appendClauseWithJavaLangStringBuilder:withNSString:withNSString:);
  methods[11].selector = @selector(appendColumnsWithJavaLangStringBuilder:withNSStringArray:);
  methods[12].selector = @selector(isEmptyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sLimitPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "mDistinct_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTable_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelection_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGroupBy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHaving_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrderBy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLimit_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "builder", "LNSString;", "columns", "[LNSString;", "selection", "LNSString;[LNSObject;", "groupBy", "having", "orderBy", "limit", "appendClause", "LJavaLangStringBuilder;LNSString;LNSString;", "appendColumns", "LJavaLangStringBuilder;[LNSString;", "isEmpty", &AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteQueryBuilder = { "SupportSQLiteQueryBuilder", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x11, 13, 10, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteQueryBuilder;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceDbSupportSQLiteQueryBuilder class]) {
    JreStrongAssign(&AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern, JavaUtilRegexPattern_compileWithNSString_(@"\\s*\\d+\\s*(,\\s*\\d+\\s*)?"));
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)
  }
}

@end

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_builderWithNSString_(NSString *tableName) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  return create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(tableName);
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(AndroidArchPersistenceDbSupportSQLiteQueryBuilder *self, NSString *table) {
  NSObject_init(self);
  self->mDistinct_ = false;
  JreStrongAssign(&self->mColumns_, nil);
  JreStrongAssign(&self->mGroupBy_, nil);
  JreStrongAssign(&self->mHaving_, nil);
  JreStrongAssign(&self->mOrderBy_, nil);
  JreStrongAssign(&self->mLimit_, nil);
  JreStrongAssign(&self->mTable_, table);
}

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *new_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, initWithNSString_, table)
}

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, initWithNSString_, table)
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  if (!AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(clause)) {
    [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:name];
    [s appendWithNSString:clause];
  }
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  __unused jint n = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < n; i++) {
    __unused NSString *column = IOSObjectArray_Get(columns, i);
    if (i > 0) {
      [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:column];
  }
  [((JavaLangStringBuilder *) nil_chk(s)) appendWithChar:' '];
}

jboolean AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(NSString *input) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  return input == nil || [input java_length] == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)
