//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalCacheCacheInterceptor")
#ifdef RESTRICT_Okhttp3InternalCacheCacheInterceptor
#define INCLUDE_ALL_Okhttp3InternalCacheCacheInterceptor 0
#else
#define INCLUDE_ALL_Okhttp3InternalCacheCacheInterceptor 1
#endif
#undef RESTRICT_Okhttp3InternalCacheCacheInterceptor

#if !defined (Okhttp3InternalCacheCacheInterceptor_) && (INCLUDE_ALL_Okhttp3InternalCacheCacheInterceptor || defined(INCLUDE_Okhttp3InternalCacheCacheInterceptor))
#define Okhttp3InternalCacheCacheInterceptor_

#define RESTRICT_Okhttp3Interceptor 1
#define INCLUDE_Okhttp3Interceptor 1
#include "Okhttp3Interceptor.h"

@class Okhttp3Response;
@protocol Okhttp3Interceptor_Chain;
@protocol Okhttp3InternalCacheInternalCache;

@interface Okhttp3InternalCacheCacheInterceptor : NSObject < Okhttp3Interceptor > {
 @public
  id<Okhttp3InternalCacheInternalCache> cache_;
}

#pragma mark Public

- (instancetype)initWithOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)cache;

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain;

#pragma mark Package-Private

+ (jboolean)isEndToEndWithNSString:(NSString *)fieldName;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalCacheCacheInterceptor)

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheCacheInterceptor, cache_, id<Okhttp3InternalCacheInternalCache>)

FOUNDATION_EXPORT void Okhttp3InternalCacheCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(Okhttp3InternalCacheCacheInterceptor *self, id<Okhttp3InternalCacheInternalCache> cache);

FOUNDATION_EXPORT Okhttp3InternalCacheCacheInterceptor *new_Okhttp3InternalCacheCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(id<Okhttp3InternalCacheInternalCache> cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalCacheCacheInterceptor *create_Okhttp3InternalCacheCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_(id<Okhttp3InternalCacheInternalCache> cache);

FOUNDATION_EXPORT jboolean Okhttp3InternalCacheCacheInterceptor_isEndToEndWithNSString_(NSString *fieldName);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalCacheCacheInterceptor)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalCacheCacheInterceptor")
