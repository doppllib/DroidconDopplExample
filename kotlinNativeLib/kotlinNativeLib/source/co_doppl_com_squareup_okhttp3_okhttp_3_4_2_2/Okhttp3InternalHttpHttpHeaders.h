//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttpHttpHeaders")
#ifdef RESTRICT_Okhttp3InternalHttpHttpHeaders
#define INCLUDE_ALL_Okhttp3InternalHttpHttpHeaders 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttpHttpHeaders 1
#endif
#undef RESTRICT_Okhttp3InternalHttpHttpHeaders

#if !defined (Okhttp3InternalHttpHttpHeaders_) && (INCLUDE_ALL_Okhttp3InternalHttpHttpHeaders || defined(INCLUDE_Okhttp3InternalHttpHttpHeaders))
#define Okhttp3InternalHttpHttpHeaders_

@class Okhttp3Headers;
@class Okhttp3HttpUrl;
@class Okhttp3Request;
@class Okhttp3Response;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol Okhttp3CookieJar;

@interface Okhttp3InternalHttpHttpHeaders : NSObject

#pragma mark Public

+ (jlong)contentLengthWithOkhttp3Headers:(Okhttp3Headers *)headers;

+ (jlong)contentLengthWithOkhttp3Response:(Okhttp3Response *)response;

+ (jboolean)hasBodyWithOkhttp3Response:(Okhttp3Response *)response;

+ (jboolean)hasVaryAllWithOkhttp3Headers:(Okhttp3Headers *)responseHeaders;

+ (jboolean)hasVaryAllWithOkhttp3Response:(Okhttp3Response *)response;

+ (id<JavaUtilList>)parseChallengesWithOkhttp3Headers:(Okhttp3Headers *)responseHeaders
                                         withNSString:(NSString *)challengeHeader;

+ (jint)parseSecondsWithNSString:(NSString *)value
                         withInt:(jint)defaultValue;

+ (void)receiveHeadersWithOkhttp3CookieJar:(id<Okhttp3CookieJar>)cookieJar
                        withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                        withOkhttp3Headers:(Okhttp3Headers *)headers;

+ (jint)skipUntilWithNSString:(NSString *)input
                      withInt:(jint)pos
                 withNSString:(NSString *)characters;

+ (jint)skipWhitespaceWithNSString:(NSString *)input
                           withInt:(jint)pos;

+ (id<JavaUtilSet>)varyFieldsWithOkhttp3Headers:(Okhttp3Headers *)responseHeaders;

+ (Okhttp3Headers *)varyHeadersWithOkhttp3Headers:(Okhttp3Headers *)requestHeaders
                               withOkhttp3Headers:(Okhttp3Headers *)responseHeaders;

+ (Okhttp3Headers *)varyHeadersWithOkhttp3Response:(Okhttp3Response *)response;

+ (jboolean)varyMatchesWithOkhttp3Response:(Okhttp3Response *)cachedResponse
                        withOkhttp3Headers:(Okhttp3Headers *)cachedRequest
                        withOkhttp3Request:(Okhttp3Request *)newRequest;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttpHttpHeaders)

FOUNDATION_EXPORT jlong Okhttp3InternalHttpHttpHeaders_contentLengthWithOkhttp3Response_(Okhttp3Response *response);

FOUNDATION_EXPORT jlong Okhttp3InternalHttpHttpHeaders_contentLengthWithOkhttp3Headers_(Okhttp3Headers *headers);

FOUNDATION_EXPORT jboolean Okhttp3InternalHttpHttpHeaders_varyMatchesWithOkhttp3Response_withOkhttp3Headers_withOkhttp3Request_(Okhttp3Response *cachedResponse, Okhttp3Headers *cachedRequest, Okhttp3Request *newRequest);

FOUNDATION_EXPORT jboolean Okhttp3InternalHttpHttpHeaders_hasVaryAllWithOkhttp3Response_(Okhttp3Response *response);

FOUNDATION_EXPORT jboolean Okhttp3InternalHttpHttpHeaders_hasVaryAllWithOkhttp3Headers_(Okhttp3Headers *responseHeaders);

FOUNDATION_EXPORT id<JavaUtilSet> Okhttp3InternalHttpHttpHeaders_varyFieldsWithOkhttp3Headers_(Okhttp3Headers *responseHeaders);

FOUNDATION_EXPORT Okhttp3Headers *Okhttp3InternalHttpHttpHeaders_varyHeadersWithOkhttp3Response_(Okhttp3Response *response);

FOUNDATION_EXPORT Okhttp3Headers *Okhttp3InternalHttpHttpHeaders_varyHeadersWithOkhttp3Headers_withOkhttp3Headers_(Okhttp3Headers *requestHeaders, Okhttp3Headers *responseHeaders);

FOUNDATION_EXPORT id<JavaUtilList> Okhttp3InternalHttpHttpHeaders_parseChallengesWithOkhttp3Headers_withNSString_(Okhttp3Headers *responseHeaders, NSString *challengeHeader);

FOUNDATION_EXPORT void Okhttp3InternalHttpHttpHeaders_receiveHeadersWithOkhttp3CookieJar_withOkhttp3HttpUrl_withOkhttp3Headers_(id<Okhttp3CookieJar> cookieJar, Okhttp3HttpUrl *url, Okhttp3Headers *headers);

FOUNDATION_EXPORT jboolean Okhttp3InternalHttpHttpHeaders_hasBodyWithOkhttp3Response_(Okhttp3Response *response);

FOUNDATION_EXPORT jint Okhttp3InternalHttpHttpHeaders_skipUntilWithNSString_withInt_withNSString_(NSString *input, jint pos, NSString *characters);

FOUNDATION_EXPORT jint Okhttp3InternalHttpHttpHeaders_skipWhitespaceWithNSString_withInt_(NSString *input, jint pos);

FOUNDATION_EXPORT jint Okhttp3InternalHttpHttpHeaders_parseSecondsWithNSString_withInt_(NSString *value, jint defaultValue);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttpHttpHeaders)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttpHttpHeaders")
