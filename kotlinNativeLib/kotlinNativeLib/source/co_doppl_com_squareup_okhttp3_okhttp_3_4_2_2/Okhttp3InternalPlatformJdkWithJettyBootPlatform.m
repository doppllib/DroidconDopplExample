//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalPlatformJdkWithJettyBootPlatform.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalUtil.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Proxy.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLSocket.h"

@interface Okhttp3InternalPlatformJdkWithJettyBootPlatform () {
 @public
  JavaLangReflectMethod *putMethod_;
  JavaLangReflectMethod *getMethod_;
  JavaLangReflectMethod *removeMethod_;
  IOSClass *clientProviderClass_;
  IOSClass *serverProviderClass_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform, putMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform, getMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform, removeMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform, clientProviderClass_, IOSClass *)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform, serverProviderClass_, IOSClass *)

@interface Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider : NSObject < JavaLangReflectInvocationHandler > {
 @public
  id<JavaUtilList> protocols_;
  jboolean unsupported_;
  NSString *selected_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)protocols;

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider)

J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider, protocols_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider, selected_, NSString *)

__attribute__((unused)) static void Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *self, id<JavaUtilList> protocols);

__attribute__((unused)) static Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *new_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *create_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider)

@implementation Okhttp3InternalPlatformJdkWithJettyBootPlatform

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)putMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)removeMethod
                                 withIOSClass:(IOSClass *)clientProviderClass
                                 withIOSClass:(IOSClass *)serverProviderClass {
  Okhttp3InternalPlatformJdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(self, putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
  return self;
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
  id<JavaUtilList> names = Okhttp3InternalPlatformPlatform_alpnProtocolNamesWithJavaUtilList_(protocols);
  @try {
    id provider = JavaLangReflectProxy_newProxyInstanceWithJavaLangClassLoader_withIOSClassArray_withJavaLangReflectInvocationHandler_([Okhttp3InternalPlatformPlatform_class_() getClassLoader], [IOSObjectArray arrayWithObjects:(id[]){ clientProviderClass_, serverProviderClass_ } count:2 type:IOSClass_class_()], create_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(names));
    [((JavaLangReflectMethod *) nil_chk(putMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ sslSocket, provider } count:2 type:NSObject_class_()]];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

- (void)afterHandshakeWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
  @try {
    [((JavaLangReflectMethod *) nil_chk(removeMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ sslSocket } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *ignored) {
    @throw create_JavaLangAssertionError_init();
  }
  @catch (JavaLangReflectInvocationTargetException *ignored) {
    @throw create_JavaLangAssertionError_init();
  }
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  @try {
    Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *provider = (Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *) cast_chk(JavaLangReflectProxy_getInvocationHandlerWithId_([((JavaLangReflectMethod *) nil_chk(getMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ socket } count:1 type:NSObject_class_()]]), [Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider class]);
    if (!((Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *) nil_chk(provider))->unsupported_ && provider->selected_ == nil) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_INFO withNSString:@"ALPN callback dropped: SPDY and HTTP/2 are disabled. Is alpn-boot on the boot class path?" withJavaLangThrowable:nil];
      return nil;
    }
    return provider->unsupported_ ? nil : provider->selected_;
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_JavaLangAssertionError_init();
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangAssertionError_init();
  }
}

+ (Okhttp3InternalPlatformPlatform *)buildIfSupported {
  return Okhttp3InternalPlatformJdkWithJettyBootPlatform_buildIfSupported();
}

- (void)dealloc {
  RELEASE_(putMethod_);
  RELEASE_(getMethod_);
  RELEASE_(removeMethod_);
  RELEASE_(clientProviderClass_);
  RELEASE_(serverProviderClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalPlatformPlatform;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:withJavaLangReflectMethod:withJavaLangReflectMethod:withIOSClass:withIOSClass:);
  methods[1].selector = @selector(configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:);
  methods[2].selector = @selector(afterHandshakeWithJavaxNetSslSSLSocket:);
  methods[3].selector = @selector(getSelectedProtocolWithJavaxNetSslSSLSocket:);
  methods[4].selector = @selector(buildIfSupported);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "putMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "getMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "removeMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "clientProviderClass_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "serverProviderClass_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectMethod;LJavaLangReflectMethod;LJavaLangReflectMethod;LIOSClass;LIOSClass;", "(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)V", "configureTlsExtensions", "LJavaxNetSslSSLSocket;LNSString;LJavaUtilList;", "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lokhttp3/Protocol;>;)V", "afterHandshake", "LJavaxNetSslSSLSocket;", "getSelectedProtocol", "Ljava/lang/Class<*>;", "LOkhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider;" };
  static const J2ObjcClassInfo _Okhttp3InternalPlatformJdkWithJettyBootPlatform = { "JdkWithJettyBootPlatform", "okhttp3.internal.platform", ptrTable, methods, fields, 7, 0x0, 5, 5, -1, 9, -1, -1, -1 };
  return &_Okhttp3InternalPlatformJdkWithJettyBootPlatform;
}

@end

void Okhttp3InternalPlatformJdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(Okhttp3InternalPlatformJdkWithJettyBootPlatform *self, JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  Okhttp3InternalPlatformPlatform_init(self);
  JreStrongAssign(&self->putMethod_, putMethod);
  JreStrongAssign(&self->getMethod_, getMethod);
  JreStrongAssign(&self->removeMethod_, removeMethod);
  JreStrongAssign(&self->clientProviderClass_, clientProviderClass);
  JreStrongAssign(&self->serverProviderClass_, serverProviderClass);
}

Okhttp3InternalPlatformJdkWithJettyBootPlatform *new_Okhttp3InternalPlatformJdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  J2OBJC_NEW_IMPL(Okhttp3InternalPlatformJdkWithJettyBootPlatform, initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_, putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass)
}

Okhttp3InternalPlatformJdkWithJettyBootPlatform *create_Okhttp3InternalPlatformJdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalPlatformJdkWithJettyBootPlatform, initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_, putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass)
}

Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformJdkWithJettyBootPlatform_buildIfSupported() {
  Okhttp3InternalPlatformJdkWithJettyBootPlatform_initialize();
  @try {
    NSString *negoClassName = @"org.eclipse.jetty.alpn.ALPN";
    IOSClass *negoClass = IOSClass_forName_(negoClassName);
    IOSClass *providerClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$Provider"));
    IOSClass *clientProviderClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$ClientProvider"));
    IOSClass *serverProviderClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$ServerProvider"));
    JavaLangReflectMethod *putMethod = [((IOSClass *) nil_chk(negoClass)) getMethod:@"put" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_(), providerClass } count:2 type:IOSClass_class_()]];
    JavaLangReflectMethod *getMethod = [negoClass getMethod:@"get" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_() } count:1 type:IOSClass_class_()]];
    JavaLangReflectMethod *removeMethod = [negoClass getMethod:@"remove" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_() } count:1 type:IOSClass_class_()]];
    return create_Okhttp3InternalPlatformJdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
  }
  @catch (JavaLangClassNotFoundException *ignored) {
  }
  @catch (JavaLangNoSuchMethodException *ignored) {
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalPlatformJdkWithJettyBootPlatform)

@implementation Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)protocols {
  Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(self, protocols);
  return self;
}

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args {
  NSString *methodName = [((JavaLangReflectMethod *) nil_chk(method)) getName];
  IOSClass *returnType = [method getReturnType];
  if (args == nil) {
    args = JreLoadStatic(Okhttp3InternalUtil, EMPTY_STRING_ARRAY);
  }
  if ([((NSString *) nil_chk(methodName)) isEqual:@"supports"] && [IOSClass booleanClass] == returnType) {
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  else if ([methodName isEqual:@"unsupported"] && [IOSClass voidClass] == returnType) {
    self->unsupported_ = true;
    return nil;
  }
  else if ([methodName isEqual:@"protocols"] && ((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    return protocols_;
  }
  else if (([methodName isEqual:@"selectProtocol"] || [methodName isEqual:@"select"]) && NSString_class_() == returnType && ((IOSObjectArray *) nil_chk(args))->size_ == 1 && [JavaUtilList_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
    id<JavaUtilList> peerProtocols = (id<JavaUtilList>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), JavaUtilList_class_());
    for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(peerProtocols)) size]; i < size; i++) {
      if ([((id<JavaUtilList>) nil_chk(protocols_)) containsWithId:[peerProtocols getWithInt:i]]) {
        return JreStrongAssign(&selected_, [peerProtocols getWithInt:i]);
      }
    }
    return JreStrongAssign(&selected_, [((id<JavaUtilList>) nil_chk(protocols_)) getWithInt:0]);
  }
  else if (([methodName isEqual:@"protocolSelected"] || [methodName isEqual:@"selected"]) && ((IOSObjectArray *) nil_chk(args))->size_ == 1) {
    JreStrongAssign(&self->selected_, (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]));
    return nil;
  }
  else {
    return [method invokeWithId:self withNSObjectArray:args];
  }
}

- (void)dealloc {
  RELEASE_(protocols_);
  RELEASE_(selected_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(invokeWithId:withJavaLangReflectMethod:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "protocols_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "unsupported_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selected_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "invoke", "LNSObject;LJavaLangReflectMethod;[LNSObject;", "LJavaLangThrowable;", "Ljava/util/List<Ljava/lang/String;>;", "LOkhttp3InternalPlatformJdkWithJettyBootPlatform;" };
  static const J2ObjcClassInfo _Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider = { "JettyNegoProvider", "okhttp3.internal.platform", ptrTable, methods, fields, 7, 0xa, 2, 3, 6, -1, -1, -1, -1 };
  return &_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider;
}

@end

void Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *self, id<JavaUtilList> protocols) {
  NSObject_init(self);
  JreStrongAssign(&self->protocols_, protocols);
}

Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *new_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) {
  J2OBJC_NEW_IMPL(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider, initWithJavaUtilList_, protocols)
}

Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider *create_Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider, initWithJavaUtilList_, protocols)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalPlatformJdkWithJettyBootPlatform_JettyNegoProvider)
