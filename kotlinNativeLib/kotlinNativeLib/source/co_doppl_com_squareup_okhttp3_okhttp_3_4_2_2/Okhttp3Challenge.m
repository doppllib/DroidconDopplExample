//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Challenge.h"
#include "Okhttp3InternalUtil.h"

@interface Okhttp3Challenge () {
 @public
  NSString *scheme_;
  NSString *realm_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3Challenge, scheme_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Challenge, realm_, NSString *)

@implementation Okhttp3Challenge

- (instancetype)initWithNSString:(NSString *)scheme
                    withNSString:(NSString *)realm {
  Okhttp3Challenge_initWithNSString_withNSString_(self, scheme, realm);
  return self;
}

- (NSString *)scheme {
  return scheme_;
}

- (NSString *)realm {
  return realm_;
}

- (jboolean)isEqual:(id)o {
  return [o isKindOfClass:[Okhttp3Challenge class]] && Okhttp3InternalUtil_equalWithId_withId_(scheme_, ((Okhttp3Challenge *) nil_chk(((Okhttp3Challenge *) cast_chk(o, [Okhttp3Challenge class]))))->scheme_) && Okhttp3InternalUtil_equalWithId_withId_(realm_, ((Okhttp3Challenge *) nil_chk(((Okhttp3Challenge *) cast_chk(o, [Okhttp3Challenge class]))))->realm_);
}

- (NSUInteger)hash {
  jint result = 29;
  result = 31 * result + (realm_ != nil ? ((jint) [realm_ hash]) : 0);
  result = 31 * result + (scheme_ != nil ? ((jint) [scheme_ hash]) : 0);
  return result;
}

- (NSString *)description {
  return JreStrcat("$$$C", scheme_, @" realm=\"", realm_, '"');
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(realm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(scheme);
  methods[2].selector = @selector(realm);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "realm_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _Okhttp3Challenge = { "Challenge", "okhttp3", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_Okhttp3Challenge;
}

@end

void Okhttp3Challenge_initWithNSString_withNSString_(Okhttp3Challenge *self, NSString *scheme, NSString *realm) {
  NSObject_init(self);
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->realm_, realm);
}

Okhttp3Challenge *new_Okhttp3Challenge_initWithNSString_withNSString_(NSString *scheme, NSString *realm) {
  J2OBJC_NEW_IMPL(Okhttp3Challenge, initWithNSString_withNSString_, scheme, realm)
}

Okhttp3Challenge *create_Okhttp3Challenge_initWithNSString_withNSString_(NSString *scheme, NSString *realm) {
  J2OBJC_CREATE_IMPL(Okhttp3Challenge, initWithNSString_withNSString_, scheme, realm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Challenge)
