//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalPlatformAndroidPlatform.h"
#include "Okhttp3InternalPlatformJdk9Platform.h"
#include "Okhttp3InternalPlatformJdkWithJettyBootPlatform.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalTlsBasicCertificateChainCleaner.h"
#include "Okhttp3InternalTlsCertificateChainCleaner.h"
#include "Okhttp3InternalTlsTrustRootIndex.h"
#include "Okhttp3OkHttpClient.h"
#include "Okhttp3Protocol.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Field.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "okio/Buffer.h"

@interface Okhttp3InternalPlatformPlatform ()

+ (Okhttp3InternalPlatformPlatform *)findPlatform;

@end

inline Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformPlatform_get_PLATFORM();
static Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformPlatform_PLATFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalPlatformPlatform, PLATFORM, Okhttp3InternalPlatformPlatform *)

inline JavaUtilLoggingLogger *Okhttp3InternalPlatformPlatform_get_logger();
static JavaUtilLoggingLogger *Okhttp3InternalPlatformPlatform_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalPlatformPlatform, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformPlatform_findPlatform();

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalPlatformPlatform)

@implementation Okhttp3InternalPlatformPlatform

+ (jint)INFO {
  return Okhttp3InternalPlatformPlatform_INFO;
}

+ (jint)WARN {
  return Okhttp3InternalPlatformPlatform_WARN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalPlatformPlatform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (Okhttp3InternalPlatformPlatform *)get {
  return Okhttp3InternalPlatformPlatform_get();
}

- (NSString *)getPrefix {
  return @"OkHttp";
}

- (id<JavaxNetSslX509TrustManager>)trustManagerWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory {
  @try {
    IOSClass *sslContextClass = IOSClass_forName_(@"sun.security.ssl.SSLContextImpl");
    id context = Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(sslSocketFactory, sslContextClass, @"context");
    if (context == nil) return nil;
    return Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(context, JavaxNetSslX509TrustManager_class_(), @"trustManager");
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
}

- (void)afterHandshakeWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  return nil;
}

- (void)connectSocketWithJavaNetSocket:(JavaNetSocket *)socket
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                               withInt:(jint)connectTimeout {
  [((JavaNetSocket *) nil_chk(socket)) connectWithJavaNetSocketAddress:address withInt:connectTimeout];
}

- (void)logWithInt:(jint)level
      withNSString:(NSString *)message
withJavaLangThrowable:(JavaLangThrowable *)t {
  JavaUtilLoggingLevel *logLevel = level == Okhttp3InternalPlatformPlatform_WARN ? JreLoadStatic(JavaUtilLoggingLevel, WARNING) : JreLoadStatic(JavaUtilLoggingLevel, INFO);
  [((JavaUtilLoggingLogger *) nil_chk(Okhttp3InternalPlatformPlatform_logger)) logWithJavaUtilLoggingLevel:logLevel withNSString:message withJavaLangThrowable:t];
}

- (jboolean)isCleartextTrafficPermittedWithNSString:(NSString *)hostname {
  return true;
}

+ (id<JavaUtilList>)alpnProtocolNamesWithJavaUtilList:(id<JavaUtilList>)protocols {
  return Okhttp3InternalPlatformPlatform_alpnProtocolNamesWithJavaUtilList_(protocols);
}

- (Okhttp3InternalTlsCertificateChainCleaner *)buildCertificateChainCleanerWithJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)trustManager {
  return create_Okhttp3InternalTlsBasicCertificateChainCleaner_initWithOkhttp3InternalTlsTrustRootIndex_(Okhttp3InternalTlsTrustRootIndex_getWithJavaxNetSslX509TrustManager_(trustManager));
}

+ (Okhttp3InternalPlatformPlatform *)findPlatform {
  return Okhttp3InternalPlatformPlatform_findPlatform();
}

+ (IOSByteArray *)concatLengthPrefixedWithJavaUtilList:(id<JavaUtilList>)protocols {
  return Okhttp3InternalPlatformPlatform_concatLengthPrefixedWithJavaUtilList_(protocols);
}

+ (id)readFieldOrNullWithId:(id)instance
               withIOSClass:(IOSClass *)fieldType
               withNSString:(NSString *)fieldName {
  return Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(instance, fieldType, fieldName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalPlatformPlatform;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSslX509TrustManager;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 15, 16, -1, 17, -1, -1 },
    { NULL, "LOkhttp3InternalTlsCertificateChainCleaner;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalPlatformPlatform;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 20, 16, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x8, 22, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(getPrefix);
  methods[3].selector = @selector(trustManagerWithJavaxNetSslSSLSocketFactory:);
  methods[4].selector = @selector(configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:);
  methods[5].selector = @selector(afterHandshakeWithJavaxNetSslSSLSocket:);
  methods[6].selector = @selector(getSelectedProtocolWithJavaxNetSslSSLSocket:);
  methods[7].selector = @selector(connectSocketWithJavaNetSocket:withJavaNetInetSocketAddress:withInt:);
  methods[8].selector = @selector(logWithInt:withNSString:withJavaLangThrowable:);
  methods[9].selector = @selector(isCleartextTrafficPermittedWithNSString:);
  methods[10].selector = @selector(alpnProtocolNamesWithJavaUtilList:);
  methods[11].selector = @selector(buildCertificateChainCleanerWithJavaxNetSslX509TrustManager:);
  methods[12].selector = @selector(findPlatform);
  methods[13].selector = @selector(concatLengthPrefixedWithJavaUtilList:);
  methods[14].selector = @selector(readFieldOrNullWithId:withIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PLATFORM", "LOkhttp3InternalPlatformPlatform;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "INFO", "I", .constantValue.asInt = Okhttp3InternalPlatformPlatform_INFO, 0x19, -1, -1, -1, -1 },
    { "WARN", "I", .constantValue.asInt = Okhttp3InternalPlatformPlatform_WARN, 0x19, -1, -1, -1, -1 },
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
  };
  static const void *ptrTable[] = { "trustManager", "LJavaxNetSslSSLSocketFactory;", "configureTlsExtensions", "LJavaxNetSslSSLSocket;LNSString;LJavaUtilList;", "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lokhttp3/Protocol;>;)V", "afterHandshake", "LJavaxNetSslSSLSocket;", "getSelectedProtocol", "connectSocket", "LJavaNetSocket;LJavaNetInetSocketAddress;I", "LJavaIoIOException;", "log", "ILNSString;LJavaLangThrowable;", "isCleartextTrafficPermitted", "LNSString;", "alpnProtocolNames", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/Protocol;>;)Ljava/util/List<Ljava/lang/String;>;", "buildCertificateChainCleaner", "LJavaxNetSslX509TrustManager;", "concatLengthPrefixed", "(Ljava/util/List<Lokhttp3/Protocol;>;)[B", "readFieldOrNull", "LNSObject;LIOSClass;LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;", &Okhttp3InternalPlatformPlatform_PLATFORM, &Okhttp3InternalPlatformPlatform_logger };
  static const J2ObjcClassInfo _Okhttp3InternalPlatformPlatform = { "Platform", "okhttp3.internal.platform", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalPlatformPlatform;
}

+ (void)initialize {
  if (self == [Okhttp3InternalPlatformPlatform class]) {
    JreStrongAssign(&Okhttp3InternalPlatformPlatform_PLATFORM, Okhttp3InternalPlatformPlatform_findPlatform());
    JreStrongAssign(&Okhttp3InternalPlatformPlatform_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([Okhttp3OkHttpClient_class_() getName]));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalPlatformPlatform)
  }
}

@end

void Okhttp3InternalPlatformPlatform_init(Okhttp3InternalPlatformPlatform *self) {
  NSObject_init(self);
}

Okhttp3InternalPlatformPlatform *new_Okhttp3InternalPlatformPlatform_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalPlatformPlatform, init)
}

Okhttp3InternalPlatformPlatform *create_Okhttp3InternalPlatformPlatform_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalPlatformPlatform, init)
}

Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformPlatform_get() {
  Okhttp3InternalPlatformPlatform_initialize();
  return Okhttp3InternalPlatformPlatform_PLATFORM;
}

id<JavaUtilList> Okhttp3InternalPlatformPlatform_alpnProtocolNamesWithJavaUtilList_(id<JavaUtilList> protocols) {
  Okhttp3InternalPlatformPlatform_initialize();
  id<JavaUtilList> names = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(protocols)) size]);
  for (jint i = 0, size = [protocols size]; i < size; i++) {
    Okhttp3Protocol *protocol = [protocols getWithInt:i];
    if (protocol == JreLoadEnum(Okhttp3Protocol, HTTP_1_0)) continue;
    [names addWithId:[((Okhttp3Protocol *) nil_chk(protocol)) description]];
  }
  return names;
}

Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformPlatform_findPlatform() {
  Okhttp3InternalPlatformPlatform_initialize();
  Okhttp3InternalPlatformPlatform *android = Okhttp3InternalPlatformAndroidPlatform_buildIfSupported();
  if (android != nil) {
    return android;
  }
  Okhttp3InternalPlatformPlatform *jdk9 = Okhttp3InternalPlatformJdk9Platform_buildIfSupported();
  if (jdk9 != nil) {
    return jdk9;
  }
  Okhttp3InternalPlatformPlatform *jdkWithJettyBoot = Okhttp3InternalPlatformJdkWithJettyBootPlatform_buildIfSupported();
  if (jdkWithJettyBoot != nil) {
    return jdkWithJettyBoot;
  }
  return create_Okhttp3InternalPlatformPlatform_init();
}

IOSByteArray *Okhttp3InternalPlatformPlatform_concatLengthPrefixedWithJavaUtilList_(id<JavaUtilList> protocols) {
  Okhttp3InternalPlatformPlatform_initialize();
  OkioBuffer *result = create_OkioBuffer_init();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(protocols)) size]; i < size; i++) {
    Okhttp3Protocol *protocol = [protocols getWithInt:i];
    if (protocol == JreLoadEnum(Okhttp3Protocol, HTTP_1_0)) continue;
    [result writeByteWithInt:[((NSString *) nil_chk([((Okhttp3Protocol *) nil_chk(protocol)) description])) java_length]];
    [result writeUtf8WithNSString:[protocol description]];
  }
  return [result readByteArray];
}

id Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(id instance, IOSClass *fieldType, NSString *fieldName) {
  Okhttp3InternalPlatformPlatform_initialize();
  for (IOSClass *c = [nil_chk(instance) java_getClass]; c != NSObject_class_(); c = [c getSuperclass]) {
    @try {
      JavaLangReflectField *field = [((IOSClass *) nil_chk(c)) getDeclaredField:fieldName];
      [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
      id value = [field getWithId:instance];
      if (value == nil || ![((IOSClass *) nil_chk(fieldType)) isInstance:value]) return nil;
      return [((IOSClass *) nil_chk(fieldType)) cast:value];
    }
    @catch (JavaLangNoSuchFieldException *ignored) {
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangAssertionError_init();
    }
  }
  if (![((NSString *) nil_chk(fieldName)) isEqual:@"delegate"]) {
    id delegate = Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(instance, NSObject_class_(), @"delegate");
    if (delegate != nil) return Okhttp3InternalPlatformPlatform_readFieldOrNullWithId_withIOSClass_withNSString_(delegate, fieldType, fieldName);
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalPlatformPlatform)
