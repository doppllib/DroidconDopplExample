//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Protocol.h"
#include "java/io/IOException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface Okhttp3Protocol () {
 @public
  NSString *protocol_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3Protocol, protocol_, NSString *)

__attribute__((unused)) static void Okhttp3Protocol_initWithNSString_withNSString_withInt_(Okhttp3Protocol *self, NSString *protocol, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3Protocol)

Okhttp3Protocol *Okhttp3Protocol_values_[4];

@implementation Okhttp3Protocol

+ (Okhttp3Protocol *)HTTP_1_0 {
  return JreEnum(Okhttp3Protocol, HTTP_1_0);
}

+ (Okhttp3Protocol *)HTTP_1_1 {
  return JreEnum(Okhttp3Protocol, HTTP_1_1);
}

+ (Okhttp3Protocol *)SPDY_3 {
  return JreEnum(Okhttp3Protocol, SPDY_3);
}

+ (Okhttp3Protocol *)HTTP_2 {
  return JreEnum(Okhttp3Protocol, HTTP_2);
}

+ (Okhttp3Protocol *)getWithNSString:(NSString *)protocol {
  return Okhttp3Protocol_getWithNSString_(protocol);
}

- (NSString *)description {
  return protocol_;
}

+ (IOSObjectArray *)values {
  return Okhttp3Protocol_values();
}

+ (Okhttp3Protocol *)valueOfWithNSString:(NSString *)name {
  return Okhttp3Protocol_valueOfWithNSString_(name);
}

- (Okhttp3Protocol_Enum)toNSEnum {
  return (Okhttp3Protocol_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3Protocol;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "[LOkhttp3Protocol;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x9, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getWithNSString:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HTTP_1_0", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "HTTP_1_1", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SPDY_3", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "HTTP_2", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "protocol_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LNSString;", "LJavaIoIOException;", "toString", "valueOf", &JreEnum(Okhttp3Protocol, HTTP_1_0), &JreEnum(Okhttp3Protocol, HTTP_1_1), &JreEnum(Okhttp3Protocol, SPDY_3), &JreEnum(Okhttp3Protocol, HTTP_2), "Ljava/lang/Enum<Lokhttp3/Protocol;>;" };
  static const J2ObjcClassInfo _Okhttp3Protocol = { "Protocol", "okhttp3", ptrTable, methods, fields, 7, 0x4011, 4, 5, -1, -1, -1, 9, -1 };
  return &_Okhttp3Protocol;
}

+ (void)initialize {
  if (self == [Okhttp3Protocol class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(Okhttp3Protocol, HTTP_1_0) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3Protocol_initWithNSString_withNSString_withInt_(e, @"http/1.0", @"HTTP_1_0", 0);
    (JreEnum(Okhttp3Protocol, HTTP_1_1) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3Protocol_initWithNSString_withNSString_withInt_(e, @"http/1.1", @"HTTP_1_1", 1);
    (JreEnum(Okhttp3Protocol, SPDY_3) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3Protocol_initWithNSString_withNSString_withInt_(e, @"spdy/3.1", @"SPDY_3", 2);
    (JreEnum(Okhttp3Protocol, HTTP_2) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3Protocol_initWithNSString_withNSString_withInt_(e, @"h2", @"HTTP_2", 3);
    J2OBJC_SET_INITIALIZED(Okhttp3Protocol)
  }
}

@end

void Okhttp3Protocol_initWithNSString_withNSString_withInt_(Okhttp3Protocol *self, NSString *protocol, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->protocol_, protocol);
}

Okhttp3Protocol *Okhttp3Protocol_getWithNSString_(NSString *protocol) {
  Okhttp3Protocol_initialize();
  if ([((NSString *) nil_chk(protocol)) isEqual:((Okhttp3Protocol *) nil_chk(JreEnum(Okhttp3Protocol, HTTP_1_0)))->protocol_]) return JreEnum(Okhttp3Protocol, HTTP_1_0);
  if ([protocol isEqual:((Okhttp3Protocol *) nil_chk(JreEnum(Okhttp3Protocol, HTTP_1_1)))->protocol_]) return JreEnum(Okhttp3Protocol, HTTP_1_1);
  if ([protocol isEqual:((Okhttp3Protocol *) nil_chk(JreEnum(Okhttp3Protocol, HTTP_2)))->protocol_]) return JreEnum(Okhttp3Protocol, HTTP_2);
  if ([protocol isEqual:((Okhttp3Protocol *) nil_chk(JreEnum(Okhttp3Protocol, SPDY_3)))->protocol_]) return JreEnum(Okhttp3Protocol, SPDY_3);
  @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Unexpected protocol: ", protocol));
}

IOSObjectArray *Okhttp3Protocol_values() {
  Okhttp3Protocol_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3Protocol_values_ count:4 type:Okhttp3Protocol_class_()];
}

Okhttp3Protocol *Okhttp3Protocol_valueOfWithNSString_(NSString *name) {
  Okhttp3Protocol_initialize();
  for (int i = 0; i < 4; i++) {
    Okhttp3Protocol *e = Okhttp3Protocol_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3Protocol *Okhttp3Protocol_fromOrdinal(NSUInteger ordinal) {
  Okhttp3Protocol_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return Okhttp3Protocol_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Protocol)
