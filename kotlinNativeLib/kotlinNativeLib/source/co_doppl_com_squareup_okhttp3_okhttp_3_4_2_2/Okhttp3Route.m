//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3Route.h"
#include "java/lang/NullPointerException.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Proxy.h"

@implementation Okhttp3Route

- (instancetype)initWithOkhttp3Address:(Okhttp3Address *)address
                      withJavaNetProxy:(JavaNetProxy *)proxy
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)inetSocketAddress {
  Okhttp3Route_initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_(self, address, proxy, inetSocketAddress);
  return self;
}

- (Okhttp3Address *)address {
  return address_;
}

- (JavaNetProxy *)proxy {
  return proxy_;
}

- (JavaNetInetSocketAddress *)socketAddress {
  return inetSocketAddress_;
}

- (jboolean)requiresTunnel {
  return ((Okhttp3Address *) nil_chk(address_))->sslSocketFactory_ != nil && [((JavaNetProxy *) nil_chk(proxy_)) type] == JreLoadEnum(JavaNetProxy_Type, HTTP);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[Okhttp3Route class]]) {
    Okhttp3Route *other = (Okhttp3Route *) cast_chk(obj, [Okhttp3Route class]);
    return [((Okhttp3Address *) nil_chk(address_)) isEqual:((Okhttp3Route *) nil_chk(other))->address_] && [((JavaNetProxy *) nil_chk(proxy_)) isEqual:other->proxy_] && [((JavaNetInetSocketAddress *) nil_chk(inetSocketAddress_)) isEqual:other->inetSocketAddress_];
  }
  return false;
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + ((jint) [((Okhttp3Address *) nil_chk(address_)) hash]);
  result = 31 * result + ((jint) [((JavaNetProxy *) nil_chk(proxy_)) hash]);
  result = 31 * result + ((jint) [((JavaNetInetSocketAddress *) nil_chk(inetSocketAddress_)) hash]);
  return result;
}

- (void)dealloc {
  RELEASE_(address_);
  RELEASE_(proxy_);
  RELEASE_(inetSocketAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetProxy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Address:withJavaNetProxy:withJavaNetInetSocketAddress:);
  methods[1].selector = @selector(address);
  methods[2].selector = @selector(proxy);
  methods[3].selector = @selector(socketAddress);
  methods[4].selector = @selector(requiresTunnel);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "address_", "LOkhttp3Address;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "proxy_", "LJavaNetProxy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "inetSocketAddress_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Address;LJavaNetProxy;LJavaNetInetSocketAddress;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _Okhttp3Route = { "Route", "okhttp3", ptrTable, methods, fields, 7, 0x11, 7, 3, -1, -1, -1, -1, -1 };
  return &_Okhttp3Route;
}

@end

void Okhttp3Route_initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_(Okhttp3Route *self, Okhttp3Address *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress) {
  NSObject_init(self);
  if (address == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"address == null");
  }
  if (proxy == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"proxy == null");
  }
  if (inetSocketAddress == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"inetSocketAddress == null");
  }
  JreStrongAssign(&self->address_, address);
  JreStrongAssign(&self->proxy_, proxy);
  JreStrongAssign(&self->inetSocketAddress_, inetSocketAddress);
}

Okhttp3Route *new_Okhttp3Route_initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_(Okhttp3Address *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress) {
  J2OBJC_NEW_IMPL(Okhttp3Route, initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_, address, proxy, inetSocketAddress)
}

Okhttp3Route *create_Okhttp3Route_initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_(Okhttp3Address *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress) {
  J2OBJC_CREATE_IMPL(Okhttp3Route, initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_, address, proxy, inetSocketAddress)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Route)
