//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3ConnectionPool.h"
#include "Okhttp3InternalConnectionRealConnection.h"
#include "Okhttp3InternalConnectionRouteDatabase.h"
#include "Okhttp3InternalConnectionRouteException.h"
#include "Okhttp3InternalConnectionRouteSelector.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "Okhttp3InternalFramedFramedConnection.h"
#include "Okhttp3InternalFramedStreamResetException.h"
#include "Okhttp3InternalHttpHttp1xStream.h"
#include "Okhttp3InternalHttpHttp2xStream.h"
#include "Okhttp3InternalHttpHttpStream.h"
#include "Okhttp3InternalInternal.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3OkHttpClient.h"
#include "Okhttp3Route.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/WeakReference.h"
#include "java/net/Socket.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalConnectionStreamAllocation () {
 @public
  Okhttp3Route *route_;
  Okhttp3ConnectionPool *connectionPool_;
  Okhttp3InternalConnectionRouteSelector *routeSelector_;
  jint refusedStreamCount_;
  Okhttp3InternalConnectionRealConnection *connection_;
  jboolean released_;
  jboolean canceled_;
  id<Okhttp3InternalHttpHttpStream> stream_;
}

- (Okhttp3InternalConnectionRealConnection *)findHealthyConnectionWithInt:(jint)connectTimeout
                                                                  withInt:(jint)readTimeout
                                                                  withInt:(jint)writeTimeout
                                                              withBoolean:(jboolean)connectionRetryEnabled
                                                              withBoolean:(jboolean)doExtensiveHealthChecks;

- (Okhttp3InternalConnectionRealConnection *)findConnectionWithInt:(jint)connectTimeout
                                                           withInt:(jint)readTimeout
                                                           withInt:(jint)writeTimeout
                                                       withBoolean:(jboolean)connectionRetryEnabled;

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabase;

- (void)deallocateWithBoolean:(jboolean)noNewStreams
                  withBoolean:(jboolean)released
                  withBoolean:(jboolean)streamFinished;

- (void)release__WithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, route_, Okhttp3Route *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, connectionPool_, Okhttp3ConnectionPool *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, routeSelector_, Okhttp3InternalConnectionRouteSelector *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, connection_, Okhttp3InternalConnectionRealConnection *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, stream_, id<Okhttp3InternalHttpHttpStream>)

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled, jboolean doExtensiveHealthChecks);

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled);

__attribute__((unused)) static Okhttp3InternalConnectionRouteDatabase *Okhttp3InternalConnectionStreamAllocation_routeDatabase(Okhttp3InternalConnectionStreamAllocation *self);

__attribute__((unused)) static void Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jboolean noNewStreams, jboolean released, jboolean streamFinished);

__attribute__((unused)) static void Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3InternalConnectionRealConnection *connection);

@implementation Okhttp3InternalConnectionStreamAllocation

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool
                           withOkhttp3Address:(Okhttp3Address *)address {
  Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_(self, connectionPool, address);
  return self;
}

- (id<Okhttp3InternalHttpHttpStream>)newStreamWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                                                          withBoolean:(jboolean)doExtensiveHealthChecks {
  jint connectTimeout = [((Okhttp3OkHttpClient *) nil_chk(client)) connectTimeoutMillis];
  jint readTimeout = [client readTimeoutMillis];
  jint writeTimeout = [client writeTimeoutMillis];
  jboolean connectionRetryEnabled = [client retryOnConnectionFailure];
  @try {
    Okhttp3InternalConnectionRealConnection *resultConnection = Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);
    id<Okhttp3InternalHttpHttpStream> resultStream;
    if (JreLoadVolatileId(&((Okhttp3InternalConnectionRealConnection *) nil_chk(resultConnection))->framedConnection_) != nil) {
      resultStream = create_Okhttp3InternalHttpHttp2xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_(client, self, JreLoadVolatileId(&resultConnection->framedConnection_));
    }
    else {
      [((JavaNetSocket *) nil_chk([resultConnection socket])) setSoTimeoutWithInt:readTimeout];
      [((OkioTimeout *) nil_chk([((id<OkioBufferedSource>) nil_chk(resultConnection->source_)) timeout])) timeoutWithLong:readTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
      [((OkioTimeout *) nil_chk([((id<OkioBufferedSink>) nil_chk(resultConnection->sink_)) timeout])) timeoutWithLong:writeTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
      resultStream = create_Okhttp3InternalHttpHttp1xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(client, self, resultConnection->source_, resultConnection->sink_);
    }
    @synchronized(connectionPool_) {
      JreStrongAssign(&stream_, resultStream);
      return JreRetainedLocalValue(resultStream);
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(e);
  }
}

- (Okhttp3InternalConnectionRealConnection *)findHealthyConnectionWithInt:(jint)connectTimeout
                                                                  withInt:(jint)readTimeout
                                                                  withInt:(jint)writeTimeout
                                                              withBoolean:(jboolean)connectionRetryEnabled
                                                              withBoolean:(jboolean)doExtensiveHealthChecks {
  return Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);
}

- (Okhttp3InternalConnectionRealConnection *)findConnectionWithInt:(jint)connectTimeout
                                                           withInt:(jint)readTimeout
                                                           withInt:(jint)writeTimeout
                                                       withBoolean:(jboolean)connectionRetryEnabled {
  return Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);
}

- (void)streamFinishedWithBoolean:(jboolean)noNewStreams
withOkhttp3InternalHttpHttpStream:(id<Okhttp3InternalHttpHttpStream>)stream {
  @synchronized(connectionPool_) {
    if (stream == nil || stream != self->stream_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"expected ", self->stream_, @" but was ", stream));
    }
    if (!noNewStreams) {
      ((Okhttp3InternalConnectionRealConnection *) nil_chk(connection_))->successCount_++;
    }
  }
  Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, false, true);
}

- (id<Okhttp3InternalHttpHttpStream>)stream {
  @synchronized(connectionPool_) {
    return JreRetainedLocalValue(stream_);
  }
}

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabase {
  return Okhttp3InternalConnectionStreamAllocation_routeDatabase(self);
}

- (Okhttp3InternalConnectionRealConnection *)connection {
  @synchronized(self) {
    return JreRetainedLocalValue(connection_);
  }
}

- (void)release__ {
  Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, false, true, false);
}

- (void)noNewStreams {
  Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, true, false, false);
}

- (void)deallocateWithBoolean:(jboolean)noNewStreams
                  withBoolean:(jboolean)released
                  withBoolean:(jboolean)streamFinished {
  Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, released, streamFinished);
}

- (void)cancel {
  id<Okhttp3InternalHttpHttpStream> streamToCancel;
  Okhttp3InternalConnectionRealConnection *connectionToCancel;
  @synchronized(connectionPool_) {
    canceled_ = true;
    streamToCancel = JreRetainedLocalValue(stream_);
    connectionToCancel = JreRetainedLocalValue(connection_);
  }
  if (streamToCancel != nil) {
    [streamToCancel cancel];
  }
  else if (connectionToCancel != nil) {
    [connectionToCancel cancel];
  }
}

- (void)streamFailedWithJavaIoIOException:(JavaIoIOException *)e {
  jboolean noNewStreams = false;
  @synchronized(connectionPool_) {
    if ([e isKindOfClass:[Okhttp3InternalFramedStreamResetException class]]) {
      Okhttp3InternalFramedStreamResetException *streamResetException = (Okhttp3InternalFramedStreamResetException *) cast_chk(e, [Okhttp3InternalFramedStreamResetException class]);
      if (((Okhttp3InternalFramedStreamResetException *) nil_chk(streamResetException))->errorCode_ == JreLoadEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM)) {
        refusedStreamCount_++;
      }
      if (streamResetException->errorCode_ != JreLoadEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM) || refusedStreamCount_ > 1) {
        noNewStreams = true;
        JreStrongAssign(&route_, nil);
      }
    }
    else if (connection_ != nil && ![connection_ isMultiplexed]) {
      noNewStreams = true;
      if (connection_->successCount_ == 0) {
        if (route_ != nil && e != nil) {
          [((Okhttp3InternalConnectionRouteSelector *) nil_chk(routeSelector_)) connectFailedWithOkhttp3Route:route_ withJavaIoIOException:e];
        }
        JreStrongAssign(&route_, nil);
      }
    }
  }
  Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, false, true);
}

- (void)acquireWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) addWithId:create_JavaLangRefWeakReference_initWithId_(self)];
}

- (void)release__WithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(self, connection);
}

- (jboolean)hasMoreRoutes {
  return route_ != nil || [((Okhttp3InternalConnectionRouteSelector *) nil_chk(routeSelector_)) hasNext];
}

- (NSString *)description {
  return [((Okhttp3Address *) nil_chk(address_)) description];
}

- (void)dealloc {
  RELEASE_(address_);
  RELEASE_(route_);
  RELEASE_(connectionPool_);
  RELEASE_(routeSelector_);
  RELEASE_(connection_);
  RELEASE_(stream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpStream;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x2, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRouteDatabase;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3ConnectionPool:withOkhttp3Address:);
  methods[1].selector = @selector(newStreamWithOkhttp3OkHttpClient:withBoolean:);
  methods[2].selector = @selector(findHealthyConnectionWithInt:withInt:withInt:withBoolean:withBoolean:);
  methods[3].selector = @selector(findConnectionWithInt:withInt:withInt:withBoolean:);
  methods[4].selector = @selector(streamFinishedWithBoolean:withOkhttp3InternalHttpHttpStream:);
  methods[5].selector = @selector(stream);
  methods[6].selector = @selector(routeDatabase);
  methods[7].selector = @selector(connection);
  methods[8].selector = @selector(release__);
  methods[9].selector = @selector(noNewStreams);
  methods[10].selector = @selector(deallocateWithBoolean:withBoolean:withBoolean:);
  methods[11].selector = @selector(cancel);
  methods[12].selector = @selector(streamFailedWithJavaIoIOException:);
  methods[13].selector = @selector(acquireWithOkhttp3InternalConnectionRealConnection:);
  methods[14].selector = @selector(release__WithOkhttp3InternalConnectionRealConnection:);
  methods[15].selector = @selector(hasMoreRoutes);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "address_", "LOkhttp3Address;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "route_", "LOkhttp3Route;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "connectionPool_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "routeSelector_", "LOkhttp3InternalConnectionRouteSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "refusedStreamCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "connection_", "LOkhttp3InternalConnectionRealConnection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "released_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canceled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stream_", "LOkhttp3InternalHttpHttpStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ConnectionPool;LOkhttp3Address;", "newStream", "LOkhttp3OkHttpClient;Z", "findHealthyConnection", "IIIZZ", "LJavaIoIOException;", "findConnection", "IIIZ", "streamFinished", "ZLOkhttp3InternalHttpHttpStream;", "release", "deallocate", "ZZZ", "streamFailed", "acquire", "LOkhttp3InternalConnectionRealConnection;", "toString" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionStreamAllocation = { "StreamAllocation", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 17, 9, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionStreamAllocation;
}

@end

void Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address) {
  NSObject_init(self);
  JreStrongAssign(&self->connectionPool_, connectionPool);
  JreStrongAssign(&self->address_, address);
  JreStrongAssignAndConsume(&self->routeSelector_, new_Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(address, Okhttp3InternalConnectionStreamAllocation_routeDatabase(self)));
}

Okhttp3InternalConnectionStreamAllocation *new_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionStreamAllocation, initWithOkhttp3ConnectionPool_withOkhttp3Address_, connectionPool, address)
}

Okhttp3InternalConnectionStreamAllocation *create_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionStreamAllocation, initWithOkhttp3ConnectionPool_withOkhttp3Address_, connectionPool, address)
}

Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled, jboolean doExtensiveHealthChecks) {
  while (true) {
    Okhttp3InternalConnectionRealConnection *candidate = Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);
    @synchronized(self->connectionPool_) {
      if (((Okhttp3InternalConnectionRealConnection *) nil_chk(candidate))->successCount_ == 0) {
        return JreRetainedLocalValue(candidate);
      }
    }
    if (![candidate isHealthyWithBoolean:doExtensiveHealthChecks]) {
      [self noNewStreams];
      continue;
    }
    return candidate;
  }
}

Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled) {
  Okhttp3Route *selectedRoute;
  @synchronized(self->connectionPool_) {
    if (self->released_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"released");
    if (self->stream_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"stream != null");
    if (self->canceled_) @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
    Okhttp3InternalConnectionRealConnection *allocatedConnection = self->connection_;
    if (allocatedConnection != nil && !allocatedConnection->noNewStreams_) {
      return JreRetainedLocalValue(allocatedConnection);
    }
    Okhttp3InternalConnectionRealConnection *pooledConnection = [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) getWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3Address:self->address_ withOkhttp3InternalConnectionStreamAllocation:self];
    if (pooledConnection != nil) {
      JreStrongAssign(&self->connection_, pooledConnection);
      return JreRetainedLocalValue(pooledConnection);
    }
    selectedRoute = JreRetainedLocalValue(self->route_);
  }
  if (selectedRoute == nil) {
    selectedRoute = [((Okhttp3InternalConnectionRouteSelector *) nil_chk(self->routeSelector_)) next];
    @synchronized(self->connectionPool_) {
      JreStrongAssign(&self->route_, selectedRoute);
      self->refusedStreamCount_ = 0;
    }
  }
  Okhttp3InternalConnectionRealConnection *newConnection = create_Okhttp3InternalConnectionRealConnection_initWithOkhttp3Route_(selectedRoute);
  [self acquireWithOkhttp3InternalConnectionRealConnection:newConnection];
  @synchronized(self->connectionPool_) {
    [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) putWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3InternalConnectionRealConnection:newConnection];
    JreStrongAssign(&self->connection_, newConnection);
    if (self->canceled_) @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
  }
  [newConnection connectWithInt:connectTimeout withInt:readTimeout withInt:writeTimeout withJavaUtilList:[((Okhttp3Address *) nil_chk(self->address_)) connectionSpecs] withBoolean:connectionRetryEnabled];
  [((Okhttp3InternalConnectionRouteDatabase *) nil_chk(Okhttp3InternalConnectionStreamAllocation_routeDatabase(self))) connectedWithOkhttp3Route:[newConnection route]];
  return newConnection;
}

Okhttp3InternalConnectionRouteDatabase *Okhttp3InternalConnectionStreamAllocation_routeDatabase(Okhttp3InternalConnectionStreamAllocation *self) {
  return [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) routeDatabaseWithOkhttp3ConnectionPool:self->connectionPool_];
}

void Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jboolean noNewStreams, jboolean released, jboolean streamFinished) {
  Okhttp3InternalConnectionRealConnection *connectionToClose = nil;
  @synchronized(self->connectionPool_) {
    if (streamFinished) {
      JreStrongAssign(&self->stream_, nil);
    }
    if (released) {
      self->released_ = true;
    }
    if (self->connection_ != nil) {
      if (noNewStreams) {
        self->connection_->noNewStreams_ = true;
      }
      if (self->stream_ == nil && (self->released_ || self->connection_->noNewStreams_)) {
        Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(self, self->connection_);
        if ([((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(self->connection_))->allocations_)) isEmpty]) {
          ((Okhttp3InternalConnectionRealConnection *) nil_chk(self->connection_))->idleAtNanos_ = JavaLangSystem_nanoTime();
          if ([((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) connectionBecameIdleWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3InternalConnectionRealConnection:self->connection_]) {
            connectionToClose = JreRetainedLocalValue(self->connection_);
          }
        }
        JreStrongAssign(&self->connection_, nil);
      }
    }
  }
  if (connectionToClose != nil) {
    Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_([connectionToClose socket]);
  }
}

void Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3InternalConnectionRealConnection *connection) {
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) size]; i < size; i++) {
    JavaLangRefReference *reference = [connection->allocations_ getWithInt:i];
    if ([((JavaLangRefReference *) nil_chk(reference)) get] == self) {
      [connection->allocations_ removeWithInt:i];
      return;
    }
  }
  @throw create_JavaLangIllegalStateException_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionStreamAllocation)
