//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3InternalTlsBasicCertificateChainCleaner.h"
#include "Okhttp3InternalTlsCertificateChainCleaner.h"
#include "Okhttp3InternalTlsTrustRootIndex.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"

@interface Okhttp3InternalTlsBasicCertificateChainCleaner () {
 @public
  Okhttp3InternalTlsTrustRootIndex *trustRootIndex_;
}

- (jboolean)verifySignatureWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)toVerify
                           withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signingCert;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalTlsBasicCertificateChainCleaner, trustRootIndex_, Okhttp3InternalTlsTrustRootIndex *)

inline jint Okhttp3InternalTlsBasicCertificateChainCleaner_get_MAX_SIGNERS();
#define Okhttp3InternalTlsBasicCertificateChainCleaner_MAX_SIGNERS 9
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalTlsBasicCertificateChainCleaner, MAX_SIGNERS, jint)

__attribute__((unused)) static jboolean Okhttp3InternalTlsBasicCertificateChainCleaner_verifySignatureWithJavaSecurityCertX509Certificate_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsBasicCertificateChainCleaner *self, JavaSecurityCertX509Certificate *toVerify, JavaSecurityCertX509Certificate *signingCert);

@implementation Okhttp3InternalTlsBasicCertificateChainCleaner

- (instancetype)initWithOkhttp3InternalTlsTrustRootIndex:(Okhttp3InternalTlsTrustRootIndex *)trustRootIndex {
  Okhttp3InternalTlsBasicCertificateChainCleaner_initWithOkhttp3InternalTlsTrustRootIndex_(self, trustRootIndex);
  return self;
}

- (id<JavaUtilList>)cleanWithJavaUtilList:(id<JavaUtilList>)chain
                             withNSString:(NSString *)hostname {
  id<JavaUtilDeque> queue = create_JavaUtilArrayDeque_initWithJavaUtilCollection_(chain);
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  [result addWithId:[queue removeFirst]];
  jboolean foundTrustedCertificate = false;
  for (jint c = 0; c < Okhttp3InternalTlsBasicCertificateChainCleaner_MAX_SIGNERS; c++) {
    {
      JavaSecurityCertX509Certificate *toVerify = (JavaSecurityCertX509Certificate *) cast_chk([result getWithInt:[result size] - 1], [JavaSecurityCertX509Certificate class]);
      JavaSecurityCertX509Certificate *trustedCert = [((Okhttp3InternalTlsTrustRootIndex *) nil_chk(trustRootIndex_)) findByIssuerAndSignatureWithJavaSecurityCertX509Certificate:toVerify];
      if (trustedCert != nil) {
        if ([result size] > 1 || ![((JavaSecurityCertX509Certificate *) nil_chk(toVerify)) isEqual:trustedCert]) {
          [result addWithId:trustedCert];
        }
        if (Okhttp3InternalTlsBasicCertificateChainCleaner_verifySignatureWithJavaSecurityCertX509Certificate_withJavaSecurityCertX509Certificate_(self, trustedCert, trustedCert)) {
          return result;
        }
        foundTrustedCertificate = true;
        continue;
      }
      for (id<JavaUtilIterator> i = [queue iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        JavaSecurityCertX509Certificate *signingCert = (JavaSecurityCertX509Certificate *) cast_chk([i next], [JavaSecurityCertX509Certificate class]);
        if (Okhttp3InternalTlsBasicCertificateChainCleaner_verifySignatureWithJavaSecurityCertX509Certificate_withJavaSecurityCertX509Certificate_(self, toVerify, signingCert)) {
          [i remove];
          [result addWithId:signingCert];
          goto continue_followIssuerChain;
        }
      }
      if (foundTrustedCertificate) {
        return result;
      }
      @throw create_JavaxNetSslSSLPeerUnverifiedException_initWithNSString_(JreStrcat("$@", @"Failed to find a trusted cert that signed ", toVerify));
    }
    continue_followIssuerChain: ;
  }
  @throw create_JavaxNetSslSSLPeerUnverifiedException_initWithNSString_(JreStrcat("$@", @"Certificate chain too long: ", result));
}

- (jboolean)verifySignatureWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)toVerify
                           withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signingCert {
  return Okhttp3InternalTlsBasicCertificateChainCleaner_verifySignatureWithJavaSecurityCertX509Certificate_withJavaSecurityCertX509Certificate_(self, toVerify, signingCert);
}

- (void)dealloc {
  RELEASE_(trustRootIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, 3, 4, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalTlsTrustRootIndex:);
  methods[1].selector = @selector(cleanWithJavaUtilList:withNSString:);
  methods[2].selector = @selector(verifySignatureWithJavaSecurityCertX509Certificate:withJavaSecurityCertX509Certificate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SIGNERS", "I", .constantValue.asInt = Okhttp3InternalTlsBasicCertificateChainCleaner_MAX_SIGNERS, 0x1a, -1, -1, -1, -1 },
    { "trustRootIndex_", "LOkhttp3InternalTlsTrustRootIndex;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalTlsTrustRootIndex;", "clean", "LJavaUtilList;LNSString;", "LJavaxNetSslSSLPeerUnverifiedException;", "(Ljava/util/List<Ljava/security/cert/Certificate;>;Ljava/lang/String;)Ljava/util/List<Ljava/security/cert/Certificate;>;", "verifySignature", "LJavaSecurityCertX509Certificate;LJavaSecurityCertX509Certificate;" };
  static const J2ObjcClassInfo _Okhttp3InternalTlsBasicCertificateChainCleaner = { "BasicCertificateChainCleaner", "okhttp3.internal.tls", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalTlsBasicCertificateChainCleaner;
}

@end

void Okhttp3InternalTlsBasicCertificateChainCleaner_initWithOkhttp3InternalTlsTrustRootIndex_(Okhttp3InternalTlsBasicCertificateChainCleaner *self, Okhttp3InternalTlsTrustRootIndex *trustRootIndex) {
  Okhttp3InternalTlsCertificateChainCleaner_init(self);
  JreStrongAssign(&self->trustRootIndex_, trustRootIndex);
}

Okhttp3InternalTlsBasicCertificateChainCleaner *new_Okhttp3InternalTlsBasicCertificateChainCleaner_initWithOkhttp3InternalTlsTrustRootIndex_(Okhttp3InternalTlsTrustRootIndex *trustRootIndex) {
  J2OBJC_NEW_IMPL(Okhttp3InternalTlsBasicCertificateChainCleaner, initWithOkhttp3InternalTlsTrustRootIndex_, trustRootIndex)
}

Okhttp3InternalTlsBasicCertificateChainCleaner *create_Okhttp3InternalTlsBasicCertificateChainCleaner_initWithOkhttp3InternalTlsTrustRootIndex_(Okhttp3InternalTlsTrustRootIndex *trustRootIndex) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalTlsBasicCertificateChainCleaner, initWithOkhttp3InternalTlsTrustRootIndex_, trustRootIndex)
}

jboolean Okhttp3InternalTlsBasicCertificateChainCleaner_verifySignatureWithJavaSecurityCertX509Certificate_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsBasicCertificateChainCleaner *self, JavaSecurityCertX509Certificate *toVerify, JavaSecurityCertX509Certificate *signingCert) {
  if (![((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(toVerify)) getIssuerDN])) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(signingCert)) getSubjectDN]]) return false;
  @try {
    [toVerify verifyWithJavaSecurityPublicKey:[signingCert getPublicKey]];
    return true;
  }
  @catch (JavaSecurityGeneralSecurityException *verifyFailed) {
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalTlsBasicCertificateChainCleaner)
