//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "Okhttp3InternalFramedFrameReader.h"
#include "Okhttp3InternalFramedFrameWriter.h"
#include "Okhttp3InternalFramedHeader.h"
#include "Okhttp3InternalFramedHeadersMode.h"
#include "Okhttp3InternalFramedNameValueBlockReader.h"
#include "Okhttp3InternalFramedSettings.h"
#include "Okhttp3InternalFramedSpdy3.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3Protocol.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/net/ProtocolException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/List.h"
#include "java/util/zip/Deflater.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/DeflaterSink.h"
#include "okio/Okio.h"

@interface Okhttp3InternalFramedSpdy3_Reader () {
 @public
  id<OkioBufferedSource> source_;
  jboolean client_;
  Okhttp3InternalFramedNameValueBlockReader *headerBlockReader_;
}

- (void)readSynStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)flags
                                                          withInt:(jint)length;

- (void)readSynReplyWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)flags
                                                         withInt:(jint)length;

- (void)readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)flags
                                                          withInt:(jint)length;

- (void)readHeadersWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                        withInt:(jint)flags
                                                        withInt:(jint)length;

- (void)readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                             withInt:(jint)flags
                                                             withInt:(jint)length;

- (void)readPingWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)flags
                                                     withInt:(jint)length;

- (void)readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                       withInt:(jint)flags
                                                       withInt:(jint)length;

- (void)readSettingsWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)flags
                                                         withInt:(jint)length;

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSpdy3_Reader, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSpdy3_Reader, headerBlockReader_, Okhttp3InternalFramedNameValueBlockReader *)

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readSynStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readSynReplyWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static JavaIoIOException *Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args);

@interface Okhttp3InternalFramedSpdy3_Writer () {
 @public
  id<OkioBufferedSink> sink_;
  OkioBuffer *headerBlockBuffer_;
  id<OkioBufferedSink> headerBlockOut_;
  jboolean client_;
  jboolean closed_;
}

- (void)writeNameValueBlockToBufferWithJavaUtilList:(id<JavaUtilList>)headerBlock;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSpdy3_Writer, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSpdy3_Writer, headerBlockBuffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSpdy3_Writer, headerBlockOut_, id<OkioBufferedSink>)

__attribute__((unused)) static void Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(Okhttp3InternalFramedSpdy3_Writer *self, id<JavaUtilList> headerBlock);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedSpdy3)

IOSByteArray *Okhttp3InternalFramedSpdy3_DICTIONARY;

@implementation Okhttp3InternalFramedSpdy3

+ (jint)TYPE_DATA {
  return Okhttp3InternalFramedSpdy3_TYPE_DATA;
}

+ (jint)TYPE_SYN_STREAM {
  return Okhttp3InternalFramedSpdy3_TYPE_SYN_STREAM;
}

+ (jint)TYPE_SYN_REPLY {
  return Okhttp3InternalFramedSpdy3_TYPE_SYN_REPLY;
}

+ (jint)TYPE_RST_STREAM {
  return Okhttp3InternalFramedSpdy3_TYPE_RST_STREAM;
}

+ (jint)TYPE_SETTINGS {
  return Okhttp3InternalFramedSpdy3_TYPE_SETTINGS;
}

+ (jint)TYPE_PING {
  return Okhttp3InternalFramedSpdy3_TYPE_PING;
}

+ (jint)TYPE_GOAWAY {
  return Okhttp3InternalFramedSpdy3_TYPE_GOAWAY;
}

+ (jint)TYPE_HEADERS {
  return Okhttp3InternalFramedSpdy3_TYPE_HEADERS;
}

+ (jint)TYPE_WINDOW_UPDATE {
  return Okhttp3InternalFramedSpdy3_TYPE_WINDOW_UPDATE;
}

+ (jint)FLAG_FIN {
  return Okhttp3InternalFramedSpdy3_FLAG_FIN;
}

+ (jint)FLAG_UNIDIRECTIONAL {
  return Okhttp3InternalFramedSpdy3_FLAG_UNIDIRECTIONAL;
}

+ (jint)VERSION {
  return Okhttp3InternalFramedSpdy3_VERSION;
}

+ (IOSByteArray *)DICTIONARY {
  return Okhttp3InternalFramedSpdy3_DICTIONARY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedSpdy3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3Protocol *)getProtocol {
  return JreLoadEnum(Okhttp3Protocol, SPDY_3);
}

- (id<Okhttp3InternalFramedFrameReader>)newReaderWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                                            withBoolean:(jboolean)client {
  return create_Okhttp3InternalFramedSpdy3_Reader_initWithOkioBufferedSource_withBoolean_(source, client);
}

- (id<Okhttp3InternalFramedFrameWriter>)newWriterWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                                          withBoolean:(jboolean)client {
  return create_Okhttp3InternalFramedSpdy3_Writer_initWithOkioBufferedSink_withBoolean_(sink, client);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedFrameReader;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedFrameWriter;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getProtocol);
  methods[2].selector = @selector(newReaderWithOkioBufferedSource:withBoolean:);
  methods[3].selector = @selector(newWriterWithOkioBufferedSink:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_DATA", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_DATA, 0x18, -1, -1, -1, -1 },
    { "TYPE_SYN_STREAM", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_SYN_STREAM, 0x18, -1, -1, -1, -1 },
    { "TYPE_SYN_REPLY", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_SYN_REPLY, 0x18, -1, -1, -1, -1 },
    { "TYPE_RST_STREAM", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_RST_STREAM, 0x18, -1, -1, -1, -1 },
    { "TYPE_SETTINGS", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_SETTINGS, 0x18, -1, -1, -1, -1 },
    { "TYPE_PING", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_PING, 0x18, -1, -1, -1, -1 },
    { "TYPE_GOAWAY", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_GOAWAY, 0x18, -1, -1, -1, -1 },
    { "TYPE_HEADERS", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_HEADERS, 0x18, -1, -1, -1, -1 },
    { "TYPE_WINDOW_UPDATE", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_TYPE_WINDOW_UPDATE, 0x18, -1, -1, -1, -1 },
    { "FLAG_FIN", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_FLAG_FIN, 0x18, -1, -1, -1, -1 },
    { "FLAG_UNIDIRECTIONAL", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_FLAG_UNIDIRECTIONAL, 0x18, -1, -1, -1, -1 },
    { "VERSION", "I", .constantValue.asInt = Okhttp3InternalFramedSpdy3_VERSION, 0x18, -1, -1, -1, -1 },
    { "DICTIONARY", "[B", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "newReader", "LOkioBufferedSource;Z", "newWriter", "LOkioBufferedSink;Z", &Okhttp3InternalFramedSpdy3_DICTIONARY, "LOkhttp3InternalFramedSpdy3_Reader;LOkhttp3InternalFramedSpdy3_Writer;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedSpdy3 = { "Spdy3", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x11, 4, 13, -1, 5, -1, -1, -1 };
  return &_Okhttp3InternalFramedSpdy3;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedSpdy3 class]) {
    {
      @try {
        JreStrongAssign(&Okhttp3InternalFramedSpdy3_DICTIONARY, [(@"\x00\x00\x00\x07options\x00\x00\x00\x04head\x00\x00\x00\x04post\x00\x00\x00\x03put\x00\x00\x00\x06""delete\x00\x00\x00\x05trace\x00\x00\x00\x06""accept\x00\x00\x00\x0e""accept-charset\x00\x00\x00\x0f""accept-encoding\x00\x00\x00\x0f""accept-language\x00\x00\x00\x0d""accept-ranges\x00\x00\x00\x03""age\x00\x00\x00\x05""allow\x00\x00\x00\x0d""authorization\x00\x00\x00\x0d""cache-control\x00\x00\x00\nconnection\x00\x00\x00\x0c""content-base\x00\x00\x00\x10""content-encoding\x00\x00\x00\x10""content-language\x00\x00\x00\x0e""content-length\x00\x00\x00\x10""content-location\x00\x00\x00\x0b""content-md5\x00\x00\x00\x0d""content-range\x00\x00\x00\x0c""content-type\x00\x00\x00\x04""date\x00\x00\x00\x04""etag\x00\x00\x00\x06""expect\x00\x00\x00\x07""expires\x00\x00\x00\x04""from\x00\x00\x00\x04host\x00\x00\x00\x08if-match\x00\x00\x00\x11if-modified-since\x00\x00\x00\x0dif-none-match\x00\x00\x00\x08if-range\x00\x00\x00\x13if-unmodified-since\x00\x00\x00\x0dlast-modified\x00\x00\x00\x08location\x00\x00\x00\x0cmax-forwards\x00\x00\x00\x06pragma\x00\x00\x00\x12proxy-authenticate\x00\x00\x00\x13proxy-authorization\x00\x00\x00\x05range\x00\x00\x00\x07referer\x00\x00\x00\x0bretry-after\x00\x00\x00\x06server\x00\x00\x00\x02te\x00\x00\x00\x07trailer\x00\x00\x00\x11transfer-encoding\x00\x00\x00\x07upgrade\x00\x00\x00\nuser-agent\x00\x00\x00\x04vary\x00\x00\x00\x03via\x00\x00\x00\x07warning\x00\x00\x00\x10www-authenticate\x00\x00\x00\x06method\x00\x00\x00\x03get\x00\x00\x00\x06status\x00\x00\x00\x06""200 OK\x00\x00\x00\x07version\x00\x00\x00\x08HTTP/1.1\x00\x00\x00\x03url\x00\x00\x00\x06public\x00\x00\x00\nset-cookie\x00\x00\x00\nkeep-alive\x00\x00\x00\x06origin100101201202205206300302303304305306307402405406407408409410411412413414415416417502504505203 Non-Authoritative Information204 No Content301 Moved Permanently400 Bad Request401 Unauthorized403 Forbidden404 Not Found500 Internal Server Error501 Not Implemented503 Service UnavailableJan Feb Mar Apr May Jun Jul Aug Sept Oct Nov Dec 00:00:00 Mon, Tue, Wed, Thu, Fri, Sat, Sun, GMTchunked,text/html,image/png,image/jpg,image/gif,application/xml,application/xhtml+xml,text/plain,text/javascript,publicprivatemax-age=gzip,deflate,sdchcharset=utf-8charset=iso-8859-1,utf-,*,enq=0.") java_getBytesWithCharsetName:[((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(Okhttp3InternalUtil, UTF_8))) name]]);
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        @throw create_JavaLangAssertionError_init();
      }
    }
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedSpdy3)
  }
}

@end

void Okhttp3InternalFramedSpdy3_init(Okhttp3InternalFramedSpdy3 *self) {
  NSObject_init(self);
}

Okhttp3InternalFramedSpdy3 *new_Okhttp3InternalFramedSpdy3_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedSpdy3, init)
}

Okhttp3InternalFramedSpdy3 *create_Okhttp3InternalFramedSpdy3_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedSpdy3, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedSpdy3)

@implementation Okhttp3InternalFramedSpdy3_Reader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                               withBoolean:(jboolean)client {
  Okhttp3InternalFramedSpdy3_Reader_initWithOkioBufferedSource_withBoolean_(self, source, client);
  return self;
}

- (void)readConnectionPreface {
}

- (jboolean)nextFrameWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler {
  jint w1;
  jint w2;
  @try {
    w1 = [((id<OkioBufferedSource>) nil_chk(source_)) readInt];
    w2 = [source_ readInt];
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
  jboolean control = (w1 & -0x7fffffff - 1) != 0;
  jint flags = JreURShift32((w2 & (jint) 0xff000000), 24);
  jint length = (w2 & (jint) 0xffffff);
  if (control) {
    jint version_ = JreURShift32((w1 & (jint) 0x7fff0000), 16);
    jint type = (w1 & (jint) 0xffff);
    if (version_ != 3) {
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$I", @"version != 3: ", version_));
    }
    switch (type) {
      case Okhttp3InternalFramedSpdy3_TYPE_SYN_STREAM:
      Okhttp3InternalFramedSpdy3_Reader_readSynStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_SYN_REPLY:
      Okhttp3InternalFramedSpdy3_Reader_readSynReplyWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_RST_STREAM:
      Okhttp3InternalFramedSpdy3_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_SETTINGS:
      Okhttp3InternalFramedSpdy3_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_PING:
      Okhttp3InternalFramedSpdy3_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_GOAWAY:
      Okhttp3InternalFramedSpdy3_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_HEADERS:
      Okhttp3InternalFramedSpdy3_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case Okhttp3InternalFramedSpdy3_TYPE_WINDOW_UPDATE:
      Okhttp3InternalFramedSpdy3_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      default:
      [source_ skipWithLong:length];
      return true;
    }
  }
  else {
    jint streamId = w1 & (jint) 0x7fffffff;
    jboolean inFinished = (flags & Okhttp3InternalFramedSpdy3_FLAG_FIN) != 0;
    [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) dataWithBoolean:inFinished withInt:streamId withOkioBufferedSource:source_ withInt:length];
    return true;
  }
}

- (void)readSynStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)flags
                                                          withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readSynStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readSynReplyWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)flags
                                                         withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readSynReplyWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)flags
                                                          withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readHeadersWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                        withInt:(jint)flags
                                                        withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                             withInt:(jint)flags
                                                             withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readPingWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)flags
                                                     withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                       withInt:(jint)flags
                                                       withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readSettingsWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)flags
                                                         withInt:(jint)length {
  Okhttp3InternalFramedSpdy3_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(message, args);
}

- (void)close {
  [((Okhttp3InternalFramedNameValueBlockReader *) nil_chk(headerBlockReader_)) close];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(headerBlockReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 5, 3, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x8a, 13, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:withBoolean:);
  methods[1].selector = @selector(readConnectionPreface);
  methods[2].selector = @selector(nextFrameWithOkhttp3InternalFramedFrameReader_Handler:);
  methods[3].selector = @selector(readSynStreamWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[4].selector = @selector(readSynReplyWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[5].selector = @selector(readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[6].selector = @selector(readHeadersWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[7].selector = @selector(readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[8].selector = @selector(readPingWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[9].selector = @selector(readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[10].selector = @selector(readSettingsWithOkhttp3InternalFramedFrameReader_Handler:withInt:withInt:);
  methods[11].selector = @selector(ioExceptionWithNSString:withNSObjectArray:);
  methods[12].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headerBlockReader_", "LOkhttp3InternalFramedNameValueBlockReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;Z", "nextFrame", "LOkhttp3InternalFramedFrameReader_Handler;", "LJavaIoIOException;", "readSynStream", "LOkhttp3InternalFramedFrameReader_Handler;II", "readSynReply", "readRstStream", "readHeaders", "readWindowUpdate", "readPing", "readGoAway", "readSettings", "ioException", "LNSString;[LNSObject;", "LOkhttp3InternalFramedSpdy3;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedSpdy3_Reader = { "Reader", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 13, 3, 15, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedSpdy3_Reader;
}

@end

void Okhttp3InternalFramedSpdy3_Reader_initWithOkioBufferedSource_withBoolean_(Okhttp3InternalFramedSpdy3_Reader *self, id<OkioBufferedSource> source, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssignAndConsume(&self->headerBlockReader_, new_Okhttp3InternalFramedNameValueBlockReader_initWithOkioBufferedSource_(self->source_));
  self->client_ = client;
}

Okhttp3InternalFramedSpdy3_Reader *new_Okhttp3InternalFramedSpdy3_Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedSpdy3_Reader, initWithOkioBufferedSource_withBoolean_, source, client)
}

Okhttp3InternalFramedSpdy3_Reader *create_Okhttp3InternalFramedSpdy3_Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedSpdy3_Reader, initWithOkioBufferedSource_withBoolean_, source, client)
}

void Okhttp3InternalFramedSpdy3_Reader_readSynStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint w2 = [self->source_ readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  jint associatedStreamId = w2 & (jint) 0x7fffffff;
  [self->source_ readShort];
  id<JavaUtilList> headerBlock = [((Okhttp3InternalFramedNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 10];
  jboolean inFinished = (flags & Okhttp3InternalFramedSpdy3_FLAG_FIN) != 0;
  jboolean outFinished = (flags & Okhttp3InternalFramedSpdy3_FLAG_UNIDIRECTIONAL) != 0;
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:outFinished withBoolean:inFinished withInt:streamId withInt:associatedStreamId withJavaUtilList:headerBlock withOkhttp3InternalFramedHeadersMode:JreLoadEnum(Okhttp3InternalFramedHeadersMode, SPDY_SYN_STREAM)];
}

void Okhttp3InternalFramedSpdy3_Reader_readSynReplyWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  id<JavaUtilList> headerBlock = [((Okhttp3InternalFramedNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 4];
  jboolean inFinished = (flags & Okhttp3InternalFramedSpdy3_FLAG_FIN) != 0;
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:false withBoolean:inFinished withInt:streamId withInt:-1 withJavaUtilList:headerBlock withOkhttp3InternalFramedHeadersMode:JreLoadEnum(Okhttp3InternalFramedHeadersMode, SPDY_REPLY)];
}

void Okhttp3InternalFramedSpdy3_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM length: %d != 8", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  jint streamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  jint errorCodeInt = [self->source_ readInt];
  Okhttp3InternalFramedErrorCode *errorCode = Okhttp3InternalFramedErrorCode_fromSpdy3RstWithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]));
  }
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) rstStreamWithInt:streamId withOkhttp3InternalFramedErrorCode:errorCode];
}

void Okhttp3InternalFramedSpdy3_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  id<JavaUtilList> headerBlock = [((Okhttp3InternalFramedNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 4];
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:false withBoolean:false withInt:streamId withInt:-1 withJavaUtilList:headerBlock withOkhttp3InternalFramedHeadersMode:JreLoadEnum(Okhttp3InternalFramedHeadersMode, SPDY_HEADERS)];
}

void Okhttp3InternalFramedSpdy3_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_WINDOW_UPDATE length: %d != 8", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint w2 = [self->source_ readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  jlong increment = w2 & (jint) 0x7fffffff;
  if (increment == 0) @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"windowSizeIncrement was 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(increment) } count:1 type:NSObject_class_()]));
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) windowUpdateWithInt:streamId withLong:increment];
}

void Okhttp3InternalFramedSpdy3_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 4) @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING length: %d != 4", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  jint id_ = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jboolean ack = self->client_ == ((id_ & 1) == 1);
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) pingWithBoolean:ack withInt:id_ withInt:0];
}

void Okhttp3InternalFramedSpdy3_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY length: %d != 8", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  jint lastGoodStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  jint errorCodeInt = [self->source_ readInt];
  Okhttp3InternalFramedErrorCode *errorCode = Okhttp3InternalFramedErrorCode_fromSpdyGoAwayWithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]));
  }
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) goAwayWithInt:lastGoodStreamId withOkhttp3InternalFramedErrorCode:errorCode withOkioByteString:JreLoadStatic(OkioByteString, EMPTY)];
}

void Okhttp3InternalFramedSpdy3_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withInt_(Okhttp3InternalFramedSpdy3_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint flags, jint length) {
  jint numberOfEntries = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  if (length != 4 + 8 * numberOfEntries) {
    @throw nil_chk(Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS length: %d != 4 + 8 * %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length), JavaLangInteger_valueOfWithInt_(numberOfEntries) } count:2 type:NSObject_class_()]));
  }
  Okhttp3InternalFramedSettings *settings = create_Okhttp3InternalFramedSettings_init();
  for (jint i = 0; i < numberOfEntries; i++) {
    jint w1 = [self->source_ readInt];
    jint value = [self->source_ readInt];
    jint idFlags = JreURShift32((w1 & (jint) 0xff000000), 24);
    jint id_ = w1 & (jint) 0xffffff;
    [settings setWithInt:id_ withInt:idFlags withInt:value];
  }
  jboolean clearPrevious = (flags & Okhttp3InternalFramedSettings_FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS) != 0;
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) settingsWithBoolean:clearPrevious withOkhttp3InternalFramedSettings:settings];
}

JavaIoIOException *Okhttp3InternalFramedSpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  Okhttp3InternalFramedSpdy3_Reader_initialize();
  @throw create_JavaIoIOException_initWithNSString_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(message, args));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedSpdy3_Reader)

@implementation Okhttp3InternalFramedSpdy3_Writer

- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                             withBoolean:(jboolean)client {
  Okhttp3InternalFramedSpdy3_Writer_initWithOkioBufferedSink_withBoolean_(self, sink, client);
  return self;
}

- (void)applyAndAckSettingsWithOkhttp3InternalFramedSettings:(Okhttp3InternalFramedSettings *)peerSettings {
}

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders {
}

- (void)connectionPreface {
  @synchronized(self) {
  }
}

- (void)flush {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)synStreamWithBoolean:(jboolean)outFinished
                 withBoolean:(jboolean)inFinished
                     withInt:(jint)streamId
                     withInt:(jint)associatedStreamId
            withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint length = (jint) (10 + [((OkioBuffer *) nil_chk(headerBlockBuffer_)) size]);
    jint type = Okhttp3InternalFramedSpdy3_TYPE_SYN_STREAM;
    jint flags = (outFinished ? Okhttp3InternalFramedSpdy3_FLAG_FIN : 0) | (inFinished ? Okhttp3InternalFramedSpdy3_FLAG_UNIDIRECTIONAL : 0);
    jint unused = 0;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeIntWithInt:associatedStreamId & (jint) 0x7fffffff];
    [sink_ writeShortWithInt:(JreLShift32((unused & (jint) 0x7), 13)) | (JreLShift32((unused & (jint) 0x1f), 8)) | (unused & (jint) 0xff)];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
    [sink_ flush];
  }
}

- (void)synReplyWithBoolean:(jboolean)outFinished
                    withInt:(jint)streamId
           withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint type = Okhttp3InternalFramedSpdy3_TYPE_SYN_REPLY;
    jint flags = (outFinished ? Okhttp3InternalFramedSpdy3_FLAG_FIN : 0);
    jint length = (jint) ([((OkioBuffer *) nil_chk(headerBlockBuffer_)) size] + 4);
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
    [sink_ flush];
  }
}

- (void)headersWithInt:(jint)streamId
      withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint flags = 0;
    jint type = Okhttp3InternalFramedSpdy3_TYPE_HEADERS;
    jint length = (jint) ([((OkioBuffer *) nil_chk(headerBlockBuffer_)) size] + 4);
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
  }
}

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalFramedErrorCode:(Okhttp3InternalFramedErrorCode *)errorCode {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->spdyRstCode_ == -1) @throw create_JavaLangIllegalArgumentException_init();
    jint flags = 0;
    jint type = Okhttp3InternalFramedSpdy3_TYPE_RST_STREAM;
    jint length = 8;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeIntWithInt:errorCode->spdyRstCode_];
    [sink_ flush];
  }
}

- (jint)maxDataLength {
  return 16383;
}

- (void)dataWithBoolean:(jboolean)outFinished
                withInt:(jint)streamId
         withOkioBuffer:(OkioBuffer *)source
                withInt:(jint)byteCount {
  @synchronized(self) {
    jint flags = (outFinished ? Okhttp3InternalFramedSpdy3_FLAG_FIN : 0);
    [self sendDataFrameWithInt:streamId withInt:flags withOkioBuffer:source withInt:byteCount];
  }
}

- (void)sendDataFrameWithInt:(jint)streamId
                     withInt:(jint)flags
              withOkioBuffer:(OkioBuffer *)buffer
                     withInt:(jint)byteCount {
  if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  if (byteCount > (jlong) 0xffffffLL) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"FRAME_TOO_LARGE max size is 16Mib: ", byteCount));
  }
  [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:streamId & (jint) 0x7fffffff];
  [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (byteCount & (jint) 0xffffff)];
  if (byteCount > 0) {
    [sink_ writeWithOkioBuffer:buffer withLong:byteCount];
  }
}

- (void)writeNameValueBlockToBufferWithJavaUtilList:(id<JavaUtilList>)headerBlock {
  Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
}

- (void)settingsWithOkhttp3InternalFramedSettings:(Okhttp3InternalFramedSettings *)settings {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jint type = Okhttp3InternalFramedSpdy3_TYPE_SETTINGS;
    jint flags = 0;
    jint size = [((Okhttp3InternalFramedSettings *) nil_chk(settings)) size];
    jint length = 4 + size * 8;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:size];
    for (jint i = 0; i <= Okhttp3InternalFramedSettings_COUNT; i++) {
      if (![settings isSetWithInt:i]) continue;
      jint settingsFlags = [settings flagsWithInt:i];
      [sink_ writeIntWithInt:(JreLShift32((settingsFlags & (jint) 0xff), 24)) | (i & (jint) 0xffffff)];
      [sink_ writeIntWithInt:[settings getWithInt:i]];
    }
    [sink_ flush];
  }
}

- (void)pingWithBoolean:(jboolean)reply
                withInt:(jint)payload1
                withInt:(jint)payload2 {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jboolean payloadIsReply = client_ != ((payload1 & 1) == 1);
    if (reply != payloadIsReply) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"payload != reply");
    jint type = Okhttp3InternalFramedSpdy3_TYPE_PING;
    jint flags = 0;
    jint length = 4;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:payload1];
    [sink_ flush];
  }
}

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalFramedErrorCode:(Okhttp3InternalFramedErrorCode *)errorCode
        withByteArray:(IOSByteArray *)ignored {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->spdyGoAwayCode_ == -1) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"errorCode.spdyGoAwayCode == -1");
    }
    jint type = Okhttp3InternalFramedSpdy3_TYPE_GOAWAY;
    jint flags = 0;
    jint length = 8;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:lastGoodStreamId];
    [sink_ writeIntWithInt:errorCode->spdyGoAwayCode_];
    [sink_ flush];
  }
}

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)increment {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (increment == 0 || increment > (jlong) 0x7fffffffLL) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"windowSizeIncrement must be between 1 and 0x7fffffff: ", increment));
    }
    jint type = Okhttp3InternalFramedSpdy3_TYPE_WINDOW_UPDATE;
    jint flags = 0;
    jint length = 8;
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((Okhttp3InternalFramedSpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    [sink_ writeIntWithInt:streamId];
    [sink_ writeIntWithInt:(jint) increment];
    [sink_ flush];
  }
}

- (void)close {
  @synchronized(self) {
    closed_ = true;
    Okhttp3InternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(sink_, headerBlockOut_);
  }
}

- (void)dealloc {
  RELEASE_(sink_);
  RELEASE_(headerBlockBuffer_);
  RELEASE_(headerBlockOut_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 8, 5, 9, -1, -1 },
    { NULL, "V", 0x21, 10, 11, 5, 12, -1, -1 },
    { NULL, "V", 0x21, 13, 14, 5, 15, -1, -1 },
    { NULL, "V", 0x21, 16, 17, 5, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 18, 19, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 5, 24, -1, -1 },
    { NULL, "V", 0x21, 25, 2, 5, -1, -1, -1 },
    { NULL, "V", 0x21, 26, 27, 5, -1, -1, -1 },
    { NULL, "V", 0x21, 28, 29, 5, -1, -1, -1 },
    { NULL, "V", 0x21, 30, 31, 5, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSink:withBoolean:);
  methods[1].selector = @selector(applyAndAckSettingsWithOkhttp3InternalFramedSettings:);
  methods[2].selector = @selector(pushPromiseWithInt:withInt:withJavaUtilList:);
  methods[3].selector = @selector(connectionPreface);
  methods[4].selector = @selector(flush);
  methods[5].selector = @selector(synStreamWithBoolean:withBoolean:withInt:withInt:withJavaUtilList:);
  methods[6].selector = @selector(synReplyWithBoolean:withInt:withJavaUtilList:);
  methods[7].selector = @selector(headersWithInt:withJavaUtilList:);
  methods[8].selector = @selector(rstStreamWithInt:withOkhttp3InternalFramedErrorCode:);
  methods[9].selector = @selector(maxDataLength);
  methods[10].selector = @selector(dataWithBoolean:withInt:withOkioBuffer:withInt:);
  methods[11].selector = @selector(sendDataFrameWithInt:withInt:withOkioBuffer:withInt:);
  methods[12].selector = @selector(writeNameValueBlockToBufferWithJavaUtilList:);
  methods[13].selector = @selector(settingsWithOkhttp3InternalFramedSettings:);
  methods[14].selector = @selector(pingWithBoolean:withInt:withInt:);
  methods[15].selector = @selector(goAwayWithInt:withOkhttp3InternalFramedErrorCode:withByteArray:);
  methods[16].selector = @selector(windowUpdateWithInt:withLong:);
  methods[17].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headerBlockBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headerBlockOut_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSink;Z", "applyAndAckSettings", "LOkhttp3InternalFramedSettings;", "pushPromise", "IILJavaUtilList;", "LJavaIoIOException;", "(IILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "synStream", "ZZIILJavaUtilList;", "(ZZIILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "synReply", "ZILJavaUtilList;", "(ZILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "headers", "ILJavaUtilList;", "(ILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "rstStream", "ILOkhttp3InternalFramedErrorCode;", "data", "ZILOkioBuffer;I", "sendDataFrame", "IILOkioBuffer;I", "writeNameValueBlockToBuffer", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/internal/framed/Header;>;)V", "settings", "ping", "ZII", "goAway", "ILOkhttp3InternalFramedErrorCode;[B", "windowUpdate", "IJ", "LOkhttp3InternalFramedSpdy3;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedSpdy3_Writer = { "Writer", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 18, 5, 32, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedSpdy3_Writer;
}

@end

void Okhttp3InternalFramedSpdy3_Writer_initWithOkioBufferedSink_withBoolean_(Okhttp3InternalFramedSpdy3_Writer *self, id<OkioBufferedSink> sink, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->sink_, sink);
  self->client_ = client;
  JavaUtilZipDeflater *deflater = create_JavaUtilZipDeflater_init();
  [deflater setDictionaryWithByteArray:JreLoadStatic(Okhttp3InternalFramedSpdy3, DICTIONARY)];
  JreStrongAssignAndConsume(&self->headerBlockBuffer_, new_OkioBuffer_init());
  JreStrongAssign(&self->headerBlockOut_, OkioOkio_bufferWithOkioSink_(create_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(self->headerBlockBuffer_, deflater)));
}

Okhttp3InternalFramedSpdy3_Writer *new_Okhttp3InternalFramedSpdy3_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedSpdy3_Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

Okhttp3InternalFramedSpdy3_Writer *create_Okhttp3InternalFramedSpdy3_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedSpdy3_Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

void Okhttp3InternalFramedSpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(Okhttp3InternalFramedSpdy3_Writer *self, id<JavaUtilList> headerBlock) {
  [((id<OkioBufferedSink>) nil_chk(self->headerBlockOut_)) writeIntWithInt:[((id<JavaUtilList>) nil_chk(headerBlock)) size]];
  for (jint i = 0, size = [headerBlock size]; i < size; i++) {
    OkioByteString *name = ((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->name_;
    [self->headerBlockOut_ writeIntWithInt:[((OkioByteString *) nil_chk(name)) size]];
    [self->headerBlockOut_ writeWithOkioByteString:name];
    OkioByteString *value = ((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->value_;
    [self->headerBlockOut_ writeIntWithInt:[((OkioByteString *) nil_chk(value)) size]];
    [self->headerBlockOut_ writeWithOkioByteString:value];
  }
  [self->headerBlockOut_ flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedSpdy3_Writer)
