//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(Okhttp3InternalFramedErrorCode *self, jint httpCode, jint spdyRstCode, jint spdyGoAwayCode, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedErrorCode)

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_values_[18];

@implementation Okhttp3InternalFramedErrorCode

+ (Okhttp3InternalFramedErrorCode *)NO_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, NO_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)PROTOCOL_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, PROTOCOL_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)INVALID_STREAM {
  return JreEnum(Okhttp3InternalFramedErrorCode, INVALID_STREAM);
}

+ (Okhttp3InternalFramedErrorCode *)UNSUPPORTED_VERSION {
  return JreEnum(Okhttp3InternalFramedErrorCode, UNSUPPORTED_VERSION);
}

+ (Okhttp3InternalFramedErrorCode *)STREAM_IN_USE {
  return JreEnum(Okhttp3InternalFramedErrorCode, STREAM_IN_USE);
}

+ (Okhttp3InternalFramedErrorCode *)STREAM_ALREADY_CLOSED {
  return JreEnum(Okhttp3InternalFramedErrorCode, STREAM_ALREADY_CLOSED);
}

+ (Okhttp3InternalFramedErrorCode *)INTERNAL_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, INTERNAL_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)FLOW_CONTROL_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, FLOW_CONTROL_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)STREAM_CLOSED {
  return JreEnum(Okhttp3InternalFramedErrorCode, STREAM_CLOSED);
}

+ (Okhttp3InternalFramedErrorCode *)FRAME_TOO_LARGE {
  return JreEnum(Okhttp3InternalFramedErrorCode, FRAME_TOO_LARGE);
}

+ (Okhttp3InternalFramedErrorCode *)REFUSED_STREAM {
  return JreEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM);
}

+ (Okhttp3InternalFramedErrorCode *)CANCEL {
  return JreEnum(Okhttp3InternalFramedErrorCode, CANCEL);
}

+ (Okhttp3InternalFramedErrorCode *)COMPRESSION_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, COMPRESSION_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)CONNECT_ERROR {
  return JreEnum(Okhttp3InternalFramedErrorCode, CONNECT_ERROR);
}

+ (Okhttp3InternalFramedErrorCode *)ENHANCE_YOUR_CALM {
  return JreEnum(Okhttp3InternalFramedErrorCode, ENHANCE_YOUR_CALM);
}

+ (Okhttp3InternalFramedErrorCode *)INADEQUATE_SECURITY {
  return JreEnum(Okhttp3InternalFramedErrorCode, INADEQUATE_SECURITY);
}

+ (Okhttp3InternalFramedErrorCode *)HTTP_1_1_REQUIRED {
  return JreEnum(Okhttp3InternalFramedErrorCode, HTTP_1_1_REQUIRED);
}

+ (Okhttp3InternalFramedErrorCode *)INVALID_CREDENTIALS {
  return JreEnum(Okhttp3InternalFramedErrorCode, INVALID_CREDENTIALS);
}

+ (Okhttp3InternalFramedErrorCode *)fromSpdy3RstWithInt:(jint)code {
  return Okhttp3InternalFramedErrorCode_fromSpdy3RstWithInt_(code);
}

+ (Okhttp3InternalFramedErrorCode *)fromHttp2WithInt:(jint)code {
  return Okhttp3InternalFramedErrorCode_fromHttp2WithInt_(code);
}

+ (Okhttp3InternalFramedErrorCode *)fromSpdyGoAwayWithInt:(jint)code {
  return Okhttp3InternalFramedErrorCode_fromSpdyGoAwayWithInt_(code);
}

+ (IOSObjectArray *)values {
  return Okhttp3InternalFramedErrorCode_values();
}

+ (Okhttp3InternalFramedErrorCode *)valueOfWithNSString:(NSString *)name {
  return Okhttp3InternalFramedErrorCode_valueOfWithNSString_(name);
}

- (Okhttp3InternalFramedErrorCode_Enum)toNSEnum {
  return (Okhttp3InternalFramedErrorCode_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3InternalFramedErrorCode;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedErrorCode;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedErrorCode;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[LOkhttp3InternalFramedErrorCode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedErrorCode;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromSpdy3RstWithInt:);
  methods[1].selector = @selector(fromHttp2WithInt:);
  methods[2].selector = @selector(fromSpdyGoAwayWithInt:);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "PROTOCOL_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "INVALID_STREAM", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "UNSUPPORTED_VERSION", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "STREAM_IN_USE", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "STREAM_ALREADY_CLOSED", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "INTERNAL_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "FLOW_CONTROL_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "STREAM_CLOSED", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "FRAME_TOO_LARGE", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "REFUSED_STREAM", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "CANCEL", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "COMPRESSION_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "CONNECT_ERROR", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "ENHANCE_YOUR_CALM", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "INADEQUATE_SECURITY", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "HTTP_1_1_REQUIRED", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "INVALID_CREDENTIALS", "LOkhttp3InternalFramedErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "httpCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "spdyRstCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "spdyGoAwayCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromSpdy3Rst", "I", "fromHttp2", "fromSpdyGoAway", "valueOf", "LNSString;", &JreEnum(Okhttp3InternalFramedErrorCode, NO_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, PROTOCOL_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, INVALID_STREAM), &JreEnum(Okhttp3InternalFramedErrorCode, UNSUPPORTED_VERSION), &JreEnum(Okhttp3InternalFramedErrorCode, STREAM_IN_USE), &JreEnum(Okhttp3InternalFramedErrorCode, STREAM_ALREADY_CLOSED), &JreEnum(Okhttp3InternalFramedErrorCode, INTERNAL_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, FLOW_CONTROL_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, STREAM_CLOSED), &JreEnum(Okhttp3InternalFramedErrorCode, FRAME_TOO_LARGE), &JreEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM), &JreEnum(Okhttp3InternalFramedErrorCode, CANCEL), &JreEnum(Okhttp3InternalFramedErrorCode, COMPRESSION_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, CONNECT_ERROR), &JreEnum(Okhttp3InternalFramedErrorCode, ENHANCE_YOUR_CALM), &JreEnum(Okhttp3InternalFramedErrorCode, INADEQUATE_SECURITY), &JreEnum(Okhttp3InternalFramedErrorCode, HTTP_1_1_REQUIRED), &JreEnum(Okhttp3InternalFramedErrorCode, INVALID_CREDENTIALS), "Ljava/lang/Enum<Lokhttp3/internal/framed/ErrorCode;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedErrorCode = { "ErrorCode", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x4011, 5, 21, -1, -1, -1, 24, -1 };
  return &_Okhttp3InternalFramedErrorCode;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedErrorCode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 18 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(Okhttp3InternalFramedErrorCode, NO_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 0, -1, 0, @"NO_ERROR", 0);
    (JreEnum(Okhttp3InternalFramedErrorCode, PROTOCOL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 1, 1, 1, @"PROTOCOL_ERROR", 1);
    (JreEnum(Okhttp3InternalFramedErrorCode, INVALID_STREAM) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 1, 2, -1, @"INVALID_STREAM", 2);
    (JreEnum(Okhttp3InternalFramedErrorCode, UNSUPPORTED_VERSION) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 1, 4, -1, @"UNSUPPORTED_VERSION", 3);
    (JreEnum(Okhttp3InternalFramedErrorCode, STREAM_IN_USE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 1, 8, -1, @"STREAM_IN_USE", 4);
    (JreEnum(Okhttp3InternalFramedErrorCode, STREAM_ALREADY_CLOSED) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 1, 9, -1, @"STREAM_ALREADY_CLOSED", 5);
    (JreEnum(Okhttp3InternalFramedErrorCode, INTERNAL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 2, 6, 2, @"INTERNAL_ERROR", 6);
    (JreEnum(Okhttp3InternalFramedErrorCode, FLOW_CONTROL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 3, 7, -1, @"FLOW_CONTROL_ERROR", 7);
    (JreEnum(Okhttp3InternalFramedErrorCode, STREAM_CLOSED) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 5, -1, -1, @"STREAM_CLOSED", 8);
    (JreEnum(Okhttp3InternalFramedErrorCode, FRAME_TOO_LARGE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 6, 11, -1, @"FRAME_TOO_LARGE", 9);
    (JreEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 7, 3, -1, @"REFUSED_STREAM", 10);
    (JreEnum(Okhttp3InternalFramedErrorCode, CANCEL) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 8, 5, -1, @"CANCEL", 11);
    (JreEnum(Okhttp3InternalFramedErrorCode, COMPRESSION_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 9, -1, -1, @"COMPRESSION_ERROR", 12);
    (JreEnum(Okhttp3InternalFramedErrorCode, CONNECT_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 10, -1, -1, @"CONNECT_ERROR", 13);
    (JreEnum(Okhttp3InternalFramedErrorCode, ENHANCE_YOUR_CALM) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 11, -1, -1, @"ENHANCE_YOUR_CALM", 14);
    (JreEnum(Okhttp3InternalFramedErrorCode, INADEQUATE_SECURITY) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 12, -1, -1, @"INADEQUATE_SECURITY", 15);
    (JreEnum(Okhttp3InternalFramedErrorCode, HTTP_1_1_REQUIRED) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, 13, -1, -1, @"HTTP_1_1_REQUIRED", 16);
    (JreEnum(Okhttp3InternalFramedErrorCode, INVALID_CREDENTIALS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(e, -1, 10, -1, @"INVALID_CREDENTIALS", 17);
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedErrorCode)
  }
}

@end

void Okhttp3InternalFramedErrorCode_initWithInt_withInt_withInt_withNSString_withInt_(Okhttp3InternalFramedErrorCode *self, jint httpCode, jint spdyRstCode, jint spdyGoAwayCode, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->httpCode_ = httpCode;
  self->spdyRstCode_ = spdyRstCode;
  self->spdyGoAwayCode_ = spdyGoAwayCode;
}

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_fromSpdy3RstWithInt_(jint code) {
  Okhttp3InternalFramedErrorCode_initialize();
  {
    IOSObjectArray *a__ = Okhttp3InternalFramedErrorCode_values();
    Okhttp3InternalFramedErrorCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    Okhttp3InternalFramedErrorCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      Okhttp3InternalFramedErrorCode *errorCode = *b__++;
      if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->spdyRstCode_ == code) return errorCode;
    }
  }
  return nil;
}

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_fromHttp2WithInt_(jint code) {
  Okhttp3InternalFramedErrorCode_initialize();
  {
    IOSObjectArray *a__ = Okhttp3InternalFramedErrorCode_values();
    Okhttp3InternalFramedErrorCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    Okhttp3InternalFramedErrorCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      Okhttp3InternalFramedErrorCode *errorCode = *b__++;
      if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->httpCode_ == code) return errorCode;
    }
  }
  return nil;
}

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_fromSpdyGoAwayWithInt_(jint code) {
  Okhttp3InternalFramedErrorCode_initialize();
  {
    IOSObjectArray *a__ = Okhttp3InternalFramedErrorCode_values();
    Okhttp3InternalFramedErrorCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    Okhttp3InternalFramedErrorCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      Okhttp3InternalFramedErrorCode *errorCode = *b__++;
      if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->spdyGoAwayCode_ == code) return errorCode;
    }
  }
  return nil;
}

IOSObjectArray *Okhttp3InternalFramedErrorCode_values() {
  Okhttp3InternalFramedErrorCode_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3InternalFramedErrorCode_values_ count:18 type:Okhttp3InternalFramedErrorCode_class_()];
}

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_valueOfWithNSString_(NSString *name) {
  Okhttp3InternalFramedErrorCode_initialize();
  for (int i = 0; i < 18; i++) {
    Okhttp3InternalFramedErrorCode *e = Okhttp3InternalFramedErrorCode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3InternalFramedErrorCode *Okhttp3InternalFramedErrorCode_fromOrdinal(NSUInteger ordinal) {
  Okhttp3InternalFramedErrorCode_initialize();
  if (ordinal >= 18) {
    return nil;
  }
  return Okhttp3InternalFramedErrorCode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedErrorCode)
