//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3Authenticator.h"
#include "Okhttp3CipherSuite.h"
#include "Okhttp3ConnectionSpec.h"
#include "Okhttp3Handshake.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalConnectionConnectionSpecSelector.h"
#include "Okhttp3InternalConnectionRealConnection.h"
#include "Okhttp3InternalConnectionRouteException.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "Okhttp3InternalFramedFramedConnection.h"
#include "Okhttp3InternalFramedFramedStream.h"
#include "Okhttp3InternalHttpHttp1xStream.h"
#include "Okhttp3InternalHttpHttpHeaders.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalTlsOkHostnameVerifier.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3InternalVersion.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3Route.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/net/ConnectException.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ProtocolException.h"
#include "java/net/Proxy.h"
#include "java/net/Socket.h"
#include "java/net/SocketTimeoutException.h"
#include "java/net/UnknownServiceException.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalConnectionRealConnection () {
 @public
  Okhttp3Route *route_;
  JavaNetSocket *rawSocket_;
  Okhttp3Handshake *handshake_;
  Okhttp3Protocol *protocol_;
}

- (void)buildTunneledConnectionWithInt:(jint)connectTimeout
                               withInt:(jint)readTimeout
                               withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (void)buildConnectionWithInt:(jint)connectTimeout
                       withInt:(jint)readTimeout
                       withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (void)connectSocketWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout;

- (void)establishProtocolWithInt:(jint)readTimeout
                         withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (void)connectTlsWithInt:(jint)readTimeout
                  withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (Okhttp3Request *)createTunnelWithInt:(jint)readTimeout
                                withInt:(jint)writeTimeout
                     withOkhttp3Request:(Okhttp3Request *)tunnelRequest
                     withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url;

- (Okhttp3Request *)createTunnelRequest;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, route_, Okhttp3Route *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, rawSocket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, handshake_, Okhttp3Handshake *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, protocol_, Okhttp3Protocol *)

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_buildTunneledConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_buildConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_establishProtocolWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_connectTlsWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3Request *tunnelRequest, Okhttp3HttpUrl *url);

__attribute__((unused)) static Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelRequest(Okhttp3InternalConnectionRealConnection *self);

@implementation Okhttp3InternalConnectionRealConnection

- (instancetype)initWithOkhttp3Route:(Okhttp3Route *)route {
  Okhttp3InternalConnectionRealConnection_initWithOkhttp3Route_(self, route);
  return self;
}

- (void)connectWithInt:(jint)connectTimeout
               withInt:(jint)readTimeout
               withInt:(jint)writeTimeout
      withJavaUtilList:(id<JavaUtilList>)connectionSpecs
           withBoolean:(jboolean)connectionRetryEnabled {
  if (protocol_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"already connected");
  Okhttp3InternalConnectionRouteException *routeException = nil;
  Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector = create_Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(connectionSpecs);
  if ([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(route_)) address])) sslSocketFactory] == nil) {
    if (![((id<JavaUtilList>) nil_chk(connectionSpecs)) containsWithId:JreLoadStatic(Okhttp3ConnectionSpec, CLEARTEXT)]) {
      @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(create_JavaNetUnknownServiceException_initWithNSString_(@"CLEARTEXT communication not enabled for client"));
    }
    NSString *host = [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([route_ address])) url])) host];
    if (![((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) isCleartextTrafficPermittedWithNSString:host]) {
      @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(create_JavaNetUnknownServiceException_initWithNSString_(JreStrcat("$$$", @"CLEARTEXT communication to ", host, @" not permitted by network security policy")));
    }
  }
  while (protocol_ == nil) {
    @try {
      if ([route_ requiresTunnel]) {
        Okhttp3InternalConnectionRealConnection_buildTunneledConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
      }
      else {
        Okhttp3InternalConnectionRealConnection_buildConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
      }
    }
    @catch (JavaIoIOException *e) {
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket_);
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(rawSocket_);
      JreStrongAssign(&socket_, nil);
      JreStrongAssign(&rawSocket_, nil);
      JreStrongAssign(&source_, nil);
      JreStrongAssign(&sink_, nil);
      JreStrongAssign(&handshake_, nil);
      JreStrongAssign(&protocol_, nil);
      if (routeException == nil) {
        routeException = create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(e);
      }
      else {
        [routeException addConnectExceptionWithJavaIoIOException:e];
      }
      if (!connectionRetryEnabled || ![connectionSpecSelector connectionFailedWithJavaIoIOException:e]) {
        @throw routeException;
      }
    }
  }
}

- (void)buildTunneledConnectionWithInt:(jint)connectTimeout
                               withInt:(jint)readTimeout
                               withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_buildTunneledConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
}

- (void)buildConnectionWithInt:(jint)connectTimeout
                       withInt:(jint)readTimeout
                       withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_buildConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
}

- (void)connectSocketWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout {
  Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
}

- (void)establishProtocolWithInt:(jint)readTimeout
                         withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_establishProtocolWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, readTimeout, writeTimeout, connectionSpecSelector);
}

- (void)connectTlsWithInt:(jint)readTimeout
                  withInt:(jint)writeTimeout
withOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_connectTlsWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, readTimeout, writeTimeout, connectionSpecSelector);
}

- (Okhttp3Request *)createTunnelWithInt:(jint)readTimeout
                                withInt:(jint)writeTimeout
                     withOkhttp3Request:(Okhttp3Request *)tunnelRequest
                     withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  return Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(self, readTimeout, writeTimeout, tunnelRequest, url);
}

- (Okhttp3Request *)createTunnelRequest {
  return Okhttp3InternalConnectionRealConnection_createTunnelRequest(self);
}

- (Okhttp3Route *)route {
  return route_;
}

- (void)cancel {
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(rawSocket_);
}

- (JavaNetSocket *)socket {
  return socket_;
}

- (jboolean)isHealthyWithBoolean:(jboolean)doExtensiveChecks {
  if ([((JavaNetSocket *) nil_chk(socket_)) isClosed] || [((JavaNetSocket *) nil_chk(socket_)) isInputShutdown] || [((JavaNetSocket *) nil_chk(socket_)) isOutputShutdown]) {
    return false;
  }
  if (JreLoadVolatileId(&framedConnection_) != nil) {
    return ![((Okhttp3InternalFramedFramedConnection *) nil_chk(JreLoadVolatileId(&framedConnection_))) isShutdown];
  }
  if (doExtensiveChecks) {
    @try {
      jint readTimeout = [((JavaNetSocket *) nil_chk(socket_)) getSoTimeout];
      @try {
        [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:1];
        if ([((id<OkioBufferedSource>) nil_chk(source_)) exhausted]) {
          return false;
        }
        return true;
      }
      @finally {
        [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:readTimeout];
      }
    }
    @catch (JavaNetSocketTimeoutException *ignored) {
    }
    @catch (JavaIoIOException *e) {
      return false;
    }
  }
  return true;
}

- (void)onStreamWithOkhttp3InternalFramedFramedStream:(Okhttp3InternalFramedFramedStream *)stream {
  [((Okhttp3InternalFramedFramedStream *) nil_chk(stream)) closeWithOkhttp3InternalFramedErrorCode:JreLoadEnum(Okhttp3InternalFramedErrorCode, REFUSED_STREAM)];
}

- (void)onSettingsWithOkhttp3InternalFramedFramedConnection:(Okhttp3InternalFramedFramedConnection *)connection {
  allocationLimit_ = [((Okhttp3InternalFramedFramedConnection *) nil_chk(connection)) maxConcurrentStreams];
}

- (Okhttp3Handshake *)handshake {
  return handshake_;
}

- (jboolean)isMultiplexed {
  return JreLoadVolatileId(&framedConnection_) != nil;
}

- (Okhttp3Protocol *)protocol {
  if (JreLoadVolatileId(&framedConnection_) == nil) {
    return protocol_ != nil ? protocol_ : JreLoadEnum(Okhttp3Protocol, HTTP_1_1);
  }
  else {
    return [((Okhttp3InternalFramedFramedConnection *) nil_chk(JreLoadVolatileId(&framedConnection_))) getProtocol];
  }
}

- (NSString *)description {
  return JreStrcat("$$CI$@$@$@$@C", @"Connection{", [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(route_)) address])) url])) host], ':', [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([route_ address])) url])) port], @", proxy=", [route_ proxy], @" hostAddress=", [route_ socketAddress], @" cipherSuite=", (handshake_ != nil ? [handshake_ cipherSuite] : (id) @"none"), @" protocol=", protocol_, '}');
}

- (void)__javaClone:(Okhttp3InternalConnectionRealConnection *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&framedConnection_, &original->framedConnection_);
}

- (void)dealloc {
  RELEASE_(route_);
  RELEASE_(rawSocket_);
  RELEASE_(socket_);
  RELEASE_(handshake_);
  RELEASE_(protocol_);
  JreReleaseVolatile(&framedConnection_);
  RELEASE_(source_);
  RELEASE_(sink_);
  RELEASE_(allocations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, 6, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x2, 13, 14, 6, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Route;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Handshake;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Route:);
  methods[1].selector = @selector(connectWithInt:withInt:withInt:withJavaUtilList:withBoolean:);
  methods[2].selector = @selector(buildTunneledConnectionWithInt:withInt:withInt:withOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[3].selector = @selector(buildConnectionWithInt:withInt:withInt:withOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[4].selector = @selector(connectSocketWithInt:withInt:);
  methods[5].selector = @selector(establishProtocolWithInt:withInt:withOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[6].selector = @selector(connectTlsWithInt:withInt:withOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[7].selector = @selector(createTunnelWithInt:withInt:withOkhttp3Request:withOkhttp3HttpUrl:);
  methods[8].selector = @selector(createTunnelRequest);
  methods[9].selector = @selector(route);
  methods[10].selector = @selector(cancel);
  methods[11].selector = @selector(socket);
  methods[12].selector = @selector(isHealthyWithBoolean:);
  methods[13].selector = @selector(onStreamWithOkhttp3InternalFramedFramedStream:);
  methods[14].selector = @selector(onSettingsWithOkhttp3InternalFramedFramedConnection:);
  methods[15].selector = @selector(handshake);
  methods[16].selector = @selector(isMultiplexed);
  methods[17].selector = @selector(protocol);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "route_", "LOkhttp3Route;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "handshake_", "LOkhttp3Handshake;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "protocol_", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "framedConnection_", "LOkhttp3InternalFramedFramedConnection;", .constantValue.asLong = 0, 0x41, -1, -1, -1, -1 },
    { "successCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "allocationLimit_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "allocations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 22, -1 },
    { "noNewStreams_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "idleAtNanos_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Route;", "connect", "IIILJavaUtilList;Z", "(IIILjava/util/List<Lokhttp3/ConnectionSpec;>;Z)V", "buildTunneledConnection", "IIILOkhttp3InternalConnectionConnectionSpecSelector;", "LJavaIoIOException;", "buildConnection", "connectSocket", "II", "establishProtocol", "IILOkhttp3InternalConnectionConnectionSpecSelector;", "connectTls", "createTunnel", "IILOkhttp3Request;LOkhttp3HttpUrl;", "isHealthy", "Z", "onStream", "LOkhttp3InternalFramedFramedStream;", "onSettings", "LOkhttp3InternalFramedFramedConnection;", "toString", "Ljava/util/List<Ljava/lang/ref/Reference<Lokhttp3/internal/connection/StreamAllocation;>;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionRealConnection = { "RealConnection", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 19, 13, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionRealConnection;
}

@end

void Okhttp3InternalConnectionRealConnection_initWithOkhttp3Route_(Okhttp3InternalConnectionRealConnection *self, Okhttp3Route *route) {
  Okhttp3InternalFramedFramedConnection_Listener_init(self);
  JreStrongAssignAndConsume(&self->allocations_, new_JavaUtilArrayList_init());
  self->idleAtNanos_ = JavaLangLong_MAX_VALUE;
  JreStrongAssign(&self->route_, route);
}

Okhttp3InternalConnectionRealConnection *new_Okhttp3InternalConnectionRealConnection_initWithOkhttp3Route_(Okhttp3Route *route) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionRealConnection, initWithOkhttp3Route_, route)
}

Okhttp3InternalConnectionRealConnection *create_Okhttp3InternalConnectionRealConnection_initWithOkhttp3Route_(Okhttp3Route *route) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionRealConnection, initWithOkhttp3Route_, route)
}

void Okhttp3InternalConnectionRealConnection_buildTunneledConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  Okhttp3Request *tunnelRequest = Okhttp3InternalConnectionRealConnection_createTunnelRequest(self);
  Okhttp3HttpUrl *url = [((Okhttp3Request *) nil_chk(tunnelRequest)) url];
  jint attemptedConnections = 0;
  jint maxAttempts = 21;
  while (true) {
    if (++attemptedConnections > maxAttempts) {
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$I", @"Too many tunnel connections attempted: ", maxAttempts));
    }
    Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
    tunnelRequest = Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(self, readTimeout, writeTimeout, tunnelRequest, url);
    if (tunnelRequest == nil) break;
    Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(self->rawSocket_);
    JreStrongAssign(&self->rawSocket_, nil);
    JreStrongAssign(&self->sink_, nil);
    JreStrongAssign(&self->source_, nil);
  }
  Okhttp3InternalConnectionRealConnection_establishProtocolWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, readTimeout, writeTimeout, connectionSpecSelector);
}

void Okhttp3InternalConnectionRealConnection_buildConnectionWithInt_withInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
  Okhttp3InternalConnectionRealConnection_establishProtocolWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, readTimeout, writeTimeout, connectionSpecSelector);
}

void Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout) {
  JavaNetProxy *proxy = [((Okhttp3Route *) nil_chk(self->route_)) proxy];
  Okhttp3Address *address = [self->route_ address];
  JreStrongAssign(&self->rawSocket_, [((JavaNetProxy *) nil_chk(proxy)) type] == JreLoadEnum(JavaNetProxy_Type, DIRECT) || [proxy type] == JreLoadEnum(JavaNetProxy_Type, HTTP) ? [((JavaxNetSocketFactory *) nil_chk([((Okhttp3Address *) nil_chk(address)) socketFactory])) createSocket] : create_JavaNetSocket_initWithJavaNetProxy_(proxy));
  [self->rawSocket_ setSoTimeoutWithInt:readTimeout];
  @try {
    [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) connectSocketWithJavaNetSocket:self->rawSocket_ withJavaNetInetSocketAddress:[self->route_ socketAddress] withInt:connectTimeout];
  }
  @catch (JavaNetConnectException *e) {
    @throw create_JavaNetConnectException_initWithNSString_(JreStrcat("$@", @"Failed to connect to ", [self->route_ socketAddress]));
  }
  JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaNetSocket_(self->rawSocket_)));
  JreStrongAssign(&self->sink_, OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaNetSocket_(self->rawSocket_)));
}

void Okhttp3InternalConnectionRealConnection_establishProtocolWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  if ([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) sslSocketFactory] != nil) {
    Okhttp3InternalConnectionRealConnection_connectTlsWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(self, readTimeout, writeTimeout, connectionSpecSelector);
  }
  else {
    JreStrongAssign(&self->protocol_, JreLoadEnum(Okhttp3Protocol, HTTP_1_1));
    JreStrongAssign(&self->socket_, self->rawSocket_);
  }
  if (self->protocol_ == JreLoadEnum(Okhttp3Protocol, SPDY_3) || self->protocol_ == JreLoadEnum(Okhttp3Protocol, HTTP_2)) {
    [((JavaNetSocket *) nil_chk(self->socket_)) setSoTimeoutWithInt:0];
    Okhttp3InternalFramedFramedConnection *framedConnection = [((Okhttp3InternalFramedFramedConnection_Builder *) nil_chk([((Okhttp3InternalFramedFramedConnection_Builder *) nil_chk([((Okhttp3InternalFramedFramedConnection_Builder *) nil_chk([create_Okhttp3InternalFramedFramedConnection_Builder_initWithBoolean_(true) socketWithJavaNetSocket:self->socket_ withNSString:[((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([self->route_ address])) url])) host] withOkioBufferedSource:self->source_ withOkioBufferedSink:self->sink_])) protocolWithOkhttp3Protocol:self->protocol_])) listenerWithOkhttp3InternalFramedFramedConnection_Listener:self])) build];
    [((Okhttp3InternalFramedFramedConnection *) nil_chk(framedConnection)) start];
    self->allocationLimit_ = [framedConnection maxConcurrentStreams];
    JreVolatileStrongAssign(&self->framedConnection_, framedConnection);
  }
  else {
    self->allocationLimit_ = 1;
  }
}

void Okhttp3InternalConnectionRealConnection_connectTlsWithInt_withInt_withOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  Okhttp3Address *address = [((Okhttp3Route *) nil_chk(self->route_)) address];
  JavaxNetSslSSLSocketFactory *sslSocketFactory = [((Okhttp3Address *) nil_chk(address)) sslSocketFactory];
  jboolean success = false;
  JavaxNetSslSSLSocket *sslSocket = nil;
  @try {
    sslSocket = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(sslSocketFactory)) createSocketWithJavaNetSocket:self->rawSocket_ withNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withInt:[((Okhttp3HttpUrl *) nil_chk([address url])) port] withBoolean:true], [JavaxNetSslSSLSocket class]);
    Okhttp3ConnectionSpec *connectionSpec = [((Okhttp3InternalConnectionConnectionSpecSelector *) nil_chk(connectionSpecSelector)) configureSecureSocketWithJavaxNetSslSSLSocket:sslSocket];
    if ([((Okhttp3ConnectionSpec *) nil_chk(connectionSpec)) supportsTlsExtensions]) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) configureTlsExtensionsWithJavaxNetSslSSLSocket:sslSocket withNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withJavaUtilList:[address protocols]];
    }
    [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) startHandshake];
    Okhttp3Handshake *unverifiedHandshake = Okhttp3Handshake_getWithJavaxNetSslSSLSession_([sslSocket getSession]);
    if (![((id<JavaxNetSslHostnameVerifier>) nil_chk([address hostnameVerifier])) verifyWithNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withJavaxNetSslSSLSession:[sslSocket getSession]]) {
      JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((Okhttp3Handshake *) nil_chk(unverifiedHandshake)) peerCertificates])) getWithInt:0], [JavaSecurityCertX509Certificate class]);
      @throw create_JavaxNetSslSSLPeerUnverifiedException_initWithNSString_(JreStrcat("$$$$$@", @"Hostname ", [((Okhttp3HttpUrl *) nil_chk([address url])) host], @" not verified:\n    DN: ", [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) getName], @"\n    subjectAltNames: ", Okhttp3InternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(cert)));
    }
    NSString *maybeProtocol = [connectionSpec supportsTlsExtensions] ? [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) getSelectedProtocolWithJavaxNetSslSSLSocket:sslSocket] : nil;
    JreStrongAssign(&self->socket_, sslSocket);
    JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaNetSocket_(self->socket_)));
    JreStrongAssign(&self->sink_, OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaNetSocket_(self->socket_)));
    JreStrongAssign(&self->handshake_, unverifiedHandshake);
    JreStrongAssign(&self->protocol_, maybeProtocol != nil ? Okhttp3Protocol_getWithNSString_(maybeProtocol) : JreLoadEnum(Okhttp3Protocol, HTTP_1_1));
    success = true;
  }
  @catch (JavaLangAssertionError *e) {
    if (Okhttp3InternalUtil_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e)) @throw create_JavaIoIOException_initWithJavaLangThrowable_(e);
    @throw e;
  }
  @finally {
    if (sslSocket != nil) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) afterHandshakeWithJavaxNetSslSSLSocket:sslSocket];
    }
    if (!success) {
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(sslSocket);
    }
  }
}

Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3Request *tunnelRequest, Okhttp3HttpUrl *url) {
  NSString *requestLine = JreStrcat("$$$", @"CONNECT ", Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_(url, true), @" HTTP/1.1");
  while (true) {
    Okhttp3InternalHttpHttp1xStream *tunnelConnection = create_Okhttp3InternalHttpHttp1xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(nil, nil, self->source_, self->sink_);
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSource>) nil_chk(self->source_)) timeout])) timeoutWithLong:readTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSink>) nil_chk(self->sink_)) timeout])) timeoutWithLong:writeTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [tunnelConnection writeRequestWithOkhttp3Headers:[((Okhttp3Request *) nil_chk(tunnelRequest)) headers] withNSString:requestLine];
    [tunnelConnection finishRequest];
    Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([tunnelConnection readResponse])) requestWithOkhttp3Request:tunnelRequest])) build];
    jlong contentLength = Okhttp3InternalHttpHttpHeaders_contentLengthWithOkhttp3Response_(response);
    if (contentLength == -1LL) {
      contentLength = 0LL;
    }
    id<OkioSource> body = [tunnelConnection newFixedLengthSourceWithLong:contentLength];
    Okhttp3InternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(body, JavaLangInteger_MAX_VALUE, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
    [((id<OkioSource>) nil_chk(body)) close];
    switch ([((Okhttp3Response *) nil_chk(response)) code]) {
      case JavaNetHttpURLConnection_HTTP_OK:
      if (![((OkioBuffer *) nil_chk([((id<OkioBufferedSource>) nil_chk(self->source_)) buffer])) exhausted] || ![((OkioBuffer *) nil_chk([((id<OkioBufferedSink>) nil_chk(self->sink_)) buffer])) exhausted]) {
        @throw create_JavaIoIOException_initWithNSString_(@"TLS tunnel buffered too many bytes!");
      }
      return nil;
      case JavaNetHttpURLConnection_HTTP_PROXY_AUTH:
      tunnelRequest = [((id<Okhttp3Authenticator>) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) proxyAuthenticator])) authenticateWithOkhttp3Route:self->route_ withOkhttp3Response:response];
      if (tunnelRequest == nil) @throw create_JavaIoIOException_initWithNSString_(@"Failed to authenticate with proxy");
      if ([@"close" java_equalsIgnoreCase:[response headerWithNSString:@"Connection"]]) {
        return tunnelRequest;
      }
      break;
      default:
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unexpected response code for CONNECT: ", [response code]));
    }
  }
}

Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelRequest(Okhttp3InternalConnectionRealConnection *self) {
  return [((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([create_Okhttp3Request_Builder_init() urlWithOkhttp3HttpUrl:[((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) url]])) headerWithNSString:@"Host" withNSString:Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_([((Okhttp3Address *) nil_chk([self->route_ address])) url], true)])) headerWithNSString:@"Proxy-Connection" withNSString:@"Keep-Alive"])) headerWithNSString:@"User-Agent" withNSString:Okhttp3InternalVersion_userAgent()])) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionRealConnection)
