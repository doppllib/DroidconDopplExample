//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedHeader.h"
#include "Okhttp3InternalFramedNameValueBlockReader.h"
#include "Okhttp3InternalFramedSpdy3.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/zip/Inflater.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSource.h"
#include "okio/InflaterSource.h"
#include "okio/Okio.h"
#include "okio/Source.h"

@interface Okhttp3InternalFramedNameValueBlockReader () {
 @public
  OkioInflaterSource *inflaterSource_;
  jint compressedLimit_;
  id<OkioBufferedSource> source_;
}

- (OkioByteString *)readByteString;

- (void)doneReading;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedNameValueBlockReader, inflaterSource_, OkioInflaterSource *)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedNameValueBlockReader, source_, id<OkioBufferedSource>)

__attribute__((unused)) static OkioByteString *Okhttp3InternalFramedNameValueBlockReader_readByteString(Okhttp3InternalFramedNameValueBlockReader *self);

__attribute__((unused)) static void Okhttp3InternalFramedNameValueBlockReader_doneReading(Okhttp3InternalFramedNameValueBlockReader *self);

@interface Okhttp3InternalFramedNameValueBlockReader_1 : OkioForwardingSource {
 @public
  Okhttp3InternalFramedNameValueBlockReader *this$0_;
}

- (instancetype)initWithOkhttp3InternalFramedNameValueBlockReader:(Okhttp3InternalFramedNameValueBlockReader *)outer$
                                                   withOkioSource:(id<OkioSource>)x0;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalFramedNameValueBlockReader_1)

__attribute__((unused)) static void Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader_1 *self, Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0);

__attribute__((unused)) static Okhttp3InternalFramedNameValueBlockReader_1 *new_Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalFramedNameValueBlockReader_1 *create_Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0);

@interface Okhttp3InternalFramedNameValueBlockReader_2 : JavaUtilZipInflater

- (instancetype)init;

- (jint)inflateWithByteArray:(IOSByteArray *)buffer
                     withInt:(jint)offset
                     withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalFramedNameValueBlockReader_2)

__attribute__((unused)) static void Okhttp3InternalFramedNameValueBlockReader_2_init(Okhttp3InternalFramedNameValueBlockReader_2 *self);

__attribute__((unused)) static Okhttp3InternalFramedNameValueBlockReader_2 *new_Okhttp3InternalFramedNameValueBlockReader_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalFramedNameValueBlockReader_2 *create_Okhttp3InternalFramedNameValueBlockReader_2_init();

@implementation Okhttp3InternalFramedNameValueBlockReader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  Okhttp3InternalFramedNameValueBlockReader_initWithOkioBufferedSource_(self, source);
  return self;
}

- (id<JavaUtilList>)readNameValueBlockWithInt:(jint)length {
  self->compressedLimit_ += length;
  jint numberOfPairs = [((id<OkioBufferedSource>) nil_chk(source_)) readInt];
  if (numberOfPairs < 0) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"numberOfPairs < 0: ", numberOfPairs));
  if (numberOfPairs > 1024) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"numberOfPairs > 1024: ", numberOfPairs));
  id<JavaUtilList> entries = create_JavaUtilArrayList_initWithInt_(numberOfPairs);
  for (jint i = 0; i < numberOfPairs; i++) {
    OkioByteString *name = [((OkioByteString *) nil_chk(Okhttp3InternalFramedNameValueBlockReader_readByteString(self))) toAsciiLowercase];
    OkioByteString *values = Okhttp3InternalFramedNameValueBlockReader_readByteString(self);
    if ([((OkioByteString *) nil_chk(name)) size] == 0) @throw create_JavaIoIOException_initWithNSString_(@"name.size == 0");
    [entries addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withOkioByteString_(name, values)];
  }
  Okhttp3InternalFramedNameValueBlockReader_doneReading(self);
  return entries;
}

- (OkioByteString *)readByteString {
  return Okhttp3InternalFramedNameValueBlockReader_readByteString(self);
}

- (void)doneReading {
  Okhttp3InternalFramedNameValueBlockReader_doneReading(self);
}

- (void)close {
  [((id<OkioBufferedSource>) nil_chk(source_)) close];
}

- (void)dealloc {
  RELEASE_(inflaterSource_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, 3, 4, -1, -1 },
    { NULL, "LOkioByteString;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:);
  methods[1].selector = @selector(readNameValueBlockWithInt:);
  methods[2].selector = @selector(readByteString);
  methods[3].selector = @selector(doneReading);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inflaterSource_", "LOkioInflaterSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "compressedLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;", "readNameValueBlock", "I", "LJavaIoIOException;", "(I)Ljava/util/List<Lokhttp3/internal/framed/Header;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedNameValueBlockReader = { "NameValueBlockReader", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedNameValueBlockReader;
}

@end

void Okhttp3InternalFramedNameValueBlockReader_initWithOkioBufferedSource_(Okhttp3InternalFramedNameValueBlockReader *self, id<OkioBufferedSource> source) {
  NSObject_init(self);
  id<OkioSource> throttleSource = create_Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(self, source);
  JavaUtilZipInflater *inflater = create_Okhttp3InternalFramedNameValueBlockReader_2_init();
  JreStrongAssignAndConsume(&self->inflaterSource_, new_OkioInflaterSource_initWithOkioSource_withJavaUtilZipInflater_(throttleSource, inflater));
  JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(self->inflaterSource_));
}

Okhttp3InternalFramedNameValueBlockReader *new_Okhttp3InternalFramedNameValueBlockReader_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedNameValueBlockReader, initWithOkioBufferedSource_, source)
}

Okhttp3InternalFramedNameValueBlockReader *create_Okhttp3InternalFramedNameValueBlockReader_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedNameValueBlockReader, initWithOkioBufferedSource_, source)
}

OkioByteString *Okhttp3InternalFramedNameValueBlockReader_readByteString(Okhttp3InternalFramedNameValueBlockReader *self) {
  jint length = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  return [self->source_ readByteStringWithLong:length];
}

void Okhttp3InternalFramedNameValueBlockReader_doneReading(Okhttp3InternalFramedNameValueBlockReader *self) {
  if (self->compressedLimit_ > 0) {
    [((OkioInflaterSource *) nil_chk(self->inflaterSource_)) refill];
    if (self->compressedLimit_ != 0) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"compressedLimit > 0: ", self->compressedLimit_));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedNameValueBlockReader)

@implementation Okhttp3InternalFramedNameValueBlockReader_1

- (instancetype)initWithOkhttp3InternalFramedNameValueBlockReader:(Okhttp3InternalFramedNameValueBlockReader *)outer$
                                                   withOkioSource:(id<OkioSource>)x0 {
  Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(self, outer$, x0);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (this$0_->compressedLimit_ == 0) return -1;
  jlong read = [super readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, this$0_->compressedLimit_)];
  if (read == -1) return -1;
  this$0_->compressedLimit_ -= read;
  return read;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalFramedNameValueBlockReader:withOkioSource:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalFramedNameValueBlockReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalFramedNameValueBlockReader;", "initWithOkioBufferedSource:" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedNameValueBlockReader_1 = { "", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, -1, -1 };
  return &_Okhttp3InternalFramedNameValueBlockReader_1;
}

@end

void Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader_1 *self, Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0) {
  JreStrongAssign(&self->this$0_, outer$);
  OkioForwardingSource_initWithOkioSource_(self, x0);
}

Okhttp3InternalFramedNameValueBlockReader_1 *new_Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedNameValueBlockReader_1, initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_, outer$, x0)
}

Okhttp3InternalFramedNameValueBlockReader_1 *create_Okhttp3InternalFramedNameValueBlockReader_1_initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_(Okhttp3InternalFramedNameValueBlockReader *outer$, id<OkioSource> x0) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedNameValueBlockReader_1, initWithOkhttp3InternalFramedNameValueBlockReader_withOkioSource_, outer$, x0)
}

@implementation Okhttp3InternalFramedNameValueBlockReader_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedNameValueBlockReader_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)inflateWithByteArray:(IOSByteArray *)buffer
                     withInt:(jint)offset
                     withInt:(jint)count {
  jint result = [super inflateWithByteArray:buffer withInt:offset withInt:count];
  if (result == 0 && [self needsDictionary]) {
    [self setDictionaryWithByteArray:JreLoadStatic(Okhttp3InternalFramedSpdy3, DICTIONARY)];
    result = [super inflateWithByteArray:buffer withInt:offset withInt:count];
  }
  return result;
}

- (void)dealloc {
  JreCheckFinalize(self, [Okhttp3InternalFramedNameValueBlockReader_2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(inflateWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "inflate", "[BII", "LJavaUtilZipDataFormatException;", "LOkhttp3InternalFramedNameValueBlockReader;", "initWithOkioBufferedSource:" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedNameValueBlockReader_2 = { "", "okhttp3.internal.framed", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, 4, -1, -1 };
  return &_Okhttp3InternalFramedNameValueBlockReader_2;
}

@end

void Okhttp3InternalFramedNameValueBlockReader_2_init(Okhttp3InternalFramedNameValueBlockReader_2 *self) {
  JavaUtilZipInflater_init(self);
}

Okhttp3InternalFramedNameValueBlockReader_2 *new_Okhttp3InternalFramedNameValueBlockReader_2_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedNameValueBlockReader_2, init)
}

Okhttp3InternalFramedNameValueBlockReader_2 *create_Okhttp3InternalFramedNameValueBlockReader_2_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedNameValueBlockReader_2, init)
}
