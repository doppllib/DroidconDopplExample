//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalConnectionRouteException.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"

@interface Okhttp3InternalConnectionRouteException () {
 @public
  JavaIoIOException *lastException_;
}

- (void)addSuppressedIfPossibleWithJavaIoIOException:(JavaIoIOException *)e
                               withJavaIoIOException:(JavaIoIOException *)suppressed;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteException, lastException_, JavaIoIOException *)

inline JavaLangReflectMethod *Okhttp3InternalConnectionRouteException_get_addSuppressedExceptionMethod();
static JavaLangReflectMethod *Okhttp3InternalConnectionRouteException_addSuppressedExceptionMethod;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalConnectionRouteException, addSuppressedExceptionMethod, JavaLangReflectMethod *)

__attribute__((unused)) static void Okhttp3InternalConnectionRouteException_addSuppressedIfPossibleWithJavaIoIOException_withJavaIoIOException_(Okhttp3InternalConnectionRouteException *self, JavaIoIOException *e, JavaIoIOException *suppressed);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalConnectionRouteException)

@implementation Okhttp3InternalConnectionRouteException

- (instancetype)initWithJavaIoIOException:(JavaIoIOException *)cause {
  Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(self, cause);
  return self;
}

- (JavaIoIOException *)getLastConnectException {
  return lastException_;
}

- (void)addConnectExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  Okhttp3InternalConnectionRouteException_addSuppressedIfPossibleWithJavaIoIOException_withJavaIoIOException_(self, e, lastException_);
  JreStrongAssign(&lastException_, e);
}

- (void)addSuppressedIfPossibleWithJavaIoIOException:(JavaIoIOException *)e
                               withJavaIoIOException:(JavaIoIOException *)suppressed {
  Okhttp3InternalConnectionRouteException_addSuppressedIfPossibleWithJavaIoIOException_withJavaIoIOException_(self, e, suppressed);
}

- (void)dealloc {
  RELEASE_(lastException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoIOException:);
  methods[1].selector = @selector(getLastConnectException);
  methods[2].selector = @selector(addConnectExceptionWithJavaIoIOException:);
  methods[3].selector = @selector(addSuppressedIfPossibleWithJavaIoIOException:withJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "addSuppressedExceptionMethod", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "lastException_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "addConnectException", "addSuppressedIfPossible", "LJavaIoIOException;LJavaIoIOException;", &Okhttp3InternalConnectionRouteException_addSuppressedExceptionMethod };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionRouteException = { "RouteException", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionRouteException;
}

+ (void)initialize {
  if (self == [Okhttp3InternalConnectionRouteException class]) {
    {
      JavaLangReflectMethod *m;
      @try {
        m = [JavaLangThrowable_class_() getDeclaredMethod:@"addSuppressed" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangThrowable_class_() } count:1 type:IOSClass_class_()]];
      }
      @catch (JavaLangException *e) {
        m = nil;
      }
      JreStrongAssign(&Okhttp3InternalConnectionRouteException_addSuppressedExceptionMethod, m);
    }
    J2OBJC_SET_INITIALIZED(Okhttp3InternalConnectionRouteException)
  }
}

@end

void Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(Okhttp3InternalConnectionRouteException *self, JavaIoIOException *cause) {
  JavaLangRuntimeException_initWithJavaLangThrowable_(self, cause);
  JreStrongAssign(&self->lastException_, cause);
}

Okhttp3InternalConnectionRouteException *new_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(JavaIoIOException *cause) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionRouteException, initWithJavaIoIOException_, cause)
}

Okhttp3InternalConnectionRouteException *create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(JavaIoIOException *cause) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionRouteException, initWithJavaIoIOException_, cause)
}

void Okhttp3InternalConnectionRouteException_addSuppressedIfPossibleWithJavaIoIOException_withJavaIoIOException_(Okhttp3InternalConnectionRouteException *self, JavaIoIOException *e, JavaIoIOException *suppressed) {
  if (Okhttp3InternalConnectionRouteException_addSuppressedExceptionMethod != nil) {
    @try {
      [Okhttp3InternalConnectionRouteException_addSuppressedExceptionMethod invokeWithId:e withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ suppressed } count:1 type:NSObject_class_()]];
    }
    @catch (JavaLangReflectInvocationTargetException *ignored) {
    }
    @catch (JavaLangIllegalAccessException *ignored) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionRouteException)
