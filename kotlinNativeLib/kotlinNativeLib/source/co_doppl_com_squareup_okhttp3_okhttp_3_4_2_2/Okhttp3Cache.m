//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Cache.h"
#include "Okhttp3CipherSuite.h"
#include "Okhttp3Handshake.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalCacheCacheRequest.h"
#include "Okhttp3InternalCacheCacheStrategy.h"
#include "Okhttp3InternalCacheDiskLruCache.h"
#include "Okhttp3InternalCacheInternalCache.h"
#include "Okhttp3InternalHttpHttpHeaders.h"
#include "Okhttp3InternalHttpHttpMethod.h"
#include "Okhttp3InternalHttpStatusLine.h"
#include "Okhttp3InternalIoFileSystem.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "Okhttp3TlsVersion.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSink.h"
#include "okio/ForwardingSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"

@interface Okhttp3Cache () {
 @public
  Okhttp3InternalCacheDiskLruCache *cache_;
  jint writeSuccessCount_;
  jint writeAbortCount_;
  jint networkCount_;
  jint hitCount_;
  jint requestCount_;
}

+ (NSString *)urlToKeyWithOkhttp3Request:(Okhttp3Request *)request;

- (id<Okhttp3InternalCacheCacheRequest>)putWithOkhttp3Response:(Okhttp3Response *)response;

- (void)removeWithOkhttp3Request:(Okhttp3Request *)request;

- (void)updateWithOkhttp3Response:(Okhttp3Response *)cached
              withOkhttp3Response:(Okhttp3Response *)network;

- (void)abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor;

- (void)trackResponseWithOkhttp3InternalCacheCacheStrategy:(Okhttp3InternalCacheCacheStrategy *)cacheStrategy;

- (void)trackConditionalCacheHit;

+ (jint)readIntWithOkioBufferedSource:(id<OkioBufferedSource>)source;

@end

J2OBJC_FIELD_SETTER(Okhttp3Cache, cache_, Okhttp3InternalCacheDiskLruCache *)

inline jint Okhttp3Cache_get_VERSION();
#define Okhttp3Cache_VERSION 201105
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3Cache, VERSION, jint)

inline jint Okhttp3Cache_get_ENTRY_METADATA();
#define Okhttp3Cache_ENTRY_METADATA 0
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3Cache, ENTRY_METADATA, jint)

inline jint Okhttp3Cache_get_ENTRY_BODY();
#define Okhttp3Cache_ENTRY_BODY 1
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3Cache, ENTRY_BODY, jint)

inline jint Okhttp3Cache_get_ENTRY_COUNT();
#define Okhttp3Cache_ENTRY_COUNT 2
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3Cache, ENTRY_COUNT, jint)

__attribute__((unused)) static NSString *Okhttp3Cache_urlToKeyWithOkhttp3Request_(Okhttp3Request *request);

__attribute__((unused)) static id<Okhttp3InternalCacheCacheRequest> Okhttp3Cache_putWithOkhttp3Response_(Okhttp3Cache *self, Okhttp3Response *response);

__attribute__((unused)) static void Okhttp3Cache_removeWithOkhttp3Request_(Okhttp3Cache *self, Okhttp3Request *request);

__attribute__((unused)) static void Okhttp3Cache_updateWithOkhttp3Response_withOkhttp3Response_(Okhttp3Cache *self, Okhttp3Response *cached, Okhttp3Response *network);

__attribute__((unused)) static void Okhttp3Cache_abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *self, Okhttp3InternalCacheDiskLruCache_Editor *editor);

__attribute__((unused)) static void Okhttp3Cache_trackResponseWithOkhttp3InternalCacheCacheStrategy_(Okhttp3Cache *self, Okhttp3InternalCacheCacheStrategy *cacheStrategy);

__attribute__((unused)) static void Okhttp3Cache_trackConditionalCacheHit(Okhttp3Cache *self);

__attribute__((unused)) static jint Okhttp3Cache_readIntWithOkioBufferedSource_(id<OkioBufferedSource> source);

@interface Okhttp3Cache_1 : NSObject < Okhttp3InternalCacheInternalCache > {
 @public
  Okhttp3Cache *this$0_;
}

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$;

- (Okhttp3Response *)getWithOkhttp3Request:(Okhttp3Request *)request;

- (id<Okhttp3InternalCacheCacheRequest>)putWithOkhttp3Response:(Okhttp3Response *)response;

- (void)removeWithOkhttp3Request:(Okhttp3Request *)request;

- (void)updateWithOkhttp3Response:(Okhttp3Response *)cached
              withOkhttp3Response:(Okhttp3Response *)network;

- (void)trackConditionalCacheHit;

- (void)trackResponseWithOkhttp3InternalCacheCacheStrategy:(Okhttp3InternalCacheCacheStrategy *)cacheStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_1)

__attribute__((unused)) static void Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache_1 *self, Okhttp3Cache *outer$);

__attribute__((unused)) static Okhttp3Cache_1 *new_Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_1 *create_Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache *outer$);

@interface Okhttp3Cache_2 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> delegate_;
  NSString *nextUrl_;
  jboolean canRemove_;
}

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$;

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_2)

J2OBJC_FIELD_SETTER(Okhttp3Cache_2, delegate_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(Okhttp3Cache_2, nextUrl_, NSString *)

__attribute__((unused)) static void Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache_2 *self, Okhttp3Cache *outer$);

__attribute__((unused)) static Okhttp3Cache_2 *new_Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_2 *create_Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache *outer$);

@interface Okhttp3Cache_CacheRequestImpl : NSObject < Okhttp3InternalCacheCacheRequest > {
 @public
  Okhttp3Cache *this$0_;
  Okhttp3InternalCacheDiskLruCache_Editor *editor_;
  id<OkioSink> cacheOut_;
  jboolean done_;
  id<OkioSink> body_;
}

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$
withOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor;

- (void)abort;

- (id<OkioSink>)body;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_CacheRequestImpl)

J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheRequestImpl, editor_, Okhttp3InternalCacheDiskLruCache_Editor *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheRequestImpl, cacheOut_, id<OkioSink>)
J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheRequestImpl, body_, id<OkioSink>)

__attribute__((unused)) static void Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache_CacheRequestImpl *self, Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor);

__attribute__((unused)) static Okhttp3Cache_CacheRequestImpl *new_Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_CacheRequestImpl *create_Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3Cache_CacheRequestImpl)

@interface Okhttp3Cache_CacheRequestImpl_1 : OkioForwardingSink {
 @public
  Okhttp3Cache_CacheRequestImpl *this$0_;
  Okhttp3InternalCacheDiskLruCache_Editor *val$editor_;
}

- (instancetype)initWithOkhttp3Cache_CacheRequestImpl:(Okhttp3Cache_CacheRequestImpl *)outer$
          withOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)capture$0
                                         withOkioSink:(id<OkioSink>)x0;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_CacheRequestImpl_1)

__attribute__((unused)) static void Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl_1 *self, Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0);

__attribute__((unused)) static Okhttp3Cache_CacheRequestImpl_1 *new_Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_CacheRequestImpl_1 *create_Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0);

@interface Okhttp3Cache_Entry : NSObject {
 @public
  NSString *url_;
  Okhttp3Headers *varyHeaders_;
  NSString *requestMethod_;
  Okhttp3Protocol *protocol_;
  jint code_;
  NSString *message_;
  Okhttp3Headers *responseHeaders_;
  Okhttp3Handshake *handshake_;
  jlong sentRequestMillis_;
  jlong receivedResponseMillis_;
}

- (instancetype)initWithOkioSource:(id<OkioSource>)inArg;

- (instancetype)initWithOkhttp3Response:(Okhttp3Response *)response;

- (void)writeToWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor;

- (jboolean)isHttps;

- (id<JavaUtilList>)readCertificateListWithOkioBufferedSource:(id<OkioBufferedSource>)source;

- (void)writeCertListWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                         withJavaUtilList:(id<JavaUtilList>)certificates;

- (jboolean)matchesWithOkhttp3Request:(Okhttp3Request *)request
                  withOkhttp3Response:(Okhttp3Response *)response;

- (Okhttp3Response *)responseWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot;

@end

J2OBJC_STATIC_INIT(Okhttp3Cache_Entry)

J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, url_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, varyHeaders_, Okhttp3Headers *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, requestMethod_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, protocol_, Okhttp3Protocol *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, message_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, responseHeaders_, Okhttp3Headers *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_Entry, handshake_, Okhttp3Handshake *)

inline NSString *Okhttp3Cache_Entry_get_SENT_MILLIS();
static NSString *Okhttp3Cache_Entry_SENT_MILLIS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cache_Entry, SENT_MILLIS, NSString *)

inline NSString *Okhttp3Cache_Entry_get_RECEIVED_MILLIS();
static NSString *Okhttp3Cache_Entry_RECEIVED_MILLIS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cache_Entry, RECEIVED_MILLIS, NSString *)

__attribute__((unused)) static void Okhttp3Cache_Entry_initWithOkioSource_(Okhttp3Cache_Entry *self, id<OkioSource> inArg);

__attribute__((unused)) static Okhttp3Cache_Entry *new_Okhttp3Cache_Entry_initWithOkioSource_(id<OkioSource> inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_Entry *create_Okhttp3Cache_Entry_initWithOkioSource_(id<OkioSource> inArg);

__attribute__((unused)) static void Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Cache_Entry *self, Okhttp3Response *response);

__attribute__((unused)) static Okhttp3Cache_Entry *new_Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Response *response) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_Entry *create_Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Response *response);

__attribute__((unused)) static jboolean Okhttp3Cache_Entry_isHttps(Okhttp3Cache_Entry *self);

__attribute__((unused)) static id<JavaUtilList> Okhttp3Cache_Entry_readCertificateListWithOkioBufferedSource_(Okhttp3Cache_Entry *self, id<OkioBufferedSource> source);

__attribute__((unused)) static void Okhttp3Cache_Entry_writeCertListWithOkioBufferedSink_withJavaUtilList_(Okhttp3Cache_Entry *self, id<OkioBufferedSink> sink, id<JavaUtilList> certificates);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3Cache_Entry)

@interface Okhttp3Cache_CacheResponseBody : Okhttp3ResponseBody {
 @public
  Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot_;
  id<OkioBufferedSource> bodySource_;
  NSString *contentType_;
  NSString *contentLength_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot
                                                     withNSString:(NSString *)contentType
                                                     withNSString:(NSString *)contentLength;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (id<OkioBufferedSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_CacheResponseBody)

J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheResponseBody, snapshot_, Okhttp3InternalCacheDiskLruCache_Snapshot *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheResponseBody, bodySource_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheResponseBody, contentType_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cache_CacheResponseBody, contentLength_, NSString *)

__attribute__((unused)) static void Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3Cache_CacheResponseBody *self, Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength);

__attribute__((unused)) static Okhttp3Cache_CacheResponseBody *new_Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_CacheResponseBody *create_Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3Cache_CacheResponseBody)

@interface Okhttp3Cache_CacheResponseBody_1 : OkioForwardingSource {
 @public
  Okhttp3InternalCacheDiskLruCache_Snapshot *val$snapshot_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)capture$0
                                                   withOkioSource:(id<OkioSource>)x0;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Cache_CacheResponseBody_1)

__attribute__((unused)) static void Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3Cache_CacheResponseBody_1 *self, Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0);

__attribute__((unused)) static Okhttp3Cache_CacheResponseBody_1 *new_Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cache_CacheResponseBody_1 *create_Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0);

@implementation Okhttp3Cache

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                          withLong:(jlong)maxSize {
  Okhttp3Cache_initWithJavaIoFile_withLong_(self, directory, maxSize);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                          withLong:(jlong)maxSize
   withOkhttp3InternalIoFileSystem:(id<Okhttp3InternalIoFileSystem>)fileSystem {
  Okhttp3Cache_initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_(self, directory, maxSize, fileSystem);
  return self;
}

+ (NSString *)urlToKeyWithOkhttp3Request:(Okhttp3Request *)request {
  return Okhttp3Cache_urlToKeyWithOkhttp3Request_(request);
}

- (Okhttp3Response *)getWithOkhttp3Request:(Okhttp3Request *)request {
  NSString *key = Okhttp3Cache_urlToKeyWithOkhttp3Request_(request);
  Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot;
  Okhttp3Cache_Entry *entry_;
  @try {
    snapshot = [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) getWithNSString:key];
    if (snapshot == nil) {
      return nil;
    }
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  @try {
    entry_ = create_Okhttp3Cache_Entry_initWithOkioSource_([((Okhttp3InternalCacheDiskLruCache_Snapshot *) nil_chk(snapshot)) getSourceWithInt:Okhttp3Cache_ENTRY_METADATA]);
  }
  @catch (JavaIoIOException *e) {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(snapshot);
    return nil;
  }
  Okhttp3Response *response = [((Okhttp3Cache_Entry *) nil_chk(entry_)) responseWithOkhttp3InternalCacheDiskLruCache_Snapshot:snapshot];
  if (![entry_ matchesWithOkhttp3Request:request withOkhttp3Response:response]) {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_([((Okhttp3Response *) nil_chk(response)) body]);
    return nil;
  }
  return response;
}

- (id<Okhttp3InternalCacheCacheRequest>)putWithOkhttp3Response:(Okhttp3Response *)response {
  return Okhttp3Cache_putWithOkhttp3Response_(self, response);
}

- (void)removeWithOkhttp3Request:(Okhttp3Request *)request {
  Okhttp3Cache_removeWithOkhttp3Request_(self, request);
}

- (void)updateWithOkhttp3Response:(Okhttp3Response *)cached
              withOkhttp3Response:(Okhttp3Response *)network {
  Okhttp3Cache_updateWithOkhttp3Response_withOkhttp3Response_(self, cached, network);
}

- (void)abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor {
  Okhttp3Cache_abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor_(self, editor);
}

- (void)initialize__ {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) initialize__];
}

- (void)delete__ {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) delete__];
}

- (void)evictAll {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) evictAll];
}

- (id<JavaUtilIterator>)urls {
  return create_Okhttp3Cache_2_initWithOkhttp3Cache_(self);
}

- (jint)writeAbortCount {
  @synchronized(self) {
    return writeAbortCount_;
  }
}

- (jint)writeSuccessCount {
  @synchronized(self) {
    return writeSuccessCount_;
  }
}

- (jlong)size {
  return [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) size];
}

- (jlong)maxSize {
  return [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) getMaxSize];
}

- (void)flush {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) flush];
}

- (void)close {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) close];
}

- (JavaIoFile *)directory {
  return [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) getDirectory];
}

- (jboolean)isClosed {
  return [((Okhttp3InternalCacheDiskLruCache *) nil_chk(cache_)) isClosed];
}

- (void)trackResponseWithOkhttp3InternalCacheCacheStrategy:(Okhttp3InternalCacheCacheStrategy *)cacheStrategy {
  Okhttp3Cache_trackResponseWithOkhttp3InternalCacheCacheStrategy_(self, cacheStrategy);
}

- (void)trackConditionalCacheHit {
  Okhttp3Cache_trackConditionalCacheHit(self);
}

- (jint)networkCount {
  @synchronized(self) {
    return networkCount_;
  }
}

- (jint)hitCount {
  @synchronized(self) {
    return hitCount_;
  }
}

- (jint)requestCount {
  @synchronized(self) {
    return requestCount_;
  }
}

+ (jint)readIntWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  return Okhttp3Cache_readIntWithOkioBufferedSource_(source);
}

- (void)dealloc {
  RELEASE_(internalCache_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheCacheRequest;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 3, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 14, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, 8, 15, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 18, 19, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withLong:);
  methods[1].selector = @selector(initWithJavaIoFile:withLong:withOkhttp3InternalIoFileSystem:);
  methods[2].selector = @selector(urlToKeyWithOkhttp3Request:);
  methods[3].selector = @selector(getWithOkhttp3Request:);
  methods[4].selector = @selector(putWithOkhttp3Response:);
  methods[5].selector = @selector(removeWithOkhttp3Request:);
  methods[6].selector = @selector(updateWithOkhttp3Response:withOkhttp3Response:);
  methods[7].selector = @selector(abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor:);
  methods[8].selector = @selector(initialize__);
  methods[9].selector = @selector(delete__);
  methods[10].selector = @selector(evictAll);
  methods[11].selector = @selector(urls);
  methods[12].selector = @selector(writeAbortCount);
  methods[13].selector = @selector(writeSuccessCount);
  methods[14].selector = @selector(size);
  methods[15].selector = @selector(maxSize);
  methods[16].selector = @selector(flush);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(directory);
  methods[19].selector = @selector(isClosed);
  methods[20].selector = @selector(trackResponseWithOkhttp3InternalCacheCacheStrategy:);
  methods[21].selector = @selector(trackConditionalCacheHit);
  methods[22].selector = @selector(networkCount);
  methods[23].selector = @selector(hitCount);
  methods[24].selector = @selector(requestCount);
  methods[25].selector = @selector(readIntWithOkioBufferedSource:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION", "I", .constantValue.asInt = Okhttp3Cache_VERSION, 0x1a, -1, -1, -1, -1 },
    { "ENTRY_METADATA", "I", .constantValue.asInt = Okhttp3Cache_ENTRY_METADATA, 0x1a, -1, -1, -1, -1 },
    { "ENTRY_BODY", "I", .constantValue.asInt = Okhttp3Cache_ENTRY_BODY, 0x1a, -1, -1, -1, -1 },
    { "ENTRY_COUNT", "I", .constantValue.asInt = Okhttp3Cache_ENTRY_COUNT, 0x1a, -1, -1, -1, -1 },
    { "internalCache_", "LOkhttp3InternalCacheInternalCache;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cache_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writeSuccessCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeAbortCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "networkCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hitCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requestCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;J", "LJavaIoFile;JLOkhttp3InternalIoFileSystem;", "urlToKey", "LOkhttp3Request;", "get", "put", "LOkhttp3Response;", "remove", "LJavaIoIOException;", "update", "LOkhttp3Response;LOkhttp3Response;", "abortQuietly", "LOkhttp3InternalCacheDiskLruCache_Editor;", "initialize", "delete", "()Ljava/util/Iterator<Ljava/lang/String;>;", "trackResponse", "LOkhttp3InternalCacheCacheStrategy;", "readInt", "LOkioBufferedSource;", "LOkhttp3Cache_CacheRequestImpl;LOkhttp3Cache_Entry;LOkhttp3Cache_CacheResponseBody;" };
  static const J2ObjcClassInfo _Okhttp3Cache = { "Cache", "okhttp3", ptrTable, methods, fields, 7, 0x11, 26, 11, -1, 20, -1, -1, -1 };
  return &_Okhttp3Cache;
}

@end

void Okhttp3Cache_initWithJavaIoFile_withLong_(Okhttp3Cache *self, JavaIoFile *directory, jlong maxSize) {
  Okhttp3Cache_initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_(self, directory, maxSize, JreLoadStatic(Okhttp3InternalIoFileSystem, SYSTEM));
}

Okhttp3Cache *new_Okhttp3Cache_initWithJavaIoFile_withLong_(JavaIoFile *directory, jlong maxSize) {
  J2OBJC_NEW_IMPL(Okhttp3Cache, initWithJavaIoFile_withLong_, directory, maxSize)
}

Okhttp3Cache *create_Okhttp3Cache_initWithJavaIoFile_withLong_(JavaIoFile *directory, jlong maxSize) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache, initWithJavaIoFile_withLong_, directory, maxSize)
}

void Okhttp3Cache_initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_(Okhttp3Cache *self, JavaIoFile *directory, jlong maxSize, id<Okhttp3InternalIoFileSystem> fileSystem) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->internalCache_, new_Okhttp3Cache_1_initWithOkhttp3Cache_(self));
  JreStrongAssign(&self->cache_, Okhttp3InternalCacheDiskLruCache_createWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_(fileSystem, directory, Okhttp3Cache_VERSION, Okhttp3Cache_ENTRY_COUNT, maxSize));
}

Okhttp3Cache *new_Okhttp3Cache_initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_(JavaIoFile *directory, jlong maxSize, id<Okhttp3InternalIoFileSystem> fileSystem) {
  J2OBJC_NEW_IMPL(Okhttp3Cache, initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_, directory, maxSize, fileSystem)
}

Okhttp3Cache *create_Okhttp3Cache_initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_(JavaIoFile *directory, jlong maxSize, id<Okhttp3InternalIoFileSystem> fileSystem) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache, initWithJavaIoFile_withLong_withOkhttp3InternalIoFileSystem_, directory, maxSize, fileSystem)
}

NSString *Okhttp3Cache_urlToKeyWithOkhttp3Request_(Okhttp3Request *request) {
  Okhttp3Cache_initialize();
  return Okhttp3InternalUtil_md5HexWithNSString_([((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(request)) url])) description]);
}

id<Okhttp3InternalCacheCacheRequest> Okhttp3Cache_putWithOkhttp3Response_(Okhttp3Cache *self, Okhttp3Response *response) {
  NSString *requestMethod = [((Okhttp3Request *) nil_chk([((Okhttp3Response *) nil_chk(response)) request])) method];
  if (Okhttp3InternalHttpHttpMethod_invalidatesCacheWithNSString_([((Okhttp3Request *) nil_chk([response request])) method])) {
    @try {
      Okhttp3Cache_removeWithOkhttp3Request_(self, [response request]);
    }
    @catch (JavaIoIOException *ignored) {
    }
    return nil;
  }
  if (![((NSString *) nil_chk(requestMethod)) isEqual:@"GET"]) {
    return nil;
  }
  if (Okhttp3InternalHttpHttpHeaders_hasVaryAllWithOkhttp3Response_(response)) {
    return nil;
  }
  Okhttp3Cache_Entry *entry_ = create_Okhttp3Cache_Entry_initWithOkhttp3Response_(response);
  Okhttp3InternalCacheDiskLruCache_Editor *editor = nil;
  @try {
    editor = [((Okhttp3InternalCacheDiskLruCache *) nil_chk(self->cache_)) editWithNSString:Okhttp3Cache_urlToKeyWithOkhttp3Request_([response request])];
    if (editor == nil) {
      return nil;
    }
    [entry_ writeToWithOkhttp3InternalCacheDiskLruCache_Editor:editor];
    return create_Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(self, editor);
  }
  @catch (JavaIoIOException *e) {
    Okhttp3Cache_abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor_(self, editor);
    return nil;
  }
}

void Okhttp3Cache_removeWithOkhttp3Request_(Okhttp3Cache *self, Okhttp3Request *request) {
  [((Okhttp3InternalCacheDiskLruCache *) nil_chk(self->cache_)) removeWithNSString:Okhttp3Cache_urlToKeyWithOkhttp3Request_(request)];
}

void Okhttp3Cache_updateWithOkhttp3Response_withOkhttp3Response_(Okhttp3Cache *self, Okhttp3Response *cached, Okhttp3Response *network) {
  Okhttp3Cache_Entry *entry_ = create_Okhttp3Cache_Entry_initWithOkhttp3Response_(network);
  Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot = ((Okhttp3Cache_CacheResponseBody *) nil_chk(((Okhttp3Cache_CacheResponseBody *) cast_chk([((Okhttp3Response *) nil_chk(cached)) body], [Okhttp3Cache_CacheResponseBody class]))))->snapshot_;
  Okhttp3InternalCacheDiskLruCache_Editor *editor = nil;
  @try {
    editor = [((Okhttp3InternalCacheDiskLruCache_Snapshot *) nil_chk(snapshot)) edit];
    if (editor != nil) {
      [entry_ writeToWithOkhttp3InternalCacheDiskLruCache_Editor:editor];
      [editor commit];
    }
  }
  @catch (JavaIoIOException *e) {
    Okhttp3Cache_abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor_(self, editor);
  }
}

void Okhttp3Cache_abortQuietlyWithOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *self, Okhttp3InternalCacheDiskLruCache_Editor *editor) {
  @try {
    if (editor != nil) {
      [editor abort];
    }
  }
  @catch (JavaIoIOException *ignored) {
  }
}

void Okhttp3Cache_trackResponseWithOkhttp3InternalCacheCacheStrategy_(Okhttp3Cache *self, Okhttp3InternalCacheCacheStrategy *cacheStrategy) {
  @synchronized(self) {
    self->requestCount_++;
    if (((Okhttp3InternalCacheCacheStrategy *) nil_chk(cacheStrategy))->networkRequest_ != nil) {
      self->networkCount_++;
    }
    else if (cacheStrategy->cacheResponse_ != nil) {
      self->hitCount_++;
    }
  }
}

void Okhttp3Cache_trackConditionalCacheHit(Okhttp3Cache *self) {
  @synchronized(self) {
    self->hitCount_++;
  }
}

jint Okhttp3Cache_readIntWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  Okhttp3Cache_initialize();
  @try {
    jlong result = [((id<OkioBufferedSource>) nil_chk(source)) readDecimalLong];
    NSString *line = [source readUtf8LineStrict];
    if (result < 0 || result > JavaLangInteger_MAX_VALUE || ![((NSString *) nil_chk(line)) java_isEmpty]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$C", @"expected an int but was \"", result, line, '"'));
    }
    return (jint) result;
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw create_JavaIoIOException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cache)

@implementation Okhttp3Cache_1

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$ {
  Okhttp3Cache_1_initWithOkhttp3Cache_(self, outer$);
  return self;
}

- (Okhttp3Response *)getWithOkhttp3Request:(Okhttp3Request *)request {
  return [this$0_ getWithOkhttp3Request:request];
}

- (id<Okhttp3InternalCacheCacheRequest>)putWithOkhttp3Response:(Okhttp3Response *)response {
  return Okhttp3Cache_putWithOkhttp3Response_(this$0_, response);
}

- (void)removeWithOkhttp3Request:(Okhttp3Request *)request {
  Okhttp3Cache_removeWithOkhttp3Request_(this$0_, request);
}

- (void)updateWithOkhttp3Response:(Okhttp3Response *)cached
              withOkhttp3Response:(Okhttp3Response *)network {
  Okhttp3Cache_updateWithOkhttp3Response_withOkhttp3Response_(this$0_, cached, network);
}

- (void)trackConditionalCacheHit {
  Okhttp3Cache_trackConditionalCacheHit(this$0_);
}

- (void)trackResponseWithOkhttp3InternalCacheCacheStrategy:(Okhttp3InternalCacheCacheStrategy *)cacheStrategy {
  Okhttp3Cache_trackResponseWithOkhttp3InternalCacheCacheStrategy_(this$0_, cacheStrategy);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheCacheRequest;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Cache:);
  methods[1].selector = @selector(getWithOkhttp3Request:);
  methods[2].selector = @selector(putWithOkhttp3Response:);
  methods[3].selector = @selector(removeWithOkhttp3Request:);
  methods[4].selector = @selector(updateWithOkhttp3Response:withOkhttp3Response:);
  methods[5].selector = @selector(trackConditionalCacheHit);
  methods[6].selector = @selector(trackResponseWithOkhttp3InternalCacheCacheStrategy:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3Cache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LOkhttp3Request;", "LJavaIoIOException;", "put", "LOkhttp3Response;", "remove", "update", "LOkhttp3Response;LOkhttp3Response;", "trackResponse", "LOkhttp3InternalCacheCacheStrategy;", "LOkhttp3Cache;" };
  static const J2ObjcClassInfo _Okhttp3Cache_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 7, 1, 10, -1, -1, -1, -1 };
  return &_Okhttp3Cache_1;
}

@end

void Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache_1 *self, Okhttp3Cache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3Cache_1 *new_Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_1, initWithOkhttp3Cache_, outer$)
}

Okhttp3Cache_1 *create_Okhttp3Cache_1_initWithOkhttp3Cache_(Okhttp3Cache *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_1, initWithOkhttp3Cache_, outer$)
}

@implementation Okhttp3Cache_2

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$ {
  Okhttp3Cache_2_initWithOkhttp3Cache_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  if (nextUrl_ != nil) return true;
  canRemove_ = false;
  while ([((id<JavaUtilIterator>) nil_chk(delegate_)) hasNext]) {
    Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot = [delegate_ next];
    @try {
      id<OkioBufferedSource> metadata = OkioOkio_bufferWithOkioSource_([((Okhttp3InternalCacheDiskLruCache_Snapshot *) nil_chk(snapshot)) getSourceWithInt:Okhttp3Cache_ENTRY_METADATA]);
      JreStrongAssign(&nextUrl_, [((id<OkioBufferedSource>) nil_chk(metadata)) readUtf8LineStrict]);
      return true;
    }
    @catch (JavaIoIOException *ignored) {
    }
    @finally {
      [snapshot close];
    }
  }
  return false;
}

- (NSString *)next {
  if (![self hasNext]) @throw create_JavaUtilNoSuchElementException_init();
  NSString *result = nextUrl_;
  JreStrongAssign(&nextUrl_, nil);
  canRemove_ = true;
  return result;
}

- (void)remove {
  if (!canRemove_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"remove() before next()");
  [((id<JavaUtilIterator>) nil_chk(delegate_)) remove];
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(nextUrl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Cache:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 1, -1 },
    { "nextUrl_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "canRemove_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "Ljava/util/Iterator<Lokhttp3/internal/cache/DiskLruCache$Snapshot;>;", "LOkhttp3Cache;", "urls", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _Okhttp3Cache_2 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 4, 3, 2, -1, 3, 4, -1 };
  return &_Okhttp3Cache_2;
}

@end

void Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache_2 *self, Okhttp3Cache *outer$) {
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, [((Okhttp3InternalCacheDiskLruCache *) nil_chk(outer$->cache_)) snapshots]);
}

Okhttp3Cache_2 *new_Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_2, initWithOkhttp3Cache_, outer$)
}

Okhttp3Cache_2 *create_Okhttp3Cache_2_initWithOkhttp3Cache_(Okhttp3Cache *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_2, initWithOkhttp3Cache_, outer$)
}

@implementation Okhttp3Cache_CacheRequestImpl

- (instancetype)initWithOkhttp3Cache:(Okhttp3Cache *)outer$
withOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor {
  Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(self, outer$, editor);
  return self;
}

- (void)abort {
  @synchronized(this$0_) {
    if (done_) {
      return;
    }
    done_ = true;
    this$0_->writeAbortCount_++;
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(cacheOut_);
  @try {
    [((Okhttp3InternalCacheDiskLruCache_Editor *) nil_chk(editor_)) abort];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (id<OkioSink>)body {
  return body_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(editor_);
  RELEASE_(cacheOut_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Cache:withOkhttp3InternalCacheDiskLruCache_Editor:);
  methods[1].selector = @selector(abort);
  methods[2].selector = @selector(body);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3Cache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "editor_", "LOkhttp3InternalCacheDiskLruCache_Editor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cacheOut_", "LOkioSink;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "body_", "LOkioSink;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalCacheDiskLruCache_Editor;", "LOkhttp3Cache;" };
  static const J2ObjcClassInfo _Okhttp3Cache_CacheRequestImpl = { "CacheRequestImpl", "okhttp3", ptrTable, methods, fields, 7, 0x12, 3, 5, 1, -1, -1, -1, -1 };
  return &_Okhttp3Cache_CacheRequestImpl;
}

@end

void Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache_CacheRequestImpl *self, Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->editor_, editor);
  JreStrongAssign(&self->cacheOut_, [((Okhttp3InternalCacheDiskLruCache_Editor *) nil_chk(editor)) newSinkWithInt:Okhttp3Cache_ENTRY_BODY]);
  JreStrongAssignAndConsume(&self->body_, new_Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(self, editor, self->cacheOut_));
}

Okhttp3Cache_CacheRequestImpl *new_Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_CacheRequestImpl, initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_, outer$, editor)
}

Okhttp3Cache_CacheRequestImpl *create_Okhttp3Cache_CacheRequestImpl_initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_(Okhttp3Cache *outer$, Okhttp3InternalCacheDiskLruCache_Editor *editor) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_CacheRequestImpl, initWithOkhttp3Cache_withOkhttp3InternalCacheDiskLruCache_Editor_, outer$, editor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cache_CacheRequestImpl)

@implementation Okhttp3Cache_CacheRequestImpl_1

- (instancetype)initWithOkhttp3Cache_CacheRequestImpl:(Okhttp3Cache_CacheRequestImpl *)outer$
          withOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)capture$0
                                         withOkioSink:(id<OkioSink>)x0 {
  Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(self, outer$, capture$0, x0);
  return self;
}

- (void)close {
  @synchronized(this$0_->this$0_) {
    if (this$0_->done_) {
      return;
    }
    this$0_->done_ = true;
    this$0_->this$0_->writeSuccessCount_++;
  }
  [super close];
  [((Okhttp3InternalCacheDiskLruCache_Editor *) nil_chk(val$editor_)) commit];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$editor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Cache_CacheRequestImpl:withOkhttp3InternalCacheDiskLruCache_Editor:withOkioSink:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3Cache_CacheRequestImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$editor_", "LOkhttp3InternalCacheDiskLruCache_Editor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSink;", "LJavaIoIOException;", "LOkhttp3Cache_CacheRequestImpl;", "initWithOkhttp3Cache:withOkhttp3InternalCacheDiskLruCache_Editor:" };
  static const J2ObjcClassInfo _Okhttp3Cache_CacheRequestImpl_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_Okhttp3Cache_CacheRequestImpl_1;
}

@end

void Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl_1 *self, Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$editor_, capture$0);
  OkioForwardingSink_initWithOkioSink_(self, x0);
}

Okhttp3Cache_CacheRequestImpl_1 *new_Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_CacheRequestImpl_1, initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_, outer$, capture$0, x0)
}

Okhttp3Cache_CacheRequestImpl_1 *create_Okhttp3Cache_CacheRequestImpl_1_initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3Cache_CacheRequestImpl *outer$, Okhttp3InternalCacheDiskLruCache_Editor *capture$0, id<OkioSink> x0) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_CacheRequestImpl_1, initWithOkhttp3Cache_CacheRequestImpl_withOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_, outer$, capture$0, x0)
}

J2OBJC_INITIALIZED_DEFN(Okhttp3Cache_Entry)

@implementation Okhttp3Cache_Entry

- (instancetype)initWithOkioSource:(id<OkioSource>)inArg {
  Okhttp3Cache_Entry_initWithOkioSource_(self, inArg);
  return self;
}

- (instancetype)initWithOkhttp3Response:(Okhttp3Response *)response {
  Okhttp3Cache_Entry_initWithOkhttp3Response_(self, response);
  return self;
}

- (void)writeToWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor {
  id<OkioBufferedSink> sink = OkioOkio_bufferWithOkioSink_([((Okhttp3InternalCacheDiskLruCache_Editor *) nil_chk(editor)) newSinkWithInt:Okhttp3Cache_ENTRY_METADATA]);
  [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(sink)) writeUtf8WithNSString:url_])) writeByteWithInt:0x000a];
  [((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:requestMethod_])) writeByteWithInt:0x000a];
  [((id<OkioBufferedSink>) nil_chk([sink writeDecimalLongWithLong:[((Okhttp3Headers *) nil_chk(varyHeaders_)) size]])) writeByteWithInt:0x000a];
  for (jint i = 0, size = [varyHeaders_ size]; i < size; i++) {
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[varyHeaders_ nameWithInt:i]])) writeUtf8WithNSString:@": "])) writeUtf8WithNSString:[varyHeaders_ valueWithInt:i]])) writeByteWithInt:0x000a];
  }
  [((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[create_Okhttp3InternalHttpStatusLine_initWithOkhttp3Protocol_withInt_withNSString_(protocol_, code_, message_) description]])) writeByteWithInt:0x000a];
  [((id<OkioBufferedSink>) nil_chk([sink writeDecimalLongWithLong:[((Okhttp3Headers *) nil_chk(responseHeaders_)) size] + 2])) writeByteWithInt:0x000a];
  for (jint i = 0, size = [responseHeaders_ size]; i < size; i++) {
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[responseHeaders_ nameWithInt:i]])) writeUtf8WithNSString:@": "])) writeUtf8WithNSString:[responseHeaders_ valueWithInt:i]])) writeByteWithInt:0x000a];
  }
  [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:Okhttp3Cache_Entry_SENT_MILLIS])) writeUtf8WithNSString:@": "])) writeDecimalLongWithLong:sentRequestMillis_])) writeByteWithInt:0x000a];
  [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:Okhttp3Cache_Entry_RECEIVED_MILLIS])) writeUtf8WithNSString:@": "])) writeDecimalLongWithLong:receivedResponseMillis_])) writeByteWithInt:0x000a];
  if (Okhttp3Cache_Entry_isHttps(self)) {
    [sink writeByteWithInt:0x000a];
    [((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[((Okhttp3CipherSuite *) nil_chk([((Okhttp3Handshake *) nil_chk(handshake_)) cipherSuite])) javaName]])) writeByteWithInt:0x000a];
    Okhttp3Cache_Entry_writeCertListWithOkioBufferedSink_withJavaUtilList_(self, sink, [handshake_ peerCertificates]);
    Okhttp3Cache_Entry_writeCertListWithOkioBufferedSink_withJavaUtilList_(self, sink, [handshake_ localCertificates]);
    if ([handshake_ tlsVersion] != nil) {
      [((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[((Okhttp3TlsVersion *) nil_chk([handshake_ tlsVersion])) javaName]])) writeByteWithInt:0x000a];
    }
  }
  [sink close];
}

- (jboolean)isHttps {
  return Okhttp3Cache_Entry_isHttps(self);
}

- (id<JavaUtilList>)readCertificateListWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  return Okhttp3Cache_Entry_readCertificateListWithOkioBufferedSource_(self, source);
}

- (void)writeCertListWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                         withJavaUtilList:(id<JavaUtilList>)certificates {
  Okhttp3Cache_Entry_writeCertListWithOkioBufferedSink_withJavaUtilList_(self, sink, certificates);
}

- (jboolean)matchesWithOkhttp3Request:(Okhttp3Request *)request
                  withOkhttp3Response:(Okhttp3Response *)response {
  return [((NSString *) nil_chk(url_)) isEqual:[((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(request)) url])) description]] && [((NSString *) nil_chk(requestMethod_)) isEqual:[request method]] && Okhttp3InternalHttpHttpHeaders_varyMatchesWithOkhttp3Response_withOkhttp3Headers_withOkhttp3Request_(response, varyHeaders_, request);
}

- (Okhttp3Response *)responseWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot {
  NSString *contentType = [((Okhttp3Headers *) nil_chk(responseHeaders_)) getWithNSString:@"Content-Type"];
  NSString *contentLength = [responseHeaders_ getWithNSString:@"Content-Length"];
  Okhttp3Request *cacheRequest = [((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([create_Okhttp3Request_Builder_init() urlWithNSString:url_])) methodWithNSString:requestMethod_ withOkhttp3RequestBody:nil])) headersWithOkhttp3Headers:varyHeaders_])) build];
  return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() requestWithOkhttp3Request:cacheRequest])) protocolWithOkhttp3Protocol:protocol_])) codeWithInt:code_])) messageWithNSString:message_])) headersWithOkhttp3Headers:responseHeaders_])) bodyWithOkhttp3ResponseBody:create_Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(snapshot, contentType, contentLength)])) handshakeWithOkhttp3Handshake:handshake_])) sentRequestAtMillisWithLong:sentRequestMillis_])) receivedResponseAtMillisWithLong:receivedResponseMillis_])) build];
}

- (void)dealloc {
  RELEASE_(url_);
  RELEASE_(varyHeaders_);
  RELEASE_(requestMethod_);
  RELEASE_(protocol_);
  RELEASE_(message_);
  RELEASE_(responseHeaders_);
  RELEASE_(handshake_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 5, 6, 1, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioSource:);
  methods[1].selector = @selector(initWithOkhttp3Response:);
  methods[2].selector = @selector(writeToWithOkhttp3InternalCacheDiskLruCache_Editor:);
  methods[3].selector = @selector(isHttps);
  methods[4].selector = @selector(readCertificateListWithOkioBufferedSource:);
  methods[5].selector = @selector(writeCertListWithOkioBufferedSink:withJavaUtilList:);
  methods[6].selector = @selector(matchesWithOkhttp3Request:withOkhttp3Response:);
  methods[7].selector = @selector(responseWithOkhttp3InternalCacheDiskLruCache_Snapshot:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SENT_MILLIS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "RECEIVED_MILLIS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "varyHeaders_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "requestMethod_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "protocol_", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "responseHeaders_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handshake_", "LOkhttp3Handshake;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sentRequestMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "receivedResponseMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "LJavaIoIOException;", "LOkhttp3Response;", "writeTo", "LOkhttp3InternalCacheDiskLruCache_Editor;", "readCertificateList", "LOkioBufferedSource;", "(Lokio/BufferedSource;)Ljava/util/List<Ljava/security/cert/Certificate;>;", "writeCertList", "LOkioBufferedSink;LJavaUtilList;", "(Lokio/BufferedSink;Ljava/util/List<Ljava/security/cert/Certificate;>;)V", "matches", "LOkhttp3Request;LOkhttp3Response;", "response", "LOkhttp3InternalCacheDiskLruCache_Snapshot;", &Okhttp3Cache_Entry_SENT_MILLIS, &Okhttp3Cache_Entry_RECEIVED_MILLIS, "LOkhttp3Cache;" };
  static const J2ObjcClassInfo _Okhttp3Cache_Entry = { "Entry", "okhttp3", ptrTable, methods, fields, 7, 0x1a, 8, 12, 17, -1, -1, -1, -1 };
  return &_Okhttp3Cache_Entry;
}

+ (void)initialize {
  if (self == [Okhttp3Cache_Entry class]) {
    JreStrongAssign(&Okhttp3Cache_Entry_SENT_MILLIS, JreStrcat("$$", [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) getPrefix], @"-Sent-Millis"));
    JreStrongAssign(&Okhttp3Cache_Entry_RECEIVED_MILLIS, JreStrcat("$$", [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) getPrefix], @"-Received-Millis"));
    J2OBJC_SET_INITIALIZED(Okhttp3Cache_Entry)
  }
}

@end

void Okhttp3Cache_Entry_initWithOkioSource_(Okhttp3Cache_Entry *self, id<OkioSource> inArg) {
  NSObject_init(self);
  @try {
    id<OkioBufferedSource> source = OkioOkio_bufferWithOkioSource_(inArg);
    JreStrongAssign(&self->url_, [((id<OkioBufferedSource>) nil_chk(source)) readUtf8LineStrict]);
    JreStrongAssign(&self->requestMethod_, [source readUtf8LineStrict]);
    Okhttp3Headers_Builder *varyHeadersBuilder = create_Okhttp3Headers_Builder_init();
    jint varyRequestHeaderLineCount = Okhttp3Cache_readIntWithOkioBufferedSource_(source);
    for (jint i = 0; i < varyRequestHeaderLineCount; i++) {
      [varyHeadersBuilder addLenientWithNSString:[source readUtf8LineStrict]];
    }
    JreStrongAssign(&self->varyHeaders_, [varyHeadersBuilder build]);
    Okhttp3InternalHttpStatusLine *statusLine = Okhttp3InternalHttpStatusLine_parseWithNSString_([source readUtf8LineStrict]);
    JreStrongAssign(&self->protocol_, ((Okhttp3InternalHttpStatusLine *) nil_chk(statusLine))->protocol_);
    self->code_ = statusLine->code_;
    JreStrongAssign(&self->message_, statusLine->message_);
    Okhttp3Headers_Builder *responseHeadersBuilder = create_Okhttp3Headers_Builder_init();
    jint responseHeaderLineCount = Okhttp3Cache_readIntWithOkioBufferedSource_(source);
    for (jint i = 0; i < responseHeaderLineCount; i++) {
      [responseHeadersBuilder addLenientWithNSString:[source readUtf8LineStrict]];
    }
    NSString *sendRequestMillisString = [responseHeadersBuilder getWithNSString:Okhttp3Cache_Entry_SENT_MILLIS];
    NSString *receivedResponseMillisString = [responseHeadersBuilder getWithNSString:Okhttp3Cache_Entry_RECEIVED_MILLIS];
    [responseHeadersBuilder removeAllWithNSString:Okhttp3Cache_Entry_SENT_MILLIS];
    [responseHeadersBuilder removeAllWithNSString:Okhttp3Cache_Entry_RECEIVED_MILLIS];
    self->sentRequestMillis_ = sendRequestMillisString != nil ? JavaLangLong_parseLongWithNSString_(sendRequestMillisString) : 0LL;
    self->receivedResponseMillis_ = receivedResponseMillisString != nil ? JavaLangLong_parseLongWithNSString_(receivedResponseMillisString) : 0LL;
    JreStrongAssign(&self->responseHeaders_, [responseHeadersBuilder build]);
    if (Okhttp3Cache_Entry_isHttps(self)) {
      NSString *blank = [source readUtf8LineStrict];
      if ([((NSString *) nil_chk(blank)) java_length] > 0) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$C", @"expected \"\" but was \"", blank, '"'));
      }
      NSString *cipherSuiteString = [source readUtf8LineStrict];
      Okhttp3CipherSuite *cipherSuite = Okhttp3CipherSuite_forJavaNameWithNSString_(cipherSuiteString);
      id<JavaUtilList> peerCertificates = Okhttp3Cache_Entry_readCertificateListWithOkioBufferedSource_(self, source);
      id<JavaUtilList> localCertificates = Okhttp3Cache_Entry_readCertificateListWithOkioBufferedSource_(self, source);
      Okhttp3TlsVersion *tlsVersion = ![source exhausted] ? Okhttp3TlsVersion_forJavaNameWithNSString_([source readUtf8LineStrict]) : nil;
      JreStrongAssign(&self->handshake_, Okhttp3Handshake_getWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(tlsVersion, cipherSuite, peerCertificates, localCertificates));
    }
    else {
      JreStrongAssign(&self->handshake_, nil);
    }
  }
  @finally {
    [((id<OkioSource>) nil_chk(inArg)) close];
  }
}

Okhttp3Cache_Entry *new_Okhttp3Cache_Entry_initWithOkioSource_(id<OkioSource> inArg) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_Entry, initWithOkioSource_, inArg)
}

Okhttp3Cache_Entry *create_Okhttp3Cache_Entry_initWithOkioSource_(id<OkioSource> inArg) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_Entry, initWithOkioSource_, inArg)
}

void Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Cache_Entry *self, Okhttp3Response *response) {
  NSObject_init(self);
  JreStrongAssign(&self->url_, [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk([((Okhttp3Response *) nil_chk(response)) request])) url])) description]);
  JreStrongAssign(&self->varyHeaders_, Okhttp3InternalHttpHttpHeaders_varyHeadersWithOkhttp3Response_(response));
  JreStrongAssign(&self->requestMethod_, [((Okhttp3Request *) nil_chk([response request])) method]);
  JreStrongAssign(&self->protocol_, [response protocol]);
  self->code_ = [response code];
  JreStrongAssign(&self->message_, [response message]);
  JreStrongAssign(&self->responseHeaders_, [response headers]);
  JreStrongAssign(&self->handshake_, [response handshake]);
  self->sentRequestMillis_ = [response sentRequestAtMillis];
  self->receivedResponseMillis_ = [response receivedResponseAtMillis];
}

Okhttp3Cache_Entry *new_Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Response *response) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_Entry, initWithOkhttp3Response_, response)
}

Okhttp3Cache_Entry *create_Okhttp3Cache_Entry_initWithOkhttp3Response_(Okhttp3Response *response) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_Entry, initWithOkhttp3Response_, response)
}

jboolean Okhttp3Cache_Entry_isHttps(Okhttp3Cache_Entry *self) {
  return [((NSString *) nil_chk(self->url_)) java_hasPrefix:@"https://"];
}

id<JavaUtilList> Okhttp3Cache_Entry_readCertificateListWithOkioBufferedSource_(Okhttp3Cache_Entry *self, id<OkioBufferedSource> source) {
  jint length = Okhttp3Cache_readIntWithOkioBufferedSource_(source);
  if (length == -1) return JavaUtilCollections_emptyList();
  @try {
    JavaSecurityCertCertificateFactory *certificateFactory = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
    id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_(length);
    for (jint i = 0; i < length; i++) {
      NSString *line = [((id<OkioBufferedSource>) nil_chk(source)) readUtf8LineStrict];
      OkioBuffer *bytes = create_OkioBuffer_init();
      [bytes writeWithOkioByteString:OkioByteString_decodeBase64WithNSString_(line)];
      [result addWithId:[((JavaSecurityCertCertificateFactory *) nil_chk(certificateFactory)) generateCertificateWithJavaIoInputStream:[bytes inputStream]]];
    }
    return result;
  }
  @catch (JavaSecurityCertCertificateException *e) {
    @throw create_JavaIoIOException_initWithNSString_([e getMessage]);
  }
}

void Okhttp3Cache_Entry_writeCertListWithOkioBufferedSink_withJavaUtilList_(Okhttp3Cache_Entry *self, id<OkioBufferedSink> sink, id<JavaUtilList> certificates) {
  @try {
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(sink)) writeDecimalLongWithLong:[((id<JavaUtilList>) nil_chk(certificates)) size]])) writeByteWithInt:0x000a];
    for (jint i = 0, size = [certificates size]; i < size; i++) {
      IOSByteArray *bytes = [((JavaSecurityCertCertificate *) nil_chk([certificates getWithInt:i])) getEncoded];
      NSString *line = [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(bytes))) base64];
      [((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:line])) writeByteWithInt:0x000a];
    }
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    @throw create_JavaIoIOException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cache_Entry)

@implementation Okhttp3Cache_CacheResponseBody

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot
                                                     withNSString:(NSString *)contentType
                                                     withNSString:(NSString *)contentLength {
  Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(self, snapshot, contentType, contentLength);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return contentType_ != nil ? Okhttp3MediaType_parseWithNSString_(contentType_) : nil;
}

- (jlong)contentLength {
  @try {
    return contentLength_ != nil ? JavaLangLong_parseLongWithNSString_(contentLength_) : -1;
  }
  @catch (JavaLangNumberFormatException *e) {
    return -1;
  }
}

- (id<OkioBufferedSource>)source {
  return bodySource_;
}

- (void)dealloc {
  RELEASE_(snapshot_);
  RELEASE_(bodySource_);
  RELEASE_(contentType_);
  RELEASE_(contentLength_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache_Snapshot:withNSString:withNSString:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(source);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "snapshot_", "LOkhttp3InternalCacheDiskLruCache_Snapshot;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bodySource_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentLength_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalCacheDiskLruCache_Snapshot;LNSString;LNSString;", "LOkhttp3Cache;" };
  static const J2ObjcClassInfo _Okhttp3Cache_CacheResponseBody = { "CacheResponseBody", "okhttp3", ptrTable, methods, fields, 7, 0xa, 4, 4, 1, -1, -1, -1, -1 };
  return &_Okhttp3Cache_CacheResponseBody;
}

@end

void Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3Cache_CacheResponseBody *self, Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength) {
  Okhttp3ResponseBody_init(self);
  JreStrongAssign(&self->snapshot_, snapshot);
  JreStrongAssign(&self->contentType_, contentType);
  JreStrongAssign(&self->contentLength_, contentLength);
  id<OkioSource> source = [((Okhttp3InternalCacheDiskLruCache_Snapshot *) nil_chk(snapshot)) getSourceWithInt:Okhttp3Cache_ENTRY_BODY];
  JreStrongAssign(&self->bodySource_, OkioOkio_bufferWithOkioSource_(create_Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(snapshot, source)));
}

Okhttp3Cache_CacheResponseBody *new_Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_CacheResponseBody, initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_, snapshot, contentType, contentLength)
}

Okhttp3Cache_CacheResponseBody *create_Okhttp3Cache_CacheResponseBody_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_(Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot, NSString *contentType, NSString *contentLength) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_CacheResponseBody, initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withNSString_withNSString_, snapshot, contentType, contentLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cache_CacheResponseBody)

@implementation Okhttp3Cache_CacheResponseBody_1

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Snapshot:(Okhttp3InternalCacheDiskLruCache_Snapshot *)capture$0
                                                   withOkioSource:(id<OkioSource>)x0 {
  Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(self, capture$0, x0);
  return self;
}

- (void)close {
  [((Okhttp3InternalCacheDiskLruCache_Snapshot *) nil_chk(val$snapshot_)) close];
  [super close];
}

- (void)dealloc {
  RELEASE_(val$snapshot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache_Snapshot:withOkioSource:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$snapshot_", "LOkhttp3InternalCacheDiskLruCache_Snapshot;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "LJavaIoIOException;", "LOkhttp3Cache_CacheResponseBody;", "initWithOkhttp3InternalCacheDiskLruCache_Snapshot:withNSString:withNSString:" };
  static const J2ObjcClassInfo _Okhttp3Cache_CacheResponseBody_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_Okhttp3Cache_CacheResponseBody_1;
}

@end

void Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3Cache_CacheResponseBody_1 *self, Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0) {
  JreStrongAssign(&self->val$snapshot_, capture$0);
  OkioForwardingSource_initWithOkioSource_(self, x0);
}

Okhttp3Cache_CacheResponseBody_1 *new_Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0) {
  J2OBJC_NEW_IMPL(Okhttp3Cache_CacheResponseBody_1, initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_, capture$0, x0)
}

Okhttp3Cache_CacheResponseBody_1 *create_Okhttp3Cache_CacheResponseBody_1_initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_(Okhttp3InternalCacheDiskLruCache_Snapshot *capture$0, id<OkioSource> x0) {
  J2OBJC_CREATE_IMPL(Okhttp3Cache_CacheResponseBody_1, initWithOkhttp3InternalCacheDiskLruCache_Snapshot_withOkioSource_, capture$0, x0)
}
