//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3RequestBody.h"
#include "java/io/File.h"
#include "java/lang/NullPointerException.h"
#include "java/nio/charset/Charset.h"
#include "okio/BufferedSink.h"
#include "okio/ByteString.h"
#include "okio/Okio.h"
#include "okio/Source.h"

@interface Okhttp3RequestBody_1 : Okhttp3RequestBody {
 @public
  Okhttp3MediaType *val$contentType_;
  OkioByteString *val$content_;
}

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                      withOkioByteString:(OkioByteString *)capture$1;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3RequestBody_1)

__attribute__((unused)) static void Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3RequestBody_1 *self, Okhttp3MediaType *capture$0, OkioByteString *capture$1);

__attribute__((unused)) static Okhttp3RequestBody_1 *new_Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3MediaType *capture$0, OkioByteString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3RequestBody_1 *create_Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3MediaType *capture$0, OkioByteString *capture$1);

@interface Okhttp3RequestBody_2 : Okhttp3RequestBody {
 @public
  Okhttp3MediaType *val$contentType_;
  jint val$byteCount_;
  IOSByteArray *val$content_;
  jint val$offset_;
}

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                                 withInt:(jint)capture$1
                           withByteArray:(IOSByteArray *)capture$2
                                 withInt:(jint)capture$3;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3RequestBody_2)

__attribute__((unused)) static void Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3RequestBody_2 *self, Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3);

__attribute__((unused)) static Okhttp3RequestBody_2 *new_Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3RequestBody_2 *create_Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3);

@interface Okhttp3RequestBody_3 : Okhttp3RequestBody {
 @public
  Okhttp3MediaType *val$contentType_;
  JavaIoFile *val$file_;
}

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                          withJavaIoFile:(JavaIoFile *)capture$1;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3RequestBody_3)

__attribute__((unused)) static void Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3RequestBody_3 *self, Okhttp3MediaType *capture$0, JavaIoFile *capture$1);

__attribute__((unused)) static Okhttp3RequestBody_3 *new_Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3MediaType *capture$0, JavaIoFile *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3RequestBody_3 *create_Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3MediaType *capture$0, JavaIoFile *capture$1);

@implementation Okhttp3RequestBody

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3RequestBody_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3MediaType *)contentType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)contentLength {
  return -1;
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (Okhttp3RequestBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                      withNSString:(NSString *)content {
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withNSString_(contentType, content);
}

+ (Okhttp3RequestBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                withOkioByteString:(OkioByteString *)content {
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withOkioByteString_(contentType, content);
}

+ (Okhttp3RequestBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                     withByteArray:(IOSByteArray *)content {
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_(contentType, content);
}

+ (Okhttp3RequestBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                     withByteArray:(IOSByteArray *)content
                                           withInt:(jint)offset
                                           withInt:(jint)byteCount {
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_withInt_withInt_(contentType, content, offset, byteCount);
}

+ (Okhttp3RequestBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                    withJavaIoFile:(JavaIoFile *)file {
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withJavaIoFile_(contentType, file);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "LOkhttp3RequestBody;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3RequestBody;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3RequestBody;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3RequestBody;", 0x9, 3, 7, -1, -1, -1, -1 },
    { NULL, "LOkhttp3RequestBody;", 0x9, 3, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(writeToWithOkioBufferedSink:);
  methods[4].selector = @selector(createWithOkhttp3MediaType:withNSString:);
  methods[5].selector = @selector(createWithOkhttp3MediaType:withOkioByteString:);
  methods[6].selector = @selector(createWithOkhttp3MediaType:withByteArray:);
  methods[7].selector = @selector(createWithOkhttp3MediaType:withByteArray:withInt:withInt:);
  methods[8].selector = @selector(createWithOkhttp3MediaType:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "writeTo", "LOkioBufferedSink;", "create", "LOkhttp3MediaType;LNSString;", "LOkhttp3MediaType;LOkioByteString;", "LOkhttp3MediaType;[B", "LOkhttp3MediaType;[BII", "LOkhttp3MediaType;LJavaIoFile;" };
  static const J2ObjcClassInfo _Okhttp3RequestBody = { "RequestBody", "okhttp3", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_Okhttp3RequestBody;
}

@end

void Okhttp3RequestBody_init(Okhttp3RequestBody *self) {
  NSObject_init(self);
}

Okhttp3RequestBody *Okhttp3RequestBody_createWithOkhttp3MediaType_withNSString_(Okhttp3MediaType *contentType, NSString *content) {
  Okhttp3RequestBody_initialize();
  JavaNioCharsetCharset *charset = JreLoadStatic(Okhttp3InternalUtil, UTF_8);
  if (contentType != nil) {
    charset = [contentType charset];
    if (charset == nil) {
      charset = JreLoadStatic(Okhttp3InternalUtil, UTF_8);
      contentType = Okhttp3MediaType_parseWithNSString_(JreStrcat("@$", contentType, @"; charset=utf-8"));
    }
  }
  IOSByteArray *bytes = [((NSString *) nil_chk(content)) java_getBytesWithCharset:charset];
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_(contentType, bytes);
}

Okhttp3RequestBody *Okhttp3RequestBody_createWithOkhttp3MediaType_withOkioByteString_(Okhttp3MediaType *contentType, OkioByteString *content) {
  Okhttp3RequestBody_initialize();
  return create_Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(contentType, content);
}

Okhttp3RequestBody *Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_(Okhttp3MediaType *contentType, IOSByteArray *content) {
  Okhttp3RequestBody_initialize();
  return Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_withInt_withInt_(contentType, content, 0, ((IOSByteArray *) nil_chk(content))->size_);
}

Okhttp3RequestBody *Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_withInt_withInt_(Okhttp3MediaType *contentType, IOSByteArray *content, jint offset, jint byteCount) {
  Okhttp3RequestBody_initialize();
  if (content == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"content == null");
  Okhttp3InternalUtil_checkOffsetAndCountWithLong_withLong_withLong_(content->size_, offset, byteCount);
  return create_Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(contentType, byteCount, content, offset);
}

Okhttp3RequestBody *Okhttp3RequestBody_createWithOkhttp3MediaType_withJavaIoFile_(Okhttp3MediaType *contentType, JavaIoFile *file) {
  Okhttp3RequestBody_initialize();
  if (file == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"content == null");
  return create_Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(contentType, file);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3RequestBody)

@implementation Okhttp3RequestBody_1

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                      withOkioByteString:(OkioByteString *)capture$1 {
  Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(self, capture$0, capture$1);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return val$contentType_;
}

- (jlong)contentLength {
  return [((OkioByteString *) nil_chk(val$content_)) size];
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  [((id<OkioBufferedSink>) nil_chk(sink)) writeWithOkioByteString:val$content_];
}

- (void)dealloc {
  RELEASE_(val$contentType_);
  RELEASE_(val$content_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3MediaType:withOkioByteString:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(writeToWithOkioBufferedSink:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$content_", "LOkioByteString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "writeTo", "LOkioBufferedSink;", "LOkhttp3RequestBody;", "createWithOkhttp3MediaType:withOkioByteString:" };
  static const J2ObjcClassInfo _Okhttp3RequestBody_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 4, 2, 3, -1, 4, -1, -1 };
  return &_Okhttp3RequestBody_1;
}

@end

void Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3RequestBody_1 *self, Okhttp3MediaType *capture$0, OkioByteString *capture$1) {
  JreStrongAssign(&self->val$contentType_, capture$0);
  JreStrongAssign(&self->val$content_, capture$1);
  Okhttp3RequestBody_init(self);
}

Okhttp3RequestBody_1 *new_Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3MediaType *capture$0, OkioByteString *capture$1) {
  J2OBJC_NEW_IMPL(Okhttp3RequestBody_1, initWithOkhttp3MediaType_withOkioByteString_, capture$0, capture$1)
}

Okhttp3RequestBody_1 *create_Okhttp3RequestBody_1_initWithOkhttp3MediaType_withOkioByteString_(Okhttp3MediaType *capture$0, OkioByteString *capture$1) {
  J2OBJC_CREATE_IMPL(Okhttp3RequestBody_1, initWithOkhttp3MediaType_withOkioByteString_, capture$0, capture$1)
}

@implementation Okhttp3RequestBody_2

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                                 withInt:(jint)capture$1
                           withByteArray:(IOSByteArray *)capture$2
                                 withInt:(jint)capture$3 {
  Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return val$contentType_;
}

- (jlong)contentLength {
  return val$byteCount_;
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  [((id<OkioBufferedSink>) nil_chk(sink)) writeWithByteArray:val$content_ withInt:val$offset_ withInt:val$byteCount_];
}

- (void)dealloc {
  RELEASE_(val$contentType_);
  RELEASE_(val$content_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3MediaType:withInt:withByteArray:withInt:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(writeToWithOkioBufferedSink:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$byteCount_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$content_", "[B", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$offset_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeTo", "LOkioBufferedSink;", "LJavaIoIOException;", "LOkhttp3RequestBody;", "createWithOkhttp3MediaType:withByteArray:withInt:withInt:" };
  static const J2ObjcClassInfo _Okhttp3RequestBody_2 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 4, 4, 3, -1, 4, -1, -1 };
  return &_Okhttp3RequestBody_2;
}

@end

void Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3RequestBody_2 *self, Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3) {
  JreStrongAssign(&self->val$contentType_, capture$0);
  self->val$byteCount_ = capture$1;
  JreStrongAssign(&self->val$content_, capture$2);
  self->val$offset_ = capture$3;
  Okhttp3RequestBody_init(self);
}

Okhttp3RequestBody_2 *new_Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3) {
  J2OBJC_NEW_IMPL(Okhttp3RequestBody_2, initWithOkhttp3MediaType_withInt_withByteArray_withInt_, capture$0, capture$1, capture$2, capture$3)
}

Okhttp3RequestBody_2 *create_Okhttp3RequestBody_2_initWithOkhttp3MediaType_withInt_withByteArray_withInt_(Okhttp3MediaType *capture$0, jint capture$1, IOSByteArray *capture$2, jint capture$3) {
  J2OBJC_CREATE_IMPL(Okhttp3RequestBody_2, initWithOkhttp3MediaType_withInt_withByteArray_withInt_, capture$0, capture$1, capture$2, capture$3)
}

@implementation Okhttp3RequestBody_3

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                          withJavaIoFile:(JavaIoFile *)capture$1 {
  Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(self, capture$0, capture$1);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return val$contentType_;
}

- (jlong)contentLength {
  return [((JavaIoFile *) nil_chk(val$file_)) length];
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  id<OkioSource> source = nil;
  @try {
    source = OkioOkio_sourceWithJavaIoFile_(val$file_);
    [((id<OkioBufferedSink>) nil_chk(sink)) writeAllWithOkioSource:source];
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(source);
  }
}

- (void)dealloc {
  RELEASE_(val$contentType_);
  RELEASE_(val$file_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3MediaType:withJavaIoFile:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(writeToWithOkioBufferedSink:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$file_", "LJavaIoFile;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeTo", "LOkioBufferedSink;", "LJavaIoIOException;", "LOkhttp3RequestBody;", "createWithOkhttp3MediaType:withJavaIoFile:" };
  static const J2ObjcClassInfo _Okhttp3RequestBody_3 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 4, 2, 3, -1, 4, -1, -1 };
  return &_Okhttp3RequestBody_3;
}

@end

void Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3RequestBody_3 *self, Okhttp3MediaType *capture$0, JavaIoFile *capture$1) {
  JreStrongAssign(&self->val$contentType_, capture$0);
  JreStrongAssign(&self->val$file_, capture$1);
  Okhttp3RequestBody_init(self);
}

Okhttp3RequestBody_3 *new_Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3MediaType *capture$0, JavaIoFile *capture$1) {
  J2OBJC_NEW_IMPL(Okhttp3RequestBody_3, initWithOkhttp3MediaType_withJavaIoFile_, capture$0, capture$1)
}

Okhttp3RequestBody_3 *create_Okhttp3RequestBody_3_initWithOkhttp3MediaType_withJavaIoFile_(Okhttp3MediaType *capture$0, JavaIoFile *capture$1) {
  J2OBJC_CREATE_IMPL(Okhttp3RequestBody_3, initWithOkhttp3MediaType_withJavaIoFile_, capture$0, capture$1)
}
