//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3Authenticator.h"
#include "Okhttp3Cache.h"
#include "Okhttp3Call.h"
#include "Okhttp3ConnectionPool.h"
#include "Okhttp3ConnectionSpec.h"
#include "Okhttp3CookieJar.h"
#include "Okhttp3Dispatcher.h"
#include "Okhttp3Dns.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3Interceptor.h"
#include "Okhttp3InternalCacheInternalCache.h"
#include "Okhttp3InternalConnectionRealConnection.h"
#include "Okhttp3InternalConnectionRouteDatabase.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalInternal.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalTlsOkHostnameVerifier.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3OkHttpClient.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3RealCall.h"
#include "Okhttp3Request.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/net/Proxy.h"
#include "java/net/ProxySelector.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/X509TrustManager.h"

@interface Okhttp3OkHttpClient ()

- (instancetype)initWithOkhttp3OkHttpClient_Builder:(Okhttp3OkHttpClient_Builder *)builder;

@end

inline id<JavaUtilList> Okhttp3OkHttpClient_get_DEFAULT_PROTOCOLS();
static id<JavaUtilList> Okhttp3OkHttpClient_DEFAULT_PROTOCOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3OkHttpClient, DEFAULT_PROTOCOLS, id<JavaUtilList>)

inline id<JavaUtilList> Okhttp3OkHttpClient_get_DEFAULT_CONNECTION_SPECS();
static id<JavaUtilList> Okhttp3OkHttpClient_DEFAULT_CONNECTION_SPECS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3OkHttpClient, DEFAULT_CONNECTION_SPECS, id<JavaUtilList>)

__attribute__((unused)) static void Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient *self, Okhttp3OkHttpClient_Builder *builder);

__attribute__((unused)) static Okhttp3OkHttpClient *new_Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3OkHttpClient *create_Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient_Builder *builder);

@interface Okhttp3OkHttpClient_1 : Okhttp3InternalInternal

- (instancetype)init;

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)line;

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)name
                                withNSString:(NSString *)value;

- (void)setCacheWithOkhttp3OkHttpClient_Builder:(Okhttp3OkHttpClient_Builder *)builder
          withOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)internalCache;

- (jboolean)connectionBecameIdleWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
              withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

- (Okhttp3InternalConnectionRealConnection *)getWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
                                                       withOkhttp3Address:(Okhttp3Address *)address
                            withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation;

- (void)putWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabaseWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool;

- (Okhttp3InternalConnectionStreamAllocation *)callEngineGetStreamAllocationWithOkhttp3Call:(id<Okhttp3Call>)call;

- (void)applyWithOkhttp3ConnectionSpec:(Okhttp3ConnectionSpec *)tlsConfiguration
              withJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                           withBoolean:(jboolean)isFallback;

- (Okhttp3HttpUrl *)getHttpUrlCheckedWithNSString:(NSString *)url;

- (void)setCallWebSocketWithOkhttp3Call:(id<Okhttp3Call>)call;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3OkHttpClient_1)

__attribute__((unused)) static void Okhttp3OkHttpClient_1_init(Okhttp3OkHttpClient_1 *self);

__attribute__((unused)) static Okhttp3OkHttpClient_1 *new_Okhttp3OkHttpClient_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3OkHttpClient_1 *create_Okhttp3OkHttpClient_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3OkHttpClient)

@implementation Okhttp3OkHttpClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3OkHttpClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOkhttp3OkHttpClient_Builder:(Okhttp3OkHttpClient_Builder *)builder {
  Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(self, builder);
  return self;
}

- (jint)connectTimeoutMillis {
  return connectTimeout_;
}

- (jint)readTimeoutMillis {
  return readTimeout_;
}

- (jint)writeTimeoutMillis {
  return writeTimeout_;
}

- (JavaNetProxy *)proxy {
  return proxy_;
}

- (JavaNetProxySelector *)proxySelector {
  return proxySelector_;
}

- (id<Okhttp3CookieJar>)cookieJar {
  return cookieJar_;
}

- (Okhttp3Cache *)cache {
  return cache_;
}

- (id<Okhttp3InternalCacheInternalCache>)internalCache {
  return cache_ != nil ? cache_->internalCache_ : internalCache_;
}

- (id<Okhttp3Dns>)dns {
  return dns_;
}

- (JavaxNetSocketFactory *)socketFactory {
  return socketFactory_;
}

- (JavaxNetSslSSLSocketFactory *)sslSocketFactory {
  return sslSocketFactory_;
}

- (id<JavaxNetSslHostnameVerifier>)hostnameVerifier {
  return hostnameVerifier_;
}

- (id<Okhttp3Authenticator>)authenticator {
  return authenticator_;
}

- (id<Okhttp3Authenticator>)proxyAuthenticator {
  return proxyAuthenticator_;
}

- (Okhttp3ConnectionPool *)connectionPool {
  return connectionPool_;
}

- (jboolean)followSslRedirects {
  return followSslRedirects_;
}

- (jboolean)followRedirects {
  return followRedirects_;
}

- (jboolean)retryOnConnectionFailure {
  return retryOnConnectionFailure_;
}

- (Okhttp3Dispatcher *)dispatcher {
  return dispatcher_;
}

- (id<JavaUtilList>)protocols {
  return protocols_;
}

- (id<JavaUtilList>)connectionSpecs {
  return connectionSpecs_;
}

- (id<JavaUtilList>)interceptors {
  return interceptors_;
}

- (id<JavaUtilList>)networkInterceptors {
  return networkInterceptors_;
}

- (id<Okhttp3Call>)newCallWithOkhttp3Request:(Okhttp3Request *)request {
  return create_Okhttp3RealCall_initWithOkhttp3OkHttpClient_withOkhttp3Request_(self, request);
}

- (Okhttp3OkHttpClient_Builder *)newBuilder {
  return create_Okhttp3OkHttpClient_Builder_initWithOkhttp3OkHttpClient_(self);
}

- (void)dealloc {
  RELEASE_(dispatcher_);
  RELEASE_(proxy_);
  RELEASE_(protocols_);
  RELEASE_(connectionSpecs_);
  RELEASE_(interceptors_);
  RELEASE_(networkInterceptors_);
  RELEASE_(proxySelector_);
  RELEASE_(cookieJar_);
  RELEASE_(cache_);
  RELEASE_(internalCache_);
  RELEASE_(socketFactory_);
  RELEASE_(sslSocketFactory_);
  RELEASE_(hostnameVerifier_);
  RELEASE_(proxyAuthenticator_);
  RELEASE_(authenticator_);
  RELEASE_(connectionPool_);
  RELEASE_(dns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetProxy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetProxySelector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3CookieJar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cache;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheInternalCache;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Dns;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSocketFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocketFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSslHostnameVerifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Authenticator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Authenticator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3ConnectionPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Dispatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOkhttp3Call;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOkhttp3OkHttpClient_Builder:);
  methods[2].selector = @selector(connectTimeoutMillis);
  methods[3].selector = @selector(readTimeoutMillis);
  methods[4].selector = @selector(writeTimeoutMillis);
  methods[5].selector = @selector(proxy);
  methods[6].selector = @selector(proxySelector);
  methods[7].selector = @selector(cookieJar);
  methods[8].selector = @selector(cache);
  methods[9].selector = @selector(internalCache);
  methods[10].selector = @selector(dns);
  methods[11].selector = @selector(socketFactory);
  methods[12].selector = @selector(sslSocketFactory);
  methods[13].selector = @selector(hostnameVerifier);
  methods[14].selector = @selector(authenticator);
  methods[15].selector = @selector(proxyAuthenticator);
  methods[16].selector = @selector(connectionPool);
  methods[17].selector = @selector(followSslRedirects);
  methods[18].selector = @selector(followRedirects);
  methods[19].selector = @selector(retryOnConnectionFailure);
  methods[20].selector = @selector(dispatcher);
  methods[21].selector = @selector(protocols);
  methods[22].selector = @selector(connectionSpecs);
  methods[23].selector = @selector(interceptors);
  methods[24].selector = @selector(networkInterceptors);
  methods[25].selector = @selector(newCallWithOkhttp3Request:);
  methods[26].selector = @selector(newBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_PROTOCOLS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 6, 7, -1 },
    { "DEFAULT_CONNECTION_SPECS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 8, 9, -1 },
    { "dispatcher_", "LOkhttp3Dispatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "proxy_", "LJavaNetProxy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "protocols_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "connectionSpecs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "interceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "networkInterceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "proxySelector_", "LJavaNetProxySelector;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cookieJar_", "LOkhttp3CookieJar;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cache_", "LOkhttp3Cache;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "internalCache_", "LOkhttp3InternalCacheInternalCache;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "socketFactory_", "LJavaxNetSocketFactory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sslSocketFactory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hostnameVerifier_", "LJavaxNetSslHostnameVerifier;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "proxyAuthenticator_", "LOkhttp3Authenticator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "authenticator_", "LOkhttp3Authenticator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "connectionPool_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "dns_", "LOkhttp3Dns;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "followSslRedirects_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "followRedirects_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "retryOnConnectionFailure_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "connectTimeout_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "readTimeout_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writeTimeout_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3OkHttpClient_Builder;", "()Ljava/util/List<Lokhttp3/Protocol;>;", "()Ljava/util/List<Lokhttp3/ConnectionSpec;>;", "()Ljava/util/List<Lokhttp3/Interceptor;>;", "newCall", "LOkhttp3Request;", &Okhttp3OkHttpClient_DEFAULT_PROTOCOLS, "Ljava/util/List<Lokhttp3/Protocol;>;", &Okhttp3OkHttpClient_DEFAULT_CONNECTION_SPECS, "Ljava/util/List<Lokhttp3/ConnectionSpec;>;", "Ljava/util/List<Lokhttp3/Interceptor;>;" };
  static const J2ObjcClassInfo _Okhttp3OkHttpClient = { "OkHttpClient", "okhttp3", ptrTable, methods, fields, 7, 0x1, 27, 25, -1, 0, -1, -1, -1 };
  return &_Okhttp3OkHttpClient;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [Okhttp3OkHttpClient class]) {
    JreStrongAssign(&Okhttp3OkHttpClient_DEFAULT_PROTOCOLS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(Okhttp3Protocol, HTTP_2), JreLoadEnum(Okhttp3Protocol, SPDY_3), JreLoadEnum(Okhttp3Protocol, HTTP_1_1) } count:3 type:Okhttp3Protocol_class_()]));
    JreStrongAssign(&Okhttp3OkHttpClient_DEFAULT_CONNECTION_SPECS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(Okhttp3ConnectionSpec, MODERN_TLS), JreLoadStatic(Okhttp3ConnectionSpec, COMPATIBLE_TLS), JreLoadStatic(Okhttp3ConnectionSpec, CLEARTEXT) } count:3 type:Okhttp3ConnectionSpec_class_()]));
    {
      JreStrongAssignAndConsume(JreLoadStaticRef(Okhttp3InternalInternal, instance), new_Okhttp3OkHttpClient_1_init());
    }
    J2OBJC_SET_INITIALIZED(Okhttp3OkHttpClient)
  }
}

@end

void Okhttp3OkHttpClient_init(Okhttp3OkHttpClient *self) {
  Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(self, create_Okhttp3OkHttpClient_Builder_init());
}

Okhttp3OkHttpClient *new_Okhttp3OkHttpClient_init() {
  J2OBJC_NEW_IMPL(Okhttp3OkHttpClient, init)
}

Okhttp3OkHttpClient *create_Okhttp3OkHttpClient_init() {
  J2OBJC_CREATE_IMPL(Okhttp3OkHttpClient, init)
}

void Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient *self, Okhttp3OkHttpClient_Builder *builder) {
  NSObject_init(self);
  JreStrongAssign(&self->dispatcher_, ((Okhttp3OkHttpClient_Builder *) nil_chk(builder))->dispatcher_);
  JreStrongAssign(&self->proxy_, builder->proxy_);
  JreStrongAssign(&self->protocols_, builder->protocols_);
  JreStrongAssign(&self->connectionSpecs_, builder->connectionSpecs_);
  JreStrongAssign(&self->interceptors_, Okhttp3InternalUtil_immutableListWithJavaUtilList_(builder->interceptors_));
  JreStrongAssign(&self->networkInterceptors_, Okhttp3InternalUtil_immutableListWithJavaUtilList_(builder->networkInterceptors_));
  JreStrongAssign(&self->proxySelector_, builder->proxySelector_);
  JreStrongAssign(&self->cookieJar_, builder->cookieJar_);
  JreStrongAssign(&self->cache_, builder->cache_);
  JreStrongAssign(&self->internalCache_, builder->internalCache_);
  JreStrongAssign(&self->socketFactory_, builder->socketFactory_);
  jboolean isTLS = false;
  for (Okhttp3ConnectionSpec * __strong spec in nil_chk(self->connectionSpecs_)) {
    isTLS = (isTLS || [((Okhttp3ConnectionSpec *) nil_chk(spec)) isTls]);
  }
  if (builder->sslSocketFactory_ != nil || !isTLS) {
    JreStrongAssign(&self->sslSocketFactory_, builder->sslSocketFactory_);
  }
  else {
    JreStrongAssign(&self->sslSocketFactory_, (JavaxNetSslSSLSocketFactory *) cast_chk(JavaxNetSslSSLSocketFactory_getDefault(), [JavaxNetSslSSLSocketFactory class]));
  }
  JreStrongAssign(&self->hostnameVerifier_, builder->hostnameVerifier_);
  JreStrongAssign(&self->proxyAuthenticator_, builder->proxyAuthenticator_);
  JreStrongAssign(&self->authenticator_, builder->authenticator_);
  JreStrongAssign(&self->connectionPool_, builder->connectionPool_);
  JreStrongAssign(&self->dns_, builder->dns_);
  self->followSslRedirects_ = builder->followSslRedirects_;
  self->followRedirects_ = builder->followRedirects_;
  self->retryOnConnectionFailure_ = builder->retryOnConnectionFailure_;
  self->connectTimeout_ = builder->connectTimeout_;
  self->readTimeout_ = builder->readTimeout_;
  self->writeTimeout_ = builder->writeTimeout_;
}

Okhttp3OkHttpClient *new_Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient_Builder *builder) {
  J2OBJC_NEW_IMPL(Okhttp3OkHttpClient, initWithOkhttp3OkHttpClient_Builder_, builder)
}

Okhttp3OkHttpClient *create_Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(Okhttp3OkHttpClient_Builder *builder) {
  J2OBJC_CREATE_IMPL(Okhttp3OkHttpClient, initWithOkhttp3OkHttpClient_Builder_, builder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3OkHttpClient)

@implementation Okhttp3OkHttpClient_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3OkHttpClient_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)line {
  [((Okhttp3Headers_Builder *) nil_chk(builder)) addLenientWithNSString:line];
}

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)name
                                withNSString:(NSString *)value {
  [((Okhttp3Headers_Builder *) nil_chk(builder)) addLenientWithNSString:name withNSString:value];
}

- (void)setCacheWithOkhttp3OkHttpClient_Builder:(Okhttp3OkHttpClient_Builder *)builder
          withOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)internalCache {
  [((Okhttp3OkHttpClient_Builder *) nil_chk(builder)) setInternalCacheWithOkhttp3InternalCacheInternalCache:internalCache];
}

- (jboolean)connectionBecameIdleWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
              withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  return [((Okhttp3ConnectionPool *) nil_chk(pool)) connectionBecameIdleWithOkhttp3InternalConnectionRealConnection:connection];
}

- (Okhttp3InternalConnectionRealConnection *)getWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
                                                       withOkhttp3Address:(Okhttp3Address *)address
                            withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  return [((Okhttp3ConnectionPool *) nil_chk(pool)) getWithOkhttp3Address:address withOkhttp3InternalConnectionStreamAllocation:streamAllocation];
}

- (void)putWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  [((Okhttp3ConnectionPool *) nil_chk(pool)) putWithOkhttp3InternalConnectionRealConnection:connection];
}

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabaseWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool {
  return ((Okhttp3ConnectionPool *) nil_chk(connectionPool))->routeDatabase_;
}

- (Okhttp3InternalConnectionStreamAllocation *)callEngineGetStreamAllocationWithOkhttp3Call:(id<Okhttp3Call>)call {
  return [((Okhttp3RealCall *) nil_chk(((Okhttp3RealCall *) cast_chk(call, [Okhttp3RealCall class])))) streamAllocation];
}

- (void)applyWithOkhttp3ConnectionSpec:(Okhttp3ConnectionSpec *)tlsConfiguration
              withJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                           withBoolean:(jboolean)isFallback {
  [((Okhttp3ConnectionSpec *) nil_chk(tlsConfiguration)) applyWithJavaxNetSslSSLSocket:sslSocket withBoolean:isFallback];
}

- (Okhttp3HttpUrl *)getHttpUrlCheckedWithNSString:(NSString *)url {
  return Okhttp3HttpUrl_getCheckedWithNSString_(url);
}

- (void)setCallWebSocketWithOkhttp3Call:(id<Okhttp3Call>)call {
  [((Okhttp3RealCall *) nil_chk(((Okhttp3RealCall *) cast_chk(call, [Okhttp3RealCall class])))) setForWebSocket];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRouteDatabase;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionStreamAllocation;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addLenientWithOkhttp3Headers_Builder:withNSString:);
  methods[2].selector = @selector(addLenientWithOkhttp3Headers_Builder:withNSString:withNSString:);
  methods[3].selector = @selector(setCacheWithOkhttp3OkHttpClient_Builder:withOkhttp3InternalCacheInternalCache:);
  methods[4].selector = @selector(connectionBecameIdleWithOkhttp3ConnectionPool:withOkhttp3InternalConnectionRealConnection:);
  methods[5].selector = @selector(getWithOkhttp3ConnectionPool:withOkhttp3Address:withOkhttp3InternalConnectionStreamAllocation:);
  methods[6].selector = @selector(putWithOkhttp3ConnectionPool:withOkhttp3InternalConnectionRealConnection:);
  methods[7].selector = @selector(routeDatabaseWithOkhttp3ConnectionPool:);
  methods[8].selector = @selector(callEngineGetStreamAllocationWithOkhttp3Call:);
  methods[9].selector = @selector(applyWithOkhttp3ConnectionSpec:withJavaxNetSslSSLSocket:withBoolean:);
  methods[10].selector = @selector(getHttpUrlCheckedWithNSString:);
  methods[11].selector = @selector(setCallWebSocketWithOkhttp3Call:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addLenient", "LOkhttp3Headers_Builder;LNSString;", "LOkhttp3Headers_Builder;LNSString;LNSString;", "setCache", "LOkhttp3OkHttpClient_Builder;LOkhttp3InternalCacheInternalCache;", "connectionBecameIdle", "LOkhttp3ConnectionPool;LOkhttp3InternalConnectionRealConnection;", "get", "LOkhttp3ConnectionPool;LOkhttp3Address;LOkhttp3InternalConnectionStreamAllocation;", "put", "routeDatabase", "LOkhttp3ConnectionPool;", "callEngineGetStreamAllocation", "LOkhttp3Call;", "apply", "LOkhttp3ConnectionSpec;LJavaxNetSslSSLSocket;Z", "getHttpUrlChecked", "LNSString;", "LJavaNetMalformedURLException;LJavaNetUnknownHostException;", "setCallWebSocket", "LOkhttp3OkHttpClient;" };
  static const J2ObjcClassInfo _Okhttp3OkHttpClient_1 = { "", "okhttp3", ptrTable, methods, NULL, 7, 0x8018, 12, 0, 20, -1, -1, -1, -1 };
  return &_Okhttp3OkHttpClient_1;
}

@end

void Okhttp3OkHttpClient_1_init(Okhttp3OkHttpClient_1 *self) {
  Okhttp3InternalInternal_init(self);
}

Okhttp3OkHttpClient_1 *new_Okhttp3OkHttpClient_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3OkHttpClient_1, init)
}

Okhttp3OkHttpClient_1 *create_Okhttp3OkHttpClient_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3OkHttpClient_1, init)
}

@implementation Okhttp3OkHttpClient_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3OkHttpClient_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)okHttpClient {
  Okhttp3OkHttpClient_Builder_initWithOkhttp3OkHttpClient_(self, okHttpClient);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)connectTimeoutWithLong:(jlong)timeout
                         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"unit == null");
  jlong millis = [unit toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  if (millis == 0 && timeout > 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too small.");
  connectTimeout_ = (jint) millis;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)readTimeoutWithLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"unit == null");
  jlong millis = [unit toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  if (millis == 0 && timeout > 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too small.");
  readTimeout_ = (jint) millis;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)writeTimeoutWithLong:(jlong)timeout
                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"unit == null");
  jlong millis = [unit toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  if (millis == 0 && timeout > 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too small.");
  writeTimeout_ = (jint) millis;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)proxyWithJavaNetProxy:(JavaNetProxy *)proxy {
  JreStrongAssign(&self->proxy_, proxy);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)proxySelectorWithJavaNetProxySelector:(JavaNetProxySelector *)proxySelector {
  JreStrongAssign(&self->proxySelector_, proxySelector);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)cookieJarWithOkhttp3CookieJar:(id<Okhttp3CookieJar>)cookieJar {
  if (cookieJar == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"cookieJar == null");
  JreStrongAssign(&self->cookieJar_, cookieJar);
  return self;
}

- (void)setInternalCacheWithOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)internalCache {
  JreStrongAssign(&self->internalCache_, internalCache);
  JreStrongAssign(&self->cache_, nil);
}

- (Okhttp3OkHttpClient_Builder *)cacheWithOkhttp3Cache:(Okhttp3Cache *)cache {
  JreStrongAssign(&self->cache_, cache);
  JreStrongAssign(&self->internalCache_, nil);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)dnsWithOkhttp3Dns:(id<Okhttp3Dns>)dns {
  if (dns == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dns == null");
  JreStrongAssign(&self->dns_, dns);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)socketFactoryWithJavaxNetSocketFactory:(JavaxNetSocketFactory *)socketFactory {
  if (socketFactory == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"socketFactory == null");
  JreStrongAssign(&self->socketFactory_, socketFactory);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)sslSocketFactoryWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory {
  if (sslSocketFactory == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"sslSocketFactory == null");
  id<JavaxNetSslX509TrustManager> trustManager = [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) trustManagerWithJavaxNetSslSSLSocketFactory:sslSocketFactory];
  if (trustManager == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Unable to extract the trust manager on ", Okhttp3InternalPlatformPlatform_get(), @", sslSocketFactory is ", [sslSocketFactory java_getClass]));
  }
  JreStrongAssign(&self->sslSocketFactory_, sslSocketFactory);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)sslSocketFactoryWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory
                                                 withJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)trustManager {
  if (sslSocketFactory == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"sslSocketFactory == null");
  if (trustManager == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"trustManager == null");
  JreStrongAssign(&self->sslSocketFactory_, sslSocketFactory);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)hostnameVerifierWithJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hostnameVerifier {
  if (hostnameVerifier == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"hostnameVerifier == null");
  JreStrongAssign(&self->hostnameVerifier_, hostnameVerifier);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)authenticatorWithOkhttp3Authenticator:(id<Okhttp3Authenticator>)authenticator {
  if (authenticator == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"authenticator == null");
  JreStrongAssign(&self->authenticator_, authenticator);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)proxyAuthenticatorWithOkhttp3Authenticator:(id<Okhttp3Authenticator>)proxyAuthenticator {
  if (proxyAuthenticator == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"proxyAuthenticator == null");
  JreStrongAssign(&self->proxyAuthenticator_, proxyAuthenticator);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)connectionPoolWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool {
  if (connectionPool == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"connectionPool == null");
  JreStrongAssign(&self->connectionPool_, connectionPool);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)followSslRedirectsWithBoolean:(jboolean)followProtocolRedirects {
  self->followSslRedirects_ = followProtocolRedirects;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)followRedirectsWithBoolean:(jboolean)followRedirects {
  self->followRedirects_ = followRedirects;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)retryOnConnectionFailureWithBoolean:(jboolean)retryOnConnectionFailure {
  self->retryOnConnectionFailure_ = retryOnConnectionFailure;
  return self;
}

- (Okhttp3OkHttpClient_Builder *)dispatcherWithOkhttp3Dispatcher:(Okhttp3Dispatcher *)dispatcher {
  if (dispatcher == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"dispatcher == null");
  JreStrongAssign(&self->dispatcher_, dispatcher);
  return self;
}

- (Okhttp3OkHttpClient_Builder *)protocolsWithJavaUtilList:(id<JavaUtilList>)protocols {
  protocols = Okhttp3InternalUtil_immutableListWithJavaUtilList_(protocols);
  if (![((id<JavaUtilList>) nil_chk(protocols)) containsWithId:JreLoadEnum(Okhttp3Protocol, HTTP_1_1)]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"protocols doesn't contain http/1.1: ", protocols));
  }
  if ([protocols containsWithId:JreLoadEnum(Okhttp3Protocol, HTTP_1_0)]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"protocols must not contain http/1.0: ", protocols));
  }
  if ([protocols containsWithId:nil]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"protocols must not contain null");
  }
  JreStrongAssign(&self->protocols_, Okhttp3InternalUtil_immutableListWithJavaUtilList_(protocols));
  return self;
}

- (Okhttp3OkHttpClient_Builder *)connectionSpecsWithJavaUtilList:(id<JavaUtilList>)connectionSpecs {
  JreStrongAssign(&self->connectionSpecs_, Okhttp3InternalUtil_immutableListWithJavaUtilList_(connectionSpecs));
  return self;
}

- (id<JavaUtilList>)interceptors {
  return interceptors_;
}

- (Okhttp3OkHttpClient_Builder *)addInterceptorWithOkhttp3Interceptor:(id<Okhttp3Interceptor>)interceptor {
  [((id<JavaUtilList>) nil_chk(interceptors_)) addWithId:interceptor];
  return self;
}

- (id<JavaUtilList>)networkInterceptors {
  return networkInterceptors_;
}

- (Okhttp3OkHttpClient_Builder *)addNetworkInterceptorWithOkhttp3Interceptor:(id<Okhttp3Interceptor>)interceptor {
  [((id<JavaUtilList>) nil_chk(networkInterceptors_)) addWithId:interceptor];
  return self;
}

- (Okhttp3OkHttpClient *)build {
  return create_Okhttp3OkHttpClient_initWithOkhttp3OkHttpClient_Builder_(self);
}

- (void)dealloc {
  RELEASE_(dispatcher_);
  RELEASE_(proxy_);
  RELEASE_(protocols_);
  RELEASE_(connectionSpecs_);
  RELEASE_(interceptors_);
  RELEASE_(networkInterceptors_);
  RELEASE_(proxySelector_);
  RELEASE_(cookieJar_);
  RELEASE_(cache_);
  RELEASE_(internalCache_);
  RELEASE_(socketFactory_);
  RELEASE_(sslSocketFactory_);
  RELEASE_(hostnameVerifier_);
  RELEASE_(proxyAuthenticator_);
  RELEASE_(authenticator_);
  RELEASE_(connectionPool_);
  RELEASE_(dns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 26, 25, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 35, 36, -1, 37, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 38, 36, -1, 39, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient_Builder;", 0x1, 43, 42, -1, -1, -1, -1 },
    { NULL, "LOkhttp3OkHttpClient;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOkhttp3OkHttpClient:);
  methods[2].selector = @selector(connectTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(readTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(writeTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(proxyWithJavaNetProxy:);
  methods[6].selector = @selector(proxySelectorWithJavaNetProxySelector:);
  methods[7].selector = @selector(cookieJarWithOkhttp3CookieJar:);
  methods[8].selector = @selector(setInternalCacheWithOkhttp3InternalCacheInternalCache:);
  methods[9].selector = @selector(cacheWithOkhttp3Cache:);
  methods[10].selector = @selector(dnsWithOkhttp3Dns:);
  methods[11].selector = @selector(socketFactoryWithJavaxNetSocketFactory:);
  methods[12].selector = @selector(sslSocketFactoryWithJavaxNetSslSSLSocketFactory:);
  methods[13].selector = @selector(sslSocketFactoryWithJavaxNetSslSSLSocketFactory:withJavaxNetSslX509TrustManager:);
  methods[14].selector = @selector(hostnameVerifierWithJavaxNetSslHostnameVerifier:);
  methods[15].selector = @selector(authenticatorWithOkhttp3Authenticator:);
  methods[16].selector = @selector(proxyAuthenticatorWithOkhttp3Authenticator:);
  methods[17].selector = @selector(connectionPoolWithOkhttp3ConnectionPool:);
  methods[18].selector = @selector(followSslRedirectsWithBoolean:);
  methods[19].selector = @selector(followRedirectsWithBoolean:);
  methods[20].selector = @selector(retryOnConnectionFailureWithBoolean:);
  methods[21].selector = @selector(dispatcherWithOkhttp3Dispatcher:);
  methods[22].selector = @selector(protocolsWithJavaUtilList:);
  methods[23].selector = @selector(connectionSpecsWithJavaUtilList:);
  methods[24].selector = @selector(interceptors);
  methods[25].selector = @selector(addInterceptorWithOkhttp3Interceptor:);
  methods[26].selector = @selector(networkInterceptors);
  methods[27].selector = @selector(addNetworkInterceptorWithOkhttp3Interceptor:);
  methods[28].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dispatcher_", "LOkhttp3Dispatcher;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "proxy_", "LJavaNetProxy;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "protocols_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 44, -1 },
    { "connectionSpecs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 45, -1 },
    { "interceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 46, -1 },
    { "networkInterceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 46, -1 },
    { "proxySelector_", "LJavaNetProxySelector;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cookieJar_", "LOkhttp3CookieJar;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cache_", "LOkhttp3Cache;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "internalCache_", "LOkhttp3InternalCacheInternalCache;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "socketFactory_", "LJavaxNetSocketFactory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sslSocketFactory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hostnameVerifier_", "LJavaxNetSslHostnameVerifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "proxyAuthenticator_", "LOkhttp3Authenticator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "authenticator_", "LOkhttp3Authenticator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "connectionPool_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dns_", "LOkhttp3Dns;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "followSslRedirects_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "followRedirects_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "retryOnConnectionFailure_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "connectTimeout_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readTimeout_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "writeTimeout_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3OkHttpClient;", "connectTimeout", "JLJavaUtilConcurrentTimeUnit;", "readTimeout", "writeTimeout", "proxy", "LJavaNetProxy;", "proxySelector", "LJavaNetProxySelector;", "cookieJar", "LOkhttp3CookieJar;", "setInternalCache", "LOkhttp3InternalCacheInternalCache;", "cache", "LOkhttp3Cache;", "dns", "LOkhttp3Dns;", "socketFactory", "LJavaxNetSocketFactory;", "sslSocketFactory", "LJavaxNetSslSSLSocketFactory;", "LJavaxNetSslSSLSocketFactory;LJavaxNetSslX509TrustManager;", "hostnameVerifier", "LJavaxNetSslHostnameVerifier;", "authenticator", "LOkhttp3Authenticator;", "proxyAuthenticator", "connectionPool", "LOkhttp3ConnectionPool;", "followSslRedirects", "Z", "followRedirects", "retryOnConnectionFailure", "dispatcher", "LOkhttp3Dispatcher;", "protocols", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/Protocol;>;)Lokhttp3/OkHttpClient$Builder;", "connectionSpecs", "(Ljava/util/List<Lokhttp3/ConnectionSpec;>;)Lokhttp3/OkHttpClient$Builder;", "()Ljava/util/List<Lokhttp3/Interceptor;>;", "addInterceptor", "LOkhttp3Interceptor;", "addNetworkInterceptor", "Ljava/util/List<Lokhttp3/Protocol;>;", "Ljava/util/List<Lokhttp3/ConnectionSpec;>;", "Ljava/util/List<Lokhttp3/Interceptor;>;" };
  static const J2ObjcClassInfo _Okhttp3OkHttpClient_Builder = { "Builder", "okhttp3", ptrTable, methods, fields, 7, 0x19, 29, 23, 0, -1, -1, -1, -1 };
  return &_Okhttp3OkHttpClient_Builder;
}

@end

void Okhttp3OkHttpClient_Builder_init(Okhttp3OkHttpClient_Builder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->interceptors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->networkInterceptors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->dispatcher_, new_Okhttp3Dispatcher_init());
  JreStrongAssign(&self->protocols_, JreLoadStatic(Okhttp3OkHttpClient, DEFAULT_PROTOCOLS));
  JreStrongAssign(&self->connectionSpecs_, JreLoadStatic(Okhttp3OkHttpClient, DEFAULT_CONNECTION_SPECS));
  JreStrongAssign(&self->proxySelector_, JavaNetProxySelector_getDefault());
  JreStrongAssign(&self->cookieJar_, JreLoadStatic(Okhttp3CookieJar, NO_COOKIES));
  JreStrongAssign(&self->socketFactory_, JavaxNetSocketFactory_getDefault());
  JreStrongAssign(&self->hostnameVerifier_, JreLoadStatic(Okhttp3InternalTlsOkHostnameVerifier, INSTANCE));
  JreStrongAssign(&self->proxyAuthenticator_, JreLoadStatic(Okhttp3Authenticator, NONE));
  JreStrongAssign(&self->authenticator_, JreLoadStatic(Okhttp3Authenticator, NONE));
  JreStrongAssignAndConsume(&self->connectionPool_, new_Okhttp3ConnectionPool_init());
  JreStrongAssign(&self->dns_, JreLoadStatic(Okhttp3Dns, SYSTEM));
  self->followSslRedirects_ = true;
  self->followRedirects_ = true;
  self->retryOnConnectionFailure_ = true;
  self->connectTimeout_ = 10000;
  self->readTimeout_ = 10000;
  self->writeTimeout_ = 10000;
}

Okhttp3OkHttpClient_Builder *new_Okhttp3OkHttpClient_Builder_init() {
  J2OBJC_NEW_IMPL(Okhttp3OkHttpClient_Builder, init)
}

Okhttp3OkHttpClient_Builder *create_Okhttp3OkHttpClient_Builder_init() {
  J2OBJC_CREATE_IMPL(Okhttp3OkHttpClient_Builder, init)
}

void Okhttp3OkHttpClient_Builder_initWithOkhttp3OkHttpClient_(Okhttp3OkHttpClient_Builder *self, Okhttp3OkHttpClient *okHttpClient) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->interceptors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->networkInterceptors_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->dispatcher_, ((Okhttp3OkHttpClient *) nil_chk(okHttpClient))->dispatcher_);
  JreStrongAssign(&self->proxy_, okHttpClient->proxy_);
  JreStrongAssign(&self->protocols_, okHttpClient->protocols_);
  JreStrongAssign(&self->connectionSpecs_, okHttpClient->connectionSpecs_);
  [self->interceptors_ addAllWithJavaUtilCollection:okHttpClient->interceptors_];
  [self->networkInterceptors_ addAllWithJavaUtilCollection:okHttpClient->networkInterceptors_];
  JreStrongAssign(&self->proxySelector_, okHttpClient->proxySelector_);
  JreStrongAssign(&self->cookieJar_, okHttpClient->cookieJar_);
  JreStrongAssign(&self->internalCache_, okHttpClient->internalCache_);
  JreStrongAssign(&self->cache_, okHttpClient->cache_);
  JreStrongAssign(&self->socketFactory_, okHttpClient->socketFactory_);
  JreStrongAssign(&self->sslSocketFactory_, okHttpClient->sslSocketFactory_);
  JreStrongAssign(&self->hostnameVerifier_, okHttpClient->hostnameVerifier_);
  JreStrongAssign(&self->proxyAuthenticator_, okHttpClient->proxyAuthenticator_);
  JreStrongAssign(&self->authenticator_, okHttpClient->authenticator_);
  JreStrongAssign(&self->connectionPool_, okHttpClient->connectionPool_);
  JreStrongAssign(&self->dns_, okHttpClient->dns_);
  self->followSslRedirects_ = okHttpClient->followSslRedirects_;
  self->followRedirects_ = okHttpClient->followRedirects_;
  self->retryOnConnectionFailure_ = okHttpClient->retryOnConnectionFailure_;
  self->connectTimeout_ = okHttpClient->connectTimeout_;
  self->readTimeout_ = okHttpClient->readTimeout_;
  self->writeTimeout_ = okHttpClient->writeTimeout_;
}

Okhttp3OkHttpClient_Builder *new_Okhttp3OkHttpClient_Builder_initWithOkhttp3OkHttpClient_(Okhttp3OkHttpClient *okHttpClient) {
  J2OBJC_NEW_IMPL(Okhttp3OkHttpClient_Builder, initWithOkhttp3OkHttpClient_, okHttpClient)
}

Okhttp3OkHttpClient_Builder *create_Okhttp3OkHttpClient_Builder_initWithOkhttp3OkHttpClient_(Okhttp3OkHttpClient *okHttpClient) {
  J2OBJC_CREATE_IMPL(Okhttp3OkHttpClient_Builder, initWithOkhttp3OkHttpClient_, okHttpClient)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3OkHttpClient_Builder)
