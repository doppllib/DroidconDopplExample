//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3ConnectionPool.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalConnectionRealConnection.h"
#include "Okhttp3InternalConnectionRouteDatabase.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3Route.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/Reference.h"
#include "java/net/Socket.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/SynchronousQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@interface Okhttp3ConnectionPool () {
 @public
  jint maxIdleConnections_;
  jlong keepAliveDurationNs_;
  id<JavaLangRunnable> cleanupRunnable_;
  id<JavaUtilDeque> connections_;
}

- (jint)pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection
                                                                     withLong:(jlong)now;

@end

J2OBJC_FIELD_SETTER(Okhttp3ConnectionPool, cleanupRunnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(Okhttp3ConnectionPool, connections_, id<JavaUtilDeque>)

inline id<JavaUtilConcurrentExecutor> Okhttp3ConnectionPool_get_executor();
static id<JavaUtilConcurrentExecutor> Okhttp3ConnectionPool_executor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3ConnectionPool, executor, id<JavaUtilConcurrentExecutor>)

__attribute__((unused)) static jint Okhttp3ConnectionPool_pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection_withLong_(Okhttp3ConnectionPool *self, Okhttp3InternalConnectionRealConnection *connection, jlong now);

@interface Okhttp3ConnectionPool_1 : NSObject < JavaLangRunnable > {
 @public
  Okhttp3ConnectionPool *this$0_;
}

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3ConnectionPool_1)

__attribute__((unused)) static void Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool_1 *self, Okhttp3ConnectionPool *outer$);

__attribute__((unused)) static Okhttp3ConnectionPool_1 *new_Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3ConnectionPool_1 *create_Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool *outer$);

J2OBJC_INITIALIZED_DEFN(Okhttp3ConnectionPool)

@implementation Okhttp3ConnectionPool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3ConnectionPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)maxIdleConnections
                   withLong:(jlong)keepAliveDuration
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(self, maxIdleConnections, keepAliveDuration, timeUnit);
  return self;
}

- (jint)idleConnectionCount {
  @synchronized(self) {
    jint total = 0;
    for (Okhttp3InternalConnectionRealConnection * __strong connection in nil_chk(connections_)) {
      if ([((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) isEmpty]) total++;
    }
    return total;
  }
}

- (jint)connectionCount {
  @synchronized(self) {
    return [((id<JavaUtilDeque>) nil_chk(connections_)) size];
  }
}

- (Okhttp3InternalConnectionRealConnection *)getWithOkhttp3Address:(Okhttp3Address *)address
                     withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  JreAssert((JavaLangThread_holdsLockWithId_(self)), @"okhttp3/ConnectionPool.java:119 condition failed: assert (Thread.holdsLock(this));");
  for (Okhttp3InternalConnectionRealConnection * __strong connection in nil_chk(connections_)) {
    if ([((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) size] < connection->allocationLimit_ && [((Okhttp3Address *) nil_chk(address)) isEqual:((Okhttp3Route *) nil_chk([connection route]))->address_] && !connection->noNewStreams_) {
      [((Okhttp3InternalConnectionStreamAllocation *) nil_chk(streamAllocation)) acquireWithOkhttp3InternalConnectionRealConnection:connection];
      return connection;
    }
  }
  return nil;
}

- (void)putWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  JreAssert((JavaLangThread_holdsLockWithId_(self)), @"okhttp3/ConnectionPool.java:132 condition failed: assert (Thread.holdsLock(this));");
  if (!cleanupRunning_) {
    cleanupRunning_ = true;
    [((id<JavaUtilConcurrentExecutor>) nil_chk(Okhttp3ConnectionPool_executor)) executeWithJavaLangRunnable:cleanupRunnable_];
  }
  [((id<JavaUtilDeque>) nil_chk(connections_)) addWithId:connection];
}

- (jboolean)connectionBecameIdleWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  JreAssert((JavaLangThread_holdsLockWithId_(self)), @"okhttp3/ConnectionPool.java:145 condition failed: assert (Thread.holdsLock(this));");
  if (((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->noNewStreams_ || maxIdleConnections_ == 0) {
    [((id<JavaUtilDeque>) nil_chk(connections_)) removeWithId:connection];
    return true;
  }
  else {
    [self java_notifyAll];
    return false;
  }
}

- (void)evictAll {
  id<JavaUtilList> evictedConnections = create_JavaUtilArrayList_init();
  @synchronized(self) {
    for (id<JavaUtilIterator> i = [((id<JavaUtilDeque>) nil_chk(connections_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      Okhttp3InternalConnectionRealConnection *connection = [i next];
      if ([((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) isEmpty]) {
        connection->noNewStreams_ = true;
        [evictedConnections addWithId:connection];
        [i remove];
      }
    }
  }
  for (Okhttp3InternalConnectionRealConnection * __strong connection in evictedConnections) {
    Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_([((Okhttp3InternalConnectionRealConnection *) nil_chk(connection)) socket]);
  }
}

- (jlong)cleanupWithLong:(jlong)now {
  jint inUseConnectionCount = 0;
  jint idleConnectionCount = 0;
  Okhttp3InternalConnectionRealConnection *longestIdleConnection = nil;
  jlong longestIdleDurationNs = JavaLangLong_MIN_VALUE;
  @synchronized(self) {
    for (id<JavaUtilIterator> i = [((id<JavaUtilDeque>) nil_chk(connections_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      Okhttp3InternalConnectionRealConnection *connection = [i next];
      if (Okhttp3ConnectionPool_pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection_withLong_(self, connection, now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      jlong idleDurationNs = now - ((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->idleAtNanos_;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs = idleDurationNs;
        longestIdleConnection = JreRetainedLocalValue(connection);
      }
    }
    if (longestIdleDurationNs >= self->keepAliveDurationNs_ || idleConnectionCount > self->maxIdleConnections_) {
      [connections_ removeWithId:longestIdleConnection];
    }
    else if (idleConnectionCount > 0) {
      return keepAliveDurationNs_ - longestIdleDurationNs;
    }
    else if (inUseConnectionCount > 0) {
      return keepAliveDurationNs_;
    }
    else {
      cleanupRunning_ = false;
      return -1;
    }
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_([((Okhttp3InternalConnectionRealConnection *) nil_chk(longestIdleConnection)) socket]);
  return 0;
}

- (jint)pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection
                                                                     withLong:(jlong)now {
  return Okhttp3ConnectionPool_pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection_withLong_(self, connection, now);
}

- (void)dealloc {
  RELEASE_(cleanupRunnable_);
  RELEASE_(connections_);
  RELEASE_(routeDatabase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(idleConnectionCount);
  methods[3].selector = @selector(connectionCount);
  methods[4].selector = @selector(getWithOkhttp3Address:withOkhttp3InternalConnectionStreamAllocation:);
  methods[5].selector = @selector(putWithOkhttp3InternalConnectionRealConnection:);
  methods[6].selector = @selector(connectionBecameIdleWithOkhttp3InternalConnectionRealConnection:);
  methods[7].selector = @selector(evictAll);
  methods[8].selector = @selector(cleanupWithLong:);
  methods[9].selector = @selector(pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "maxIdleConnections_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepAliveDurationNs_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cleanupRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "connections_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "routeDatabase_", "LOkhttp3InternalConnectionRouteDatabase;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cleanupRunning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;", "get", "LOkhttp3Address;LOkhttp3InternalConnectionStreamAllocation;", "put", "LOkhttp3InternalConnectionRealConnection;", "connectionBecameIdle", "cleanup", "J", "pruneAndGetAllocationCount", "LOkhttp3InternalConnectionRealConnection;J", &Okhttp3ConnectionPool_executor, "Ljava/util/Deque<Lokhttp3/internal/connection/RealConnection;>;" };
  static const J2ObjcClassInfo _Okhttp3ConnectionPool = { "ConnectionPool", "okhttp3", ptrTable, methods, fields, 7, 0x11, 10, 7, -1, -1, -1, -1, -1 };
  return &_Okhttp3ConnectionPool;
}

+ (void)initialize {
  if (self == [Okhttp3ConnectionPool class]) {
    JreStrongAssignAndConsume(&Okhttp3ConnectionPool_executor, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, JavaLangInteger_MAX_VALUE, 60LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), create_JavaUtilConcurrentSynchronousQueue_init(), Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp ConnectionPool", true)));
    J2OBJC_SET_INITIALIZED(Okhttp3ConnectionPool)
  }
}

@end

void Okhttp3ConnectionPool_init(Okhttp3ConnectionPool *self) {
  Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(self, 5, 5, JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES));
}

Okhttp3ConnectionPool *new_Okhttp3ConnectionPool_init() {
  J2OBJC_NEW_IMPL(Okhttp3ConnectionPool, init)
}

Okhttp3ConnectionPool *create_Okhttp3ConnectionPool_init() {
  J2OBJC_CREATE_IMPL(Okhttp3ConnectionPool, init)
}

void Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(Okhttp3ConnectionPool *self, jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->cleanupRunnable_, new_Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(self));
  JreStrongAssignAndConsume(&self->connections_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->routeDatabase_, new_Okhttp3InternalConnectionRouteDatabase_init());
  self->maxIdleConnections_ = maxIdleConnections;
  self->keepAliveDurationNs_ = [((JavaUtilConcurrentTimeUnit *) nil_chk(timeUnit)) toNanosWithLong:keepAliveDuration];
  if (keepAliveDuration <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"keepAliveDuration <= 0: ", keepAliveDuration));
  }
}

Okhttp3ConnectionPool *new_Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_NEW_IMPL(Okhttp3ConnectionPool, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_, maxIdleConnections, keepAliveDuration, timeUnit)
}

Okhttp3ConnectionPool *create_Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_CREATE_IMPL(Okhttp3ConnectionPool, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_, maxIdleConnections, keepAliveDuration, timeUnit)
}

jint Okhttp3ConnectionPool_pruneAndGetAllocationCountWithOkhttp3InternalConnectionRealConnection_withLong_(Okhttp3ConnectionPool *self, Okhttp3InternalConnectionRealConnection *connection, jlong now) {
  id<JavaUtilList> references = ((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(references)) size]; ) {
    JavaLangRefReference *reference = [references getWithInt:i];
    if ([((JavaLangRefReference *) nil_chk(reference)) get] != nil) {
      i++;
      continue;
    }
    [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_WARN withNSString:JreStrcat("$@$", @"A connection to ", [((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk([connection route])) address])) url], @" was leaked. Did you forget to close a response body?") withJavaLangThrowable:nil];
    [references removeWithInt:i];
    connection->noNewStreams_ = true;
    if ([references isEmpty]) {
      connection->idleAtNanos_ = now - self->keepAliveDurationNs_;
      return 0;
    }
  }
  return [references size];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3ConnectionPool)

@implementation Okhttp3ConnectionPool_1

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)outer$ {
  Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(self, outer$);
  return self;
}

- (void)run {
  while (true) {
    jlong waitNanos = [this$0_ cleanupWithLong:JavaLangSystem_nanoTime()];
    if (waitNanos == -1) return;
    if (waitNanos > 0) {
      jlong waitMillis = waitNanos / 1000000LL;
      waitNanos -= (waitMillis * 1000000LL);
      @synchronized(this$0_) {
        @try {
          [this$0_ java_waitWithLong:waitMillis withInt:(jint) waitNanos];
        }
        @catch (JavaLangInterruptedException *ignored) {
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3ConnectionPool:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ConnectionPool;" };
  static const J2ObjcClassInfo _Okhttp3ConnectionPool_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, -1, -1 };
  return &_Okhttp3ConnectionPool_1;
}

@end

void Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool_1 *self, Okhttp3ConnectionPool *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3ConnectionPool_1 *new_Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3ConnectionPool_1, initWithOkhttp3ConnectionPool_, outer$)
}

Okhttp3ConnectionPool_1 *create_Okhttp3ConnectionPool_1_initWithOkhttp3ConnectionPool_(Okhttp3ConnectionPool *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3ConnectionPool_1, initWithOkhttp3ConnectionPool_, outer$)
}
