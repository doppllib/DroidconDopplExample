//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3Connection.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3Interceptor.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalHttpHttpStream.h"
#include "Okhttp3InternalHttpRealInterceptorChain.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3Route.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@interface Okhttp3InternalHttpRealInterceptorChain () {
 @public
  id<JavaUtilList> interceptors_;
  Okhttp3InternalConnectionStreamAllocation *streamAllocation_;
  id<Okhttp3InternalHttpHttpStream> httpStream_;
  id<Okhttp3Connection> connection_;
  jint index_;
  Okhttp3Request *request_;
  jint calls_;
}

- (jboolean)sameConnectionWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttpRealInterceptorChain, interceptors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpRealInterceptorChain, streamAllocation_, Okhttp3InternalConnectionStreamAllocation *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpRealInterceptorChain, httpStream_, id<Okhttp3InternalHttpHttpStream>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpRealInterceptorChain, connection_, id<Okhttp3Connection>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpRealInterceptorChain, request_, Okhttp3Request *)

__attribute__((unused)) static jboolean Okhttp3InternalHttpRealInterceptorChain_sameConnectionWithOkhttp3HttpUrl_(Okhttp3InternalHttpRealInterceptorChain *self, Okhttp3HttpUrl *url);

@implementation Okhttp3InternalHttpRealInterceptorChain

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)interceptors
withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation
   withOkhttp3InternalHttpHttpStream:(id<Okhttp3InternalHttpHttpStream>)httpStream
               withOkhttp3Connection:(id<Okhttp3Connection>)connection
                             withInt:(jint)index
                  withOkhttp3Request:(Okhttp3Request *)request {
  Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(self, interceptors, streamAllocation, httpStream, connection, index, request);
  return self;
}

- (id<Okhttp3Connection>)connection {
  return connection_;
}

- (Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  return streamAllocation_;
}

- (id<Okhttp3InternalHttpHttpStream>)httpStream {
  return httpStream_;
}

- (Okhttp3Request *)request {
  return request_;
}

- (Okhttp3Response *)proceedWithOkhttp3Request:(Okhttp3Request *)request {
  return [self proceedWithOkhttp3Request:request withOkhttp3InternalConnectionStreamAllocation:streamAllocation_ withOkhttp3InternalHttpHttpStream:httpStream_ withOkhttp3Connection:connection_];
}

- (Okhttp3Response *)proceedWithOkhttp3Request:(Okhttp3Request *)request
 withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation
             withOkhttp3InternalHttpHttpStream:(id<Okhttp3InternalHttpHttpStream>)httpStream
                         withOkhttp3Connection:(id<Okhttp3Connection>)connection {
  if (index_ >= [((id<JavaUtilList>) nil_chk(interceptors_)) size]) @throw create_JavaLangAssertionError_init();
  calls_++;
  if (self->httpStream_ != nil && !Okhttp3InternalHttpRealInterceptorChain_sameConnectionWithOkhttp3HttpUrl_(self, [((Okhttp3Request *) nil_chk(request)) url])) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", [interceptors_ getWithInt:index_ - 1], @" must retain the same host and port"));
  }
  if (self->httpStream_ != nil && calls_ > 1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", [interceptors_ getWithInt:index_ - 1], @" must call proceed() exactly once"));
  }
  Okhttp3InternalHttpRealInterceptorChain *next = create_Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(interceptors_, streamAllocation, httpStream, connection, index_ + 1, request);
  id<Okhttp3Interceptor> interceptor = [interceptors_ getWithInt:index_];
  Okhttp3Response *response = [((id<Okhttp3Interceptor>) nil_chk(interceptor)) interceptWithOkhttp3Interceptor_Chain:next];
  if (httpStream != nil && index_ + 1 < [interceptors_ size] && next->calls_ != 1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", interceptor, @" must call proceed() exactly once"));
  }
  if (response == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$@$", @"interceptor ", interceptor, @" returned null"));
  }
  return response;
}

- (jboolean)sameConnectionWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  return Okhttp3InternalHttpRealInterceptorChain_sameConnectionWithOkhttp3HttpUrl_(self, url);
}

- (void)dealloc {
  RELEASE_(interceptors_);
  RELEASE_(streamAllocation_);
  RELEASE_(httpStream_);
  RELEASE_(connection_);
  RELEASE_(request_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOkhttp3Connection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionStreamAllocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withOkhttp3InternalConnectionStreamAllocation:withOkhttp3InternalHttpHttpStream:withOkhttp3Connection:withInt:withOkhttp3Request:);
  methods[1].selector = @selector(connection);
  methods[2].selector = @selector(streamAllocation);
  methods[3].selector = @selector(httpStream);
  methods[4].selector = @selector(request);
  methods[5].selector = @selector(proceedWithOkhttp3Request:);
  methods[6].selector = @selector(proceedWithOkhttp3Request:withOkhttp3InternalConnectionStreamAllocation:withOkhttp3InternalHttpHttpStream:withOkhttp3Connection:);
  methods[7].selector = @selector(sameConnectionWithOkhttp3HttpUrl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "interceptors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "streamAllocation_", "LOkhttp3InternalConnectionStreamAllocation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "httpStream_", "LOkhttp3InternalHttpHttpStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "connection_", "LOkhttp3Connection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "request_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "calls_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LOkhttp3InternalConnectionStreamAllocation;LOkhttp3InternalHttpHttpStream;LOkhttp3Connection;ILOkhttp3Request;", "(Ljava/util/List<Lokhttp3/Interceptor;>;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpStream;Lokhttp3/Connection;ILokhttp3/Request;)V", "proceed", "LOkhttp3Request;", "LJavaIoIOException;", "LOkhttp3Request;LOkhttp3InternalConnectionStreamAllocation;LOkhttp3InternalHttpHttpStream;LOkhttp3Connection;", "sameConnection", "LOkhttp3HttpUrl;", "Ljava/util/List<Lokhttp3/Interceptor;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpRealInterceptorChain = { "RealInterceptorChain", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x11, 8, 7, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttpRealInterceptorChain;
}

@end

void Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(Okhttp3InternalHttpRealInterceptorChain *self, id<JavaUtilList> interceptors, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<Okhttp3InternalHttpHttpStream> httpStream, id<Okhttp3Connection> connection, jint index, Okhttp3Request *request) {
  NSObject_init(self);
  JreStrongAssign(&self->interceptors_, interceptors);
  JreStrongAssign(&self->connection_, connection);
  JreStrongAssign(&self->streamAllocation_, streamAllocation);
  JreStrongAssign(&self->httpStream_, httpStream);
  self->index_ = index;
  JreStrongAssign(&self->request_, request);
}

Okhttp3InternalHttpRealInterceptorChain *new_Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(id<JavaUtilList> interceptors, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<Okhttp3InternalHttpHttpStream> httpStream, id<Okhttp3Connection> connection, jint index, Okhttp3Request *request) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpRealInterceptorChain, initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_, interceptors, streamAllocation, httpStream, connection, index, request)
}

Okhttp3InternalHttpRealInterceptorChain *create_Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(id<JavaUtilList> interceptors, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<Okhttp3InternalHttpHttpStream> httpStream, id<Okhttp3Connection> connection, jint index, Okhttp3Request *request) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpRealInterceptorChain, initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_, interceptors, streamAllocation, httpStream, connection, index, request)
}

jboolean Okhttp3InternalHttpRealInterceptorChain_sameConnectionWithOkhttp3HttpUrl_(Okhttp3InternalHttpRealInterceptorChain *self, Okhttp3HttpUrl *url) {
  return [((NSString *) nil_chk([((Okhttp3HttpUrl *) nil_chk(url)) host])) isEqual:[((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk([((id<Okhttp3Connection>) nil_chk(self->connection_)) route])) address])) url])) host]] && [url port] == [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk([self->connection_ route])) address])) url])) port];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpRealInterceptorChain)
