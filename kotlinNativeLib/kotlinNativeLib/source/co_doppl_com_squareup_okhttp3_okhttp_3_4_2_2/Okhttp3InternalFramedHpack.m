//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedHeader.h"
#include "Okhttp3InternalFramedHpack.h"
#include "Okhttp3InternalFramedHuffman.h"
#include "Okhttp3InternalUtil.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Okio.h"
#include "okio/Source.h"

@interface Okhttp3InternalFramedHpack ()

- (instancetype)init;

+ (id<JavaUtilMap>)nameToFirstIndex;

+ (OkioByteString *)checkLowercaseWithOkioByteString:(OkioByteString *)name;

@end

inline jint Okhttp3InternalFramedHpack_get_PREFIX_4_BITS();
#define Okhttp3InternalFramedHpack_PREFIX_4_BITS 15
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack, PREFIX_4_BITS, jint)

inline jint Okhttp3InternalFramedHpack_get_PREFIX_5_BITS();
#define Okhttp3InternalFramedHpack_PREFIX_5_BITS 31
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack, PREFIX_5_BITS, jint)

inline jint Okhttp3InternalFramedHpack_get_PREFIX_6_BITS();
#define Okhttp3InternalFramedHpack_PREFIX_6_BITS 63
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack, PREFIX_6_BITS, jint)

inline jint Okhttp3InternalFramedHpack_get_PREFIX_7_BITS();
#define Okhttp3InternalFramedHpack_PREFIX_7_BITS 127
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack, PREFIX_7_BITS, jint)

inline IOSObjectArray *Okhttp3InternalFramedHpack_get_STATIC_HEADER_TABLE();
static IOSObjectArray *Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE, IOSObjectArray *)

inline id<JavaUtilMap> Okhttp3InternalFramedHpack_get_NAME_TO_FIRST_INDEX();
static id<JavaUtilMap> Okhttp3InternalFramedHpack_NAME_TO_FIRST_INDEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHpack, NAME_TO_FIRST_INDEX, id<JavaUtilMap>)

__attribute__((unused)) static void Okhttp3InternalFramedHpack_init(Okhttp3InternalFramedHpack *self);

__attribute__((unused)) static Okhttp3InternalFramedHpack *new_Okhttp3InternalFramedHpack_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalFramedHpack *create_Okhttp3InternalFramedHpack_init();

__attribute__((unused)) static id<JavaUtilMap> Okhttp3InternalFramedHpack_nameToFirstIndex();

__attribute__((unused)) static OkioByteString *Okhttp3InternalFramedHpack_checkLowercaseWithOkioByteString_(OkioByteString *name);

@interface Okhttp3InternalFramedHpack_Reader () {
 @public
  id<JavaUtilList> headerList_;
  id<OkioBufferedSource> source_;
  jint headerTableSizeSetting_;
  jint maxDynamicTableByteCount_;
}

- (void)adjustDynamicTableByteCount;

- (void)clearDynamicTable;

- (jint)evictToRecoverBytesWithInt:(jint)bytesToRecover;

- (void)readIndexedHeaderWithInt:(jint)index;

- (jint)dynamicTableIndexWithInt:(jint)index;

- (void)readLiteralHeaderWithoutIndexingIndexedNameWithInt:(jint)index;

- (void)readLiteralHeaderWithoutIndexingNewName;

- (void)readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt:(jint)nameIndex;

- (void)readLiteralHeaderWithIncrementalIndexingNewName;

- (OkioByteString *)getNameWithInt:(jint)index;

- (jboolean)isStaticHeaderWithInt:(jint)index;

- (void)insertIntoDynamicTableWithInt:(jint)index
      withOkhttp3InternalFramedHeader:(Okhttp3InternalFramedHeader *)entry_;

- (jint)readByte;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHpack_Reader, headerList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHpack_Reader, source_, id<OkioBufferedSource>)

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_adjustDynamicTableByteCount(Okhttp3InternalFramedHpack_Reader *self);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_clearDynamicTable(Okhttp3InternalFramedHpack_Reader *self);

__attribute__((unused)) static jint Okhttp3InternalFramedHpack_Reader_evictToRecoverBytesWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint bytesToRecover);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_readIndexedHeaderWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index);

__attribute__((unused)) static jint Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingIndexedNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingNewName(Okhttp3InternalFramedHpack_Reader *self);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint nameIndex);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingNewName(Okhttp3InternalFramedHpack_Reader *self);

__attribute__((unused)) static OkioByteString *Okhttp3InternalFramedHpack_Reader_getNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index);

__attribute__((unused)) static jboolean Okhttp3InternalFramedHpack_Reader_isStaticHeaderWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Reader_insertIntoDynamicTableWithInt_withOkhttp3InternalFramedHeader_(Okhttp3InternalFramedHpack_Reader *self, jint index, Okhttp3InternalFramedHeader *entry_);

__attribute__((unused)) static jint Okhttp3InternalFramedHpack_Reader_readByte(Okhttp3InternalFramedHpack_Reader *self);

@interface Okhttp3InternalFramedHpack_Writer () {
 @public
  OkioBuffer *out_;
  jint smallestHeaderTableSizeSetting_;
  jboolean emitDynamicTableSizeUpdate_;
}

- (void)clearDynamicTable;

- (jint)evictToRecoverBytesWithInt:(jint)bytesToRecover;

- (void)insertIntoDynamicTableWithOkhttp3InternalFramedHeader:(Okhttp3InternalFramedHeader *)entry_;

- (void)adjustDynamicTableByteCount;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHpack_Writer, out_, OkioBuffer *)

inline jint Okhttp3InternalFramedHpack_Writer_get_SETTINGS_HEADER_TABLE_SIZE();
#define Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack_Writer, SETTINGS_HEADER_TABLE_SIZE, jint)

inline jint Okhttp3InternalFramedHpack_Writer_get_SETTINGS_HEADER_TABLE_SIZE_LIMIT();
#define Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE_LIMIT 16384
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalFramedHpack_Writer, SETTINGS_HEADER_TABLE_SIZE_LIMIT, jint)

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Writer_clearDynamicTable(Okhttp3InternalFramedHpack_Writer *self);

__attribute__((unused)) static jint Okhttp3InternalFramedHpack_Writer_evictToRecoverBytesWithInt_(Okhttp3InternalFramedHpack_Writer *self, jint bytesToRecover);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Writer_insertIntoDynamicTableWithOkhttp3InternalFramedHeader_(Okhttp3InternalFramedHpack_Writer *self, Okhttp3InternalFramedHeader *entry_);

__attribute__((unused)) static void Okhttp3InternalFramedHpack_Writer_adjustDynamicTableByteCount(Okhttp3InternalFramedHpack_Writer *self);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedHpack)

@implementation Okhttp3InternalFramedHpack

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedHpack_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilMap>)nameToFirstIndex {
  return Okhttp3InternalFramedHpack_nameToFirstIndex();
}

+ (OkioByteString *)checkLowercaseWithOkioByteString:(OkioByteString *)name {
  return Okhttp3InternalFramedHpack_checkLowercaseWithOkioByteString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 0, -1, -1 },
    { NULL, "LOkioByteString;", 0xa, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nameToFirstIndex);
  methods[2].selector = @selector(checkLowercaseWithOkioByteString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_4_BITS", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_PREFIX_4_BITS, 0x1a, -1, -1, -1, -1 },
    { "PREFIX_5_BITS", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_PREFIX_5_BITS, 0x1a, -1, -1, -1, -1 },
    { "PREFIX_6_BITS", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_PREFIX_6_BITS, 0x1a, -1, -1, -1, -1 },
    { "PREFIX_7_BITS", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_PREFIX_7_BITS, 0x1a, -1, -1, -1, -1 },
    { "STATIC_HEADER_TABLE", "[LOkhttp3InternalFramedHeader;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "NAME_TO_FIRST_INDEX", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 5, 6, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Lokio/ByteString;Ljava/lang/Integer;>;", "checkLowercase", "LOkioByteString;", "LJavaIoIOException;", &Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE, &Okhttp3InternalFramedHpack_NAME_TO_FIRST_INDEX, "Ljava/util/Map<Lokio/ByteString;Ljava/lang/Integer;>;", "LOkhttp3InternalFramedHpack_Reader;LOkhttp3InternalFramedHpack_Writer;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHpack = { "Hpack", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x10, 3, 6, -1, 7, -1, -1, -1 };
  return &_Okhttp3InternalFramedHpack;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedHpack class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE, [IOSObjectArray newArrayWithObjects:(id[]){ create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_AUTHORITY), @""), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), @"GET"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), @"POST"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), @"/"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), @"/index.html"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), @"http"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), @"https"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"200"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"204"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"206"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"304"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"400"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"404"), create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS), @"500"), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"accept-charset", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"accept-encoding", @"gzip, deflate"), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"accept-language", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"accept-ranges", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"accept", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"access-control-allow-origin", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"age", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"allow", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"authorization", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"cache-control", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-disposition", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-encoding", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-language", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-length", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-location", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-range", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"content-type", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"cookie", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"date", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"etag", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"expect", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"expires", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"from", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"host", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"if-match", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"if-modified-since", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"if-none-match", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"if-range", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"if-unmodified-since", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"last-modified", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"link", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"location", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"max-forwards", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"proxy-authenticate", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"proxy-authorization", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"range", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"referer", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"refresh", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"retry-after", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"server", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"set-cookie", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"strict-transport-security", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"transfer-encoding", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"user-agent", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"vary", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"via", @""), create_Okhttp3InternalFramedHeader_initWithNSString_withNSString_(@"www-authenticate", @"") } count:61 type:Okhttp3InternalFramedHeader_class_()]);
    JreStrongAssign(&Okhttp3InternalFramedHpack_NAME_TO_FIRST_INDEX, Okhttp3InternalFramedHpack_nameToFirstIndex());
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedHpack)
  }
}

@end

void Okhttp3InternalFramedHpack_init(Okhttp3InternalFramedHpack *self) {
  NSObject_init(self);
}

Okhttp3InternalFramedHpack *new_Okhttp3InternalFramedHpack_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHpack, init)
}

Okhttp3InternalFramedHpack *create_Okhttp3InternalFramedHpack_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHpack, init)
}

id<JavaUtilMap> Okhttp3InternalFramedHpack_nameToFirstIndex() {
  Okhttp3InternalFramedHpack_initialize();
  id<JavaUtilMap> result = create_JavaUtilLinkedHashMap_initWithInt_(((IOSObjectArray *) nil_chk(Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE))->size_);
  for (jint i = 0; i < Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE->size_; i++) {
    if (![result containsKeyWithId:((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE, i)))->name_]) {
      [result putWithId:((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(Okhttp3InternalFramedHpack_STATIC_HEADER_TABLE, i)))->name_ withId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(result);
}

OkioByteString *Okhttp3InternalFramedHpack_checkLowercaseWithOkioByteString_(OkioByteString *name) {
  Okhttp3InternalFramedHpack_initialize();
  for (jint i = 0, length = [((OkioByteString *) nil_chk(name)) size]; i < length; i++) {
    jbyte c = [name getByteWithInt:i];
    if (c >= 'A' && c <= 'Z') {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"PROTOCOL_ERROR response malformed: mixed case name: ", [name utf8]));
    }
  }
  return name;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHpack)

@implementation Okhttp3InternalFramedHpack_Reader

- (instancetype)initWithInt:(jint)headerTableSizeSetting
             withOkioSource:(id<OkioSource>)source {
  Okhttp3InternalFramedHpack_Reader_initWithInt_withOkioSource_(self, headerTableSizeSetting, source);
  return self;
}

- (instancetype)initWithInt:(jint)headerTableSizeSetting
                    withInt:(jint)maxDynamicTableByteCount
             withOkioSource:(id<OkioSource>)source {
  Okhttp3InternalFramedHpack_Reader_initWithInt_withInt_withOkioSource_(self, headerTableSizeSetting, maxDynamicTableByteCount, source);
  return self;
}

- (jint)maxDynamicTableByteCount {
  return maxDynamicTableByteCount_;
}

- (void)adjustDynamicTableByteCount {
  Okhttp3InternalFramedHpack_Reader_adjustDynamicTableByteCount(self);
}

- (void)clearDynamicTable {
  Okhttp3InternalFramedHpack_Reader_clearDynamicTable(self);
}

- (jint)evictToRecoverBytesWithInt:(jint)bytesToRecover {
  return Okhttp3InternalFramedHpack_Reader_evictToRecoverBytesWithInt_(self, bytesToRecover);
}

- (void)readHeaders {
  while (![((id<OkioBufferedSource>) nil_chk(source_)) exhausted]) {
    jint b = [source_ readByte] & (jint) 0xff;
    if (b == (jint) 0x80) {
      @throw create_JavaIoIOException_initWithNSString_(@"index == 0");
    }
    else if ((b & (jint) 0x80) == (jint) 0x80) {
      jint index = [self readIntWithInt:b withInt:Okhttp3InternalFramedHpack_PREFIX_7_BITS];
      Okhttp3InternalFramedHpack_Reader_readIndexedHeaderWithInt_(self, index - 1);
    }
    else if (b == (jint) 0x40) {
      Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingNewName(self);
    }
    else if ((b & (jint) 0x40) == (jint) 0x40) {
      jint index = [self readIntWithInt:b withInt:Okhttp3InternalFramedHpack_PREFIX_6_BITS];
      Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt_(self, index - 1);
    }
    else if ((b & (jint) 0x20) == (jint) 0x20) {
      maxDynamicTableByteCount_ = [self readIntWithInt:b withInt:Okhttp3InternalFramedHpack_PREFIX_5_BITS];
      if (maxDynamicTableByteCount_ < 0 || maxDynamicTableByteCount_ > headerTableSizeSetting_) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Invalid dynamic table size update ", maxDynamicTableByteCount_));
      }
      Okhttp3InternalFramedHpack_Reader_adjustDynamicTableByteCount(self);
    }
    else if (b == (jint) 0x10 || b == 0) {
      Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingNewName(self);
    }
    else {
      jint index = [self readIntWithInt:b withInt:Okhttp3InternalFramedHpack_PREFIX_4_BITS];
      Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingIndexedNameWithInt_(self, index - 1);
    }
  }
}

- (id<JavaUtilList>)getAndResetHeaderList {
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithJavaUtilCollection_(headerList_);
  [((id<JavaUtilList>) nil_chk(headerList_)) clear];
  return result;
}

- (void)readIndexedHeaderWithInt:(jint)index {
  Okhttp3InternalFramedHpack_Reader_readIndexedHeaderWithInt_(self, index);
}

- (jint)dynamicTableIndexWithInt:(jint)index {
  return Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(self, index);
}

- (void)readLiteralHeaderWithoutIndexingIndexedNameWithInt:(jint)index {
  Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingIndexedNameWithInt_(self, index);
}

- (void)readLiteralHeaderWithoutIndexingNewName {
  Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingNewName(self);
}

- (void)readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt:(jint)nameIndex {
  Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt_(self, nameIndex);
}

- (void)readLiteralHeaderWithIncrementalIndexingNewName {
  Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingNewName(self);
}

- (OkioByteString *)getNameWithInt:(jint)index {
  return Okhttp3InternalFramedHpack_Reader_getNameWithInt_(self, index);
}

- (jboolean)isStaticHeaderWithInt:(jint)index {
  return Okhttp3InternalFramedHpack_Reader_isStaticHeaderWithInt_(self, index);
}

- (void)insertIntoDynamicTableWithInt:(jint)index
      withOkhttp3InternalFramedHeader:(Okhttp3InternalFramedHeader *)entry_ {
  Okhttp3InternalFramedHpack_Reader_insertIntoDynamicTableWithInt_withOkhttp3InternalFramedHeader_(self, index, entry_);
}

- (jint)readByte {
  return Okhttp3InternalFramedHpack_Reader_readByte(self);
}

- (jint)readIntWithInt:(jint)firstByte
               withInt:(jint)prefixMask {
  jint prefix = firstByte & prefixMask;
  if (prefix < prefixMask) {
    return prefix;
  }
  jint result = prefixMask;
  jint shift = 0;
  while (true) {
    jint b = Okhttp3InternalFramedHpack_Reader_readByte(self);
    if ((b & (jint) 0x80) != 0) {
      result += JreLShift32((b & (jint) 0x7f), shift);
      shift += 7;
    }
    else {
      result += JreLShift32(b, shift);
      break;
    }
  }
  return result;
}

- (OkioByteString *)readByteString {
  jint firstByte = Okhttp3InternalFramedHpack_Reader_readByte(self);
  jboolean huffmanDecode = (firstByte & (jint) 0x80) == (jint) 0x80;
  jint length = [self readIntWithInt:firstByte withInt:Okhttp3InternalFramedHpack_PREFIX_7_BITS];
  if (huffmanDecode) {
    return OkioByteString_ofWithByteArray_([((Okhttp3InternalFramedHuffman *) nil_chk(Okhttp3InternalFramedHuffman_get())) decodeWithByteArray:[((id<OkioBufferedSource>) nil_chk(source_)) readByteArrayWithLong:length]]);
  }
  else {
    return [((id<OkioBufferedSource>) nil_chk(source_)) readByteStringWithLong:length];
  }
}

- (void)dealloc {
  RELEASE_(headerList_);
  RELEASE_(source_);
  RELEASE_(dynamicTable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x2, 10, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 15, 4, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x0, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withOkioSource:);
  methods[1].selector = @selector(initWithInt:withInt:withOkioSource:);
  methods[2].selector = @selector(maxDynamicTableByteCount);
  methods[3].selector = @selector(adjustDynamicTableByteCount);
  methods[4].selector = @selector(clearDynamicTable);
  methods[5].selector = @selector(evictToRecoverBytesWithInt:);
  methods[6].selector = @selector(readHeaders);
  methods[7].selector = @selector(getAndResetHeaderList);
  methods[8].selector = @selector(readIndexedHeaderWithInt:);
  methods[9].selector = @selector(dynamicTableIndexWithInt:);
  methods[10].selector = @selector(readLiteralHeaderWithoutIndexingIndexedNameWithInt:);
  methods[11].selector = @selector(readLiteralHeaderWithoutIndexingNewName);
  methods[12].selector = @selector(readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt:);
  methods[13].selector = @selector(readLiteralHeaderWithIncrementalIndexingNewName);
  methods[14].selector = @selector(getNameWithInt:);
  methods[15].selector = @selector(isStaticHeaderWithInt:);
  methods[16].selector = @selector(insertIntoDynamicTableWithInt:withOkhttp3InternalFramedHeader:);
  methods[17].selector = @selector(readByte);
  methods[18].selector = @selector(readIntWithInt:withInt:);
  methods[19].selector = @selector(readByteString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "headerList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headerTableSizeSetting_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxDynamicTableByteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dynamicTable_", "[LOkhttp3InternalFramedHeader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextHeaderIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headerCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dynamicTableByteCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOkioSource;", "IILOkioSource;", "evictToRecoverBytes", "I", "LJavaIoIOException;", "()Ljava/util/List<Lokhttp3/internal/framed/Header;>;", "readIndexedHeader", "dynamicTableIndex", "readLiteralHeaderWithoutIndexingIndexedName", "readLiteralHeaderWithIncrementalIndexingIndexedName", "getName", "isStaticHeader", "insertIntoDynamicTable", "ILOkhttp3InternalFramedHeader;", "readInt", "II", "Ljava/util/List<Lokhttp3/internal/framed/Header;>;", "LOkhttp3InternalFramedHpack;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHpack_Reader = { "Reader", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 20, 8, 17, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHpack_Reader;
}

@end

void Okhttp3InternalFramedHpack_Reader_initWithInt_withOkioSource_(Okhttp3InternalFramedHpack_Reader *self, jint headerTableSizeSetting, id<OkioSource> source) {
  Okhttp3InternalFramedHpack_Reader_initWithInt_withInt_withOkioSource_(self, headerTableSizeSetting, headerTableSizeSetting, source);
}

Okhttp3InternalFramedHpack_Reader *new_Okhttp3InternalFramedHpack_Reader_initWithInt_withOkioSource_(jint headerTableSizeSetting, id<OkioSource> source) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHpack_Reader, initWithInt_withOkioSource_, headerTableSizeSetting, source)
}

Okhttp3InternalFramedHpack_Reader *create_Okhttp3InternalFramedHpack_Reader_initWithInt_withOkioSource_(jint headerTableSizeSetting, id<OkioSource> source) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHpack_Reader, initWithInt_withOkioSource_, headerTableSizeSetting, source)
}

void Okhttp3InternalFramedHpack_Reader_initWithInt_withInt_withOkioSource_(Okhttp3InternalFramedHpack_Reader *self, jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->headerList_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->dynamicTable_, [IOSObjectArray newArrayWithLength:8 type:Okhttp3InternalFramedHeader_class_()]);
  self->nextHeaderIndex_ = self->dynamicTable_->size_ - 1;
  self->headerCount_ = 0;
  self->dynamicTableByteCount_ = 0;
  self->headerTableSizeSetting_ = headerTableSizeSetting;
  self->maxDynamicTableByteCount_ = maxDynamicTableByteCount;
  JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(source));
}

Okhttp3InternalFramedHpack_Reader *new_Okhttp3InternalFramedHpack_Reader_initWithInt_withInt_withOkioSource_(jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHpack_Reader, initWithInt_withInt_withOkioSource_, headerTableSizeSetting, maxDynamicTableByteCount, source)
}

Okhttp3InternalFramedHpack_Reader *create_Okhttp3InternalFramedHpack_Reader_initWithInt_withInt_withOkioSource_(jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHpack_Reader, initWithInt_withInt_withOkioSource_, headerTableSizeSetting, maxDynamicTableByteCount, source)
}

void Okhttp3InternalFramedHpack_Reader_adjustDynamicTableByteCount(Okhttp3InternalFramedHpack_Reader *self) {
  if (self->maxDynamicTableByteCount_ < self->dynamicTableByteCount_) {
    if (self->maxDynamicTableByteCount_ == 0) {
      Okhttp3InternalFramedHpack_Reader_clearDynamicTable(self);
    }
    else {
      Okhttp3InternalFramedHpack_Reader_evictToRecoverBytesWithInt_(self, self->dynamicTableByteCount_ - self->maxDynamicTableByteCount_);
    }
  }
}

void Okhttp3InternalFramedHpack_Reader_clearDynamicTable(Okhttp3InternalFramedHpack_Reader *self) {
  [((id<JavaUtilList>) nil_chk(self->headerList_)) clear];
  JavaUtilArrays_fillWithNSObjectArray_withId_(self->dynamicTable_, nil);
  self->nextHeaderIndex_ = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1;
  self->headerCount_ = 0;
  self->dynamicTableByteCount_ = 0;
}

jint Okhttp3InternalFramedHpack_Reader_evictToRecoverBytesWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint bytesToRecover) {
  jint entriesToEvict = 0;
  if (bytesToRecover > 0) {
    for (jint j = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1; j >= self->nextHeaderIndex_ && bytesToRecover > 0; j--) {
      bytesToRecover -= ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(self->dynamicTable_, j)))->hpackSize_;
      self->dynamicTableByteCount_ -= ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(self->dynamicTable_, j)))->hpackSize_;
      self->headerCount_--;
      entriesToEvict++;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dynamicTable_, self->nextHeaderIndex_ + 1, self->dynamicTable_, self->nextHeaderIndex_ + 1 + entriesToEvict, self->headerCount_);
    self->nextHeaderIndex_ += entriesToEvict;
  }
  return entriesToEvict;
}

void Okhttp3InternalFramedHpack_Reader_readIndexedHeaderWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index) {
  if (Okhttp3InternalFramedHpack_Reader_isStaticHeaderWithInt_(self, index)) {
    Okhttp3InternalFramedHeader *staticEntry = IOSObjectArray_Get(nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)), index);
    [((id<JavaUtilList>) nil_chk(self->headerList_)) addWithId:staticEntry];
  }
  else {
    jint dynamicTableIndex = Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(self, index - ((IOSObjectArray *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)))->size_);
    if (dynamicTableIndex < 0 || dynamicTableIndex > ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Header index too large ", (index + 1)));
    }
    [((id<JavaUtilList>) nil_chk(self->headerList_)) addWithId:IOSObjectArray_Get(nil_chk(self->dynamicTable_), dynamicTableIndex)];
  }
}

jint Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index) {
  return self->nextHeaderIndex_ + 1 + index;
}

void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingIndexedNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index) {
  OkioByteString *name = Okhttp3InternalFramedHpack_Reader_getNameWithInt_(self, index);
  OkioByteString *value = [self readByteString];
  [((id<JavaUtilList>) nil_chk(self->headerList_)) addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withOkioByteString_(name, value)];
}

void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithoutIndexingNewName(Okhttp3InternalFramedHpack_Reader *self) {
  OkioByteString *name = Okhttp3InternalFramedHpack_checkLowercaseWithOkioByteString_([self readByteString]);
  OkioByteString *value = [self readByteString];
  [((id<JavaUtilList>) nil_chk(self->headerList_)) addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withOkioByteString_(name, value)];
}

void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingIndexedNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint nameIndex) {
  OkioByteString *name = Okhttp3InternalFramedHpack_Reader_getNameWithInt_(self, nameIndex);
  OkioByteString *value = [self readByteString];
  Okhttp3InternalFramedHpack_Reader_insertIntoDynamicTableWithInt_withOkhttp3InternalFramedHeader_(self, -1, create_Okhttp3InternalFramedHeader_initWithOkioByteString_withOkioByteString_(name, value));
}

void Okhttp3InternalFramedHpack_Reader_readLiteralHeaderWithIncrementalIndexingNewName(Okhttp3InternalFramedHpack_Reader *self) {
  OkioByteString *name = Okhttp3InternalFramedHpack_checkLowercaseWithOkioByteString_([self readByteString]);
  OkioByteString *value = [self readByteString];
  Okhttp3InternalFramedHpack_Reader_insertIntoDynamicTableWithInt_withOkhttp3InternalFramedHeader_(self, -1, create_Okhttp3InternalFramedHeader_initWithOkioByteString_withOkioByteString_(name, value));
}

OkioByteString *Okhttp3InternalFramedHpack_Reader_getNameWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index) {
  if (Okhttp3InternalFramedHpack_Reader_isStaticHeaderWithInt_(self, index)) {
    return ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)), index)))->name_;
  }
  else {
    return ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(nil_chk(self->dynamicTable_), Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(self, index - ((IOSObjectArray *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)))->size_))))->name_;
  }
}

jboolean Okhttp3InternalFramedHpack_Reader_isStaticHeaderWithInt_(Okhttp3InternalFramedHpack_Reader *self, jint index) {
  return index >= 0 && index <= ((IOSObjectArray *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)))->size_ - 1;
}

void Okhttp3InternalFramedHpack_Reader_insertIntoDynamicTableWithInt_withOkhttp3InternalFramedHeader_(Okhttp3InternalFramedHpack_Reader *self, jint index, Okhttp3InternalFramedHeader *entry_) {
  [((id<JavaUtilList>) nil_chk(self->headerList_)) addWithId:entry_];
  jint delta = ((Okhttp3InternalFramedHeader *) nil_chk(entry_))->hpackSize_;
  if (index != -1) {
    delta -= ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(nil_chk(self->dynamicTable_), Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(self, index))))->hpackSize_;
  }
  if (delta > self->maxDynamicTableByteCount_) {
    Okhttp3InternalFramedHpack_Reader_clearDynamicTable(self);
    return;
  }
  jint bytesToRecover = (self->dynamicTableByteCount_ + delta) - self->maxDynamicTableByteCount_;
  jint entriesEvicted = Okhttp3InternalFramedHpack_Reader_evictToRecoverBytesWithInt_(self, bytesToRecover);
  if (index == -1) {
    if (self->headerCount_ + 1 > ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_) {
      IOSObjectArray *doubled = [IOSObjectArray arrayWithLength:self->dynamicTable_->size_ * 2 type:Okhttp3InternalFramedHeader_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dynamicTable_, 0, doubled, self->dynamicTable_->size_, self->dynamicTable_->size_);
      self->nextHeaderIndex_ = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1;
      JreStrongAssign(&self->dynamicTable_, doubled);
    }
    index = self->nextHeaderIndex_--;
    IOSObjectArray_Set(self->dynamicTable_, index, entry_);
    self->headerCount_++;
  }
  else {
    index += Okhttp3InternalFramedHpack_Reader_dynamicTableIndexWithInt_(self, index) + entriesEvicted;
    IOSObjectArray_Set(nil_chk(self->dynamicTable_), index, entry_);
  }
  self->dynamicTableByteCount_ += delta;
}

jint Okhttp3InternalFramedHpack_Reader_readByte(Okhttp3InternalFramedHpack_Reader *self) {
  return [((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHpack_Reader)

@implementation Okhttp3InternalFramedHpack_Writer

- (instancetype)initWithOkioBuffer:(OkioBuffer *)outArg {
  Okhttp3InternalFramedHpack_Writer_initWithOkioBuffer_(self, outArg);
  return self;
}

- (instancetype)initWithInt:(jint)headerTableSizeSetting
             withOkioBuffer:(OkioBuffer *)outArg {
  Okhttp3InternalFramedHpack_Writer_initWithInt_withOkioBuffer_(self, headerTableSizeSetting, outArg);
  return self;
}

- (void)clearDynamicTable {
  Okhttp3InternalFramedHpack_Writer_clearDynamicTable(self);
}

- (jint)evictToRecoverBytesWithInt:(jint)bytesToRecover {
  return Okhttp3InternalFramedHpack_Writer_evictToRecoverBytesWithInt_(self, bytesToRecover);
}

- (void)insertIntoDynamicTableWithOkhttp3InternalFramedHeader:(Okhttp3InternalFramedHeader *)entry_ {
  Okhttp3InternalFramedHpack_Writer_insertIntoDynamicTableWithOkhttp3InternalFramedHeader_(self, entry_);
}

- (void)writeHeadersWithJavaUtilList:(id<JavaUtilList>)headerBlock {
  if (emitDynamicTableSizeUpdate_) {
    if (smallestHeaderTableSizeSetting_ < maxDynamicTableByteCount_) {
      [self writeIntWithInt:smallestHeaderTableSizeSetting_ withInt:Okhttp3InternalFramedHpack_PREFIX_5_BITS withInt:(jint) 0x20];
    }
    emitDynamicTableSizeUpdate_ = false;
    smallestHeaderTableSizeSetting_ = JavaLangInteger_MAX_VALUE;
    [self writeIntWithInt:maxDynamicTableByteCount_ withInt:Okhttp3InternalFramedHpack_PREFIX_5_BITS withInt:(jint) 0x20];
  }
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(headerBlock)) size]; i < size; i++) {
    Okhttp3InternalFramedHeader *header = [headerBlock getWithInt:i];
    OkioByteString *name = [((OkioByteString *) nil_chk(((Okhttp3InternalFramedHeader *) nil_chk(header))->name_)) toAsciiLowercase];
    OkioByteString *value = header->value_;
    JavaLangInteger *staticIndex = [((id<JavaUtilMap>) nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, NAME_TO_FIRST_INDEX))) getWithId:name];
    if (staticIndex != nil) {
      [self writeIntWithInt:[staticIndex intValue] + 1 withInt:Okhttp3InternalFramedHpack_PREFIX_4_BITS withInt:0];
      [self writeByteStringWithOkioByteString:value];
    }
    else {
      jint dynamicIndex = Okhttp3InternalUtil_indexOfWithNSObjectArray_withId_(dynamicTable_, header);
      if (dynamicIndex != -1) {
        [self writeIntWithInt:dynamicIndex - nextHeaderIndex_ + ((IOSObjectArray *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHpack, STATIC_HEADER_TABLE)))->size_ withInt:Okhttp3InternalFramedHpack_PREFIX_7_BITS withInt:(jint) 0x80];
      }
      else {
        [((OkioBuffer *) nil_chk(out_)) writeByteWithInt:(jint) 0x40];
        [self writeByteStringWithOkioByteString:name];
        [self writeByteStringWithOkioByteString:value];
        Okhttp3InternalFramedHpack_Writer_insertIntoDynamicTableWithOkhttp3InternalFramedHeader_(self, header);
      }
    }
  }
}

- (void)writeIntWithInt:(jint)value
                withInt:(jint)prefixMask
                withInt:(jint)bits {
  if (value < prefixMask) {
    [((OkioBuffer *) nil_chk(out_)) writeByteWithInt:bits | value];
    return;
  }
  [((OkioBuffer *) nil_chk(out_)) writeByteWithInt:bits | prefixMask];
  value -= prefixMask;
  while (value >= (jint) 0x80) {
    jint b = value & (jint) 0x7f;
    [out_ writeByteWithInt:b | (jint) 0x80];
    JreURShiftAssignInt(&value, 7);
  }
  [out_ writeByteWithInt:value];
}

- (void)writeByteStringWithOkioByteString:(OkioByteString *)data {
  [self writeIntWithInt:[((OkioByteString *) nil_chk(data)) size] withInt:Okhttp3InternalFramedHpack_PREFIX_7_BITS withInt:0];
  [((OkioBuffer *) nil_chk(out_)) writeWithOkioByteString:data];
}

- (void)setHeaderTableSizeSettingWithInt:(jint)headerTableSizeSetting {
  self->headerTableSizeSetting_ = headerTableSizeSetting;
  jint effectiveHeaderTableSize = JavaLangMath_minWithInt_withInt_(headerTableSizeSetting, Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE_LIMIT);
  if (maxDynamicTableByteCount_ == effectiveHeaderTableSize) return;
  if (effectiveHeaderTableSize < maxDynamicTableByteCount_) {
    smallestHeaderTableSizeSetting_ = JavaLangMath_minWithInt_withInt_(smallestHeaderTableSizeSetting_, effectiveHeaderTableSize);
  }
  emitDynamicTableSizeUpdate_ = true;
  maxDynamicTableByteCount_ = effectiveHeaderTableSize;
  Okhttp3InternalFramedHpack_Writer_adjustDynamicTableByteCount(self);
}

- (void)adjustDynamicTableByteCount {
  Okhttp3InternalFramedHpack_Writer_adjustDynamicTableByteCount(self);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(dynamicTable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, 8, 9, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBuffer:);
  methods[1].selector = @selector(initWithInt:withOkioBuffer:);
  methods[2].selector = @selector(clearDynamicTable);
  methods[3].selector = @selector(evictToRecoverBytesWithInt:);
  methods[4].selector = @selector(insertIntoDynamicTableWithOkhttp3InternalFramedHeader:);
  methods[5].selector = @selector(writeHeadersWithJavaUtilList:);
  methods[6].selector = @selector(writeIntWithInt:withInt:withInt:);
  methods[7].selector = @selector(writeByteStringWithOkioByteString:);
  methods[8].selector = @selector(setHeaderTableSizeSettingWithInt:);
  methods[9].selector = @selector(adjustDynamicTableByteCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SETTINGS_HEADER_TABLE_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "SETTINGS_HEADER_TABLE_SIZE_LIMIT", "I", .constantValue.asInt = Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "out_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "smallestHeaderTableSizeSetting_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "emitDynamicTableSizeUpdate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headerTableSizeSetting_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxDynamicTableByteCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dynamicTable_", "[LOkhttp3InternalFramedHeader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextHeaderIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headerCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dynamicTableByteCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBuffer;", "ILOkioBuffer;", "evictToRecoverBytes", "I", "insertIntoDynamicTable", "LOkhttp3InternalFramedHeader;", "writeHeaders", "LJavaUtilList;", "LJavaIoIOException;", "(Ljava/util/List<Lokhttp3/internal/framed/Header;>;)V", "writeInt", "III", "writeByteString", "LOkioByteString;", "setHeaderTableSizeSetting", "LOkhttp3InternalFramedHpack;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHpack_Writer = { "Writer", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 10, 11, 15, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHpack_Writer;
}

@end

void Okhttp3InternalFramedHpack_Writer_initWithOkioBuffer_(Okhttp3InternalFramedHpack_Writer *self, OkioBuffer *outArg) {
  Okhttp3InternalFramedHpack_Writer_initWithInt_withOkioBuffer_(self, Okhttp3InternalFramedHpack_Writer_SETTINGS_HEADER_TABLE_SIZE, outArg);
}

Okhttp3InternalFramedHpack_Writer *new_Okhttp3InternalFramedHpack_Writer_initWithOkioBuffer_(OkioBuffer *outArg) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHpack_Writer, initWithOkioBuffer_, outArg)
}

Okhttp3InternalFramedHpack_Writer *create_Okhttp3InternalFramedHpack_Writer_initWithOkioBuffer_(OkioBuffer *outArg) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHpack_Writer, initWithOkioBuffer_, outArg)
}

void Okhttp3InternalFramedHpack_Writer_initWithInt_withOkioBuffer_(Okhttp3InternalFramedHpack_Writer *self, jint headerTableSizeSetting, OkioBuffer *outArg) {
  NSObject_init(self);
  self->smallestHeaderTableSizeSetting_ = JavaLangInteger_MAX_VALUE;
  JreStrongAssignAndConsume(&self->dynamicTable_, [IOSObjectArray newArrayWithLength:8 type:Okhttp3InternalFramedHeader_class_()]);
  self->nextHeaderIndex_ = self->dynamicTable_->size_ - 1;
  self->headerCount_ = 0;
  self->dynamicTableByteCount_ = 0;
  self->headerTableSizeSetting_ = headerTableSizeSetting;
  self->maxDynamicTableByteCount_ = headerTableSizeSetting;
  JreStrongAssign(&self->out_, outArg);
}

Okhttp3InternalFramedHpack_Writer *new_Okhttp3InternalFramedHpack_Writer_initWithInt_withOkioBuffer_(jint headerTableSizeSetting, OkioBuffer *outArg) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHpack_Writer, initWithInt_withOkioBuffer_, headerTableSizeSetting, outArg)
}

Okhttp3InternalFramedHpack_Writer *create_Okhttp3InternalFramedHpack_Writer_initWithInt_withOkioBuffer_(jint headerTableSizeSetting, OkioBuffer *outArg) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHpack_Writer, initWithInt_withOkioBuffer_, headerTableSizeSetting, outArg)
}

void Okhttp3InternalFramedHpack_Writer_clearDynamicTable(Okhttp3InternalFramedHpack_Writer *self) {
  JavaUtilArrays_fillWithNSObjectArray_withId_(self->dynamicTable_, nil);
  self->nextHeaderIndex_ = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1;
  self->headerCount_ = 0;
  self->dynamicTableByteCount_ = 0;
}

jint Okhttp3InternalFramedHpack_Writer_evictToRecoverBytesWithInt_(Okhttp3InternalFramedHpack_Writer *self, jint bytesToRecover) {
  jint entriesToEvict = 0;
  if (bytesToRecover > 0) {
    for (jint j = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1; j >= self->nextHeaderIndex_ && bytesToRecover > 0; j--) {
      bytesToRecover -= ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(self->dynamicTable_, j)))->hpackSize_;
      self->dynamicTableByteCount_ -= ((Okhttp3InternalFramedHeader *) nil_chk(IOSObjectArray_Get(self->dynamicTable_, j)))->hpackSize_;
      self->headerCount_--;
      entriesToEvict++;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dynamicTable_, self->nextHeaderIndex_ + 1, self->dynamicTable_, self->nextHeaderIndex_ + 1 + entriesToEvict, self->headerCount_);
    JavaUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(self->dynamicTable_, self->nextHeaderIndex_ + 1, self->nextHeaderIndex_ + 1 + entriesToEvict, nil);
    self->nextHeaderIndex_ += entriesToEvict;
  }
  return entriesToEvict;
}

void Okhttp3InternalFramedHpack_Writer_insertIntoDynamicTableWithOkhttp3InternalFramedHeader_(Okhttp3InternalFramedHpack_Writer *self, Okhttp3InternalFramedHeader *entry_) {
  jint delta = ((Okhttp3InternalFramedHeader *) nil_chk(entry_))->hpackSize_;
  if (delta > self->maxDynamicTableByteCount_) {
    Okhttp3InternalFramedHpack_Writer_clearDynamicTable(self);
    return;
  }
  jint bytesToRecover = (self->dynamicTableByteCount_ + delta) - self->maxDynamicTableByteCount_;
  Okhttp3InternalFramedHpack_Writer_evictToRecoverBytesWithInt_(self, bytesToRecover);
  if (self->headerCount_ + 1 > ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_) {
    IOSObjectArray *doubled = [IOSObjectArray arrayWithLength:self->dynamicTable_->size_ * 2 type:Okhttp3InternalFramedHeader_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dynamicTable_, 0, doubled, self->dynamicTable_->size_, self->dynamicTable_->size_);
    self->nextHeaderIndex_ = ((IOSObjectArray *) nil_chk(self->dynamicTable_))->size_ - 1;
    JreStrongAssign(&self->dynamicTable_, doubled);
  }
  jint index = self->nextHeaderIndex_--;
  IOSObjectArray_Set(self->dynamicTable_, index, entry_);
  self->headerCount_++;
  self->dynamicTableByteCount_ += delta;
}

void Okhttp3InternalFramedHpack_Writer_adjustDynamicTableByteCount(Okhttp3InternalFramedHpack_Writer *self) {
  if (self->maxDynamicTableByteCount_ < self->dynamicTableByteCount_) {
    if (self->maxDynamicTableByteCount_ == 0) {
      Okhttp3InternalFramedHpack_Writer_clearDynamicTable(self);
    }
    else {
      Okhttp3InternalFramedHpack_Writer_evictToRecoverBytesWithInt_(self, self->dynamicTableByteCount_ - self->maxDynamicTableByteCount_);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHpack_Writer)
