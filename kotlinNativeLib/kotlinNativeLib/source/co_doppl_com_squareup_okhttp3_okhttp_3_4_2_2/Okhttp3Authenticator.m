//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Authenticator.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3Route.h"

@interface Okhttp3Authenticator_1 : NSObject < Okhttp3Authenticator >

- (instancetype)init;

- (Okhttp3Request *)authenticateWithOkhttp3Route:(Okhttp3Route *)route
                             withOkhttp3Response:(Okhttp3Response *)response;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Authenticator_1)

__attribute__((unused)) static void Okhttp3Authenticator_1_init(Okhttp3Authenticator_1 *self);

__attribute__((unused)) static Okhttp3Authenticator_1 *new_Okhttp3Authenticator_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Authenticator_1 *create_Okhttp3Authenticator_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3Authenticator)

id<Okhttp3Authenticator> Okhttp3Authenticator_NONE;

@implementation Okhttp3Authenticator

+ (id<Okhttp3Authenticator>)NONE {
  return Okhttp3Authenticator_NONE;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3Request;", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(authenticateWithOkhttp3Route:withOkhttp3Response:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LOkhttp3Authenticator;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "authenticate", "LOkhttp3Route;LOkhttp3Response;", "LJavaIoIOException;", &Okhttp3Authenticator_NONE };
  static const J2ObjcClassInfo _Okhttp3Authenticator = { "Authenticator", "okhttp3", ptrTable, methods, fields, 7, 0x609, 1, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3Authenticator;
}

+ (void)initialize {
  if (self == [Okhttp3Authenticator class]) {
    JreStrongAssignAndConsume(&Okhttp3Authenticator_NONE, new_Okhttp3Authenticator_1_init());
    J2OBJC_SET_INITIALIZED(Okhttp3Authenticator)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3Authenticator)

@implementation Okhttp3Authenticator_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3Authenticator_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3Request *)authenticateWithOkhttp3Route:(Okhttp3Route *)route
                             withOkhttp3Response:(Okhttp3Response *)response {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(authenticateWithOkhttp3Route:withOkhttp3Response:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "authenticate", "LOkhttp3Route;LOkhttp3Response;", "LOkhttp3Authenticator;" };
  static const J2ObjcClassInfo _Okhttp3Authenticator_1 = { "", "okhttp3", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_Okhttp3Authenticator_1;
}

@end

void Okhttp3Authenticator_1_init(Okhttp3Authenticator_1 *self) {
  NSObject_init(self);
}

Okhttp3Authenticator_1 *new_Okhttp3Authenticator_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3Authenticator_1, init)
}

Okhttp3Authenticator_1 *create_Okhttp3Authenticator_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3Authenticator_1, init)
}
