//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3TlsVersion.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(Okhttp3TlsVersion *self, NSString *javaName, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3TlsVersion)

Okhttp3TlsVersion *Okhttp3TlsVersion_values_[4];

@implementation Okhttp3TlsVersion

+ (Okhttp3TlsVersion *)TLS_1_2 {
  return JreEnum(Okhttp3TlsVersion, TLS_1_2);
}

+ (Okhttp3TlsVersion *)TLS_1_1 {
  return JreEnum(Okhttp3TlsVersion, TLS_1_1);
}

+ (Okhttp3TlsVersion *)TLS_1_0 {
  return JreEnum(Okhttp3TlsVersion, TLS_1_0);
}

+ (Okhttp3TlsVersion *)SSL_3_0 {
  return JreEnum(Okhttp3TlsVersion, SSL_3_0);
}

+ (Okhttp3TlsVersion *)forJavaNameWithNSString:(NSString *)javaName {
  return Okhttp3TlsVersion_forJavaNameWithNSString_(javaName);
}

- (NSString *)javaName {
  return javaName_;
}

+ (IOSObjectArray *)values {
  return Okhttp3TlsVersion_values();
}

+ (Okhttp3TlsVersion *)valueOfWithNSString:(NSString *)name {
  return Okhttp3TlsVersion_valueOfWithNSString_(name);
}

- (Okhttp3TlsVersion_Enum)toNSEnum {
  return (Okhttp3TlsVersion_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3TlsVersion;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOkhttp3TlsVersion;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3TlsVersion;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(forJavaNameWithNSString:);
  methods[1].selector = @selector(javaName);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TLS_1_2", "LOkhttp3TlsVersion;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TLS_1_1", "LOkhttp3TlsVersion;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TLS_1_0", "LOkhttp3TlsVersion;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SSL_3_0", "LOkhttp3TlsVersion;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "javaName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "forJavaName", "LNSString;", "valueOf", &JreEnum(Okhttp3TlsVersion, TLS_1_2), &JreEnum(Okhttp3TlsVersion, TLS_1_1), &JreEnum(Okhttp3TlsVersion, TLS_1_0), &JreEnum(Okhttp3TlsVersion, SSL_3_0), "Ljava/lang/Enum<Lokhttp3/TlsVersion;>;" };
  static const J2ObjcClassInfo _Okhttp3TlsVersion = { "TlsVersion", "okhttp3", ptrTable, methods, fields, 7, 0x4011, 4, 5, -1, -1, -1, 7, -1 };
  return &_Okhttp3TlsVersion;
}

+ (void)initialize {
  if (self == [Okhttp3TlsVersion class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(Okhttp3TlsVersion, TLS_1_2) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(e, @"TLSv1.2", @"TLS_1_2", 0);
    (JreEnum(Okhttp3TlsVersion, TLS_1_1) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(e, @"TLSv1.1", @"TLS_1_1", 1);
    (JreEnum(Okhttp3TlsVersion, TLS_1_0) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(e, @"TLSv1", @"TLS_1_0", 2);
    (JreEnum(Okhttp3TlsVersion, SSL_3_0) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(e, @"SSLv3", @"SSL_3_0", 3);
    J2OBJC_SET_INITIALIZED(Okhttp3TlsVersion)
  }
}

@end

void Okhttp3TlsVersion_initWithNSString_withNSString_withInt_(Okhttp3TlsVersion *self, NSString *javaName, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->javaName_, javaName);
}

Okhttp3TlsVersion *Okhttp3TlsVersion_forJavaNameWithNSString_(NSString *javaName) {
  Okhttp3TlsVersion_initialize();
  switch (JreIndexOfStr(javaName, (id[]){ @"TLSv1.2", @"TLSv1.1", @"TLSv1", @"SSLv3" }, 4)) {
    case 0:
    return JreEnum(Okhttp3TlsVersion, TLS_1_2);
    case 1:
    return JreEnum(Okhttp3TlsVersion, TLS_1_1);
    case 2:
    return JreEnum(Okhttp3TlsVersion, TLS_1_0);
    case 3:
    return JreEnum(Okhttp3TlsVersion, SSL_3_0);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unexpected TLS version: ", javaName));
}

IOSObjectArray *Okhttp3TlsVersion_values() {
  Okhttp3TlsVersion_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3TlsVersion_values_ count:4 type:Okhttp3TlsVersion_class_()];
}

Okhttp3TlsVersion *Okhttp3TlsVersion_valueOfWithNSString_(NSString *name) {
  Okhttp3TlsVersion_initialize();
  for (int i = 0; i < 4; i++) {
    Okhttp3TlsVersion *e = Okhttp3TlsVersion_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3TlsVersion *Okhttp3TlsVersion_fromOrdinal(NSUInteger ordinal) {
  Okhttp3TlsVersion_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return Okhttp3TlsVersion_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3TlsVersion)
