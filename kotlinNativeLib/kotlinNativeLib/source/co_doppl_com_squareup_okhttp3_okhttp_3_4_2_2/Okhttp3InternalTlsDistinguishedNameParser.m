//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalTlsDistinguishedNameParser.h"
#include "java/lang/IllegalStateException.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface Okhttp3InternalTlsDistinguishedNameParser () {
 @public
  NSString *dn_;
  jint length_;
  jint pos_;
  jint beg_;
  jint end_;
  jint cur_;
  IOSCharArray *chars_;
}

- (NSString *)nextAT;

- (NSString *)quotedAV;

- (NSString *)hexAV;

- (NSString *)escapedAV;

- (jchar)getEscaped;

- (jchar)getUTF8;

- (jint)getByteWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalTlsDistinguishedNameParser, dn_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalTlsDistinguishedNameParser, chars_, IOSCharArray *)

__attribute__((unused)) static NSString *Okhttp3InternalTlsDistinguishedNameParser_nextAT(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static NSString *Okhttp3InternalTlsDistinguishedNameParser_quotedAV(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static NSString *Okhttp3InternalTlsDistinguishedNameParser_hexAV(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static NSString *Okhttp3InternalTlsDistinguishedNameParser_escapedAV(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static jchar Okhttp3InternalTlsDistinguishedNameParser_getEscaped(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static jchar Okhttp3InternalTlsDistinguishedNameParser_getUTF8(Okhttp3InternalTlsDistinguishedNameParser *self);

__attribute__((unused)) static jint Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(Okhttp3InternalTlsDistinguishedNameParser *self, jint position);

@implementation Okhttp3InternalTlsDistinguishedNameParser

- (instancetype)initWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)principal {
  Okhttp3InternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(self, principal);
  return self;
}

- (NSString *)nextAT {
  return Okhttp3InternalTlsDistinguishedNameParser_nextAT(self);
}

- (NSString *)quotedAV {
  return Okhttp3InternalTlsDistinguishedNameParser_quotedAV(self);
}

- (NSString *)hexAV {
  return Okhttp3InternalTlsDistinguishedNameParser_hexAV(self);
}

- (NSString *)escapedAV {
  return Okhttp3InternalTlsDistinguishedNameParser_escapedAV(self);
}

- (jchar)getEscaped {
  return Okhttp3InternalTlsDistinguishedNameParser_getEscaped(self);
}

- (jchar)getUTF8 {
  return Okhttp3InternalTlsDistinguishedNameParser_getUTF8(self);
}

- (jint)getByteWithInt:(jint)position {
  return Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(self, position);
}

- (NSString *)findMostSpecificWithNSString:(NSString *)attributeType {
  pos_ = 0;
  beg_ = 0;
  end_ = 0;
  cur_ = 0;
  JreStrongAssign(&chars_, [((NSString *) nil_chk(dn_)) java_toCharArray]);
  NSString *attType = Okhttp3InternalTlsDistinguishedNameParser_nextAT(self);
  if (attType == nil) {
    return nil;
  }
  while (true) {
    NSString *attValue = @"";
    if (pos_ == length_) {
      return nil;
    }
    switch (IOSCharArray_Get(nil_chk(chars_), pos_)) {
      case '"':
      attValue = Okhttp3InternalTlsDistinguishedNameParser_quotedAV(self);
      break;
      case '#':
      attValue = Okhttp3InternalTlsDistinguishedNameParser_hexAV(self);
      break;
      case '+':
      case ',':
      case ';':
      break;
      default:
      attValue = Okhttp3InternalTlsDistinguishedNameParser_escapedAV(self);
    }
    if ([((NSString *) nil_chk(attributeType)) java_equalsIgnoreCase:attType]) {
      return attValue;
    }
    if (pos_ >= length_) {
      return nil;
    }
    if (IOSCharArray_Get(nil_chk(chars_), pos_) == ',' || IOSCharArray_Get(chars_, pos_) == ';') {
    }
    else if (IOSCharArray_Get(chars_, pos_) != '+') {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Malformed DN: ", dn_));
    }
    pos_++;
    attType = Okhttp3InternalTlsDistinguishedNameParser_nextAT(self);
    if (attType == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Malformed DN: ", dn_));
    }
  }
}

- (void)dealloc {
  RELEASE_(dn_);
  RELEASE_(chars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxSecurityAuthX500X500Principal:);
  methods[1].selector = @selector(nextAT);
  methods[2].selector = @selector(quotedAV);
  methods[3].selector = @selector(hexAV);
  methods[4].selector = @selector(escapedAV);
  methods[5].selector = @selector(getEscaped);
  methods[6].selector = @selector(getUTF8);
  methods[7].selector = @selector(getByteWithInt:);
  methods[8].selector = @selector(findMostSpecificWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dn_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "beg_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cur_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "chars_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxSecurityAuthX500X500Principal;", "getByte", "I", "findMostSpecific", "LNSString;" };
  static const J2ObjcClassInfo _Okhttp3InternalTlsDistinguishedNameParser = { "DistinguishedNameParser", "okhttp3.internal.tls", ptrTable, methods, fields, 7, 0x10, 9, 7, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalTlsDistinguishedNameParser;
}

@end

void Okhttp3InternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(Okhttp3InternalTlsDistinguishedNameParser *self, JavaxSecurityAuthX500X500Principal *principal) {
  NSObject_init(self);
  JreStrongAssign(&self->dn_, [((JavaxSecurityAuthX500X500Principal *) nil_chk(principal)) getNameWithNSString:JavaxSecurityAuthX500X500Principal_RFC2253]);
  self->length_ = [((NSString *) nil_chk(self->dn_)) java_length];
}

Okhttp3InternalTlsDistinguishedNameParser *new_Okhttp3InternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_NEW_IMPL(Okhttp3InternalTlsDistinguishedNameParser, initWithJavaxSecurityAuthX500X500Principal_, principal)
}

Okhttp3InternalTlsDistinguishedNameParser *create_Okhttp3InternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalTlsDistinguishedNameParser, initWithJavaxSecurityAuthX500X500Principal_, principal)
}

NSString *Okhttp3InternalTlsDistinguishedNameParser_nextAT(Okhttp3InternalTlsDistinguishedNameParser *self) {
  for (; self->pos_ < self->length_ && IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == ' '; self->pos_++) {
  }
  if (self->pos_ == self->length_) {
    return nil;
  }
  self->beg_ = self->pos_;
  self->pos_++;
  for (; self->pos_ < self->length_ && IOSCharArray_Get(nil_chk(self->chars_), self->pos_) != '=' && IOSCharArray_Get(self->chars_, self->pos_) != ' '; self->pos_++) {
  }
  if (self->pos_ >= self->length_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
  }
  self->end_ = self->pos_;
  if (IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == ' ') {
    for (; self->pos_ < self->length_ && IOSCharArray_Get(self->chars_, self->pos_) != '=' && IOSCharArray_Get(self->chars_, self->pos_) == ' '; self->pos_++) {
    }
    if (IOSCharArray_Get(self->chars_, self->pos_) != '=' || self->pos_ == self->length_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
    }
  }
  self->pos_++;
  for (; self->pos_ < self->length_ && IOSCharArray_Get(self->chars_, self->pos_) == ' '; self->pos_++) {
  }
  if ((self->end_ - self->beg_ > 4) && (IOSCharArray_Get(self->chars_, self->beg_ + 3) == '.') && (IOSCharArray_Get(self->chars_, self->beg_) == 'O' || IOSCharArray_Get(self->chars_, self->beg_) == 'o') && (IOSCharArray_Get(self->chars_, self->beg_ + 1) == 'I' || IOSCharArray_Get(self->chars_, self->beg_ + 1) == 'i') && (IOSCharArray_Get(self->chars_, self->beg_ + 2) == 'D' || IOSCharArray_Get(self->chars_, self->beg_ + 2) == 'd')) {
    self->beg_ += 4;
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:self->end_ - self->beg_];
}

NSString *Okhttp3InternalTlsDistinguishedNameParser_quotedAV(Okhttp3InternalTlsDistinguishedNameParser *self) {
  self->pos_++;
  self->beg_ = self->pos_;
  self->end_ = self->beg_;
  while (true) {
    if (self->pos_ == self->length_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
    }
    if (IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == '"') {
      self->pos_++;
      break;
    }
    else if (IOSCharArray_Get(self->chars_, self->pos_) == '\\') {
      *IOSCharArray_GetRef(self->chars_, self->end_) = Okhttp3InternalTlsDistinguishedNameParser_getEscaped(self);
    }
    else {
      *IOSCharArray_GetRef(self->chars_, self->end_) = IOSCharArray_Get(self->chars_, self->pos_);
    }
    self->pos_++;
    self->end_++;
  }
  for (; self->pos_ < self->length_ && IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == ' '; self->pos_++) {
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:self->end_ - self->beg_];
}

NSString *Okhttp3InternalTlsDistinguishedNameParser_hexAV(Okhttp3InternalTlsDistinguishedNameParser *self) {
  if (self->pos_ + 4 >= self->length_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
  }
  self->beg_ = self->pos_;
  self->pos_++;
  while (true) {
    if (self->pos_ == self->length_ || IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == '+' || IOSCharArray_Get(self->chars_, self->pos_) == ',' || IOSCharArray_Get(self->chars_, self->pos_) == ';') {
      self->end_ = self->pos_;
      break;
    }
    if (IOSCharArray_Get(nil_chk(self->chars_), self->pos_) == ' ') {
      self->end_ = self->pos_;
      self->pos_++;
      for (; self->pos_ < self->length_ && IOSCharArray_Get(self->chars_, self->pos_) == ' '; self->pos_++) {
      }
      break;
    }
    else if (IOSCharArray_Get(self->chars_, self->pos_) >= 'A' && IOSCharArray_Get(self->chars_, self->pos_) <= 'F') {
      *IOSCharArray_GetRef(self->chars_, self->pos_) += 32;
    }
    self->pos_++;
  }
  jint hexLen = self->end_ - self->beg_;
  if (hexLen < 5 || (hexLen & 1) == 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
  }
  IOSByteArray *encoded = [IOSByteArray arrayWithLength:hexLen / 2];
  for (jint i = 0, p = self->beg_ + 1; i < encoded->size_; p += 2, i++) {
    *IOSByteArray_GetRef(encoded, i) = (jbyte) Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(self, p);
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:hexLen];
}

NSString *Okhttp3InternalTlsDistinguishedNameParser_escapedAV(Okhttp3InternalTlsDistinguishedNameParser *self) {
  self->beg_ = self->pos_;
  self->end_ = self->pos_;
  while (true) {
    if (self->pos_ >= self->length_) {
      return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:self->end_ - self->beg_];
    }
    switch (IOSCharArray_Get(nil_chk(self->chars_), self->pos_)) {
      case '+':
      case ',':
      case ';':
      return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:self->end_ - self->beg_];
      case '\\':
      *IOSCharArray_GetRef(self->chars_, self->end_++) = Okhttp3InternalTlsDistinguishedNameParser_getEscaped(self);
      self->pos_++;
      break;
      case ' ':
      self->cur_ = self->end_;
      self->pos_++;
      *IOSCharArray_GetRef(self->chars_, self->end_++) = ' ';
      for (; self->pos_ < self->length_ && IOSCharArray_Get(self->chars_, self->pos_) == ' '; self->pos_++) {
        *IOSCharArray_GetRef(self->chars_, self->end_++) = ' ';
      }
      if (self->pos_ == self->length_ || IOSCharArray_Get(self->chars_, self->pos_) == ',' || IOSCharArray_Get(self->chars_, self->pos_) == '+' || IOSCharArray_Get(self->chars_, self->pos_) == ';') {
        return [NSString java_stringWithCharacters:self->chars_ offset:self->beg_ length:self->cur_ - self->beg_];
      }
      break;
      default:
      *IOSCharArray_GetRef(self->chars_, self->end_++) = IOSCharArray_Get(self->chars_, self->pos_);
      self->pos_++;
    }
  }
}

jchar Okhttp3InternalTlsDistinguishedNameParser_getEscaped(Okhttp3InternalTlsDistinguishedNameParser *self) {
  self->pos_++;
  if (self->pos_ == self->length_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unexpected end of DN: ", self->dn_));
  }
  switch (IOSCharArray_Get(nil_chk(self->chars_), self->pos_)) {
    case '"':
    case '\\':
    case ',':
    case '=':
    case '+':
    case '<':
    case '>':
    case '#':
    case ';':
    case ' ':
    case '*':
    case '%':
    case '_':
    return IOSCharArray_Get(self->chars_, self->pos_);
    default:
    return Okhttp3InternalTlsDistinguishedNameParser_getUTF8(self);
  }
}

jchar Okhttp3InternalTlsDistinguishedNameParser_getUTF8(Okhttp3InternalTlsDistinguishedNameParser *self) {
  jint res = Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(self, self->pos_);
  self->pos_++;
  if (res < 128) {
    return (jchar) res;
  }
  else if (res >= 192 && res <= 247) {
    jint count;
    if (res <= 223) {
      count = 1;
      res = res & (jint) 0x1F;
    }
    else if (res <= 239) {
      count = 2;
      res = res & (jint) 0x0F;
    }
    else {
      count = 3;
      res = res & (jint) 0x07;
    }
    jint b;
    for (jint i = 0; i < count; i++) {
      self->pos_++;
      if (self->pos_ == self->length_ || IOSCharArray_Get(nil_chk(self->chars_), self->pos_) != '\\') {
        return (jint) 0x3F;
      }
      self->pos_++;
      b = Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(self, self->pos_);
      self->pos_++;
      if ((b & (jint) 0xC0) != (jint) 0x80) {
        return (jint) 0x3F;
      }
      res = (JreLShift32(res, 6)) + (b & (jint) 0x3F);
    }
    return (jchar) res;
  }
  else {
    return (jint) 0x3F;
  }
}

jint Okhttp3InternalTlsDistinguishedNameParser_getByteWithInt_(Okhttp3InternalTlsDistinguishedNameParser *self, jint position) {
  if (position + 1 >= self->length_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Malformed DN: ", self->dn_));
  }
  jint b1;
  jint b2;
  b1 = IOSCharArray_Get(nil_chk(self->chars_), position);
  if (b1 >= '0' && b1 <= '9') {
    b1 = b1 - '0';
  }
  else if (b1 >= 'a' && b1 <= 'f') {
    b1 = b1 - 87;
  }
  else if (b1 >= 'A' && b1 <= 'F') {
    b1 = b1 - 55;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Malformed DN: ", self->dn_));
  }
  b2 = IOSCharArray_Get(self->chars_, position + 1);
  if (b2 >= '0' && b2 <= '9') {
    b2 = b2 - '0';
  }
  else if (b2 >= 'a' && b2 <= 'f') {
    b2 = b2 - 87;
  }
  else if (b2 >= 'A' && b2 <= 'F') {
    b2 = b2 - 55;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Malformed DN: ", self->dn_));
  }
  return (JreLShift32(b1, 4)) + b2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalTlsDistinguishedNameParser)
