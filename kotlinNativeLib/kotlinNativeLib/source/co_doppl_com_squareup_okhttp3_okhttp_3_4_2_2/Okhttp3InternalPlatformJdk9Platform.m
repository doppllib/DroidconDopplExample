//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalPlatformJdk9Platform.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLParameters.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/X509TrustManager.h"

@implementation Okhttp3InternalPlatformJdk9Platform

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)setProtocolMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)getProtocolMethod {
  Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(self, setProtocolMethod, getProtocolMethod);
  return self;
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
  @try {
    JavaxNetSslSSLParameters *sslParameters = [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) getSSLParameters];
    id<JavaUtilList> names = Okhttp3InternalPlatformPlatform_alpnProtocolNamesWithJavaUtilList_(protocols);
    [((JavaLangReflectMethod *) nil_chk(setProtocolMethod_)) invokeWithId:sslParameters withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((id<JavaUtilList>) nil_chk(names)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[names size] type:NSString_class_()]] } count:1 type:NSObject_class_()]];
    [sslSocket setSSLParametersWithJavaxNetSslSSLParameters:sslParameters];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangAssertionError_init();
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_JavaLangAssertionError_init();
  }
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  @try {
    NSString *protocol = (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk(getProtocolMethod_)) invokeWithId:socket withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
    if (protocol == nil || [protocol isEqual:@""]) {
      return nil;
    }
    return protocol;
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangAssertionError_init();
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_JavaLangAssertionError_init();
  }
}

- (id<JavaxNetSslX509TrustManager>)trustManagerWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+");
}

+ (Okhttp3InternalPlatformJdk9Platform *)buildIfSupported {
  return Okhttp3InternalPlatformJdk9Platform_buildIfSupported();
}

- (void)dealloc {
  RELEASE_(setProtocolMethod_);
  RELEASE_(getProtocolMethod_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSslX509TrustManager;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalPlatformJdk9Platform;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:withJavaLangReflectMethod:);
  methods[1].selector = @selector(configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:);
  methods[2].selector = @selector(getSelectedProtocolWithJavaxNetSslSSLSocket:);
  methods[3].selector = @selector(trustManagerWithJavaxNetSslSSLSocketFactory:);
  methods[4].selector = @selector(buildIfSupported);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "setProtocolMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "getProtocolMethod_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectMethod;LJavaLangReflectMethod;", "configureTlsExtensions", "LJavaxNetSslSSLSocket;LNSString;LJavaUtilList;", "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lokhttp3/Protocol;>;)V", "getSelectedProtocol", "LJavaxNetSslSSLSocket;", "trustManager", "LJavaxNetSslSSLSocketFactory;" };
  static const J2ObjcClassInfo _Okhttp3InternalPlatformJdk9Platform = { "Jdk9Platform", "okhttp3.internal.platform", ptrTable, methods, fields, 7, 0x10, 5, 2, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalPlatformJdk9Platform;
}

@end

void Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(Okhttp3InternalPlatformJdk9Platform *self, JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod) {
  Okhttp3InternalPlatformPlatform_init(self);
  JreStrongAssign(&self->setProtocolMethod_, setProtocolMethod);
  JreStrongAssign(&self->getProtocolMethod_, getProtocolMethod);
}

Okhttp3InternalPlatformJdk9Platform *new_Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod) {
  J2OBJC_NEW_IMPL(Okhttp3InternalPlatformJdk9Platform, initWithJavaLangReflectMethod_withJavaLangReflectMethod_, setProtocolMethod, getProtocolMethod)
}

Okhttp3InternalPlatformJdk9Platform *create_Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalPlatformJdk9Platform, initWithJavaLangReflectMethod_withJavaLangReflectMethod_, setProtocolMethod, getProtocolMethod)
}

Okhttp3InternalPlatformJdk9Platform *Okhttp3InternalPlatformJdk9Platform_buildIfSupported() {
  Okhttp3InternalPlatformJdk9Platform_initialize();
  @try {
    JavaLangReflectMethod *setProtocolMethod = [JavaxNetSslSSLParameters_class_() getMethod:@"setApplicationProtocols" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_arrayType(NSString_class_(), 1) } count:1 type:IOSClass_class_()]];
    JavaLangReflectMethod *getProtocolMethod = [JavaxNetSslSSLSocket_class_() getMethod:@"getApplicationProtocol" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    return create_Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(setProtocolMethod, getProtocolMethod);
  }
  @catch (JavaLangNoSuchMethodException *ignored) {
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalPlatformJdk9Platform)
