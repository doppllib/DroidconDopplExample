//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3CertificatePinner")
#ifdef RESTRICT_Okhttp3CertificatePinner
#define INCLUDE_ALL_Okhttp3CertificatePinner 0
#else
#define INCLUDE_ALL_Okhttp3CertificatePinner 1
#endif
#undef RESTRICT_Okhttp3CertificatePinner

#if !defined (Okhttp3CertificatePinner_) && (INCLUDE_ALL_Okhttp3CertificatePinner || defined(INCLUDE_Okhttp3CertificatePinner))
#define Okhttp3CertificatePinner_

@class IOSObjectArray;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509Certificate;
@class Okhttp3InternalTlsCertificateChainCleaner;
@class OkioByteString;
@protocol JavaUtilList;

@interface Okhttp3CertificatePinner : NSObject

+ (Okhttp3CertificatePinner *)DEFAULT;

#pragma mark Public

- (void)checkWithNSString:(NSString *)hostname
withJavaSecurityCertCertificateArray:(IOSObjectArray *)peerCertificates;

- (void)checkWithNSString:(NSString *)hostname
         withJavaUtilList:(id<JavaUtilList>)peerCertificates;

+ (NSString *)pinWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate;

#pragma mark Package-Private

- (id<JavaUtilList>)findMatchingPinsWithNSString:(NSString *)hostname;

+ (OkioByteString *)sha1WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)x509Certificate;

+ (OkioByteString *)sha256WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)x509Certificate;

- (Okhttp3CertificatePinner *)withCertificateChainCleanerWithOkhttp3InternalTlsCertificateChainCleaner:(Okhttp3InternalTlsCertificateChainCleaner *)certificateChainCleaner;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(Okhttp3CertificatePinner)

inline Okhttp3CertificatePinner *Okhttp3CertificatePinner_get_DEFAULT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT Okhttp3CertificatePinner *Okhttp3CertificatePinner_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3CertificatePinner, DEFAULT, Okhttp3CertificatePinner *)

FOUNDATION_EXPORT NSString *Okhttp3CertificatePinner_pinWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *certificate);

FOUNDATION_EXPORT OkioByteString *Okhttp3CertificatePinner_sha1WithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *x509Certificate);

FOUNDATION_EXPORT OkioByteString *Okhttp3CertificatePinner_sha256WithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *x509Certificate);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3CertificatePinner)

#endif

#if !defined (Okhttp3CertificatePinner_Pin_) && (INCLUDE_ALL_Okhttp3CertificatePinner || defined(INCLUDE_Okhttp3CertificatePinner_Pin))
#define Okhttp3CertificatePinner_Pin_

@class OkioByteString;

@interface Okhttp3CertificatePinner_Pin : NSObject {
 @public
  NSString *pattern_;
  NSString *canonicalHostname_;
  NSString *hashAlgorithm_;
  OkioByteString *hash__;
}

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)pattern
                    withNSString:(NSString *)pin;

- (jboolean)matchesWithNSString:(NSString *)hostname;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3CertificatePinner_Pin)

J2OBJC_FIELD_SETTER(Okhttp3CertificatePinner_Pin, pattern_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3CertificatePinner_Pin, canonicalHostname_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3CertificatePinner_Pin, hashAlgorithm_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3CertificatePinner_Pin, hash__, OkioByteString *)

FOUNDATION_EXPORT void Okhttp3CertificatePinner_Pin_initWithNSString_withNSString_(Okhttp3CertificatePinner_Pin *self, NSString *pattern, NSString *pin);

FOUNDATION_EXPORT Okhttp3CertificatePinner_Pin *new_Okhttp3CertificatePinner_Pin_initWithNSString_withNSString_(NSString *pattern, NSString *pin) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3CertificatePinner_Pin *create_Okhttp3CertificatePinner_Pin_initWithNSString_withNSString_(NSString *pattern, NSString *pin);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3CertificatePinner_Pin)

#endif

#if !defined (Okhttp3CertificatePinner_Builder_) && (INCLUDE_ALL_Okhttp3CertificatePinner || defined(INCLUDE_Okhttp3CertificatePinner_Builder))
#define Okhttp3CertificatePinner_Builder_

@class IOSObjectArray;
@class Okhttp3CertificatePinner;

@interface Okhttp3CertificatePinner_Builder : NSObject

#pragma mark Public

- (instancetype)init;

- (Okhttp3CertificatePinner_Builder *)addWithNSString:(NSString *)pattern
                                    withNSStringArray:(IOSObjectArray *)pins;

- (Okhttp3CertificatePinner *)build;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3CertificatePinner_Builder)

FOUNDATION_EXPORT void Okhttp3CertificatePinner_Builder_init(Okhttp3CertificatePinner_Builder *self);

FOUNDATION_EXPORT Okhttp3CertificatePinner_Builder *new_Okhttp3CertificatePinner_Builder_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3CertificatePinner_Builder *create_Okhttp3CertificatePinner_Builder_init();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3CertificatePinner_Builder)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3CertificatePinner")
