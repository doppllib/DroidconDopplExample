//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3CookieJar.h"
#include "Okhttp3HttpUrl.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface Okhttp3CookieJar_1 : NSObject < Okhttp3CookieJar >

- (instancetype)init;

- (void)saveFromResponseWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                          withJavaUtilList:(id<JavaUtilList>)cookies;

- (id<JavaUtilList>)loadForRequestWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3CookieJar_1)

__attribute__((unused)) static void Okhttp3CookieJar_1_init(Okhttp3CookieJar_1 *self);

__attribute__((unused)) static Okhttp3CookieJar_1 *new_Okhttp3CookieJar_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3CookieJar_1 *create_Okhttp3CookieJar_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3CookieJar)

id<Okhttp3CookieJar> Okhttp3CookieJar_NO_COOKIES;

@implementation Okhttp3CookieJar

+ (id<Okhttp3CookieJar>)NO_COOKIES {
  return Okhttp3CookieJar_NO_COOKIES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(saveFromResponseWithOkhttp3HttpUrl:withJavaUtilList:);
  methods[1].selector = @selector(loadForRequestWithOkhttp3HttpUrl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_COOKIES", "LOkhttp3CookieJar;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "saveFromResponse", "LOkhttp3HttpUrl;LJavaUtilList;", "(Lokhttp3/HttpUrl;Ljava/util/List<Lokhttp3/Cookie;>;)V", "loadForRequest", "LOkhttp3HttpUrl;", "(Lokhttp3/HttpUrl;)Ljava/util/List<Lokhttp3/Cookie;>;", &Okhttp3CookieJar_NO_COOKIES };
  static const J2ObjcClassInfo _Okhttp3CookieJar = { "CookieJar", "okhttp3", ptrTable, methods, fields, 7, 0x609, 2, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3CookieJar;
}

+ (void)initialize {
  if (self == [Okhttp3CookieJar class]) {
    JreStrongAssignAndConsume(&Okhttp3CookieJar_NO_COOKIES, new_Okhttp3CookieJar_1_init());
    J2OBJC_SET_INITIALIZED(Okhttp3CookieJar)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3CookieJar)

@implementation Okhttp3CookieJar_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3CookieJar_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)saveFromResponseWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                          withJavaUtilList:(id<JavaUtilList>)cookies {
}

- (id<JavaUtilList>)loadForRequestWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  return JavaUtilCollections_emptyList();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(saveFromResponseWithOkhttp3HttpUrl:withJavaUtilList:);
  methods[2].selector = @selector(loadForRequestWithOkhttp3HttpUrl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "saveFromResponse", "LOkhttp3HttpUrl;LJavaUtilList;", "(Lokhttp3/HttpUrl;Ljava/util/List<Lokhttp3/Cookie;>;)V", "loadForRequest", "LOkhttp3HttpUrl;", "(Lokhttp3/HttpUrl;)Ljava/util/List<Lokhttp3/Cookie;>;", "LOkhttp3CookieJar;" };
  static const J2ObjcClassInfo _Okhttp3CookieJar_1 = { "", "okhttp3", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 6, -1, -1, -1, -1 };
  return &_Okhttp3CookieJar_1;
}

@end

void Okhttp3CookieJar_1_init(Okhttp3CookieJar_1 *self) {
  NSObject_init(self);
}

Okhttp3CookieJar_1 *new_Okhttp3CookieJar_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3CookieJar_1, init)
}

Okhttp3CookieJar_1 *create_Okhttp3CookieJar_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3CookieJar_1, init)
}
