//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalIoFileSystem.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"

@interface Okhttp3InternalIoFileSystem_1 : NSObject < Okhttp3InternalIoFileSystem >

- (instancetype)init;

- (id<OkioSource>)sourceWithJavaIoFile:(JavaIoFile *)file;

- (id<OkioSink>)sinkWithJavaIoFile:(JavaIoFile *)file;

- (id<OkioSink>)appendingSinkWithJavaIoFile:(JavaIoFile *)file;

- (void)delete__WithJavaIoFile:(JavaIoFile *)file;

- (jboolean)existsWithJavaIoFile:(JavaIoFile *)file;

- (jlong)sizeWithJavaIoFile:(JavaIoFile *)file;

- (void)renameWithJavaIoFile:(JavaIoFile *)from
              withJavaIoFile:(JavaIoFile *)to;

- (void)deleteContentsWithJavaIoFile:(JavaIoFile *)directory;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalIoFileSystem_1)

__attribute__((unused)) static void Okhttp3InternalIoFileSystem_1_init(Okhttp3InternalIoFileSystem_1 *self);

__attribute__((unused)) static Okhttp3InternalIoFileSystem_1 *new_Okhttp3InternalIoFileSystem_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalIoFileSystem_1 *create_Okhttp3InternalIoFileSystem_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalIoFileSystem)

id<Okhttp3InternalIoFileSystem> Okhttp3InternalIoFileSystem_SYSTEM;

@implementation Okhttp3InternalIoFileSystem

+ (id<Okhttp3InternalIoFileSystem>)SYSTEM {
  return Okhttp3InternalIoFileSystem_SYSTEM;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkioSource;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x401, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x401, 4, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 1, 6, -1, -1, -1 },
    { NULL, "Z", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 1, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(sourceWithJavaIoFile:);
  methods[1].selector = @selector(sinkWithJavaIoFile:);
  methods[2].selector = @selector(appendingSinkWithJavaIoFile:);
  methods[3].selector = @selector(delete__WithJavaIoFile:);
  methods[4].selector = @selector(existsWithJavaIoFile:);
  methods[5].selector = @selector(sizeWithJavaIoFile:);
  methods[6].selector = @selector(renameWithJavaIoFile:withJavaIoFile:);
  methods[7].selector = @selector(deleteContentsWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SYSTEM", "LOkhttp3InternalIoFileSystem;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "source", "LJavaIoFile;", "LJavaIoFileNotFoundException;", "sink", "appendingSink", "delete", "LJavaIoIOException;", "exists", "size", "rename", "LJavaIoFile;LJavaIoFile;", "deleteContents", &Okhttp3InternalIoFileSystem_SYSTEM };
  static const J2ObjcClassInfo _Okhttp3InternalIoFileSystem = { "FileSystem", "okhttp3.internal.io", ptrTable, methods, fields, 7, 0x609, 8, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalIoFileSystem;
}

+ (void)initialize {
  if (self == [Okhttp3InternalIoFileSystem class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalIoFileSystem_SYSTEM, new_Okhttp3InternalIoFileSystem_1_init());
    J2OBJC_SET_INITIALIZED(Okhttp3InternalIoFileSystem)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3InternalIoFileSystem)

@implementation Okhttp3InternalIoFileSystem_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalIoFileSystem_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OkioSource>)sourceWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_sourceWithJavaIoFile_(file);
}

- (id<OkioSink>)sinkWithJavaIoFile:(JavaIoFile *)file {
  @try {
    return OkioOkio_sinkWithJavaIoFile_(file);
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaIoFile *) nil_chk([((JavaIoFile *) nil_chk(file)) getParentFile])) mkdirs];
    return OkioOkio_sinkWithJavaIoFile_(file);
  }
}

- (id<OkioSink>)appendingSinkWithJavaIoFile:(JavaIoFile *)file {
  @try {
    return OkioOkio_appendingSinkWithJavaIoFile_(file);
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaIoFile *) nil_chk([((JavaIoFile *) nil_chk(file)) getParentFile])) mkdirs];
    return OkioOkio_appendingSinkWithJavaIoFile_(file);
  }
}

- (void)delete__WithJavaIoFile:(JavaIoFile *)file {
  if (![((JavaIoFile *) nil_chk(file)) delete__] && [file exists]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete ", file));
  }
}

- (jboolean)existsWithJavaIoFile:(JavaIoFile *)file {
  return [((JavaIoFile *) nil_chk(file)) exists];
}

- (jlong)sizeWithJavaIoFile:(JavaIoFile *)file {
  return [((JavaIoFile *) nil_chk(file)) length];
}

- (void)renameWithJavaIoFile:(JavaIoFile *)from
              withJavaIoFile:(JavaIoFile *)to {
  [self delete__WithJavaIoFile:to];
  if (![((JavaIoFile *) nil_chk(from)) renameToWithJavaIoFile:to]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@", @"failed to rename ", from, @" to ", to));
  }
}

- (void)deleteContentsWithJavaIoFile:(JavaIoFile *)directory {
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(directory)) listFiles];
  if (files == nil) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"not a readable directory: ", directory));
  }
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
        [self deleteContentsWithJavaIoFile:file];
      }
      if (![file delete__]) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete ", file));
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 4, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sourceWithJavaIoFile:);
  methods[2].selector = @selector(sinkWithJavaIoFile:);
  methods[3].selector = @selector(appendingSinkWithJavaIoFile:);
  methods[4].selector = @selector(delete__WithJavaIoFile:);
  methods[5].selector = @selector(existsWithJavaIoFile:);
  methods[6].selector = @selector(sizeWithJavaIoFile:);
  methods[7].selector = @selector(renameWithJavaIoFile:withJavaIoFile:);
  methods[8].selector = @selector(deleteContentsWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "source", "LJavaIoFile;", "LJavaIoFileNotFoundException;", "sink", "appendingSink", "delete", "LJavaIoIOException;", "exists", "size", "rename", "LJavaIoFile;LJavaIoFile;", "deleteContents", "LOkhttp3InternalIoFileSystem;" };
  static const J2ObjcClassInfo _Okhttp3InternalIoFileSystem_1 = { "", "okhttp3.internal.io", ptrTable, methods, NULL, 7, 0x8018, 9, 0, 12, -1, -1, -1, -1 };
  return &_Okhttp3InternalIoFileSystem_1;
}

@end

void Okhttp3InternalIoFileSystem_1_init(Okhttp3InternalIoFileSystem_1 *self) {
  NSObject_init(self);
}

Okhttp3InternalIoFileSystem_1 *new_Okhttp3InternalIoFileSystem_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalIoFileSystem_1, init)
}

Okhttp3InternalIoFileSystem_1 *create_Okhttp3InternalIoFileSystem_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalIoFileSystem_1, init)
}
