//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Headers.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3MultipartBody.h"
#include "Okhttp3RequestBody.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/UUID.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/ByteString.h"

@interface Okhttp3MultipartBody () {
 @public
  OkioByteString *boundary_;
  Okhttp3MediaType *originalType_;
  Okhttp3MediaType *contentType_;
  id<JavaUtilList> parts_;
  jlong contentLength_;
}

- (jlong)writeOrCountBytesWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                   withBoolean:(jboolean)countBytes;

@end

J2OBJC_FIELD_SETTER(Okhttp3MultipartBody, boundary_, OkioByteString *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody, originalType_, Okhttp3MediaType *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody, contentType_, Okhttp3MediaType *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody, parts_, id<JavaUtilList>)

inline IOSByteArray *Okhttp3MultipartBody_get_COLONSPACE();
static IOSByteArray *Okhttp3MultipartBody_COLONSPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MultipartBody, COLONSPACE, IOSByteArray *)

inline IOSByteArray *Okhttp3MultipartBody_get_CRLF();
static IOSByteArray *Okhttp3MultipartBody_CRLF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MultipartBody, CRLF, IOSByteArray *)

inline IOSByteArray *Okhttp3MultipartBody_get_DASHDASH();
static IOSByteArray *Okhttp3MultipartBody_DASHDASH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MultipartBody, DASHDASH, IOSByteArray *)

__attribute__((unused)) static jlong Okhttp3MultipartBody_writeOrCountBytesWithOkioBufferedSink_withBoolean_(Okhttp3MultipartBody *self, id<OkioBufferedSink> sink, jboolean countBytes);

@interface Okhttp3MultipartBody_Part () {
 @public
  Okhttp3Headers *headers_;
  Okhttp3RequestBody *body_;
}

- (instancetype)initWithOkhttp3Headers:(Okhttp3Headers *)headers
                withOkhttp3RequestBody:(Okhttp3RequestBody *)body;

@end

J2OBJC_FIELD_SETTER(Okhttp3MultipartBody_Part, headers_, Okhttp3Headers *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody_Part, body_, Okhttp3RequestBody *)

__attribute__((unused)) static void Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3MultipartBody_Part *self, Okhttp3Headers *headers, Okhttp3RequestBody *body);

__attribute__((unused)) static Okhttp3MultipartBody_Part *new_Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers *headers, Okhttp3RequestBody *body) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3MultipartBody_Part *create_Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers *headers, Okhttp3RequestBody *body);

@interface Okhttp3MultipartBody_Builder () {
 @public
  OkioByteString *boundary_;
  Okhttp3MediaType *type_;
  id<JavaUtilList> parts_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3MultipartBody_Builder, boundary_, OkioByteString *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody_Builder, type_, Okhttp3MediaType *)
J2OBJC_FIELD_SETTER(Okhttp3MultipartBody_Builder, parts_, id<JavaUtilList>)

J2OBJC_INITIALIZED_DEFN(Okhttp3MultipartBody)

Okhttp3MediaType *Okhttp3MultipartBody_MIXED;
Okhttp3MediaType *Okhttp3MultipartBody_ALTERNATIVE;
Okhttp3MediaType *Okhttp3MultipartBody_DIGEST;
Okhttp3MediaType *Okhttp3MultipartBody_PARALLEL;
Okhttp3MediaType *Okhttp3MultipartBody_FORM;

@implementation Okhttp3MultipartBody

+ (Okhttp3MediaType *)MIXED {
  return Okhttp3MultipartBody_MIXED;
}

+ (Okhttp3MediaType *)ALTERNATIVE {
  return Okhttp3MultipartBody_ALTERNATIVE;
}

+ (Okhttp3MediaType *)DIGEST {
  return Okhttp3MultipartBody_DIGEST;
}

+ (Okhttp3MediaType *)PARALLEL {
  return Okhttp3MultipartBody_PARALLEL;
}

+ (Okhttp3MediaType *)FORM {
  return Okhttp3MultipartBody_FORM;
}

- (instancetype)initWithOkioByteString:(OkioByteString *)boundary
                  withOkhttp3MediaType:(Okhttp3MediaType *)type
                      withJavaUtilList:(id<JavaUtilList>)parts {
  Okhttp3MultipartBody_initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_(self, boundary, type, parts);
  return self;
}

- (Okhttp3MediaType *)type {
  return originalType_;
}

- (NSString *)boundary {
  return [((OkioByteString *) nil_chk(boundary_)) utf8];
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(parts_)) size];
}

- (id<JavaUtilList>)parts {
  return parts_;
}

- (Okhttp3MultipartBody_Part *)partWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(parts_)) getWithInt:index];
}

- (Okhttp3MediaType *)contentType {
  return contentType_;
}

- (jlong)contentLength {
  jlong result = contentLength_;
  if (result != -1LL) return result;
  return contentLength_ = Okhttp3MultipartBody_writeOrCountBytesWithOkioBufferedSink_withBoolean_(self, nil, true);
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  Okhttp3MultipartBody_writeOrCountBytesWithOkioBufferedSink_withBoolean_(self, sink, false);
}

- (jlong)writeOrCountBytesWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                   withBoolean:(jboolean)countBytes {
  return Okhttp3MultipartBody_writeOrCountBytesWithOkioBufferedSink_withBoolean_(self, sink, countBytes);
}

+ (JavaLangStringBuilder *)appendQuotedStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)target
                                                          withNSString:(NSString *)key {
  return Okhttp3MultipartBody_appendQuotedStringWithJavaLangStringBuilder_withNSString_(target, key);
}

- (void)dealloc {
  RELEASE_(boundary_);
  RELEASE_(originalType_);
  RELEASE_(contentType_);
  RELEASE_(parts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Part;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "J", 0x2, 8, 9, 5, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioByteString:withOkhttp3MediaType:withJavaUtilList:);
  methods[1].selector = @selector(type);
  methods[2].selector = @selector(boundary);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(parts);
  methods[5].selector = @selector(partWithInt:);
  methods[6].selector = @selector(contentType);
  methods[7].selector = @selector(contentLength);
  methods[8].selector = @selector(writeToWithOkioBufferedSink:);
  methods[9].selector = @selector(writeOrCountBytesWithOkioBufferedSink:withBoolean:);
  methods[10].selector = @selector(appendQuotedStringWithJavaLangStringBuilder:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIXED", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "ALTERNATIVE", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "DIGEST", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "PARALLEL", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "FORM", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "COLONSPACE", "[B", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "CRLF", "[B", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "DASHDASH", "[B", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "boundary_", "LOkioByteString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "originalType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parts_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "contentLength_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioByteString;LOkhttp3MediaType;LJavaUtilList;", "(Lokio/ByteString;Lokhttp3/MediaType;Ljava/util/List<Lokhttp3/MultipartBody$Part;>;)V", "()Ljava/util/List<Lokhttp3/MultipartBody$Part;>;", "part", "I", "LJavaIoIOException;", "writeTo", "LOkioBufferedSink;", "writeOrCountBytes", "LOkioBufferedSink;Z", "appendQuotedString", "LJavaLangStringBuilder;LNSString;", &Okhttp3MultipartBody_MIXED, &Okhttp3MultipartBody_ALTERNATIVE, &Okhttp3MultipartBody_DIGEST, &Okhttp3MultipartBody_PARALLEL, &Okhttp3MultipartBody_FORM, &Okhttp3MultipartBody_COLONSPACE, &Okhttp3MultipartBody_CRLF, &Okhttp3MultipartBody_DASHDASH, "Ljava/util/List<Lokhttp3/MultipartBody$Part;>;", "LOkhttp3MultipartBody_Part;LOkhttp3MultipartBody_Builder;" };
  static const J2ObjcClassInfo _Okhttp3MultipartBody = { "MultipartBody", "okhttp3", ptrTable, methods, fields, 7, 0x11, 11, 13, -1, 21, -1, -1, -1 };
  return &_Okhttp3MultipartBody;
}

+ (void)initialize {
  if (self == [Okhttp3MultipartBody class]) {
    JreStrongAssign(&Okhttp3MultipartBody_MIXED, Okhttp3MediaType_parseWithNSString_(@"multipart/mixed"));
    JreStrongAssign(&Okhttp3MultipartBody_ALTERNATIVE, Okhttp3MediaType_parseWithNSString_(@"multipart/alternative"));
    JreStrongAssign(&Okhttp3MultipartBody_DIGEST, Okhttp3MediaType_parseWithNSString_(@"multipart/digest"));
    JreStrongAssign(&Okhttp3MultipartBody_PARALLEL, Okhttp3MediaType_parseWithNSString_(@"multipart/parallel"));
    JreStrongAssign(&Okhttp3MultipartBody_FORM, Okhttp3MediaType_parseWithNSString_(@"multipart/form-data"));
    JreStrongAssignAndConsume(&Okhttp3MultipartBody_COLONSPACE, [IOSByteArray newArrayWithBytes:(jbyte[]){ ':', ' ' } count:2]);
    JreStrongAssignAndConsume(&Okhttp3MultipartBody_CRLF, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0x000d, 0x000a } count:2]);
    JreStrongAssignAndConsume(&Okhttp3MultipartBody_DASHDASH, [IOSByteArray newArrayWithBytes:(jbyte[]){ '-', '-' } count:2]);
    J2OBJC_SET_INITIALIZED(Okhttp3MultipartBody)
  }
}

@end

void Okhttp3MultipartBody_initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_(Okhttp3MultipartBody *self, OkioByteString *boundary, Okhttp3MediaType *type, id<JavaUtilList> parts) {
  Okhttp3RequestBody_init(self);
  self->contentLength_ = -1LL;
  JreStrongAssign(&self->boundary_, boundary);
  JreStrongAssign(&self->originalType_, type);
  JreStrongAssign(&self->contentType_, Okhttp3MediaType_parseWithNSString_(JreStrcat("@$$", type, @"; boundary=", [((OkioByteString *) nil_chk(boundary)) utf8])));
  JreStrongAssign(&self->parts_, Okhttp3InternalUtil_immutableListWithJavaUtilList_(parts));
}

Okhttp3MultipartBody *new_Okhttp3MultipartBody_initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_(OkioByteString *boundary, Okhttp3MediaType *type, id<JavaUtilList> parts) {
  J2OBJC_NEW_IMPL(Okhttp3MultipartBody, initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_, boundary, type, parts)
}

Okhttp3MultipartBody *create_Okhttp3MultipartBody_initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_(OkioByteString *boundary, Okhttp3MediaType *type, id<JavaUtilList> parts) {
  J2OBJC_CREATE_IMPL(Okhttp3MultipartBody, initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_, boundary, type, parts)
}

jlong Okhttp3MultipartBody_writeOrCountBytesWithOkioBufferedSink_withBoolean_(Okhttp3MultipartBody *self, id<OkioBufferedSink> sink, jboolean countBytes) {
  jlong byteCount = 0LL;
  OkioBuffer *byteCountBuffer = nil;
  if (countBytes) {
    sink = byteCountBuffer = create_OkioBuffer_init();
  }
  for (jint p = 0, partCount = [((id<JavaUtilList>) nil_chk(self->parts_)) size]; p < partCount; p++) {
    Okhttp3MultipartBody_Part *part = [self->parts_ getWithInt:p];
    Okhttp3Headers *headers = ((Okhttp3MultipartBody_Part *) nil_chk(part))->headers_;
    Okhttp3RequestBody *body = part->body_;
    [((id<OkioBufferedSink>) nil_chk(sink)) writeWithByteArray:Okhttp3MultipartBody_DASHDASH];
    [sink writeWithOkioByteString:self->boundary_];
    [sink writeWithByteArray:Okhttp3MultipartBody_CRLF];
    if (headers != nil) {
      for (jint h = 0, headerCount = [headers size]; h < headerCount; h++) {
        [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:[headers nameWithInt:h]])) writeWithByteArray:Okhttp3MultipartBody_COLONSPACE])) writeUtf8WithNSString:[headers valueWithInt:h]])) writeWithByteArray:Okhttp3MultipartBody_CRLF];
      }
    }
    Okhttp3MediaType *contentType = [((Okhttp3RequestBody *) nil_chk(body)) contentType];
    if (contentType != nil) {
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:@"Content-Type: "])) writeUtf8WithNSString:[contentType description]])) writeWithByteArray:Okhttp3MultipartBody_CRLF];
    }
    jlong contentLength = [body contentLength];
    if (contentLength != -1) {
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink writeUtf8WithNSString:@"Content-Length: "])) writeDecimalLongWithLong:contentLength])) writeWithByteArray:Okhttp3MultipartBody_CRLF];
    }
    else if (countBytes) {
      [((OkioBuffer *) nil_chk(byteCountBuffer)) clear];
      return -1LL;
    }
    [sink writeWithByteArray:Okhttp3MultipartBody_CRLF];
    if (countBytes) {
      byteCount += contentLength;
    }
    else {
      [body writeToWithOkioBufferedSink:sink];
    }
    [sink writeWithByteArray:Okhttp3MultipartBody_CRLF];
  }
  [((id<OkioBufferedSink>) nil_chk(sink)) writeWithByteArray:Okhttp3MultipartBody_DASHDASH];
  [sink writeWithOkioByteString:self->boundary_];
  [sink writeWithByteArray:Okhttp3MultipartBody_DASHDASH];
  [sink writeWithByteArray:Okhttp3MultipartBody_CRLF];
  if (countBytes) {
    byteCount += [((OkioBuffer *) nil_chk(byteCountBuffer)) size];
    [byteCountBuffer clear];
  }
  return byteCount;
}

JavaLangStringBuilder *Okhttp3MultipartBody_appendQuotedStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *target, NSString *key) {
  Okhttp3MultipartBody_initialize();
  [((JavaLangStringBuilder *) nil_chk(target)) appendWithChar:'"'];
  for (jint i = 0, len = [((NSString *) nil_chk(key)) java_length]; i < len; i++) {
    jchar ch = [key charAtWithInt:i];
    switch (ch) {
      case 0x000a:
      [target appendWithNSString:@"%0A"];
      break;
      case 0x000d:
      [target appendWithNSString:@"%0D"];
      break;
      case '"':
      [target appendWithNSString:@"%22"];
      break;
      default:
      [target appendWithChar:ch];
      break;
    }
  }
  [target appendWithChar:'"'];
  return target;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3MultipartBody)

@implementation Okhttp3MultipartBody_Part

+ (Okhttp3MultipartBody_Part *)createWithOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return Okhttp3MultipartBody_Part_createWithOkhttp3RequestBody_(body);
}

+ (Okhttp3MultipartBody_Part *)createWithOkhttp3Headers:(Okhttp3Headers *)headers
                                 withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return Okhttp3MultipartBody_Part_createWithOkhttp3Headers_withOkhttp3RequestBody_(headers, body);
}

+ (Okhttp3MultipartBody_Part *)createFormDataWithNSString:(NSString *)name
                                             withNSString:(NSString *)value {
  return Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_(name, value);
}

+ (Okhttp3MultipartBody_Part *)createFormDataWithNSString:(NSString *)name
                                             withNSString:(NSString *)filename
                                   withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_withOkhttp3RequestBody_(name, filename, body);
}

- (instancetype)initWithOkhttp3Headers:(Okhttp3Headers *)headers
                withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(self, headers, body);
  return self;
}

- (void)dealloc {
  RELEASE_(headers_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3MultipartBody_Part;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Part;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Part;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Part;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithOkhttp3RequestBody:);
  methods[1].selector = @selector(createWithOkhttp3Headers:withOkhttp3RequestBody:);
  methods[2].selector = @selector(createFormDataWithNSString:withNSString:);
  methods[3].selector = @selector(createFormDataWithNSString:withNSString:withOkhttp3RequestBody:);
  methods[4].selector = @selector(initWithOkhttp3Headers:withOkhttp3RequestBody:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "headers_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "body_", "LOkhttp3RequestBody;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LOkhttp3RequestBody;", "LOkhttp3Headers;LOkhttp3RequestBody;", "createFormData", "LNSString;LNSString;", "LNSString;LNSString;LOkhttp3RequestBody;", "LOkhttp3MultipartBody;" };
  static const J2ObjcClassInfo _Okhttp3MultipartBody_Part = { "Part", "okhttp3", ptrTable, methods, fields, 7, 0x19, 5, 2, 6, -1, -1, -1, -1 };
  return &_Okhttp3MultipartBody_Part;
}

@end

Okhttp3MultipartBody_Part *Okhttp3MultipartBody_Part_createWithOkhttp3RequestBody_(Okhttp3RequestBody *body) {
  Okhttp3MultipartBody_Part_initialize();
  return Okhttp3MultipartBody_Part_createWithOkhttp3Headers_withOkhttp3RequestBody_(nil, body);
}

Okhttp3MultipartBody_Part *Okhttp3MultipartBody_Part_createWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers *headers, Okhttp3RequestBody *body) {
  Okhttp3MultipartBody_Part_initialize();
  if (body == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"body == null");
  }
  if (headers != nil && [headers getWithNSString:@"Content-Type"] != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unexpected header: Content-Type");
  }
  if (headers != nil && [headers getWithNSString:@"Content-Length"] != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unexpected header: Content-Length");
  }
  return create_Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(headers, body);
}

Okhttp3MultipartBody_Part *Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_(NSString *name, NSString *value) {
  Okhttp3MultipartBody_Part_initialize();
  return Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_withOkhttp3RequestBody_(name, nil, Okhttp3RequestBody_createWithOkhttp3MediaType_withNSString_(nil, value));
}

Okhttp3MultipartBody_Part *Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_withOkhttp3RequestBody_(NSString *name, NSString *filename, Okhttp3RequestBody *body) {
  Okhttp3MultipartBody_Part_initialize();
  if (name == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"name == null");
  }
  JavaLangStringBuilder *disposition = create_JavaLangStringBuilder_initWithNSString_(@"form-data; name=");
  Okhttp3MultipartBody_appendQuotedStringWithJavaLangStringBuilder_withNSString_(disposition, name);
  if (filename != nil) {
    [disposition appendWithNSString:@"; filename="];
    Okhttp3MultipartBody_appendQuotedStringWithJavaLangStringBuilder_withNSString_(disposition, filename);
  }
  return Okhttp3MultipartBody_Part_createWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers_ofWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Content-Disposition", [disposition description] } count:2 type:NSString_class_()]), body);
}

void Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3MultipartBody_Part *self, Okhttp3Headers *headers, Okhttp3RequestBody *body) {
  NSObject_init(self);
  JreStrongAssign(&self->headers_, headers);
  JreStrongAssign(&self->body_, body);
}

Okhttp3MultipartBody_Part *new_Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers *headers, Okhttp3RequestBody *body) {
  J2OBJC_NEW_IMPL(Okhttp3MultipartBody_Part, initWithOkhttp3Headers_withOkhttp3RequestBody_, headers, body)
}

Okhttp3MultipartBody_Part *create_Okhttp3MultipartBody_Part_initWithOkhttp3Headers_withOkhttp3RequestBody_(Okhttp3Headers *headers, Okhttp3RequestBody *body) {
  J2OBJC_CREATE_IMPL(Okhttp3MultipartBody_Part, initWithOkhttp3Headers_withOkhttp3RequestBody_, headers, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3MultipartBody_Part)

@implementation Okhttp3MultipartBody_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3MultipartBody_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)boundary {
  Okhttp3MultipartBody_Builder_initWithNSString_(self, boundary);
  return self;
}

- (Okhttp3MultipartBody_Builder *)setTypeWithOkhttp3MediaType:(Okhttp3MediaType *)type {
  if (type == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"type == null");
  }
  if (![((NSString *) nil_chk([type type])) isEqual:@"multipart"]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"multipart != ", type));
  }
  JreStrongAssign(&self->type_, type);
  return self;
}

- (Okhttp3MultipartBody_Builder *)addPartWithOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return [self addPartWithOkhttp3MultipartBody_Part:Okhttp3MultipartBody_Part_createWithOkhttp3RequestBody_(body)];
}

- (Okhttp3MultipartBody_Builder *)addPartWithOkhttp3Headers:(Okhttp3Headers *)headers
                                     withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return [self addPartWithOkhttp3MultipartBody_Part:Okhttp3MultipartBody_Part_createWithOkhttp3Headers_withOkhttp3RequestBody_(headers, body)];
}

- (Okhttp3MultipartBody_Builder *)addFormDataPartWithNSString:(NSString *)name
                                                 withNSString:(NSString *)value {
  return [self addPartWithOkhttp3MultipartBody_Part:Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_(name, value)];
}

- (Okhttp3MultipartBody_Builder *)addFormDataPartWithNSString:(NSString *)name
                                                 withNSString:(NSString *)filename
                                       withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  return [self addPartWithOkhttp3MultipartBody_Part:Okhttp3MultipartBody_Part_createFormDataWithNSString_withNSString_withOkhttp3RequestBody_(name, filename, body)];
}

- (Okhttp3MultipartBody_Builder *)addPartWithOkhttp3MultipartBody_Part:(Okhttp3MultipartBody_Part *)part {
  if (part == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"part == null");
  [((id<JavaUtilList>) nil_chk(parts_)) addWithId:part];
  return self;
}

- (Okhttp3MultipartBody *)build {
  if ([((id<JavaUtilList>) nil_chk(parts_)) isEmpty]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Multipart body must have at least one part.");
  }
  return create_Okhttp3MultipartBody_initWithOkioByteString_withOkhttp3MediaType_withJavaUtilList_(boundary_, type_, parts_);
}

- (void)dealloc {
  RELEASE_(boundary_);
  RELEASE_(type_);
  RELEASE_(parts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody_Builder;", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MultipartBody;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(setTypeWithOkhttp3MediaType:);
  methods[3].selector = @selector(addPartWithOkhttp3RequestBody:);
  methods[4].selector = @selector(addPartWithOkhttp3Headers:withOkhttp3RequestBody:);
  methods[5].selector = @selector(addFormDataPartWithNSString:withNSString:);
  methods[6].selector = @selector(addFormDataPartWithNSString:withNSString:withOkhttp3RequestBody:);
  methods[7].selector = @selector(addPartWithOkhttp3MultipartBody_Part:);
  methods[8].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundary_", "LOkioByteString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parts_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setType", "LOkhttp3MediaType;", "addPart", "LOkhttp3RequestBody;", "LOkhttp3Headers;LOkhttp3RequestBody;", "addFormDataPart", "LNSString;LNSString;", "LNSString;LNSString;LOkhttp3RequestBody;", "LOkhttp3MultipartBody_Part;", "Ljava/util/List<Lokhttp3/MultipartBody$Part;>;", "LOkhttp3MultipartBody;" };
  static const J2ObjcClassInfo _Okhttp3MultipartBody_Builder = { "Builder", "okhttp3", ptrTable, methods, fields, 7, 0x19, 9, 3, 11, -1, -1, -1, -1 };
  return &_Okhttp3MultipartBody_Builder;
}

@end

void Okhttp3MultipartBody_Builder_init(Okhttp3MultipartBody_Builder *self) {
  Okhttp3MultipartBody_Builder_initWithNSString_(self, [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description]);
}

Okhttp3MultipartBody_Builder *new_Okhttp3MultipartBody_Builder_init() {
  J2OBJC_NEW_IMPL(Okhttp3MultipartBody_Builder, init)
}

Okhttp3MultipartBody_Builder *create_Okhttp3MultipartBody_Builder_init() {
  J2OBJC_CREATE_IMPL(Okhttp3MultipartBody_Builder, init)
}

void Okhttp3MultipartBody_Builder_initWithNSString_(Okhttp3MultipartBody_Builder *self, NSString *boundary) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, JreLoadStatic(Okhttp3MultipartBody, MIXED));
  JreStrongAssignAndConsume(&self->parts_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->boundary_, OkioByteString_encodeUtf8WithNSString_(boundary));
}

Okhttp3MultipartBody_Builder *new_Okhttp3MultipartBody_Builder_initWithNSString_(NSString *boundary) {
  J2OBJC_NEW_IMPL(Okhttp3MultipartBody_Builder, initWithNSString_, boundary)
}

Okhttp3MultipartBody_Builder *create_Okhttp3MultipartBody_Builder_initWithNSString_(NSString *boundary) {
  J2OBJC_CREATE_IMPL(Okhttp3MultipartBody_Builder, initWithNSString_, boundary)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3MultipartBody_Builder)
