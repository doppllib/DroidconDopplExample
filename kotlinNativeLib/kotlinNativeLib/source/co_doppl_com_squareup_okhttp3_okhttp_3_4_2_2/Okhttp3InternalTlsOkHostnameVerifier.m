//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalTlsDistinguishedNameParser.h"
#include "Okhttp3InternalTlsOkHostnameVerifier.h"
#include "Okhttp3InternalUtil.h"
#include "java/lang/Integer.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface Okhttp3InternalTlsOkHostnameVerifier ()

- (instancetype)init;

- (jboolean)verifyIpAddressWithNSString:(NSString *)ipAddress
    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate;

- (jboolean)verifyHostnameWithNSString:(NSString *)hostname
   withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate;

+ (id<JavaUtilList>)getSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate
                                                                  withInt:(jint)type;

- (jboolean)verifyHostnameWithNSString:(NSString *)hostname
                          withNSString:(NSString *)pattern;

@end

inline jint Okhttp3InternalTlsOkHostnameVerifier_get_ALT_DNS_NAME();
#define Okhttp3InternalTlsOkHostnameVerifier_ALT_DNS_NAME 2
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalTlsOkHostnameVerifier, ALT_DNS_NAME, jint)

inline jint Okhttp3InternalTlsOkHostnameVerifier_get_ALT_IPA_NAME();
#define Okhttp3InternalTlsOkHostnameVerifier_ALT_IPA_NAME 7
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalTlsOkHostnameVerifier, ALT_IPA_NAME, jint)

__attribute__((unused)) static void Okhttp3InternalTlsOkHostnameVerifier_init(Okhttp3InternalTlsOkHostnameVerifier *self);

__attribute__((unused)) static Okhttp3InternalTlsOkHostnameVerifier *new_Okhttp3InternalTlsOkHostnameVerifier_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalTlsOkHostnameVerifier *create_Okhttp3InternalTlsOkHostnameVerifier_init();

__attribute__((unused)) static jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *ipAddress, JavaSecurityCertX509Certificate *certificate);

__attribute__((unused)) static jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *hostname, JavaSecurityCertX509Certificate *certificate);

__attribute__((unused)) static id<JavaUtilList> Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *certificate, jint type);

__attribute__((unused)) static jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withNSString_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *hostname, NSString *pattern);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalTlsOkHostnameVerifier)

Okhttp3InternalTlsOkHostnameVerifier *Okhttp3InternalTlsOkHostnameVerifier_INSTANCE;

@implementation Okhttp3InternalTlsOkHostnameVerifier

+ (Okhttp3InternalTlsOkHostnameVerifier *)INSTANCE {
  return Okhttp3InternalTlsOkHostnameVerifier_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalTlsOkHostnameVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)verifyWithNSString:(NSString *)host
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  @try {
    IOSObjectArray *certificates = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getPeerCertificates];
    return [self verifyWithNSString:host withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(certificates), 0), [JavaSecurityCertX509Certificate class])];
  }
  @catch (JavaxNetSslSSLException *e) {
    return false;
  }
}

- (jboolean)verifyWithNSString:(NSString *)host
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return Okhttp3InternalUtil_verifyAsIpAddressWithNSString_(host) ? Okhttp3InternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(self, host, certificate) : Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withJavaSecurityCertX509Certificate_(self, host, certificate);
}

- (jboolean)verifyIpAddressWithNSString:(NSString *)ipAddress
    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return Okhttp3InternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(self, ipAddress, certificate);
}

- (jboolean)verifyHostnameWithNSString:(NSString *)hostname
   withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withJavaSecurityCertX509Certificate_(self, hostname, certificate);
}

+ (id<JavaUtilList>)allSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return Okhttp3InternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(certificate);
}

+ (id<JavaUtilList>)getSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate
                                                                  withInt:(jint)type {
  return Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, type);
}

- (jboolean)verifyHostnameWithNSString:(NSString *)hostname
                          withNSString:(NSString *)pattern {
  return Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withNSString_(self, hostname, pattern);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x2, 4, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyWithNSString:withJavaxNetSslSSLSession:);
  methods[2].selector = @selector(verifyWithNSString:withJavaSecurityCertX509Certificate:);
  methods[3].selector = @selector(verifyIpAddressWithNSString:withJavaSecurityCertX509Certificate:);
  methods[4].selector = @selector(verifyHostnameWithNSString:withJavaSecurityCertX509Certificate:);
  methods[5].selector = @selector(allSubjectAltNamesWithJavaSecurityCertX509Certificate:);
  methods[6].selector = @selector(getSubjectAltNamesWithJavaSecurityCertX509Certificate:withInt:);
  methods[7].selector = @selector(verifyHostnameWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOkhttp3InternalTlsOkHostnameVerifier;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "ALT_DNS_NAME", "I", .constantValue.asInt = Okhttp3InternalTlsOkHostnameVerifier_ALT_DNS_NAME, 0x1a, -1, -1, -1, -1 },
    { "ALT_IPA_NAME", "I", .constantValue.asInt = Okhttp3InternalTlsOkHostnameVerifier_ALT_IPA_NAME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "verify", "LNSString;LJavaxNetSslSSLSession;", "LNSString;LJavaSecurityCertX509Certificate;", "verifyIpAddress", "verifyHostname", "allSubjectAltNames", "LJavaSecurityCertX509Certificate;", "(Ljava/security/cert/X509Certificate;)Ljava/util/List<Ljava/lang/String;>;", "getSubjectAltNames", "LJavaSecurityCertX509Certificate;I", "(Ljava/security/cert/X509Certificate;I)Ljava/util/List<Ljava/lang/String;>;", "LNSString;LNSString;", &Okhttp3InternalTlsOkHostnameVerifier_INSTANCE };
  static const J2ObjcClassInfo _Okhttp3InternalTlsOkHostnameVerifier = { "OkHostnameVerifier", "okhttp3.internal.tls", ptrTable, methods, fields, 7, 0x11, 8, 3, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalTlsOkHostnameVerifier;
}

+ (void)initialize {
  if (self == [Okhttp3InternalTlsOkHostnameVerifier class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalTlsOkHostnameVerifier_INSTANCE, new_Okhttp3InternalTlsOkHostnameVerifier_init());
    J2OBJC_SET_INITIALIZED(Okhttp3InternalTlsOkHostnameVerifier)
  }
}

@end

void Okhttp3InternalTlsOkHostnameVerifier_init(Okhttp3InternalTlsOkHostnameVerifier *self) {
  NSObject_init(self);
}

Okhttp3InternalTlsOkHostnameVerifier *new_Okhttp3InternalTlsOkHostnameVerifier_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalTlsOkHostnameVerifier, init)
}

Okhttp3InternalTlsOkHostnameVerifier *create_Okhttp3InternalTlsOkHostnameVerifier_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalTlsOkHostnameVerifier, init)
}

jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *ipAddress, JavaSecurityCertX509Certificate *certificate) {
  id<JavaUtilList> altNames = Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, Okhttp3InternalTlsOkHostnameVerifier_ALT_IPA_NAME);
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(altNames)) size]; i < size; i++) {
    if ([((NSString *) nil_chk(ipAddress)) java_equalsIgnoreCase:[altNames getWithInt:i]]) {
      return true;
    }
  }
  return false;
}

jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withJavaSecurityCertX509Certificate_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *hostname, JavaSecurityCertX509Certificate *certificate) {
  hostname = [((NSString *) nil_chk(hostname)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  jboolean hasDns = false;
  id<JavaUtilList> altNames = Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, Okhttp3InternalTlsOkHostnameVerifier_ALT_DNS_NAME);
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(altNames)) size]; i < size; i++) {
    hasDns = true;
    if (Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withNSString_(self, hostname, [altNames getWithInt:i])) {
      return true;
    }
  }
  if (!hasDns) {
    JavaxSecurityAuthX500X500Principal *principal = [((JavaSecurityCertX509Certificate *) nil_chk(certificate)) getSubjectX500Principal];
    NSString *cn = [create_Okhttp3InternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(principal) findMostSpecificWithNSString:@"cn"];
    if (cn != nil) {
      return Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withNSString_(self, hostname, cn);
    }
  }
  return false;
}

id<JavaUtilList> Okhttp3InternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *certificate) {
  Okhttp3InternalTlsOkHostnameVerifier_initialize();
  id<JavaUtilList> altIpaNames = Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, Okhttp3InternalTlsOkHostnameVerifier_ALT_IPA_NAME);
  id<JavaUtilList> altDnsNames = Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, Okhttp3InternalTlsOkHostnameVerifier_ALT_DNS_NAME);
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(altIpaNames)) size] + [((id<JavaUtilList>) nil_chk(altDnsNames)) size]);
  [result addAllWithJavaUtilCollection:altIpaNames];
  [result addAllWithJavaUtilCollection:altDnsNames];
  return result;
}

id<JavaUtilList> Okhttp3InternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *certificate, jint type) {
  Okhttp3InternalTlsOkHostnameVerifier_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  @try {
    id<JavaUtilCollection> subjectAltNames = [((JavaSecurityCertX509Certificate *) nil_chk(certificate)) getSubjectAlternativeNames];
    if (subjectAltNames == nil) {
      return JavaUtilCollections_emptyList();
    }
    for (id __strong subjectAltName in subjectAltNames) {
      id<JavaUtilList> entry_ = (id<JavaUtilList>) cast_check(subjectAltName, JavaUtilList_class_());
      if (entry_ == nil || [entry_ size] < 2) {
        continue;
      }
      JavaLangInteger *altNameType = (JavaLangInteger *) cast_chk([entry_ getWithInt:0], [JavaLangInteger class]);
      if (altNameType == nil) {
        continue;
      }
      if ([altNameType intValue] == type) {
        NSString *altName = (NSString *) cast_chk([entry_ getWithInt:1], [NSString class]);
        if (altName != nil) {
          [result addWithId:altName];
        }
      }
    }
    return result;
  }
  @catch (JavaSecurityCertCertificateParsingException *e) {
    return JavaUtilCollections_emptyList();
  }
}

jboolean Okhttp3InternalTlsOkHostnameVerifier_verifyHostnameWithNSString_withNSString_(Okhttp3InternalTlsOkHostnameVerifier *self, NSString *hostname, NSString *pattern) {
  if ((hostname == nil) || ([((NSString *) nil_chk(hostname)) java_length] == 0) || ([hostname java_hasPrefix:@"."]) || ([hostname java_hasSuffix:@".."])) {
    return false;
  }
  if ((pattern == nil) || ([((NSString *) nil_chk(pattern)) java_length] == 0) || ([pattern java_hasPrefix:@"."]) || ([pattern java_hasSuffix:@".."])) {
    return false;
  }
  if (![((NSString *) nil_chk(hostname)) java_hasSuffix:@"."]) {
    JreStrAppend(&hostname, "C", '.');
  }
  if (![((NSString *) nil_chk(pattern)) java_hasSuffix:@"."]) {
    JreStrAppend(&pattern, "C", '.');
  }
  pattern = [pattern java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if (![((NSString *) nil_chk(pattern)) java_contains:@"*"]) {
    return [hostname isEqual:pattern];
  }
  if ((![pattern java_hasPrefix:@"*."]) || ([pattern java_indexOf:'*' fromIndex:1] != -1)) {
    return false;
  }
  if ([hostname java_length] < [pattern java_length]) {
    return false;
  }
  if ([@"*." isEqual:pattern]) {
    return false;
  }
  NSString *suffix = [pattern java_substring:1];
  if (![hostname java_hasSuffix:suffix]) {
    return false;
  }
  jint suffixStartIndexInHostname = [hostname java_length] - [((NSString *) nil_chk(suffix)) java_length];
  if ((suffixStartIndexInHostname > 0) && ([hostname java_lastIndexOf:'.' fromIndex:suffixStartIndexInHostname - 1] != -1)) {
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalTlsOkHostnameVerifier)
