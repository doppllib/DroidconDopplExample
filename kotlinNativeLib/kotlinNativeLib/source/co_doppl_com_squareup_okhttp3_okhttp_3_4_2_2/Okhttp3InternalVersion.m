//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3InternalVersion.h"

@interface Okhttp3InternalVersion ()

- (instancetype)init;

@end

__attribute__((unused)) static void Okhttp3InternalVersion_init(Okhttp3InternalVersion *self);

__attribute__((unused)) static Okhttp3InternalVersion *new_Okhttp3InternalVersion_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalVersion *create_Okhttp3InternalVersion_init();

@implementation Okhttp3InternalVersion

+ (NSString *)userAgent {
  return Okhttp3InternalVersion_userAgent();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalVersion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(userAgent);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _Okhttp3InternalVersion = { "Version", "okhttp3.internal", NULL, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalVersion;
}

@end

NSString *Okhttp3InternalVersion_userAgent() {
  Okhttp3InternalVersion_initialize();
  return @"okhttp/3.4.2";
}

void Okhttp3InternalVersion_init(Okhttp3InternalVersion *self) {
  NSObject_init(self);
}

Okhttp3InternalVersion *new_Okhttp3InternalVersion_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalVersion, init)
}

Okhttp3InternalVersion *create_Okhttp3InternalVersion_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalVersion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalVersion)
