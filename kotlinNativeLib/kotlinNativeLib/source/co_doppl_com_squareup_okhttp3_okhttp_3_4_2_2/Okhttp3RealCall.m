//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Callback.h"
#include "Okhttp3CookieJar.h"
#include "Okhttp3Dispatcher.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3Interceptor.h"
#include "Okhttp3InternalCacheCacheInterceptor.h"
#include "Okhttp3InternalCacheInternalCache.h"
#include "Okhttp3InternalConnectionConnectInterceptor.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalHttpBridgeInterceptor.h"
#include "Okhttp3InternalHttpCallServerInterceptor.h"
#include "Okhttp3InternalHttpRealInterceptorChain.h"
#include "Okhttp3InternalHttpRetryAndFollowUpInterceptor.h"
#include "Okhttp3InternalNamedRunnable.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3OkHttpClient.h"
#include "Okhttp3RealCall.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface Okhttp3RealCall () {
 @public
  Okhttp3OkHttpClient *client_;
  Okhttp3InternalHttpRetryAndFollowUpInterceptor *retryAndFollowUpInterceptor_;
  jboolean executed_;
}

- (NSString *)toLoggableString;

- (Okhttp3Response *)getResponseWithInterceptorChain;

@end

J2OBJC_FIELD_SETTER(Okhttp3RealCall, client_, Okhttp3OkHttpClient *)
J2OBJC_FIELD_SETTER(Okhttp3RealCall, retryAndFollowUpInterceptor_, Okhttp3InternalHttpRetryAndFollowUpInterceptor *)

__attribute__((unused)) static NSString *Okhttp3RealCall_toLoggableString(Okhttp3RealCall *self);

__attribute__((unused)) static Okhttp3Response *Okhttp3RealCall_getResponseWithInterceptorChain(Okhttp3RealCall *self);

@interface Okhttp3RealCall_AsyncCall () {
 @public
  Okhttp3RealCall *this$0_;
  id<Okhttp3Callback> responseCallback_;
}

- (instancetype)initWithOkhttp3RealCall:(Okhttp3RealCall *)outer$
                    withOkhttp3Callback:(id<Okhttp3Callback>)responseCallback;

@end

J2OBJC_FIELD_SETTER(Okhttp3RealCall_AsyncCall, responseCallback_, id<Okhttp3Callback>)

__attribute__((unused)) static void Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall_AsyncCall *self, Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback);

__attribute__((unused)) static Okhttp3RealCall_AsyncCall *new_Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3RealCall_AsyncCall *create_Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback);

@implementation Okhttp3RealCall

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                         withOkhttp3Request:(Okhttp3Request *)originalRequest {
  Okhttp3RealCall_initWithOkhttp3OkHttpClient_withOkhttp3Request_(self, client, originalRequest);
  return self;
}

- (Okhttp3Request *)request {
  return originalRequest_;
}

- (Okhttp3Response *)execute {
  @synchronized(self) {
    if (executed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already Executed");
    executed_ = true;
  }
  @try {
    [((Okhttp3Dispatcher *) nil_chk([((Okhttp3OkHttpClient *) nil_chk(client_)) dispatcher])) executedWithOkhttp3RealCall:self];
    Okhttp3Response *result = Okhttp3RealCall_getResponseWithInterceptorChain(self);
    if (result == nil) @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
    return result;
  }
  @finally {
    [((Okhttp3Dispatcher *) nil_chk([client_ dispatcher])) finishedWithOkhttp3RealCall:self];
  }
}

- (void)setForWebSocket {
  @synchronized(self) {
    if (executed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already Executed");
    [((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(self->retryAndFollowUpInterceptor_)) setForWebSocketWithBoolean:true];
  }
}

- (void)enqueueWithOkhttp3Callback:(id<Okhttp3Callback>)responseCallback {
  @synchronized(self) {
    if (executed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already Executed");
    executed_ = true;
  }
  [((Okhttp3Dispatcher *) nil_chk([((Okhttp3OkHttpClient *) nil_chk(client_)) dispatcher])) enqueueWithOkhttp3RealCall_AsyncCall:create_Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(self, responseCallback)];
}

- (void)cancel {
  [((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(retryAndFollowUpInterceptor_)) cancel];
}

- (jboolean)isExecuted {
  @synchronized(self) {
    return executed_;
  }
}

- (jboolean)isCanceled {
  return [((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(retryAndFollowUpInterceptor_)) isCanceled];
}

- (Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  return [((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(retryAndFollowUpInterceptor_)) streamAllocation];
}

- (NSString *)toLoggableString {
  return Okhttp3RealCall_toLoggableString(self);
}

- (Okhttp3HttpUrl *)redactedUrl {
  return [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(originalRequest_)) url])) resolveWithNSString:@"/..."];
}

- (Okhttp3Response *)getResponseWithInterceptorChain {
  return Okhttp3RealCall_getResponseWithInterceptorChain(self);
}

- (void)dealloc {
  RELEASE_(client_);
  RELEASE_(retryAndFollowUpInterceptor_);
  RELEASE_(originalRequest_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionStreamAllocation;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3OkHttpClient:withOkhttp3Request:);
  methods[1].selector = @selector(request);
  methods[2].selector = @selector(execute);
  methods[3].selector = @selector(setForWebSocket);
  methods[4].selector = @selector(enqueueWithOkhttp3Callback:);
  methods[5].selector = @selector(cancel);
  methods[6].selector = @selector(isExecuted);
  methods[7].selector = @selector(isCanceled);
  methods[8].selector = @selector(streamAllocation);
  methods[9].selector = @selector(toLoggableString);
  methods[10].selector = @selector(redactedUrl);
  methods[11].selector = @selector(getResponseWithInterceptorChain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_", "LOkhttp3OkHttpClient;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "retryAndFollowUpInterceptor_", "LOkhttp3InternalHttpRetryAndFollowUpInterceptor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "executed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalRequest_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3OkHttpClient;LOkhttp3Request;", "LJavaIoIOException;", "enqueue", "LOkhttp3Callback;", "LOkhttp3RealCall_AsyncCall;" };
  static const J2ObjcClassInfo _Okhttp3RealCall = { "RealCall", "okhttp3", ptrTable, methods, fields, 7, 0x10, 12, 4, -1, 4, -1, -1, -1 };
  return &_Okhttp3RealCall;
}

@end

void Okhttp3RealCall_initWithOkhttp3OkHttpClient_withOkhttp3Request_(Okhttp3RealCall *self, Okhttp3OkHttpClient *client, Okhttp3Request *originalRequest) {
  NSObject_init(self);
  JreStrongAssign(&self->client_, client);
  JreStrongAssign(&self->originalRequest_, originalRequest);
  JreStrongAssignAndConsume(&self->retryAndFollowUpInterceptor_, new_Okhttp3InternalHttpRetryAndFollowUpInterceptor_initWithOkhttp3OkHttpClient_(client));
}

Okhttp3RealCall *new_Okhttp3RealCall_initWithOkhttp3OkHttpClient_withOkhttp3Request_(Okhttp3OkHttpClient *client, Okhttp3Request *originalRequest) {
  J2OBJC_NEW_IMPL(Okhttp3RealCall, initWithOkhttp3OkHttpClient_withOkhttp3Request_, client, originalRequest)
}

Okhttp3RealCall *create_Okhttp3RealCall_initWithOkhttp3OkHttpClient_withOkhttp3Request_(Okhttp3OkHttpClient *client, Okhttp3Request *originalRequest) {
  J2OBJC_CREATE_IMPL(Okhttp3RealCall, initWithOkhttp3OkHttpClient_withOkhttp3Request_, client, originalRequest)
}

NSString *Okhttp3RealCall_toLoggableString(Okhttp3RealCall *self) {
  NSString *string = [((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(self->retryAndFollowUpInterceptor_)) isCanceled] ? @"canceled call" : @"call";
  return JreStrcat("$$@", string, @" to ", [self redactedUrl]);
}

Okhttp3Response *Okhttp3RealCall_getResponseWithInterceptorChain(Okhttp3RealCall *self) {
  id<JavaUtilList> interceptors = create_JavaUtilArrayList_init();
  [interceptors addAllWithJavaUtilCollection:[((Okhttp3OkHttpClient *) nil_chk(self->client_)) interceptors]];
  [interceptors addWithId:self->retryAndFollowUpInterceptor_];
  [interceptors addWithId:create_Okhttp3InternalHttpBridgeInterceptor_initWithOkhttp3CookieJar_([self->client_ cookieJar])];
  [interceptors addWithId:create_Okhttp3InternalCacheCacheInterceptor_initWithOkhttp3InternalCacheInternalCache_([self->client_ internalCache])];
  [interceptors addWithId:create_Okhttp3InternalConnectionConnectInterceptor_initWithOkhttp3OkHttpClient_(self->client_)];
  if (![((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(self->retryAndFollowUpInterceptor_)) isForWebSocket]) {
    [interceptors addAllWithJavaUtilCollection:[self->client_ networkInterceptors]];
  }
  [interceptors addWithId:create_Okhttp3InternalHttpCallServerInterceptor_initWithBoolean_([self->retryAndFollowUpInterceptor_ isForWebSocket])];
  id<Okhttp3Interceptor_Chain> chain = create_Okhttp3InternalHttpRealInterceptorChain_initWithJavaUtilList_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttpHttpStream_withOkhttp3Connection_withInt_withOkhttp3Request_(interceptors, nil, nil, nil, 0, self->originalRequest_);
  return [chain proceedWithOkhttp3Request:self->originalRequest_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3RealCall)

@implementation Okhttp3RealCall_AsyncCall

- (instancetype)initWithOkhttp3RealCall:(Okhttp3RealCall *)outer$
                    withOkhttp3Callback:(id<Okhttp3Callback>)responseCallback {
  Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(self, outer$, responseCallback);
  return self;
}

- (NSString *)host {
  return [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(this$0_->originalRequest_)) url])) host];
}

- (Okhttp3Request *)request {
  return this$0_->originalRequest_;
}

- (Okhttp3RealCall *)get {
  return this$0_;
}

- (void)execute {
  jboolean signalledCallback = false;
  @try {
    Okhttp3Response *response = Okhttp3RealCall_getResponseWithInterceptorChain(this$0_);
    if ([((Okhttp3InternalHttpRetryAndFollowUpInterceptor *) nil_chk(this$0_->retryAndFollowUpInterceptor_)) isCanceled]) {
      signalledCallback = true;
      [((id<Okhttp3Callback>) nil_chk(responseCallback_)) onFailureWithOkhttp3Call:this$0_ withJavaIoIOException:create_JavaIoIOException_initWithNSString_(@"Canceled")];
    }
    else {
      signalledCallback = true;
      [((id<Okhttp3Callback>) nil_chk(responseCallback_)) onResponseWithOkhttp3Call:this$0_ withOkhttp3Response:response];
    }
  }
  @catch (JavaIoIOException *e) {
    if (signalledCallback) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_INFO withNSString:JreStrcat("$$", @"Callback failure for ", Okhttp3RealCall_toLoggableString(this$0_)) withJavaLangThrowable:e];
    }
    else {
      [((id<Okhttp3Callback>) nil_chk(responseCallback_)) onFailureWithOkhttp3Call:this$0_ withJavaIoIOException:e];
    }
  }
  @finally {
    [((Okhttp3Dispatcher *) nil_chk([((Okhttp3OkHttpClient *) nil_chk(this$0_->client_)) dispatcher])) finishedWithOkhttp3RealCall_AsyncCall:self];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(responseCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3RealCall;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3RealCall:withOkhttp3Callback:);
  methods[1].selector = @selector(host);
  methods[2].selector = @selector(request);
  methods[3].selector = @selector(get);
  methods[4].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3RealCall;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "responseCallback_", "LOkhttp3Callback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Callback;", "LOkhttp3RealCall;" };
  static const J2ObjcClassInfo _Okhttp3RealCall_AsyncCall = { "AsyncCall", "okhttp3", ptrTable, methods, fields, 7, 0x10, 5, 2, 1, -1, -1, -1, -1 };
  return &_Okhttp3RealCall_AsyncCall;
}

@end

void Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall_AsyncCall *self, Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback) {
  JreStrongAssign(&self->this$0_, outer$);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, @"OkHttp %s", [IOSObjectArray arrayWithObjects:(id[]){ [((Okhttp3HttpUrl *) nil_chk([outer$ redactedUrl])) description] } count:1 type:NSObject_class_()]);
  JreStrongAssign(&self->responseCallback_, responseCallback);
}

Okhttp3RealCall_AsyncCall *new_Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback) {
  J2OBJC_NEW_IMPL(Okhttp3RealCall_AsyncCall, initWithOkhttp3RealCall_withOkhttp3Callback_, outer$, responseCallback)
}

Okhttp3RealCall_AsyncCall *create_Okhttp3RealCall_AsyncCall_initWithOkhttp3RealCall_withOkhttp3Callback_(Okhttp3RealCall *outer$, id<Okhttp3Callback> responseCallback) {
  J2OBJC_CREATE_IMPL(Okhttp3RealCall_AsyncCall, initWithOkhttp3RealCall_withOkhttp3Callback_, outer$, responseCallback)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3RealCall_AsyncCall)
