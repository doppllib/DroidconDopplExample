//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Cookie.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalHttpHttpDate.h"
#include "Okhttp3InternalUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface Okhttp3Cookie () {
 @public
  NSString *name_;
  NSString *value_;
  jlong expiresAt_;
  NSString *domain_;
  NSString *path_;
  jboolean secure_;
  jboolean httpOnly_;
  jboolean persistent_;
  jboolean hostOnly_;
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                        withLong:(jlong)expiresAt
                    withNSString:(NSString *)domain
                    withNSString:(NSString *)path
                     withBoolean:(jboolean)secure
                     withBoolean:(jboolean)httpOnly
                     withBoolean:(jboolean)hostOnly
                     withBoolean:(jboolean)persistent;

- (instancetype)initWithOkhttp3Cookie_Builder:(Okhttp3Cookie_Builder *)builder;

+ (jboolean)domainMatchWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                             withNSString:(NSString *)domain;

+ (jboolean)pathMatchWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                           withNSString:(NSString *)path;

+ (jlong)parseExpiresWithNSString:(NSString *)s
                          withInt:(jint)pos
                          withInt:(jint)limit;

+ (jint)dateCharacterOffsetWithNSString:(NSString *)input
                                withInt:(jint)pos
                                withInt:(jint)limit
                            withBoolean:(jboolean)invert;

+ (jlong)parseMaxAgeWithNSString:(NSString *)s;

+ (NSString *)parseDomainWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(Okhttp3Cookie, name_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cookie, value_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cookie, domain_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Cookie, path_, NSString *)

inline JavaUtilRegexPattern *Okhttp3Cookie_get_YEAR_PATTERN();
static JavaUtilRegexPattern *Okhttp3Cookie_YEAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cookie, YEAR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *Okhttp3Cookie_get_MONTH_PATTERN();
static JavaUtilRegexPattern *Okhttp3Cookie_MONTH_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cookie, MONTH_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *Okhttp3Cookie_get_DAY_OF_MONTH_PATTERN();
static JavaUtilRegexPattern *Okhttp3Cookie_DAY_OF_MONTH_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cookie, DAY_OF_MONTH_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *Okhttp3Cookie_get_TIME_PATTERN();
static JavaUtilRegexPattern *Okhttp3Cookie_TIME_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3Cookie, TIME_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(Okhttp3Cookie *self, NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent);

__attribute__((unused)) static Okhttp3Cookie *new_Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cookie *create_Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent);

__attribute__((unused)) static void Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie *self, Okhttp3Cookie_Builder *builder);

__attribute__((unused)) static Okhttp3Cookie *new_Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Cookie *create_Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie_Builder *builder);

__attribute__((unused)) static jboolean Okhttp3Cookie_domainMatchWithOkhttp3HttpUrl_withNSString_(Okhttp3HttpUrl *url, NSString *domain);

__attribute__((unused)) static jboolean Okhttp3Cookie_pathMatchWithOkhttp3HttpUrl_withNSString_(Okhttp3HttpUrl *url, NSString *path);

__attribute__((unused)) static jlong Okhttp3Cookie_parseExpiresWithNSString_withInt_withInt_(NSString *s, jint pos, jint limit);

__attribute__((unused)) static jint Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(NSString *input, jint pos, jint limit, jboolean invert);

__attribute__((unused)) static jlong Okhttp3Cookie_parseMaxAgeWithNSString_(NSString *s);

__attribute__((unused)) static NSString *Okhttp3Cookie_parseDomainWithNSString_(NSString *s);

@interface Okhttp3Cookie_Builder ()

- (Okhttp3Cookie_Builder *)domainWithNSString:(NSString *)domain
                                  withBoolean:(jboolean)hostOnly;

@end

__attribute__((unused)) static Okhttp3Cookie_Builder *Okhttp3Cookie_Builder_domainWithNSString_withBoolean_(Okhttp3Cookie_Builder *self, NSString *domain, jboolean hostOnly);

J2OBJC_INITIALIZED_DEFN(Okhttp3Cookie)

@implementation Okhttp3Cookie

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                        withLong:(jlong)expiresAt
                    withNSString:(NSString *)domain
                    withNSString:(NSString *)path
                     withBoolean:(jboolean)secure
                     withBoolean:(jboolean)httpOnly
                     withBoolean:(jboolean)hostOnly
                     withBoolean:(jboolean)persistent {
  Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(self, name, value, expiresAt, domain, path, secure, httpOnly, hostOnly, persistent);
  return self;
}

- (instancetype)initWithOkhttp3Cookie_Builder:(Okhttp3Cookie_Builder *)builder {
  Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(self, builder);
  return self;
}

- (NSString *)name {
  return name_;
}

- (NSString *)value {
  return value_;
}

- (jboolean)persistent {
  return persistent_;
}

- (jlong)expiresAt {
  return expiresAt_;
}

- (jboolean)hostOnly {
  return hostOnly_;
}

- (NSString *)domain {
  return domain_;
}

- (NSString *)path {
  return path_;
}

- (jboolean)httpOnly {
  return httpOnly_;
}

- (jboolean)secure {
  return secure_;
}

- (jboolean)matchesWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  jboolean domainMatch = hostOnly_ ? [((NSString *) nil_chk([((Okhttp3HttpUrl *) nil_chk(url)) host])) isEqual:domain_] : Okhttp3Cookie_domainMatchWithOkhttp3HttpUrl_withNSString_(url, domain_);
  if (!domainMatch) return false;
  if (!Okhttp3Cookie_pathMatchWithOkhttp3HttpUrl_withNSString_(url, path_)) return false;
  if (secure_ && ![((Okhttp3HttpUrl *) nil_chk(url)) isHttps]) return false;
  return true;
}

+ (jboolean)domainMatchWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                             withNSString:(NSString *)domain {
  return Okhttp3Cookie_domainMatchWithOkhttp3HttpUrl_withNSString_(url, domain);
}

+ (jboolean)pathMatchWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                           withNSString:(NSString *)path {
  return Okhttp3Cookie_pathMatchWithOkhttp3HttpUrl_withNSString_(url, path);
}

+ (Okhttp3Cookie *)parseWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                              withNSString:(NSString *)setCookie {
  return Okhttp3Cookie_parseWithOkhttp3HttpUrl_withNSString_(url, setCookie);
}

+ (Okhttp3Cookie *)parseWithLong:(jlong)currentTimeMillis
              withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                    withNSString:(NSString *)setCookie {
  return Okhttp3Cookie_parseWithLong_withOkhttp3HttpUrl_withNSString_(currentTimeMillis, url, setCookie);
}

+ (jlong)parseExpiresWithNSString:(NSString *)s
                          withInt:(jint)pos
                          withInt:(jint)limit {
  return Okhttp3Cookie_parseExpiresWithNSString_withInt_withInt_(s, pos, limit);
}

+ (jint)dateCharacterOffsetWithNSString:(NSString *)input
                                withInt:(jint)pos
                                withInt:(jint)limit
                            withBoolean:(jboolean)invert {
  return Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(input, pos, limit, invert);
}

+ (jlong)parseMaxAgeWithNSString:(NSString *)s {
  return Okhttp3Cookie_parseMaxAgeWithNSString_(s);
}

+ (NSString *)parseDomainWithNSString:(NSString *)s {
  return Okhttp3Cookie_parseDomainWithNSString_(s);
}

+ (id<JavaUtilList>)parseAllWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                            withOkhttp3Headers:(Okhttp3Headers *)headers {
  return Okhttp3Cookie_parseAllWithOkhttp3HttpUrl_withOkhttp3Headers_(url, headers);
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  [result appendWithNSString:name_];
  [result appendWithChar:'='];
  [result appendWithNSString:value_];
  if (persistent_) {
    if (expiresAt_ == JavaLangLong_MIN_VALUE) {
      [result appendWithNSString:@"; max-age=0"];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"; expires="])) appendWithNSString:Okhttp3InternalHttpHttpDate_formatWithJavaUtilDate_(create_JavaUtilDate_initWithLong_(expiresAt_))];
    }
  }
  if (!hostOnly_) {
    [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"; domain="])) appendWithNSString:domain_];
  }
  [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"; path="])) appendWithNSString:path_];
  if (secure_) {
    [result appendWithNSString:@"; secure"];
  }
  if (httpOnly_) {
    [result appendWithNSString:@"; httponly"];
  }
  return [result description];
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[Okhttp3Cookie class]])) return false;
  Okhttp3Cookie *that = (Okhttp3Cookie *) cast_chk(other, [Okhttp3Cookie class]);
  return [((NSString *) nil_chk(((Okhttp3Cookie *) nil_chk(that))->name_)) isEqual:name_] && [((NSString *) nil_chk(that->value_)) isEqual:value_] && [((NSString *) nil_chk(that->domain_)) isEqual:domain_] && [((NSString *) nil_chk(that->path_)) isEqual:path_] && that->expiresAt_ == expiresAt_ && that->secure_ == secure_ && that->httpOnly_ == httpOnly_ && that->persistent_ == persistent_ && that->hostOnly_ == hostOnly_;
}

- (NSUInteger)hash {
  jint hash_ = 17;
  hash_ = 31 * hash_ + ((jint) [((NSString *) nil_chk(name_)) hash]);
  hash_ = 31 * hash_ + ((jint) [((NSString *) nil_chk(value_)) hash]);
  hash_ = 31 * hash_ + ((jint) [((NSString *) nil_chk(domain_)) hash]);
  hash_ = 31 * hash_ + ((jint) [((NSString *) nil_chk(path_)) hash]);
  hash_ = 31 * hash_ + (jint) (expiresAt_ ^ (JreURShift64(expiresAt_, 32)));
  hash_ = 31 * hash_ + (secure_ ? 0 : 1);
  hash_ = 31 * hash_ + (httpOnly_ ? 0 : 1);
  hash_ = 31 * hash_ + (persistent_ ? 0 : 1);
  hash_ = 31 * hash_ + (hostOnly_ ? 0 : 1);
  return hash_;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(value_);
  RELEASE_(domain_);
  RELEASE_(path_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie;", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 15, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withLong:withNSString:withNSString:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(initWithOkhttp3Cookie_Builder:);
  methods[2].selector = @selector(name);
  methods[3].selector = @selector(value);
  methods[4].selector = @selector(persistent);
  methods[5].selector = @selector(expiresAt);
  methods[6].selector = @selector(hostOnly);
  methods[7].selector = @selector(domain);
  methods[8].selector = @selector(path);
  methods[9].selector = @selector(httpOnly);
  methods[10].selector = @selector(secure);
  methods[11].selector = @selector(matchesWithOkhttp3HttpUrl:);
  methods[12].selector = @selector(domainMatchWithOkhttp3HttpUrl:withNSString:);
  methods[13].selector = @selector(pathMatchWithOkhttp3HttpUrl:withNSString:);
  methods[14].selector = @selector(parseWithOkhttp3HttpUrl:withNSString:);
  methods[15].selector = @selector(parseWithLong:withOkhttp3HttpUrl:withNSString:);
  methods[16].selector = @selector(parseExpiresWithNSString:withInt:withInt:);
  methods[17].selector = @selector(dateCharacterOffsetWithNSString:withInt:withInt:withBoolean:);
  methods[18].selector = @selector(parseMaxAgeWithNSString:);
  methods[19].selector = @selector(parseDomainWithNSString:);
  methods[20].selector = @selector(parseAllWithOkhttp3HttpUrl:withOkhttp3Headers:);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YEAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "MONTH_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "DAY_OF_MONTH_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "TIME_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "expiresAt_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "domain_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secure_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "httpOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "persistent_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hostOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;JLNSString;LNSString;ZZZZ", "LOkhttp3Cookie_Builder;", "matches", "LOkhttp3HttpUrl;", "domainMatch", "LOkhttp3HttpUrl;LNSString;", "pathMatch", "parse", "JLOkhttp3HttpUrl;LNSString;", "parseExpires", "LNSString;II", "dateCharacterOffset", "LNSString;IIZ", "parseMaxAge", "LNSString;", "parseDomain", "parseAll", "LOkhttp3HttpUrl;LOkhttp3Headers;", "(Lokhttp3/HttpUrl;Lokhttp3/Headers;)Ljava/util/List<Lokhttp3/Cookie;>;", "toString", "equals", "LNSObject;", "hashCode", &Okhttp3Cookie_YEAR_PATTERN, &Okhttp3Cookie_MONTH_PATTERN, &Okhttp3Cookie_DAY_OF_MONTH_PATTERN, &Okhttp3Cookie_TIME_PATTERN };
  static const J2ObjcClassInfo _Okhttp3Cookie = { "Cookie", "okhttp3", ptrTable, methods, fields, 7, 0x11, 24, 13, -1, 1, -1, -1, -1 };
  return &_Okhttp3Cookie;
}

+ (void)initialize {
  if (self == [Okhttp3Cookie class]) {
    JreStrongAssign(&Okhttp3Cookie_YEAR_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\d{2,4})[^\\d]*"));
    JreStrongAssign(&Okhttp3Cookie_MONTH_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(?i)(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec).*"));
    JreStrongAssign(&Okhttp3Cookie_DAY_OF_MONTH_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\d{1,2})[^\\d]*"));
    JreStrongAssign(&Okhttp3Cookie_TIME_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\d{1,2}):(\\d{1,2}):(\\d{1,2})[^\\d]*"));
    J2OBJC_SET_INITIALIZED(Okhttp3Cookie)
  }
}

@end

void Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(Okhttp3Cookie *self, NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->value_, value);
  self->expiresAt_ = expiresAt;
  JreStrongAssign(&self->domain_, domain);
  JreStrongAssign(&self->path_, path);
  self->secure_ = secure;
  self->httpOnly_ = httpOnly;
  self->hostOnly_ = hostOnly;
  self->persistent_ = persistent;
}

Okhttp3Cookie *new_Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent) {
  J2OBJC_NEW_IMPL(Okhttp3Cookie, initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_, name, value, expiresAt, domain, path, secure, httpOnly, hostOnly, persistent)
}

Okhttp3Cookie *create_Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *name, NSString *value, jlong expiresAt, NSString *domain, NSString *path, jboolean secure, jboolean httpOnly, jboolean hostOnly, jboolean persistent) {
  J2OBJC_CREATE_IMPL(Okhttp3Cookie, initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_, name, value, expiresAt, domain, path, secure, httpOnly, hostOnly, persistent)
}

void Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie *self, Okhttp3Cookie_Builder *builder) {
  NSObject_init(self);
  if (((Okhttp3Cookie_Builder *) nil_chk(builder))->name_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"builder.name == null");
  if (builder->value_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"builder.value == null");
  if (builder->domain_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"builder.domain == null");
  JreStrongAssign(&self->name_, builder->name_);
  JreStrongAssign(&self->value_, builder->value_);
  self->expiresAt_ = builder->expiresAt_;
  JreStrongAssign(&self->domain_, builder->domain_);
  JreStrongAssign(&self->path_, builder->path_);
  self->secure_ = builder->secure_;
  self->httpOnly_ = builder->httpOnly_;
  self->persistent_ = builder->persistent_;
  self->hostOnly_ = builder->hostOnly_;
}

Okhttp3Cookie *new_Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie_Builder *builder) {
  J2OBJC_NEW_IMPL(Okhttp3Cookie, initWithOkhttp3Cookie_Builder_, builder)
}

Okhttp3Cookie *create_Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(Okhttp3Cookie_Builder *builder) {
  J2OBJC_CREATE_IMPL(Okhttp3Cookie, initWithOkhttp3Cookie_Builder_, builder)
}

jboolean Okhttp3Cookie_domainMatchWithOkhttp3HttpUrl_withNSString_(Okhttp3HttpUrl *url, NSString *domain) {
  Okhttp3Cookie_initialize();
  NSString *urlHost = [((Okhttp3HttpUrl *) nil_chk(url)) host];
  if ([((NSString *) nil_chk(urlHost)) isEqual:domain]) {
    return true;
  }
  if ([urlHost java_hasSuffix:domain] && [urlHost charAtWithInt:[urlHost java_length] - [((NSString *) nil_chk(domain)) java_length] - 1] == '.' && !Okhttp3InternalUtil_verifyAsIpAddressWithNSString_(urlHost)) {
    return true;
  }
  return false;
}

jboolean Okhttp3Cookie_pathMatchWithOkhttp3HttpUrl_withNSString_(Okhttp3HttpUrl *url, NSString *path) {
  Okhttp3Cookie_initialize();
  NSString *urlPath = [((Okhttp3HttpUrl *) nil_chk(url)) encodedPath];
  if ([((NSString *) nil_chk(urlPath)) isEqual:path]) {
    return true;
  }
  if ([urlPath java_hasPrefix:path]) {
    if ([((NSString *) nil_chk(path)) java_hasSuffix:@"/"]) return true;
    if ([urlPath charAtWithInt:[path java_length]] == '/') return true;
  }
  return false;
}

Okhttp3Cookie *Okhttp3Cookie_parseWithOkhttp3HttpUrl_withNSString_(Okhttp3HttpUrl *url, NSString *setCookie) {
  Okhttp3Cookie_initialize();
  return Okhttp3Cookie_parseWithLong_withOkhttp3HttpUrl_withNSString_(JavaLangSystem_currentTimeMillis(), url, setCookie);
}

Okhttp3Cookie *Okhttp3Cookie_parseWithLong_withOkhttp3HttpUrl_withNSString_(jlong currentTimeMillis, Okhttp3HttpUrl *url, NSString *setCookie) {
  Okhttp3Cookie_initialize();
  jint pos = 0;
  jint limit = [((NSString *) nil_chk(setCookie)) java_length];
  jint cookiePairEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(setCookie, pos, limit, ';');
  jint pairEqualsSign = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(setCookie, pos, cookiePairEnd, '=');
  if (pairEqualsSign == cookiePairEnd) return nil;
  NSString *cookieName = Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(setCookie, pos, pairEqualsSign);
  if ([((NSString *) nil_chk(cookieName)) java_isEmpty]) return nil;
  NSString *cookieValue = Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(setCookie, pairEqualsSign + 1, cookiePairEnd);
  jlong expiresAt = Okhttp3InternalHttpHttpDate_MAX_DATE;
  jlong deltaSeconds = -1LL;
  NSString *domain = nil;
  NSString *path = nil;
  jboolean secureOnly = false;
  jboolean httpOnly = false;
  jboolean hostOnly = true;
  jboolean persistent = false;
  pos = cookiePairEnd + 1;
  while (pos < limit) {
    jint attributePairEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(setCookie, pos, limit, ';');
    jint attributeEqualsSign = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(setCookie, pos, attributePairEnd, '=');
    NSString *attributeName = Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(setCookie, pos, attributeEqualsSign);
    NSString *attributeValue = attributeEqualsSign < attributePairEnd ? Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(setCookie, attributeEqualsSign + 1, attributePairEnd) : @"";
    if ([((NSString *) nil_chk(attributeName)) java_equalsIgnoreCase:@"expires"]) {
      @try {
        expiresAt = Okhttp3Cookie_parseExpiresWithNSString_withInt_withInt_(attributeValue, 0, [attributeValue java_length]);
        persistent = true;
      }
      @catch (JavaLangIllegalArgumentException *e) {
      }
    }
    else if ([attributeName java_equalsIgnoreCase:@"max-age"]) {
      @try {
        deltaSeconds = Okhttp3Cookie_parseMaxAgeWithNSString_(attributeValue);
        persistent = true;
      }
      @catch (JavaLangNumberFormatException *e) {
      }
    }
    else if ([attributeName java_equalsIgnoreCase:@"domain"]) {
      @try {
        domain = Okhttp3Cookie_parseDomainWithNSString_(attributeValue);
        hostOnly = false;
      }
      @catch (JavaLangIllegalArgumentException *e) {
      }
    }
    else if ([attributeName java_equalsIgnoreCase:@"path"]) {
      path = attributeValue;
    }
    else if ([attributeName java_equalsIgnoreCase:@"secure"]) {
      secureOnly = true;
    }
    else if ([attributeName java_equalsIgnoreCase:@"httponly"]) {
      httpOnly = true;
    }
    pos = attributePairEnd + 1;
  }
  if (deltaSeconds == JavaLangLong_MIN_VALUE) {
    expiresAt = JavaLangLong_MIN_VALUE;
  }
  else if (deltaSeconds != -1LL) {
    jlong deltaMilliseconds = deltaSeconds <= (JavaLangLong_MAX_VALUE / 1000) ? deltaSeconds * 1000 : JavaLangLong_MAX_VALUE;
    expiresAt = currentTimeMillis + deltaMilliseconds;
    if (expiresAt < currentTimeMillis || expiresAt > Okhttp3InternalHttpHttpDate_MAX_DATE) {
      expiresAt = Okhttp3InternalHttpHttpDate_MAX_DATE;
    }
  }
  if (domain == nil) {
    domain = [((Okhttp3HttpUrl *) nil_chk(url)) host];
  }
  else if (!Okhttp3Cookie_domainMatchWithOkhttp3HttpUrl_withNSString_(url, domain)) {
    return nil;
  }
  if (path == nil || ![path java_hasPrefix:@"/"]) {
    NSString *encodedPath = [((Okhttp3HttpUrl *) nil_chk(url)) encodedPath];
    jint lastSlash = [((NSString *) nil_chk(encodedPath)) java_lastIndexOf:'/'];
    path = lastSlash != 0 ? [encodedPath java_substring:0 endIndex:lastSlash] : @"/";
  }
  return create_Okhttp3Cookie_initWithNSString_withNSString_withLong_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(cookieName, cookieValue, expiresAt, domain, path, secureOnly, httpOnly, hostOnly, persistent);
}

jlong Okhttp3Cookie_parseExpiresWithNSString_withInt_withInt_(NSString *s, jint pos, jint limit) {
  Okhttp3Cookie_initialize();
  pos = Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(s, pos, limit, false);
  jint hour = -1;
  jint minute = -1;
  jint second = -1;
  jint dayOfMonth = -1;
  jint month = -1;
  jint year = -1;
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(Okhttp3Cookie_TIME_PATTERN)) matcherWithJavaLangCharSequence:s];
  while (pos < limit) {
    jint end = Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(s, pos + 1, limit, true);
    [((JavaUtilRegexMatcher *) nil_chk(matcher)) regionWithInt:pos withInt:end];
    if (hour == -1 && [((JavaUtilRegexMatcher *) nil_chk([matcher usePatternWithJavaUtilRegexPattern:Okhttp3Cookie_TIME_PATTERN])) matches]) {
      hour = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:1]);
      minute = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]);
      second = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:3]);
    }
    else if (dayOfMonth == -1 && [((JavaUtilRegexMatcher *) nil_chk([matcher usePatternWithJavaUtilRegexPattern:Okhttp3Cookie_DAY_OF_MONTH_PATTERN])) matches]) {
      dayOfMonth = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:1]);
    }
    else if (month == -1 && [((JavaUtilRegexMatcher *) nil_chk([matcher usePatternWithJavaUtilRegexPattern:Okhttp3Cookie_MONTH_PATTERN])) matches]) {
      NSString *monthString = [((NSString *) nil_chk([matcher groupWithInt:1])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
      month = [((NSString *) nil_chk([((JavaUtilRegexPattern *) nil_chk(Okhttp3Cookie_MONTH_PATTERN)) pattern])) java_indexOfString:monthString] / 4;
    }
    else if (year == -1 && [((JavaUtilRegexMatcher *) nil_chk([matcher usePatternWithJavaUtilRegexPattern:Okhttp3Cookie_YEAR_PATTERN])) matches]) {
      year = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:1]);
    }
    pos = Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(s, end + 1, limit, false);
  }
  if (year >= 70 && year <= 99) year += 1900;
  if (year >= 0 && year <= 69) year += 2000;
  if (year < 1601) @throw create_JavaLangIllegalArgumentException_init();
  if (month == -1) @throw create_JavaLangIllegalArgumentException_init();
  if (dayOfMonth < 1 || dayOfMonth > 31) @throw create_JavaLangIllegalArgumentException_init();
  if (hour < 0 || hour > 23) @throw create_JavaLangIllegalArgumentException_init();
  if (minute < 0 || minute > 59) @throw create_JavaLangIllegalArgumentException_init();
  if (second < 0 || second > 59) @throw create_JavaLangIllegalArgumentException_init();
  JavaUtilCalendar *calendar = create_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(JreLoadStatic(Okhttp3InternalUtil, UTC));
  [calendar setLenientWithBoolean:false];
  [calendar setWithInt:JavaUtilCalendar_YEAR withInt:year];
  [calendar setWithInt:JavaUtilCalendar_MONTH withInt:month - 1];
  [calendar setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:dayOfMonth];
  [calendar setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hour];
  [calendar setWithInt:JavaUtilCalendar_MINUTE withInt:minute];
  [calendar setWithInt:JavaUtilCalendar_SECOND withInt:second];
  [calendar setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
  return [calendar getTimeInMillis];
}

jint Okhttp3Cookie_dateCharacterOffsetWithNSString_withInt_withInt_withBoolean_(NSString *input, jint pos, jint limit, jboolean invert) {
  Okhttp3Cookie_initialize();
  for (jint i = pos; i < limit; i++) {
    jint c = [((NSString *) nil_chk(input)) charAtWithInt:i];
    jboolean dateCharacter = (c < ' ' && c != 0x0009) || (c >= 0x007f) || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == ':');
    if (dateCharacter == !invert) return i;
  }
  return limit;
}

jlong Okhttp3Cookie_parseMaxAgeWithNSString_(NSString *s) {
  Okhttp3Cookie_initialize();
  @try {
    jlong parsed = JavaLangLong_parseLongWithNSString_(s);
    return parsed <= 0LL ? JavaLangLong_MIN_VALUE : parsed;
  }
  @catch (JavaLangNumberFormatException *e) {
    if ([((NSString *) nil_chk(s)) java_matches:@"-?\\d+"]) {
      return [s java_hasPrefix:@"-"] ? JavaLangLong_MIN_VALUE : JavaLangLong_MAX_VALUE;
    }
    @throw e;
  }
}

NSString *Okhttp3Cookie_parseDomainWithNSString_(NSString *s) {
  Okhttp3Cookie_initialize();
  if ([((NSString *) nil_chk(s)) java_hasSuffix:@"."]) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  if ([s java_hasPrefix:@"."]) {
    s = [s java_substring:1];
  }
  NSString *canonicalDomain = Okhttp3InternalUtil_domainToAsciiWithNSString_(s);
  if (canonicalDomain == nil) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  return canonicalDomain;
}

id<JavaUtilList> Okhttp3Cookie_parseAllWithOkhttp3HttpUrl_withOkhttp3Headers_(Okhttp3HttpUrl *url, Okhttp3Headers *headers) {
  Okhttp3Cookie_initialize();
  id<JavaUtilList> cookieStrings = [((Okhttp3Headers *) nil_chk(headers)) valuesWithNSString:@"Set-Cookie"];
  id<JavaUtilList> cookies = nil;
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(cookieStrings)) size]; i < size; i++) {
    Okhttp3Cookie *cookie = Okhttp3Cookie_parseWithOkhttp3HttpUrl_withNSString_(url, [cookieStrings getWithInt:i]);
    if (cookie == nil) continue;
    if (cookies == nil) cookies = create_JavaUtilArrayList_init();
    [cookies addWithId:cookie];
  }
  return cookies != nil ? JavaUtilCollections_unmodifiableListWithJavaUtilList_(cookies) : JavaUtilCollections_emptyList();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cookie)

@implementation Okhttp3Cookie_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3Cookie_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3Cookie_Builder *)nameWithNSString:(NSString *)name {
  if (name == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"name == null");
  if (![((NSString *) nil_chk([name java_trim])) isEqual:name]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"name is not trimmed");
  JreStrongAssign(&self->name_, name);
  return self;
}

- (Okhttp3Cookie_Builder *)valueWithNSString:(NSString *)value {
  if (value == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"value == null");
  if (![((NSString *) nil_chk([value java_trim])) isEqual:value]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"value is not trimmed");
  JreStrongAssign(&self->value_, value);
  return self;
}

- (Okhttp3Cookie_Builder *)expiresAtWithLong:(jlong)expiresAt {
  if (expiresAt <= 0) expiresAt = JavaLangLong_MIN_VALUE;
  if (expiresAt > Okhttp3InternalHttpHttpDate_MAX_DATE) expiresAt = Okhttp3InternalHttpHttpDate_MAX_DATE;
  self->expiresAt_ = expiresAt;
  self->persistent_ = true;
  return self;
}

- (Okhttp3Cookie_Builder *)domainWithNSString:(NSString *)domain {
  return Okhttp3Cookie_Builder_domainWithNSString_withBoolean_(self, domain, false);
}

- (Okhttp3Cookie_Builder *)hostOnlyDomainWithNSString:(NSString *)domain {
  return Okhttp3Cookie_Builder_domainWithNSString_withBoolean_(self, domain, true);
}

- (Okhttp3Cookie_Builder *)domainWithNSString:(NSString *)domain
                                  withBoolean:(jboolean)hostOnly {
  return Okhttp3Cookie_Builder_domainWithNSString_withBoolean_(self, domain, hostOnly);
}

- (Okhttp3Cookie_Builder *)pathWithNSString:(NSString *)path {
  if (![((NSString *) nil_chk(path)) java_hasPrefix:@"/"]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"path must start with '/'");
  JreStrongAssign(&self->path_, path);
  return self;
}

- (Okhttp3Cookie_Builder *)secure {
  self->secure_ = true;
  return self;
}

- (Okhttp3Cookie_Builder *)httpOnly {
  self->httpOnly_ = true;
  return self;
}

- (Okhttp3Cookie *)build {
  return create_Okhttp3Cookie_initWithOkhttp3Cookie_Builder_(self);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(value_);
  RELEASE_(domain_);
  RELEASE_(path_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x2, 5, 7, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Cookie;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nameWithNSString:);
  methods[2].selector = @selector(valueWithNSString:);
  methods[3].selector = @selector(expiresAtWithLong:);
  methods[4].selector = @selector(domainWithNSString:);
  methods[5].selector = @selector(hostOnlyDomainWithNSString:);
  methods[6].selector = @selector(domainWithNSString:withBoolean:);
  methods[7].selector = @selector(pathWithNSString:);
  methods[8].selector = @selector(secure);
  methods[9].selector = @selector(httpOnly);
  methods[10].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expiresAt_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "domain_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "secure_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "httpOnly_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "persistent_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hostOnly_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "name", "LNSString;", "value", "expiresAt", "J", "domain", "hostOnlyDomain", "LNSString;Z", "path", "LOkhttp3Cookie;" };
  static const J2ObjcClassInfo _Okhttp3Cookie_Builder = { "Builder", "okhttp3", ptrTable, methods, fields, 7, 0x19, 11, 9, 9, -1, -1, -1, -1 };
  return &_Okhttp3Cookie_Builder;
}

@end

void Okhttp3Cookie_Builder_init(Okhttp3Cookie_Builder *self) {
  NSObject_init(self);
  self->expiresAt_ = Okhttp3InternalHttpHttpDate_MAX_DATE;
  JreStrongAssign(&self->path_, @"/");
}

Okhttp3Cookie_Builder *new_Okhttp3Cookie_Builder_init() {
  J2OBJC_NEW_IMPL(Okhttp3Cookie_Builder, init)
}

Okhttp3Cookie_Builder *create_Okhttp3Cookie_Builder_init() {
  J2OBJC_CREATE_IMPL(Okhttp3Cookie_Builder, init)
}

Okhttp3Cookie_Builder *Okhttp3Cookie_Builder_domainWithNSString_withBoolean_(Okhttp3Cookie_Builder *self, NSString *domain, jboolean hostOnly) {
  if (domain == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"domain == null");
  NSString *canonicalDomain = Okhttp3InternalUtil_domainToAsciiWithNSString_(domain);
  if (canonicalDomain == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected domain: ", domain));
  }
  JreStrongAssign(&self->domain_, canonicalDomain);
  self->hostOnly_ = hostOnly;
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Cookie_Builder)
