//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3InternalCacheInternalCache.h"

@interface Okhttp3InternalCacheInternalCache : NSObject

@end

@implementation Okhttp3InternalCacheInternalCache

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3Response;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheCacheRequest;", 0x401, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getWithOkhttp3Request:);
  methods[1].selector = @selector(putWithOkhttp3Response:);
  methods[2].selector = @selector(removeWithOkhttp3Request:);
  methods[3].selector = @selector(updateWithOkhttp3Response:withOkhttp3Response:);
  methods[4].selector = @selector(trackConditionalCacheHit);
  methods[5].selector = @selector(trackResponseWithOkhttp3InternalCacheCacheStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "LOkhttp3Request;", "LJavaIoIOException;", "put", "LOkhttp3Response;", "remove", "update", "LOkhttp3Response;LOkhttp3Response;", "trackResponse", "LOkhttp3InternalCacheCacheStrategy;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheInternalCache = { "InternalCache", "okhttp3.internal.cache", ptrTable, methods, NULL, 7, 0x609, 6, 0, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheInternalCache;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheInternalCache)
