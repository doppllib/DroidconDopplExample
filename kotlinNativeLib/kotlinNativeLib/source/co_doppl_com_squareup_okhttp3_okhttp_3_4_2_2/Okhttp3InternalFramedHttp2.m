//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "Okhttp3InternalFramedFrameReader.h"
#include "Okhttp3InternalFramedFrameWriter.h"
#include "Okhttp3InternalFramedHeadersMode.h"
#include "Okhttp3InternalFramedHpack.h"
#include "Okhttp3InternalFramedHttp2.h"
#include "Okhttp3InternalFramedSettings.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3Protocol.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalFramedHttp2 ()

+ (JavaLangIllegalArgumentException *)illegalArgumentWithNSString:(NSString *)message
                                                withNSObjectArray:(IOSObjectArray *)args;

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args;

+ (jint)lengthWithoutPaddingWithInt:(jint)length
                           withByte:(jbyte)flags
                          withShort:(jshort)padding;

+ (jint)readMediumWithOkioBufferedSource:(id<OkioBufferedSource>)source;

+ (void)writeMediumWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                withInt:(jint)i;

@end

inline JavaUtilLoggingLogger *Okhttp3InternalFramedHttp2_get_logger();
static JavaUtilLoggingLogger *Okhttp3InternalFramedHttp2_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHttp2, logger, JavaUtilLoggingLogger *)

inline OkioByteString *Okhttp3InternalFramedHttp2_get_CONNECTION_PREFACE();
static OkioByteString *Okhttp3InternalFramedHttp2_CONNECTION_PREFACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHttp2, CONNECTION_PREFACE, OkioByteString *)

__attribute__((unused)) static JavaLangIllegalArgumentException *Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args);

__attribute__((unused)) static JavaIoIOException *Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args);

__attribute__((unused)) static jint Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(jint length, jbyte flags, jshort padding);

__attribute__((unused)) static jint Okhttp3InternalFramedHttp2_readMediumWithOkioBufferedSource_(id<OkioBufferedSource> source);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_writeMediumWithOkioBufferedSink_withInt_(id<OkioBufferedSink> sink, jint i);

@interface Okhttp3InternalFramedHttp2_Reader () {
 @public
  id<OkioBufferedSource> source_;
  Okhttp3InternalFramedHttp2_ContinuationSource *continuation_;
  jboolean client_;
}

- (void)readHeadersWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId;

- (id<JavaUtilList>)readHeaderBlockWithInt:(jint)length
                                 withShort:(jshort)padding
                                  withByte:(jbyte)flags
                                   withInt:(jint)streamId;

- (void)readDataWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)length
                                                    withByte:(jbyte)flags
                                                     withInt:(jint)streamId;

- (void)readPriorityWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId;

- (void)readPriorityWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)streamId;

- (void)readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)length
                                                         withByte:(jbyte)flags
                                                          withInt:(jint)streamId;

- (void)readSettingsWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId;

- (void)readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                            withInt:(jint)length
                                                           withByte:(jbyte)flags
                                                            withInt:(jint)streamId;

- (void)readPingWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)length
                                                    withByte:(jbyte)flags
                                                     withInt:(jint)streamId;

- (void)readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                       withInt:(jint)length
                                                      withByte:(jbyte)flags
                                                       withInt:(jint)streamId;

- (void)readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                             withInt:(jint)length
                                                            withByte:(jbyte)flags
                                                             withInt:(jint)streamId;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHttp2_Reader, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHttp2_Reader, continuation_, Okhttp3InternalFramedHttp2_ContinuationSource *)

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static id<JavaUtilList> Okhttp3InternalFramedHttp2_Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, jint length, jshort padding, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readDataWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId);

@interface Okhttp3InternalFramedHttp2_Writer () {
 @public
  id<OkioBufferedSink> sink_;
  jboolean client_;
  OkioBuffer *hpackBuffer_;
  jint maxFrameSize_;
  jboolean closed_;
}

- (void)writeContinuationFramesWithInt:(jint)streamId
                              withLong:(jlong)byteCount;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHttp2_Writer, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHttp2_Writer, hpackBuffer_, OkioBuffer *)

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_Writer_writeContinuationFramesWithInt_withLong_(Okhttp3InternalFramedHttp2_Writer *self, jint streamId, jlong byteCount);

@interface Okhttp3InternalFramedHttp2_ContinuationSource () {
 @public
  id<OkioBufferedSource> source_;
}

- (void)readContinuationHeader;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedHttp2_ContinuationSource, source_, id<OkioBufferedSource>)

__attribute__((unused)) static void Okhttp3InternalFramedHttp2_ContinuationSource_readContinuationHeader(Okhttp3InternalFramedHttp2_ContinuationSource *self);

inline IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_get_TYPES();
static IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHttp2_FrameLogger, TYPES, IOSObjectArray *)

inline IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_get_FLAGS();
static IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_FLAGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHttp2_FrameLogger, FLAGS, IOSObjectArray *)

inline IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_get_BINARY();
static IOSObjectArray *Okhttp3InternalFramedHttp2_FrameLogger_BINARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalFramedHttp2_FrameLogger, BINARY, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedHttp2)

@implementation Okhttp3InternalFramedHttp2

+ (jint)INITIAL_MAX_FRAME_SIZE {
  return Okhttp3InternalFramedHttp2_INITIAL_MAX_FRAME_SIZE;
}

+ (jbyte)TYPE_DATA {
  return Okhttp3InternalFramedHttp2_TYPE_DATA;
}

+ (jbyte)TYPE_HEADERS {
  return Okhttp3InternalFramedHttp2_TYPE_HEADERS;
}

+ (jbyte)TYPE_PRIORITY {
  return Okhttp3InternalFramedHttp2_TYPE_PRIORITY;
}

+ (jbyte)TYPE_RST_STREAM {
  return Okhttp3InternalFramedHttp2_TYPE_RST_STREAM;
}

+ (jbyte)TYPE_SETTINGS {
  return Okhttp3InternalFramedHttp2_TYPE_SETTINGS;
}

+ (jbyte)TYPE_PUSH_PROMISE {
  return Okhttp3InternalFramedHttp2_TYPE_PUSH_PROMISE;
}

+ (jbyte)TYPE_PING {
  return Okhttp3InternalFramedHttp2_TYPE_PING;
}

+ (jbyte)TYPE_GOAWAY {
  return Okhttp3InternalFramedHttp2_TYPE_GOAWAY;
}

+ (jbyte)TYPE_WINDOW_UPDATE {
  return Okhttp3InternalFramedHttp2_TYPE_WINDOW_UPDATE;
}

+ (jbyte)TYPE_CONTINUATION {
  return Okhttp3InternalFramedHttp2_TYPE_CONTINUATION;
}

+ (jbyte)FLAG_NONE {
  return Okhttp3InternalFramedHttp2_FLAG_NONE;
}

+ (jbyte)FLAG_ACK {
  return Okhttp3InternalFramedHttp2_FLAG_ACK;
}

+ (jbyte)FLAG_END_STREAM {
  return Okhttp3InternalFramedHttp2_FLAG_END_STREAM;
}

+ (jbyte)FLAG_END_HEADERS {
  return Okhttp3InternalFramedHttp2_FLAG_END_HEADERS;
}

+ (jbyte)FLAG_END_PUSH_PROMISE {
  return Okhttp3InternalFramedHttp2_FLAG_END_PUSH_PROMISE;
}

+ (jbyte)FLAG_PADDED {
  return Okhttp3InternalFramedHttp2_FLAG_PADDED;
}

+ (jbyte)FLAG_PRIORITY {
  return Okhttp3InternalFramedHttp2_FLAG_PRIORITY;
}

+ (jbyte)FLAG_COMPRESSED {
  return Okhttp3InternalFramedHttp2_FLAG_COMPRESSED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedHttp2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3Protocol *)getProtocol {
  return JreLoadEnum(Okhttp3Protocol, HTTP_2);
}

- (id<Okhttp3InternalFramedFrameReader>)newReaderWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                                            withBoolean:(jboolean)client {
  return create_Okhttp3InternalFramedHttp2_Reader_initWithOkioBufferedSource_withInt_withBoolean_(source, 4096, client);
}

- (id<Okhttp3InternalFramedFrameWriter>)newWriterWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                                          withBoolean:(jboolean)client {
  return create_Okhttp3InternalFramedHttp2_Writer_initWithOkioBufferedSink_withBoolean_(sink, client);
}

+ (JavaLangIllegalArgumentException *)illegalArgumentWithNSString:(NSString *)message
                                                withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(message, args);
}

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(message, args);
}

+ (jint)lengthWithoutPaddingWithInt:(jint)length
                           withByte:(jbyte)flags
                          withShort:(jshort)padding {
  return Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
}

+ (jint)readMediumWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  return Okhttp3InternalFramedHttp2_readMediumWithOkioBufferedSource_(source);
}

+ (void)writeMediumWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                withInt:(jint)i {
  Okhttp3InternalFramedHttp2_writeMediumWithOkioBufferedSink_withInt_(sink, i);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedFrameReader;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedFrameWriter;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x8a, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x8a, 6, 5, 7, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, 7, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 11, 7, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getProtocol);
  methods[2].selector = @selector(newReaderWithOkioBufferedSource:withBoolean:);
  methods[3].selector = @selector(newWriterWithOkioBufferedSink:withBoolean:);
  methods[4].selector = @selector(illegalArgumentWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(ioExceptionWithNSString:withNSObjectArray:);
  methods[6].selector = @selector(lengthWithoutPaddingWithInt:withByte:withShort:);
  methods[7].selector = @selector(readMediumWithOkioBufferedSource:);
  methods[8].selector = @selector(writeMediumWithOkioBufferedSink:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "CONNECTION_PREFACE", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "INITIAL_MAX_FRAME_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedHttp2_INITIAL_MAX_FRAME_SIZE, 0x18, -1, -1, -1, -1 },
    { "TYPE_DATA", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_DATA, 0x18, -1, -1, -1, -1 },
    { "TYPE_HEADERS", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_HEADERS, 0x18, -1, -1, -1, -1 },
    { "TYPE_PRIORITY", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_PRIORITY, 0x18, -1, -1, -1, -1 },
    { "TYPE_RST_STREAM", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_RST_STREAM, 0x18, -1, -1, -1, -1 },
    { "TYPE_SETTINGS", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_SETTINGS, 0x18, -1, -1, -1, -1 },
    { "TYPE_PUSH_PROMISE", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_PUSH_PROMISE, 0x18, -1, -1, -1, -1 },
    { "TYPE_PING", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_PING, 0x18, -1, -1, -1, -1 },
    { "TYPE_GOAWAY", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_GOAWAY, 0x18, -1, -1, -1, -1 },
    { "TYPE_WINDOW_UPDATE", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_WINDOW_UPDATE, 0x18, -1, -1, -1, -1 },
    { "TYPE_CONTINUATION", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_TYPE_CONTINUATION, 0x18, -1, -1, -1, -1 },
    { "FLAG_NONE", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_NONE, 0x18, -1, -1, -1, -1 },
    { "FLAG_ACK", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_ACK, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_STREAM", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_END_STREAM, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_HEADERS", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_END_HEADERS, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_PUSH_PROMISE", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_END_PUSH_PROMISE, 0x18, -1, -1, -1, -1 },
    { "FLAG_PADDED", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_PADDED, 0x18, -1, -1, -1, -1 },
    { "FLAG_PRIORITY", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_PRIORITY, 0x18, -1, -1, -1, -1 },
    { "FLAG_COMPRESSED", "B", .constantValue.asChar = Okhttp3InternalFramedHttp2_FLAG_COMPRESSED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newReader", "LOkioBufferedSource;Z", "newWriter", "LOkioBufferedSink;Z", "illegalArgument", "LNSString;[LNSObject;", "ioException", "LJavaIoIOException;", "lengthWithoutPadding", "IBS", "readMedium", "LOkioBufferedSource;", "writeMedium", "LOkioBufferedSink;I", &Okhttp3InternalFramedHttp2_logger, &Okhttp3InternalFramedHttp2_CONNECTION_PREFACE, "LOkhttp3InternalFramedHttp2_Reader;LOkhttp3InternalFramedHttp2_Writer;LOkhttp3InternalFramedHttp2_ContinuationSource;LOkhttp3InternalFramedHttp2_FrameLogger;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHttp2 = { "Http2", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x11, 9, 21, -1, 16, -1, -1, -1 };
  return &_Okhttp3InternalFramedHttp2;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedHttp2 class]) {
    JreStrongAssign(&Okhttp3InternalFramedHttp2_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([Okhttp3InternalFramedHttp2_FrameLogger_class_() getName]));
    JreStrongAssign(&Okhttp3InternalFramedHttp2_CONNECTION_PREFACE, OkioByteString_encodeUtf8WithNSString_(@"PRI * HTTP/2.0\x0d\n\x0d\nSM\x0d\n\x0d\n"));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedHttp2)
  }
}

@end

void Okhttp3InternalFramedHttp2_init(Okhttp3InternalFramedHttp2 *self) {
  NSObject_init(self);
}

Okhttp3InternalFramedHttp2 *new_Okhttp3InternalFramedHttp2_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHttp2, init)
}

Okhttp3InternalFramedHttp2 *create_Okhttp3InternalFramedHttp2_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHttp2, init)
}

JavaLangIllegalArgumentException *Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  Okhttp3InternalFramedHttp2_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(message, args));
}

JavaIoIOException *Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  Okhttp3InternalFramedHttp2_initialize();
  @throw create_JavaIoIOException_initWithNSString_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(message, args));
}

jint Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(jint length, jbyte flags, jshort padding) {
  Okhttp3InternalFramedHttp2_initialize();
  if ((flags & Okhttp3InternalFramedHttp2_FLAG_PADDED) != 0) length--;
  if (padding > length) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR padding %s > remaining length %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangShort_valueOfWithShort_(padding), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]));
  }
  return (jshort) (length - padding);
}

jint Okhttp3InternalFramedHttp2_readMediumWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  Okhttp3InternalFramedHttp2_initialize();
  return (JreLShift32(([((id<OkioBufferedSource>) nil_chk(source)) readByte] & (jint) 0xff), 16)) | (JreLShift32(([source readByte] & (jint) 0xff), 8)) | ([source readByte] & (jint) 0xff);
}

void Okhttp3InternalFramedHttp2_writeMediumWithOkioBufferedSink_withInt_(id<OkioBufferedSink> sink, jint i) {
  Okhttp3InternalFramedHttp2_initialize();
  [((id<OkioBufferedSink>) nil_chk(sink)) writeByteWithInt:(JreURShift32(i, 16)) & (jint) 0xff];
  [sink writeByteWithInt:(JreURShift32(i, 8)) & (jint) 0xff];
  [sink writeByteWithInt:i & (jint) 0xff];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHttp2)

@implementation Okhttp3InternalFramedHttp2_Reader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                   withInt:(jint)headerTableSize
                               withBoolean:(jboolean)client {
  Okhttp3InternalFramedHttp2_Reader_initWithOkioBufferedSource_withInt_withBoolean_(self, source, headerTableSize, client);
  return self;
}

- (void)readConnectionPreface {
  if (client_) return;
  OkioByteString *connectionPreface = [((id<OkioBufferedSource>) nil_chk(source_)) readByteStringWithLong:[((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, CONNECTION_PREFACE))) size]];
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [JreLoadStatic(Okhttp3InternalFramedHttp2, logger) fineWithNSString:Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"<< CONNECTION %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(connectionPreface)) hex] } count:1 type:NSObject_class_()])];
  if (![JreLoadStatic(Okhttp3InternalFramedHttp2, CONNECTION_PREFACE) isEqual:connectionPreface]) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"Expected a connection header but was %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(connectionPreface)) utf8] } count:1 type:NSObject_class_()]));
  }
}

- (jboolean)nextFrameWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler {
  @try {
    [((id<OkioBufferedSource>) nil_chk(source_)) requireWithLong:9];
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
  jint length = Okhttp3InternalFramedHttp2_readMediumWithOkioBufferedSource_(source_);
  if (length < 0 || length > Okhttp3InternalFramedHttp2_INITIAL_MAX_FRAME_SIZE) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  }
  jbyte type = (jbyte) ([source_ readByte] & (jint) 0xff);
  jbyte flags = (jbyte) ([source_ readByte] & (jint) 0xff);
  jint streamId = ([source_ readInt] & (jint) 0x7fffffff);
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [JreLoadStatic(Okhttp3InternalFramedHttp2, logger) fineWithNSString:Okhttp3InternalFramedHttp2_FrameLogger_formatHeaderWithBoolean_withInt_withInt_withByte_withByte_(true, streamId, length, type, flags)];
  switch (type) {
    case Okhttp3InternalFramedHttp2_TYPE_DATA:
    Okhttp3InternalFramedHttp2_Reader_readDataWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_HEADERS:
    Okhttp3InternalFramedHttp2_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_PRIORITY:
    Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_RST_STREAM:
    Okhttp3InternalFramedHttp2_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_SETTINGS:
    Okhttp3InternalFramedHttp2_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_PUSH_PROMISE:
    Okhttp3InternalFramedHttp2_Reader_readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_PING:
    Okhttp3InternalFramedHttp2_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_GOAWAY:
    Okhttp3InternalFramedHttp2_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalFramedHttp2_TYPE_WINDOW_UPDATE:
    Okhttp3InternalFramedHttp2_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    default:
    [source_ skipWithLong:length];
  }
  return true;
}

- (void)readHeadersWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (id<JavaUtilList>)readHeaderBlockWithInt:(jint)length
                                 withShort:(jshort)padding
                                  withByte:(jbyte)flags
                                   withInt:(jint)streamId {
  return Okhttp3InternalFramedHttp2_Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
}

- (void)readDataWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)length
                                                    withByte:(jbyte)flags
                                                     withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readDataWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPriorityWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPriorityWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_(self, handler, streamId);
}

- (void)readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                          withInt:(jint)length
                                                         withByte:(jbyte)flags
                                                          withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readSettingsWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                            withInt:(jint)length
                                                           withByte:(jbyte)flags
                                                            withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPingWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                     withInt:(jint)length
                                                    withByte:(jbyte)flags
                                                     withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                       withInt:(jint)length
                                                      withByte:(jbyte)flags
                                                       withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:(id<Okhttp3InternalFramedFrameReader_Handler>)handler
                                                             withInt:(jint)length
                                                            withByte:(jbyte)flags
                                                             withInt:(jint)streamId {
  Okhttp3InternalFramedHttp2_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)close {
  [((id<OkioBufferedSource>) nil_chk(source_)) close];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(continuation_);
  RELEASE_(hpackReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 6, 7, 1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:withInt:withBoolean:);
  methods[1].selector = @selector(readConnectionPreface);
  methods[2].selector = @selector(nextFrameWithOkhttp3InternalFramedFrameReader_Handler:);
  methods[3].selector = @selector(readHeadersWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[4].selector = @selector(readHeaderBlockWithInt:withShort:withByte:withInt:);
  methods[5].selector = @selector(readDataWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[6].selector = @selector(readPriorityWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[7].selector = @selector(readPriorityWithOkhttp3InternalFramedFrameReader_Handler:withInt:);
  methods[8].selector = @selector(readRstStreamWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[9].selector = @selector(readSettingsWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[10].selector = @selector(readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[11].selector = @selector(readPingWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[12].selector = @selector(readGoAwayWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[13].selector = @selector(readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler:withInt:withByte:withInt:);
  methods[14].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "continuation_", "LOkhttp3InternalFramedHttp2_ContinuationSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hpackReader_", "LOkhttp3InternalFramedHpack_Reader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;IZ", "LJavaIoIOException;", "nextFrame", "LOkhttp3InternalFramedFrameReader_Handler;", "readHeaders", "LOkhttp3InternalFramedFrameReader_Handler;IBI", "readHeaderBlock", "ISBI", "(ISBI)Ljava/util/List<Lokhttp3/internal/framed/Header;>;", "readData", "readPriority", "LOkhttp3InternalFramedFrameReader_Handler;I", "readRstStream", "readSettings", "readPushPromise", "readPing", "readGoAway", "readWindowUpdate", "LOkhttp3InternalFramedHttp2;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHttp2_Reader = { "Reader", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 15, 4, 18, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHttp2_Reader;
}

@end

void Okhttp3InternalFramedHttp2_Reader_initWithOkioBufferedSource_withInt_withBoolean_(Okhttp3InternalFramedHttp2_Reader *self, id<OkioBufferedSource> source, jint headerTableSize, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  self->client_ = client;
  JreStrongAssignAndConsume(&self->continuation_, new_Okhttp3InternalFramedHttp2_ContinuationSource_initWithOkioBufferedSource_(self->source_));
  JreStrongAssignAndConsume(&self->hpackReader_, new_Okhttp3InternalFramedHpack_Reader_initWithInt_withOkioSource_(headerTableSize, self->continuation_));
}

Okhttp3InternalFramedHttp2_Reader *new_Okhttp3InternalFramedHttp2_Reader_initWithOkioBufferedSource_withInt_withBoolean_(id<OkioBufferedSource> source, jint headerTableSize, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHttp2_Reader, initWithOkioBufferedSource_withInt_withBoolean_, source, headerTableSize, client)
}

Okhttp3InternalFramedHttp2_Reader *create_Okhttp3InternalFramedHttp2_Reader_initWithOkioBufferedSource_withInt_withBoolean_(id<OkioBufferedSource> source, jint headerTableSize, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHttp2_Reader, initWithOkioBufferedSource_withInt_withBoolean_, source, headerTableSize, client)
}

void Okhttp3InternalFramedHttp2_Reader_readHeadersWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId == 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: TYPE_HEADERS streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  jboolean endStream = (flags & Okhttp3InternalFramedHttp2_FLAG_END_STREAM) != 0;
  jshort padding = (flags & Okhttp3InternalFramedHttp2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  if ((flags & Okhttp3InternalFramedHttp2_FLAG_PRIORITY) != 0) {
    Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_(self, handler, streamId);
    length -= 5;
  }
  length = Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  id<JavaUtilList> headerBlock = Okhttp3InternalFramedHttp2_Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:false withBoolean:endStream withInt:streamId withInt:-1 withJavaUtilList:headerBlock withOkhttp3InternalFramedHeadersMode:JreLoadEnum(Okhttp3InternalFramedHeadersMode, HTTP_20_HEADERS)];
}

id<JavaUtilList> Okhttp3InternalFramedHttp2_Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, jint length, jshort padding, jbyte flags, jint streamId) {
  ((Okhttp3InternalFramedHttp2_ContinuationSource *) nil_chk(self->continuation_))->length_ = self->continuation_->left_ = length;
  self->continuation_->padding_ = padding;
  self->continuation_->flags_ = flags;
  self->continuation_->streamId_ = streamId;
  [((Okhttp3InternalFramedHpack_Reader *) nil_chk(self->hpackReader_)) readHeaders];
  return [self->hpackReader_ getAndResetHeaderList];
}

void Okhttp3InternalFramedHttp2_Reader_readDataWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  jboolean inFinished = (flags & Okhttp3InternalFramedHttp2_FLAG_END_STREAM) != 0;
  jboolean gzipped = (flags & Okhttp3InternalFramedHttp2_FLAG_COMPRESSED) != 0;
  if (gzipped) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  jshort padding = (flags & Okhttp3InternalFramedHttp2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  length = Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) dataWithBoolean:inFinished withInt:streamId withOkioBufferedSource:self->source_ withInt:length];
  [((id<OkioBufferedSource>) nil_chk(self->source_)) skipWithLong:padding];
}

void Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 5) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PRIORITY length: %d != 5", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  if (streamId == 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PRIORITY streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_(self, handler, streamId);
}

void Okhttp3InternalFramedHttp2_Reader_readPriorityWithOkhttp3InternalFramedFrameReader_Handler_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint streamId) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jboolean exclusive = (w1 & -0x7fffffff - 1) != 0;
  jint streamDependency = (w1 & (jint) 0x7fffffff);
  jint weight = ([self->source_ readByte] & (jint) 0xff) + 1;
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) priorityWithInt:streamId withInt:streamDependency withInt:weight withBoolean:exclusive];
}

void Okhttp3InternalFramedHttp2_Reader_readRstStreamWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 4) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM length: %d != 4", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  if (streamId == 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  jint errorCodeInt = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  Okhttp3InternalFramedErrorCode *errorCode = Okhttp3InternalFramedErrorCode_fromHttp2WithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]));
  }
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) rstStreamWithInt:streamId withOkhttp3InternalFramedErrorCode:errorCode];
}

void Okhttp3InternalFramedHttp2_Reader_readSettingsWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  if ((flags & Okhttp3InternalFramedHttp2_FLAG_ACK) != 0) {
    if (length != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR ack frame should be empty!", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) ackSettings];
    return;
  }
  if (length % 6 != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS length %% 6 != 0: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  Okhttp3InternalFramedSettings *settings = create_Okhttp3InternalFramedSettings_init();
  for (jint i = 0; i < length; i += 6) {
    jshort id_ = [((id<OkioBufferedSource>) nil_chk(self->source_)) readShort];
    jint value = [self->source_ readInt];
    switch (id_) {
      case 1:
      break;
      case 2:
      if (value != 0 && value != 1) {
        @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      break;
      case 3:
      id_ = 4;
      break;
      case 4:
      id_ = 7;
      if (value < 0) {
        @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
      }
      break;
      case 5:
      if (value < Okhttp3InternalFramedHttp2_INITIAL_MAX_FRAME_SIZE || value > 16777215) {
        @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(value) } count:1 type:NSObject_class_()]));
      }
      break;
      case 6:
      break;
      default:
      break;
    }
    [settings setWithInt:id_ withInt:0 withInt:value];
  }
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) settingsWithBoolean:false withOkhttp3InternalFramedSettings:settings];
}

void Okhttp3InternalFramedHttp2_Reader_readPushPromiseWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId == 0) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  }
  jshort padding = (flags & Okhttp3InternalFramedHttp2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  jint promisedStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  length -= 4;
  length = Okhttp3InternalFramedHttp2_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  id<JavaUtilList> headerBlock = Okhttp3InternalFramedHttp2_Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) pushPromiseWithInt:streamId withInt:promisedStreamId withJavaUtilList:headerBlock];
}

void Okhttp3InternalFramedHttp2_Reader_readPingWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 8) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING length != 8: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  if (streamId != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  jint payload1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint payload2 = [self->source_ readInt];
  jboolean ack = (flags & Okhttp3InternalFramedHttp2_FLAG_ACK) != 0;
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) pingWithBoolean:ack withInt:payload1 withInt:payload2];
}

void Okhttp3InternalFramedHttp2_Reader_readGoAwayWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length < 8) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY length < 8: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  if (streamId != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
  jint lastStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint errorCodeInt = [self->source_ readInt];
  jint opaqueDataLength = length - 8;
  Okhttp3InternalFramedErrorCode *errorCode = Okhttp3InternalFramedErrorCode_fromHttp2WithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]));
  }
  OkioByteString *debugData = JreLoadStatic(OkioByteString, EMPTY);
  if (opaqueDataLength > 0) {
    debugData = [self->source_ readByteStringWithLong:opaqueDataLength];
  }
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) goAwayWithInt:lastStreamId withOkhttp3InternalFramedErrorCode:errorCode withOkioByteString:debugData];
}

void Okhttp3InternalFramedHttp2_Reader_readWindowUpdateWithOkhttp3InternalFramedFrameReader_Handler_withInt_withByte_withInt_(Okhttp3InternalFramedHttp2_Reader *self, id<Okhttp3InternalFramedFrameReader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 4) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_WINDOW_UPDATE length !=4: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]));
  jlong increment = ([((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jlong) 0x7fffffffLL);
  if (increment == 0) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"windowSizeIncrement was 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(increment) } count:1 type:NSObject_class_()]));
  [((id<Okhttp3InternalFramedFrameReader_Handler>) nil_chk(handler)) windowUpdateWithInt:streamId withLong:increment];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHttp2_Reader)

@implementation Okhttp3InternalFramedHttp2_Writer

- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                             withBoolean:(jboolean)client {
  Okhttp3InternalFramedHttp2_Writer_initWithOkioBufferedSink_withBoolean_(self, sink, client);
  return self;
}

- (void)flush {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)applyAndAckSettingsWithOkhttp3InternalFramedSettings:(Okhttp3InternalFramedSettings *)peerSettings {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    self->maxFrameSize_ = [((Okhttp3InternalFramedSettings *) nil_chk(peerSettings)) getMaxFrameSizeWithInt:maxFrameSize_];
    if ([peerSettings getHeaderTableSize] > -1) {
      [((Okhttp3InternalFramedHpack_Writer *) nil_chk(hpackWriter_)) setHeaderTableSizeSettingWithInt:[peerSettings getHeaderTableSize]];
    }
    jint length = 0;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_SETTINGS;
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_ACK;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)connectionPreface {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (!client_) return;
    if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
      [JreLoadStatic(Okhttp3InternalFramedHttp2, logger) fineWithNSString:Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@">> CONNECTION %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, CONNECTION_PREFACE))) hex] } count:1 type:NSObject_class_()])];
    }
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithByteArray:[((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, CONNECTION_PREFACE))) toByteArray]];
    [sink_ flush];
  }
}

- (void)synStreamWithBoolean:(jboolean)outFinished
                 withBoolean:(jboolean)inFinished
                     withInt:(jint)streamId
                     withInt:(jint)associatedStreamId
            withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (inFinished) @throw create_JavaLangUnsupportedOperationException_init();
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:outFinished withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)synReplyWithBoolean:(jboolean)outFinished
                    withInt:(jint)streamId
           withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:outFinished withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)headersWithInt:(jint)streamId
      withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:false withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [((Okhttp3InternalFramedHpack_Writer *) nil_chk(hpackWriter_)) writeHeadersWithJavaUtilList:requestHeaders];
    jlong byteCount = [((OkioBuffer *) nil_chk(hpackBuffer_)) size];
    jint length = (jint) JavaLangMath_minWithLong_withLong_(maxFrameSize_ - 4, byteCount);
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_PUSH_PROMISE;
    jbyte flags = byteCount == length ? Okhttp3InternalFramedHttp2_FLAG_END_HEADERS : 0;
    [self frameHeaderWithInt:streamId withInt:length + 4 withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:promisedStreamId & (jint) 0x7fffffff];
    [sink_ writeWithOkioBuffer:hpackBuffer_ withLong:length];
    if (byteCount > length) Okhttp3InternalFramedHttp2_Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount - length);
  }
}

- (void)headersWithBoolean:(jboolean)outFinished
                   withInt:(jint)streamId
          withJavaUtilList:(id<JavaUtilList>)headerBlock {
  if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  [((Okhttp3InternalFramedHpack_Writer *) nil_chk(hpackWriter_)) writeHeadersWithJavaUtilList:headerBlock];
  jlong byteCount = [((OkioBuffer *) nil_chk(hpackBuffer_)) size];
  jint length = (jint) JavaLangMath_minWithLong_withLong_(maxFrameSize_, byteCount);
  jbyte type = Okhttp3InternalFramedHttp2_TYPE_HEADERS;
  jbyte flags = byteCount == length ? Okhttp3InternalFramedHttp2_FLAG_END_HEADERS : 0;
  if (outFinished) flags |= Okhttp3InternalFramedHttp2_FLAG_END_STREAM;
  [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
  [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithOkioBuffer:hpackBuffer_ withLong:length];
  if (byteCount > length) Okhttp3InternalFramedHttp2_Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount - length);
}

- (void)writeContinuationFramesWithInt:(jint)streamId
                              withLong:(jlong)byteCount {
  Okhttp3InternalFramedHttp2_Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount);
}

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalFramedErrorCode:(Okhttp3InternalFramedErrorCode *)errorCode {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->httpCode_ == -1) @throw create_JavaLangIllegalArgumentException_init();
    jint length = 4;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_RST_STREAM;
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_NONE;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:errorCode->httpCode_];
    [sink_ flush];
  }
}

- (jint)maxDataLength {
  return maxFrameSize_;
}

- (void)dataWithBoolean:(jboolean)outFinished
                withInt:(jint)streamId
         withOkioBuffer:(OkioBuffer *)source
                withInt:(jint)byteCount {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_NONE;
    if (outFinished) flags |= Okhttp3InternalFramedHttp2_FLAG_END_STREAM;
    [self dataFrameWithInt:streamId withByte:flags withOkioBuffer:source withInt:byteCount];
  }
}

- (void)dataFrameWithInt:(jint)streamId
                withByte:(jbyte)flags
          withOkioBuffer:(OkioBuffer *)buffer
                 withInt:(jint)byteCount {
  jbyte type = Okhttp3InternalFramedHttp2_TYPE_DATA;
  [self frameHeaderWithInt:streamId withInt:byteCount withByte:type withByte:flags];
  if (byteCount > 0) {
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer withLong:byteCount];
  }
}

- (void)settingsWithOkhttp3InternalFramedSettings:(Okhttp3InternalFramedSettings *)settings {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jint length = [((Okhttp3InternalFramedSettings *) nil_chk(settings)) size] * 6;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_SETTINGS;
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    for (jint i = 0; i < Okhttp3InternalFramedSettings_COUNT; i++) {
      if (![settings isSetWithInt:i]) continue;
      jint id_ = i;
      if (id_ == 4) {
        id_ = 3;
      }
      else if (id_ == 7) {
        id_ = 4;
      }
      [((id<OkioBufferedSink>) nil_chk(sink_)) writeShortWithInt:id_];
      [sink_ writeIntWithInt:[settings getWithInt:i]];
    }
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)pingWithBoolean:(jboolean)ack
                withInt:(jint)payload1
                withInt:(jint)payload2 {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jint length = 8;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_PING;
    jbyte flags = ack ? Okhttp3InternalFramedHttp2_FLAG_ACK : Okhttp3InternalFramedHttp2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:payload1];
    [sink_ writeIntWithInt:payload2];
    [sink_ flush];
  }
}

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalFramedErrorCode:(Okhttp3InternalFramedErrorCode *)errorCode
        withByteArray:(IOSByteArray *)debugData {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalFramedErrorCode *) nil_chk(errorCode))->httpCode_ == -1) @throw nil_chk(Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(@"errorCode.httpCode == -1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
    jint length = 8 + ((IOSByteArray *) nil_chk(debugData))->size_;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_GOAWAY;
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:lastGoodStreamId];
    [sink_ writeIntWithInt:errorCode->httpCode_];
    if (debugData->size_ > 0) {
      [sink_ writeWithByteArray:debugData];
    }
    [sink_ flush];
  }
}

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)windowSizeIncrement {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (windowSizeIncrement == 0 || windowSizeIncrement > (jlong) 0x7fffffffLL) {
      @throw nil_chk(Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(@"windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(windowSizeIncrement) } count:1 type:NSObject_class_()]));
    }
    jint length = 4;
    jbyte type = Okhttp3InternalFramedHttp2_TYPE_WINDOW_UPDATE;
    jbyte flags = Okhttp3InternalFramedHttp2_FLAG_NONE;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:(jint) windowSizeIncrement];
    [sink_ flush];
  }
}

- (void)close {
  @synchronized(self) {
    closed_ = true;
    [((id<OkioBufferedSink>) nil_chk(sink_)) close];
  }
}

- (void)frameHeaderWithInt:(jint)streamId
                   withInt:(jint)length
                  withByte:(jbyte)type
                  withByte:(jbyte)flags {
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [JreLoadStatic(Okhttp3InternalFramedHttp2, logger) fineWithNSString:Okhttp3InternalFramedHttp2_FrameLogger_formatHeaderWithBoolean_withInt_withInt_withByte_withByte_(false, streamId, length, type, flags)];
  if (length > maxFrameSize_) {
    @throw nil_chk(Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR length > %d: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(maxFrameSize_), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]));
  }
  if ((streamId & -0x7fffffff - 1) != 0) @throw nil_chk(Okhttp3InternalFramedHttp2_illegalArgumentWithNSString_withNSObjectArray_(@"reserved bit set: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(streamId) } count:1 type:NSObject_class_()]));
  Okhttp3InternalFramedHttp2_writeMediumWithOkioBufferedSink_withInt_(sink_, length);
  [((id<OkioBufferedSink>) nil_chk(sink_)) writeByteWithInt:type & (jint) 0xff];
  [sink_ writeByteWithInt:flags & (jint) 0xff];
  [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
}

- (void)dealloc {
  RELEASE_(sink_);
  RELEASE_(hpackBuffer_);
  RELEASE_(hpackWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, 1, 6, -1, -1 },
    { NULL, "V", 0x21, 7, 8, 1, 9, -1, -1 },
    { NULL, "V", 0x21, 10, 11, 1, 12, -1, -1 },
    { NULL, "V", 0x21, 13, 14, 1, 15, -1, -1 },
    { NULL, "V", 0x0, 10, 8, 1, 9, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 18, 19, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 20, 21, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 24, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 25, 26, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 27, 28, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 29, 17, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSink:withBoolean:);
  methods[1].selector = @selector(flush);
  methods[2].selector = @selector(applyAndAckSettingsWithOkhttp3InternalFramedSettings:);
  methods[3].selector = @selector(connectionPreface);
  methods[4].selector = @selector(synStreamWithBoolean:withBoolean:withInt:withInt:withJavaUtilList:);
  methods[5].selector = @selector(synReplyWithBoolean:withInt:withJavaUtilList:);
  methods[6].selector = @selector(headersWithInt:withJavaUtilList:);
  methods[7].selector = @selector(pushPromiseWithInt:withInt:withJavaUtilList:);
  methods[8].selector = @selector(headersWithBoolean:withInt:withJavaUtilList:);
  methods[9].selector = @selector(writeContinuationFramesWithInt:withLong:);
  methods[10].selector = @selector(rstStreamWithInt:withOkhttp3InternalFramedErrorCode:);
  methods[11].selector = @selector(maxDataLength);
  methods[12].selector = @selector(dataWithBoolean:withInt:withOkioBuffer:withInt:);
  methods[13].selector = @selector(dataFrameWithInt:withByte:withOkioBuffer:withInt:);
  methods[14].selector = @selector(settingsWithOkhttp3InternalFramedSettings:);
  methods[15].selector = @selector(pingWithBoolean:withInt:withInt:);
  methods[16].selector = @selector(goAwayWithInt:withOkhttp3InternalFramedErrorCode:withByteArray:);
  methods[17].selector = @selector(windowUpdateWithInt:withLong:);
  methods[18].selector = @selector(close);
  methods[19].selector = @selector(frameHeaderWithInt:withInt:withByte:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hpackBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxFrameSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hpackWriter_", "LOkhttp3InternalFramedHpack_Writer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSink;Z", "LJavaIoIOException;", "applyAndAckSettings", "LOkhttp3InternalFramedSettings;", "synStream", "ZZIILJavaUtilList;", "(ZZIILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "synReply", "ZILJavaUtilList;", "(ZILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "headers", "ILJavaUtilList;", "(ILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "pushPromise", "IILJavaUtilList;", "(IILjava/util/List<Lokhttp3/internal/framed/Header;>;)V", "writeContinuationFrames", "IJ", "rstStream", "ILOkhttp3InternalFramedErrorCode;", "data", "ZILOkioBuffer;I", "dataFrame", "IBLOkioBuffer;I", "settings", "ping", "ZII", "goAway", "ILOkhttp3InternalFramedErrorCode;[B", "windowUpdate", "frameHeader", "IIBB", "LOkhttp3InternalFramedHttp2;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHttp2_Writer = { "Writer", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 20, 6, 32, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHttp2_Writer;
}

@end

void Okhttp3InternalFramedHttp2_Writer_initWithOkioBufferedSink_withBoolean_(Okhttp3InternalFramedHttp2_Writer *self, id<OkioBufferedSink> sink, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->sink_, sink);
  self->client_ = client;
  JreStrongAssignAndConsume(&self->hpackBuffer_, new_OkioBuffer_init());
  JreStrongAssignAndConsume(&self->hpackWriter_, new_Okhttp3InternalFramedHpack_Writer_initWithOkioBuffer_(self->hpackBuffer_));
  self->maxFrameSize_ = Okhttp3InternalFramedHttp2_INITIAL_MAX_FRAME_SIZE;
}

Okhttp3InternalFramedHttp2_Writer *new_Okhttp3InternalFramedHttp2_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHttp2_Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

Okhttp3InternalFramedHttp2_Writer *create_Okhttp3InternalFramedHttp2_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHttp2_Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

void Okhttp3InternalFramedHttp2_Writer_writeContinuationFramesWithInt_withLong_(Okhttp3InternalFramedHttp2_Writer *self, jint streamId, jlong byteCount) {
  while (byteCount > 0) {
    jint length = (jint) JavaLangMath_minWithLong_withLong_(self->maxFrameSize_, byteCount);
    byteCount -= length;
    [self frameHeaderWithInt:streamId withInt:length withByte:Okhttp3InternalFramedHttp2_TYPE_CONTINUATION withByte:byteCount == 0 ? Okhttp3InternalFramedHttp2_FLAG_END_HEADERS : 0];
    [((id<OkioBufferedSink>) nil_chk(self->sink_)) writeWithOkioBuffer:self->hpackBuffer_ withLong:length];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHttp2_Writer)

@implementation Okhttp3InternalFramedHttp2_ContinuationSource

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  Okhttp3InternalFramedHttp2_ContinuationSource_initWithOkioBufferedSource_(self, source);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  while (left_ == 0) {
    [((id<OkioBufferedSource>) nil_chk(source_)) skipWithLong:padding_];
    padding_ = 0;
    if ((flags_ & Okhttp3InternalFramedHttp2_FLAG_END_HEADERS) != 0) return -1;
    Okhttp3InternalFramedHttp2_ContinuationSource_readContinuationHeader(self);
  }
  jlong read = [((id<OkioBufferedSource>) nil_chk(source_)) readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, left_)];
  if (read == -1) return -1;
  left_ -= read;
  return read;
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSource>) nil_chk(source_)) timeout];
}

- (void)close {
}

- (void)readContinuationHeader {
  Okhttp3InternalFramedHttp2_ContinuationSource_readContinuationHeader(self);
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(timeout);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(readContinuationHeader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flags_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "streamId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "left_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "padding_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalFramedHttp2;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHttp2_ContinuationSource = { "ContinuationSource", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 5, 6, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHttp2_ContinuationSource;
}

@end

void Okhttp3InternalFramedHttp2_ContinuationSource_initWithOkioBufferedSource_(Okhttp3InternalFramedHttp2_ContinuationSource *self, id<OkioBufferedSource> source) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
}

Okhttp3InternalFramedHttp2_ContinuationSource *new_Okhttp3InternalFramedHttp2_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHttp2_ContinuationSource, initWithOkioBufferedSource_, source)
}

Okhttp3InternalFramedHttp2_ContinuationSource *create_Okhttp3InternalFramedHttp2_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHttp2_ContinuationSource, initWithOkioBufferedSource_, source)
}

void Okhttp3InternalFramedHttp2_ContinuationSource_readContinuationHeader(Okhttp3InternalFramedHttp2_ContinuationSource *self) {
  jint previousStreamId = self->streamId_;
  self->length_ = self->left_ = Okhttp3InternalFramedHttp2_readMediumWithOkioBufferedSource_(self->source_);
  jbyte type = (jbyte) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff);
  self->flags_ = (jbyte) ([self->source_ readByte] & (jint) 0xff);
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalFramedHttp2, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [JreLoadStatic(Okhttp3InternalFramedHttp2, logger) fineWithNSString:Okhttp3InternalFramedHttp2_FrameLogger_formatHeaderWithBoolean_withInt_withInt_withByte_withByte_(true, self->streamId_, self->length_, type, self->flags_)];
  self->streamId_ = ([self->source_ readInt] & (jint) 0x7fffffff);
  if (type != Okhttp3InternalFramedHttp2_TYPE_CONTINUATION) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"%s != TYPE_CONTINUATION", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(type) } count:1 type:NSObject_class_()]));
  if (self->streamId_ != previousStreamId) @throw nil_chk(Okhttp3InternalFramedHttp2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_CONTINUATION streamId changed", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHttp2_ContinuationSource)

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedHttp2_FrameLogger)

@implementation Okhttp3InternalFramedHttp2_FrameLogger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedHttp2_FrameLogger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)formatHeaderWithBoolean:(jboolean)inbound
                              withInt:(jint)streamId
                              withInt:(jint)length
                             withByte:(jbyte)type
                             withByte:(jbyte)flags {
  return Okhttp3InternalFramedHttp2_FrameLogger_formatHeaderWithBoolean_withInt_withInt_withByte_withByte_(inbound, streamId, length, type, flags);
}

+ (NSString *)formatFlagsWithByte:(jbyte)type
                         withByte:(jbyte)flags {
  return Okhttp3InternalFramedHttp2_FrameLogger_formatFlagsWithByte_withByte_(type, flags);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(formatHeaderWithBoolean:withInt:withInt:withByte:withByte:);
  methods[2].selector = @selector(formatFlagsWithByte:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "FLAGS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "BINARY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "formatHeader", "ZIIBB", "formatFlags", "BB", &Okhttp3InternalFramedHttp2_FrameLogger_TYPES, &Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, &Okhttp3InternalFramedHttp2_FrameLogger_BINARY, "LOkhttp3InternalFramedHttp2;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHttp2_FrameLogger = { "FrameLogger", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x18, 3, 3, 7, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedHttp2_FrameLogger;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedHttp2_FrameLogger class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalFramedHttp2_FrameLogger_TYPES, [IOSObjectArray newArrayWithObjects:(id[]){ @"DATA", @"HEADERS", @"PRIORITY", @"RST_STREAM", @"SETTINGS", @"PUSH_PROMISE", @"PING", @"GOAWAY", @"WINDOW_UPDATE", @"CONTINUATION" } count:10 type:NSString_class_()]);
    JreStrongAssignAndConsume(&Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, [IOSObjectArray newArrayWithLength:(jint) 0x40 type:NSString_class_()]);
    JreStrongAssignAndConsume(&Okhttp3InternalFramedHttp2_FrameLogger_BINARY, [IOSObjectArray newArrayWithLength:256 type:NSString_class_()]);
    {
      for (jint i = 0; i < Okhttp3InternalFramedHttp2_FrameLogger_BINARY->size_; i++) {
        IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_BINARY, i, [((NSString *) nil_chk(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"%8s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_toBinaryStringWithInt_(i) } count:1 type:NSObject_class_()]))) java_replace:' ' withChar:'0']);
      }
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_NONE, @"");
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_END_STREAM, @"END_STREAM");
      IOSIntArray *prefixFlags = [IOSIntArray arrayWithInts:(jint[]){ Okhttp3InternalFramedHttp2_FLAG_END_STREAM } count:1];
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_PADDED, @"PADDED");
      {
        IOSIntArray *a__ = prefixFlags;
        jint const *b__ = a__->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint prefixFlag = *b__++;
          IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag | Okhttp3InternalFramedHttp2_FLAG_PADDED, JreStrcat("$$", IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag), @"|PADDED"));
        }
      }
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_END_HEADERS, @"END_HEADERS");
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_PRIORITY, @"PRIORITY");
      IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, Okhttp3InternalFramedHttp2_FLAG_END_HEADERS | Okhttp3InternalFramedHttp2_FLAG_PRIORITY, @"END_HEADERS|PRIORITY");
      IOSIntArray *frameFlags = [IOSIntArray arrayWithInts:(jint[]){ Okhttp3InternalFramedHttp2_FLAG_END_HEADERS, Okhttp3InternalFramedHttp2_FLAG_PRIORITY, Okhttp3InternalFramedHttp2_FLAG_END_HEADERS | Okhttp3InternalFramedHttp2_FLAG_PRIORITY } count:3];
      {
        IOSIntArray *a__ = frameFlags;
        jint const *b__ = a__->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint frameFlag = *b__++;
          {
            IOSIntArray *a__ = prefixFlags;
            jint const *b__ = a__->buffer_;
            jint const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              jint prefixFlag = *b__++;
              IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag | frameFlag, JreStrcat("$C$", IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag), '|', IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, frameFlag)));
              IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag | frameFlag | Okhttp3InternalFramedHttp2_FLAG_PADDED, JreStrcat("$C$$", IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, prefixFlag), '|', IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, frameFlag), @"|PADDED"));
            }
          }
        }
      }
      for (jint i = 0; i < Okhttp3InternalFramedHttp2_FrameLogger_FLAGS->size_; i++) {
        if (IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, i) == nil) IOSObjectArray_Set(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, i, IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_BINARY, i));
      }
    }
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedHttp2_FrameLogger)
  }
}

@end

void Okhttp3InternalFramedHttp2_FrameLogger_init(Okhttp3InternalFramedHttp2_FrameLogger *self) {
  NSObject_init(self);
}

Okhttp3InternalFramedHttp2_FrameLogger *new_Okhttp3InternalFramedHttp2_FrameLogger_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedHttp2_FrameLogger, init)
}

Okhttp3InternalFramedHttp2_FrameLogger *create_Okhttp3InternalFramedHttp2_FrameLogger_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedHttp2_FrameLogger, init)
}

NSString *Okhttp3InternalFramedHttp2_FrameLogger_formatHeaderWithBoolean_withInt_withInt_withByte_withByte_(jboolean inbound, jint streamId, jint length, jbyte type, jbyte flags) {
  Okhttp3InternalFramedHttp2_FrameLogger_initialize();
  NSString *formattedType = type < ((IOSObjectArray *) nil_chk(Okhttp3InternalFramedHttp2_FrameLogger_TYPES))->size_ ? IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_TYPES, type) : Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"0x%02x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(type) } count:1 type:NSObject_class_()]);
  NSString *formattedFlags = Okhttp3InternalFramedHttp2_FrameLogger_formatFlagsWithByte_withByte_(type, flags);
  return Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"%s 0x%08x %5d %-13s %s", [IOSObjectArray arrayWithObjects:(id[]){ inbound ? @"<<" : @">>", JavaLangInteger_valueOfWithInt_(streamId), JavaLangInteger_valueOfWithInt_(length), formattedType, formattedFlags } count:5 type:NSObject_class_()]);
}

NSString *Okhttp3InternalFramedHttp2_FrameLogger_formatFlagsWithByte_withByte_(jbyte type, jbyte flags) {
  Okhttp3InternalFramedHttp2_FrameLogger_initialize();
  if (flags == 0) return @"";
  switch (type) {
    case Okhttp3InternalFramedHttp2_TYPE_SETTINGS:
    case Okhttp3InternalFramedHttp2_TYPE_PING:
    return flags == Okhttp3InternalFramedHttp2_FLAG_ACK ? @"ACK" : IOSObjectArray_Get(nil_chk(Okhttp3InternalFramedHttp2_FrameLogger_BINARY), flags);
    case Okhttp3InternalFramedHttp2_TYPE_PRIORITY:
    case Okhttp3InternalFramedHttp2_TYPE_RST_STREAM:
    case Okhttp3InternalFramedHttp2_TYPE_GOAWAY:
    case Okhttp3InternalFramedHttp2_TYPE_WINDOW_UPDATE:
    return IOSObjectArray_Get(nil_chk(Okhttp3InternalFramedHttp2_FrameLogger_BINARY), flags);
  }
  NSString *result = flags < ((IOSObjectArray *) nil_chk(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS))->size_ ? IOSObjectArray_Get(Okhttp3InternalFramedHttp2_FrameLogger_FLAGS, flags) : IOSObjectArray_Get(nil_chk(Okhttp3InternalFramedHttp2_FrameLogger_BINARY), flags);
  if (type == Okhttp3InternalFramedHttp2_TYPE_PUSH_PROMISE && (flags & Okhttp3InternalFramedHttp2_FLAG_END_PUSH_PROMISE) != 0) {
    return [result java_replace:@"HEADERS" withSequence:@"PUSH_PROMISE"];
  }
  else if (type == Okhttp3InternalFramedHttp2_TYPE_DATA && (flags & Okhttp3InternalFramedHttp2_FLAG_COMPRESSED) != 0) {
    return [result java_replace:@"PRIORITY" withSequence:@"COMPRESSED"];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHttp2_FrameLogger)
