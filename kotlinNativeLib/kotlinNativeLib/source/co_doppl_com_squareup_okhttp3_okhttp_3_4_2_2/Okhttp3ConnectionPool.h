//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3ConnectionPool")
#ifdef RESTRICT_Okhttp3ConnectionPool
#define INCLUDE_ALL_Okhttp3ConnectionPool 0
#else
#define INCLUDE_ALL_Okhttp3ConnectionPool 1
#endif
#undef RESTRICT_Okhttp3ConnectionPool

#if !defined (Okhttp3ConnectionPool_) && (INCLUDE_ALL_Okhttp3ConnectionPool || defined(INCLUDE_Okhttp3ConnectionPool))
#define Okhttp3ConnectionPool_

@class JavaUtilConcurrentTimeUnit;
@class Okhttp3Address;
@class Okhttp3InternalConnectionRealConnection;
@class Okhttp3InternalConnectionRouteDatabase;
@class Okhttp3InternalConnectionStreamAllocation;

@interface Okhttp3ConnectionPool : NSObject {
 @public
  Okhttp3InternalConnectionRouteDatabase *routeDatabase_;
  jboolean cleanupRunning_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)maxIdleConnections
                   withLong:(jlong)keepAliveDuration
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit;

- (jint)connectionCount;

- (void)evictAll;

- (jint)idleConnectionCount;

#pragma mark Package-Private

- (jlong)cleanupWithLong:(jlong)now;

- (jboolean)connectionBecameIdleWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

- (Okhttp3InternalConnectionRealConnection *)getWithOkhttp3Address:(Okhttp3Address *)address
                     withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation;

- (void)putWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

@end

J2OBJC_STATIC_INIT(Okhttp3ConnectionPool)

J2OBJC_FIELD_SETTER(Okhttp3ConnectionPool, routeDatabase_, Okhttp3InternalConnectionRouteDatabase *)

FOUNDATION_EXPORT void Okhttp3ConnectionPool_init(Okhttp3ConnectionPool *self);

FOUNDATION_EXPORT Okhttp3ConnectionPool *new_Okhttp3ConnectionPool_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3ConnectionPool *create_Okhttp3ConnectionPool_init();

FOUNDATION_EXPORT void Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(Okhttp3ConnectionPool *self, jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit);

FOUNDATION_EXPORT Okhttp3ConnectionPool *new_Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3ConnectionPool *create_Okhttp3ConnectionPool_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint maxIdleConnections, jlong keepAliveDuration, JavaUtilConcurrentTimeUnit *timeUnit);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3ConnectionPool)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3ConnectionPool")
