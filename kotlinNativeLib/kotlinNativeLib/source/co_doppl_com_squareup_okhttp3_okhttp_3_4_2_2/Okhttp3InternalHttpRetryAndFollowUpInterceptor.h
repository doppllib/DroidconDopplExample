//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttpRetryAndFollowUpInterceptor")
#ifdef RESTRICT_Okhttp3InternalHttpRetryAndFollowUpInterceptor
#define INCLUDE_ALL_Okhttp3InternalHttpRetryAndFollowUpInterceptor 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttpRetryAndFollowUpInterceptor 1
#endif
#undef RESTRICT_Okhttp3InternalHttpRetryAndFollowUpInterceptor

#if !defined (Okhttp3InternalHttpRetryAndFollowUpInterceptor_) && (INCLUDE_ALL_Okhttp3InternalHttpRetryAndFollowUpInterceptor || defined(INCLUDE_Okhttp3InternalHttpRetryAndFollowUpInterceptor))
#define Okhttp3InternalHttpRetryAndFollowUpInterceptor_

#define RESTRICT_Okhttp3Interceptor 1
#define INCLUDE_Okhttp3Interceptor 1
#include "Okhttp3Interceptor.h"

@class Okhttp3InternalConnectionStreamAllocation;
@class Okhttp3OkHttpClient;
@class Okhttp3Response;
@protocol Okhttp3Interceptor_Chain;

@interface Okhttp3InternalHttpRetryAndFollowUpInterceptor : NSObject < Okhttp3Interceptor >

#pragma mark Public

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client;

- (void)cancel;

- (Okhttp3OkHttpClient *)client;

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain;

- (jboolean)isCanceled;

- (jboolean)isForWebSocket;

- (void)setForWebSocketWithBoolean:(jboolean)forWebSocket;

- (Okhttp3InternalConnectionStreamAllocation *)streamAllocation;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttpRetryAndFollowUpInterceptor)

FOUNDATION_EXPORT void Okhttp3InternalHttpRetryAndFollowUpInterceptor_initWithOkhttp3OkHttpClient_(Okhttp3InternalHttpRetryAndFollowUpInterceptor *self, Okhttp3OkHttpClient *client);

FOUNDATION_EXPORT Okhttp3InternalHttpRetryAndFollowUpInterceptor *new_Okhttp3InternalHttpRetryAndFollowUpInterceptor_initWithOkhttp3OkHttpClient_(Okhttp3OkHttpClient *client) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttpRetryAndFollowUpInterceptor *create_Okhttp3InternalHttpRetryAndFollowUpInterceptor_initWithOkhttp3OkHttpClient_(Okhttp3OkHttpClient *client);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttpRetryAndFollowUpInterceptor)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttpRetryAndFollowUpInterceptor")
