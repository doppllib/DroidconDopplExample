//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalPlatformJdk9Platform")
#ifdef RESTRICT_Okhttp3InternalPlatformJdk9Platform
#define INCLUDE_ALL_Okhttp3InternalPlatformJdk9Platform 0
#else
#define INCLUDE_ALL_Okhttp3InternalPlatformJdk9Platform 1
#endif
#undef RESTRICT_Okhttp3InternalPlatformJdk9Platform

#if !defined (Okhttp3InternalPlatformJdk9Platform_) && (INCLUDE_ALL_Okhttp3InternalPlatformJdk9Platform || defined(INCLUDE_Okhttp3InternalPlatformJdk9Platform))
#define Okhttp3InternalPlatformJdk9Platform_

#define RESTRICT_Okhttp3InternalPlatformPlatform 1
#define INCLUDE_Okhttp3InternalPlatformPlatform 1
#include "Okhttp3InternalPlatformPlatform.h"

@class JavaLangReflectMethod;
@class JavaxNetSslSSLSocket;
@class JavaxNetSslSSLSocketFactory;
@protocol JavaUtilList;
@protocol JavaxNetSslX509TrustManager;

@interface Okhttp3InternalPlatformJdk9Platform : Okhttp3InternalPlatformPlatform {
 @public
  JavaLangReflectMethod *setProtocolMethod_;
  JavaLangReflectMethod *getProtocolMethod_;
}

#pragma mark Public

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)setProtocolMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)getProtocolMethod;

+ (Okhttp3InternalPlatformJdk9Platform *)buildIfSupported;

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols;

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

- (id<JavaxNetSslX509TrustManager>)trustManagerWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalPlatformJdk9Platform)

J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdk9Platform, setProtocolMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(Okhttp3InternalPlatformJdk9Platform, getProtocolMethod_, JavaLangReflectMethod *)

FOUNDATION_EXPORT void Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(Okhttp3InternalPlatformJdk9Platform *self, JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod);

FOUNDATION_EXPORT Okhttp3InternalPlatformJdk9Platform *new_Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalPlatformJdk9Platform *create_Okhttp3InternalPlatformJdk9Platform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *setProtocolMethod, JavaLangReflectMethod *getProtocolMethod);

FOUNDATION_EXPORT Okhttp3InternalPlatformJdk9Platform *Okhttp3InternalPlatformJdk9Platform_buildIfSupported();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalPlatformJdk9Platform)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalPlatformJdk9Platform")
