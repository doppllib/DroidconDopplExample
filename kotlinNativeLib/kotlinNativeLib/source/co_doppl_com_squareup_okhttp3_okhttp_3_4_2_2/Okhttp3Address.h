//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3Address")
#ifdef RESTRICT_Okhttp3Address
#define INCLUDE_ALL_Okhttp3Address 0
#else
#define INCLUDE_ALL_Okhttp3Address 1
#endif
#undef RESTRICT_Okhttp3Address

#if !defined (Okhttp3Address_) && (INCLUDE_ALL_Okhttp3Address || defined(INCLUDE_Okhttp3Address))
#define Okhttp3Address_

@class JavaNetProxy;
@class JavaNetProxySelector;
@class JavaxNetSocketFactory;
@class JavaxNetSslSSLSocketFactory;
@class Okhttp3HttpUrl;
@protocol JavaUtilList;
@protocol JavaxNetSslHostnameVerifier;
@protocol Okhttp3Authenticator;
@protocol Okhttp3Dns;

@interface Okhttp3Address : NSObject {
 @public
  Okhttp3HttpUrl *url_;
  id<Okhttp3Dns> dns_;
  JavaxNetSocketFactory *socketFactory_;
  id<Okhttp3Authenticator> proxyAuthenticator_;
  id<JavaUtilList> protocols_;
  id<JavaUtilList> connectionSpecs_;
  JavaNetProxySelector *proxySelector_;
  JavaNetProxy *proxy_;
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  id<JavaxNetSslHostnameVerifier> hostnameVerifier_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)uriHost
                         withInt:(jint)uriPort
                  withOkhttp3Dns:(id<Okhttp3Dns>)dns
       withJavaxNetSocketFactory:(JavaxNetSocketFactory *)socketFactory
 withJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory
 withJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hostnameVerifier
        withOkhttp3Authenticator:(id<Okhttp3Authenticator>)proxyAuthenticator
                withJavaNetProxy:(JavaNetProxy *)proxy
                withJavaUtilList:(id<JavaUtilList>)protocols
                withJavaUtilList:(id<JavaUtilList>)connectionSpecs
        withJavaNetProxySelector:(JavaNetProxySelector *)proxySelector;

- (id<JavaUtilList>)connectionSpecs;

- (id<Okhttp3Dns>)dns;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (id<JavaxNetSslHostnameVerifier>)hostnameVerifier;

- (id<JavaUtilList>)protocols;

- (JavaNetProxy *)proxy;

- (id<Okhttp3Authenticator>)proxyAuthenticator;

- (JavaNetProxySelector *)proxySelector;

- (JavaxNetSocketFactory *)socketFactory;

- (JavaxNetSslSSLSocketFactory *)sslSocketFactory;

- (Okhttp3HttpUrl *)url;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Address)

J2OBJC_FIELD_SETTER(Okhttp3Address, url_, Okhttp3HttpUrl *)
J2OBJC_FIELD_SETTER(Okhttp3Address, dns_, id<Okhttp3Dns>)
J2OBJC_FIELD_SETTER(Okhttp3Address, socketFactory_, JavaxNetSocketFactory *)
J2OBJC_FIELD_SETTER(Okhttp3Address, proxyAuthenticator_, id<Okhttp3Authenticator>)
J2OBJC_FIELD_SETTER(Okhttp3Address, protocols_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3Address, connectionSpecs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3Address, proxySelector_, JavaNetProxySelector *)
J2OBJC_FIELD_SETTER(Okhttp3Address, proxy_, JavaNetProxy *)
J2OBJC_FIELD_SETTER(Okhttp3Address, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(Okhttp3Address, hostnameVerifier_, id<JavaxNetSslHostnameVerifier>)

FOUNDATION_EXPORT void Okhttp3Address_initWithNSString_withInt_withOkhttp3Dns_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withOkhttp3Authenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(Okhttp3Address *self, NSString *uriHost, jint uriPort, id<Okhttp3Dns> dns, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, id<Okhttp3Authenticator> proxyAuthenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector);

FOUNDATION_EXPORT Okhttp3Address *new_Okhttp3Address_initWithNSString_withInt_withOkhttp3Dns_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withOkhttp3Authenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, id<Okhttp3Dns> dns, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, id<Okhttp3Authenticator> proxyAuthenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3Address *create_Okhttp3Address_initWithNSString_withInt_withOkhttp3Dns_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withOkhttp3Authenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, id<Okhttp3Dns> dns, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, id<Okhttp3Authenticator> proxyAuthenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3Address)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3Address")
