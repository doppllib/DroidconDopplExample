//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3CacheControl.h"
#include "Okhttp3Handshake.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalHttpHttpHeaders.h"
#include "Okhttp3InternalHttpStatusLine.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/net/HttpURLConnection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"

@interface Okhttp3Response () {
 @public
  Okhttp3Request *request_;
  Okhttp3Protocol *protocol_;
  jint code_;
  NSString *message_;
  Okhttp3Handshake *handshake_;
  Okhttp3Headers *headers_;
  Okhttp3ResponseBody *body_;
  Okhttp3Response *networkResponse_;
  Okhttp3Response *cacheResponse_;
  Okhttp3Response *priorResponse_;
  jlong sentRequestAtMillis_;
  jlong receivedResponseAtMillis_;
  volatile_id cacheControl_;
}

- (instancetype)initWithOkhttp3Response_Builder:(Okhttp3Response_Builder *)builder;

@end

J2OBJC_FIELD_SETTER(Okhttp3Response, request_, Okhttp3Request *)
J2OBJC_FIELD_SETTER(Okhttp3Response, protocol_, Okhttp3Protocol *)
J2OBJC_FIELD_SETTER(Okhttp3Response, message_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Response, handshake_, Okhttp3Handshake *)
J2OBJC_FIELD_SETTER(Okhttp3Response, headers_, Okhttp3Headers *)
J2OBJC_FIELD_SETTER(Okhttp3Response, body_, Okhttp3ResponseBody *)
J2OBJC_FIELD_SETTER(Okhttp3Response, networkResponse_, Okhttp3Response *)
J2OBJC_FIELD_SETTER(Okhttp3Response, cacheResponse_, Okhttp3Response *)
J2OBJC_FIELD_SETTER(Okhttp3Response, priorResponse_, Okhttp3Response *)
J2OBJC_VOLATILE_FIELD_SETTER(Okhttp3Response, cacheControl_, Okhttp3CacheControl *)

__attribute__((unused)) static void Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response *self, Okhttp3Response_Builder *builder);

__attribute__((unused)) static Okhttp3Response *new_Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Response *create_Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response_Builder *builder);

@interface Okhttp3Response_Builder () {
 @public
  Okhttp3Request *request_;
  Okhttp3Protocol *protocol_;
  jint code_;
  NSString *message_;
  Okhttp3Handshake *handshake_;
  Okhttp3Headers_Builder *headers_;
  Okhttp3ResponseBody *body_;
  Okhttp3Response *networkResponse_;
  Okhttp3Response *cacheResponse_;
  Okhttp3Response *priorResponse_;
  jlong sentRequestAtMillis_;
  jlong receivedResponseAtMillis_;
}

- (instancetype)initWithOkhttp3Response:(Okhttp3Response *)response;

- (void)checkSupportResponseWithNSString:(NSString *)name
                     withOkhttp3Response:(Okhttp3Response *)response;

- (void)checkPriorResponseWithOkhttp3Response:(Okhttp3Response *)response;

@end

J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, request_, Okhttp3Request *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, protocol_, Okhttp3Protocol *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, message_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, handshake_, Okhttp3Handshake *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, headers_, Okhttp3Headers_Builder *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, body_, Okhttp3ResponseBody *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, networkResponse_, Okhttp3Response *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, cacheResponse_, Okhttp3Response *)
J2OBJC_FIELD_SETTER(Okhttp3Response_Builder, priorResponse_, Okhttp3Response *)

__attribute__((unused)) static void Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response_Builder *self, Okhttp3Response *response);

__attribute__((unused)) static Okhttp3Response_Builder *new_Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response *response) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Response_Builder *create_Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response *response);

__attribute__((unused)) static void Okhttp3Response_Builder_checkSupportResponseWithNSString_withOkhttp3Response_(Okhttp3Response_Builder *self, NSString *name, Okhttp3Response *response);

__attribute__((unused)) static void Okhttp3Response_Builder_checkPriorResponseWithOkhttp3Response_(Okhttp3Response_Builder *self, Okhttp3Response *response);

@implementation Okhttp3Response

- (instancetype)initWithOkhttp3Response_Builder:(Okhttp3Response_Builder *)builder {
  Okhttp3Response_initWithOkhttp3Response_Builder_(self, builder);
  return self;
}

- (Okhttp3Request *)request {
  return request_;
}

- (Okhttp3Protocol *)protocol {
  return protocol_;
}

- (jint)code {
  return code_;
}

- (jboolean)isSuccessful {
  return code_ >= 200 && code_ < 300;
}

- (NSString *)message {
  return message_;
}

- (Okhttp3Handshake *)handshake {
  return handshake_;
}

- (id<JavaUtilList>)headersWithNSString:(NSString *)name {
  return [((Okhttp3Headers *) nil_chk(headers_)) valuesWithNSString:name];
}

- (NSString *)headerWithNSString:(NSString *)name {
  return [self headerWithNSString:name withNSString:nil];
}

- (NSString *)headerWithNSString:(NSString *)name
                    withNSString:(NSString *)defaultValue {
  NSString *result = [((Okhttp3Headers *) nil_chk(headers_)) getWithNSString:name];
  return result != nil ? result : defaultValue;
}

- (Okhttp3Headers *)headers {
  return headers_;
}

- (Okhttp3ResponseBody *)peekBodyWithLong:(jlong)byteCount {
  id<OkioBufferedSource> source = [((Okhttp3ResponseBody *) nil_chk(body_)) source];
  [((id<OkioBufferedSource>) nil_chk(source)) requestWithLong:byteCount];
  OkioBuffer *copy_ = [((OkioBuffer *) nil_chk([source buffer])) java_clone];
  OkioBuffer *result;
  if ([((OkioBuffer *) nil_chk(copy_)) size] > byteCount) {
    result = create_OkioBuffer_init();
    [result writeWithOkioBuffer:copy_ withLong:byteCount];
    [copy_ clear];
  }
  else {
    result = copy_;
  }
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_([body_ contentType], [result size], result);
}

- (Okhttp3ResponseBody *)body {
  return body_;
}

- (Okhttp3Response_Builder *)newBuilder {
  return create_Okhttp3Response_Builder_initWithOkhttp3Response_(self);
}

- (jboolean)isRedirect {
  switch (code_) {
    case Okhttp3InternalHttpStatusLine_HTTP_PERM_REDIRECT:
    case Okhttp3InternalHttpStatusLine_HTTP_TEMP_REDIRECT:
    case JavaNetHttpURLConnection_HTTP_MULT_CHOICE:
    case JavaNetHttpURLConnection_HTTP_MOVED_PERM:
    case JavaNetHttpURLConnection_HTTP_MOVED_TEMP:
    case JavaNetHttpURLConnection_HTTP_SEE_OTHER:
    return true;
    default:
    return false;
  }
}

- (Okhttp3Response *)networkResponse {
  return networkResponse_;
}

- (Okhttp3Response *)cacheResponse {
  return cacheResponse_;
}

- (Okhttp3Response *)priorResponse {
  return priorResponse_;
}

- (id<JavaUtilList>)challenges {
  NSString *responseField;
  if (code_ == JavaNetHttpURLConnection_HTTP_UNAUTHORIZED) {
    responseField = @"WWW-Authenticate";
  }
  else if (code_ == JavaNetHttpURLConnection_HTTP_PROXY_AUTH) {
    responseField = @"Proxy-Authenticate";
  }
  else {
    return JavaUtilCollections_emptyList();
  }
  return Okhttp3InternalHttpHttpHeaders_parseChallengesWithOkhttp3Headers_withNSString_([self headers], responseField);
}

- (Okhttp3CacheControl *)cacheControl {
  Okhttp3CacheControl *result = JreLoadVolatileId(&cacheControl_);
  return result != nil ? result : (JreVolatileStrongAssign(&cacheControl_, Okhttp3CacheControl_parseWithOkhttp3Headers_(headers_)));
}

- (jlong)sentRequestAtMillis {
  return sentRequestAtMillis_;
}

- (jlong)receivedResponseAtMillis {
  return receivedResponseAtMillis_;
}

- (void)close {
  [((Okhttp3ResponseBody *) nil_chk(body_)) close];
}

- (NSString *)description {
  return JreStrcat("$@$I$$$@C", @"Response{protocol=", protocol_, @", code=", code_, @", message=", message_, @", url=", [((Okhttp3Request *) nil_chk(request_)) url], '}');
}

- (void)__javaClone:(Okhttp3Response *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&cacheControl_, &original->cacheControl_);
}

- (void)dealloc {
  RELEASE_(request_);
  RELEASE_(protocol_);
  RELEASE_(message_);
  RELEASE_(handshake_);
  RELEASE_(headers_);
  RELEASE_(body_);
  RELEASE_(networkResponse_);
  RELEASE_(cacheResponse_);
  RELEASE_(priorResponse_);
  JreReleaseVolatile(&cacheControl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Handshake;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Headers;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LOkhttp3CacheControl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Response_Builder:);
  methods[1].selector = @selector(request);
  methods[2].selector = @selector(protocol);
  methods[3].selector = @selector(code);
  methods[4].selector = @selector(isSuccessful);
  methods[5].selector = @selector(message);
  methods[6].selector = @selector(handshake);
  methods[7].selector = @selector(headersWithNSString:);
  methods[8].selector = @selector(headerWithNSString:);
  methods[9].selector = @selector(headerWithNSString:withNSString:);
  methods[10].selector = @selector(headers);
  methods[11].selector = @selector(peekBodyWithLong:);
  methods[12].selector = @selector(body);
  methods[13].selector = @selector(newBuilder);
  methods[14].selector = @selector(isRedirect);
  methods[15].selector = @selector(networkResponse);
  methods[16].selector = @selector(cacheResponse);
  methods[17].selector = @selector(priorResponse);
  methods[18].selector = @selector(challenges);
  methods[19].selector = @selector(cacheControl);
  methods[20].selector = @selector(sentRequestAtMillis);
  methods[21].selector = @selector(receivedResponseAtMillis);
  methods[22].selector = @selector(close);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "request_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "protocol_", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handshake_", "LOkhttp3Handshake;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headers_", "LOkhttp3Headers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "body_", "LOkhttp3ResponseBody;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "networkResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cacheResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "priorResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sentRequestAtMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "receivedResponseAtMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cacheControl_", "LOkhttp3CacheControl;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Response_Builder;", "headers", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "header", "LNSString;LNSString;", "peekBody", "J", "LJavaIoIOException;", "()Ljava/util/List<Lokhttp3/Challenge;>;", "toString" };
  static const J2ObjcClassInfo _Okhttp3Response = { "Response", "okhttp3", ptrTable, methods, fields, 7, 0x11, 24, 13, -1, 0, -1, -1, -1 };
  return &_Okhttp3Response;
}

@end

void Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response *self, Okhttp3Response_Builder *builder) {
  NSObject_init(self);
  JreStrongAssign(&self->request_, ((Okhttp3Response_Builder *) nil_chk(builder))->request_);
  JreStrongAssign(&self->protocol_, builder->protocol_);
  self->code_ = builder->code_;
  JreStrongAssign(&self->message_, builder->message_);
  JreStrongAssign(&self->handshake_, builder->handshake_);
  JreStrongAssign(&self->headers_, [((Okhttp3Headers_Builder *) nil_chk(builder->headers_)) build]);
  JreStrongAssign(&self->body_, builder->body_);
  JreStrongAssign(&self->networkResponse_, builder->networkResponse_);
  JreStrongAssign(&self->cacheResponse_, builder->cacheResponse_);
  JreStrongAssign(&self->priorResponse_, builder->priorResponse_);
  self->sentRequestAtMillis_ = builder->sentRequestAtMillis_;
  self->receivedResponseAtMillis_ = builder->receivedResponseAtMillis_;
}

Okhttp3Response *new_Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response_Builder *builder) {
  J2OBJC_NEW_IMPL(Okhttp3Response, initWithOkhttp3Response_Builder_, builder)
}

Okhttp3Response *create_Okhttp3Response_initWithOkhttp3Response_Builder_(Okhttp3Response_Builder *builder) {
  J2OBJC_CREATE_IMPL(Okhttp3Response, initWithOkhttp3Response_Builder_, builder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Response)

@implementation Okhttp3Response_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3Response_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOkhttp3Response:(Okhttp3Response *)response {
  Okhttp3Response_Builder_initWithOkhttp3Response_(self, response);
  return self;
}

- (Okhttp3Response_Builder *)requestWithOkhttp3Request:(Okhttp3Request *)request {
  JreStrongAssign(&self->request_, request);
  return self;
}

- (Okhttp3Response_Builder *)protocolWithOkhttp3Protocol:(Okhttp3Protocol *)protocol {
  JreStrongAssign(&self->protocol_, protocol);
  return self;
}

- (Okhttp3Response_Builder *)codeWithInt:(jint)code {
  self->code_ = code;
  return self;
}

- (Okhttp3Response_Builder *)messageWithNSString:(NSString *)message {
  JreStrongAssign(&self->message_, message);
  return self;
}

- (Okhttp3Response_Builder *)handshakeWithOkhttp3Handshake:(Okhttp3Handshake *)handshake {
  JreStrongAssign(&self->handshake_, handshake);
  return self;
}

- (Okhttp3Response_Builder *)headerWithNSString:(NSString *)name
                                   withNSString:(NSString *)value {
  [((Okhttp3Headers_Builder *) nil_chk(headers_)) setWithNSString:name withNSString:value];
  return self;
}

- (Okhttp3Response_Builder *)addHeaderWithNSString:(NSString *)name
                                      withNSString:(NSString *)value {
  [((Okhttp3Headers_Builder *) nil_chk(headers_)) addWithNSString:name withNSString:value];
  return self;
}

- (Okhttp3Response_Builder *)removeHeaderWithNSString:(NSString *)name {
  [((Okhttp3Headers_Builder *) nil_chk(headers_)) removeAllWithNSString:name];
  return self;
}

- (Okhttp3Response_Builder *)headersWithOkhttp3Headers:(Okhttp3Headers *)headers {
  JreStrongAssign(&self->headers_, [((Okhttp3Headers *) nil_chk(headers)) newBuilder]);
  return self;
}

- (Okhttp3Response_Builder *)bodyWithOkhttp3ResponseBody:(Okhttp3ResponseBody *)body {
  JreStrongAssign(&self->body_, body);
  return self;
}

- (Okhttp3Response_Builder *)networkResponseWithOkhttp3Response:(Okhttp3Response *)networkResponse {
  if (networkResponse != nil) Okhttp3Response_Builder_checkSupportResponseWithNSString_withOkhttp3Response_(self, @"networkResponse", networkResponse);
  JreStrongAssign(&self->networkResponse_, networkResponse);
  return self;
}

- (Okhttp3Response_Builder *)cacheResponseWithOkhttp3Response:(Okhttp3Response *)cacheResponse {
  if (cacheResponse != nil) Okhttp3Response_Builder_checkSupportResponseWithNSString_withOkhttp3Response_(self, @"cacheResponse", cacheResponse);
  JreStrongAssign(&self->cacheResponse_, cacheResponse);
  return self;
}

- (void)checkSupportResponseWithNSString:(NSString *)name
                     withOkhttp3Response:(Okhttp3Response *)response {
  Okhttp3Response_Builder_checkSupportResponseWithNSString_withOkhttp3Response_(self, name, response);
}

- (Okhttp3Response_Builder *)priorResponseWithOkhttp3Response:(Okhttp3Response *)priorResponse {
  if (priorResponse != nil) Okhttp3Response_Builder_checkPriorResponseWithOkhttp3Response_(self, priorResponse);
  JreStrongAssign(&self->priorResponse_, priorResponse);
  return self;
}

- (void)checkPriorResponseWithOkhttp3Response:(Okhttp3Response *)response {
  Okhttp3Response_Builder_checkPriorResponseWithOkhttp3Response_(self, response);
}

- (Okhttp3Response_Builder *)sentRequestAtMillisWithLong:(jlong)sentRequestAtMillis {
  self->sentRequestAtMillis_ = sentRequestAtMillis;
  return self;
}

- (Okhttp3Response_Builder *)receivedResponseAtMillisWithLong:(jlong)receivedResponseAtMillis {
  self->receivedResponseAtMillis_ = receivedResponseAtMillis;
  return self;
}

- (Okhttp3Response *)build {
  if (request_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"request == null");
  if (protocol_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"protocol == null");
  if (code_ < 0) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"code < 0: ", code_));
  return create_Okhttp3Response_initWithOkhttp3Response_Builder_(self);
}

- (void)dealloc {
  RELEASE_(request_);
  RELEASE_(protocol_);
  RELEASE_(message_);
  RELEASE_(handshake_);
  RELEASE_(headers_);
  RELEASE_(body_);
  RELEASE_(networkResponse_);
  RELEASE_(cacheResponse_);
  RELEASE_(priorResponse_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOkhttp3Response:);
  methods[2].selector = @selector(requestWithOkhttp3Request:);
  methods[3].selector = @selector(protocolWithOkhttp3Protocol:);
  methods[4].selector = @selector(codeWithInt:);
  methods[5].selector = @selector(messageWithNSString:);
  methods[6].selector = @selector(handshakeWithOkhttp3Handshake:);
  methods[7].selector = @selector(headerWithNSString:withNSString:);
  methods[8].selector = @selector(addHeaderWithNSString:withNSString:);
  methods[9].selector = @selector(removeHeaderWithNSString:);
  methods[10].selector = @selector(headersWithOkhttp3Headers:);
  methods[11].selector = @selector(bodyWithOkhttp3ResponseBody:);
  methods[12].selector = @selector(networkResponseWithOkhttp3Response:);
  methods[13].selector = @selector(cacheResponseWithOkhttp3Response:);
  methods[14].selector = @selector(checkSupportResponseWithNSString:withOkhttp3Response:);
  methods[15].selector = @selector(priorResponseWithOkhttp3Response:);
  methods[16].selector = @selector(checkPriorResponseWithOkhttp3Response:);
  methods[17].selector = @selector(sentRequestAtMillisWithLong:);
  methods[18].selector = @selector(receivedResponseAtMillisWithLong:);
  methods[19].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "request_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "protocol_", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshake_", "LOkhttp3Handshake;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headers_", "LOkhttp3Headers_Builder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "body_", "LOkhttp3ResponseBody;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "networkResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cacheResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "priorResponse_", "LOkhttp3Response;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sentRequestAtMillis_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "receivedResponseAtMillis_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Response;", "request", "LOkhttp3Request;", "protocol", "LOkhttp3Protocol;", "code", "I", "message", "LNSString;", "handshake", "LOkhttp3Handshake;", "header", "LNSString;LNSString;", "addHeader", "removeHeader", "headers", "LOkhttp3Headers;", "body", "LOkhttp3ResponseBody;", "networkResponse", "cacheResponse", "checkSupportResponse", "LNSString;LOkhttp3Response;", "priorResponse", "checkPriorResponse", "sentRequestAtMillis", "J", "receivedResponseAtMillis" };
  static const J2ObjcClassInfo _Okhttp3Response_Builder = { "Builder", "okhttp3", ptrTable, methods, fields, 7, 0x9, 20, 12, 0, -1, -1, -1, -1 };
  return &_Okhttp3Response_Builder;
}

@end

void Okhttp3Response_Builder_init(Okhttp3Response_Builder *self) {
  NSObject_init(self);
  self->code_ = -1;
  JreStrongAssignAndConsume(&self->headers_, new_Okhttp3Headers_Builder_init());
}

Okhttp3Response_Builder *new_Okhttp3Response_Builder_init() {
  J2OBJC_NEW_IMPL(Okhttp3Response_Builder, init)
}

Okhttp3Response_Builder *create_Okhttp3Response_Builder_init() {
  J2OBJC_CREATE_IMPL(Okhttp3Response_Builder, init)
}

void Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response_Builder *self, Okhttp3Response *response) {
  NSObject_init(self);
  self->code_ = -1;
  JreStrongAssign(&self->request_, ((Okhttp3Response *) nil_chk(response))->request_);
  JreStrongAssign(&self->protocol_, response->protocol_);
  self->code_ = response->code_;
  JreStrongAssign(&self->message_, response->message_);
  JreStrongAssign(&self->handshake_, response->handshake_);
  JreStrongAssign(&self->headers_, [((Okhttp3Headers *) nil_chk(response->headers_)) newBuilder]);
  JreStrongAssign(&self->body_, response->body_);
  JreStrongAssign(&self->networkResponse_, response->networkResponse_);
  JreStrongAssign(&self->cacheResponse_, response->cacheResponse_);
  JreStrongAssign(&self->priorResponse_, response->priorResponse_);
  self->sentRequestAtMillis_ = response->sentRequestAtMillis_;
  self->receivedResponseAtMillis_ = response->receivedResponseAtMillis_;
}

Okhttp3Response_Builder *new_Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response *response) {
  J2OBJC_NEW_IMPL(Okhttp3Response_Builder, initWithOkhttp3Response_, response)
}

Okhttp3Response_Builder *create_Okhttp3Response_Builder_initWithOkhttp3Response_(Okhttp3Response *response) {
  J2OBJC_CREATE_IMPL(Okhttp3Response_Builder, initWithOkhttp3Response_, response)
}

void Okhttp3Response_Builder_checkSupportResponseWithNSString_withOkhttp3Response_(Okhttp3Response_Builder *self, NSString *name, Okhttp3Response *response) {
  if (((Okhttp3Response *) nil_chk(response))->body_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @".body != null"));
  }
  else if (response->networkResponse_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @".networkResponse != null"));
  }
  else if (response->cacheResponse_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @".cacheResponse != null"));
  }
  else if (response->priorResponse_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @".priorResponse != null"));
  }
}

void Okhttp3Response_Builder_checkPriorResponseWithOkhttp3Response_(Okhttp3Response_Builder *self, Okhttp3Response *response) {
  if (((Okhttp3Response *) nil_chk(response))->body_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"priorResponse.body != null");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Response_Builder)
