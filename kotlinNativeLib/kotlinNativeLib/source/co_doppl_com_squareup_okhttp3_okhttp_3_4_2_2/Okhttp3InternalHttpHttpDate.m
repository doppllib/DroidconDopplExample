//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalHttpHttpDate.h"
#include "Okhttp3InternalUtil.h"
#include "java/lang/ThreadLocal.h"
#include "java/text/DateFormat.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface Okhttp3InternalHttpHttpDate ()

- (instancetype)init;

@end

inline JavaLangThreadLocal *Okhttp3InternalHttpHttpDate_get_STANDARD_DATE_FORMAT();
static JavaLangThreadLocal *Okhttp3InternalHttpHttpDate_STANDARD_DATE_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttpDate, STANDARD_DATE_FORMAT, JavaLangThreadLocal *)

inline IOSObjectArray *Okhttp3InternalHttpHttpDate_get_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS();
static IOSObjectArray *Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttpDate, BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS, IOSObjectArray *)

inline IOSObjectArray *Okhttp3InternalHttpHttpDate_get_BROWSER_COMPATIBLE_DATE_FORMATS();
static IOSObjectArray *Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttpDate, BROWSER_COMPATIBLE_DATE_FORMATS, IOSObjectArray *)

__attribute__((unused)) static void Okhttp3InternalHttpHttpDate_init(Okhttp3InternalHttpHttpDate *self);

__attribute__((unused)) static Okhttp3InternalHttpHttpDate *new_Okhttp3InternalHttpHttpDate_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttpHttpDate *create_Okhttp3InternalHttpHttpDate_init();

@interface Okhttp3InternalHttpHttpDate_1 : JavaLangThreadLocal

- (instancetype)init;

- (JavaTextDateFormat *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaTextDateFormat *)get;

- (JavaTextDateFormat *)childValueWithId:(JavaTextDateFormat *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttpHttpDate_1)

__attribute__((unused)) static void Okhttp3InternalHttpHttpDate_1_init(Okhttp3InternalHttpHttpDate_1 *self);

__attribute__((unused)) static Okhttp3InternalHttpHttpDate_1 *new_Okhttp3InternalHttpHttpDate_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttpHttpDate_1 *create_Okhttp3InternalHttpHttpDate_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttpHttpDate)

@implementation Okhttp3InternalHttpHttpDate

+ (jlong)MAX_DATE {
  return Okhttp3InternalHttpHttpDate_MAX_DATE;
}

+ (JavaUtilDate *)parseWithNSString:(NSString *)value {
  return Okhttp3InternalHttpHttpDate_parseWithNSString_(value);
}

+ (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)value {
  return Okhttp3InternalHttpHttpDate_formatWithJavaUtilDate_(value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttpHttpDate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilDate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(parseWithNSString:);
  methods[1].selector = @selector(formatWithJavaUtilDate:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DATE", "J", .constantValue.asLong = Okhttp3InternalHttpHttpDate_MAX_DATE, 0x19, -1, -1, -1, -1 },
    { "STANDARD_DATE_FORMAT", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 4, 5, -1 },
    { "BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "BROWSER_COMPATIBLE_DATE_FORMATS", "[LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LNSString;", "format", "LJavaUtilDate;", &Okhttp3InternalHttpHttpDate_STANDARD_DATE_FORMAT, "Ljava/lang/ThreadLocal<Ljava/text/DateFormat;>;", &Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS, &Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMATS };
  static const J2ObjcClassInfo _Okhttp3InternalHttpHttpDate = { "HttpDate", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttpHttpDate;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttpHttpDate class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalHttpHttpDate_STANDARD_DATE_FORMAT, new_Okhttp3InternalHttpHttpDate_1_init());
    JreStrongAssignAndConsume(&Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS, [IOSObjectArray newArrayWithObjects:(id[]){ @"EEE, dd MMM yyyy HH:mm:ss zzz", @"EEEE, dd-MMM-yy HH:mm:ss zzz", @"EEE MMM d HH:mm:ss yyyy", @"EEE, dd-MMM-yyyy HH:mm:ss z", @"EEE, dd-MMM-yyyy HH-mm-ss z", @"EEE, dd MMM yy HH:mm:ss z", @"EEE dd-MMM-yyyy HH:mm:ss z", @"EEE dd MMM yyyy HH:mm:ss z", @"EEE dd-MMM-yyyy HH-mm-ss z", @"EEE dd-MMM-yy HH:mm:ss z", @"EEE dd MMM yy HH:mm:ss z", @"EEE,dd-MMM-yy HH:mm:ss z", @"EEE,dd-MMM-yyyy HH:mm:ss z", @"EEE, dd-MM-yyyy HH:mm:ss z", @"EEE MMM d yyyy HH:mm:ss z" } count:15 type:NSString_class_()]);
    JreStrongAssignAndConsume(&Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMATS, [IOSObjectArray newArrayWithLength:Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS->size_ type:JavaTextDateFormat_class_()]);
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttpHttpDate)
  }
}

@end

JavaUtilDate *Okhttp3InternalHttpHttpDate_parseWithNSString_(NSString *value) {
  Okhttp3InternalHttpHttpDate_initialize();
  if ([((NSString *) nil_chk(value)) java_length] == 0) {
    return nil;
  }
  JavaTextParsePosition *position = create_JavaTextParsePosition_initWithInt_(0);
  JavaUtilDate *result = [((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(Okhttp3InternalHttpHttpDate_STANDARD_DATE_FORMAT)) get])) parseWithNSString:value withJavaTextParsePosition:position];
  if ([position getIndex] == [value java_length]) {
    return result;
  }
  @synchronized(Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS) {
    for (jint i = 0, count = ((IOSObjectArray *) nil_chk(Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS))->size_; i < count; i++) {
      JavaTextDateFormat *format = IOSObjectArray_Get(nil_chk(Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMATS), i);
      if (format == nil) {
        format = create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(IOSObjectArray_Get(Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS, i), JreLoadStatic(JavaUtilLocale, US));
        [format setTimeZoneWithJavaUtilTimeZone:JreLoadStatic(Okhttp3InternalUtil, UTC)];
        IOSObjectArray_Set(Okhttp3InternalHttpHttpDate_BROWSER_COMPATIBLE_DATE_FORMATS, i, format);
      }
      [position setIndexWithInt:0];
      result = JreRetainedLocalValue([format parseWithNSString:value withJavaTextParsePosition:position]);
      if ([position getIndex] != 0) {
        return JreRetainedLocalValue(result);
      }
    }
  }
  return nil;
}

NSString *Okhttp3InternalHttpHttpDate_formatWithJavaUtilDate_(JavaUtilDate *value) {
  Okhttp3InternalHttpHttpDate_initialize();
  return [((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(Okhttp3InternalHttpHttpDate_STANDARD_DATE_FORMAT)) get])) formatWithJavaUtilDate:value];
}

void Okhttp3InternalHttpHttpDate_init(Okhttp3InternalHttpHttpDate *self) {
  NSObject_init(self);
}

Okhttp3InternalHttpHttpDate *new_Okhttp3InternalHttpHttpDate_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpHttpDate, init)
}

Okhttp3InternalHttpHttpDate *create_Okhttp3InternalHttpHttpDate_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpHttpDate, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpHttpDate)

@implementation Okhttp3InternalHttpHttpDate_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttpHttpDate_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaTextDateFormat *)initialValue {
  JavaTextDateFormat *rfc1123 = create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"EEE, dd MMM yyyy HH:mm:ss 'GMT'", JreLoadStatic(JavaUtilLocale, US));
  [rfc1123 setLenientWithBoolean:false];
  [rfc1123 setTimeZoneWithJavaUtilTimeZone:JreLoadStatic(Okhttp3InternalUtil, UTC)];
  return rfc1123;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOkhttp3InternalHttpHttpDate;", "Ljava/lang/ThreadLocal<Ljava/text/DateFormat;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpHttpDate_1 = { "", "okhttp3.internal.http", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_Okhttp3InternalHttpHttpDate_1;
}

@end

void Okhttp3InternalHttpHttpDate_1_init(Okhttp3InternalHttpHttpDate_1 *self) {
  JavaLangThreadLocal_init(self);
}

Okhttp3InternalHttpHttpDate_1 *new_Okhttp3InternalHttpHttpDate_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpHttpDate_1, init)
}

Okhttp3InternalHttpHttpDate_1 *create_Okhttp3InternalHttpHttpDate_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpHttpDate_1, init)
}
