//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3ResponseBody.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/nio/charset/Charset.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"

@interface Okhttp3ResponseBody () {
 @public
  JavaIoReader *reader_;
}

- (JavaNioCharsetCharset *)charset;

@end

J2OBJC_FIELD_SETTER(Okhttp3ResponseBody, reader_, JavaIoReader *)

__attribute__((unused)) static JavaIoInputStream *Okhttp3ResponseBody_byteStream(Okhttp3ResponseBody *self);

__attribute__((unused)) static IOSByteArray *Okhttp3ResponseBody_bytes(Okhttp3ResponseBody *self);

__attribute__((unused)) static JavaNioCharsetCharset *Okhttp3ResponseBody_charset(Okhttp3ResponseBody *self);

@interface Okhttp3ResponseBody_1 : Okhttp3ResponseBody {
 @public
  Okhttp3MediaType *val$contentType_;
  jlong val$contentLength_;
  id<OkioBufferedSource> val$content_;
}

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                                withLong:(jlong)capture$1
                  withOkioBufferedSource:(id<OkioBufferedSource>)capture$2;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (id<OkioBufferedSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3ResponseBody_1)

__attribute__((unused)) static void Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3ResponseBody_1 *self, Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2);

__attribute__((unused)) static Okhttp3ResponseBody_1 *new_Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3ResponseBody_1 *create_Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2);

@implementation Okhttp3ResponseBody

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3ResponseBody_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3MediaType *)contentType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)contentLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoInputStream *)byteStream {
  return Okhttp3ResponseBody_byteStream(self);
}

- (id<OkioBufferedSource>)source {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)bytes {
  return Okhttp3ResponseBody_bytes(self);
}

- (JavaIoReader *)charStream {
  JavaIoReader *r = reader_;
  return r != nil ? r : (JreStrongAssignAndConsume(&reader_, new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(Okhttp3ResponseBody_byteStream(self), Okhttp3ResponseBody_charset(self))));
}

- (NSString *)string {
  return [NSString java_stringWithBytes:Okhttp3ResponseBody_bytes(self) charsetName:[((JavaNioCharsetCharset *) nil_chk(Okhttp3ResponseBody_charset(self))) name]];
}

- (JavaNioCharsetCharset *)charset {
  return Okhttp3ResponseBody_charset(self);
}

- (void)close {
  Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_([self source]);
}

+ (Okhttp3ResponseBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                       withNSString:(NSString *)content {
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withNSString_(contentType, content);
}

+ (Okhttp3ResponseBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                      withByteArray:(IOSByteArray *)content {
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withByteArray_(contentType, content);
}

+ (Okhttp3ResponseBody *)createWithOkhttp3MediaType:(Okhttp3MediaType *)contentType
                                           withLong:(jlong)contentLength
                             withOkioBufferedSource:(id<OkioBufferedSource>)content {
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_(contentType, contentLength, content);
}

- (void)dealloc {
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharset;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x9, 1, 3, -1, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x9, 1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(byteStream);
  methods[4].selector = @selector(source);
  methods[5].selector = @selector(bytes);
  methods[6].selector = @selector(charStream);
  methods[7].selector = @selector(string);
  methods[8].selector = @selector(charset);
  methods[9].selector = @selector(close);
  methods[10].selector = @selector(createWithOkhttp3MediaType:withNSString:);
  methods[11].selector = @selector(createWithOkhttp3MediaType:withByteArray:);
  methods[12].selector = @selector(createWithOkhttp3MediaType:withLong:withOkioBufferedSource:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "create", "LOkhttp3MediaType;LNSString;", "LOkhttp3MediaType;[B", "LOkhttp3MediaType;JLOkioBufferedSource;" };
  static const J2ObjcClassInfo _Okhttp3ResponseBody = { "ResponseBody", "okhttp3", ptrTable, methods, fields, 7, 0x401, 13, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3ResponseBody;
}

@end

void Okhttp3ResponseBody_init(Okhttp3ResponseBody *self) {
  NSObject_init(self);
}

JavaIoInputStream *Okhttp3ResponseBody_byteStream(Okhttp3ResponseBody *self) {
  return [((id<OkioBufferedSource>) nil_chk([self source])) inputStream];
}

IOSByteArray *Okhttp3ResponseBody_bytes(Okhttp3ResponseBody *self) {
  jlong contentLength = [self contentLength];
  if (contentLength > JavaLangInteger_MAX_VALUE) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J", @"Cannot buffer entire body for content length: ", contentLength));
  }
  id<OkioBufferedSource> source = [self source];
  IOSByteArray *bytes;
  @try {
    bytes = [((id<OkioBufferedSource>) nil_chk(source)) readByteArray];
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(source);
  }
  if (contentLength != -1 && contentLength != ((IOSByteArray *) nil_chk(bytes))->size_) {
    @throw create_JavaIoIOException_initWithNSString_(@"Content-Length and stream length disagree");
  }
  return bytes;
}

JavaNioCharsetCharset *Okhttp3ResponseBody_charset(Okhttp3ResponseBody *self) {
  Okhttp3MediaType *contentType = [self contentType];
  return contentType != nil ? [contentType charsetWithJavaNioCharsetCharset:JreLoadStatic(Okhttp3InternalUtil, UTF_8)] : JreLoadStatic(Okhttp3InternalUtil, UTF_8);
}

Okhttp3ResponseBody *Okhttp3ResponseBody_createWithOkhttp3MediaType_withNSString_(Okhttp3MediaType *contentType, NSString *content) {
  Okhttp3ResponseBody_initialize();
  JavaNioCharsetCharset *charset = JreLoadStatic(Okhttp3InternalUtil, UTF_8);
  if (contentType != nil) {
    charset = [contentType charset];
    if (charset == nil) {
      charset = JreLoadStatic(Okhttp3InternalUtil, UTF_8);
      contentType = Okhttp3MediaType_parseWithNSString_(JreStrcat("@$", contentType, @"; charset=utf-8"));
    }
  }
  OkioBuffer *buffer = [create_OkioBuffer_init() writeStringWithNSString:content withJavaNioCharsetCharset:charset];
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_(contentType, [((OkioBuffer *) nil_chk(buffer)) size], buffer);
}

Okhttp3ResponseBody *Okhttp3ResponseBody_createWithOkhttp3MediaType_withByteArray_(Okhttp3MediaType *contentType, IOSByteArray *content) {
  Okhttp3ResponseBody_initialize();
  OkioBuffer *buffer = [create_OkioBuffer_init() writeWithByteArray:content];
  return Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_(contentType, ((IOSByteArray *) nil_chk(content))->size_, buffer);
}

Okhttp3ResponseBody *Okhttp3ResponseBody_createWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3MediaType *contentType, jlong contentLength, id<OkioBufferedSource> content) {
  Okhttp3ResponseBody_initialize();
  if (content == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"source == null");
  return create_Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(contentType, contentLength, content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3ResponseBody)

@implementation Okhttp3ResponseBody_1

- (instancetype)initWithOkhttp3MediaType:(Okhttp3MediaType *)capture$0
                                withLong:(jlong)capture$1
                  withOkioBufferedSource:(id<OkioBufferedSource>)capture$2 {
  Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(self, capture$0, capture$1, capture$2);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return val$contentType_;
}

- (jlong)contentLength {
  return val$contentLength_;
}

- (id<OkioBufferedSource>)source {
  return val$content_;
}

- (void)dealloc {
  RELEASE_(val$contentType_);
  RELEASE_(val$content_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3MediaType:withLong:withOkioBufferedSource:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(source);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$contentLength_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$content_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ResponseBody;", "createWithOkhttp3MediaType:withLong:withOkioBufferedSource:" };
  static const J2ObjcClassInfo _Okhttp3ResponseBody_1 = { "", "okhttp3", ptrTable, methods, fields, 7, 0x8018, 4, 3, 0, -1, 1, -1, -1 };
  return &_Okhttp3ResponseBody_1;
}

@end

void Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3ResponseBody_1 *self, Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2) {
  JreStrongAssign(&self->val$contentType_, capture$0);
  self->val$contentLength_ = capture$1;
  JreStrongAssign(&self->val$content_, capture$2);
  Okhttp3ResponseBody_init(self);
}

Okhttp3ResponseBody_1 *new_Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2) {
  J2OBJC_NEW_IMPL(Okhttp3ResponseBody_1, initWithOkhttp3MediaType_withLong_withOkioBufferedSource_, capture$0, capture$1, capture$2)
}

Okhttp3ResponseBody_1 *create_Okhttp3ResponseBody_1_initWithOkhttp3MediaType_withLong_withOkioBufferedSource_(Okhttp3MediaType *capture$0, jlong capture$1, id<OkioBufferedSource> capture$2) {
  J2OBJC_CREATE_IMPL(Okhttp3ResponseBody_1, initWithOkhttp3MediaType_withLong_withOkioBufferedSource_, capture$0, capture$1, capture$2)
}
