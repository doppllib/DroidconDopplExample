//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalUtil.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Array.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalUtil ()

- (instancetype)init;

+ (id<JavaUtilList>)intersectWithNSObjectArray:(IOSObjectArray *)first
                             withNSObjectArray:(IOSObjectArray *)second;

+ (jboolean)containsInvalidHostnameAsciiCodesWithNSString:(NSString *)hostnameAscii;

@end

inline JavaUtilRegexPattern *Okhttp3InternalUtil_get_VERIFY_AS_IP_ADDRESS();
static JavaUtilRegexPattern *Okhttp3InternalUtil_VERIFY_AS_IP_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalUtil, VERIFY_AS_IP_ADDRESS, JavaUtilRegexPattern *)

__attribute__((unused)) static void Okhttp3InternalUtil_init(Okhttp3InternalUtil *self);

__attribute__((unused)) static Okhttp3InternalUtil *new_Okhttp3InternalUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalUtil *create_Okhttp3InternalUtil_init();

__attribute__((unused)) static id<JavaUtilList> Okhttp3InternalUtil_intersectWithNSObjectArray_withNSObjectArray_(IOSObjectArray *first, IOSObjectArray *second);

__attribute__((unused)) static jboolean Okhttp3InternalUtil_containsInvalidHostnameAsciiCodesWithNSString_(NSString *hostnameAscii);

@interface Okhttp3InternalUtil_1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  NSString *val$name_;
  jboolean val$daemon_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalUtil_1)

__attribute__((unused)) static void Okhttp3InternalUtil_1_initWithNSString_withBoolean_(Okhttp3InternalUtil_1 *self, NSString *capture$0, jboolean capture$1);

__attribute__((unused)) static Okhttp3InternalUtil_1 *new_Okhttp3InternalUtil_1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalUtil_1 *create_Okhttp3InternalUtil_1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalUtil)

IOSByteArray *Okhttp3InternalUtil_EMPTY_BYTE_ARRAY;
IOSObjectArray *Okhttp3InternalUtil_EMPTY_STRING_ARRAY;
JavaNioCharsetCharset *Okhttp3InternalUtil_UTF_8;
JavaUtilTimeZone *Okhttp3InternalUtil_UTC;

@implementation Okhttp3InternalUtil

+ (IOSByteArray *)EMPTY_BYTE_ARRAY {
  return Okhttp3InternalUtil_EMPTY_BYTE_ARRAY;
}

+ (IOSObjectArray *)EMPTY_STRING_ARRAY {
  return Okhttp3InternalUtil_EMPTY_STRING_ARRAY;
}

+ (JavaNioCharsetCharset *)UTF_8 {
  return Okhttp3InternalUtil_UTF_8;
}

+ (JavaUtilTimeZone *)UTC {
  return Okhttp3InternalUtil_UTC;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkOffsetAndCountWithLong:(jlong)arrayLength
                           withLong:(jlong)offset
                           withLong:(jlong)count {
  Okhttp3InternalUtil_checkOffsetAndCountWithLong_withLong_withLong_(arrayLength, offset, count);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return Okhttp3InternalUtil_equalWithId_withId_(a, b);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable {
  Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(closeable);
}

+ (void)closeQuietlyWithJavaNetSocket:(JavaNetSocket *)socket {
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

+ (void)closeQuietlyWithJavaNetServerSocket:(JavaNetServerSocket *)serverSocket {
  Okhttp3InternalUtil_closeQuietlyWithJavaNetServerSocket_(serverSocket);
}

+ (void)closeAllWithJavaIoCloseable:(id<JavaIoCloseable>)a
                withJavaIoCloseable:(id<JavaIoCloseable>)b {
  Okhttp3InternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(a, b);
}

+ (jboolean)discardWithOkioSource:(id<OkioSource>)source
                          withInt:(jint)timeout
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return Okhttp3InternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, timeout, timeUnit);
}

+ (jboolean)skipAllWithOkioSource:(id<OkioSource>)source
                          withInt:(jint)duration
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return Okhttp3InternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, duration, timeUnit);
}

+ (NSString *)md5HexWithNSString:(NSString *)s {
  return Okhttp3InternalUtil_md5HexWithNSString_(s);
}

+ (NSString *)shaBase64WithNSString:(NSString *)s {
  return Okhttp3InternalUtil_shaBase64WithNSString_(s);
}

+ (OkioByteString *)sha1WithOkioByteString:(OkioByteString *)s {
  return Okhttp3InternalUtil_sha1WithOkioByteString_(s);
}

+ (OkioByteString *)sha256WithOkioByteString:(OkioByteString *)s {
  return Okhttp3InternalUtil_sha256WithOkioByteString_(s);
}

+ (id<JavaUtilList>)immutableListWithJavaUtilList:(id<JavaUtilList>)list {
  return Okhttp3InternalUtil_immutableListWithJavaUtilList_(list);
}

+ (id<JavaUtilList>)immutableListWithNSObjectArray:(IOSObjectArray *)elements {
  return Okhttp3InternalUtil_immutableListWithNSObjectArray_(elements);
}

+ (id<JavaUtilConcurrentThreadFactory>)threadFactoryWithNSString:(NSString *)name
                                                     withBoolean:(jboolean)daemon {
  return Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(name, daemon);
}

+ (IOSObjectArray *)intersectWithIOSClass:(IOSClass *)arrayType
                        withNSObjectArray:(IOSObjectArray *)first
                        withNSObjectArray:(IOSObjectArray *)second {
  return Okhttp3InternalUtil_intersectWithIOSClass_withNSObjectArray_withNSObjectArray_(arrayType, first, second);
}

+ (id<JavaUtilList>)intersectWithNSObjectArray:(IOSObjectArray *)first
                             withNSObjectArray:(IOSObjectArray *)second {
  return Okhttp3InternalUtil_intersectWithNSObjectArray_withNSObjectArray_(first, second);
}

+ (NSString *)hostHeaderWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                               withBoolean:(jboolean)includeDefaultPort {
  return Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_(url, includeDefaultPort);
}

+ (NSString *)toHumanReadableAsciiWithNSString:(NSString *)s {
  return Okhttp3InternalUtil_toHumanReadableAsciiWithNSString_(s);
}

+ (jboolean)isAndroidGetsocknameErrorWithJavaLangAssertionError:(JavaLangAssertionError *)e {
  return Okhttp3InternalUtil_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)value {
  return Okhttp3InternalUtil_indexOfWithNSObjectArray_withId_(array, value);
}

+ (IOSObjectArray *)concatWithNSStringArray:(IOSObjectArray *)array
                               withNSString:(NSString *)value {
  return Okhttp3InternalUtil_concatWithNSStringArray_withNSString_(array, value);
}

+ (jint)skipLeadingAsciiWhitespaceWithNSString:(NSString *)input
                                       withInt:(jint)pos
                                       withInt:(jint)limit {
  return Okhttp3InternalUtil_skipLeadingAsciiWhitespaceWithNSString_withInt_withInt_(input, pos, limit);
}

+ (jint)skipTrailingAsciiWhitespaceWithNSString:(NSString *)input
                                        withInt:(jint)pos
                                        withInt:(jint)limit {
  return Okhttp3InternalUtil_skipTrailingAsciiWhitespaceWithNSString_withInt_withInt_(input, pos, limit);
}

+ (NSString *)trimSubstringWithNSString:(NSString *)string
                                withInt:(jint)pos
                                withInt:(jint)limit {
  return Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(string, pos, limit);
}

+ (jint)delimiterOffsetWithNSString:(NSString *)input
                            withInt:(jint)pos
                            withInt:(jint)limit
                       withNSString:(NSString *)delimiters {
  return Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(input, pos, limit, delimiters);
}

+ (jint)delimiterOffsetWithNSString:(NSString *)input
                            withInt:(jint)pos
                            withInt:(jint)limit
                           withChar:(jchar)delimiter {
  return Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(input, pos, limit, delimiter);
}

+ (NSString *)domainToAsciiWithNSString:(NSString *)input {
  return Okhttp3InternalUtil_domainToAsciiWithNSString_(input);
}

+ (jboolean)containsInvalidHostnameAsciiCodesWithNSString:(NSString *)hostnameAscii {
  return Okhttp3InternalUtil_containsInvalidHostnameAsciiCodesWithNSString_(hostnameAscii);
}

+ (jboolean)verifyAsIpAddressWithNSString:(NSString *)host {
  return Okhttp3InternalUtil_verifyAsIpAddressWithNSString_(host);
}

+ (NSString *)formatWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(format, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, 10, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 12, 10, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 15, -1, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x9, 19, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x89, 20, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 27, 28, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 27, 30, -1, 31, -1, -1 },
    { NULL, "LNSString;", 0x9, 32, 33, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 34, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 37, 38, -1, 39, -1, -1 },
    { NULL, "[LNSString;", 0x9, 40, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 43, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 45, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 46, 47, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 46, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 49, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 50, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 51, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 52, 53, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkOffsetAndCountWithLong:withLong:withLong:);
  methods[2].selector = @selector(equalWithId:withId:);
  methods[3].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  methods[4].selector = @selector(closeQuietlyWithJavaNetSocket:);
  methods[5].selector = @selector(closeQuietlyWithJavaNetServerSocket:);
  methods[6].selector = @selector(closeAllWithJavaIoCloseable:withJavaIoCloseable:);
  methods[7].selector = @selector(discardWithOkioSource:withInt:withJavaUtilConcurrentTimeUnit:);
  methods[8].selector = @selector(skipAllWithOkioSource:withInt:withJavaUtilConcurrentTimeUnit:);
  methods[9].selector = @selector(md5HexWithNSString:);
  methods[10].selector = @selector(shaBase64WithNSString:);
  methods[11].selector = @selector(sha1WithOkioByteString:);
  methods[12].selector = @selector(sha256WithOkioByteString:);
  methods[13].selector = @selector(immutableListWithJavaUtilList:);
  methods[14].selector = @selector(immutableListWithNSObjectArray:);
  methods[15].selector = @selector(threadFactoryWithNSString:withBoolean:);
  methods[16].selector = @selector(intersectWithIOSClass:withNSObjectArray:withNSObjectArray:);
  methods[17].selector = @selector(intersectWithNSObjectArray:withNSObjectArray:);
  methods[18].selector = @selector(hostHeaderWithOkhttp3HttpUrl:withBoolean:);
  methods[19].selector = @selector(toHumanReadableAsciiWithNSString:);
  methods[20].selector = @selector(isAndroidGetsocknameErrorWithJavaLangAssertionError:);
  methods[21].selector = @selector(indexOfWithNSObjectArray:withId:);
  methods[22].selector = @selector(concatWithNSStringArray:withNSString:);
  methods[23].selector = @selector(skipLeadingAsciiWhitespaceWithNSString:withInt:withInt:);
  methods[24].selector = @selector(skipTrailingAsciiWhitespaceWithNSString:withInt:withInt:);
  methods[25].selector = @selector(trimSubstringWithNSString:withInt:withInt:);
  methods[26].selector = @selector(delimiterOffsetWithNSString:withInt:withInt:withNSString:);
  methods[27].selector = @selector(delimiterOffsetWithNSString:withInt:withInt:withChar:);
  methods[28].selector = @selector(domainToAsciiWithNSString:);
  methods[29].selector = @selector(containsInvalidHostnameAsciiCodesWithNSString:);
  methods[30].selector = @selector(verifyAsIpAddressWithNSString:);
  methods[31].selector = @selector(formatWithNSString:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BYTE_ARRAY", "[B", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "UTF_8", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "UTC", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "VERIFY_AS_IP_ADDRESS", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
  };
  static const void *ptrTable[] = { "checkOffsetAndCount", "JJJ", "equal", "LNSObject;LNSObject;", "closeQuietly", "LJavaIoCloseable;", "LJavaNetSocket;", "LJavaNetServerSocket;", "closeAll", "LJavaIoCloseable;LJavaIoCloseable;", "LJavaIoIOException;", "discard", "LOkioSource;ILJavaUtilConcurrentTimeUnit;", "skipAll", "md5Hex", "LNSString;", "shaBase64", "sha1", "LOkioByteString;", "sha256", "immutableList", "LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Ljava/util/List<TT;>;", "threadFactory", "LNSString;Z", "intersect", "LIOSClass;[LNSObject;[LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;[TT;[TT;)[TT;", "[LNSObject;[LNSObject;", "<T:Ljava/lang/Object;>([TT;[TT;)Ljava/util/List<TT;>;", "hostHeader", "LOkhttp3HttpUrl;Z", "toHumanReadableAscii", "isAndroidGetsocknameError", "LJavaLangAssertionError;", "indexOf", "[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>([TT;TT;)I", "concat", "[LNSString;LNSString;", "skipLeadingAsciiWhitespace", "LNSString;II", "skipTrailingAsciiWhitespace", "trimSubstring", "delimiterOffset", "LNSString;IILNSString;", "LNSString;IIC", "domainToAscii", "containsInvalidHostnameAsciiCodes", "verifyAsIpAddress", "format", "LNSString;[LNSObject;", &Okhttp3InternalUtil_EMPTY_BYTE_ARRAY, &Okhttp3InternalUtil_EMPTY_STRING_ARRAY, &Okhttp3InternalUtil_UTF_8, &Okhttp3InternalUtil_UTC, &Okhttp3InternalUtil_VERIFY_AS_IP_ADDRESS };
  static const J2ObjcClassInfo _Okhttp3InternalUtil = { "Util", "okhttp3.internal", ptrTable, methods, fields, 7, 0x11, 32, 5, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalUtil;
}

+ (void)initialize {
  if (self == [Okhttp3InternalUtil class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalUtil_EMPTY_BYTE_ARRAY, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&Okhttp3InternalUtil_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    JreStrongAssign(&Okhttp3InternalUtil_UTF_8, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    JreStrongAssign(&Okhttp3InternalUtil_UTC, JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
    JreStrongAssign(&Okhttp3InternalUtil_VERIFY_AS_IP_ADDRESS, JavaUtilRegexPattern_compileWithNSString_(@"([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)"));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalUtil)
  }
}

@end

void Okhttp3InternalUtil_init(Okhttp3InternalUtil *self) {
  NSObject_init(self);
}

Okhttp3InternalUtil *new_Okhttp3InternalUtil_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalUtil, init)
}

Okhttp3InternalUtil *create_Okhttp3InternalUtil_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalUtil, init)
}

void Okhttp3InternalUtil_checkOffsetAndCountWithLong_withLong_withLong_(jlong arrayLength, jlong offset, jlong count) {
  Okhttp3InternalUtil_initialize();
  if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_init();
  }
}

jboolean Okhttp3InternalUtil_equalWithId_withId_(id a, id b) {
  Okhttp3InternalUtil_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

void Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable) {
  Okhttp3InternalUtil_initialize();
  if (closeable != nil) {
    @try {
      [closeable close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(JavaNetSocket *socket) {
  Okhttp3InternalUtil_initialize();
  if (socket != nil) {
    @try {
      [socket close];
    }
    @catch (JavaLangAssertionError *e) {
      if (!Okhttp3InternalUtil_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e)) @throw e;
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void Okhttp3InternalUtil_closeQuietlyWithJavaNetServerSocket_(JavaNetServerSocket *serverSocket) {
  Okhttp3InternalUtil_initialize();
  if (serverSocket != nil) {
    @try {
      [serverSocket close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void Okhttp3InternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(id<JavaIoCloseable> a, id<JavaIoCloseable> b) {
  Okhttp3InternalUtil_initialize();
  JavaLangThrowable *thrown = nil;
  @try {
    [((id<JavaIoCloseable>) nil_chk(a)) close];
  }
  @catch (JavaLangThrowable *e) {
    thrown = e;
  }
  @try {
    [((id<JavaIoCloseable>) nil_chk(b)) close];
  }
  @catch (JavaLangThrowable *e) {
    if (thrown == nil) thrown = e;
  }
  if (thrown == nil) return;
  if ([thrown isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(thrown, [JavaIoIOException class]);
  if ([thrown isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(thrown, [JavaLangRuntimeException class]);
  if ([thrown isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(thrown, [JavaLangError class]);
  @throw create_JavaLangAssertionError_initWithId_(thrown);
}

jboolean Okhttp3InternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(id<OkioSource> source, jint timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  Okhttp3InternalUtil_initialize();
  @try {
    return Okhttp3InternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, timeout, timeUnit);
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
}

jboolean Okhttp3InternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(id<OkioSource> source, jint duration, JavaUtilConcurrentTimeUnit *timeUnit) {
  Okhttp3InternalUtil_initialize();
  jlong now = JavaLangSystem_nanoTime();
  jlong originalDuration = [((OkioTimeout *) nil_chk([((id<OkioSource>) nil_chk(source)) timeout])) hasDeadline] ? [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTime] - now : JavaLangLong_MAX_VALUE;
  [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTimeWithLong:now + JavaLangMath_minWithLong_withLong_(originalDuration, [((JavaUtilConcurrentTimeUnit *) nil_chk(timeUnit)) toNanosWithLong:duration])];
  @try {
    OkioBuffer *skipBuffer = create_OkioBuffer_init();
    while ([source readWithOkioBuffer:skipBuffer withLong:8192] != -1) {
      [skipBuffer clear];
    }
    return true;
  }
  @catch (JavaIoInterruptedIOException *e) {
    return false;
  }
  @finally {
    if (originalDuration == JavaLangLong_MAX_VALUE) {
      [((OkioTimeout *) nil_chk([source timeout])) clearDeadline];
    }
    else {
      [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTimeWithLong:now + originalDuration];
    }
  }
}

NSString *Okhttp3InternalUtil_md5HexWithNSString_(NSString *s) {
  Okhttp3InternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
    IOSByteArray *md5bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((NSString *) nil_chk(s)) java_getBytesWithCharsetName:@"UTF-8"]];
    return [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(md5bytes))) hex];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

NSString *Okhttp3InternalUtil_shaBase64WithNSString_(NSString *s) {
  Okhttp3InternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
    IOSByteArray *sha1Bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((NSString *) nil_chk(s)) java_getBytesWithCharsetName:@"UTF-8"]];
    return [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(sha1Bytes))) base64];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

OkioByteString *Okhttp3InternalUtil_sha1WithOkioByteString_(OkioByteString *s) {
  Okhttp3InternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
    IOSByteArray *sha1Bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((OkioByteString *) nil_chk(s)) toByteArray]];
    return OkioByteString_ofWithByteArray_(sha1Bytes);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

OkioByteString *Okhttp3InternalUtil_sha256WithOkioByteString_(OkioByteString *s) {
  Okhttp3InternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-256");
    IOSByteArray *sha1Bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((OkioByteString *) nil_chk(s)) toByteArray]];
    return OkioByteString_ofWithByteArray_(sha1Bytes);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

id<JavaUtilList> Okhttp3InternalUtil_immutableListWithJavaUtilList_(id<JavaUtilList> list) {
  Okhttp3InternalUtil_initialize();
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(create_JavaUtilArrayList_initWithJavaUtilCollection_(list));
}

id<JavaUtilList> Okhttp3InternalUtil_immutableListWithNSObjectArray_(IOSObjectArray *elements) {
  Okhttp3InternalUtil_initialize();
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([((IOSObjectArray *) nil_chk(elements)) java_clone]));
}

id<JavaUtilConcurrentThreadFactory> Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(NSString *name, jboolean daemon) {
  Okhttp3InternalUtil_initialize();
  return create_Okhttp3InternalUtil_1_initWithNSString_withBoolean_(name, daemon);
}

IOSObjectArray *Okhttp3InternalUtil_intersectWithIOSClass_withNSObjectArray_withNSObjectArray_(IOSClass *arrayType, IOSObjectArray *first, IOSObjectArray *second) {
  Okhttp3InternalUtil_initialize();
  id<JavaUtilList> result = Okhttp3InternalUtil_intersectWithNSObjectArray_withNSObjectArray_(first, second);
  return [((id<JavaUtilList>) nil_chk(result)) toArrayWithNSObjectArray:(IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(arrayType, [result size]), IOSClass_arrayType(NSObject_class_(), 1))];
}

id<JavaUtilList> Okhttp3InternalUtil_intersectWithNSObjectArray_withNSObjectArray_(IOSObjectArray *first, IOSObjectArray *second) {
  Okhttp3InternalUtil_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = first;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id a = *b__++;
      {
        IOSObjectArray *a__ = second;
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id b = *b__++;
          if ([nil_chk(a) isEqual:b]) {
            [result addWithId:b];
            break;
          }
        }
      }
    }
  }
  return result;
}

NSString *Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_(Okhttp3HttpUrl *url, jboolean includeDefaultPort) {
  Okhttp3InternalUtil_initialize();
  NSString *host = [((NSString *) nil_chk([((Okhttp3HttpUrl *) nil_chk(url)) host])) java_contains:@":"] ? JreStrcat("C$C", '[', [url host], ']') : [url host];
  return includeDefaultPort || [url port] != Okhttp3HttpUrl_defaultPortWithNSString_([url scheme]) ? JreStrcat("$CI", host, ':', [url port]) : host;
}

NSString *Okhttp3InternalUtil_toHumanReadableAsciiWithNSString_(NSString *s) {
  Okhttp3InternalUtil_initialize();
  for (jint i = 0, length = [((NSString *) nil_chk(s)) java_length], c; i < length; i += JavaLangCharacter_charCountWithInt_(c)) {
    c = [s java_codePointAt:i];
    if (c > 0x001f && c < 0x007f) continue;
    OkioBuffer *buffer = create_OkioBuffer_init();
    [buffer writeUtf8WithNSString:s withInt:0 withInt:i];
    for (jint j = i; j < length; j += JavaLangCharacter_charCountWithInt_(c)) {
      c = [s java_codePointAt:j];
      [buffer writeUtf8CodePointWithInt:c > 0x001f && c < 0x007f ? c : '?'];
    }
    return [buffer readUtf8];
  }
  return s;
}

jboolean Okhttp3InternalUtil_isAndroidGetsocknameErrorWithJavaLangAssertionError_(JavaLangAssertionError *e) {
  Okhttp3InternalUtil_initialize();
  return [((JavaLangAssertionError *) nil_chk(e)) getCause] != nil && [e getMessage] != nil && [((NSString *) nil_chk([e getMessage])) java_contains:@"getsockname failed"];
}

jint Okhttp3InternalUtil_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id value) {
  Okhttp3InternalUtil_initialize();
  for (jint i = 0, size = ((IOSObjectArray *) nil_chk(array))->size_; i < size; i++) {
    if (Okhttp3InternalUtil_equalWithId_withId_(IOSObjectArray_Get(array, i), value)) return i;
  }
  return -1;
}

IOSObjectArray *Okhttp3InternalUtil_concatWithNSStringArray_withNSString_(IOSObjectArray *array, NSString *value) {
  Okhttp3InternalUtil_initialize();
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(array))->size_ + 1 type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, result, 0, array->size_);
  IOSObjectArray_Set(result, result->size_ - 1, value);
  return result;
}

jint Okhttp3InternalUtil_skipLeadingAsciiWhitespaceWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3InternalUtil_initialize();
  for (jint i = pos; i < limit; i++) {
    switch ([((NSString *) nil_chk(input)) charAtWithInt:i]) {
      case 0x0009:
      case 0x000a:
      case 0x000c:
      case 0x000d:
      case ' ':
      continue;
      default:
      return i;
    }
  }
  return limit;
}

jint Okhttp3InternalUtil_skipTrailingAsciiWhitespaceWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3InternalUtil_initialize();
  for (jint i = limit - 1; i >= pos; i--) {
    switch ([((NSString *) nil_chk(input)) charAtWithInt:i]) {
      case 0x0009:
      case 0x000a:
      case 0x000c:
      case 0x000d:
      case ' ':
      continue;
      default:
      return i + 1;
    }
  }
  return pos;
}

NSString *Okhttp3InternalUtil_trimSubstringWithNSString_withInt_withInt_(NSString *string, jint pos, jint limit) {
  Okhttp3InternalUtil_initialize();
  jint start = Okhttp3InternalUtil_skipLeadingAsciiWhitespaceWithNSString_withInt_withInt_(string, pos, limit);
  jint end = Okhttp3InternalUtil_skipTrailingAsciiWhitespaceWithNSString_withInt_withInt_(string, start, limit);
  return [((NSString *) nil_chk(string)) java_substring:start endIndex:end];
}

jint Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(NSString *input, jint pos, jint limit, NSString *delimiters) {
  Okhttp3InternalUtil_initialize();
  for (jint i = pos; i < limit; i++) {
    if ([((NSString *) nil_chk(delimiters)) java_indexOf:[((NSString *) nil_chk(input)) charAtWithInt:i]] != -1) return i;
  }
  return limit;
}

jint Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(NSString *input, jint pos, jint limit, jchar delimiter) {
  Okhttp3InternalUtil_initialize();
  for (jint i = pos; i < limit; i++) {
    if ([((NSString *) nil_chk(input)) charAtWithInt:i] == delimiter) return i;
  }
  return limit;
}

NSString *Okhttp3InternalUtil_domainToAsciiWithNSString_(NSString *input) {
  Okhttp3InternalUtil_initialize();
  @try {
    NSString *result = [((NSString *) nil_chk(input)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    if ([((NSString *) nil_chk(result)) java_isEmpty]) return nil;
    if (Okhttp3InternalUtil_containsInvalidHostnameAsciiCodesWithNSString_(result)) {
      return nil;
    }
    return result;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    return nil;
  }
}

jboolean Okhttp3InternalUtil_containsInvalidHostnameAsciiCodesWithNSString_(NSString *hostnameAscii) {
  Okhttp3InternalUtil_initialize();
  for (jint i = 0; i < [((NSString *) nil_chk(hostnameAscii)) java_length]; i++) {
    jchar c = [hostnameAscii charAtWithInt:i];
    if (c <= 0x001f || c >= 0x007f) {
      return true;
    }
    if ([@" #%/:?@[\\]" java_indexOf:c] != -1) {
      return true;
    }
  }
  return false;
}

jboolean Okhttp3InternalUtil_verifyAsIpAddressWithNSString_(NSString *host) {
  Okhttp3InternalUtil_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(Okhttp3InternalUtil_VERIFY_AS_IP_ADDRESS)) matcherWithJavaLangCharSequence:host])) matches];
}

NSString *Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args) {
  Okhttp3InternalUtil_initialize();
  return NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, US), format, args);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalUtil)

@implementation Okhttp3InternalUtil_1

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1 {
  Okhttp3InternalUtil_1_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  JavaLangThread *result = create_JavaLangThread_initWithJavaLangRunnable_withNSString_(runnable, val$name_);
  [result setDaemonWithBoolean:val$daemon_];
  return result;
}

- (void)dealloc {
  RELEASE_(val$name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$daemon_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LOkhttp3InternalUtil;", "threadFactoryWithNSString:withBoolean:" };
  static const J2ObjcClassInfo _Okhttp3InternalUtil_1 = { "", "okhttp3.internal", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_Okhttp3InternalUtil_1;
}

@end

void Okhttp3InternalUtil_1_initWithNSString_withBoolean_(Okhttp3InternalUtil_1 *self, NSString *capture$0, jboolean capture$1) {
  JreStrongAssign(&self->val$name_, capture$0);
  self->val$daemon_ = capture$1;
  NSObject_init(self);
}

Okhttp3InternalUtil_1 *new_Okhttp3InternalUtil_1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(Okhttp3InternalUtil_1, initWithNSString_withBoolean_, capture$0, capture$1)
}

Okhttp3InternalUtil_1 *create_Okhttp3InternalUtil_1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalUtil_1, initWithNSString_withBoolean_, capture$0, capture$1)
}
