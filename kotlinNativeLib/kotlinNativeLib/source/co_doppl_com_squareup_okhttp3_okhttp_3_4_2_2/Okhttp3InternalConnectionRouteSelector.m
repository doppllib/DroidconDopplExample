//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Okhttp3Address.h"
#include "Okhttp3Dns.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalConnectionRouteDatabase.h"
#include "Okhttp3InternalConnectionRouteSelector.h"
#include "Okhttp3Route.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Proxy.h"
#include "java/net/ProxySelector.h"
#include "java/net/SocketAddress.h"
#include "java/net/SocketException.h"
#include "java/net/URI.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"

@interface Okhttp3InternalConnectionRouteSelector () {
 @public
  Okhttp3Address *address_;
  Okhttp3InternalConnectionRouteDatabase *routeDatabase_;
  JavaNetProxy *lastProxy_;
  JavaNetInetSocketAddress *lastInetSocketAddress_;
  id<JavaUtilList> proxies_;
  jint nextProxyIndex_;
  id<JavaUtilList> inetSocketAddresses_;
  jint nextInetSocketAddressIndex_;
  id<JavaUtilList> postponedRoutes_;
}

- (void)resetNextProxyWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                        withJavaNetProxy:(JavaNetProxy *)proxy;

- (jboolean)hasNextProxy;

- (JavaNetProxy *)nextProxy;

- (void)resetNextInetSocketAddressWithJavaNetProxy:(JavaNetProxy *)proxy;

- (jboolean)hasNextInetSocketAddress;

- (JavaNetInetSocketAddress *)nextInetSocketAddress;

- (jboolean)hasNextPostponed;

- (Okhttp3Route *)nextPostponed;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, address_, Okhttp3Address *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, routeDatabase_, Okhttp3InternalConnectionRouteDatabase *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, lastProxy_, JavaNetProxy *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, lastInetSocketAddress_, JavaNetInetSocketAddress *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, proxies_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, inetSocketAddresses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRouteSelector, postponedRoutes_, id<JavaUtilList>)

__attribute__((unused)) static void Okhttp3InternalConnectionRouteSelector_resetNextProxyWithOkhttp3HttpUrl_withJavaNetProxy_(Okhttp3InternalConnectionRouteSelector *self, Okhttp3HttpUrl *url, JavaNetProxy *proxy);

__attribute__((unused)) static jboolean Okhttp3InternalConnectionRouteSelector_hasNextProxy(Okhttp3InternalConnectionRouteSelector *self);

__attribute__((unused)) static JavaNetProxy *Okhttp3InternalConnectionRouteSelector_nextProxy(Okhttp3InternalConnectionRouteSelector *self);

__attribute__((unused)) static void Okhttp3InternalConnectionRouteSelector_resetNextInetSocketAddressWithJavaNetProxy_(Okhttp3InternalConnectionRouteSelector *self, JavaNetProxy *proxy);

__attribute__((unused)) static jboolean Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(Okhttp3InternalConnectionRouteSelector *self);

__attribute__((unused)) static JavaNetInetSocketAddress *Okhttp3InternalConnectionRouteSelector_nextInetSocketAddress(Okhttp3InternalConnectionRouteSelector *self);

__attribute__((unused)) static jboolean Okhttp3InternalConnectionRouteSelector_hasNextPostponed(Okhttp3InternalConnectionRouteSelector *self);

__attribute__((unused)) static Okhttp3Route *Okhttp3InternalConnectionRouteSelector_nextPostponed(Okhttp3InternalConnectionRouteSelector *self);

@implementation Okhttp3InternalConnectionRouteSelector

- (instancetype)initWithOkhttp3Address:(Okhttp3Address *)address
withOkhttp3InternalConnectionRouteDatabase:(Okhttp3InternalConnectionRouteDatabase *)routeDatabase {
  Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(self, address, routeDatabase);
  return self;
}

- (jboolean)hasNext {
  return Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(self) || Okhttp3InternalConnectionRouteSelector_hasNextProxy(self) || Okhttp3InternalConnectionRouteSelector_hasNextPostponed(self);
}

- (Okhttp3Route *)next {
  if (!Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(self)) {
    if (!Okhttp3InternalConnectionRouteSelector_hasNextProxy(self)) {
      if (!Okhttp3InternalConnectionRouteSelector_hasNextPostponed(self)) {
        @throw create_JavaUtilNoSuchElementException_init();
      }
      return Okhttp3InternalConnectionRouteSelector_nextPostponed(self);
    }
    JreStrongAssign(&lastProxy_, Okhttp3InternalConnectionRouteSelector_nextProxy(self));
  }
  JreStrongAssign(&lastInetSocketAddress_, Okhttp3InternalConnectionRouteSelector_nextInetSocketAddress(self));
  Okhttp3Route *route = create_Okhttp3Route_initWithOkhttp3Address_withJavaNetProxy_withJavaNetInetSocketAddress_(address_, lastProxy_, lastInetSocketAddress_);
  if ([((Okhttp3InternalConnectionRouteDatabase *) nil_chk(routeDatabase_)) shouldPostponeWithOkhttp3Route:route]) {
    [((id<JavaUtilList>) nil_chk(postponedRoutes_)) addWithId:route];
    return [self next];
  }
  return route;
}

- (void)connectFailedWithOkhttp3Route:(Okhttp3Route *)failedRoute
                withJavaIoIOException:(JavaIoIOException *)failure {
  if ([((JavaNetProxy *) nil_chk([((Okhttp3Route *) nil_chk(failedRoute)) proxy])) type] != JreLoadEnum(JavaNetProxy_Type, DIRECT) && [((Okhttp3Address *) nil_chk(address_)) proxySelector] != nil) {
    [((JavaNetProxySelector *) nil_chk([((Okhttp3Address *) nil_chk(address_)) proxySelector])) connectFailedWithJavaNetURI:[((Okhttp3HttpUrl *) nil_chk([address_ url])) uri] withJavaNetSocketAddress:[((JavaNetProxy *) nil_chk([failedRoute proxy])) address] withJavaIoIOException:failure];
  }
  [((Okhttp3InternalConnectionRouteDatabase *) nil_chk(routeDatabase_)) failedWithOkhttp3Route:failedRoute];
}

- (void)resetNextProxyWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url
                        withJavaNetProxy:(JavaNetProxy *)proxy {
  Okhttp3InternalConnectionRouteSelector_resetNextProxyWithOkhttp3HttpUrl_withJavaNetProxy_(self, url, proxy);
}

- (jboolean)hasNextProxy {
  return Okhttp3InternalConnectionRouteSelector_hasNextProxy(self);
}

- (JavaNetProxy *)nextProxy {
  return Okhttp3InternalConnectionRouteSelector_nextProxy(self);
}

- (void)resetNextInetSocketAddressWithJavaNetProxy:(JavaNetProxy *)proxy {
  Okhttp3InternalConnectionRouteSelector_resetNextInetSocketAddressWithJavaNetProxy_(self, proxy);
}

+ (NSString *)getHostStringWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)socketAddress {
  return Okhttp3InternalConnectionRouteSelector_getHostStringWithJavaNetInetSocketAddress_(socketAddress);
}

- (jboolean)hasNextInetSocketAddress {
  return Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(self);
}

- (JavaNetInetSocketAddress *)nextInetSocketAddress {
  return Okhttp3InternalConnectionRouteSelector_nextInetSocketAddress(self);
}

- (jboolean)hasNextPostponed {
  return Okhttp3InternalConnectionRouteSelector_hasNextPostponed(self);
}

- (Okhttp3Route *)nextPostponed {
  return Okhttp3InternalConnectionRouteSelector_nextPostponed(self);
}

- (void)dealloc {
  RELEASE_(address_);
  RELEASE_(routeDatabase_);
  RELEASE_(lastProxy_);
  RELEASE_(lastInetSocketAddress_);
  RELEASE_(proxies_);
  RELEASE_(inetSocketAddresses_);
  RELEASE_(postponedRoutes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Route;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetProxy;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Route;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Address:withOkhttp3InternalConnectionRouteDatabase:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(connectFailedWithOkhttp3Route:withJavaIoIOException:);
  methods[4].selector = @selector(resetNextProxyWithOkhttp3HttpUrl:withJavaNetProxy:);
  methods[5].selector = @selector(hasNextProxy);
  methods[6].selector = @selector(nextProxy);
  methods[7].selector = @selector(resetNextInetSocketAddressWithJavaNetProxy:);
  methods[8].selector = @selector(getHostStringWithJavaNetInetSocketAddress:);
  methods[9].selector = @selector(hasNextInetSocketAddress);
  methods[10].selector = @selector(nextInetSocketAddress);
  methods[11].selector = @selector(hasNextPostponed);
  methods[12].selector = @selector(nextPostponed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "address_", "LOkhttp3Address;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "routeDatabase_", "LOkhttp3InternalConnectionRouteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastProxy_", "LJavaNetProxy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastInetSocketAddress_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "proxies_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "nextProxyIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inetSocketAddresses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "nextInetSocketAddressIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postponedRoutes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Address;LOkhttp3InternalConnectionRouteDatabase;", "LJavaIoIOException;", "connectFailed", "LOkhttp3Route;LJavaIoIOException;", "resetNextProxy", "LOkhttp3HttpUrl;LJavaNetProxy;", "resetNextInetSocketAddress", "LJavaNetProxy;", "getHostString", "LJavaNetInetSocketAddress;", "Ljava/util/List<Ljava/net/Proxy;>;", "Ljava/util/List<Ljava/net/InetSocketAddress;>;", "Ljava/util/List<Lokhttp3/Route;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionRouteSelector = { "RouteSelector", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 13, 9, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionRouteSelector;
}

@end

void Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(Okhttp3InternalConnectionRouteSelector *self, Okhttp3Address *address, Okhttp3InternalConnectionRouteDatabase *routeDatabase) {
  NSObject_init(self);
  JreStrongAssign(&self->proxies_, JavaUtilCollections_emptyList());
  JreStrongAssign(&self->inetSocketAddresses_, JavaUtilCollections_emptyList());
  JreStrongAssignAndConsume(&self->postponedRoutes_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->address_, address);
  JreStrongAssign(&self->routeDatabase_, routeDatabase);
  Okhttp3InternalConnectionRouteSelector_resetNextProxyWithOkhttp3HttpUrl_withJavaNetProxy_(self, [((Okhttp3Address *) nil_chk(address)) url], [address proxy]);
}

Okhttp3InternalConnectionRouteSelector *new_Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(Okhttp3Address *address, Okhttp3InternalConnectionRouteDatabase *routeDatabase) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionRouteSelector, initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_, address, routeDatabase)
}

Okhttp3InternalConnectionRouteSelector *create_Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(Okhttp3Address *address, Okhttp3InternalConnectionRouteDatabase *routeDatabase) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionRouteSelector, initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_, address, routeDatabase)
}

void Okhttp3InternalConnectionRouteSelector_resetNextProxyWithOkhttp3HttpUrl_withJavaNetProxy_(Okhttp3InternalConnectionRouteSelector *self, Okhttp3HttpUrl *url, JavaNetProxy *proxy) {
  if (proxy != nil) {
    JreStrongAssign(&self->proxies_, JavaUtilCollections_singletonListWithId_(proxy));
  }
  else {
    JreStrongAssignAndConsume(&self->proxies_, new_JavaUtilArrayList_init());
    id<JavaUtilList> selectedProxies = [((JavaNetProxySelector *) nil_chk([((Okhttp3Address *) nil_chk(self->address_)) proxySelector])) selectWithJavaNetURI:[((Okhttp3HttpUrl *) nil_chk(url)) uri]];
    if (selectedProxies != nil) [((id<JavaUtilList>) nil_chk(self->proxies_)) addAllWithJavaUtilCollection:selectedProxies];
    [((id<JavaUtilList>) nil_chk(self->proxies_)) removeAllWithJavaUtilCollection:JavaUtilCollections_singletonWithId_(JreLoadStatic(JavaNetProxy, NO_PROXY))];
    [((id<JavaUtilList>) nil_chk(self->proxies_)) addWithId:JreLoadStatic(JavaNetProxy, NO_PROXY)];
  }
  self->nextProxyIndex_ = 0;
}

jboolean Okhttp3InternalConnectionRouteSelector_hasNextProxy(Okhttp3InternalConnectionRouteSelector *self) {
  return self->nextProxyIndex_ < [((id<JavaUtilList>) nil_chk(self->proxies_)) size];
}

JavaNetProxy *Okhttp3InternalConnectionRouteSelector_nextProxy(Okhttp3InternalConnectionRouteSelector *self) {
  if (!Okhttp3InternalConnectionRouteSelector_hasNextProxy(self)) {
    @throw create_JavaNetSocketException_initWithNSString_(JreStrcat("$$$@", @"No route to ", [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk(self->address_)) url])) host], @"; exhausted proxy configurations: ", self->proxies_));
  }
  JavaNetProxy *result = [((id<JavaUtilList>) nil_chk(self->proxies_)) getWithInt:self->nextProxyIndex_++];
  Okhttp3InternalConnectionRouteSelector_resetNextInetSocketAddressWithJavaNetProxy_(self, result);
  return result;
}

void Okhttp3InternalConnectionRouteSelector_resetNextInetSocketAddressWithJavaNetProxy_(Okhttp3InternalConnectionRouteSelector *self, JavaNetProxy *proxy) {
  JreStrongAssignAndConsume(&self->inetSocketAddresses_, new_JavaUtilArrayList_init());
  NSString *socketHost;
  jint socketPort;
  if ([((JavaNetProxy *) nil_chk(proxy)) type] == JreLoadEnum(JavaNetProxy_Type, DIRECT) || [proxy type] == JreLoadEnum(JavaNetProxy_Type, SOCKS)) {
    socketHost = [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk(self->address_)) url])) host];
    socketPort = [((Okhttp3HttpUrl *) nil_chk([self->address_ url])) port];
  }
  else {
    JavaNetSocketAddress *proxyAddress = [proxy address];
    if (!([proxyAddress isKindOfClass:[JavaNetInetSocketAddress class]])) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Proxy.address() is not an InetSocketAddress: ", [((JavaNetSocketAddress *) nil_chk(proxyAddress)) java_getClass]));
    }
    JavaNetInetSocketAddress *proxySocketAddress = (JavaNetInetSocketAddress *) cast_chk(proxyAddress, [JavaNetInetSocketAddress class]);
    socketHost = Okhttp3InternalConnectionRouteSelector_getHostStringWithJavaNetInetSocketAddress_(proxySocketAddress);
    socketPort = [((JavaNetInetSocketAddress *) nil_chk(proxySocketAddress)) getPort];
  }
  if (socketPort < 1 || socketPort > 65535) {
    @throw create_JavaNetSocketException_initWithNSString_(JreStrcat("$$CI$", @"No route to ", socketHost, ':', socketPort, @"; port is out of range"));
  }
  if ([proxy type] == JreLoadEnum(JavaNetProxy_Type, SOCKS)) {
    [((id<JavaUtilList>) nil_chk(self->inetSocketAddresses_)) addWithId:JavaNetInetSocketAddress_createUnresolvedWithNSString_withInt_(socketHost, socketPort)];
  }
  else {
    id<JavaUtilList> addresses = [((id<Okhttp3Dns>) nil_chk([((Okhttp3Address *) nil_chk(self->address_)) dns])) lookupWithNSString:socketHost];
    for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(addresses)) size]; i < size; i++) {
      JavaNetInetAddress *inetAddress = [addresses getWithInt:i];
      [((id<JavaUtilList>) nil_chk(self->inetSocketAddresses_)) addWithId:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(inetAddress, socketPort)];
    }
  }
  self->nextInetSocketAddressIndex_ = 0;
}

NSString *Okhttp3InternalConnectionRouteSelector_getHostStringWithJavaNetInetSocketAddress_(JavaNetInetSocketAddress *socketAddress) {
  Okhttp3InternalConnectionRouteSelector_initialize();
  JavaNetInetAddress *address = [((JavaNetInetSocketAddress *) nil_chk(socketAddress)) getAddress];
  if (address == nil) {
    return [socketAddress getHostName];
  }
  return [address getHostAddress];
}

jboolean Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(Okhttp3InternalConnectionRouteSelector *self) {
  return self->nextInetSocketAddressIndex_ < [((id<JavaUtilList>) nil_chk(self->inetSocketAddresses_)) size];
}

JavaNetInetSocketAddress *Okhttp3InternalConnectionRouteSelector_nextInetSocketAddress(Okhttp3InternalConnectionRouteSelector *self) {
  if (!Okhttp3InternalConnectionRouteSelector_hasNextInetSocketAddress(self)) {
    @throw create_JavaNetSocketException_initWithNSString_(JreStrcat("$$$@", @"No route to ", [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk(self->address_)) url])) host], @"; exhausted inet socket addresses: ", self->inetSocketAddresses_));
  }
  return [((id<JavaUtilList>) nil_chk(self->inetSocketAddresses_)) getWithInt:self->nextInetSocketAddressIndex_++];
}

jboolean Okhttp3InternalConnectionRouteSelector_hasNextPostponed(Okhttp3InternalConnectionRouteSelector *self) {
  return ![((id<JavaUtilList>) nil_chk(self->postponedRoutes_)) isEmpty];
}

Okhttp3Route *Okhttp3InternalConnectionRouteSelector_nextPostponed(Okhttp3InternalConnectionRouteSelector *self) {
  return [((id<JavaUtilList>) nil_chk(self->postponedRoutes_)) removeWithInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionRouteSelector)
