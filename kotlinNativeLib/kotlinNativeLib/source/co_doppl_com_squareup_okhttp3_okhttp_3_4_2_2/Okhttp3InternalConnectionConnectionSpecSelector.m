//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3ConnectionSpec.h"
#include "Okhttp3InternalConnectionConnectionSpecSelector.h"
#include "Okhttp3InternalInternal.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/Throwable.h"
#include "java/net/ProtocolException.h"
#include "java/net/UnknownServiceException.h"
#include "java/security/cert/CertificateException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLHandshakeException.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLProtocolException.h"
#include "javax/net/ssl/SSLSocket.h"

@interface Okhttp3InternalConnectionConnectionSpecSelector () {
 @public
  id<JavaUtilList> connectionSpecs_;
  jint nextModeIndex_;
  jboolean isFallbackPossible_;
  jboolean isFallback_;
}

- (jboolean)isFallbackPossibleWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionConnectionSpecSelector, connectionSpecs_, id<JavaUtilList>)

__attribute__((unused)) static jboolean Okhttp3InternalConnectionConnectionSpecSelector_isFallbackPossibleWithJavaxNetSslSSLSocket_(Okhttp3InternalConnectionConnectionSpecSelector *self, JavaxNetSslSSLSocket *socket);

@implementation Okhttp3InternalConnectionConnectionSpecSelector

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)connectionSpecs {
  Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(self, connectionSpecs);
  return self;
}

- (Okhttp3ConnectionSpec *)configureSecureSocketWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
  Okhttp3ConnectionSpec *tlsConfiguration = nil;
  for (jint i = nextModeIndex_, size = [((id<JavaUtilList>) nil_chk(connectionSpecs_)) size]; i < size; i++) {
    Okhttp3ConnectionSpec *connectionSpec = [connectionSpecs_ getWithInt:i];
    if ([((Okhttp3ConnectionSpec *) nil_chk(connectionSpec)) isCompatibleWithJavaxNetSslSSLSocket:sslSocket]) {
      tlsConfiguration = connectionSpec;
      nextModeIndex_ = i + 1;
      break;
    }
  }
  if (tlsConfiguration == nil) {
    @throw create_JavaNetUnknownServiceException_initWithNSString_(JreStrcat("$Z$@$$", @"Unable to find acceptable protocols. isFallback=", isFallback_, @", modes=", connectionSpecs_, @", supported protocols=", JavaUtilArrays_toStringWithNSObjectArray_([((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) getEnabledProtocols])));
  }
  isFallbackPossible_ = Okhttp3InternalConnectionConnectionSpecSelector_isFallbackPossibleWithJavaxNetSslSSLSocket_(self, sslSocket);
  [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) applyWithOkhttp3ConnectionSpec:tlsConfiguration withJavaxNetSslSSLSocket:sslSocket withBoolean:isFallback_];
  return tlsConfiguration;
}

- (jboolean)connectionFailedWithJavaIoIOException:(JavaIoIOException *)e {
  isFallback_ = true;
  if (!isFallbackPossible_) {
    return false;
  }
  if ([e isKindOfClass:[JavaNetProtocolException class]]) {
    return false;
  }
  if ([e isKindOfClass:[JavaIoInterruptedIOException class]]) {
    return false;
  }
  if ([e isKindOfClass:[JavaxNetSslSSLHandshakeException class]]) {
    if ([[((JavaIoIOException *) nil_chk(e)) getCause] isKindOfClass:[JavaSecurityCertCertificateException class]]) {
      return false;
    }
  }
  if ([e isKindOfClass:[JavaxNetSslSSLPeerUnverifiedException class]]) {
    return false;
  }
  return ([e isKindOfClass:[JavaxNetSslSSLHandshakeException class]] || [e isKindOfClass:[JavaxNetSslSSLProtocolException class]]);
}

- (jboolean)isFallbackPossibleWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  return Okhttp3InternalConnectionConnectionSpecSelector_isFallbackPossibleWithJavaxNetSslSSLSocket_(self, socket);
}

- (void)dealloc {
  RELEASE_(connectionSpecs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOkhttp3ConnectionSpec;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(configureSecureSocketWithJavaxNetSslSSLSocket:);
  methods[2].selector = @selector(connectionFailedWithJavaIoIOException:);
  methods[3].selector = @selector(isFallbackPossibleWithJavaxNetSslSSLSocket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "connectionSpecs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "nextModeIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isFallbackPossible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isFallback_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/ConnectionSpec;>;)V", "configureSecureSocket", "LJavaxNetSslSSLSocket;", "LJavaIoIOException;", "connectionFailed", "isFallbackPossible", "Ljava/util/List<Lokhttp3/ConnectionSpec;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionConnectionSpecSelector = { "ConnectionSpecSelector", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 4, 4, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionConnectionSpecSelector;
}

@end

void Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(Okhttp3InternalConnectionConnectionSpecSelector *self, id<JavaUtilList> connectionSpecs) {
  NSObject_init(self);
  self->nextModeIndex_ = 0;
  JreStrongAssign(&self->connectionSpecs_, connectionSpecs);
}

Okhttp3InternalConnectionConnectionSpecSelector *new_Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(id<JavaUtilList> connectionSpecs) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionConnectionSpecSelector, initWithJavaUtilList_, connectionSpecs)
}

Okhttp3InternalConnectionConnectionSpecSelector *create_Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(id<JavaUtilList> connectionSpecs) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionConnectionSpecSelector, initWithJavaUtilList_, connectionSpecs)
}

jboolean Okhttp3InternalConnectionConnectionSpecSelector_isFallbackPossibleWithJavaxNetSslSSLSocket_(Okhttp3InternalConnectionConnectionSpecSelector *self, JavaxNetSslSSLSocket *socket) {
  for (jint i = self->nextModeIndex_; i < [((id<JavaUtilList>) nil_chk(self->connectionSpecs_)) size]; i++) {
    if ([((Okhttp3ConnectionSpec *) nil_chk([self->connectionSpecs_ getWithInt:i])) isCompatibleWithJavaxNetSslSSLSocket:socket]) {
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionConnectionSpecSelector)
