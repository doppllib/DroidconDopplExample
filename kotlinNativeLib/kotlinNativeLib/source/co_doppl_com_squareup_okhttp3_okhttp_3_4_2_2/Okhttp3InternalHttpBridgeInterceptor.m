//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3Cookie.h"
#include "Okhttp3CookieJar.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3Interceptor.h"
#include "Okhttp3InternalHttpBridgeInterceptor.h"
#include "Okhttp3InternalHttpHttpHeaders.h"
#include "Okhttp3InternalHttpRealResponseBody.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3InternalVersion.h"
#include "Okhttp3MediaType.h"
#include "Okhttp3Request.h"
#include "Okhttp3RequestBody.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"
#include "okio/BufferedSource.h"
#include "okio/GzipSource.h"
#include "okio/Okio.h"

@interface Okhttp3InternalHttpBridgeInterceptor () {
 @public
  id<Okhttp3CookieJar> cookieJar_;
}

- (NSString *)cookieHeaderWithJavaUtilList:(id<JavaUtilList>)cookies;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttpBridgeInterceptor, cookieJar_, id<Okhttp3CookieJar>)

__attribute__((unused)) static NSString *Okhttp3InternalHttpBridgeInterceptor_cookieHeaderWithJavaUtilList_(Okhttp3InternalHttpBridgeInterceptor *self, id<JavaUtilList> cookies);

@implementation Okhttp3InternalHttpBridgeInterceptor

- (instancetype)initWithOkhttp3CookieJar:(id<Okhttp3CookieJar>)cookieJar {
  Okhttp3InternalHttpBridgeInterceptor_initWithOkhttp3CookieJar_(self, cookieJar);
  return self;
}

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain {
  Okhttp3Request *userRequest = [((id<Okhttp3Interceptor_Chain>) nil_chk(chain)) request];
  Okhttp3Request_Builder *requestBuilder = [((Okhttp3Request *) nil_chk(userRequest)) newBuilder];
  Okhttp3RequestBody *body = [userRequest body];
  if (body != nil) {
    Okhttp3MediaType *contentType = [body contentType];
    if (contentType != nil) {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Content-Type" withNSString:[contentType description]];
    }
    jlong contentLength = [body contentLength];
    if (contentLength != -1) {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Content-Length" withNSString:JavaLangLong_toStringWithLong_(contentLength)];
      [requestBuilder removeHeaderWithNSString:@"Transfer-Encoding"];
    }
    else {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Transfer-Encoding" withNSString:@"chunked"];
      [requestBuilder removeHeaderWithNSString:@"Content-Length"];
    }
  }
  if ([userRequest headerWithNSString:@"Host"] == nil) {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Host" withNSString:Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_([userRequest url], false)];
  }
  if ([userRequest headerWithNSString:@"Connection"] == nil) {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Connection" withNSString:@"Keep-Alive"];
  }
  jboolean transparentGzip = false;
  if ([userRequest headerWithNSString:@"Accept-Encoding"] == nil) {
    transparentGzip = true;
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Accept-Encoding" withNSString:@"gzip"];
  }
  id<JavaUtilList> cookies = [((id<Okhttp3CookieJar>) nil_chk(cookieJar_)) loadForRequestWithOkhttp3HttpUrl:[userRequest url]];
  if (![((id<JavaUtilList>) nil_chk(cookies)) isEmpty]) {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"Cookie" withNSString:Okhttp3InternalHttpBridgeInterceptor_cookieHeaderWithJavaUtilList_(self, cookies)];
  }
  if ([userRequest headerWithNSString:@"User-Agent"] == nil) {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder)) headerWithNSString:@"User-Agent" withNSString:Okhttp3InternalVersion_userAgent()];
  }
  Okhttp3Response *networkResponse = [chain proceedWithOkhttp3Request:[((Okhttp3Request_Builder *) nil_chk(requestBuilder)) build]];
  Okhttp3InternalHttpHttpHeaders_receiveHeadersWithOkhttp3CookieJar_withOkhttp3HttpUrl_withOkhttp3Headers_(cookieJar_, [userRequest url], [((Okhttp3Response *) nil_chk(networkResponse)) headers]);
  Okhttp3Response_Builder *responseBuilder = [((Okhttp3Response_Builder *) nil_chk([networkResponse newBuilder])) requestWithOkhttp3Request:userRequest];
  if (transparentGzip && [@"gzip" java_equalsIgnoreCase:[networkResponse headerWithNSString:@"Content-Encoding"]] && Okhttp3InternalHttpHttpHeaders_hasBodyWithOkhttp3Response_(networkResponse)) {
    OkioGzipSource *responseBody = create_OkioGzipSource_initWithOkioSource_([((Okhttp3ResponseBody *) nil_chk([networkResponse body])) source]);
    Okhttp3Headers *strippedHeaders = [((Okhttp3Headers_Builder *) nil_chk([((Okhttp3Headers_Builder *) nil_chk([((Okhttp3Headers_Builder *) nil_chk([((Okhttp3Headers *) nil_chk([networkResponse headers])) newBuilder])) removeAllWithNSString:@"Content-Encoding"])) removeAllWithNSString:@"Content-Length"])) build];
    [((Okhttp3Response_Builder *) nil_chk(responseBuilder)) headersWithOkhttp3Headers:strippedHeaders];
    [responseBuilder bodyWithOkhttp3ResponseBody:create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_(strippedHeaders, OkioOkio_bufferWithOkioSource_(responseBody))];
  }
  return [((Okhttp3Response_Builder *) nil_chk(responseBuilder)) build];
}

- (NSString *)cookieHeaderWithJavaUtilList:(id<JavaUtilList>)cookies {
  return Okhttp3InternalHttpBridgeInterceptor_cookieHeaderWithJavaUtilList_(self, cookies);
}

- (void)dealloc {
  RELEASE_(cookieJar_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3CookieJar:);
  methods[1].selector = @selector(interceptWithOkhttp3Interceptor_Chain:);
  methods[2].selector = @selector(cookieHeaderWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cookieJar_", "LOkhttp3CookieJar;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3CookieJar;", "intercept", "LOkhttp3Interceptor_Chain;", "LJavaIoIOException;", "cookieHeader", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/Cookie;>;)Ljava/lang/String;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpBridgeInterceptor = { "BridgeInterceptor", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttpBridgeInterceptor;
}

@end

void Okhttp3InternalHttpBridgeInterceptor_initWithOkhttp3CookieJar_(Okhttp3InternalHttpBridgeInterceptor *self, id<Okhttp3CookieJar> cookieJar) {
  NSObject_init(self);
  JreStrongAssign(&self->cookieJar_, cookieJar);
}

Okhttp3InternalHttpBridgeInterceptor *new_Okhttp3InternalHttpBridgeInterceptor_initWithOkhttp3CookieJar_(id<Okhttp3CookieJar> cookieJar) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpBridgeInterceptor, initWithOkhttp3CookieJar_, cookieJar)
}

Okhttp3InternalHttpBridgeInterceptor *create_Okhttp3InternalHttpBridgeInterceptor_initWithOkhttp3CookieJar_(id<Okhttp3CookieJar> cookieJar) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpBridgeInterceptor, initWithOkhttp3CookieJar_, cookieJar)
}

NSString *Okhttp3InternalHttpBridgeInterceptor_cookieHeaderWithJavaUtilList_(Okhttp3InternalHttpBridgeInterceptor *self, id<JavaUtilList> cookies) {
  JavaLangStringBuilder *cookieHeader = create_JavaLangStringBuilder_init();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(cookies)) size]; i < size; i++) {
    if (i > 0) {
      [cookieHeader appendWithNSString:@"; "];
    }
    Okhttp3Cookie *cookie = [cookies getWithInt:i];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([cookieHeader appendWithNSString:[((Okhttp3Cookie *) nil_chk(cookie)) name]])) appendWithChar:'='])) appendWithNSString:[cookie value]];
  }
  return [cookieHeader description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpBridgeInterceptor)
