//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3CipherSuite.h"
#include "Okhttp3Handshake.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3TlsVersion.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface Okhttp3Handshake () {
 @public
  Okhttp3TlsVersion *tlsVersion_;
  Okhttp3CipherSuite *cipherSuite_;
  id<JavaUtilList> peerCertificates_;
  id<JavaUtilList> localCertificates_;
}

- (instancetype)initWithOkhttp3TlsVersion:(Okhttp3TlsVersion *)tlsVersion
                   withOkhttp3CipherSuite:(Okhttp3CipherSuite *)cipherSuite
                         withJavaUtilList:(id<JavaUtilList>)peerCertificates
                         withJavaUtilList:(id<JavaUtilList>)localCertificates;

@end

J2OBJC_FIELD_SETTER(Okhttp3Handshake, tlsVersion_, Okhttp3TlsVersion *)
J2OBJC_FIELD_SETTER(Okhttp3Handshake, cipherSuite_, Okhttp3CipherSuite *)
J2OBJC_FIELD_SETTER(Okhttp3Handshake, peerCertificates_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3Handshake, localCertificates_, id<JavaUtilList>)

__attribute__((unused)) static void Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3Handshake *self, Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates);

__attribute__((unused)) static Okhttp3Handshake *new_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3Handshake *create_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates);

@implementation Okhttp3Handshake

- (instancetype)initWithOkhttp3TlsVersion:(Okhttp3TlsVersion *)tlsVersion
                   withOkhttp3CipherSuite:(Okhttp3CipherSuite *)cipherSuite
                         withJavaUtilList:(id<JavaUtilList>)peerCertificates
                         withJavaUtilList:(id<JavaUtilList>)localCertificates {
  Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(self, tlsVersion, cipherSuite, peerCertificates, localCertificates);
  return self;
}

+ (Okhttp3Handshake *)getWithJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  return Okhttp3Handshake_getWithJavaxNetSslSSLSession_(session);
}

+ (Okhttp3Handshake *)getWithOkhttp3TlsVersion:(Okhttp3TlsVersion *)tlsVersion
                        withOkhttp3CipherSuite:(Okhttp3CipherSuite *)cipherSuite
                              withJavaUtilList:(id<JavaUtilList>)peerCertificates
                              withJavaUtilList:(id<JavaUtilList>)localCertificates {
  return Okhttp3Handshake_getWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(tlsVersion, cipherSuite, peerCertificates, localCertificates);
}

- (Okhttp3TlsVersion *)tlsVersion {
  return tlsVersion_;
}

- (Okhttp3CipherSuite *)cipherSuite {
  return cipherSuite_;
}

- (id<JavaUtilList>)peerCertificates {
  return peerCertificates_;
}

- (id<JavaSecurityPrincipal>)peerPrincipal {
  return ![((id<JavaUtilList>) nil_chk(peerCertificates_)) isEmpty] ? [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([peerCertificates_ getWithInt:0], [JavaSecurityCertX509Certificate class])))) getSubjectX500Principal] : nil;
}

- (id<JavaUtilList>)localCertificates {
  return localCertificates_;
}

- (id<JavaSecurityPrincipal>)localPrincipal {
  return ![((id<JavaUtilList>) nil_chk(localCertificates_)) isEmpty] ? [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([localCertificates_ getWithInt:0], [JavaSecurityCertX509Certificate class])))) getSubjectX500Principal] : nil;
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[Okhttp3Handshake class]])) return false;
  Okhttp3Handshake *that = (Okhttp3Handshake *) cast_chk(other, [Okhttp3Handshake class]);
  return Okhttp3InternalUtil_equalWithId_withId_(cipherSuite_, ((Okhttp3Handshake *) nil_chk(that))->cipherSuite_) && [((Okhttp3CipherSuite *) nil_chk(cipherSuite_)) isEqual:that->cipherSuite_] && [((id<JavaUtilList>) nil_chk(peerCertificates_)) isEqual:that->peerCertificates_] && [((id<JavaUtilList>) nil_chk(localCertificates_)) isEqual:that->localCertificates_];
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + (tlsVersion_ != nil ? ((jint) [tlsVersion_ hash]) : 0);
  result = 31 * result + ((jint) [((Okhttp3CipherSuite *) nil_chk(cipherSuite_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(peerCertificates_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(localCertificates_)) hash]);
  return result;
}

- (void)dealloc {
  RELEASE_(tlsVersion_);
  RELEASE_(cipherSuite_);
  RELEASE_(peerCertificates_);
  RELEASE_(localCertificates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOkhttp3Handshake;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Handshake;", 0x9, 2, 0, -1, 4, -1, -1 },
    { NULL, "LOkhttp3TlsVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3CipherSuite;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3TlsVersion:withOkhttp3CipherSuite:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(getWithJavaxNetSslSSLSession:);
  methods[2].selector = @selector(getWithOkhttp3TlsVersion:withOkhttp3CipherSuite:withJavaUtilList:withJavaUtilList:);
  methods[3].selector = @selector(tlsVersion);
  methods[4].selector = @selector(cipherSuite);
  methods[5].selector = @selector(peerCertificates);
  methods[6].selector = @selector(peerPrincipal);
  methods[7].selector = @selector(localCertificates);
  methods[8].selector = @selector(localPrincipal);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlsVersion_", "LOkhttp3TlsVersion;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cipherSuite_", "LOkhttp3CipherSuite;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "peerCertificates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "localCertificates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3TlsVersion;LOkhttp3CipherSuite;LJavaUtilList;LJavaUtilList;", "(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List<Ljava/security/cert/Certificate;>;Ljava/util/List<Ljava/security/cert/Certificate;>;)V", "get", "LJavaxNetSslSSLSession;", "(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List<Ljava/security/cert/Certificate;>;Ljava/util/List<Ljava/security/cert/Certificate;>;)Lokhttp3/Handshake;", "()Ljava/util/List<Ljava/security/cert/Certificate;>;", "equals", "LNSObject;", "hashCode", "Ljava/util/List<Ljava/security/cert/Certificate;>;" };
  static const J2ObjcClassInfo _Okhttp3Handshake = { "Handshake", "okhttp3", ptrTable, methods, fields, 7, 0x11, 11, 4, -1, -1, -1, -1, -1 };
  return &_Okhttp3Handshake;
}

@end

void Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3Handshake *self, Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  NSObject_init(self);
  JreStrongAssign(&self->tlsVersion_, tlsVersion);
  JreStrongAssign(&self->cipherSuite_, cipherSuite);
  JreStrongAssign(&self->peerCertificates_, peerCertificates);
  JreStrongAssign(&self->localCertificates_, localCertificates);
}

Okhttp3Handshake *new_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  J2OBJC_NEW_IMPL(Okhttp3Handshake, initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_, tlsVersion, cipherSuite, peerCertificates, localCertificates)
}

Okhttp3Handshake *create_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  J2OBJC_CREATE_IMPL(Okhttp3Handshake, initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_, tlsVersion, cipherSuite, peerCertificates, localCertificates)
}

Okhttp3Handshake *Okhttp3Handshake_getWithJavaxNetSslSSLSession_(id<JavaxNetSslSSLSession> session) {
  Okhttp3Handshake_initialize();
  NSString *cipherSuiteString = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getCipherSuite];
  if (cipherSuiteString == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"cipherSuite == null");
  Okhttp3CipherSuite *cipherSuite = Okhttp3CipherSuite_forJavaNameWithNSString_(cipherSuiteString);
  NSString *tlsVersionString = [session getProtocol];
  if (tlsVersionString == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"tlsVersion == null");
  Okhttp3TlsVersion *tlsVersion = Okhttp3TlsVersion_forJavaNameWithNSString_(tlsVersionString);
  IOSObjectArray *peerCertificates;
  @try {
    peerCertificates = [session getPeerCertificates];
  }
  @catch (JavaxNetSslSSLPeerUnverifiedException *ignored) {
    peerCertificates = nil;
  }
  id<JavaUtilList> peerCertificatesList = peerCertificates != nil ? Okhttp3InternalUtil_immutableListWithNSObjectArray_(peerCertificates) : JavaUtilCollections_emptyList();
  IOSObjectArray *localCertificates = [session getLocalCertificates];
  id<JavaUtilList> localCertificatesList = localCertificates != nil ? Okhttp3InternalUtil_immutableListWithNSObjectArray_(localCertificates) : JavaUtilCollections_emptyList();
  return create_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(tlsVersion, cipherSuite, peerCertificatesList, localCertificatesList);
}

Okhttp3Handshake *Okhttp3Handshake_getWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(Okhttp3TlsVersion *tlsVersion, Okhttp3CipherSuite *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  Okhttp3Handshake_initialize();
  if (cipherSuite == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"cipherSuite == null");
  return create_Okhttp3Handshake_initWithOkhttp3TlsVersion_withOkhttp3CipherSuite_withJavaUtilList_withJavaUtilList_(tlsVersion, cipherSuite, Okhttp3InternalUtil_immutableListWithJavaUtilList_(peerCertificates), Okhttp3InternalUtil_immutableListWithJavaUtilList_(localCertificates));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3Handshake)
