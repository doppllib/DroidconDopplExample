//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedSettings.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"

@interface Okhttp3InternalFramedSettings () {
 @public
  jint set_;
  jint persistValue_;
  jint persisted_;
  IOSIntArray *values_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalFramedSettings, values_, IOSIntArray *)

@implementation Okhttp3InternalFramedSettings

+ (jint)DEFAULT_INITIAL_WINDOW_SIZE {
  return Okhttp3InternalFramedSettings_DEFAULT_INITIAL_WINDOW_SIZE;
}

+ (jint)FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS {
  return Okhttp3InternalFramedSettings_FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS;
}

+ (jint)PERSIST_VALUE {
  return Okhttp3InternalFramedSettings_PERSIST_VALUE;
}

+ (jint)PERSISTED {
  return Okhttp3InternalFramedSettings_PERSISTED;
}

+ (jint)UPLOAD_BANDWIDTH {
  return Okhttp3InternalFramedSettings_UPLOAD_BANDWIDTH;
}

+ (jint)HEADER_TABLE_SIZE {
  return Okhttp3InternalFramedSettings_HEADER_TABLE_SIZE;
}

+ (jint)DOWNLOAD_BANDWIDTH {
  return Okhttp3InternalFramedSettings_DOWNLOAD_BANDWIDTH;
}

+ (jint)ENABLE_PUSH {
  return Okhttp3InternalFramedSettings_ENABLE_PUSH;
}

+ (jint)ROUND_TRIP_TIME {
  return Okhttp3InternalFramedSettings_ROUND_TRIP_TIME;
}

+ (jint)MAX_CONCURRENT_STREAMS {
  return Okhttp3InternalFramedSettings_MAX_CONCURRENT_STREAMS;
}

+ (jint)CURRENT_CWND {
  return Okhttp3InternalFramedSettings_CURRENT_CWND;
}

+ (jint)MAX_FRAME_SIZE {
  return Okhttp3InternalFramedSettings_MAX_FRAME_SIZE;
}

+ (jint)DOWNLOAD_RETRANS_RATE {
  return Okhttp3InternalFramedSettings_DOWNLOAD_RETRANS_RATE;
}

+ (jint)MAX_HEADER_LIST_SIZE {
  return Okhttp3InternalFramedSettings_MAX_HEADER_LIST_SIZE;
}

+ (jint)INITIAL_WINDOW_SIZE {
  return Okhttp3InternalFramedSettings_INITIAL_WINDOW_SIZE;
}

+ (jint)CLIENT_CERTIFICATE_VECTOR_SIZE {
  return Okhttp3InternalFramedSettings_CLIENT_CERTIFICATE_VECTOR_SIZE;
}

+ (jint)FLOW_CONTROL_OPTIONS {
  return Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS;
}

+ (jint)COUNT {
  return Okhttp3InternalFramedSettings_COUNT;
}

+ (jint)FLOW_CONTROL_OPTIONS_DISABLED {
  return Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS_DISABLED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalFramedSettings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  set_ = persistValue_ = persisted_ = 0;
  JavaUtilArrays_fillWithIntArray_withInt_(values_, 0);
}

- (Okhttp3InternalFramedSettings *)setWithInt:(jint)id_
                                      withInt:(jint)idFlags
                                      withInt:(jint)value {
  if (id_ >= ((IOSIntArray *) nil_chk(values_))->size_) {
    return self;
  }
  jint bit = JreLShift32(1, id_);
  set_ |= bit;
  if ((idFlags & Okhttp3InternalFramedSettings_PERSIST_VALUE) != 0) {
    persistValue_ |= bit;
  }
  else {
    persistValue_ &= ~bit;
  }
  if ((idFlags & Okhttp3InternalFramedSettings_PERSISTED) != 0) {
    persisted_ |= bit;
  }
  else {
    persisted_ &= ~bit;
  }
  *IOSIntArray_GetRef(values_, id_) = value;
  return self;
}

- (jboolean)isSetWithInt:(jint)id_ {
  jint bit = JreLShift32(1, id_);
  return (set_ & bit) != 0;
}

- (jint)getWithInt:(jint)id_ {
  return IOSIntArray_Get(nil_chk(values_), id_);
}

- (jint)flagsWithInt:(jint)id_ {
  jint result = 0;
  if ([self isPersistedWithInt:id_]) result |= Okhttp3InternalFramedSettings_PERSISTED;
  if ([self persistValueWithInt:id_]) result |= Okhttp3InternalFramedSettings_PERSIST_VALUE;
  return result;
}

- (jint)size {
  return JavaLangInteger_bitCountWithInt_(set_);
}

- (jint)getUploadBandwidthWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_UPLOAD_BANDWIDTH);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_UPLOAD_BANDWIDTH) : defaultValue;
}

- (jint)getHeaderTableSize {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_HEADER_TABLE_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_HEADER_TABLE_SIZE) : -1;
}

- (jint)getDownloadBandwidthWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_DOWNLOAD_BANDWIDTH);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_DOWNLOAD_BANDWIDTH) : defaultValue;
}

- (jboolean)getEnablePushWithBoolean:(jboolean)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_ENABLE_PUSH);
  return ((bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_ENABLE_PUSH) : defaultValue ? 1 : 0) == 1;
}

- (jint)getRoundTripTimeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_ROUND_TRIP_TIME);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_ROUND_TRIP_TIME) : defaultValue;
}

- (jint)getMaxConcurrentStreamsWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_MAX_CONCURRENT_STREAMS);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_MAX_CONCURRENT_STREAMS) : defaultValue;
}

- (jint)getCurrentCwndWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_CURRENT_CWND);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_CURRENT_CWND) : defaultValue;
}

- (jint)getMaxFrameSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_MAX_FRAME_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_MAX_FRAME_SIZE) : defaultValue;
}

- (jint)getDownloadRetransRateWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_DOWNLOAD_RETRANS_RATE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_DOWNLOAD_RETRANS_RATE) : defaultValue;
}

- (jint)getMaxHeaderListSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_MAX_HEADER_LIST_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_MAX_HEADER_LIST_SIZE) : defaultValue;
}

- (jint)getInitialWindowSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_INITIAL_WINDOW_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_INITIAL_WINDOW_SIZE) : defaultValue;
}

- (jint)getClientCertificateVectorSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_CLIENT_CERTIFICATE_VECTOR_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_CLIENT_CERTIFICATE_VECTOR_SIZE) : defaultValue;
}

- (jboolean)isFlowControlDisabled {
  jint bit = JreLShift32(1, Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS);
  jint value = (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS) : 0;
  return (value & Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS_DISABLED) != 0;
}

- (jboolean)persistValueWithInt:(jint)id_ {
  jint bit = JreLShift32(1, id_);
  return (persistValue_ & bit) != 0;
}

- (jboolean)isPersistedWithInt:(jint)id_ {
  jint bit = JreLShift32(1, id_);
  return (persisted_ & bit) != 0;
}

- (void)mergeWithOkhttp3InternalFramedSettings:(Okhttp3InternalFramedSettings *)other {
  for (jint i = 0; i < Okhttp3InternalFramedSettings_COUNT; i++) {
    if (![((Okhttp3InternalFramedSettings *) nil_chk(other)) isSetWithInt:i]) continue;
    [self setWithInt:i withInt:[other flagsWithInt:i] withInt:[other getWithInt:i]];
  }
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedSettings;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 10, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 11, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 12, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 13, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 15, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 16, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 17, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 18, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(setWithInt:withInt:withInt:);
  methods[3].selector = @selector(isSetWithInt:);
  methods[4].selector = @selector(getWithInt:);
  methods[5].selector = @selector(flagsWithInt:);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(getUploadBandwidthWithInt:);
  methods[8].selector = @selector(getHeaderTableSize);
  methods[9].selector = @selector(getDownloadBandwidthWithInt:);
  methods[10].selector = @selector(getEnablePushWithBoolean:);
  methods[11].selector = @selector(getRoundTripTimeWithInt:);
  methods[12].selector = @selector(getMaxConcurrentStreamsWithInt:);
  methods[13].selector = @selector(getCurrentCwndWithInt:);
  methods[14].selector = @selector(getMaxFrameSizeWithInt:);
  methods[15].selector = @selector(getDownloadRetransRateWithInt:);
  methods[16].selector = @selector(getMaxHeaderListSizeWithInt:);
  methods[17].selector = @selector(getInitialWindowSizeWithInt:);
  methods[18].selector = @selector(getClientCertificateVectorSizeWithInt:);
  methods[19].selector = @selector(isFlowControlDisabled);
  methods[20].selector = @selector(persistValueWithInt:);
  methods[21].selector = @selector(isPersistedWithInt:);
  methods[22].selector = @selector(mergeWithOkhttp3InternalFramedSettings:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INITIAL_WINDOW_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_DEFAULT_INITIAL_WINDOW_SIZE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS, 0x18, -1, -1, -1, -1 },
    { "PERSIST_VALUE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_PERSIST_VALUE, 0x18, -1, -1, -1, -1 },
    { "PERSISTED", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_PERSISTED, 0x18, -1, -1, -1, -1 },
    { "UPLOAD_BANDWIDTH", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_UPLOAD_BANDWIDTH, 0x18, -1, -1, -1, -1 },
    { "HEADER_TABLE_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_HEADER_TABLE_SIZE, 0x18, -1, -1, -1, -1 },
    { "DOWNLOAD_BANDWIDTH", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_DOWNLOAD_BANDWIDTH, 0x18, -1, -1, -1, -1 },
    { "ENABLE_PUSH", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_ENABLE_PUSH, 0x18, -1, -1, -1, -1 },
    { "ROUND_TRIP_TIME", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_ROUND_TRIP_TIME, 0x18, -1, -1, -1, -1 },
    { "MAX_CONCURRENT_STREAMS", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_MAX_CONCURRENT_STREAMS, 0x18, -1, -1, -1, -1 },
    { "CURRENT_CWND", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_CURRENT_CWND, 0x18, -1, -1, -1, -1 },
    { "MAX_FRAME_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_MAX_FRAME_SIZE, 0x18, -1, -1, -1, -1 },
    { "DOWNLOAD_RETRANS_RATE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_DOWNLOAD_RETRANS_RATE, 0x18, -1, -1, -1, -1 },
    { "MAX_HEADER_LIST_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_MAX_HEADER_LIST_SIZE, 0x18, -1, -1, -1, -1 },
    { "INITIAL_WINDOW_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_INITIAL_WINDOW_SIZE, 0x18, -1, -1, -1, -1 },
    { "CLIENT_CERTIFICATE_VECTOR_SIZE", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_CLIENT_CERTIFICATE_VECTOR_SIZE, 0x18, -1, -1, -1, -1 },
    { "FLOW_CONTROL_OPTIONS", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS, 0x18, -1, -1, -1, -1 },
    { "COUNT", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_COUNT, 0x18, -1, -1, -1, -1 },
    { "FLOW_CONTROL_OPTIONS_DISABLED", "I", .constantValue.asInt = Okhttp3InternalFramedSettings_FLOW_CONTROL_OPTIONS_DISABLED, 0x18, -1, -1, -1, -1 },
    { "set_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "persistValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "persisted_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "values_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "III", "isSet", "I", "get", "flags", "getUploadBandwidth", "getDownloadBandwidth", "getEnablePush", "Z", "getRoundTripTime", "getMaxConcurrentStreams", "getCurrentCwnd", "getMaxFrameSize", "getDownloadRetransRate", "getMaxHeaderListSize", "getInitialWindowSize", "getClientCertificateVectorSize", "persistValue", "isPersisted", "merge", "LOkhttp3InternalFramedSettings;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedSettings = { "Settings", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x11, 23, 23, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalFramedSettings;
}

@end

void Okhttp3InternalFramedSettings_init(Okhttp3InternalFramedSettings *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSIntArray newArrayWithLength:Okhttp3InternalFramedSettings_COUNT]);
}

Okhttp3InternalFramedSettings *new_Okhttp3InternalFramedSettings_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalFramedSettings, init)
}

Okhttp3InternalFramedSettings *create_Okhttp3InternalFramedSettings_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalFramedSettings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedSettings)
