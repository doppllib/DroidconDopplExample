//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalCacheDiskLruCache.h"
#include "Okhttp3InternalCacheFaultHidingSink.h"
#include "Okhttp3InternalIoFileSystem.h"
#include "Okhttp3InternalPlatformPlatform.h"
#include "Okhttp3InternalUtil.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@class Okhttp3InternalCacheDiskLruCache_Entry;

@interface Okhttp3InternalCacheDiskLruCache () {
 @public
  id<Okhttp3InternalIoFileSystem> fileSystem_;
  JavaIoFile *directory_;
  JavaIoFile *journalFile_;
  JavaIoFile *journalFileTmp_;
  JavaIoFile *journalFileBackup_;
  jint appVersion_;
  jlong maxSize_;
  jint valueCount_;
  jlong size_;
  id<OkioBufferedSink> journalWriter_;
  JavaUtilLinkedHashMap *lruEntries_;
  jint redundantOpCount_;
  jboolean hasJournalErrors_;
  jboolean initialized_;
  jboolean closed_;
  jboolean mostRecentTrimFailed_;
  jboolean mostRecentRebuildFailed_;
  jlong nextSequenceNumber_;
  id<JavaUtilConcurrentExecutor> executor_;
  id<JavaLangRunnable> cleanupRunnable_;
}

- (void)readJournal;

- (id<OkioBufferedSink>)newJournalWriter OBJC_METHOD_FAMILY_NONE;

- (void)readJournalLineWithNSString:(NSString *)line;

- (void)processJournal;

- (void)rebuildJournal;

- (Okhttp3InternalCacheDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                     withLong:(jlong)expectedSequenceNumber;

- (void)completeEditWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor
                                                    withBoolean:(jboolean)success;

- (jboolean)journalRebuildRequired;

- (jboolean)removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry:(Okhttp3InternalCacheDiskLruCache_Entry *)entry_;

- (void)checkNotClosed;

- (void)trimToSize;

- (void)validateKeyWithNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, fileSystem_, id<Okhttp3InternalIoFileSystem>)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, directory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, journalFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, journalFileTmp_, JavaIoFile *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, journalFileBackup_, JavaIoFile *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, journalWriter_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, lruEntries_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache, cleanupRunnable_, id<JavaLangRunnable>)

inline NSString *Okhttp3InternalCacheDiskLruCache_get_CLEAN();
static NSString *Okhttp3InternalCacheDiskLruCache_CLEAN = @"CLEAN";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCacheDiskLruCache, CLEAN, NSString *)

inline NSString *Okhttp3InternalCacheDiskLruCache_get_DIRTY();
static NSString *Okhttp3InternalCacheDiskLruCache_DIRTY = @"DIRTY";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCacheDiskLruCache, DIRTY, NSString *)

inline NSString *Okhttp3InternalCacheDiskLruCache_get_REMOVE();
static NSString *Okhttp3InternalCacheDiskLruCache_REMOVE = @"REMOVE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCacheDiskLruCache, REMOVE, NSString *)

inline NSString *Okhttp3InternalCacheDiskLruCache_get_READ();
static NSString *Okhttp3InternalCacheDiskLruCache_READ = @"READ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCacheDiskLruCache, READ, NSString *)

inline id<OkioSink> Okhttp3InternalCacheDiskLruCache_get_NULL_SINK();
static id<OkioSink> Okhttp3InternalCacheDiskLruCache_NULL_SINK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCacheDiskLruCache, NULL_SINK, id<OkioSink>)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_readJournal(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static id<OkioBufferedSink> Okhttp3InternalCacheDiskLruCache_newJournalWriter(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_readJournalLineWithNSString_(Okhttp3InternalCacheDiskLruCache *self, NSString *line);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_processJournal(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_rebuildJournal(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Editor *Okhttp3InternalCacheDiskLruCache_editWithNSString_withLong_(Okhttp3InternalCacheDiskLruCache *self, NSString *key, jlong expectedSequenceNumber);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(Okhttp3InternalCacheDiskLruCache *self, Okhttp3InternalCacheDiskLruCache_Editor *editor, jboolean success);

__attribute__((unused)) static jboolean Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static jboolean Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *self, Okhttp3InternalCacheDiskLruCache_Entry *entry_);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_checkNotClosed(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_trimToSize(Okhttp3InternalCacheDiskLruCache *self);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(Okhttp3InternalCacheDiskLruCache *self, NSString *key);

@interface Okhttp3InternalCacheDiskLruCache_1 : NSObject < JavaLangRunnable > {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_1)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache_1 *self, Okhttp3InternalCacheDiskLruCache *outer$);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_1 *new_Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_1 *create_Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$);

@interface Okhttp3InternalCacheDiskLruCache_2 : Okhttp3InternalCacheFaultHidingSink {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withOkioSink:(id<OkioSink>)delegate;

- (void)onExceptionWithJavaIoIOException:(JavaIoIOException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_2)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache_2 *self, Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_2 *new_Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_2 *create_Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate);

@interface Okhttp3InternalCacheDiskLruCache_3 : NSObject < JavaUtilIterator > {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
  id<JavaUtilIterator> delegate_;
  Okhttp3InternalCacheDiskLruCache_Snapshot *nextSnapshot_;
  Okhttp3InternalCacheDiskLruCache_Snapshot *removeSnapshot_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$;

- (jboolean)hasNext;

- (Okhttp3InternalCacheDiskLruCache_Snapshot *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_3)

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_3, delegate_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_3, nextSnapshot_, Okhttp3InternalCacheDiskLruCache_Snapshot *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_3, removeSnapshot_, Okhttp3InternalCacheDiskLruCache_Snapshot *)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache_3 *self, Okhttp3InternalCacheDiskLruCache *outer$);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_3 *new_Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_3 *create_Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$);

@interface Okhttp3InternalCacheDiskLruCache_Snapshot () {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
  NSString *key_;
  jlong sequenceNumber_;
  IOSObjectArray *sources_;
  IOSLongArray *lengths_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withNSString:(NSString *)key
                                                withLong:(jlong)sequenceNumber
                                     withOkioSourceArray:(IOSObjectArray *)sources
                                           withLongArray:(IOSLongArray *)lengths;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Snapshot, key_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Snapshot, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Snapshot, lengths_, IOSLongArray *)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache_Snapshot *self, Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Snapshot *new_Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Snapshot *create_Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths);

@interface Okhttp3InternalCacheDiskLruCache_4 : NSObject < OkioSink >

- (instancetype)init;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_4)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_4_init(Okhttp3InternalCacheDiskLruCache_4 *self);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_4 *new_Okhttp3InternalCacheDiskLruCache_4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_4 *create_Okhttp3InternalCacheDiskLruCache_4_init();

@interface Okhttp3InternalCacheDiskLruCache_Editor () {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
  Okhttp3InternalCacheDiskLruCache_Entry *entry__;
  IOSBooleanArray *written_;
  jboolean done_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
              withOkhttp3InternalCacheDiskLruCache_Entry:(Okhttp3InternalCacheDiskLruCache_Entry *)entry_;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Editor, entry__, Okhttp3InternalCacheDiskLruCache_Entry *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Editor, written_, IOSBooleanArray *)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache_Editor *self, Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Editor *new_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Editor *create_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_);

@interface Okhttp3InternalCacheDiskLruCache_Editor_1 : Okhttp3InternalCacheFaultHidingSink {
 @public
  Okhttp3InternalCacheDiskLruCache_Editor *this$0_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)outer$
                                                   withOkioSink:(id<OkioSink>)delegate;

- (void)onExceptionWithJavaIoIOException:(JavaIoIOException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_Editor_1)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor_1 *self, Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Editor_1 *new_Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Editor_1 *create_Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate);

@interface Okhttp3InternalCacheDiskLruCache_Entry : NSObject {
 @public
  Okhttp3InternalCacheDiskLruCache *this$0_;
  NSString *key_;
  IOSLongArray *lengths_;
  IOSObjectArray *cleanFiles_;
  IOSObjectArray *dirtyFiles_;
  jboolean readable_;
  Okhttp3InternalCacheDiskLruCache_Editor *currentEditor_;
  jlong sequenceNumber_;
}

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withNSString:(NSString *)key;

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (void)writeLengthsWithOkioBufferedSink:(id<OkioBufferedSink>)writer;

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCacheDiskLruCache_Entry)

J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Entry, key_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Entry, lengths_, IOSLongArray *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Entry, cleanFiles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Entry, dirtyFiles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCacheDiskLruCache_Entry, currentEditor_, Okhttp3InternalCacheDiskLruCache_Editor *)

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache_Entry *self, Okhttp3InternalCacheDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Entry *new_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCacheDiskLruCache_Entry *create_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static void Okhttp3InternalCacheDiskLruCache_Entry_setLengthsWithNSStringArray_(Okhttp3InternalCacheDiskLruCache_Entry *self, IOSObjectArray *strings);

__attribute__((unused)) static JavaIoIOException *Okhttp3InternalCacheDiskLruCache_Entry_invalidLengthsWithNSStringArray_(Okhttp3InternalCacheDiskLruCache_Entry *self, IOSObjectArray *strings);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalCacheDiskLruCache_Entry)

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalCacheDiskLruCache)

NSString *Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE = @"journal";
NSString *Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_TEMP = @"journal.tmp";
NSString *Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_BACKUP = @"journal.bkp";
NSString *Okhttp3InternalCacheDiskLruCache_MAGIC = @"libcore.io.DiskLruCache";
NSString *Okhttp3InternalCacheDiskLruCache_VERSION_1 = @"1";
JavaUtilRegexPattern *Okhttp3InternalCacheDiskLruCache_LEGAL_KEY_PATTERN;

@implementation Okhttp3InternalCacheDiskLruCache

+ (NSString *)JOURNAL_FILE {
  return Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE;
}

+ (NSString *)JOURNAL_FILE_TEMP {
  return Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_TEMP;
}

+ (NSString *)JOURNAL_FILE_BACKUP {
  return Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_BACKUP;
}

+ (NSString *)MAGIC {
  return Okhttp3InternalCacheDiskLruCache_MAGIC;
}

+ (NSString *)VERSION_1 {
  return Okhttp3InternalCacheDiskLruCache_VERSION_1;
}

+ (jlong)ANY_SEQUENCE_NUMBER {
  return Okhttp3InternalCacheDiskLruCache_ANY_SEQUENCE_NUMBER;
}

+ (JavaUtilRegexPattern *)LEGAL_KEY_PATTERN {
  return Okhttp3InternalCacheDiskLruCache_LEGAL_KEY_PATTERN;
}

- (instancetype)initWithOkhttp3InternalIoFileSystem:(id<Okhttp3InternalIoFileSystem>)fileSystem
                                     withJavaIoFile:(JavaIoFile *)directory
                                            withInt:(jint)appVersion
                                            withInt:(jint)valueCount
                                           withLong:(jlong)maxSize
                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  Okhttp3InternalCacheDiskLruCache_initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(self, fileSystem, directory, appVersion, valueCount, maxSize, executor);
  return self;
}

- (void)initialize__ {
  @synchronized(self) {
    JreAssert(JavaLangThread_holdsLockWithId_(self), @"okhttp3/internal/cache/DiskLruCache.java:210 condition failed: assert Thread.holdsLock(this);");
    if (initialized_) {
      return;
    }
    if ([((id<Okhttp3InternalIoFileSystem>) nil_chk(fileSystem_)) existsWithJavaIoFile:journalFileBackup_]) {
      if ([fileSystem_ existsWithJavaIoFile:journalFile_]) {
        [fileSystem_ delete__WithJavaIoFile:journalFileBackup_];
      }
      else {
        [fileSystem_ renameWithJavaIoFile:journalFileBackup_ withJavaIoFile:journalFile_];
      }
    }
    if ([fileSystem_ existsWithJavaIoFile:journalFile_]) {
      @try {
        Okhttp3InternalCacheDiskLruCache_readJournal(self);
        Okhttp3InternalCacheDiskLruCache_processJournal(self);
        initialized_ = true;
        return;
      }
      @catch (JavaIoIOException *journalIsCorrupt) {
        [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_WARN withNSString:JreStrcat("$@$$$", @"DiskLruCache ", directory_, @" is corrupt: ", [journalIsCorrupt getMessage], @", removing") withJavaLangThrowable:journalIsCorrupt];
        [self delete__];
        closed_ = false;
      }
    }
    Okhttp3InternalCacheDiskLruCache_rebuildJournal(self);
    initialized_ = true;
  }
}

+ (Okhttp3InternalCacheDiskLruCache *)createWithOkhttp3InternalIoFileSystem:(id<Okhttp3InternalIoFileSystem>)fileSystem
                                                             withJavaIoFile:(JavaIoFile *)directory
                                                                    withInt:(jint)appVersion
                                                                    withInt:(jint)valueCount
                                                                   withLong:(jlong)maxSize {
  return Okhttp3InternalCacheDiskLruCache_createWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_(fileSystem, directory, appVersion, valueCount, maxSize);
}

- (void)readJournal {
  Okhttp3InternalCacheDiskLruCache_readJournal(self);
}

- (id<OkioBufferedSink>)newJournalWriter {
  return Okhttp3InternalCacheDiskLruCache_newJournalWriter(self);
}

- (void)readJournalLineWithNSString:(NSString *)line {
  Okhttp3InternalCacheDiskLruCache_readJournalLineWithNSString_(self, line);
}

- (void)processJournal {
  Okhttp3InternalCacheDiskLruCache_processJournal(self);
}

- (void)rebuildJournal {
  Okhttp3InternalCacheDiskLruCache_rebuildJournal(self);
}

- (Okhttp3InternalCacheDiskLruCache_Snapshot *)getWithNSString:(NSString *)key {
  @synchronized(self) {
    [self initialize__];
    Okhttp3InternalCacheDiskLruCache_checkNotClosed(self);
    Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(self, key);
    Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil || !entry_->readable_) return JreRetainedLocalValue(nil);
    Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot = [entry_ snapshot];
    if (snapshot == nil) return JreRetainedLocalValue(nil);
    redundantOpCount_++;
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(journalWriter_)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_READ])) writeByteWithInt:' '])) writeUtf8WithNSString:key])) writeByteWithInt:0x000a];
    if (Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:cleanupRunnable_];
    }
    return JreRetainedLocalValue(snapshot);
  }
}

- (Okhttp3InternalCacheDiskLruCache_Editor *)editWithNSString:(NSString *)key {
  return Okhttp3InternalCacheDiskLruCache_editWithNSString_withLong_(self, key, Okhttp3InternalCacheDiskLruCache_ANY_SEQUENCE_NUMBER);
}

- (Okhttp3InternalCacheDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                     withLong:(jlong)expectedSequenceNumber {
  return Okhttp3InternalCacheDiskLruCache_editWithNSString_withLong_(self, key, expectedSequenceNumber);
}

- (JavaIoFile *)getDirectory {
  return directory_;
}

- (jlong)getMaxSize {
  @synchronized(self) {
    return maxSize_;
  }
}

- (void)setMaxSizeWithLong:(jlong)maxSize {
  @synchronized(self) {
    self->maxSize_ = maxSize;
    if (initialized_) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:cleanupRunnable_];
    }
  }
}

- (jlong)size {
  @synchronized(self) {
    [self initialize__];
    return size_;
  }
}

- (void)completeEditWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)editor
                                                    withBoolean:(jboolean)success {
  Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(self, editor, success);
}

- (jboolean)journalRebuildRequired {
  return Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(self);
}

- (jboolean)removeWithNSString:(NSString *)key {
  @synchronized(self) {
    [self initialize__];
    Okhttp3InternalCacheDiskLruCache_checkNotClosed(self);
    Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(self, key);
    Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil) return false;
    jboolean removed = Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(self, entry_);
    if (removed && size_ <= maxSize_) mostRecentTrimFailed_ = false;
    return removed;
  }
}

- (jboolean)removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry:(Okhttp3InternalCacheDiskLruCache_Entry *)entry_ {
  return Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(self, entry_);
}

- (jboolean)isClosed {
  @synchronized(self) {
    return closed_;
  }
}

- (void)checkNotClosed {
  Okhttp3InternalCacheDiskLruCache_checkNotClosed(self);
}

- (void)flush {
  @synchronized(self) {
    if (!initialized_) return;
    Okhttp3InternalCacheDiskLruCache_checkNotClosed(self);
    Okhttp3InternalCacheDiskLruCache_trimToSize(self);
    [((id<OkioBufferedSink>) nil_chk(journalWriter_)) flush];
  }
}

- (void)close {
  @synchronized(self) {
    if (!initialized_ || closed_) {
      closed_ = true;
      return;
    }
    {
      IOSObjectArray *a__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[lruEntries_ size] type:Okhttp3InternalCacheDiskLruCache_Entry_class_()]];
      Okhttp3InternalCacheDiskLruCache_Entry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      Okhttp3InternalCacheDiskLruCache_Entry * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        Okhttp3InternalCacheDiskLruCache_Entry *entry_ = *b__++;
        if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
          [entry_->currentEditor_ abort];
        }
      }
    }
    Okhttp3InternalCacheDiskLruCache_trimToSize(self);
    [((id<OkioBufferedSink>) nil_chk(journalWriter_)) close];
    JreStrongAssign(&journalWriter_, nil);
    closed_ = true;
  }
}

- (void)trimToSize {
  Okhttp3InternalCacheDiskLruCache_trimToSize(self);
}

- (void)delete__ {
  [self close];
  [((id<Okhttp3InternalIoFileSystem>) nil_chk(fileSystem_)) deleteContentsWithJavaIoFile:directory_];
}

- (void)evictAll {
  @synchronized(self) {
    [self initialize__];
    {
      IOSObjectArray *a__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[lruEntries_ size] type:Okhttp3InternalCacheDiskLruCache_Entry_class_()]];
      Okhttp3InternalCacheDiskLruCache_Entry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      Okhttp3InternalCacheDiskLruCache_Entry * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        Okhttp3InternalCacheDiskLruCache_Entry *entry_ = *b__++;
        Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(self, entry_);
      }
    }
    mostRecentTrimFailed_ = false;
  }
}

- (void)validateKeyWithNSString:(NSString *)key {
  Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(self, key);
}

- (id<JavaUtilIterator>)snapshots {
  @synchronized(self) {
    [self initialize__];
    return JreRetainedLocalValue(create_Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(self));
  }
}

- (void)dealloc {
  RELEASE_(fileSystem_);
  RELEASE_(directory_);
  RELEASE_(journalFile_);
  RELEASE_(journalFileTmp_);
  RELEASE_(journalFileBackup_);
  RELEASE_(journalWriter_);
  RELEASE_(lruEntries_);
  RELEASE_(executor_);
  RELEASE_(cleanupRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, -1, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioBufferedSink;", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Snapshot;", 0x21, 8, 7, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Editor;", 0x1, 9, 7, 2, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Editor;", 0x22, 9, 10, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 12, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x22, 13, 14, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 15, 7, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 17, 2, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 18, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x21, -1, -1, 2, 20, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalIoFileSystem:withJavaIoFile:withInt:withInt:withLong:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(initialize__);
  methods[2].selector = @selector(createWithOkhttp3InternalIoFileSystem:withJavaIoFile:withInt:withInt:withLong:);
  methods[3].selector = @selector(readJournal);
  methods[4].selector = @selector(newJournalWriter);
  methods[5].selector = @selector(readJournalLineWithNSString:);
  methods[6].selector = @selector(processJournal);
  methods[7].selector = @selector(rebuildJournal);
  methods[8].selector = @selector(getWithNSString:);
  methods[9].selector = @selector(editWithNSString:);
  methods[10].selector = @selector(editWithNSString:withLong:);
  methods[11].selector = @selector(getDirectory);
  methods[12].selector = @selector(getMaxSize);
  methods[13].selector = @selector(setMaxSizeWithLong:);
  methods[14].selector = @selector(size);
  methods[15].selector = @selector(completeEditWithOkhttp3InternalCacheDiskLruCache_Editor:withBoolean:);
  methods[16].selector = @selector(journalRebuildRequired);
  methods[17].selector = @selector(removeWithNSString:);
  methods[18].selector = @selector(removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry:);
  methods[19].selector = @selector(isClosed);
  methods[20].selector = @selector(checkNotClosed);
  methods[21].selector = @selector(flush);
  methods[22].selector = @selector(close);
  methods[23].selector = @selector(trimToSize);
  methods[24].selector = @selector(delete__);
  methods[25].selector = @selector(evictAll);
  methods[26].selector = @selector(validateKeyWithNSString:);
  methods[27].selector = @selector(snapshots);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "JOURNAL_FILE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "JOURNAL_FILE_TEMP", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "JOURNAL_FILE_BACKUP", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 23, -1, -1 },
    { "MAGIC", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 24, -1, -1 },
    { "VERSION_1", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 25, -1, -1 },
    { "ANY_SEQUENCE_NUMBER", "J", .constantValue.asLong = Okhttp3InternalCacheDiskLruCache_ANY_SEQUENCE_NUMBER, 0x18, -1, -1, -1, -1 },
    { "LEGAL_KEY_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "CLEAN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "DIRTY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "REMOVE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "READ", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "fileSystem_", "LOkhttp3InternalIoFileSystem;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "directory_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "journalFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "journalFileTmp_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "journalFileBackup_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "appVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "valueCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "journalWriter_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lruEntries_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "redundantOpCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasJournalErrors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mostRecentTrimFailed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mostRecentRebuildFailed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSequenceNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cleanupRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NULL_SINK", "LOkioSink;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalIoFileSystem;LJavaIoFile;IIJLJavaUtilConcurrentExecutor;", "initialize", "LJavaIoIOException;", "create", "LOkhttp3InternalIoFileSystem;LJavaIoFile;IIJ", "LJavaIoFileNotFoundException;", "readJournalLine", "LNSString;", "get", "edit", "LNSString;J", "setMaxSize", "J", "completeEdit", "LOkhttp3InternalCacheDiskLruCache_Editor;Z", "remove", "removeEntry", "LOkhttp3InternalCacheDiskLruCache_Entry;", "delete", "validateKey", "()Ljava/util/Iterator<Lokhttp3/internal/cache/DiskLruCache$Snapshot;>;", &Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE, &Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_TEMP, &Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_BACKUP, &Okhttp3InternalCacheDiskLruCache_MAGIC, &Okhttp3InternalCacheDiskLruCache_VERSION_1, &Okhttp3InternalCacheDiskLruCache_LEGAL_KEY_PATTERN, &Okhttp3InternalCacheDiskLruCache_CLEAN, &Okhttp3InternalCacheDiskLruCache_DIRTY, &Okhttp3InternalCacheDiskLruCache_REMOVE, &Okhttp3InternalCacheDiskLruCache_READ, "Ljava/util/LinkedHashMap<Ljava/lang/String;Lokhttp3/internal/cache/DiskLruCache$Entry;>;", &Okhttp3InternalCacheDiskLruCache_NULL_SINK, "LOkhttp3InternalCacheDiskLruCache_Snapshot;LOkhttp3InternalCacheDiskLruCache_Editor;LOkhttp3InternalCacheDiskLruCache_Entry;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache = { "DiskLruCache", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x11, 28, 32, -1, 33, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache;
}

+ (void)initialize {
  if (self == [Okhttp3InternalCacheDiskLruCache class]) {
    JreStrongAssign(&Okhttp3InternalCacheDiskLruCache_LEGAL_KEY_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[a-z0-9_-]{1,120}"));
    JreStrongAssignAndConsume(&Okhttp3InternalCacheDiskLruCache_NULL_SINK, new_Okhttp3InternalCacheDiskLruCache_4_init());
    J2OBJC_SET_INITIALIZED(Okhttp3InternalCacheDiskLruCache)
  }
}

@end

void Okhttp3InternalCacheDiskLruCache_initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(Okhttp3InternalCacheDiskLruCache *self, id<Okhttp3InternalIoFileSystem> fileSystem, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  NSObject_init(self);
  self->size_ = 0;
  JreStrongAssignAndConsume(&self->lruEntries_, new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(0, 0.75f, true));
  self->nextSequenceNumber_ = 0;
  JreStrongAssignAndConsume(&self->cleanupRunnable_, new_Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(self));
  JreStrongAssign(&self->fileSystem_, fileSystem);
  JreStrongAssign(&self->directory_, directory);
  self->appVersion_ = appVersion;
  JreStrongAssignAndConsume(&self->journalFile_, new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE));
  JreStrongAssignAndConsume(&self->journalFileTmp_, new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_TEMP));
  JreStrongAssignAndConsume(&self->journalFileBackup_, new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, Okhttp3InternalCacheDiskLruCache_JOURNAL_FILE_BACKUP));
  self->valueCount_ = valueCount;
  self->maxSize_ = maxSize;
  JreStrongAssign(&self->executor_, executor);
}

Okhttp3InternalCacheDiskLruCache *new_Okhttp3InternalCacheDiskLruCache_initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(id<Okhttp3InternalIoFileSystem> fileSystem, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache, initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_, fileSystem, directory, appVersion, valueCount, maxSize, executor)
}

Okhttp3InternalCacheDiskLruCache *create_Okhttp3InternalCacheDiskLruCache_initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(id<Okhttp3InternalIoFileSystem> fileSystem, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache, initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_, fileSystem, directory, appVersion, valueCount, maxSize, executor)
}

Okhttp3InternalCacheDiskLruCache *Okhttp3InternalCacheDiskLruCache_createWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_(id<Okhttp3InternalIoFileSystem> fileSystem, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  Okhttp3InternalCacheDiskLruCache_initialize();
  if (maxSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize <= 0");
  }
  if (valueCount <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"valueCount <= 0");
  }
  id<JavaUtilConcurrentExecutor> executor = create_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, 1, 60LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), create_JavaUtilConcurrentLinkedBlockingQueue_init(), Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp DiskLruCache", true));
  return create_Okhttp3InternalCacheDiskLruCache_initWithOkhttp3InternalIoFileSystem_withJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(fileSystem, directory, appVersion, valueCount, maxSize, executor);
}

void Okhttp3InternalCacheDiskLruCache_readJournal(Okhttp3InternalCacheDiskLruCache *self) {
  id<OkioBufferedSource> source = OkioOkio_bufferWithOkioSource_([((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) sourceWithJavaIoFile:self->journalFile_]);
  @try {
    NSString *magic = [((id<OkioBufferedSource>) nil_chk(source)) readUtf8LineStrict];
    NSString *version_ = [source readUtf8LineStrict];
    NSString *appVersionString = [source readUtf8LineStrict];
    NSString *valueCountString = [source readUtf8LineStrict];
    NSString *blank = [source readUtf8LineStrict];
    if (![((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_MAGIC)) isEqual:magic] || ![((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_VERSION_1)) isEqual:version_] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->appVersion_))) isEqual:appVersionString] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->valueCount_))) isEqual:valueCountString] || ![@"" isEqual:blank]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$$$$$$C", @"unexpected journal header: [", magic, @", ", version_, @", ", valueCountString, @", ", blank, ']'));
    }
    jint lineCount = 0;
    while (true) {
      @try {
        Okhttp3InternalCacheDiskLruCache_readJournalLineWithNSString_(self, [source readUtf8LineStrict]);
        lineCount++;
      }
      @catch (JavaIoEOFException *endOfJournal) {
        break;
      }
    }
    self->redundantOpCount_ = lineCount - [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
    if (![source exhausted]) {
      Okhttp3InternalCacheDiskLruCache_rebuildJournal(self);
    }
    else {
      JreStrongAssign(&self->journalWriter_, Okhttp3InternalCacheDiskLruCache_newJournalWriter(self));
    }
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(source);
  }
}

id<OkioBufferedSink> Okhttp3InternalCacheDiskLruCache_newJournalWriter(Okhttp3InternalCacheDiskLruCache *self) {
  id<OkioSink> fileSink = [((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) appendingSinkWithJavaIoFile:self->journalFile_];
  id<OkioSink> faultHidingSink = create_Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(self, fileSink);
  return OkioOkio_bufferWithOkioSink_(faultHidingSink);
}

void Okhttp3InternalCacheDiskLruCache_readJournalLineWithNSString_(Okhttp3InternalCacheDiskLruCache *self, NSString *line) {
  jint firstSpace = [((NSString *) nil_chk(line)) java_indexOf:' '];
  if (firstSpace == -1) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
  jint keyBegin = firstSpace + 1;
  jint secondSpace = [line java_indexOf:' ' fromIndex:keyBegin];
  NSString *key;
  if (secondSpace == -1) {
    key = [line java_substring:keyBegin];
    if (firstSpace == [((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_REMOVE)) java_length] && [line java_hasPrefix:Okhttp3InternalCacheDiskLruCache_REMOVE]) {
      [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:key];
      return;
    }
  }
  else {
    key = [line java_substring:keyBegin endIndex:secondSpace];
  }
  Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
  if (entry_ == nil) {
    entry_ = create_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(self, key);
    [self->lruEntries_ putWithId:key withId:entry_];
  }
  if (secondSpace != -1 && firstSpace == [((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_CLEAN)) java_length] && [line java_hasPrefix:Okhttp3InternalCacheDiskLruCache_CLEAN]) {
    IOSObjectArray *parts = [((NSString *) nil_chk([line java_substring:secondSpace + 1])) java_split:@" "];
    entry_->readable_ = true;
    JreStrongAssign(&entry_->currentEditor_, nil);
    Okhttp3InternalCacheDiskLruCache_Entry_setLengthsWithNSStringArray_(entry_, parts);
  }
  else if (secondSpace == -1 && firstSpace == [((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_DIRTY)) java_length] && [line java_hasPrefix:Okhttp3InternalCacheDiskLruCache_DIRTY]) {
    JreStrongAssignAndConsume(&entry_->currentEditor_, new_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(self, entry_));
  }
  else if (secondSpace == -1 && firstSpace == [((NSString *) nil_chk(Okhttp3InternalCacheDiskLruCache_READ)) java_length] && [line java_hasPrefix:Okhttp3InternalCacheDiskLruCache_READ]) {
  }
  else {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
}

void Okhttp3InternalCacheDiskLruCache_processJournal(Okhttp3InternalCacheDiskLruCache *self) {
  [((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) delete__WithJavaIoFile:self->journalFileTmp_];
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [i next];
    if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ == nil) {
      for (jint t = 0; t < self->valueCount_; t++) {
        self->size_ += IOSLongArray_Get(nil_chk(entry_->lengths_), t);
      }
    }
    else {
      JreStrongAssign(&entry_->currentEditor_, nil);
      for (jint t = 0; t < self->valueCount_; t++) {
        [self->fileSystem_ delete__WithJavaIoFile:IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), t)];
        [self->fileSystem_ delete__WithJavaIoFile:IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), t)];
      }
      [i remove];
    }
  }
}

void Okhttp3InternalCacheDiskLruCache_rebuildJournal(Okhttp3InternalCacheDiskLruCache *self) {
  @synchronized(self) {
    if (self->journalWriter_ != nil) {
      [self->journalWriter_ close];
    }
    id<OkioBufferedSink> writer = OkioOkio_bufferWithOkioSink_([((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) sinkWithJavaIoFile:self->journalFileTmp_]);
    @try {
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(writer)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_MAGIC])) writeByteWithInt:0x000a];
      [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_VERSION_1])) writeByteWithInt:0x000a];
      [((id<OkioBufferedSink>) nil_chk([writer writeDecimalLongWithLong:self->appVersion_])) writeByteWithInt:0x000a];
      [((id<OkioBufferedSink>) nil_chk([writer writeDecimalLongWithLong:self->valueCount_])) writeByteWithInt:0x000a];
      [writer writeByteWithInt:0x000a];
      for (Okhttp3InternalCacheDiskLruCache_Entry * __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) {
        if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
          [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_DIRTY])) writeByteWithInt:' '];
          [writer writeUtf8WithNSString:entry_->key_];
          [writer writeByteWithInt:0x000a];
        }
        else {
          [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_CLEAN])) writeByteWithInt:' '];
          [writer writeUtf8WithNSString:entry_->key_];
          [entry_ writeLengthsWithOkioBufferedSink:writer];
          [writer writeByteWithInt:0x000a];
        }
      }
    }
    @finally {
      [writer close];
    }
    if ([self->fileSystem_ existsWithJavaIoFile:self->journalFile_]) {
      [self->fileSystem_ renameWithJavaIoFile:self->journalFile_ withJavaIoFile:self->journalFileBackup_];
    }
    [self->fileSystem_ renameWithJavaIoFile:self->journalFileTmp_ withJavaIoFile:self->journalFile_];
    [self->fileSystem_ delete__WithJavaIoFile:self->journalFileBackup_];
    JreStrongAssign(&self->journalWriter_, Okhttp3InternalCacheDiskLruCache_newJournalWriter(self));
    self->hasJournalErrors_ = false;
    self->mostRecentRebuildFailed_ = false;
  }
}

Okhttp3InternalCacheDiskLruCache_Editor *Okhttp3InternalCacheDiskLruCache_editWithNSString_withLong_(Okhttp3InternalCacheDiskLruCache *self, NSString *key, jlong expectedSequenceNumber) {
  @synchronized(self) {
    [self initialize__];
    Okhttp3InternalCacheDiskLruCache_checkNotClosed(self);
    Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(self, key);
    Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
    if (expectedSequenceNumber != Okhttp3InternalCacheDiskLruCache_ANY_SEQUENCE_NUMBER && (entry_ == nil || entry_->sequenceNumber_ != expectedSequenceNumber)) {
      return JreRetainedLocalValue(nil);
    }
    if (entry_ != nil && entry_->currentEditor_ != nil) {
      return JreRetainedLocalValue(nil);
    }
    if (self->mostRecentTrimFailed_ || self->mostRecentRebuildFailed_) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->cleanupRunnable_];
      return JreRetainedLocalValue(nil);
    }
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_DIRTY])) writeByteWithInt:' '])) writeUtf8WithNSString:key])) writeByteWithInt:0x000a];
    [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) flush];
    if (self->hasJournalErrors_) {
      return JreRetainedLocalValue(nil);
    }
    if (entry_ == nil) {
      entry_ = create_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(self, key);
      [self->lruEntries_ putWithId:key withId:entry_];
    }
    Okhttp3InternalCacheDiskLruCache_Editor *editor = create_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(self, entry_);
    JreStrongAssign(&entry_->currentEditor_, editor);
    return JreRetainedLocalValue(editor);
  }
}

void Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(Okhttp3InternalCacheDiskLruCache *self, Okhttp3InternalCacheDiskLruCache_Editor *editor, jboolean success) {
  @synchronized(self) {
    Okhttp3InternalCacheDiskLruCache_Entry *entry_ = ((Okhttp3InternalCacheDiskLruCache_Editor *) nil_chk(editor))->entry__;
    if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != editor) {
      @throw create_JavaLangIllegalStateException_init();
    }
    if (success && !entry_->readable_) {
      for (jint i = 0; i < self->valueCount_; i++) {
        if (!IOSBooleanArray_Get(nil_chk(editor->written_), i)) {
          [editor abort];
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Newly created entry didn't create value for index ", i));
        }
        if (![((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) existsWithJavaIoFile:IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), i)]) {
          [editor abort];
          return;
        }
      }
    }
    for (jint i = 0; i < self->valueCount_; i++) {
      JavaIoFile *dirty = IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), i);
      if (success) {
        if ([((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) existsWithJavaIoFile:dirty]) {
          JavaIoFile *clean = IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), i);
          [self->fileSystem_ renameWithJavaIoFile:dirty withJavaIoFile:clean];
          jlong oldLength = IOSLongArray_Get(nil_chk(entry_->lengths_), i);
          jlong newLength = [self->fileSystem_ sizeWithJavaIoFile:clean];
          *IOSLongArray_GetRef(entry_->lengths_, i) = newLength;
          self->size_ = self->size_ - oldLength + newLength;
        }
      }
      else {
        [((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) delete__WithJavaIoFile:dirty];
      }
    }
    self->redundantOpCount_++;
    JreStrongAssign(&entry_->currentEditor_, nil);
    if (entry_->readable_ | success) {
      entry_->readable_ = true;
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_CLEAN])) writeByteWithInt:' '];
      [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:entry_->key_];
      [entry_ writeLengthsWithOkioBufferedSink:self->journalWriter_];
      [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeByteWithInt:0x000a];
      if (success) {
        entry_->sequenceNumber_ = self->nextSequenceNumber_++;
      }
    }
    else {
      [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_REMOVE])) writeByteWithInt:' '];
      [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:entry_->key_];
      [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeByteWithInt:0x000a];
    }
    [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) flush];
    if (self->size_ > self->maxSize_ || Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->cleanupRunnable_];
    }
  }
}

jboolean Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(Okhttp3InternalCacheDiskLruCache *self) {
  jint redundantOpCompactThreshold = 2000;
  return self->redundantOpCount_ >= redundantOpCompactThreshold && self->redundantOpCount_ >= [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
}

jboolean Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *self, Okhttp3InternalCacheDiskLruCache_Entry *entry_) {
  if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
    [entry_->currentEditor_ detach];
  }
  for (jint i = 0; i < self->valueCount_; i++) {
    [((id<Okhttp3InternalIoFileSystem>) nil_chk(self->fileSystem_)) delete__WithJavaIoFile:IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), i)];
    self->size_ -= IOSLongArray_Get(nil_chk(entry_->lengths_), i);
    *IOSLongArray_GetRef(entry_->lengths_, i) = 0;
  }
  self->redundantOpCount_++;
  [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:Okhttp3InternalCacheDiskLruCache_REMOVE])) writeByteWithInt:' '])) writeUtf8WithNSString:entry_->key_])) writeByteWithInt:0x000a];
  [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
  if (Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(self)) {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->cleanupRunnable_];
  }
  return true;
}

void Okhttp3InternalCacheDiskLruCache_checkNotClosed(Okhttp3InternalCacheDiskLruCache *self) {
  @synchronized(self) {
    if ([self isClosed]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"cache is closed");
    }
  }
}

void Okhttp3InternalCacheDiskLruCache_trimToSize(Okhttp3InternalCacheDiskLruCache *self) {
  while (self->size_ > self->maxSize_) {
    Okhttp3InternalCacheDiskLruCache_Entry *toEvict = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator])) next];
    Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(self, toEvict);
  }
  self->mostRecentTrimFailed_ = false;
}

void Okhttp3InternalCacheDiskLruCache_validateKeyWithNSString_(Okhttp3InternalCacheDiskLruCache *self, NSString *key) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(Okhttp3InternalCacheDiskLruCache_LEGAL_KEY_PATTERN)) matcherWithJavaLangCharSequence:key];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"keys must match regex [a-z0-9_-]{1,120}: \"", key, '"'));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheDiskLruCache)

@implementation Okhttp3InternalCacheDiskLruCache_1

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$ {
  Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(self, outer$);
  return self;
}

- (void)run {
  @synchronized(this$0_) {
    if (!this$0_->initialized_ | this$0_->closed_) {
      return;
    }
    @try {
      Okhttp3InternalCacheDiskLruCache_trimToSize(this$0_);
    }
    @catch (JavaIoIOException *ignored) {
      this$0_->mostRecentTrimFailed_ = true;
    }
    @try {
      if (Okhttp3InternalCacheDiskLruCache_journalRebuildRequired(this$0_)) {
        Okhttp3InternalCacheDiskLruCache_rebuildJournal(this$0_);
        this$0_->redundantOpCount_ = 0;
      }
    }
    @catch (JavaIoIOException *e) {
      this$0_->mostRecentRebuildFailed_ = true;
      JreStrongAssign(&this$0_->journalWriter_, OkioOkio_bufferWithOkioSink_(JreLoadStatic(Okhttp3InternalCacheDiskLruCache, NULL_SINK)));
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalCacheDiskLruCache;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_1 = { "", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_1;
}

@end

void Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache_1 *self, Okhttp3InternalCacheDiskLruCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3InternalCacheDiskLruCache_1 *new_Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_1, initWithOkhttp3InternalCacheDiskLruCache_, outer$)
}

Okhttp3InternalCacheDiskLruCache_1 *create_Okhttp3InternalCacheDiskLruCache_1_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_1, initWithOkhttp3InternalCacheDiskLruCache_, outer$)
}

@implementation Okhttp3InternalCacheDiskLruCache_2

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withOkioSink:(id<OkioSink>)delegate {
  Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(self, outer$, delegate);
  return self;
}

- (void)onExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  JreAssert((JavaLangThread_holdsLockWithId_(this$0_)), @"okhttp3/internal/cache/DiskLruCache.java:313 condition failed: assert (Thread.holdsLock(DiskLruCache.this));");
  this$0_->hasJournalErrors_ = true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:withOkioSink:);
  methods[1].selector = @selector(onExceptionWithJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSink;", "onException", "LJavaIoIOException;", "LOkhttp3InternalCacheDiskLruCache;", "newJournalWriter" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_2 = { "", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_2;
}

@end

void Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache_2 *self, Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate) {
  JreStrongAssign(&self->this$0_, outer$);
  Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(self, delegate);
}

Okhttp3InternalCacheDiskLruCache_2 *new_Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_2, initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_, outer$, delegate)
}

Okhttp3InternalCacheDiskLruCache_2 *create_Okhttp3InternalCacheDiskLruCache_2_initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_(Okhttp3InternalCacheDiskLruCache *outer$, id<OkioSink> delegate) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_2, initWithOkhttp3InternalCacheDiskLruCache_withOkioSink_, outer$, delegate)
}

@implementation Okhttp3InternalCacheDiskLruCache_3

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$ {
  Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  if (nextSnapshot_ != nil) return true;
  @synchronized(this$0_) {
    if (this$0_->closed_) return false;
    while ([((id<JavaUtilIterator>) nil_chk(delegate_)) hasNext]) {
      Okhttp3InternalCacheDiskLruCache_Entry *entry_ = [delegate_ next];
      Okhttp3InternalCacheDiskLruCache_Snapshot *snapshot = [((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_)) snapshot];
      if (snapshot == nil) continue;
      JreStrongAssign(&nextSnapshot_, JreRetainedLocalValue(snapshot));
      return true;
    }
  }
  return false;
}

- (Okhttp3InternalCacheDiskLruCache_Snapshot *)next {
  if (![self hasNext]) @throw create_JavaUtilNoSuchElementException_init();
  JreStrongAssign(&removeSnapshot_, nextSnapshot_);
  JreStrongAssign(&nextSnapshot_, nil);
  return removeSnapshot_;
}

- (void)remove {
  if (removeSnapshot_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"remove() before next()");
  @try {
    [this$0_ removeWithNSString:removeSnapshot_->key_];
  }
  @catch (JavaIoIOException *ignored) {
  }
  @finally {
    JreStrongAssign(&removeSnapshot_, nil);
  }
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(delegate_);
  RELEASE_(nextSnapshot_);
  RELEASE_(removeSnapshot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Snapshot;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "delegate_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 0, -1 },
    { "nextSnapshot_", "LOkhttp3InternalCacheDiskLruCache_Snapshot;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "removeSnapshot_", "LOkhttp3InternalCacheDiskLruCache_Snapshot;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Iterator<Lokhttp3/internal/cache/DiskLruCache$Entry;>;", "LOkhttp3InternalCacheDiskLruCache;", "snapshots", "Ljava/lang/Object;Ljava/util/Iterator<Lokhttp3/internal/cache/DiskLruCache$Snapshot;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_3 = { "", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x8018, 4, 4, 1, -1, 2, 3, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_3;
}

@end

void Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache_3 *self, Okhttp3InternalCacheDiskLruCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, [create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(outer$->lruEntries_)) values]) iterator]);
}

Okhttp3InternalCacheDiskLruCache_3 *new_Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_3, initWithOkhttp3InternalCacheDiskLruCache_, outer$)
}

Okhttp3InternalCacheDiskLruCache_3 *create_Okhttp3InternalCacheDiskLruCache_3_initWithOkhttp3InternalCacheDiskLruCache_(Okhttp3InternalCacheDiskLruCache *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_3, initWithOkhttp3InternalCacheDiskLruCache_, outer$)
}

@implementation Okhttp3InternalCacheDiskLruCache_Snapshot

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withNSString:(NSString *)key
                                                withLong:(jlong)sequenceNumber
                                     withOkioSourceArray:(IOSObjectArray *)sources
                                           withLongArray:(IOSLongArray *)lengths {
  Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(self, outer$, key, sequenceNumber, sources, lengths);
  return self;
}

- (NSString *)key {
  return key_;
}

- (Okhttp3InternalCacheDiskLruCache_Editor *)edit {
  return Okhttp3InternalCacheDiskLruCache_editWithNSString_withLong_(this$0_, key_, sequenceNumber_);
}

- (id<OkioSource>)getSourceWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(sources_), index);
}

- (jlong)getLengthWithInt:(jint)index {
  return IOSLongArray_Get(nil_chk(lengths_), index);
}

- (void)close {
  {
    IOSObjectArray *a__ = sources_;
    id<OkioSource> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OkioSource> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OkioSource> in = *b__++;
      Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(in);
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(sources_);
  RELEASE_(lengths_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Editor;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:withNSString:withLong:withOkioSourceArray:withLongArray:);
  methods[1].selector = @selector(key);
  methods[2].selector = @selector(edit);
  methods[3].selector = @selector(getSourceWithInt:);
  methods[4].selector = @selector(getLengthWithInt:);
  methods[5].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sequenceNumber_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sources_", "[LOkioSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lengths_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;J[LOkioSource;[J", "LJavaIoIOException;", "getSource", "I", "getLength", "LOkhttp3InternalCacheDiskLruCache;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_Snapshot = { "Snapshot", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x11, 6, 5, 5, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_Snapshot;
}

@end

void Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache_Snapshot *self, Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  self->sequenceNumber_ = sequenceNumber;
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->lengths_, lengths);
}

Okhttp3InternalCacheDiskLruCache_Snapshot *new_Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_Snapshot, initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_, outer$, key, sequenceNumber, sources, lengths)
}

Okhttp3InternalCacheDiskLruCache_Snapshot *create_Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_Snapshot, initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_, outer$, key, sequenceNumber, sources, lengths)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheDiskLruCache_Snapshot)

@implementation Okhttp3InternalCacheDiskLruCache_4

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalCacheDiskLruCache_4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  [((OkioBuffer *) nil_chk(source)) skipWithLong:byteCount];
}

- (void)flush {
}

- (OkioTimeout *)timeout {
  return JreLoadStatic(OkioTimeout, NONE);
}

- (void)close {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(timeout);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "write", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalCacheDiskLruCache;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_4 = { "", "okhttp3.internal.cache", ptrTable, methods, NULL, 7, 0x8018, 5, 0, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_4;
}

@end

void Okhttp3InternalCacheDiskLruCache_4_init(Okhttp3InternalCacheDiskLruCache_4 *self) {
  NSObject_init(self);
}

Okhttp3InternalCacheDiskLruCache_4 *new_Okhttp3InternalCacheDiskLruCache_4_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_4, init)
}

Okhttp3InternalCacheDiskLruCache_4 *create_Okhttp3InternalCacheDiskLruCache_4_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_4, init)
}

@implementation Okhttp3InternalCacheDiskLruCache_Editor

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
              withOkhttp3InternalCacheDiskLruCache_Entry:(Okhttp3InternalCacheDiskLruCache_Entry *)entry_ {
  Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

- (void)detach {
  if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ == self) {
    for (jint i = 0; i < this$0_->valueCount_; i++) {
      @try {
        [((id<Okhttp3InternalIoFileSystem>) nil_chk(this$0_->fileSystem_)) delete__WithJavaIoFile:IOSObjectArray_Get(nil_chk(entry__->dirtyFiles_), i)];
      }
      @catch (JavaIoIOException *e) {
      }
    }
    JreStrongAssign(&entry__->currentEditor_, nil);
  }
}

- (id<OkioSource>)newSourceWithInt:(jint)index {
  @synchronized(this$0_) {
    if (done_) {
      @throw create_JavaLangIllegalStateException_init();
    }
    if (!((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->readable_ || entry__->currentEditor_ != self) {
      return JreRetainedLocalValue(nil);
    }
    @try {
      return JreRetainedLocalValue([((id<Okhttp3InternalIoFileSystem>) nil_chk(this$0_->fileSystem_)) sourceWithJavaIoFile:IOSObjectArray_Get(nil_chk(entry__->cleanFiles_), index)]);
    }
    @catch (JavaIoFileNotFoundException *e) {
      return JreRetainedLocalValue(nil);
    }
  }
}

- (id<OkioSink>)newSinkWithInt:(jint)index {
  @synchronized(this$0_) {
    if (done_) {
      @throw create_JavaLangIllegalStateException_init();
    }
    if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      return JreRetainedLocalValue(JreLoadStatic(Okhttp3InternalCacheDiskLruCache, NULL_SINK));
    }
    if (!entry__->readable_) {
      *IOSBooleanArray_GetRef(nil_chk(written_), index) = true;
    }
    JavaIoFile *dirtyFile = IOSObjectArray_Get(nil_chk(entry__->dirtyFiles_), index);
    id<OkioSink> sink;
    @try {
      sink = [((id<Okhttp3InternalIoFileSystem>) nil_chk(this$0_->fileSystem_)) sinkWithJavaIoFile:dirtyFile];
    }
    @catch (JavaIoFileNotFoundException *e) {
      return JreRetainedLocalValue(JreLoadStatic(Okhttp3InternalCacheDiskLruCache, NULL_SINK));
    }
    return JreRetainedLocalValue(create_Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(self, sink));
  }
}

- (void)commit {
  @synchronized(this$0_) {
    if (done_) {
      @throw create_JavaLangIllegalStateException_init();
    }
    if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ == self) {
      Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(this$0_, self, true);
    }
    done_ = true;
  }
}

- (void)abort {
  @synchronized(this$0_) {
    if (done_) {
      @throw create_JavaLangIllegalStateException_init();
    }
    if (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ == self) {
      Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(this$0_, self, false);
    }
    done_ = true;
  }
}

- (void)abortUnlessCommitted {
  @synchronized(this$0_) {
    if (!done_ && ((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ == self) {
      @try {
        Okhttp3InternalCacheDiskLruCache_completeEditWithOkhttp3InternalCacheDiskLruCache_Editor_withBoolean_(this$0_, self, false);
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(entry__);
  RELEASE_(written_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:withOkhttp3InternalCacheDiskLruCache_Entry:);
  methods[1].selector = @selector(detach);
  methods[2].selector = @selector(newSourceWithInt:);
  methods[3].selector = @selector(newSinkWithInt:);
  methods[4].selector = @selector(commit);
  methods[5].selector = @selector(abort);
  methods[6].selector = @selector(abortUnlessCommitted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "entry__", "LOkhttp3InternalCacheDiskLruCache_Entry;", .constantValue.asLong = 0, 0x12, 5, -1, -1, -1 },
    { "written_", "[Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalCacheDiskLruCache_Entry;", "newSource", "I", "newSink", "LJavaIoIOException;", "entry", "LOkhttp3InternalCacheDiskLruCache;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_Editor = { "Editor", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x11, 7, 4, 6, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_Editor;
}

@end

void Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache_Editor *self, Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->entry__, entry_);
  JreStrongAssign(&self->written_, (((Okhttp3InternalCacheDiskLruCache_Entry *) nil_chk(entry_))->readable_) ? nil : [IOSBooleanArray arrayWithLength:outer$->valueCount_]);
}

Okhttp3InternalCacheDiskLruCache_Editor *new_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_Editor, initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_, outer$, entry_)
}

Okhttp3InternalCacheDiskLruCache_Editor *create_Okhttp3InternalCacheDiskLruCache_Editor_initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_(Okhttp3InternalCacheDiskLruCache *outer$, Okhttp3InternalCacheDiskLruCache_Entry *entry_) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_Editor, initWithOkhttp3InternalCacheDiskLruCache_withOkhttp3InternalCacheDiskLruCache_Entry_, outer$, entry_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheDiskLruCache_Editor)

@implementation Okhttp3InternalCacheDiskLruCache_Editor_1

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache_Editor:(Okhttp3InternalCacheDiskLruCache_Editor *)outer$
                                                   withOkioSink:(id<OkioSink>)delegate {
  Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(self, outer$, delegate);
  return self;
}

- (void)onExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  @synchronized(this$0_->this$0_) {
    [this$0_ detach];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache_Editor:withOkioSink:);
  methods[1].selector = @selector(onExceptionWithJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache_Editor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSink;", "onException", "LJavaIoIOException;", "LOkhttp3InternalCacheDiskLruCache_Editor;", "newSinkWithInt:" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_Editor_1 = { "", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_Editor_1;
}

@end

void Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor_1 *self, Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  JreStrongAssign(&self->this$0_, outer$);
  Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(self, delegate);
}

Okhttp3InternalCacheDiskLruCache_Editor_1 *new_Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_Editor_1, initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_, outer$, delegate)
}

Okhttp3InternalCacheDiskLruCache_Editor_1 *create_Okhttp3InternalCacheDiskLruCache_Editor_1_initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_(Okhttp3InternalCacheDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_Editor_1, initWithOkhttp3InternalCacheDiskLruCache_Editor_withOkioSink_, outer$, delegate)
}

@implementation Okhttp3InternalCacheDiskLruCache_Entry

- (instancetype)initWithOkhttp3InternalCacheDiskLruCache:(Okhttp3InternalCacheDiskLruCache *)outer$
                                            withNSString:(NSString *)key {
  Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings {
  Okhttp3InternalCacheDiskLruCache_Entry_setLengthsWithNSStringArray_(self, strings);
}

- (void)writeLengthsWithOkioBufferedSink:(id<OkioBufferedSink>)writer {
  {
    IOSLongArray *a__ = lengths_;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong length = *b__++;
      [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(writer)) writeByteWithInt:' '])) writeDecimalLongWithLong:length];
    }
  }
}

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings {
  return Okhttp3InternalCacheDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
}

- (Okhttp3InternalCacheDiskLruCache_Snapshot *)snapshot {
  if (!JavaLangThread_holdsLockWithId_(this$0_)) @throw create_JavaLangAssertionError_init();
  IOSObjectArray *sources = [IOSObjectArray arrayWithLength:this$0_->valueCount_ type:OkioSource_class_()];
  IOSLongArray *lengths = [((IOSLongArray *) nil_chk(self->lengths_)) java_clone];
  @try {
    for (jint i = 0; i < this$0_->valueCount_; i++) {
      IOSObjectArray_Set(sources, i, [((id<Okhttp3InternalIoFileSystem>) nil_chk(this$0_->fileSystem_)) sourceWithJavaIoFile:IOSObjectArray_Get(nil_chk(cleanFiles_), i)]);
    }
    return create_Okhttp3InternalCacheDiskLruCache_Snapshot_initWithOkhttp3InternalCacheDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(this$0_, key_, sequenceNumber_, sources, lengths);
  }
  @catch (JavaIoFileNotFoundException *e) {
    for (jint i = 0; i < this$0_->valueCount_; i++) {
      if (IOSObjectArray_Get(sources, i) != nil) {
        Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(IOSObjectArray_Get(sources, i));
      }
      else {
        break;
      }
    }
    @try {
      Okhttp3InternalCacheDiskLruCache_removeEntryWithOkhttp3InternalCacheDiskLruCache_Entry_(this$0_, self);
    }
    @catch (JavaIoIOException *ignored) {
    }
    return nil;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(lengths_);
  RELEASE_(cleanFiles_);
  RELEASE_(dirtyFiles_);
  RELEASE_(currentEditor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 3, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x2, 6, 2, 3, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCacheDiskLruCache_Snapshot;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCacheDiskLruCache:withNSString:);
  methods[1].selector = @selector(setLengthsWithNSStringArray:);
  methods[2].selector = @selector(writeLengthsWithOkioBufferedSink:);
  methods[3].selector = @selector(invalidLengthsWithNSStringArray:);
  methods[4].selector = @selector(snapshot);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCacheDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lengths_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cleanFiles_", "[LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dirtyFiles_", "[LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentEditor_", "LOkhttp3InternalCacheDiskLruCache_Editor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sequenceNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setLengths", "[LNSString;", "LJavaIoIOException;", "writeLengths", "LOkioBufferedSink;", "invalidLengths", "LOkhttp3InternalCacheDiskLruCache;" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheDiskLruCache_Entry = { "Entry", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x12, 5, 8, 7, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheDiskLruCache_Entry;
}

@end

void Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache_Entry *self, Okhttp3InternalCacheDiskLruCache *outer$, NSString *key) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssignAndConsume(&self->lengths_, [IOSLongArray newArrayWithLength:outer$->valueCount_]);
  JreStrongAssignAndConsume(&self->cleanFiles_, [IOSObjectArray newArrayWithLength:outer$->valueCount_ type:JavaIoFile_class_()]);
  JreStrongAssignAndConsume(&self->dirtyFiles_, [IOSObjectArray newArrayWithLength:outer$->valueCount_ type:JavaIoFile_class_()]);
  JavaLangStringBuilder *fileBuilder = [create_JavaLangStringBuilder_initWithNSString_(key) appendWithChar:'.'];
  jint truncateTo = [((JavaLangStringBuilder *) nil_chk(fileBuilder)) java_length];
  for (jint i = 0; i < outer$->valueCount_; i++) {
    [fileBuilder appendWithInt:i];
    IOSObjectArray_SetAndConsume(self->cleanFiles_, i, new_JavaIoFile_initWithJavaIoFile_withNSString_(outer$->directory_, [fileBuilder description]));
    [fileBuilder appendWithNSString:@".tmp"];
    IOSObjectArray_SetAndConsume(self->dirtyFiles_, i, new_JavaIoFile_initWithJavaIoFile_withNSString_(outer$->directory_, [fileBuilder description]));
    [fileBuilder setLengthWithInt:truncateTo];
  }
}

Okhttp3InternalCacheDiskLruCache_Entry *new_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheDiskLruCache_Entry, initWithOkhttp3InternalCacheDiskLruCache_withNSString_, outer$, key)
}

Okhttp3InternalCacheDiskLruCache_Entry *create_Okhttp3InternalCacheDiskLruCache_Entry_initWithOkhttp3InternalCacheDiskLruCache_withNSString_(Okhttp3InternalCacheDiskLruCache *outer$, NSString *key) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheDiskLruCache_Entry, initWithOkhttp3InternalCacheDiskLruCache_withNSString_, outer$, key)
}

void Okhttp3InternalCacheDiskLruCache_Entry_setLengthsWithNSStringArray_(Okhttp3InternalCacheDiskLruCache_Entry *self, IOSObjectArray *strings) {
  if (((IOSObjectArray *) nil_chk(strings))->size_ != self->this$0_->valueCount_) {
    @throw nil_chk(Okhttp3InternalCacheDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings));
  }
  @try {
    for (jint i = 0; i < strings->size_; i++) {
      *IOSLongArray_GetRef(nil_chk(self->lengths_), i) = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(strings, i));
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw nil_chk(Okhttp3InternalCacheDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings));
  }
}

JavaIoIOException *Okhttp3InternalCacheDiskLruCache_Entry_invalidLengthsWithNSStringArray_(Okhttp3InternalCacheDiskLruCache_Entry *self, IOSObjectArray *strings) {
  @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", JavaUtilArrays_toStringWithNSObjectArray_(strings)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheDiskLruCache_Entry)
