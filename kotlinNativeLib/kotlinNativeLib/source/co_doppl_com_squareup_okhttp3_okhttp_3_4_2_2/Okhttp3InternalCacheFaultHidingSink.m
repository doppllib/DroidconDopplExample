//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3InternalCacheFaultHidingSink.h"
#include "java/io/IOException.h"
#include "okio/Buffer.h"
#include "okio/ForwardingSink.h"
#include "okio/Sink.h"

@interface Okhttp3InternalCacheFaultHidingSink () {
 @public
  jboolean hasErrors_;
}

@end

@implementation Okhttp3InternalCacheFaultHidingSink

- (instancetype)initWithOkioSink:(id<OkioSink>)delegate {
  Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(self, delegate);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  if (hasErrors_) {
    [((OkioBuffer *) nil_chk(source)) skipWithLong:byteCount];
    return;
  }
  @try {
    [super writeWithOkioBuffer:source withLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    hasErrors_ = true;
    [self onExceptionWithJavaIoIOException:e];
  }
}

- (void)flush {
  if (hasErrors_) return;
  @try {
    [super flush];
  }
  @catch (JavaIoIOException *e) {
    hasErrors_ = true;
    [self onExceptionWithJavaIoIOException:e];
  }
}

- (void)close {
  if (hasErrors_) return;
  @try {
    [super close];
  }
  @catch (JavaIoIOException *e) {
    hasErrors_ = true;
    [self onExceptionWithJavaIoIOException:e];
  }
}

- (void)onExceptionWithJavaIoIOException:(JavaIoIOException *)e {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioSink:);
  methods[1].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(onExceptionWithJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hasErrors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSink;", "write", "LOkioBuffer;J", "LJavaIoIOException;", "onException" };
  static const J2ObjcClassInfo _Okhttp3InternalCacheFaultHidingSink = { "FaultHidingSink", "okhttp3.internal.cache", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalCacheFaultHidingSink;
}

@end

void Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(Okhttp3InternalCacheFaultHidingSink *self, id<OkioSink> delegate) {
  OkioForwardingSink_initWithOkioSink_(self, delegate);
}

Okhttp3InternalCacheFaultHidingSink *new_Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(id<OkioSink> delegate) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCacheFaultHidingSink, initWithOkioSink_, delegate)
}

Okhttp3InternalCacheFaultHidingSink *create_Okhttp3InternalCacheFaultHidingSink_initWithOkioSink_(id<OkioSink> delegate) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCacheFaultHidingSink, initWithOkioSink_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCacheFaultHidingSink)
