//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "Okhttp3MediaType.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface Okhttp3MediaType () {
 @public
  NSString *mediaType_;
  NSString *type_;
  NSString *subtype_;
  NSString *charset_;
}

- (instancetype)initWithNSString:(NSString *)mediaType
                    withNSString:(NSString *)type
                    withNSString:(NSString *)subtype
                    withNSString:(NSString *)charset;

@end

J2OBJC_FIELD_SETTER(Okhttp3MediaType, mediaType_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3MediaType, type_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3MediaType, subtype_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3MediaType, charset_, NSString *)

inline NSString *Okhttp3MediaType_get_TOKEN();
static NSString *Okhttp3MediaType_TOKEN = @"([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MediaType, TOKEN, NSString *)

inline NSString *Okhttp3MediaType_get_QUOTED();
static NSString *Okhttp3MediaType_QUOTED = @"\"([^\"]*)\"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MediaType, QUOTED, NSString *)

inline JavaUtilRegexPattern *Okhttp3MediaType_get_TYPE_SUBTYPE();
static JavaUtilRegexPattern *Okhttp3MediaType_TYPE_SUBTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MediaType, TYPE_SUBTYPE, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *Okhttp3MediaType_get_PARAMETER();
static JavaUtilRegexPattern *Okhttp3MediaType_PARAMETER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3MediaType, PARAMETER, JavaUtilRegexPattern *)

__attribute__((unused)) static void Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(Okhttp3MediaType *self, NSString *mediaType, NSString *type, NSString *subtype, NSString *charset);

__attribute__((unused)) static Okhttp3MediaType *new_Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3MediaType *create_Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset);

J2OBJC_INITIALIZED_DEFN(Okhttp3MediaType)

@implementation Okhttp3MediaType

- (instancetype)initWithNSString:(NSString *)mediaType
                    withNSString:(NSString *)type
                    withNSString:(NSString *)subtype
                    withNSString:(NSString *)charset {
  Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(self, mediaType, type, subtype, charset);
  return self;
}

+ (Okhttp3MediaType *)parseWithNSString:(NSString *)string {
  return Okhttp3MediaType_parseWithNSString_(string);
}

- (NSString *)type {
  return type_;
}

- (NSString *)subtype {
  return subtype_;
}

- (JavaNioCharsetCharset *)charset {
  return charset_ != nil ? JavaNioCharsetCharset_forNameWithNSString_(charset_) : nil;
}

- (JavaNioCharsetCharset *)charsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)defaultValue {
  return charset_ != nil ? JavaNioCharsetCharset_forNameWithNSString_(charset_) : defaultValue;
}

- (NSString *)description {
  return mediaType_;
}

- (jboolean)isEqual:(id)o {
  return [o isKindOfClass:[Okhttp3MediaType class]] && [((NSString *) nil_chk(((Okhttp3MediaType *) nil_chk(((Okhttp3MediaType *) cast_chk(o, [Okhttp3MediaType class]))))->mediaType_)) isEqual:mediaType_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(mediaType_)) hash]);
}

- (void)dealloc {
  RELEASE_(mediaType_);
  RELEASE_(type_);
  RELEASE_(subtype_);
  RELEASE_(charset_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharset;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharset;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(type);
  methods[3].selector = @selector(subtype);
  methods[4].selector = @selector(charset);
  methods[5].selector = @selector(charsetWithJavaNioCharsetCharset:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOKEN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "QUOTED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "TYPE_SUBTYPE", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "PARAMETER", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "mediaType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subtype_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "charset_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LNSString;", "parse", "LNSString;", "charset", "LJavaNioCharsetCharset;", "toString", "equals", "LNSObject;", "hashCode", &Okhttp3MediaType_TOKEN, &Okhttp3MediaType_QUOTED, &Okhttp3MediaType_TYPE_SUBTYPE, &Okhttp3MediaType_PARAMETER };
  static const J2ObjcClassInfo _Okhttp3MediaType = { "MediaType", "okhttp3", ptrTable, methods, fields, 7, 0x11, 9, 8, -1, -1, -1, -1, -1 };
  return &_Okhttp3MediaType;
}

+ (void)initialize {
  if (self == [Okhttp3MediaType class]) {
    JreStrongAssign(&Okhttp3MediaType_TYPE_SUBTYPE, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C$", Okhttp3MediaType_TOKEN, '/', Okhttp3MediaType_TOKEN)));
    JreStrongAssign(&Okhttp3MediaType_PARAMETER, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$C$$", @";\\s*(?:", Okhttp3MediaType_TOKEN, @"=(?:", Okhttp3MediaType_TOKEN, '|', Okhttp3MediaType_QUOTED, @"))?")));
    J2OBJC_SET_INITIALIZED(Okhttp3MediaType)
  }
}

@end

void Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(Okhttp3MediaType *self, NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  NSObject_init(self);
  JreStrongAssign(&self->mediaType_, mediaType);
  JreStrongAssign(&self->type_, type);
  JreStrongAssign(&self->subtype_, subtype);
  JreStrongAssign(&self->charset_, charset);
}

Okhttp3MediaType *new_Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  J2OBJC_NEW_IMPL(Okhttp3MediaType, initWithNSString_withNSString_withNSString_withNSString_, mediaType, type, subtype, charset)
}

Okhttp3MediaType *create_Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  J2OBJC_CREATE_IMPL(Okhttp3MediaType, initWithNSString_withNSString_withNSString_withNSString_, mediaType, type, subtype, charset)
}

Okhttp3MediaType *Okhttp3MediaType_parseWithNSString_(NSString *string) {
  Okhttp3MediaType_initialize();
  JavaUtilRegexMatcher *typeSubtype = [((JavaUtilRegexPattern *) nil_chk(Okhttp3MediaType_TYPE_SUBTYPE)) matcherWithJavaLangCharSequence:string];
  if (![((JavaUtilRegexMatcher *) nil_chk(typeSubtype)) lookingAt]) return nil;
  NSString *type = [((NSString *) nil_chk([typeSubtype groupWithInt:1])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *subtype = [((NSString *) nil_chk([typeSubtype groupWithInt:2])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *charset = nil;
  JavaUtilRegexMatcher *parameter = [((JavaUtilRegexPattern *) nil_chk(Okhttp3MediaType_PARAMETER)) matcherWithJavaLangCharSequence:string];
  for (jint s = [typeSubtype end]; s < [((NSString *) nil_chk(string)) java_length]; s = [parameter end]) {
    [((JavaUtilRegexMatcher *) nil_chk(parameter)) regionWithInt:s withInt:[string java_length]];
    if (![parameter lookingAt]) return nil;
    NSString *name = [parameter groupWithInt:1];
    if (name == nil || ![name java_equalsIgnoreCase:@"charset"]) continue;
    NSString *charsetParameter = [parameter groupWithInt:2] != nil ? [parameter groupWithInt:2] : [parameter groupWithInt:3];
    if (charset != nil && ![charsetParameter java_equalsIgnoreCase:charset]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Multiple different charsets: ", string));
    }
    charset = charsetParameter;
  }
  return create_Okhttp3MediaType_initWithNSString_withNSString_withNSString_withNSString_(string, type, subtype, charset);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3MediaType)
