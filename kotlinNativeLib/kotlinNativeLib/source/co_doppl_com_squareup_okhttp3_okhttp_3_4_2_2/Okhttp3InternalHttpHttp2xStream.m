//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3Headers.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalConnectionStreamAllocation.h"
#include "Okhttp3InternalFramedErrorCode.h"
#include "Okhttp3InternalFramedFramedConnection.h"
#include "Okhttp3InternalFramedFramedStream.h"
#include "Okhttp3InternalFramedHeader.h"
#include "Okhttp3InternalHttpHttp2xStream.h"
#include "Okhttp3InternalHttpHttpMethod.h"
#include "Okhttp3InternalHttpRealResponseBody.h"
#include "Okhttp3InternalHttpRequestLine.h"
#include "Okhttp3InternalHttpStatusLine.h"
#include "Okhttp3InternalInternal.h"
#include "Okhttp3InternalUtil.h"
#include "Okhttp3OkHttpClient.h"
#include "Okhttp3Protocol.h"
#include "Okhttp3Request.h"
#include "Okhttp3Response.h"
#include "Okhttp3ResponseBody.h"
#include "java/lang/StringBuilder.h"
#include "java/net/ProtocolException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalHttpHttp2xStream () {
 @public
  Okhttp3OkHttpClient *client_;
  Okhttp3InternalConnectionStreamAllocation *streamAllocation_;
  Okhttp3InternalFramedFramedConnection *framedConnection_;
  Okhttp3InternalFramedFramedStream *stream_;
}

+ (NSString *)joinOnNullWithNSString:(NSString *)first
                        withNSString:(NSString *)second;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttpHttp2xStream, client_, Okhttp3OkHttpClient *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpHttp2xStream, streamAllocation_, Okhttp3InternalConnectionStreamAllocation *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpHttp2xStream, framedConnection_, Okhttp3InternalFramedFramedConnection *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttpHttp2xStream, stream_, Okhttp3InternalFramedFramedStream *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_CONNECTION();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_CONNECTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, CONNECTION, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_HOST();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_HOST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, HOST, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_KEEP_ALIVE();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, KEEP_ALIVE, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_PROXY_CONNECTION();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, PROXY_CONNECTION, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_TRANSFER_ENCODING();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, TRANSFER_ENCODING, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_TE();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_TE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, TE, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_ENCODING();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, ENCODING, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttpHttp2xStream_get_UPGRADE();
static OkioByteString *Okhttp3InternalHttpHttp2xStream_UPGRADE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, UPGRADE, OkioByteString *)

inline id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_get_SPDY_3_SKIPPED_REQUEST_HEADERS();
static id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_REQUEST_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, SPDY_3_SKIPPED_REQUEST_HEADERS, id<JavaUtilList>)

inline id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_get_SPDY_3_SKIPPED_RESPONSE_HEADERS();
static id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_RESPONSE_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, SPDY_3_SKIPPED_RESPONSE_HEADERS, id<JavaUtilList>)

inline id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_get_HTTP_2_SKIPPED_REQUEST_HEADERS();
static id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_REQUEST_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, HTTP_2_SKIPPED_REQUEST_HEADERS, id<JavaUtilList>)

inline id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_get_HTTP_2_SKIPPED_RESPONSE_HEADERS();
static id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_RESPONSE_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttpHttp2xStream, HTTP_2_SKIPPED_RESPONSE_HEADERS, id<JavaUtilList>)

__attribute__((unused)) static NSString *Okhttp3InternalHttpHttp2xStream_joinOnNullWithNSString_withNSString_(NSString *first, NSString *second);

@interface Okhttp3InternalHttpHttp2xStream_StreamFinishingSource () {
 @public
  Okhttp3InternalHttpHttp2xStream *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttpHttp2xStream)

@implementation Okhttp3InternalHttpHttp2xStream

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation
  withOkhttp3InternalFramedFramedConnection:(Okhttp3InternalFramedFramedConnection *)framedConnection {
  Okhttp3InternalHttpHttp2xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_(self, client, streamAllocation, framedConnection);
  return self;
}

- (id<OkioSink>)createRequestBodyWithOkhttp3Request:(Okhttp3Request *)request
                                           withLong:(jlong)contentLength {
  return [((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) getSink];
}

- (void)writeRequestHeadersWithOkhttp3Request:(Okhttp3Request *)request {
  if (stream_ != nil) return;
  jboolean permitsRequestBody = Okhttp3InternalHttpHttpMethod_permitsRequestBodyWithNSString_([((Okhttp3Request *) nil_chk(request)) method]);
  id<JavaUtilList> requestHeaders = [((Okhttp3InternalFramedFramedConnection *) nil_chk(framedConnection_)) getProtocol] == JreLoadEnum(Okhttp3Protocol, HTTP_2) ? Okhttp3InternalHttpHttp2xStream_http2HeadersListWithOkhttp3Request_(request) : Okhttp3InternalHttpHttp2xStream_spdy3HeadersListWithOkhttp3Request_(request);
  jboolean hasResponseBody = true;
  JreStrongAssign(&stream_, [framedConnection_ newStreamWithJavaUtilList:requestHeaders withBoolean:permitsRequestBody withBoolean:hasResponseBody]);
  [((OkioTimeout *) nil_chk([((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) readTimeout])) timeoutWithLong:[((Okhttp3OkHttpClient *) nil_chk(client_)) readTimeoutMillis] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((OkioTimeout *) nil_chk([((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) writeTimeout])) timeoutWithLong:[client_ writeTimeoutMillis] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)finishRequest {
  [((id<OkioSink>) nil_chk([((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) getSink])) close];
}

- (Okhttp3Response_Builder *)readResponseHeaders {
  return [((Okhttp3InternalFramedFramedConnection *) nil_chk(framedConnection_)) getProtocol] == JreLoadEnum(Okhttp3Protocol, HTTP_2) ? Okhttp3InternalHttpHttp2xStream_readHttp2HeadersListWithJavaUtilList_([((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) getResponseHeaders]) : Okhttp3InternalHttpHttp2xStream_readSpdy3HeadersListWithJavaUtilList_([((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) getResponseHeaders]);
}

+ (id<JavaUtilList>)spdy3HeadersListWithOkhttp3Request:(Okhttp3Request *)request {
  return Okhttp3InternalHttpHttp2xStream_spdy3HeadersListWithOkhttp3Request_(request);
}

+ (NSString *)joinOnNullWithNSString:(NSString *)first
                        withNSString:(NSString *)second {
  return Okhttp3InternalHttpHttp2xStream_joinOnNullWithNSString_withNSString_(first, second);
}

+ (id<JavaUtilList>)http2HeadersListWithOkhttp3Request:(Okhttp3Request *)request {
  return Okhttp3InternalHttpHttp2xStream_http2HeadersListWithOkhttp3Request_(request);
}

+ (Okhttp3Response_Builder *)readSpdy3HeadersListWithJavaUtilList:(id<JavaUtilList>)headerBlock {
  return Okhttp3InternalHttpHttp2xStream_readSpdy3HeadersListWithJavaUtilList_(headerBlock);
}

+ (Okhttp3Response_Builder *)readHttp2HeadersListWithJavaUtilList:(id<JavaUtilList>)headerBlock {
  return Okhttp3InternalHttpHttp2xStream_readHttp2HeadersListWithJavaUtilList_(headerBlock);
}

- (Okhttp3ResponseBody *)openResponseBodyWithOkhttp3Response:(Okhttp3Response *)response {
  id<OkioSource> source = create_Okhttp3InternalHttpHttp2xStream_StreamFinishingSource_initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_(self, [((Okhttp3InternalFramedFramedStream *) nil_chk(stream_)) getSource]);
  return create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_([((Okhttp3Response *) nil_chk(response)) headers], OkioOkio_bufferWithOkioSource_(source));
}

- (void)cancel {
  if (stream_ != nil) [stream_ closeLaterWithOkhttp3InternalFramedErrorCode:JreLoadEnum(Okhttp3InternalFramedErrorCode, CANCEL)];
}

- (void)dealloc {
  RELEASE_(client_);
  RELEASE_(streamAllocation_);
  RELEASE_(framedConnection_);
  RELEASE_(stream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 6, 4, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 4, -1, 7, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x9, 11, 12, 5, 13, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x9, 14, 12, 5, 13, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x1, 15, 16, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3OkHttpClient:withOkhttp3InternalConnectionStreamAllocation:withOkhttp3InternalFramedFramedConnection:);
  methods[1].selector = @selector(createRequestBodyWithOkhttp3Request:withLong:);
  methods[2].selector = @selector(writeRequestHeadersWithOkhttp3Request:);
  methods[3].selector = @selector(finishRequest);
  methods[4].selector = @selector(readResponseHeaders);
  methods[5].selector = @selector(spdy3HeadersListWithOkhttp3Request:);
  methods[6].selector = @selector(joinOnNullWithNSString:withNSString:);
  methods[7].selector = @selector(http2HeadersListWithOkhttp3Request:);
  methods[8].selector = @selector(readSpdy3HeadersListWithJavaUtilList:);
  methods[9].selector = @selector(readHttp2HeadersListWithJavaUtilList:);
  methods[10].selector = @selector(openResponseBodyWithOkhttp3Response:);
  methods[11].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONNECTION", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "HOST", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "KEEP_ALIVE", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "PROXY_CONNECTION", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "TRANSFER_ENCODING", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "TE", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ENCODING", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "UPGRADE", "LOkioByteString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "SPDY_3_SKIPPED_REQUEST_HEADERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 25, 26, -1 },
    { "SPDY_3_SKIPPED_RESPONSE_HEADERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 27, 26, -1 },
    { "HTTP_2_SKIPPED_REQUEST_HEADERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 28, 26, -1 },
    { "HTTP_2_SKIPPED_RESPONSE_HEADERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 29, 26, -1 },
    { "client_", "LOkhttp3OkHttpClient;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "streamAllocation_", "LOkhttp3InternalConnectionStreamAllocation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "framedConnection_", "LOkhttp3InternalFramedFramedConnection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stream_", "LOkhttp3InternalFramedFramedStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3OkHttpClient;LOkhttp3InternalConnectionStreamAllocation;LOkhttp3InternalFramedFramedConnection;", "createRequestBody", "LOkhttp3Request;J", "writeRequestHeaders", "LOkhttp3Request;", "LJavaIoIOException;", "spdy3HeadersList", "(Lokhttp3/Request;)Ljava/util/List<Lokhttp3/internal/framed/Header;>;", "joinOnNull", "LNSString;LNSString;", "http2HeadersList", "readSpdy3HeadersList", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/internal/framed/Header;>;)Lokhttp3/Response$Builder;", "readHttp2HeadersList", "openResponseBody", "LOkhttp3Response;", &Okhttp3InternalHttpHttp2xStream_CONNECTION, &Okhttp3InternalHttpHttp2xStream_HOST, &Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, &Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, &Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING, &Okhttp3InternalHttpHttp2xStream_TE, &Okhttp3InternalHttpHttp2xStream_ENCODING, &Okhttp3InternalHttpHttp2xStream_UPGRADE, &Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_REQUEST_HEADERS, "Ljava/util/List<Lokio/ByteString;>;", &Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_RESPONSE_HEADERS, &Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_REQUEST_HEADERS, &Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_RESPONSE_HEADERS, "LOkhttp3InternalHttpHttp2xStream_StreamFinishingSource;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpHttp2xStream = { "Http2xStream", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x11, 12, 16, -1, 30, -1, -1, -1 };
  return &_Okhttp3InternalHttpHttp2xStream;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttpHttp2xStream class]) {
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_CONNECTION, OkioByteString_encodeUtf8WithNSString_(@"connection"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_HOST, OkioByteString_encodeUtf8WithNSString_(@"host"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, OkioByteString_encodeUtf8WithNSString_(@"keep-alive"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, OkioByteString_encodeUtf8WithNSString_(@"proxy-connection"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING, OkioByteString_encodeUtf8WithNSString_(@"transfer-encoding"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_TE, OkioByteString_encodeUtf8WithNSString_(@"te"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_ENCODING, OkioByteString_encodeUtf8WithNSString_(@"encoding"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_UPGRADE, OkioByteString_encodeUtf8WithNSString_(@"upgrade"));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_REQUEST_HEADERS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ Okhttp3InternalHttpHttp2xStream_CONNECTION, Okhttp3InternalHttpHttp2xStream_HOST, Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING, JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_AUTHORITY), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_HOST), JreLoadStatic(Okhttp3InternalFramedHeader, VERSION) } count:11 type:OkioByteString_class_()]));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_RESPONSE_HEADERS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ Okhttp3InternalHttpHttp2xStream_CONNECTION, Okhttp3InternalHttpHttp2xStream_HOST, Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING } count:5 type:OkioByteString_class_()]));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_REQUEST_HEADERS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ Okhttp3InternalHttpHttp2xStream_CONNECTION, Okhttp3InternalHttpHttp2xStream_HOST, Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, Okhttp3InternalHttpHttp2xStream_TE, Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING, Okhttp3InternalHttpHttp2xStream_ENCODING, Okhttp3InternalHttpHttp2xStream_UPGRADE, JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_AUTHORITY), JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_HOST), JreLoadStatic(Okhttp3InternalFramedHeader, VERSION) } count:14 type:OkioByteString_class_()]));
    JreStrongAssign(&Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_RESPONSE_HEADERS, Okhttp3InternalUtil_immutableListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ Okhttp3InternalHttpHttp2xStream_CONNECTION, Okhttp3InternalHttpHttp2xStream_HOST, Okhttp3InternalHttpHttp2xStream_KEEP_ALIVE, Okhttp3InternalHttpHttp2xStream_PROXY_CONNECTION, Okhttp3InternalHttpHttp2xStream_TE, Okhttp3InternalHttpHttp2xStream_TRANSFER_ENCODING, Okhttp3InternalHttpHttp2xStream_ENCODING, Okhttp3InternalHttpHttp2xStream_UPGRADE } count:8 type:OkioByteString_class_()]));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttpHttp2xStream)
  }
}

@end

void Okhttp3InternalHttpHttp2xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_(Okhttp3InternalHttpHttp2xStream *self, Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalFramedFramedConnection *framedConnection) {
  NSObject_init(self);
  JreStrongAssign(&self->client_, client);
  JreStrongAssign(&self->streamAllocation_, streamAllocation);
  JreStrongAssign(&self->framedConnection_, framedConnection);
}

Okhttp3InternalHttpHttp2xStream *new_Okhttp3InternalHttpHttp2xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalFramedFramedConnection *framedConnection) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpHttp2xStream, initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_, client, streamAllocation, framedConnection)
}

Okhttp3InternalHttpHttp2xStream *create_Okhttp3InternalHttpHttp2xStream_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalFramedFramedConnection *framedConnection) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpHttp2xStream, initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalFramedFramedConnection_, client, streamAllocation, framedConnection)
}

id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_spdy3HeadersListWithOkhttp3Request_(Okhttp3Request *request) {
  Okhttp3InternalHttpHttp2xStream_initialize();
  Okhttp3Headers *headers = [((Okhttp3Request *) nil_chk(request)) headers];
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_([((Okhttp3Headers *) nil_chk(headers)) size] + 5);
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), [request method])];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), Okhttp3InternalHttpRequestLine_requestPathWithOkhttp3HttpUrl_([request url]))];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, VERSION), @"HTTP/1.1")];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_HOST), Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_([request url], false))];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), [((Okhttp3HttpUrl *) nil_chk([request url])) scheme])];
  id<JavaUtilSet> names = create_JavaUtilLinkedHashSet_init();
  for (jint i = 0, size = [headers size]; i < size; i++) {
    OkioByteString *name = OkioByteString_encodeUtf8WithNSString_([((NSString *) nil_chk([headers nameWithInt:i])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
    if ([((id<JavaUtilList>) nil_chk(Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_REQUEST_HEADERS)) containsWithId:name]) continue;
    NSString *value = [headers valueWithInt:i];
    if ([names addWithId:name]) {
      [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(name, value)];
      continue;
    }
    for (jint j = 0; j < [result size]; j++) {
      if ([((OkioByteString *) nil_chk(((Okhttp3InternalFramedHeader *) nil_chk([result getWithInt:j]))->name_)) isEqual:name]) {
        NSString *concatenated = Okhttp3InternalHttpHttp2xStream_joinOnNullWithNSString_withNSString_([((OkioByteString *) nil_chk(((Okhttp3InternalFramedHeader *) nil_chk([result getWithInt:j]))->value_)) utf8], value);
        [result setWithInt:j withId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(name, concatenated)];
        break;
      }
    }
  }
  return result;
}

NSString *Okhttp3InternalHttpHttp2xStream_joinOnNullWithNSString_withNSString_(NSString *first, NSString *second) {
  Okhttp3InternalHttpHttp2xStream_initialize();
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(first) appendWithChar:0x0000])) appendWithNSString:second])) description];
}

id<JavaUtilList> Okhttp3InternalHttpHttp2xStream_http2HeadersListWithOkhttp3Request_(Okhttp3Request *request) {
  Okhttp3InternalHttpHttp2xStream_initialize();
  Okhttp3Headers *headers = [((Okhttp3Request *) nil_chk(request)) headers];
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_([((Okhttp3Headers *) nil_chk(headers)) size] + 4);
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_METHOD), [request method])];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_PATH), Okhttp3InternalHttpRequestLine_requestPathWithOkhttp3HttpUrl_([request url]))];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_AUTHORITY), Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_([request url], false))];
  [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(JreLoadStatic(Okhttp3InternalFramedHeader, TARGET_SCHEME), [((Okhttp3HttpUrl *) nil_chk([request url])) scheme])];
  for (jint i = 0, size = [headers size]; i < size; i++) {
    OkioByteString *name = OkioByteString_encodeUtf8WithNSString_([((NSString *) nil_chk([headers nameWithInt:i])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
    if (![((id<JavaUtilList>) nil_chk(Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_REQUEST_HEADERS)) containsWithId:name]) {
      [result addWithId:create_Okhttp3InternalFramedHeader_initWithOkioByteString_withNSString_(name, [headers valueWithInt:i])];
    }
  }
  return result;
}

Okhttp3Response_Builder *Okhttp3InternalHttpHttp2xStream_readSpdy3HeadersListWithJavaUtilList_(id<JavaUtilList> headerBlock) {
  Okhttp3InternalHttpHttp2xStream_initialize();
  NSString *status = nil;
  NSString *version_ = @"HTTP/1.1";
  Okhttp3Headers_Builder *headersBuilder = create_Okhttp3Headers_Builder_init();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(headerBlock)) size]; i < size; i++) {
    OkioByteString *name = ((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->name_;
    NSString *values = [((OkioByteString *) nil_chk(((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->value_)) utf8];
    for (jint start = 0; start < [((NSString *) nil_chk(values)) java_length]; ) {
      jint end = [values java_indexOf:0x0000 fromIndex:start];
      if (end == -1) {
        end = [values java_length];
      }
      NSString *value = [values java_substring:start endIndex:end];
      if ([((OkioByteString *) nil_chk(name)) isEqual:JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS)]) {
        status = value;
      }
      else if ([name isEqual:JreLoadStatic(Okhttp3InternalFramedHeader, VERSION)]) {
        version_ = value;
      }
      else if (![((id<JavaUtilList>) nil_chk(Okhttp3InternalHttpHttp2xStream_SPDY_3_SKIPPED_RESPONSE_HEADERS)) containsWithId:name]) {
        [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) addLenientWithOkhttp3Headers_Builder:headersBuilder withNSString:[name utf8] withNSString:value];
      }
      start = end + 1;
    }
  }
  if (status == nil) @throw create_JavaNetProtocolException_initWithNSString_(@"Expected ':status' header not present");
  Okhttp3InternalHttpStatusLine *statusLine = Okhttp3InternalHttpStatusLine_parseWithNSString_(JreStrcat("$C$", version_, ' ', status));
  return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() protocolWithOkhttp3Protocol:JreLoadEnum(Okhttp3Protocol, SPDY_3)])) codeWithInt:((Okhttp3InternalHttpStatusLine *) nil_chk(statusLine))->code_])) messageWithNSString:statusLine->message_])) headersWithOkhttp3Headers:[headersBuilder build]];
}

Okhttp3Response_Builder *Okhttp3InternalHttpHttp2xStream_readHttp2HeadersListWithJavaUtilList_(id<JavaUtilList> headerBlock) {
  Okhttp3InternalHttpHttp2xStream_initialize();
  NSString *status = nil;
  Okhttp3Headers_Builder *headersBuilder = create_Okhttp3Headers_Builder_init();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(headerBlock)) size]; i < size; i++) {
    OkioByteString *name = ((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->name_;
    NSString *value = [((OkioByteString *) nil_chk(((Okhttp3InternalFramedHeader *) nil_chk([headerBlock getWithInt:i]))->value_)) utf8];
    if ([((OkioByteString *) nil_chk(name)) isEqual:JreLoadStatic(Okhttp3InternalFramedHeader, RESPONSE_STATUS)]) {
      status = value;
    }
    else if (![((id<JavaUtilList>) nil_chk(Okhttp3InternalHttpHttp2xStream_HTTP_2_SKIPPED_RESPONSE_HEADERS)) containsWithId:name]) {
      [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) addLenientWithOkhttp3Headers_Builder:headersBuilder withNSString:[name utf8] withNSString:value];
    }
  }
  if (status == nil) @throw create_JavaNetProtocolException_initWithNSString_(@"Expected ':status' header not present");
  Okhttp3InternalHttpStatusLine *statusLine = Okhttp3InternalHttpStatusLine_parseWithNSString_(JreStrcat("$$", @"HTTP/1.1 ", status));
  return [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() protocolWithOkhttp3Protocol:JreLoadEnum(Okhttp3Protocol, HTTP_2)])) codeWithInt:((Okhttp3InternalHttpStatusLine *) nil_chk(statusLine))->code_])) messageWithNSString:statusLine->message_])) headersWithOkhttp3Headers:[headersBuilder build]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpHttp2xStream)

@implementation Okhttp3InternalHttpHttp2xStream_StreamFinishingSource

- (instancetype)initWithOkhttp3InternalHttpHttp2xStream:(Okhttp3InternalHttpHttp2xStream *)outer$
                                         withOkioSource:(id<OkioSource>)delegate {
  Okhttp3InternalHttpHttp2xStream_StreamFinishingSource_initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_(self, outer$, delegate);
  return self;
}

- (void)close {
  [((Okhttp3InternalConnectionStreamAllocation *) nil_chk(this$0_->streamAllocation_)) streamFinishedWithBoolean:false withOkhttp3InternalHttpHttpStream:this$0_];
  [super close];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttpHttp2xStream:withOkioSource:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttpHttp2xStream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "LJavaIoIOException;", "LOkhttp3InternalHttpHttp2xStream;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpHttp2xStream_StreamFinishingSource = { "StreamFinishingSource", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x0, 2, 1, 2, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttpHttp2xStream_StreamFinishingSource;
}

@end

void Okhttp3InternalHttpHttp2xStream_StreamFinishingSource_initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_(Okhttp3InternalHttpHttp2xStream_StreamFinishingSource *self, Okhttp3InternalHttpHttp2xStream *outer$, id<OkioSource> delegate) {
  JreStrongAssign(&self->this$0_, outer$);
  OkioForwardingSource_initWithOkioSource_(self, delegate);
}

Okhttp3InternalHttpHttp2xStream_StreamFinishingSource *new_Okhttp3InternalHttpHttp2xStream_StreamFinishingSource_initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_(Okhttp3InternalHttpHttp2xStream *outer$, id<OkioSource> delegate) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpHttp2xStream_StreamFinishingSource, initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_, outer$, delegate)
}

Okhttp3InternalHttpHttp2xStream_StreamFinishingSource *create_Okhttp3InternalHttpHttp2xStream_StreamFinishingSource_initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_(Okhttp3InternalHttpHttp2xStream *outer$, id<OkioSource> delegate) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpHttp2xStream_StreamFinishingSource, initWithOkhttp3InternalHttpHttp2xStream_withOkioSource_, outer$, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpHttp2xStream_StreamFinishingSource)
