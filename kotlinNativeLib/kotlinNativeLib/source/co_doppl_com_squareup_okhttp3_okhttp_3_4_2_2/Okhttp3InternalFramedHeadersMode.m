//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3InternalFramedHeadersMode.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void Okhttp3InternalFramedHeadersMode_initWithNSString_withInt_(Okhttp3InternalFramedHeadersMode *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalFramedHeadersMode)

Okhttp3InternalFramedHeadersMode *Okhttp3InternalFramedHeadersMode_values_[4];

@implementation Okhttp3InternalFramedHeadersMode

+ (Okhttp3InternalFramedHeadersMode *)SPDY_SYN_STREAM {
  return JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_SYN_STREAM);
}

+ (Okhttp3InternalFramedHeadersMode *)SPDY_REPLY {
  return JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_REPLY);
}

+ (Okhttp3InternalFramedHeadersMode *)SPDY_HEADERS {
  return JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_HEADERS);
}

+ (Okhttp3InternalFramedHeadersMode *)HTTP_20_HEADERS {
  return JreEnum(Okhttp3InternalFramedHeadersMode, HTTP_20_HEADERS);
}

- (jboolean)failIfStreamAbsent {
  return self == JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_REPLY) || self == JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_HEADERS);
}

- (jboolean)failIfStreamPresent {
  return self == JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_SYN_STREAM);
}

- (jboolean)failIfHeadersAbsent {
  return self == JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_HEADERS);
}

- (jboolean)failIfHeadersPresent {
  return self == JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_REPLY);
}

+ (IOSObjectArray *)values {
  return Okhttp3InternalFramedHeadersMode_values();
}

+ (Okhttp3InternalFramedHeadersMode *)valueOfWithNSString:(NSString *)name {
  return Okhttp3InternalFramedHeadersMode_valueOfWithNSString_(name);
}

- (Okhttp3InternalFramedHeadersMode_Enum)toNSEnum {
  return (Okhttp3InternalFramedHeadersMode_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOkhttp3InternalFramedHeadersMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalFramedHeadersMode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(failIfStreamAbsent);
  methods[1].selector = @selector(failIfStreamPresent);
  methods[2].selector = @selector(failIfHeadersAbsent);
  methods[3].selector = @selector(failIfHeadersPresent);
  methods[4].selector = @selector(values);
  methods[5].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPDY_SYN_STREAM", "LOkhttp3InternalFramedHeadersMode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SPDY_REPLY", "LOkhttp3InternalFramedHeadersMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SPDY_HEADERS", "LOkhttp3InternalFramedHeadersMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "HTTP_20_HEADERS", "LOkhttp3InternalFramedHeadersMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_SYN_STREAM), &JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_REPLY), &JreEnum(Okhttp3InternalFramedHeadersMode, SPDY_HEADERS), &JreEnum(Okhttp3InternalFramedHeadersMode, HTTP_20_HEADERS), "Ljava/lang/Enum<Lokhttp3/internal/framed/HeadersMode;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalFramedHeadersMode = { "HeadersMode", "okhttp3.internal.framed", ptrTable, methods, fields, 7, 0x4011, 6, 4, -1, -1, -1, 6, -1 };
  return &_Okhttp3InternalFramedHeadersMode;
}

+ (void)initialize {
  if (self == [Okhttp3InternalFramedHeadersMode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      (Okhttp3InternalFramedHeadersMode_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      Okhttp3InternalFramedHeadersMode_initWithNSString_withInt_(e, JreEnumConstantName(Okhttp3InternalFramedHeadersMode_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(Okhttp3InternalFramedHeadersMode)
  }
}

@end

void Okhttp3InternalFramedHeadersMode_initWithNSString_withInt_(Okhttp3InternalFramedHeadersMode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *Okhttp3InternalFramedHeadersMode_values() {
  Okhttp3InternalFramedHeadersMode_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3InternalFramedHeadersMode_values_ count:4 type:Okhttp3InternalFramedHeadersMode_class_()];
}

Okhttp3InternalFramedHeadersMode *Okhttp3InternalFramedHeadersMode_valueOfWithNSString_(NSString *name) {
  Okhttp3InternalFramedHeadersMode_initialize();
  for (int i = 0; i < 4; i++) {
    Okhttp3InternalFramedHeadersMode *e = Okhttp3InternalFramedHeadersMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3InternalFramedHeadersMode *Okhttp3InternalFramedHeadersMode_fromOrdinal(NSUInteger ordinal) {
  Okhttp3InternalFramedHeadersMode_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return Okhttp3InternalFramedHeadersMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalFramedHeadersMode)
