//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3HttpUrl")
#ifdef RESTRICT_Okhttp3HttpUrl
#define INCLUDE_ALL_Okhttp3HttpUrl 0
#else
#define INCLUDE_ALL_Okhttp3HttpUrl 1
#endif
#undef RESTRICT_Okhttp3HttpUrl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (Okhttp3HttpUrl_) && (INCLUDE_ALL_Okhttp3HttpUrl || defined(INCLUDE_Okhttp3HttpUrl))
#define Okhttp3HttpUrl_

@class JavaLangStringBuilder;
@class JavaNetURI;
@class JavaNetURL;
@class Okhttp3HttpUrl_Builder;
@class OkioBuffer;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface Okhttp3HttpUrl : NSObject

+ (NSString *)USERNAME_ENCODE_SET;

+ (NSString *)PASSWORD_ENCODE_SET;

+ (NSString *)PATH_SEGMENT_ENCODE_SET;

+ (NSString *)PATH_SEGMENT_ENCODE_SET_URI;

+ (NSString *)QUERY_ENCODE_SET;

+ (NSString *)QUERY_COMPONENT_ENCODE_SET;

+ (NSString *)QUERY_COMPONENT_ENCODE_SET_URI;

+ (NSString *)FORM_ENCODE_SET;

+ (NSString *)FRAGMENT_ENCODE_SET;

+ (NSString *)FRAGMENT_ENCODE_SET_URI;

#pragma mark Public

+ (jint)defaultPortWithNSString:(NSString *)scheme;

- (NSString *)encodedFragment;

- (NSString *)encodedPassword;

- (NSString *)encodedPath;

- (id<JavaUtilList>)encodedPathSegments;

- (NSString *)encodedQuery;

- (NSString *)encodedUsername;

- (jboolean)isEqual:(id)o;

- (NSString *)fragment;

+ (Okhttp3HttpUrl *)getWithJavaNetURI:(JavaNetURI *)uri;

+ (Okhttp3HttpUrl *)getWithJavaNetURL:(JavaNetURL *)url;

- (NSUInteger)hash;

- (NSString *)host;

- (jboolean)isHttps;

- (Okhttp3HttpUrl_Builder *)newBuilder OBJC_METHOD_FAMILY_NONE;

- (Okhttp3HttpUrl_Builder *)newBuilderWithNSString:(NSString *)link OBJC_METHOD_FAMILY_NONE;

+ (Okhttp3HttpUrl *)parseWithNSString:(NSString *)url;

- (NSString *)password;

- (id<JavaUtilList>)pathSegments;

- (jint)pathSize;

- (jint)port;

- (NSString *)query;

- (NSString *)queryParameterWithNSString:(NSString *)name;

- (NSString *)queryParameterNameWithInt:(jint)index;

- (id<JavaUtilSet>)queryParameterNames;

- (NSString *)queryParameterValueWithInt:(jint)index;

- (id<JavaUtilList>)queryParameterValuesWithNSString:(NSString *)name;

- (jint)querySize;

- (Okhttp3HttpUrl *)resolveWithNSString:(NSString *)link;

- (NSString *)scheme;

- (NSString *)description;

- (JavaNetURI *)uri;

- (JavaNetURL *)url;

- (NSString *)username;

#pragma mark Package-Private

+ (void)canonicalizeWithOkioBuffer:(OkioBuffer *)outArg
                      withNSString:(NSString *)input
                           withInt:(jint)pos
                           withInt:(jint)limit
                      withNSString:(NSString *)encodeSet
                       withBoolean:(jboolean)alreadyEncoded
                       withBoolean:(jboolean)strict
                       withBoolean:(jboolean)plusIsSpace
                       withBoolean:(jboolean)asciiOnly;

+ (NSString *)canonicalizeWithNSString:(NSString *)input
                               withInt:(jint)pos
                               withInt:(jint)limit
                          withNSString:(NSString *)encodeSet
                           withBoolean:(jboolean)alreadyEncoded
                           withBoolean:(jboolean)strict
                           withBoolean:(jboolean)plusIsSpace
                           withBoolean:(jboolean)asciiOnly;

+ (NSString *)canonicalizeWithNSString:(NSString *)input
                          withNSString:(NSString *)encodeSet
                           withBoolean:(jboolean)alreadyEncoded
                           withBoolean:(jboolean)strict
                           withBoolean:(jboolean)plusIsSpace
                           withBoolean:(jboolean)asciiOnly;

+ (jint)decodeHexDigitWithChar:(jchar)c;

+ (Okhttp3HttpUrl *)getCheckedWithNSString:(NSString *)url;

+ (void)namesAndValuesToQueryStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                            withJavaUtilList:(id<JavaUtilList>)namesAndValues;

+ (void)pathSegmentsToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                     withJavaUtilList:(id<JavaUtilList>)pathSegments;

+ (void)percentDecodeWithOkioBuffer:(OkioBuffer *)outArg
                       withNSString:(NSString *)encoded
                            withInt:(jint)pos
                            withInt:(jint)limit
                        withBoolean:(jboolean)plusIsSpace;

+ (NSString *)percentDecodeWithNSString:(NSString *)encoded
                            withBoolean:(jboolean)plusIsSpace;

+ (NSString *)percentDecodeWithNSString:(NSString *)encoded
                                withInt:(jint)pos
                                withInt:(jint)limit
                            withBoolean:(jboolean)plusIsSpace;

+ (jboolean)percentEncodedWithNSString:(NSString *)encoded
                               withInt:(jint)pos
                               withInt:(jint)limit;

+ (id<JavaUtilList>)queryStringToNamesAndValuesWithNSString:(NSString *)encodedQuery;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(Okhttp3HttpUrl)

inline NSString *Okhttp3HttpUrl_get_USERNAME_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_USERNAME_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, USERNAME_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_PASSWORD_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_PASSWORD_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, PASSWORD_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_PATH_SEGMENT_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, PATH_SEGMENT_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_PATH_SEGMENT_ENCODE_SET_URI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET_URI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, PATH_SEGMENT_ENCODE_SET_URI, NSString *)

inline NSString *Okhttp3HttpUrl_get_QUERY_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_QUERY_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, QUERY_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_QUERY_COMPONENT_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, QUERY_COMPONENT_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_QUERY_COMPONENT_ENCODE_SET_URI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET_URI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, QUERY_COMPONENT_ENCODE_SET_URI, NSString *)

inline NSString *Okhttp3HttpUrl_get_FORM_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_FORM_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, FORM_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_FRAGMENT_ENCODE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_FRAGMENT_ENCODE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, FRAGMENT_ENCODE_SET, NSString *)

inline NSString *Okhttp3HttpUrl_get_FRAGMENT_ENCODE_SET_URI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_FRAGMENT_ENCODE_SET_URI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, FRAGMENT_ENCODE_SET_URI, NSString *)

FOUNDATION_EXPORT jint Okhttp3HttpUrl_defaultPortWithNSString_(NSString *scheme);

FOUNDATION_EXPORT void Okhttp3HttpUrl_pathSegmentsToStringWithJavaLangStringBuilder_withJavaUtilList_(JavaLangStringBuilder *outArg, id<JavaUtilList> pathSegments);

FOUNDATION_EXPORT void Okhttp3HttpUrl_namesAndValuesToQueryStringWithJavaLangStringBuilder_withJavaUtilList_(JavaLangStringBuilder *outArg, id<JavaUtilList> namesAndValues);

FOUNDATION_EXPORT id<JavaUtilList> Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(NSString *encodedQuery);

FOUNDATION_EXPORT Okhttp3HttpUrl *Okhttp3HttpUrl_parseWithNSString_(NSString *url);

FOUNDATION_EXPORT Okhttp3HttpUrl *Okhttp3HttpUrl_getWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT Okhttp3HttpUrl *Okhttp3HttpUrl_getCheckedWithNSString_(NSString *url);

FOUNDATION_EXPORT Okhttp3HttpUrl *Okhttp3HttpUrl_getWithJavaNetURI_(JavaNetURI *uri);

FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(NSString *encoded, jboolean plusIsSpace);

FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_percentDecodeWithNSString_withInt_withInt_withBoolean_(NSString *encoded, jint pos, jint limit, jboolean plusIsSpace);

FOUNDATION_EXPORT void Okhttp3HttpUrl_percentDecodeWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(OkioBuffer *outArg, NSString *encoded, jint pos, jint limit, jboolean plusIsSpace);

FOUNDATION_EXPORT jboolean Okhttp3HttpUrl_percentEncodedWithNSString_withInt_withInt_(NSString *encoded, jint pos, jint limit);

FOUNDATION_EXPORT jint Okhttp3HttpUrl_decodeHexDigitWithChar_(jchar c);

FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *input, jint pos, jint limit, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly);

FOUNDATION_EXPORT void Okhttp3HttpUrl_canonicalizeWithOkioBuffer_withNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(OkioBuffer *outArg, NSString *input, jint pos, jint limit, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly);

FOUNDATION_EXPORT NSString *Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *input, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3HttpUrl)

#endif

#if !defined (Okhttp3HttpUrl_Builder_) && (INCLUDE_ALL_Okhttp3HttpUrl || defined(INCLUDE_Okhttp3HttpUrl_Builder))
#define Okhttp3HttpUrl_Builder_

@class Okhttp3HttpUrl;
@class Okhttp3HttpUrl_Builder_ParseResult;
@protocol JavaUtilList;

@interface Okhttp3HttpUrl_Builder : NSObject {
 @public
  NSString *scheme_;
  NSString *encodedUsername_;
  NSString *encodedPassword_;
  NSString *host_;
  jint port_;
  id<JavaUtilList> encodedPathSegments_;
  id<JavaUtilList> encodedQueryNamesAndValues_;
  NSString *encodedFragment_;
}

#pragma mark Public

- (instancetype)init;

- (Okhttp3HttpUrl_Builder *)addEncodedPathSegmentWithNSString:(NSString *)encodedPathSegment;

- (Okhttp3HttpUrl_Builder *)addEncodedPathSegmentsWithNSString:(NSString *)encodedPathSegments;

- (Okhttp3HttpUrl_Builder *)addEncodedQueryParameterWithNSString:(NSString *)encodedName
                                                    withNSString:(NSString *)encodedValue;

- (Okhttp3HttpUrl_Builder *)addPathSegmentWithNSString:(NSString *)pathSegment;

- (Okhttp3HttpUrl_Builder *)addPathSegmentsWithNSString:(NSString *)pathSegments;

- (Okhttp3HttpUrl_Builder *)addQueryParameterWithNSString:(NSString *)name
                                             withNSString:(NSString *)value;

- (Okhttp3HttpUrl *)build;

- (Okhttp3HttpUrl_Builder *)encodedFragmentWithNSString:(NSString *)encodedFragment;

- (Okhttp3HttpUrl_Builder *)encodedPasswordWithNSString:(NSString *)encodedPassword;

- (Okhttp3HttpUrl_Builder *)encodedPathWithNSString:(NSString *)encodedPath;

- (Okhttp3HttpUrl_Builder *)encodedQueryWithNSString:(NSString *)encodedQuery;

- (Okhttp3HttpUrl_Builder *)encodedUsernameWithNSString:(NSString *)encodedUsername;

- (Okhttp3HttpUrl_Builder *)fragmentWithNSString:(NSString *)fragment;

- (Okhttp3HttpUrl_Builder *)hostWithNSString:(NSString *)host;

- (Okhttp3HttpUrl_Builder *)passwordWithNSString:(NSString *)password;

- (Okhttp3HttpUrl_Builder *)portWithInt:(jint)port;

- (Okhttp3HttpUrl_Builder *)queryWithNSString:(NSString *)query;

- (Okhttp3HttpUrl_Builder *)removeAllEncodedQueryParametersWithNSString:(NSString *)encodedName;

- (Okhttp3HttpUrl_Builder *)removeAllQueryParametersWithNSString:(NSString *)name;

- (Okhttp3HttpUrl_Builder *)removePathSegmentWithInt:(jint)index;

- (Okhttp3HttpUrl_Builder *)schemeWithNSString:(NSString *)scheme;

- (Okhttp3HttpUrl_Builder *)setEncodedPathSegmentWithInt:(jint)index
                                            withNSString:(NSString *)encodedPathSegment;

- (Okhttp3HttpUrl_Builder *)setEncodedQueryParameterWithNSString:(NSString *)encodedName
                                                    withNSString:(NSString *)encodedValue;

- (Okhttp3HttpUrl_Builder *)setPathSegmentWithInt:(jint)index
                                     withNSString:(NSString *)pathSegment;

- (Okhttp3HttpUrl_Builder *)setQueryParameterWithNSString:(NSString *)name
                                             withNSString:(NSString *)value;

- (NSString *)description;

- (Okhttp3HttpUrl_Builder *)usernameWithNSString:(NSString *)username;

#pragma mark Package-Private

- (jint)effectivePort;

- (Okhttp3HttpUrl_Builder_ParseResult *)parseWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)base
                                                   withNSString:(NSString *)input;

- (Okhttp3HttpUrl_Builder *)reencodeForUri;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3HttpUrl_Builder)

J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, scheme_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, encodedUsername_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, encodedPassword_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, host_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, encodedPathSegments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, encodedQueryNamesAndValues_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl_Builder, encodedFragment_, NSString *)

FOUNDATION_EXPORT void Okhttp3HttpUrl_Builder_init(Okhttp3HttpUrl_Builder *self);

FOUNDATION_EXPORT Okhttp3HttpUrl_Builder *new_Okhttp3HttpUrl_Builder_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3HttpUrl_Builder *create_Okhttp3HttpUrl_Builder_init();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3HttpUrl_Builder)

#endif

#if !defined (Okhttp3HttpUrl_Builder_ParseResult_) && (INCLUDE_ALL_Okhttp3HttpUrl || defined(INCLUDE_Okhttp3HttpUrl_Builder_ParseResult))
#define Okhttp3HttpUrl_Builder_ParseResult_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, Okhttp3HttpUrl_Builder_ParseResult_Enum) {
  Okhttp3HttpUrl_Builder_ParseResult_Enum_SUCCESS = 0,
  Okhttp3HttpUrl_Builder_ParseResult_Enum_MISSING_SCHEME = 1,
  Okhttp3HttpUrl_Builder_ParseResult_Enum_UNSUPPORTED_SCHEME = 2,
  Okhttp3HttpUrl_Builder_ParseResult_Enum_INVALID_PORT = 3,
  Okhttp3HttpUrl_Builder_ParseResult_Enum_INVALID_HOST = 4,
};

@interface Okhttp3HttpUrl_Builder_ParseResult : JavaLangEnum

+ (Okhttp3HttpUrl_Builder_ParseResult * __nonnull)SUCCESS;

+ (Okhttp3HttpUrl_Builder_ParseResult * __nonnull)MISSING_SCHEME;

+ (Okhttp3HttpUrl_Builder_ParseResult * __nonnull)UNSUPPORTED_SCHEME;

+ (Okhttp3HttpUrl_Builder_ParseResult * __nonnull)INVALID_PORT;

+ (Okhttp3HttpUrl_Builder_ParseResult * __nonnull)INVALID_HOST;

#pragma mark Public

+ (Okhttp3HttpUrl_Builder_ParseResult *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (Okhttp3HttpUrl_Builder_ParseResult_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(Okhttp3HttpUrl_Builder_ParseResult)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_values_[];

inline Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_get_SUCCESS();
J2OBJC_ENUM_CONSTANT(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS)

inline Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_get_MISSING_SCHEME();
J2OBJC_ENUM_CONSTANT(Okhttp3HttpUrl_Builder_ParseResult, MISSING_SCHEME)

inline Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_get_UNSUPPORTED_SCHEME();
J2OBJC_ENUM_CONSTANT(Okhttp3HttpUrl_Builder_ParseResult, UNSUPPORTED_SCHEME)

inline Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_get_INVALID_PORT();
J2OBJC_ENUM_CONSTANT(Okhttp3HttpUrl_Builder_ParseResult, INVALID_PORT)

inline Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_get_INVALID_HOST();
J2OBJC_ENUM_CONSTANT(Okhttp3HttpUrl_Builder_ParseResult, INVALID_HOST)

FOUNDATION_EXPORT IOSObjectArray *Okhttp3HttpUrl_Builder_ParseResult_values();

FOUNDATION_EXPORT Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3HttpUrl_Builder_ParseResult)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Okhttp3HttpUrl")
