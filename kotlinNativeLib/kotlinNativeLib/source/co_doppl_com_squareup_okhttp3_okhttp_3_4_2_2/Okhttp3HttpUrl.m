//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Okhttp3HttpUrl.h"
#include "Okhttp3InternalUtil.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/URL.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "okio/Buffer.h"

@interface Okhttp3HttpUrl () {
 @public
  NSString *scheme_;
  NSString *username_;
  NSString *password_;
  NSString *host_;
  jint port_;
  id<JavaUtilList> pathSegments_;
  id<JavaUtilList> queryNamesAndValues_;
  NSString *fragment_;
  NSString *url_;
}

- (instancetype)initWithOkhttp3HttpUrl_Builder:(Okhttp3HttpUrl_Builder *)builder;

- (id<JavaUtilList>)percentDecodeWithJavaUtilList:(id<JavaUtilList>)list
                                      withBoolean:(jboolean)plusIsSpace;

@end

J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, scheme_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, username_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, password_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, host_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, pathSegments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, queryNamesAndValues_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, fragment_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3HttpUrl, url_, NSString *)

inline IOSCharArray *Okhttp3HttpUrl_get_HEX_DIGITS();
static IOSCharArray *Okhttp3HttpUrl_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3HttpUrl, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static void Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl *self, Okhttp3HttpUrl_Builder *builder);

__attribute__((unused)) static Okhttp3HttpUrl *new_Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3HttpUrl *create_Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl_Builder *builder);

__attribute__((unused)) static id<JavaUtilList> Okhttp3HttpUrl_percentDecodeWithJavaUtilList_withBoolean_(Okhttp3HttpUrl *self, id<JavaUtilList> list, jboolean plusIsSpace);

@interface Okhttp3HttpUrl_Builder ()

- (Okhttp3HttpUrl_Builder *)addPathSegmentsWithNSString:(NSString *)pathSegments
                                            withBoolean:(jboolean)alreadyEncoded;

- (void)removeAllCanonicalQueryParametersWithNSString:(NSString *)canonicalName;

- (void)resolvePathWithNSString:(NSString *)input
                        withInt:(jint)pos
                        withInt:(jint)limit;

- (void)pushWithNSString:(NSString *)input
                 withInt:(jint)pos
                 withInt:(jint)limit
             withBoolean:(jboolean)addTrailingSlash
             withBoolean:(jboolean)alreadyEncoded;

- (jboolean)isDotWithNSString:(NSString *)input;

- (jboolean)isDotDotWithNSString:(NSString *)input;

- (void)pop;

+ (jint)schemeDelimiterOffsetWithNSString:(NSString *)input
                                  withInt:(jint)pos
                                  withInt:(jint)limit;

+ (jint)slashCountWithNSString:(NSString *)input
                       withInt:(jint)pos
                       withInt:(jint)limit;

+ (jint)portColonOffsetWithNSString:(NSString *)input
                            withInt:(jint)pos
                            withInt:(jint)limit;

+ (NSString *)canonicalizeHostWithNSString:(NSString *)input
                                   withInt:(jint)pos
                                   withInt:(jint)limit;

+ (JavaNetInetAddress *)decodeIpv6WithNSString:(NSString *)input
                                       withInt:(jint)pos
                                       withInt:(jint)limit;

+ (jboolean)decodeIpv4SuffixWithNSString:(NSString *)input
                                 withInt:(jint)pos
                                 withInt:(jint)limit
                           withByteArray:(IOSByteArray *)address
                                 withInt:(jint)addressOffset;

+ (NSString *)inet6AddressToAsciiWithByteArray:(IOSByteArray *)address;

+ (jint)parsePortWithNSString:(NSString *)input
                      withInt:(jint)pos
                      withInt:(jint)limit;

@end

__attribute__((unused)) static Okhttp3HttpUrl_Builder *Okhttp3HttpUrl_Builder_addPathSegmentsWithNSString_withBoolean_(Okhttp3HttpUrl_Builder *self, NSString *pathSegments, jboolean alreadyEncoded);

__attribute__((unused)) static void Okhttp3HttpUrl_Builder_removeAllCanonicalQueryParametersWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *canonicalName);

__attribute__((unused)) static void Okhttp3HttpUrl_Builder_resolvePathWithNSString_withInt_withInt_(Okhttp3HttpUrl_Builder *self, NSString *input, jint pos, jint limit);

__attribute__((unused)) static void Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(Okhttp3HttpUrl_Builder *self, NSString *input, jint pos, jint limit, jboolean addTrailingSlash, jboolean alreadyEncoded);

__attribute__((unused)) static jboolean Okhttp3HttpUrl_Builder_isDotWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *input);

__attribute__((unused)) static jboolean Okhttp3HttpUrl_Builder_isDotDotWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *input);

__attribute__((unused)) static void Okhttp3HttpUrl_Builder_pop(Okhttp3HttpUrl_Builder *self);

__attribute__((unused)) static jint Okhttp3HttpUrl_Builder_schemeDelimiterOffsetWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static jint Okhttp3HttpUrl_Builder_slashCountWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static jint Okhttp3HttpUrl_Builder_portColonOffsetWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static NSString *Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static JavaNetInetAddress *Okhttp3HttpUrl_Builder_decodeIpv6WithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static jboolean Okhttp3HttpUrl_Builder_decodeIpv4SuffixWithNSString_withInt_withInt_withByteArray_withInt_(NSString *input, jint pos, jint limit, IOSByteArray *address, jint addressOffset);

__attribute__((unused)) static NSString *Okhttp3HttpUrl_Builder_inet6AddressToAsciiWithByteArray_(IOSByteArray *address);

__attribute__((unused)) static jint Okhttp3HttpUrl_Builder_parsePortWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit);

__attribute__((unused)) static void Okhttp3HttpUrl_Builder_ParseResult_initWithNSString_withInt_(Okhttp3HttpUrl_Builder_ParseResult *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3HttpUrl)

NSString *Okhttp3HttpUrl_USERNAME_ENCODE_SET = @" \"':;<=>@[]^`{}|/\\?#";
NSString *Okhttp3HttpUrl_PASSWORD_ENCODE_SET = @" \"':;<=>@[]^`{}|/\\?#";
NSString *Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET = @" \"<>^`{}|/\\?#";
NSString *Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET_URI = @"[]";
NSString *Okhttp3HttpUrl_QUERY_ENCODE_SET = @" \"'<>#";
NSString *Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET = @" \"'<>#&=";
NSString *Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET_URI = @"\\^`{|}";
NSString *Okhttp3HttpUrl_FORM_ENCODE_SET = @" \"':;<=>@[]^`{}|/\\?#&!$(),~";
NSString *Okhttp3HttpUrl_FRAGMENT_ENCODE_SET = @"";
NSString *Okhttp3HttpUrl_FRAGMENT_ENCODE_SET_URI = @" \"#<>\\^`{|}";

@implementation Okhttp3HttpUrl

+ (NSString *)USERNAME_ENCODE_SET {
  return Okhttp3HttpUrl_USERNAME_ENCODE_SET;
}

+ (NSString *)PASSWORD_ENCODE_SET {
  return Okhttp3HttpUrl_PASSWORD_ENCODE_SET;
}

+ (NSString *)PATH_SEGMENT_ENCODE_SET {
  return Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET;
}

+ (NSString *)PATH_SEGMENT_ENCODE_SET_URI {
  return Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET_URI;
}

+ (NSString *)QUERY_ENCODE_SET {
  return Okhttp3HttpUrl_QUERY_ENCODE_SET;
}

+ (NSString *)QUERY_COMPONENT_ENCODE_SET {
  return Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET;
}

+ (NSString *)QUERY_COMPONENT_ENCODE_SET_URI {
  return Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET_URI;
}

+ (NSString *)FORM_ENCODE_SET {
  return Okhttp3HttpUrl_FORM_ENCODE_SET;
}

+ (NSString *)FRAGMENT_ENCODE_SET {
  return Okhttp3HttpUrl_FRAGMENT_ENCODE_SET;
}

+ (NSString *)FRAGMENT_ENCODE_SET_URI {
  return Okhttp3HttpUrl_FRAGMENT_ENCODE_SET_URI;
}

- (instancetype)initWithOkhttp3HttpUrl_Builder:(Okhttp3HttpUrl_Builder *)builder {
  Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(self, builder);
  return self;
}

- (JavaNetURL *)url {
  @try {
    return create_JavaNetURL_initWithNSString_(url_);
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (JavaNetURI *)uri {
  NSString *uri = [((Okhttp3HttpUrl_Builder *) nil_chk([((Okhttp3HttpUrl_Builder *) nil_chk([self newBuilder])) reencodeForUri])) description];
  @try {
    return create_JavaNetURI_initWithNSString_(uri);
  }
  @catch (JavaNetURISyntaxException *e) {
    @try {
      NSString *stripped = [((NSString *) nil_chk(uri)) java_replaceAll:@"[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" withReplacement:@""];
      return JavaNetURI_createWithNSString_(stripped);
    }
    @catch (JavaLangException *e1) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
    }
  }
}

- (NSString *)scheme {
  return scheme_;
}

- (jboolean)isHttps {
  return [((NSString *) nil_chk(scheme_)) isEqual:@"https"];
}

- (NSString *)encodedUsername {
  if ([((NSString *) nil_chk(username_)) java_isEmpty]) return @"";
  jint usernameStart = [((NSString *) nil_chk(scheme_)) java_length] + 3;
  jint usernameEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(url_, usernameStart, [((NSString *) nil_chk(url_)) java_length], @":@");
  return [url_ java_substring:usernameStart endIndex:usernameEnd];
}

- (NSString *)username {
  return username_;
}

- (NSString *)encodedPassword {
  if ([((NSString *) nil_chk(password_)) java_isEmpty]) return @"";
  jint passwordStart = [((NSString *) nil_chk(url_)) java_indexOf:':' fromIndex:[((NSString *) nil_chk(scheme_)) java_length] + 3] + 1;
  jint passwordEnd = [url_ java_indexOf:'@'];
  return [url_ java_substring:passwordStart endIndex:passwordEnd];
}

- (NSString *)password {
  return password_;
}

- (NSString *)host {
  return host_;
}

- (jint)port {
  return port_;
}

+ (jint)defaultPortWithNSString:(NSString *)scheme {
  return Okhttp3HttpUrl_defaultPortWithNSString_(scheme);
}

- (jint)pathSize {
  return [((id<JavaUtilList>) nil_chk(pathSegments_)) size];
}

- (NSString *)encodedPath {
  jint pathStart = [((NSString *) nil_chk(url_)) java_indexOf:'/' fromIndex:[((NSString *) nil_chk(scheme_)) java_length] + 3];
  jint pathEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(url_, pathStart, [url_ java_length], @"?#");
  return [url_ java_substring:pathStart endIndex:pathEnd];
}

+ (void)pathSegmentsToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                     withJavaUtilList:(id<JavaUtilList>)pathSegments {
  Okhttp3HttpUrl_pathSegmentsToStringWithJavaLangStringBuilder_withJavaUtilList_(outArg, pathSegments);
}

- (id<JavaUtilList>)encodedPathSegments {
  jint pathStart = [((NSString *) nil_chk(url_)) java_indexOf:'/' fromIndex:[((NSString *) nil_chk(scheme_)) java_length] + 3];
  jint pathEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(url_, pathStart, [url_ java_length], @"?#");
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (jint i = pathStart; i < pathEnd; ) {
    i++;
    jint segmentEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(url_, i, pathEnd, '/');
    [result addWithId:[url_ java_substring:i endIndex:segmentEnd]];
    i = segmentEnd;
  }
  return result;
}

- (id<JavaUtilList>)pathSegments {
  return pathSegments_;
}

- (NSString *)encodedQuery {
  if (queryNamesAndValues_ == nil) return nil;
  jint queryStart = [((NSString *) nil_chk(url_)) java_indexOf:'?'] + 1;
  jint queryEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(url_, queryStart + 1, [url_ java_length], '#');
  return [url_ java_substring:queryStart endIndex:queryEnd];
}

+ (void)namesAndValuesToQueryStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                            withJavaUtilList:(id<JavaUtilList>)namesAndValues {
  Okhttp3HttpUrl_namesAndValuesToQueryStringWithJavaLangStringBuilder_withJavaUtilList_(outArg, namesAndValues);
}

+ (id<JavaUtilList>)queryStringToNamesAndValuesWithNSString:(NSString *)encodedQuery {
  return Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(encodedQuery);
}

- (NSString *)query {
  if (queryNamesAndValues_ == nil) return nil;
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  Okhttp3HttpUrl_namesAndValuesToQueryStringWithJavaLangStringBuilder_withJavaUtilList_(result, queryNamesAndValues_);
  return [result description];
}

- (jint)querySize {
  return queryNamesAndValues_ != nil ? [queryNamesAndValues_ size] / 2 : 0;
}

- (NSString *)queryParameterWithNSString:(NSString *)name {
  if (queryNamesAndValues_ == nil) return nil;
  for (jint i = 0, size = [queryNamesAndValues_ size]; i < size; i += 2) {
    if ([((NSString *) nil_chk(name)) isEqual:[queryNamesAndValues_ getWithInt:i]]) {
      return [queryNamesAndValues_ getWithInt:i + 1];
    }
  }
  return nil;
}

- (id<JavaUtilSet>)queryParameterNames {
  if (queryNamesAndValues_ == nil) return JavaUtilCollections_emptySet();
  id<JavaUtilSet> result = create_JavaUtilLinkedHashSet_init();
  for (jint i = 0, size = [queryNamesAndValues_ size]; i < size; i += 2) {
    [result addWithId:[queryNamesAndValues_ getWithInt:i]];
  }
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(result);
}

- (id<JavaUtilList>)queryParameterValuesWithNSString:(NSString *)name {
  if (queryNamesAndValues_ == nil) return JavaUtilCollections_emptyList();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (jint i = 0, size = [queryNamesAndValues_ size]; i < size; i += 2) {
    if ([((NSString *) nil_chk(name)) isEqual:[queryNamesAndValues_ getWithInt:i]]) {
      [result addWithId:[queryNamesAndValues_ getWithInt:i + 1]];
    }
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
}

- (NSString *)queryParameterNameWithInt:(jint)index {
  if (queryNamesAndValues_ == nil) @throw create_JavaLangIndexOutOfBoundsException_init();
  return [queryNamesAndValues_ getWithInt:index * 2];
}

- (NSString *)queryParameterValueWithInt:(jint)index {
  if (queryNamesAndValues_ == nil) @throw create_JavaLangIndexOutOfBoundsException_init();
  return [queryNamesAndValues_ getWithInt:index * 2 + 1];
}

- (NSString *)encodedFragment {
  if (fragment_ == nil) return nil;
  jint fragmentStart = [((NSString *) nil_chk(url_)) java_indexOf:'#'] + 1;
  return [url_ java_substring:fragmentStart];
}

- (NSString *)fragment {
  return fragment_;
}

- (Okhttp3HttpUrl *)resolveWithNSString:(NSString *)link {
  Okhttp3HttpUrl_Builder *builder = [self newBuilderWithNSString:link];
  return builder != nil ? [builder build] : nil;
}

- (Okhttp3HttpUrl_Builder *)newBuilder {
  Okhttp3HttpUrl_Builder *result = create_Okhttp3HttpUrl_Builder_init();
  JreStrongAssign(&result->scheme_, scheme_);
  JreStrongAssign(&result->encodedUsername_, [self encodedUsername]);
  JreStrongAssign(&result->encodedPassword_, [self encodedPassword]);
  JreStrongAssign(&result->host_, host_);
  result->port_ = port_ != Okhttp3HttpUrl_defaultPortWithNSString_(scheme_) ? port_ : -1;
  [((id<JavaUtilList>) nil_chk(result->encodedPathSegments_)) clear];
  [result->encodedPathSegments_ addAllWithJavaUtilCollection:[self encodedPathSegments]];
  [result encodedQueryWithNSString:[self encodedQuery]];
  JreStrongAssign(&result->encodedFragment_, [self encodedFragment]);
  return result;
}

- (Okhttp3HttpUrl_Builder *)newBuilderWithNSString:(NSString *)link {
  Okhttp3HttpUrl_Builder *builder = create_Okhttp3HttpUrl_Builder_init();
  Okhttp3HttpUrl_Builder_ParseResult *result = [builder parseWithOkhttp3HttpUrl:self withNSString:link];
  return result == JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS) ? builder : nil;
}

+ (Okhttp3HttpUrl *)parseWithNSString:(NSString *)url {
  return Okhttp3HttpUrl_parseWithNSString_(url);
}

+ (Okhttp3HttpUrl *)getWithJavaNetURL:(JavaNetURL *)url {
  return Okhttp3HttpUrl_getWithJavaNetURL_(url);
}

+ (Okhttp3HttpUrl *)getCheckedWithNSString:(NSString *)url {
  return Okhttp3HttpUrl_getCheckedWithNSString_(url);
}

+ (Okhttp3HttpUrl *)getWithJavaNetURI:(JavaNetURI *)uri {
  return Okhttp3HttpUrl_getWithJavaNetURI_(uri);
}

- (jboolean)isEqual:(id)o {
  return [o isKindOfClass:[Okhttp3HttpUrl class]] && [((NSString *) nil_chk(((Okhttp3HttpUrl *) nil_chk(((Okhttp3HttpUrl *) cast_chk(o, [Okhttp3HttpUrl class]))))->url_)) isEqual:url_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(url_)) hash]);
}

- (NSString *)description {
  return url_;
}

+ (NSString *)percentDecodeWithNSString:(NSString *)encoded
                            withBoolean:(jboolean)plusIsSpace {
  return Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(encoded, plusIsSpace);
}

- (id<JavaUtilList>)percentDecodeWithJavaUtilList:(id<JavaUtilList>)list
                                      withBoolean:(jboolean)plusIsSpace {
  return Okhttp3HttpUrl_percentDecodeWithJavaUtilList_withBoolean_(self, list, plusIsSpace);
}

+ (NSString *)percentDecodeWithNSString:(NSString *)encoded
                                withInt:(jint)pos
                                withInt:(jint)limit
                            withBoolean:(jboolean)plusIsSpace {
  return Okhttp3HttpUrl_percentDecodeWithNSString_withInt_withInt_withBoolean_(encoded, pos, limit, plusIsSpace);
}

+ (void)percentDecodeWithOkioBuffer:(OkioBuffer *)outArg
                       withNSString:(NSString *)encoded
                            withInt:(jint)pos
                            withInt:(jint)limit
                        withBoolean:(jboolean)plusIsSpace {
  Okhttp3HttpUrl_percentDecodeWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(outArg, encoded, pos, limit, plusIsSpace);
}

+ (jboolean)percentEncodedWithNSString:(NSString *)encoded
                               withInt:(jint)pos
                               withInt:(jint)limit {
  return Okhttp3HttpUrl_percentEncodedWithNSString_withInt_withInt_(encoded, pos, limit);
}

+ (jint)decodeHexDigitWithChar:(jchar)c {
  return Okhttp3HttpUrl_decodeHexDigitWithChar_(c);
}

+ (NSString *)canonicalizeWithNSString:(NSString *)input
                               withInt:(jint)pos
                               withInt:(jint)limit
                          withNSString:(NSString *)encodeSet
                           withBoolean:(jboolean)alreadyEncoded
                           withBoolean:(jboolean)strict
                           withBoolean:(jboolean)plusIsSpace
                           withBoolean:(jboolean)asciiOnly {
  return Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos, limit, encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);
}

+ (void)canonicalizeWithOkioBuffer:(OkioBuffer *)outArg
                      withNSString:(NSString *)input
                           withInt:(jint)pos
                           withInt:(jint)limit
                      withNSString:(NSString *)encodeSet
                       withBoolean:(jboolean)alreadyEncoded
                       withBoolean:(jboolean)strict
                       withBoolean:(jboolean)plusIsSpace
                       withBoolean:(jboolean)asciiOnly {
  Okhttp3HttpUrl_canonicalizeWithOkioBuffer_withNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(outArg, input, pos, limit, encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);
}

+ (NSString *)canonicalizeWithNSString:(NSString *)input
                          withNSString:(NSString *)encodeSet
                           withBoolean:(jboolean)alreadyEncoded
                           withBoolean:(jboolean)strict
                           withBoolean:(jboolean)plusIsSpace
                           withBoolean:(jboolean)asciiOnly {
  return Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(username_);
  RELEASE_(password_);
  RELEASE_(host_);
  RELEASE_(pathSegments_);
  RELEASE_(queryNamesAndValues_);
  RELEASE_(fragment_);
  RELEASE_(url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURI;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 8, 2, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 2, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x9, 18, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x8, 21, 2, 22, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x9, 19, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 28, 29, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 28, 30, -1, 31, -1, -1 },
    { NULL, "LNSString;", 0x8, 28, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 28, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 36, 37, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 38, 40, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 38, 41, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3HttpUrl_Builder:);
  methods[1].selector = @selector(url);
  methods[2].selector = @selector(uri);
  methods[3].selector = @selector(scheme);
  methods[4].selector = @selector(isHttps);
  methods[5].selector = @selector(encodedUsername);
  methods[6].selector = @selector(username);
  methods[7].selector = @selector(encodedPassword);
  methods[8].selector = @selector(password);
  methods[9].selector = @selector(host);
  methods[10].selector = @selector(port);
  methods[11].selector = @selector(defaultPortWithNSString:);
  methods[12].selector = @selector(pathSize);
  methods[13].selector = @selector(encodedPath);
  methods[14].selector = @selector(pathSegmentsToStringWithJavaLangStringBuilder:withJavaUtilList:);
  methods[15].selector = @selector(encodedPathSegments);
  methods[16].selector = @selector(pathSegments);
  methods[17].selector = @selector(encodedQuery);
  methods[18].selector = @selector(namesAndValuesToQueryStringWithJavaLangStringBuilder:withJavaUtilList:);
  methods[19].selector = @selector(queryStringToNamesAndValuesWithNSString:);
  methods[20].selector = @selector(query);
  methods[21].selector = @selector(querySize);
  methods[22].selector = @selector(queryParameterWithNSString:);
  methods[23].selector = @selector(queryParameterNames);
  methods[24].selector = @selector(queryParameterValuesWithNSString:);
  methods[25].selector = @selector(queryParameterNameWithInt:);
  methods[26].selector = @selector(queryParameterValueWithInt:);
  methods[27].selector = @selector(encodedFragment);
  methods[28].selector = @selector(fragment);
  methods[29].selector = @selector(resolveWithNSString:);
  methods[30].selector = @selector(newBuilder);
  methods[31].selector = @selector(newBuilderWithNSString:);
  methods[32].selector = @selector(parseWithNSString:);
  methods[33].selector = @selector(getWithJavaNetURL:);
  methods[34].selector = @selector(getCheckedWithNSString:);
  methods[35].selector = @selector(getWithJavaNetURI:);
  methods[36].selector = @selector(isEqual:);
  methods[37].selector = @selector(hash);
  methods[38].selector = @selector(description);
  methods[39].selector = @selector(percentDecodeWithNSString:withBoolean:);
  methods[40].selector = @selector(percentDecodeWithJavaUtilList:withBoolean:);
  methods[41].selector = @selector(percentDecodeWithNSString:withInt:withInt:withBoolean:);
  methods[42].selector = @selector(percentDecodeWithOkioBuffer:withNSString:withInt:withInt:withBoolean:);
  methods[43].selector = @selector(percentEncodedWithNSString:withInt:withInt:);
  methods[44].selector = @selector(decodeHexDigitWithChar:);
  methods[45].selector = @selector(canonicalizeWithNSString:withInt:withInt:withNSString:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[46].selector = @selector(canonicalizeWithOkioBuffer:withNSString:withInt:withInt:withNSString:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[47].selector = @selector(canonicalizeWithNSString:withNSString:withBoolean:withBoolean:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "USERNAME_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 43, -1, -1 },
    { "PASSWORD_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 44, -1, -1 },
    { "PATH_SEGMENT_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 45, -1, -1 },
    { "PATH_SEGMENT_ENCODE_SET_URI", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 46, -1, -1 },
    { "QUERY_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 47, -1, -1 },
    { "QUERY_COMPONENT_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 48, -1, -1 },
    { "QUERY_COMPONENT_ENCODE_SET_URI", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 49, -1, -1 },
    { "FORM_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 50, -1, -1 },
    { "FRAGMENT_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 51, -1, -1 },
    { "FRAGMENT_ENCODE_SET_URI", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 52, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "username_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "password_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pathSegments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 53, -1 },
    { "queryNamesAndValues_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 53, -1 },
    { "fragment_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3HttpUrl_Builder;", "defaultPort", "LNSString;", "pathSegmentsToString", "LJavaLangStringBuilder;LJavaUtilList;", "(Ljava/lang/StringBuilder;Ljava/util/List<Ljava/lang/String;>;)V", "()Ljava/util/List<Ljava/lang/String;>;", "namesAndValuesToQueryString", "queryStringToNamesAndValues", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "queryParameter", "()Ljava/util/Set<Ljava/lang/String;>;", "queryParameterValues", "queryParameterName", "I", "queryParameterValue", "resolve", "newBuilder", "parse", "get", "LJavaNetURL;", "getChecked", "LJavaNetMalformedURLException;LJavaNetUnknownHostException;", "LJavaNetURI;", "equals", "LNSObject;", "hashCode", "toString", "percentDecode", "LNSString;Z", "LJavaUtilList;Z", "(Ljava/util/List<Ljava/lang/String;>;Z)Ljava/util/List<Ljava/lang/String;>;", "LNSString;IIZ", "LOkioBuffer;LNSString;IIZ", "percentEncoded", "LNSString;II", "decodeHexDigit", "C", "canonicalize", "LNSString;IILNSString;ZZZZ", "LOkioBuffer;LNSString;IILNSString;ZZZZ", "LNSString;LNSString;ZZZZ", &Okhttp3HttpUrl_HEX_DIGITS, &Okhttp3HttpUrl_USERNAME_ENCODE_SET, &Okhttp3HttpUrl_PASSWORD_ENCODE_SET, &Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET, &Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET_URI, &Okhttp3HttpUrl_QUERY_ENCODE_SET, &Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, &Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET_URI, &Okhttp3HttpUrl_FORM_ENCODE_SET, &Okhttp3HttpUrl_FRAGMENT_ENCODE_SET, &Okhttp3HttpUrl_FRAGMENT_ENCODE_SET_URI, "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _Okhttp3HttpUrl = { "HttpUrl", "okhttp3", ptrTable, methods, fields, 7, 0x11, 48, 20, -1, 0, -1, -1, -1 };
  return &_Okhttp3HttpUrl;
}

+ (void)initialize {
  if (self == [Okhttp3HttpUrl class]) {
    JreStrongAssignAndConsume(&Okhttp3HttpUrl_HEX_DIGITS, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16]);
    J2OBJC_SET_INITIALIZED(Okhttp3HttpUrl)
  }
}

@end

void Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl *self, Okhttp3HttpUrl_Builder *builder) {
  NSObject_init(self);
  JreStrongAssign(&self->scheme_, ((Okhttp3HttpUrl_Builder *) nil_chk(builder))->scheme_);
  JreStrongAssign(&self->username_, Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(builder->encodedUsername_, false));
  JreStrongAssign(&self->password_, Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(builder->encodedPassword_, false));
  JreStrongAssign(&self->host_, builder->host_);
  self->port_ = [builder effectivePort];
  JreStrongAssign(&self->pathSegments_, Okhttp3HttpUrl_percentDecodeWithJavaUtilList_withBoolean_(self, builder->encodedPathSegments_, false));
  JreStrongAssign(&self->queryNamesAndValues_, builder->encodedQueryNamesAndValues_ != nil ? Okhttp3HttpUrl_percentDecodeWithJavaUtilList_withBoolean_(self, builder->encodedQueryNamesAndValues_, true) : nil);
  JreStrongAssign(&self->fragment_, builder->encodedFragment_ != nil ? Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(builder->encodedFragment_, false) : nil);
  JreStrongAssign(&self->url_, [builder description]);
}

Okhttp3HttpUrl *new_Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl_Builder *builder) {
  J2OBJC_NEW_IMPL(Okhttp3HttpUrl, initWithOkhttp3HttpUrl_Builder_, builder)
}

Okhttp3HttpUrl *create_Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(Okhttp3HttpUrl_Builder *builder) {
  J2OBJC_CREATE_IMPL(Okhttp3HttpUrl, initWithOkhttp3HttpUrl_Builder_, builder)
}

jint Okhttp3HttpUrl_defaultPortWithNSString_(NSString *scheme) {
  Okhttp3HttpUrl_initialize();
  if ([((NSString *) nil_chk(scheme)) isEqual:@"http"]) {
    return 80;
  }
  else if ([scheme isEqual:@"https"]) {
    return 443;
  }
  else {
    return -1;
  }
}

void Okhttp3HttpUrl_pathSegmentsToStringWithJavaLangStringBuilder_withJavaUtilList_(JavaLangStringBuilder *outArg, id<JavaUtilList> pathSegments) {
  Okhttp3HttpUrl_initialize();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(pathSegments)) size]; i < size; i++) {
    [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:'/'];
    [outArg appendWithNSString:[pathSegments getWithInt:i]];
  }
}

void Okhttp3HttpUrl_namesAndValuesToQueryStringWithJavaLangStringBuilder_withJavaUtilList_(JavaLangStringBuilder *outArg, id<JavaUtilList> namesAndValues) {
  Okhttp3HttpUrl_initialize();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(namesAndValues)) size]; i < size; i += 2) {
    NSString *name = [namesAndValues getWithInt:i];
    NSString *value = [namesAndValues getWithInt:i + 1];
    if (i > 0) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:'&'];
    [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:name];
    if (value != nil) {
      [outArg appendWithChar:'='];
      [outArg appendWithNSString:value];
    }
  }
}

id<JavaUtilList> Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(NSString *encodedQuery) {
  Okhttp3HttpUrl_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  for (jint pos = 0; pos <= [((NSString *) nil_chk(encodedQuery)) java_length]; ) {
    jint ampersandOffset = [encodedQuery java_indexOf:'&' fromIndex:pos];
    if (ampersandOffset == -1) ampersandOffset = [encodedQuery java_length];
    jint equalsOffset = [encodedQuery java_indexOf:'=' fromIndex:pos];
    if (equalsOffset == -1 || equalsOffset > ampersandOffset) {
      [result addWithId:[encodedQuery java_substring:pos endIndex:ampersandOffset]];
      [result addWithId:nil];
    }
    else {
      [result addWithId:[encodedQuery java_substring:pos endIndex:equalsOffset]];
      [result addWithId:[encodedQuery java_substring:equalsOffset + 1 endIndex:ampersandOffset]];
    }
    pos = ampersandOffset + 1;
  }
  return result;
}

Okhttp3HttpUrl *Okhttp3HttpUrl_parseWithNSString_(NSString *url) {
  Okhttp3HttpUrl_initialize();
  Okhttp3HttpUrl_Builder *builder = create_Okhttp3HttpUrl_Builder_init();
  Okhttp3HttpUrl_Builder_ParseResult *result = [builder parseWithOkhttp3HttpUrl:nil withNSString:url];
  return result == JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS) ? [builder build] : nil;
}

Okhttp3HttpUrl *Okhttp3HttpUrl_getWithJavaNetURL_(JavaNetURL *url) {
  Okhttp3HttpUrl_initialize();
  return Okhttp3HttpUrl_parseWithNSString_([((JavaNetURL *) nil_chk(url)) description]);
}

Okhttp3HttpUrl *Okhttp3HttpUrl_getCheckedWithNSString_(NSString *url) {
  Okhttp3HttpUrl_initialize();
  Okhttp3HttpUrl_Builder *builder = create_Okhttp3HttpUrl_Builder_init();
  Okhttp3HttpUrl_Builder_ParseResult *result = [builder parseWithOkhttp3HttpUrl:nil withNSString:url];
  switch ([result ordinal]) {
    case Okhttp3HttpUrl_Builder_ParseResult_Enum_SUCCESS:
    return [builder build];
    case Okhttp3HttpUrl_Builder_ParseResult_Enum_INVALID_HOST:
    @throw create_JavaNetUnknownHostException_initWithNSString_(JreStrcat("$$", @"Invalid host: ", url));
    case Okhttp3HttpUrl_Builder_ParseResult_Enum_UNSUPPORTED_SCHEME:
    case Okhttp3HttpUrl_Builder_ParseResult_Enum_MISSING_SCHEME:
    case Okhttp3HttpUrl_Builder_ParseResult_Enum_INVALID_PORT:
    default:
    @throw create_JavaNetMalformedURLException_initWithNSString_(JreStrcat("$@$$", @"Invalid URL: ", result, @" for ", url));
  }
}

Okhttp3HttpUrl *Okhttp3HttpUrl_getWithJavaNetURI_(JavaNetURI *uri) {
  Okhttp3HttpUrl_initialize();
  return Okhttp3HttpUrl_parseWithNSString_([((JavaNetURI *) nil_chk(uri)) description]);
}

NSString *Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(NSString *encoded, jboolean plusIsSpace) {
  Okhttp3HttpUrl_initialize();
  return Okhttp3HttpUrl_percentDecodeWithNSString_withInt_withInt_withBoolean_(encoded, 0, [((NSString *) nil_chk(encoded)) java_length], plusIsSpace);
}

id<JavaUtilList> Okhttp3HttpUrl_percentDecodeWithJavaUtilList_withBoolean_(Okhttp3HttpUrl *self, id<JavaUtilList> list, jboolean plusIsSpace) {
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(list)) size]);
  for (NSString * __strong s in list) {
    [result addWithId:s != nil ? Okhttp3HttpUrl_percentDecodeWithNSString_withBoolean_(s, plusIsSpace) : nil];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
}

NSString *Okhttp3HttpUrl_percentDecodeWithNSString_withInt_withInt_withBoolean_(NSString *encoded, jint pos, jint limit, jboolean plusIsSpace) {
  Okhttp3HttpUrl_initialize();
  for (jint i = pos; i < limit; i++) {
    jchar c = [((NSString *) nil_chk(encoded)) charAtWithInt:i];
    if (c == '%' || (c == '+' && plusIsSpace)) {
      OkioBuffer *out = create_OkioBuffer_init();
      [out writeUtf8WithNSString:encoded withInt:pos withInt:i];
      Okhttp3HttpUrl_percentDecodeWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(out, encoded, i, limit, plusIsSpace);
      return [out readUtf8];
    }
  }
  return [((NSString *) nil_chk(encoded)) java_substring:pos endIndex:limit];
}

void Okhttp3HttpUrl_percentDecodeWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(OkioBuffer *outArg, NSString *encoded, jint pos, jint limit, jboolean plusIsSpace) {
  Okhttp3HttpUrl_initialize();
  jint codePoint;
  for (jint i = pos; i < limit; i += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [((NSString *) nil_chk(encoded)) java_codePointAt:i];
    if (codePoint == '%' && i + 2 < limit) {
      jint d1 = Okhttp3HttpUrl_decodeHexDigitWithChar_([encoded charAtWithInt:i + 1]);
      jint d2 = Okhttp3HttpUrl_decodeHexDigitWithChar_([encoded charAtWithInt:i + 2]);
      if (d1 != -1 && d2 != -1) {
        [((OkioBuffer *) nil_chk(outArg)) writeByteWithInt:(JreLShift32(d1, 4)) + d2];
        i += 2;
        continue;
      }
    }
    else if (codePoint == '+' && plusIsSpace) {
      [((OkioBuffer *) nil_chk(outArg)) writeByteWithInt:' '];
      continue;
    }
    [((OkioBuffer *) nil_chk(outArg)) writeUtf8CodePointWithInt:codePoint];
  }
}

jboolean Okhttp3HttpUrl_percentEncodedWithNSString_withInt_withInt_(NSString *encoded, jint pos, jint limit) {
  Okhttp3HttpUrl_initialize();
  return pos + 2 < limit && [((NSString *) nil_chk(encoded)) charAtWithInt:pos] == '%' && Okhttp3HttpUrl_decodeHexDigitWithChar_([encoded charAtWithInt:pos + 1]) != -1 && Okhttp3HttpUrl_decodeHexDigitWithChar_([encoded charAtWithInt:pos + 2]) != -1;
}

jint Okhttp3HttpUrl_decodeHexDigitWithChar_(jchar c) {
  Okhttp3HttpUrl_initialize();
  if (c >= '0' && c <= '9') return c - '0';
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  return -1;
}

NSString *Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *input, jint pos, jint limit, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly) {
  Okhttp3HttpUrl_initialize();
  jint codePoint;
  for (jint i = pos; i < limit; i += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [((NSString *) nil_chk(input)) java_codePointAt:i];
    if (codePoint < (jint) 0x20 || codePoint == (jint) 0x7f || (codePoint >= (jint) 0x80 && asciiOnly) || [((NSString *) nil_chk(encodeSet)) java_indexOf:codePoint] != -1 || (codePoint == '%' && (!alreadyEncoded || (strict && !Okhttp3HttpUrl_percentEncodedWithNSString_withInt_withInt_(input, i, limit)))) || (codePoint == '+' && plusIsSpace)) {
      OkioBuffer *out = create_OkioBuffer_init();
      [out writeUtf8WithNSString:input withInt:pos withInt:i];
      Okhttp3HttpUrl_canonicalizeWithOkioBuffer_withNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(out, input, i, limit, encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);
      return [out readUtf8];
    }
  }
  return [((NSString *) nil_chk(input)) java_substring:pos endIndex:limit];
}

void Okhttp3HttpUrl_canonicalizeWithOkioBuffer_withNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(OkioBuffer *outArg, NSString *input, jint pos, jint limit, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly) {
  Okhttp3HttpUrl_initialize();
  OkioBuffer *utf8Buffer = nil;
  jint codePoint;
  for (jint i = pos; i < limit; i += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [((NSString *) nil_chk(input)) java_codePointAt:i];
    if (alreadyEncoded && (codePoint == 0x0009 || codePoint == 0x000a || codePoint == 0x000c || codePoint == 0x000d)) {
    }
    else if (codePoint == '+' && plusIsSpace) {
      [((OkioBuffer *) nil_chk(outArg)) writeUtf8WithNSString:alreadyEncoded ? @"+" : @"%2B"];
    }
    else if (codePoint < (jint) 0x20 || codePoint == (jint) 0x7f || (codePoint >= (jint) 0x80 && asciiOnly) || [((NSString *) nil_chk(encodeSet)) java_indexOf:codePoint] != -1 || (codePoint == '%' && (!alreadyEncoded || (strict && !Okhttp3HttpUrl_percentEncodedWithNSString_withInt_withInt_(input, i, limit))))) {
      if (utf8Buffer == nil) {
        utf8Buffer = create_OkioBuffer_init();
      }
      [utf8Buffer writeUtf8CodePointWithInt:codePoint];
      while (![utf8Buffer exhausted]) {
        jint b = [utf8Buffer readByte] & (jint) 0xff;
        [((OkioBuffer *) nil_chk(outArg)) writeByteWithInt:'%'];
        [outArg writeByteWithInt:IOSCharArray_Get(nil_chk(Okhttp3HttpUrl_HEX_DIGITS), (JreRShift32(b, 4)) & (jint) 0xf)];
        [outArg writeByteWithInt:IOSCharArray_Get(Okhttp3HttpUrl_HEX_DIGITS, b & (jint) 0xf)];
      }
    }
    else {
      [((OkioBuffer *) nil_chk(outArg)) writeUtf8CodePointWithInt:codePoint];
    }
  }
}

NSString *Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(NSString *input, NSString *encodeSet, jboolean alreadyEncoded, jboolean strict, jboolean plusIsSpace, jboolean asciiOnly) {
  Okhttp3HttpUrl_initialize();
  return Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, 0, [((NSString *) nil_chk(input)) java_length], encodeSet, alreadyEncoded, strict, plusIsSpace, asciiOnly);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3HttpUrl)

@implementation Okhttp3HttpUrl_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3HttpUrl_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (Okhttp3HttpUrl_Builder *)schemeWithNSString:(NSString *)scheme {
  if (scheme == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheme == null");
  }
  else if ([scheme java_equalsIgnoreCase:@"http"]) {
    JreStrongAssign(&self->scheme_, @"http");
  }
  else if ([scheme java_equalsIgnoreCase:@"https"]) {
    JreStrongAssign(&self->scheme_, @"https");
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected scheme: ", scheme));
  }
  return self;
}

- (Okhttp3HttpUrl_Builder *)usernameWithNSString:(NSString *)username {
  if (username == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"username == null");
  JreStrongAssign(&self->encodedUsername_, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(username, Okhttp3HttpUrl_USERNAME_ENCODE_SET, false, false, false, true));
  return self;
}

- (Okhttp3HttpUrl_Builder *)encodedUsernameWithNSString:(NSString *)encodedUsername {
  if (encodedUsername == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedUsername == null");
  JreStrongAssign(&self->encodedUsername_, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedUsername, Okhttp3HttpUrl_USERNAME_ENCODE_SET, true, false, false, true));
  return self;
}

- (Okhttp3HttpUrl_Builder *)passwordWithNSString:(NSString *)password {
  if (password == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"password == null");
  JreStrongAssign(&self->encodedPassword_, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(password, Okhttp3HttpUrl_PASSWORD_ENCODE_SET, false, false, false, true));
  return self;
}

- (Okhttp3HttpUrl_Builder *)encodedPasswordWithNSString:(NSString *)encodedPassword {
  if (encodedPassword == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedPassword == null");
  JreStrongAssign(&self->encodedPassword_, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedPassword, Okhttp3HttpUrl_PASSWORD_ENCODE_SET, true, false, false, true));
  return self;
}

- (Okhttp3HttpUrl_Builder *)hostWithNSString:(NSString *)host {
  if (host == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"host == null");
  NSString *encoded = Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(host, 0, [host java_length]);
  if (encoded == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected host: ", host));
  JreStrongAssign(&self->host_, encoded);
  return self;
}

- (Okhttp3HttpUrl_Builder *)portWithInt:(jint)port {
  if (port <= 0 || port > 65535) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unexpected port: ", port));
  self->port_ = port;
  return self;
}

- (jint)effectivePort {
  return port_ != -1 ? port_ : Okhttp3HttpUrl_defaultPortWithNSString_(scheme_);
}

- (Okhttp3HttpUrl_Builder *)addPathSegmentWithNSString:(NSString *)pathSegment {
  if (pathSegment == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"pathSegment == null");
  Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(self, pathSegment, 0, [pathSegment java_length], false, false);
  return self;
}

- (Okhttp3HttpUrl_Builder *)addPathSegmentsWithNSString:(NSString *)pathSegments {
  if (pathSegments == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"pathSegments == null");
  return Okhttp3HttpUrl_Builder_addPathSegmentsWithNSString_withBoolean_(self, pathSegments, false);
}

- (Okhttp3HttpUrl_Builder *)addEncodedPathSegmentWithNSString:(NSString *)encodedPathSegment {
  if (encodedPathSegment == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedPathSegment == null");
  }
  Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(self, encodedPathSegment, 0, [encodedPathSegment java_length], false, true);
  return self;
}

- (Okhttp3HttpUrl_Builder *)addEncodedPathSegmentsWithNSString:(NSString *)encodedPathSegments {
  if (encodedPathSegments == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedPathSegments == null");
  }
  return Okhttp3HttpUrl_Builder_addPathSegmentsWithNSString_withBoolean_(self, encodedPathSegments, true);
}

- (Okhttp3HttpUrl_Builder *)addPathSegmentsWithNSString:(NSString *)pathSegments
                                            withBoolean:(jboolean)alreadyEncoded {
  return Okhttp3HttpUrl_Builder_addPathSegmentsWithNSString_withBoolean_(self, pathSegments, alreadyEncoded);
}

- (Okhttp3HttpUrl_Builder *)setPathSegmentWithInt:(jint)index
                                     withNSString:(NSString *)pathSegment {
  if (pathSegment == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"pathSegment == null");
  NSString *canonicalPathSegment = Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(pathSegment, 0, [pathSegment java_length], Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET, false, false, false, true);
  if (Okhttp3HttpUrl_Builder_isDotWithNSString_(self, canonicalPathSegment) || Okhttp3HttpUrl_Builder_isDotDotWithNSString_(self, canonicalPathSegment)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected path segment: ", pathSegment));
  }
  [((id<JavaUtilList>) nil_chk(encodedPathSegments_)) setWithInt:index withId:canonicalPathSegment];
  return self;
}

- (Okhttp3HttpUrl_Builder *)setEncodedPathSegmentWithInt:(jint)index
                                            withNSString:(NSString *)encodedPathSegment {
  if (encodedPathSegment == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedPathSegment == null");
  }
  NSString *canonicalPathSegment = Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedPathSegment, 0, [encodedPathSegment java_length], Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET, true, false, false, true);
  [((id<JavaUtilList>) nil_chk(encodedPathSegments_)) setWithInt:index withId:canonicalPathSegment];
  if (Okhttp3HttpUrl_Builder_isDotWithNSString_(self, canonicalPathSegment) || Okhttp3HttpUrl_Builder_isDotDotWithNSString_(self, canonicalPathSegment)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected path segment: ", encodedPathSegment));
  }
  return self;
}

- (Okhttp3HttpUrl_Builder *)removePathSegmentWithInt:(jint)index {
  [((id<JavaUtilList>) nil_chk(encodedPathSegments_)) removeWithInt:index];
  if ([encodedPathSegments_ isEmpty]) {
    [encodedPathSegments_ addWithId:@""];
  }
  return self;
}

- (Okhttp3HttpUrl_Builder *)encodedPathWithNSString:(NSString *)encodedPath {
  if (encodedPath == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedPath == null");
  if (![encodedPath java_hasPrefix:@"/"]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unexpected encodedPath: ", encodedPath));
  }
  Okhttp3HttpUrl_Builder_resolvePathWithNSString_withInt_withInt_(self, encodedPath, 0, [encodedPath java_length]);
  return self;
}

- (Okhttp3HttpUrl_Builder *)queryWithNSString:(NSString *)query {
  JreStrongAssign(&self->encodedQueryNamesAndValues_, query != nil ? Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(query, Okhttp3HttpUrl_QUERY_ENCODE_SET, false, false, true, true)) : nil);
  return self;
}

- (Okhttp3HttpUrl_Builder *)encodedQueryWithNSString:(NSString *)encodedQuery {
  JreStrongAssign(&self->encodedQueryNamesAndValues_, encodedQuery != nil ? Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedQuery, Okhttp3HttpUrl_QUERY_ENCODE_SET, true, false, true, true)) : nil);
  return self;
}

- (Okhttp3HttpUrl_Builder *)addQueryParameterWithNSString:(NSString *)name
                                             withNSString:(NSString *)value {
  if (name == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"name == null");
  if (encodedQueryNamesAndValues_ == nil) JreStrongAssignAndConsume(&encodedQueryNamesAndValues_, new_JavaUtilArrayList_init());
  [encodedQueryNamesAndValues_ addWithId:Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(name, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, false, false, true, true)];
  [((id<JavaUtilList>) nil_chk(encodedQueryNamesAndValues_)) addWithId:value != nil ? Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(value, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, false, false, true, true) : nil];
  return self;
}

- (Okhttp3HttpUrl_Builder *)addEncodedQueryParameterWithNSString:(NSString *)encodedName
                                                    withNSString:(NSString *)encodedValue {
  if (encodedName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedName == null");
  if (encodedQueryNamesAndValues_ == nil) JreStrongAssignAndConsume(&encodedQueryNamesAndValues_, new_JavaUtilArrayList_init());
  [encodedQueryNamesAndValues_ addWithId:Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedName, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, true, false, true, true)];
  [((id<JavaUtilList>) nil_chk(encodedQueryNamesAndValues_)) addWithId:encodedValue != nil ? Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedValue, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, true, false, true, true) : nil];
  return self;
}

- (Okhttp3HttpUrl_Builder *)setQueryParameterWithNSString:(NSString *)name
                                             withNSString:(NSString *)value {
  [self removeAllQueryParametersWithNSString:name];
  [self addQueryParameterWithNSString:name withNSString:value];
  return self;
}

- (Okhttp3HttpUrl_Builder *)setEncodedQueryParameterWithNSString:(NSString *)encodedName
                                                    withNSString:(NSString *)encodedValue {
  [self removeAllEncodedQueryParametersWithNSString:encodedName];
  [self addEncodedQueryParameterWithNSString:encodedName withNSString:encodedValue];
  return self;
}

- (Okhttp3HttpUrl_Builder *)removeAllQueryParametersWithNSString:(NSString *)name {
  if (name == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"name == null");
  if (encodedQueryNamesAndValues_ == nil) return self;
  NSString *nameToRemove = Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(name, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, false, false, true, true);
  Okhttp3HttpUrl_Builder_removeAllCanonicalQueryParametersWithNSString_(self, nameToRemove);
  return self;
}

- (Okhttp3HttpUrl_Builder *)removeAllEncodedQueryParametersWithNSString:(NSString *)encodedName {
  if (encodedName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"encodedName == null");
  if (encodedQueryNamesAndValues_ == nil) return self;
  Okhttp3HttpUrl_Builder_removeAllCanonicalQueryParametersWithNSString_(self, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedName, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET, true, false, true, true));
  return self;
}

- (void)removeAllCanonicalQueryParametersWithNSString:(NSString *)canonicalName {
  Okhttp3HttpUrl_Builder_removeAllCanonicalQueryParametersWithNSString_(self, canonicalName);
}

- (Okhttp3HttpUrl_Builder *)fragmentWithNSString:(NSString *)fragment {
  JreStrongAssign(&self->encodedFragment_, fragment != nil ? Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(fragment, Okhttp3HttpUrl_FRAGMENT_ENCODE_SET, false, false, false, false) : nil);
  return self;
}

- (Okhttp3HttpUrl_Builder *)encodedFragmentWithNSString:(NSString *)encodedFragment {
  JreStrongAssign(&self->encodedFragment_, encodedFragment != nil ? Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedFragment, Okhttp3HttpUrl_FRAGMENT_ENCODE_SET, true, false, false, false) : nil);
  return self;
}

- (Okhttp3HttpUrl_Builder *)reencodeForUri {
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(encodedPathSegments_)) size]; i < size; i++) {
    NSString *pathSegment = [encodedPathSegments_ getWithInt:i];
    [encodedPathSegments_ setWithInt:i withId:Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(pathSegment, Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET_URI, true, true, false, true)];
  }
  if (encodedQueryNamesAndValues_ != nil) {
    for (jint i = 0, size = [encodedQueryNamesAndValues_ size]; i < size; i++) {
      NSString *component = [((id<JavaUtilList>) nil_chk(encodedQueryNamesAndValues_)) getWithInt:i];
      if (component != nil) {
        [((id<JavaUtilList>) nil_chk(encodedQueryNamesAndValues_)) setWithInt:i withId:Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(component, Okhttp3HttpUrl_QUERY_COMPONENT_ENCODE_SET_URI, true, true, true, true)];
      }
    }
  }
  if (encodedFragment_ != nil) {
    JreStrongAssign(&encodedFragment_, Okhttp3HttpUrl_canonicalizeWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(encodedFragment_, Okhttp3HttpUrl_FRAGMENT_ENCODE_SET_URI, true, true, false, false));
  }
  return self;
}

- (Okhttp3HttpUrl *)build {
  if (scheme_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"scheme == null");
  if (host_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"host == null");
  return create_Okhttp3HttpUrl_initWithOkhttp3HttpUrl_Builder_(self);
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  [result appendWithNSString:scheme_];
  [result appendWithNSString:@"://"];
  if (![((NSString *) nil_chk(encodedUsername_)) java_isEmpty] || ![((NSString *) nil_chk(encodedPassword_)) java_isEmpty]) {
    [result appendWithNSString:encodedUsername_];
    if (![((NSString *) nil_chk(encodedPassword_)) java_isEmpty]) {
      [result appendWithChar:':'];
      [result appendWithNSString:encodedPassword_];
    }
    [result appendWithChar:'@'];
  }
  if ([((NSString *) nil_chk(host_)) java_indexOf:':'] != -1) {
    [result appendWithChar:'['];
    [result appendWithNSString:host_];
    [result appendWithChar:']'];
  }
  else {
    [result appendWithNSString:host_];
  }
  jint effectivePort = [self effectivePort];
  if (effectivePort != Okhttp3HttpUrl_defaultPortWithNSString_(scheme_)) {
    [result appendWithChar:':'];
    [result appendWithInt:effectivePort];
  }
  Okhttp3HttpUrl_pathSegmentsToStringWithJavaLangStringBuilder_withJavaUtilList_(result, encodedPathSegments_);
  if (encodedQueryNamesAndValues_ != nil) {
    [result appendWithChar:'?'];
    Okhttp3HttpUrl_namesAndValuesToQueryStringWithJavaLangStringBuilder_withJavaUtilList_(result, encodedQueryNamesAndValues_);
  }
  if (encodedFragment_ != nil) {
    [result appendWithChar:'#'];
    [result appendWithNSString:encodedFragment_];
  }
  return [result description];
}

- (Okhttp3HttpUrl_Builder_ParseResult *)parseWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)base
                                                   withNSString:(NSString *)input {
  jint pos = Okhttp3InternalUtil_skipLeadingAsciiWhitespaceWithNSString_withInt_withInt_(input, 0, [((NSString *) nil_chk(input)) java_length]);
  jint limit = Okhttp3InternalUtil_skipTrailingAsciiWhitespaceWithNSString_withInt_withInt_(input, pos, [input java_length]);
  jint schemeDelimiterOffset = Okhttp3HttpUrl_Builder_schemeDelimiterOffsetWithNSString_withInt_withInt_(input, pos, limit);
  if (schemeDelimiterOffset != -1) {
    if ([input java_regionMatches:true thisOffset:pos aString:@"https:" otherOffset:0 count:6]) {
      JreStrongAssign(&self->scheme_, @"https");
      pos += [@"https:" java_length];
    }
    else if ([input java_regionMatches:true thisOffset:pos aString:@"http:" otherOffset:0 count:5]) {
      JreStrongAssign(&self->scheme_, @"http");
      pos += [@"http:" java_length];
    }
    else {
      return JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, UNSUPPORTED_SCHEME);
    }
  }
  else if (base != nil) {
    JreStrongAssign(&self->scheme_, base->scheme_);
  }
  else {
    return JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, MISSING_SCHEME);
  }
  jboolean hasUsername = false;
  jboolean hasPassword = false;
  jint slashCount = Okhttp3HttpUrl_Builder_slashCountWithNSString_withInt_withInt_(input, pos, limit);
  if (slashCount >= 2 || base == nil || ![((NSString *) nil_chk(base->scheme_)) isEqual:self->scheme_]) {
    pos += slashCount;
    while (true) {
      jint componentDelimiterOffset = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(input, pos, limit, @"@/\\?#");
      jint c = componentDelimiterOffset != limit ? [input charAtWithInt:componentDelimiterOffset] : -1;
      {
        jint portColonOffset;
        switch (c) {
          case '@':
          if (!hasPassword) {
            jint passwordColonOffset = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(input, pos, componentDelimiterOffset, ':');
            NSString *canonicalUsername = Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos, passwordColonOffset, Okhttp3HttpUrl_USERNAME_ENCODE_SET, true, false, false, true);
            JreStrongAssign(&self->encodedUsername_, hasUsername ? JreStrcat("$$$", self->encodedUsername_, @"%40", canonicalUsername) : canonicalUsername);
            if (passwordColonOffset != componentDelimiterOffset) {
              hasPassword = true;
              JreStrongAssign(&self->encodedPassword_, Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, passwordColonOffset + 1, componentDelimiterOffset, Okhttp3HttpUrl_PASSWORD_ENCODE_SET, true, false, false, true));
            }
            hasUsername = true;
          }
          else {
            JreStrongAssign(&self->encodedPassword_, JreStrcat("$$$", self->encodedPassword_, @"%40", Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos, componentDelimiterOffset, Okhttp3HttpUrl_PASSWORD_ENCODE_SET, true, false, false, true)));
          }
          pos = componentDelimiterOffset + 1;
          break;
          case -1:
          case '/':
          case '\\':
          case '?':
          case '#':
          portColonOffset = Okhttp3HttpUrl_Builder_portColonOffsetWithNSString_withInt_withInt_(input, pos, componentDelimiterOffset);
          if (portColonOffset + 1 < componentDelimiterOffset) {
            JreStrongAssign(&self->host_, Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(input, pos, portColonOffset));
            self->port_ = Okhttp3HttpUrl_Builder_parsePortWithNSString_withInt_withInt_(input, portColonOffset + 1, componentDelimiterOffset);
            if (self->port_ == -1) return JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_PORT);
          }
          else {
            JreStrongAssign(&self->host_, Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(input, pos, portColonOffset));
            self->port_ = Okhttp3HttpUrl_defaultPortWithNSString_(self->scheme_);
          }
          if (self->host_ == nil) return JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_HOST);
          pos = componentDelimiterOffset;
          goto break_authority;
        }
      }
    }
    break_authority: ;
  }
  else {
    JreStrongAssign(&self->encodedUsername_, [base encodedUsername]);
    JreStrongAssign(&self->encodedPassword_, [base encodedPassword]);
    JreStrongAssign(&self->host_, base->host_);
    self->port_ = base->port_;
    [((id<JavaUtilList>) nil_chk(self->encodedPathSegments_)) clear];
    [self->encodedPathSegments_ addAllWithJavaUtilCollection:[base encodedPathSegments]];
    if (pos == limit || [input charAtWithInt:pos] == '#') {
      [self encodedQueryWithNSString:[base encodedQuery]];
    }
  }
  jint pathDelimiterOffset = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(input, pos, limit, @"?#");
  Okhttp3HttpUrl_Builder_resolvePathWithNSString_withInt_withInt_(self, input, pos, pathDelimiterOffset);
  pos = pathDelimiterOffset;
  if (pos < limit && [input charAtWithInt:pos] == '?') {
    jint queryDelimiterOffset = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withChar_(input, pos, limit, '#');
    JreStrongAssign(&self->encodedQueryNamesAndValues_, Okhttp3HttpUrl_queryStringToNamesAndValuesWithNSString_(Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos + 1, queryDelimiterOffset, Okhttp3HttpUrl_QUERY_ENCODE_SET, true, false, true, true)));
    pos = queryDelimiterOffset;
  }
  if (pos < limit && [input charAtWithInt:pos] == '#') {
    JreStrongAssign(&self->encodedFragment_, Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos + 1, limit, Okhttp3HttpUrl_FRAGMENT_ENCODE_SET, true, false, false, false));
  }
  return JreLoadEnum(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS);
}

- (void)resolvePathWithNSString:(NSString *)input
                        withInt:(jint)pos
                        withInt:(jint)limit {
  Okhttp3HttpUrl_Builder_resolvePathWithNSString_withInt_withInt_(self, input, pos, limit);
}

- (void)pushWithNSString:(NSString *)input
                 withInt:(jint)pos
                 withInt:(jint)limit
             withBoolean:(jboolean)addTrailingSlash
             withBoolean:(jboolean)alreadyEncoded {
  Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(self, input, pos, limit, addTrailingSlash, alreadyEncoded);
}

- (jboolean)isDotWithNSString:(NSString *)input {
  return Okhttp3HttpUrl_Builder_isDotWithNSString_(self, input);
}

- (jboolean)isDotDotWithNSString:(NSString *)input {
  return Okhttp3HttpUrl_Builder_isDotDotWithNSString_(self, input);
}

- (void)pop {
  Okhttp3HttpUrl_Builder_pop(self);
}

+ (jint)schemeDelimiterOffsetWithNSString:(NSString *)input
                                  withInt:(jint)pos
                                  withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_schemeDelimiterOffsetWithNSString_withInt_withInt_(input, pos, limit);
}

+ (jint)slashCountWithNSString:(NSString *)input
                       withInt:(jint)pos
                       withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_slashCountWithNSString_withInt_withInt_(input, pos, limit);
}

+ (jint)portColonOffsetWithNSString:(NSString *)input
                            withInt:(jint)pos
                            withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_portColonOffsetWithNSString_withInt_withInt_(input, pos, limit);
}

+ (NSString *)canonicalizeHostWithNSString:(NSString *)input
                                   withInt:(jint)pos
                                   withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(input, pos, limit);
}

+ (JavaNetInetAddress *)decodeIpv6WithNSString:(NSString *)input
                                       withInt:(jint)pos
                                       withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_decodeIpv6WithNSString_withInt_withInt_(input, pos, limit);
}

+ (jboolean)decodeIpv4SuffixWithNSString:(NSString *)input
                                 withInt:(jint)pos
                                 withInt:(jint)limit
                           withByteArray:(IOSByteArray *)address
                                 withInt:(jint)addressOffset {
  return Okhttp3HttpUrl_Builder_decodeIpv4SuffixWithNSString_withInt_withInt_withByteArray_withInt_(input, pos, limit, address, addressOffset);
}

+ (NSString *)inet6AddressToAsciiWithByteArray:(IOSByteArray *)address {
  return Okhttp3HttpUrl_Builder_inet6AddressToAsciiWithByteArray_(address);
}

+ (jint)parsePortWithNSString:(NSString *)input
                      withInt:(jint)pos
                      withInt:(jint)limit {
  return Okhttp3HttpUrl_Builder_parsePortWithNSString_withInt_withInt_(input, pos, limit);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(encodedUsername_);
  RELEASE_(encodedPassword_);
  RELEASE_(host_);
  RELEASE_(encodedPathSegments_);
  RELEASE_(encodedQueryNamesAndValues_);
  RELEASE_(encodedFragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x2, 10, 13, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 17, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 20, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 24, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 27, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder_ParseResult;", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 38, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 39, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 40, 35, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 41, 35, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 42, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 43, 35, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0xa, 44, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 45, 46, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 47, 48, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 49, 35, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(schemeWithNSString:);
  methods[2].selector = @selector(usernameWithNSString:);
  methods[3].selector = @selector(encodedUsernameWithNSString:);
  methods[4].selector = @selector(passwordWithNSString:);
  methods[5].selector = @selector(encodedPasswordWithNSString:);
  methods[6].selector = @selector(hostWithNSString:);
  methods[7].selector = @selector(portWithInt:);
  methods[8].selector = @selector(effectivePort);
  methods[9].selector = @selector(addPathSegmentWithNSString:);
  methods[10].selector = @selector(addPathSegmentsWithNSString:);
  methods[11].selector = @selector(addEncodedPathSegmentWithNSString:);
  methods[12].selector = @selector(addEncodedPathSegmentsWithNSString:);
  methods[13].selector = @selector(addPathSegmentsWithNSString:withBoolean:);
  methods[14].selector = @selector(setPathSegmentWithInt:withNSString:);
  methods[15].selector = @selector(setEncodedPathSegmentWithInt:withNSString:);
  methods[16].selector = @selector(removePathSegmentWithInt:);
  methods[17].selector = @selector(encodedPathWithNSString:);
  methods[18].selector = @selector(queryWithNSString:);
  methods[19].selector = @selector(encodedQueryWithNSString:);
  methods[20].selector = @selector(addQueryParameterWithNSString:withNSString:);
  methods[21].selector = @selector(addEncodedQueryParameterWithNSString:withNSString:);
  methods[22].selector = @selector(setQueryParameterWithNSString:withNSString:);
  methods[23].selector = @selector(setEncodedQueryParameterWithNSString:withNSString:);
  methods[24].selector = @selector(removeAllQueryParametersWithNSString:);
  methods[25].selector = @selector(removeAllEncodedQueryParametersWithNSString:);
  methods[26].selector = @selector(removeAllCanonicalQueryParametersWithNSString:);
  methods[27].selector = @selector(fragmentWithNSString:);
  methods[28].selector = @selector(encodedFragmentWithNSString:);
  methods[29].selector = @selector(reencodeForUri);
  methods[30].selector = @selector(build);
  methods[31].selector = @selector(description);
  methods[32].selector = @selector(parseWithOkhttp3HttpUrl:withNSString:);
  methods[33].selector = @selector(resolvePathWithNSString:withInt:withInt:);
  methods[34].selector = @selector(pushWithNSString:withInt:withInt:withBoolean:withBoolean:);
  methods[35].selector = @selector(isDotWithNSString:);
  methods[36].selector = @selector(isDotDotWithNSString:);
  methods[37].selector = @selector(pop);
  methods[38].selector = @selector(schemeDelimiterOffsetWithNSString:withInt:withInt:);
  methods[39].selector = @selector(slashCountWithNSString:withInt:withInt:);
  methods[40].selector = @selector(portColonOffsetWithNSString:withInt:withInt:);
  methods[41].selector = @selector(canonicalizeHostWithNSString:withInt:withInt:);
  methods[42].selector = @selector(decodeIpv6WithNSString:withInt:withInt:);
  methods[43].selector = @selector(decodeIpv4SuffixWithNSString:withInt:withInt:withByteArray:withInt:);
  methods[44].selector = @selector(inet6AddressToAsciiWithByteArray:);
  methods[45].selector = @selector(parsePortWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encodedUsername_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encodedPassword_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encodedPathSegments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 50, -1 },
    { "encodedQueryNamesAndValues_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 50, -1 },
    { "encodedFragment_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "scheme", "LNSString;", "username", "encodedUsername", "password", "encodedPassword", "host", "port", "I", "addPathSegment", "addPathSegments", "addEncodedPathSegment", "addEncodedPathSegments", "LNSString;Z", "setPathSegment", "ILNSString;", "setEncodedPathSegment", "removePathSegment", "encodedPath", "query", "encodedQuery", "addQueryParameter", "LNSString;LNSString;", "addEncodedQueryParameter", "setQueryParameter", "setEncodedQueryParameter", "removeAllQueryParameters", "removeAllEncodedQueryParameters", "removeAllCanonicalQueryParameters", "fragment", "encodedFragment", "toString", "parse", "LOkhttp3HttpUrl;LNSString;", "resolvePath", "LNSString;II", "push", "LNSString;IIZZ", "isDot", "isDotDot", "schemeDelimiterOffset", "slashCount", "portColonOffset", "canonicalizeHost", "decodeIpv6", "decodeIpv4Suffix", "LNSString;II[BI", "inet6AddressToAscii", "[B", "parsePort", "Ljava/util/List<Ljava/lang/String;>;", "LOkhttp3HttpUrl;", "LOkhttp3HttpUrl_Builder_ParseResult;" };
  static const J2ObjcClassInfo _Okhttp3HttpUrl_Builder = { "Builder", "okhttp3", ptrTable, methods, fields, 7, 0x19, 46, 8, 51, 52, -1, -1, -1 };
  return &_Okhttp3HttpUrl_Builder;
}

@end

void Okhttp3HttpUrl_Builder_init(Okhttp3HttpUrl_Builder *self) {
  NSObject_init(self);
  JreStrongAssign(&self->encodedUsername_, @"");
  JreStrongAssign(&self->encodedPassword_, @"");
  self->port_ = -1;
  JreStrongAssignAndConsume(&self->encodedPathSegments_, new_JavaUtilArrayList_init());
  [self->encodedPathSegments_ addWithId:@""];
}

Okhttp3HttpUrl_Builder *new_Okhttp3HttpUrl_Builder_init() {
  J2OBJC_NEW_IMPL(Okhttp3HttpUrl_Builder, init)
}

Okhttp3HttpUrl_Builder *create_Okhttp3HttpUrl_Builder_init() {
  J2OBJC_CREATE_IMPL(Okhttp3HttpUrl_Builder, init)
}

Okhttp3HttpUrl_Builder *Okhttp3HttpUrl_Builder_addPathSegmentsWithNSString_withBoolean_(Okhttp3HttpUrl_Builder *self, NSString *pathSegments, jboolean alreadyEncoded) {
  jint offset = 0;
  do {
    jint segmentEnd = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(pathSegments, offset, [((NSString *) nil_chk(pathSegments)) java_length], @"/\\");
    jboolean addTrailingSlash = segmentEnd < [pathSegments java_length];
    Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(self, pathSegments, offset, segmentEnd, addTrailingSlash, alreadyEncoded);
    offset = segmentEnd + 1;
  }
  while (offset <= [pathSegments java_length]);
  return self;
}

void Okhttp3HttpUrl_Builder_removeAllCanonicalQueryParametersWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *canonicalName) {
  for (jint i = [((id<JavaUtilList>) nil_chk(self->encodedQueryNamesAndValues_)) size] - 2; i >= 0; i -= 2) {
    if ([((NSString *) nil_chk(canonicalName)) isEqual:[((id<JavaUtilList>) nil_chk(self->encodedQueryNamesAndValues_)) getWithInt:i]]) {
      [((id<JavaUtilList>) nil_chk(self->encodedQueryNamesAndValues_)) removeWithInt:i + 1];
      [((id<JavaUtilList>) nil_chk(self->encodedQueryNamesAndValues_)) removeWithInt:i];
      if ([((id<JavaUtilList>) nil_chk(self->encodedQueryNamesAndValues_)) isEmpty]) {
        JreStrongAssign(&self->encodedQueryNamesAndValues_, nil);
        return;
      }
    }
  }
}

void Okhttp3HttpUrl_Builder_resolvePathWithNSString_withInt_withInt_(Okhttp3HttpUrl_Builder *self, NSString *input, jint pos, jint limit) {
  if (pos == limit) {
    return;
  }
  jchar c = [((NSString *) nil_chk(input)) charAtWithInt:pos];
  if (c == '/' || c == '\\') {
    [((id<JavaUtilList>) nil_chk(self->encodedPathSegments_)) clear];
    [self->encodedPathSegments_ addWithId:@""];
    pos++;
  }
  else {
    [((id<JavaUtilList>) nil_chk(self->encodedPathSegments_)) setWithInt:[self->encodedPathSegments_ size] - 1 withId:@""];
  }
  for (jint i = pos; i < limit; ) {
    jint pathSegmentDelimiterOffset = Okhttp3InternalUtil_delimiterOffsetWithNSString_withInt_withInt_withNSString_(input, i, limit, @"/\\");
    jboolean segmentHasTrailingSlash = pathSegmentDelimiterOffset < limit;
    Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(self, input, i, pathSegmentDelimiterOffset, segmentHasTrailingSlash, true);
    i = pathSegmentDelimiterOffset;
    if (segmentHasTrailingSlash) i++;
  }
}

void Okhttp3HttpUrl_Builder_pushWithNSString_withInt_withInt_withBoolean_withBoolean_(Okhttp3HttpUrl_Builder *self, NSString *input, jint pos, jint limit, jboolean addTrailingSlash, jboolean alreadyEncoded) {
  NSString *segment = Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos, limit, Okhttp3HttpUrl_PATH_SEGMENT_ENCODE_SET, alreadyEncoded, false, false, true);
  if (Okhttp3HttpUrl_Builder_isDotWithNSString_(self, segment)) {
    return;
  }
  if (Okhttp3HttpUrl_Builder_isDotDotWithNSString_(self, segment)) {
    Okhttp3HttpUrl_Builder_pop(self);
    return;
  }
  if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(self->encodedPathSegments_)) getWithInt:[self->encodedPathSegments_ size] - 1])) java_isEmpty]) {
    [self->encodedPathSegments_ setWithInt:[self->encodedPathSegments_ size] - 1 withId:segment];
  }
  else {
    [self->encodedPathSegments_ addWithId:segment];
  }
  if (addTrailingSlash) {
    [self->encodedPathSegments_ addWithId:@""];
  }
}

jboolean Okhttp3HttpUrl_Builder_isDotWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *input) {
  return [((NSString *) nil_chk(input)) isEqual:@"."] || [input java_equalsIgnoreCase:@"%2e"];
}

jboolean Okhttp3HttpUrl_Builder_isDotDotWithNSString_(Okhttp3HttpUrl_Builder *self, NSString *input) {
  return [((NSString *) nil_chk(input)) isEqual:@".."] || [input java_equalsIgnoreCase:@"%2e."] || [input java_equalsIgnoreCase:@".%2e"] || [input java_equalsIgnoreCase:@"%2e%2e"];
}

void Okhttp3HttpUrl_Builder_pop(Okhttp3HttpUrl_Builder *self) {
  NSString *removed = [((id<JavaUtilList>) nil_chk(self->encodedPathSegments_)) removeWithInt:[self->encodedPathSegments_ size] - 1];
  if ([((NSString *) nil_chk(removed)) java_isEmpty] && ![self->encodedPathSegments_ isEmpty]) {
    [self->encodedPathSegments_ setWithInt:[self->encodedPathSegments_ size] - 1 withId:@""];
  }
  else {
    [self->encodedPathSegments_ addWithId:@""];
  }
}

jint Okhttp3HttpUrl_Builder_schemeDelimiterOffsetWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  if (limit - pos < 2) return -1;
  jchar c0 = [((NSString *) nil_chk(input)) charAtWithInt:pos];
  if ((c0 < 'a' || c0 > 'z') && (c0 < 'A' || c0 > 'Z')) return -1;
  for (jint i = pos + 1; i < limit; i++) {
    jchar c = [input charAtWithInt:i];
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.') {
      continue;
    }
    else if (c == ':') {
      return i;
    }
    else {
      return -1;
    }
  }
  return -1;
}

jint Okhttp3HttpUrl_Builder_slashCountWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  jint slashCount = 0;
  while (pos < limit) {
    jchar c = [((NSString *) nil_chk(input)) charAtWithInt:pos];
    if (c == '\\' || c == '/') {
      slashCount++;
      pos++;
    }
    else {
      break;
    }
  }
  return slashCount;
}

jint Okhttp3HttpUrl_Builder_portColonOffsetWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  for (jint i = pos; i < limit; i++) {
    switch ([((NSString *) nil_chk(input)) charAtWithInt:i]) {
      case '[':
      while (++i < limit) {
        if ([input charAtWithInt:i] == ']') break;
      }
      break;
      case ':':
      return i;
    }
  }
  return limit;
}

NSString *Okhttp3HttpUrl_Builder_canonicalizeHostWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  NSString *percentDecoded = Okhttp3HttpUrl_percentDecodeWithNSString_withInt_withInt_withBoolean_(input, pos, limit, false);
  if ([((NSString *) nil_chk(percentDecoded)) java_contains:@":"]) {
    JavaNetInetAddress *inetAddress = [percentDecoded java_hasPrefix:@"["] && [percentDecoded java_hasSuffix:@"]"] ? Okhttp3HttpUrl_Builder_decodeIpv6WithNSString_withInt_withInt_(percentDecoded, 1, [percentDecoded java_length] - 1) : Okhttp3HttpUrl_Builder_decodeIpv6WithNSString_withInt_withInt_(percentDecoded, 0, [percentDecoded java_length]);
    if (inetAddress == nil) return nil;
    IOSByteArray *address = [inetAddress getAddress];
    if (((IOSByteArray *) nil_chk(address))->size_ == 16) return Okhttp3HttpUrl_Builder_inet6AddressToAsciiWithByteArray_(address);
    @throw create_JavaLangAssertionError_init();
  }
  return Okhttp3InternalUtil_domainToAsciiWithNSString_(percentDecoded);
}

JavaNetInetAddress *Okhttp3HttpUrl_Builder_decodeIpv6WithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  IOSByteArray *address = [IOSByteArray arrayWithLength:16];
  jint b = 0;
  jint compress = -1;
  jint groupOffset = -1;
  for (jint i = pos; i < limit; ) {
    if (b == address->size_) return nil;
    if (i + 2 <= limit && [((NSString *) nil_chk(input)) java_regionMatches:i aString:@"::" otherOffset:0 count:2]) {
      if (compress != -1) return nil;
      i += 2;
      b += 2;
      compress = b;
      if (i == limit) break;
    }
    else if (b != 0) {
      if ([((NSString *) nil_chk(input)) java_regionMatches:i aString:@":" otherOffset:0 count:1]) {
        i++;
      }
      else if ([input java_regionMatches:i aString:@"." otherOffset:0 count:1]) {
        if (!Okhttp3HttpUrl_Builder_decodeIpv4SuffixWithNSString_withInt_withInt_withByteArray_withInt_(input, groupOffset, limit, address, b - 2)) return nil;
        b += 2;
        break;
      }
      else {
        return nil;
      }
    }
    jint value = 0;
    groupOffset = i;
    for (; i < limit; i++) {
      jchar c = [((NSString *) nil_chk(input)) charAtWithInt:i];
      jint hexDigit = Okhttp3HttpUrl_decodeHexDigitWithChar_(c);
      if (hexDigit == -1) break;
      value = (JreLShift32(value, 4)) + hexDigit;
    }
    jint groupLength = i - groupOffset;
    if (groupLength == 0 || groupLength > 4) return nil;
    *IOSByteArray_GetRef(address, b++) = (jbyte) ((JreURShift32(value, 8)) & (jint) 0xff);
    *IOSByteArray_GetRef(address, b++) = (jbyte) (value & (jint) 0xff);
  }
  if (b != address->size_) {
    if (compress == -1) return nil;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(address, compress, address, address->size_ - (b - compress), b - compress);
    JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(address, compress, compress + (address->size_ - b), (jbyte) 0);
  }
  @try {
    return JavaNetInetAddress_getByAddressWithByteArray_(address);
  }
  @catch (JavaNetUnknownHostException *e) {
    @throw create_JavaLangAssertionError_init();
  }
}

jboolean Okhttp3HttpUrl_Builder_decodeIpv4SuffixWithNSString_withInt_withInt_withByteArray_withInt_(NSString *input, jint pos, jint limit, IOSByteArray *address, jint addressOffset) {
  Okhttp3HttpUrl_Builder_initialize();
  jint b = addressOffset;
  for (jint i = pos; i < limit; ) {
    if (b == ((IOSByteArray *) nil_chk(address))->size_) return false;
    if (b != addressOffset) {
      if ([((NSString *) nil_chk(input)) charAtWithInt:i] != '.') return false;
      i++;
    }
    jint value = 0;
    jint groupOffset = i;
    for (; i < limit; i++) {
      jchar c = [((NSString *) nil_chk(input)) charAtWithInt:i];
      if (c < '0' || c > '9') break;
      if (value == 0 && groupOffset != i) return false;
      value = (value * 10) + c - '0';
      if (value > 255) return false;
    }
    jint groupLength = i - groupOffset;
    if (groupLength == 0) return false;
    *IOSByteArray_GetRef(address, b++) = (jbyte) value;
  }
  if (b != addressOffset + 4) return false;
  return true;
}

NSString *Okhttp3HttpUrl_Builder_inet6AddressToAsciiWithByteArray_(IOSByteArray *address) {
  Okhttp3HttpUrl_Builder_initialize();
  jint longestRunOffset = -1;
  jint longestRunLength = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(address))->size_; i += 2) {
    jint currentRunOffset = i;
    while (i < 16 && IOSByteArray_Get(address, i) == 0 && IOSByteArray_Get(address, i + 1) == 0) {
      i += 2;
    }
    jint currentRunLength = i - currentRunOffset;
    if (currentRunLength > longestRunLength) {
      longestRunOffset = currentRunOffset;
      longestRunLength = currentRunLength;
    }
  }
  OkioBuffer *result = create_OkioBuffer_init();
  for (jint i = 0; i < address->size_; ) {
    if (i == longestRunOffset) {
      [result writeByteWithInt:':'];
      i += longestRunLength;
      if (i == 16) [result writeByteWithInt:':'];
    }
    else {
      if (i > 0) [result writeByteWithInt:':'];
      jint group = (JreLShift32((IOSByteArray_Get(address, i) & (jint) 0xff), 8)) | (IOSByteArray_Get(address, i + 1) & (jint) 0xff);
      [result writeHexadecimalUnsignedLongWithLong:group];
      i += 2;
    }
  }
  return [result readUtf8];
}

jint Okhttp3HttpUrl_Builder_parsePortWithNSString_withInt_withInt_(NSString *input, jint pos, jint limit) {
  Okhttp3HttpUrl_Builder_initialize();
  @try {
    NSString *portString = Okhttp3HttpUrl_canonicalizeWithNSString_withInt_withInt_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_(input, pos, limit, @"", false, false, false, true);
    jint i = JavaLangInteger_parseIntWithNSString_(portString);
    if (i > 0 && i <= 65535) return i;
    return -1;
  }
  @catch (JavaLangNumberFormatException *e) {
    return -1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3HttpUrl_Builder)

J2OBJC_INITIALIZED_DEFN(Okhttp3HttpUrl_Builder_ParseResult)

Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_values_[5];

@implementation Okhttp3HttpUrl_Builder_ParseResult

+ (Okhttp3HttpUrl_Builder_ParseResult *)SUCCESS {
  return JreEnum(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS);
}

+ (Okhttp3HttpUrl_Builder_ParseResult *)MISSING_SCHEME {
  return JreEnum(Okhttp3HttpUrl_Builder_ParseResult, MISSING_SCHEME);
}

+ (Okhttp3HttpUrl_Builder_ParseResult *)UNSUPPORTED_SCHEME {
  return JreEnum(Okhttp3HttpUrl_Builder_ParseResult, UNSUPPORTED_SCHEME);
}

+ (Okhttp3HttpUrl_Builder_ParseResult *)INVALID_PORT {
  return JreEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_PORT);
}

+ (Okhttp3HttpUrl_Builder_ParseResult *)INVALID_HOST {
  return JreEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_HOST);
}

+ (IOSObjectArray *)values {
  return Okhttp3HttpUrl_Builder_ParseResult_values();
}

+ (Okhttp3HttpUrl_Builder_ParseResult *)valueOfWithNSString:(NSString *)name {
  return Okhttp3HttpUrl_Builder_ParseResult_valueOfWithNSString_(name);
}

- (Okhttp3HttpUrl_Builder_ParseResult_Enum)toNSEnum {
  return (Okhttp3HttpUrl_Builder_ParseResult_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOkhttp3HttpUrl_Builder_ParseResult;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl_Builder_ParseResult;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SUCCESS", "LOkhttp3HttpUrl_Builder_ParseResult;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MISSING_SCHEME", "LOkhttp3HttpUrl_Builder_ParseResult;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "UNSUPPORTED_SCHEME", "LOkhttp3HttpUrl_Builder_ParseResult;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "INVALID_PORT", "LOkhttp3HttpUrl_Builder_ParseResult;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "INVALID_HOST", "LOkhttp3HttpUrl_Builder_ParseResult;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(Okhttp3HttpUrl_Builder_ParseResult, SUCCESS), &JreEnum(Okhttp3HttpUrl_Builder_ParseResult, MISSING_SCHEME), &JreEnum(Okhttp3HttpUrl_Builder_ParseResult, UNSUPPORTED_SCHEME), &JreEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_PORT), &JreEnum(Okhttp3HttpUrl_Builder_ParseResult, INVALID_HOST), "LOkhttp3HttpUrl_Builder;", "Ljava/lang/Enum<Lokhttp3/HttpUrl$Builder$ParseResult;>;" };
  static const J2ObjcClassInfo _Okhttp3HttpUrl_Builder_ParseResult = { "ParseResult", "okhttp3", ptrTable, methods, fields, 7, 0x4018, 2, 5, 7, -1, -1, 8, -1 };
  return &_Okhttp3HttpUrl_Builder_ParseResult;
}

+ (void)initialize {
  if (self == [Okhttp3HttpUrl_Builder_ParseResult class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      (Okhttp3HttpUrl_Builder_ParseResult_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      Okhttp3HttpUrl_Builder_ParseResult_initWithNSString_withInt_(e, JreEnumConstantName(Okhttp3HttpUrl_Builder_ParseResult_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(Okhttp3HttpUrl_Builder_ParseResult)
  }
}

@end

void Okhttp3HttpUrl_Builder_ParseResult_initWithNSString_withInt_(Okhttp3HttpUrl_Builder_ParseResult *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *Okhttp3HttpUrl_Builder_ParseResult_values() {
  Okhttp3HttpUrl_Builder_ParseResult_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3HttpUrl_Builder_ParseResult_values_ count:5 type:Okhttp3HttpUrl_Builder_ParseResult_class_()];
}

Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_valueOfWithNSString_(NSString *name) {
  Okhttp3HttpUrl_Builder_ParseResult_initialize();
  for (int i = 0; i < 5; i++) {
    Okhttp3HttpUrl_Builder_ParseResult *e = Okhttp3HttpUrl_Builder_ParseResult_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3HttpUrl_Builder_ParseResult *Okhttp3HttpUrl_Builder_ParseResult_fromOrdinal(NSUInteger ordinal) {
  Okhttp3HttpUrl_Builder_ParseResult_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return Okhttp3HttpUrl_Builder_ParseResult_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3HttpUrl_Builder_ParseResult)
