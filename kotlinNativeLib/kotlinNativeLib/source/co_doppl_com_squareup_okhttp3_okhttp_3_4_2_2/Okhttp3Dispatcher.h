//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3Dispatcher")
#ifdef RESTRICT_Okhttp3Dispatcher
#define INCLUDE_ALL_Okhttp3Dispatcher 0
#else
#define INCLUDE_ALL_Okhttp3Dispatcher 1
#endif
#undef RESTRICT_Okhttp3Dispatcher

#if !defined (Okhttp3Dispatcher_) && (INCLUDE_ALL_Okhttp3Dispatcher || defined(INCLUDE_Okhttp3Dispatcher))
#define Okhttp3Dispatcher_

@class Okhttp3RealCall;
@class Okhttp3RealCall_AsyncCall;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilList;

@interface Okhttp3Dispatcher : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executorService;

- (void)cancelAll;

- (id<JavaUtilConcurrentExecutorService>)executorService;

- (jint)getMaxRequests;

- (jint)getMaxRequestsPerHost;

- (id<JavaUtilList>)queuedCalls;

- (jint)queuedCallsCount;

- (id<JavaUtilList>)runningCalls;

- (jint)runningCallsCount;

- (void)setIdleCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)idleCallback;

- (void)setMaxRequestsWithInt:(jint)maxRequests;

- (void)setMaxRequestsPerHostWithInt:(jint)maxRequestsPerHost;

#pragma mark Package-Private

- (void)enqueueWithOkhttp3RealCall_AsyncCall:(Okhttp3RealCall_AsyncCall *)call;

- (void)executedWithOkhttp3RealCall:(Okhttp3RealCall *)call;

- (void)finishedWithOkhttp3RealCall_AsyncCall:(Okhttp3RealCall_AsyncCall *)call;

- (void)finishedWithOkhttp3RealCall:(Okhttp3RealCall *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3Dispatcher)

FOUNDATION_EXPORT void Okhttp3Dispatcher_initWithJavaUtilConcurrentExecutorService_(Okhttp3Dispatcher *self, id<JavaUtilConcurrentExecutorService> executorService);

FOUNDATION_EXPORT Okhttp3Dispatcher *new_Okhttp3Dispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3Dispatcher *create_Okhttp3Dispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService);

FOUNDATION_EXPORT void Okhttp3Dispatcher_init(Okhttp3Dispatcher *self);

FOUNDATION_EXPORT Okhttp3Dispatcher *new_Okhttp3Dispatcher_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3Dispatcher *create_Okhttp3Dispatcher_init();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3Dispatcher)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3Dispatcher")
