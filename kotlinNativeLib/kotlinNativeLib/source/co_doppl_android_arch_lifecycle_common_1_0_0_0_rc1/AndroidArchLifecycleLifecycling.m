//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchLifecycleClassesInfoCache.h"
#include "AndroidArchLifecycleCompositeGeneratedAdaptersObserver.h"
#include "AndroidArchLifecycleFullLifecycleObserver.h"
#include "AndroidArchLifecycleFullLifecycleObserverAdapter.h"
#include "AndroidArchLifecycleGeneratedAdapter.h"
#include "AndroidArchLifecycleGenericLifecycleObserver.h"
#include "AndroidArchLifecycleLifecycleObserver.h"
#include "AndroidArchLifecycleLifecycling.h"
#include "AndroidArchLifecycleReflectiveGenericLifecycleObserver.h"
#include "AndroidArchLifecycleSingleGeneratedAdapterObserver.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface AndroidArchLifecycleLifecycling ()

+ (id<AndroidArchLifecycleGeneratedAdapter>)createGeneratedAdapterWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor
                                                                                          withId:(id)object;

+ (JavaLangReflectConstructor * __nullable)generatedConstructorWithIOSClass:(IOSClass *)klass;

+ (jint)getObserverConstructorTypeWithIOSClass:(IOSClass *)klass;

+ (jint)resolveObserverCallbackTypeWithIOSClass:(IOSClass *)klass;

+ (jboolean)isLifecycleParentWithIOSClass:(IOSClass *)klass;

@end

inline jint AndroidArchLifecycleLifecycling_get_REFLECTIVE_CALLBACK();
#define AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchLifecycleLifecycling, REFLECTIVE_CALLBACK, jint)

inline jint AndroidArchLifecycleLifecycling_get_GENERATED_CALLBACK();
#define AndroidArchLifecycleLifecycling_GENERATED_CALLBACK 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidArchLifecycleLifecycling, GENERATED_CALLBACK, jint)

inline id<JavaUtilMap> AndroidArchLifecycleLifecycling_get_sCallbackCache();
inline id<JavaUtilMap> AndroidArchLifecycleLifecycling_set_sCallbackCache(id<JavaUtilMap> value);
static id<JavaUtilMap> AndroidArchLifecycleLifecycling_sCallbackCache;
J2OBJC_STATIC_FIELD_OBJ(AndroidArchLifecycleLifecycling, sCallbackCache, id<JavaUtilMap>)

inline id<JavaUtilMap> AndroidArchLifecycleLifecycling_get_sClassToAdapters();
inline id<JavaUtilMap> AndroidArchLifecycleLifecycling_set_sClassToAdapters(id<JavaUtilMap> value);
static id<JavaUtilMap> AndroidArchLifecycleLifecycling_sClassToAdapters;
J2OBJC_STATIC_FIELD_OBJ(AndroidArchLifecycleLifecycling, sClassToAdapters, id<JavaUtilMap>)

__attribute__((unused)) static id<AndroidArchLifecycleGeneratedAdapter> AndroidArchLifecycleLifecycling_createGeneratedAdapterWithJavaLangReflectConstructor_withId_(JavaLangReflectConstructor *constructor, id object);

__attribute__((unused)) static JavaLangReflectConstructor *AndroidArchLifecycleLifecycling_generatedConstructorWithIOSClass_(IOSClass *klass);

__attribute__((unused)) static jint AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(IOSClass *klass);

__attribute__((unused)) static jint AndroidArchLifecycleLifecycling_resolveObserverCallbackTypeWithIOSClass_(IOSClass *klass);

__attribute__((unused)) static jboolean AndroidArchLifecycleLifecycling_isLifecycleParentWithIOSClass_(IOSClass *klass);

J2OBJC_INITIALIZED_DEFN(AndroidArchLifecycleLifecycling)

@implementation AndroidArchLifecycleLifecycling

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchLifecycleLifecycling_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<AndroidArchLifecycleGenericLifecycleObserver> __nonnull)getCallbackWithId:(id)object {
  return AndroidArchLifecycleLifecycling_getCallbackWithId_(object);
}

+ (id<AndroidArchLifecycleGeneratedAdapter>)createGeneratedAdapterWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor
                                                                                          withId:(id)object {
  return AndroidArchLifecycleLifecycling_createGeneratedAdapterWithJavaLangReflectConstructor_withId_(constructor, object);
}

+ (JavaLangReflectConstructor * __nullable)generatedConstructorWithIOSClass:(IOSClass *)klass {
  return AndroidArchLifecycleLifecycling_generatedConstructorWithIOSClass_(klass);
}

+ (jint)getObserverConstructorTypeWithIOSClass:(IOSClass *)klass {
  return AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(klass);
}

+ (jint)resolveObserverCallbackTypeWithIOSClass:(IOSClass *)klass {
  return AndroidArchLifecycleLifecycling_resolveObserverCallbackTypeWithIOSClass_(klass);
}

+ (jboolean)isLifecycleParentWithIOSClass:(IOSClass *)klass {
  return AndroidArchLifecycleLifecycling_isLifecycleParentWithIOSClass_(klass);
}

+ (NSString *)getAdapterNameWithNSString:(NSString *)className_ {
  return AndroidArchLifecycleLifecycling_getAdapterNameWithNSString_(className_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleGenericLifecycleObserver;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleGeneratedAdapter;", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangReflectConstructor;", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0xa, 8, 6, -1, 9, -1, -1 },
    { NULL, "I", 0xa, 10, 6, -1, 9, -1, -1 },
    { NULL, "Z", 0xa, 11, 6, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCallbackWithId:);
  methods[2].selector = @selector(createGeneratedAdapterWithJavaLangReflectConstructor:withId:);
  methods[3].selector = @selector(generatedConstructorWithIOSClass:);
  methods[4].selector = @selector(getObserverConstructorTypeWithIOSClass:);
  methods[5].selector = @selector(resolveObserverCallbackTypeWithIOSClass:);
  methods[6].selector = @selector(isLifecycleParentWithIOSClass:);
  methods[7].selector = @selector(getAdapterNameWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REFLECTIVE_CALLBACK", "I", .constantValue.asInt = AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK, 0x1a, -1, -1, -1, -1 },
    { "GENERATED_CALLBACK", "I", .constantValue.asInt = AndroidArchLifecycleLifecycling_GENERATED_CALLBACK, 0x1a, -1, -1, -1, -1 },
    { "sCallbackCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 15, 16, -1 },
    { "sClassToAdapters", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 17, 18, -1 },
  };
  static const void *ptrTable[] = { "getCallback", "LNSObject;", "createGeneratedAdapter", "LJavaLangReflectConstructor;LNSObject;", "(Ljava/lang/reflect/Constructor<+Landroid/arch/lifecycle/GeneratedAdapter;>;Ljava/lang/Object;)Landroid/arch/lifecycle/GeneratedAdapter;", "generatedConstructor", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/reflect/Constructor<+Landroid/arch/lifecycle/GeneratedAdapter;>;", "getObserverConstructorType", "(Ljava/lang/Class<*>;)I", "resolveObserverCallbackType", "isLifecycleParent", "(Ljava/lang/Class<*>;)Z", "getAdapterName", "LNSString;", &AndroidArchLifecycleLifecycling_sCallbackCache, "Ljava/util/Map<Ljava/lang/Class;Ljava/lang/Integer;>;", &AndroidArchLifecycleLifecycling_sClassToAdapters, "Ljava/util/Map<Ljava/lang/Class;Ljava/util/List<Ljava/lang/reflect/Constructor<+Landroid/arch/lifecycle/GeneratedAdapter;>;>;>;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLifecycling = { "Lifecycling", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleLifecycling;
}

+ (void)initialize {
  if (self == [AndroidArchLifecycleLifecycling class]) {
    JreStrongAssignAndConsume(&AndroidArchLifecycleLifecycling_sCallbackCache, new_JavaUtilHashMap_init());
    JreStrongAssignAndConsume(&AndroidArchLifecycleLifecycling_sClassToAdapters, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(AndroidArchLifecycleLifecycling)
  }
}

@end

void AndroidArchLifecycleLifecycling_init(AndroidArchLifecycleLifecycling *self) {
  NSObject_init(self);
}

AndroidArchLifecycleLifecycling *new_AndroidArchLifecycleLifecycling_init() {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLifecycling, init)
}

AndroidArchLifecycleLifecycling *create_AndroidArchLifecycleLifecycling_init() {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLifecycling, init)
}

id<AndroidArchLifecycleGenericLifecycleObserver> AndroidArchLifecycleLifecycling_getCallbackWithId_(id object) {
  AndroidArchLifecycleLifecycling_initialize();
  if ([AndroidArchLifecycleFullLifecycleObserver_class_() isInstance:object]) {
    return create_AndroidArchLifecycleFullLifecycleObserverAdapter_initWithAndroidArchLifecycleFullLifecycleObserver_((id<AndroidArchLifecycleFullLifecycleObserver>) cast_check(object, AndroidArchLifecycleFullLifecycleObserver_class_()));
  }
  if ([AndroidArchLifecycleGenericLifecycleObserver_class_() isInstance:object]) {
    return (id<AndroidArchLifecycleGenericLifecycleObserver>) cast_check(object, AndroidArchLifecycleGenericLifecycleObserver_class_());
  }
  IOSClass *klass = [nil_chk(object) java_getClass];
  jint type = AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(klass);
  if (type == AndroidArchLifecycleLifecycling_GENERATED_CALLBACK) {
    id<JavaUtilList> constructors = [((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sClassToAdapters)) getWithId:klass];
    if ([((id<JavaUtilList>) nil_chk(constructors)) size] == 1) {
      id<AndroidArchLifecycleGeneratedAdapter> generatedAdapter = AndroidArchLifecycleLifecycling_createGeneratedAdapterWithJavaLangReflectConstructor_withId_([constructors getWithInt:0], object);
      return create_AndroidArchLifecycleSingleGeneratedAdapterObserver_initWithAndroidArchLifecycleGeneratedAdapter_(generatedAdapter);
    }
    IOSObjectArray *adapters = [IOSObjectArray arrayWithLength:[constructors size] type:AndroidArchLifecycleGeneratedAdapter_class_()];
    for (jint i = 0; i < [constructors size]; i++) {
      IOSObjectArray_Set(adapters, i, AndroidArchLifecycleLifecycling_createGeneratedAdapterWithJavaLangReflectConstructor_withId_([constructors getWithInt:i], object));
    }
    return create_AndroidArchLifecycleCompositeGeneratedAdaptersObserver_initWithAndroidArchLifecycleGeneratedAdapterArray_(adapters);
  }
  return create_AndroidArchLifecycleReflectiveGenericLifecycleObserver_initWithId_(object);
}

id<AndroidArchLifecycleGeneratedAdapter> AndroidArchLifecycleLifecycling_createGeneratedAdapterWithJavaLangReflectConstructor_withId_(JavaLangReflectConstructor *constructor, id object) {
  AndroidArchLifecycleLifecycling_initialize();
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangInstantiationException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

JavaLangReflectConstructor *AndroidArchLifecycleLifecycling_generatedConstructorWithIOSClass_(IOSClass *klass) {
  AndroidArchLifecycleLifecycling_initialize();
  @try {
    JavaLangPackage *aPackage = [((IOSClass *) nil_chk(klass)) getPackage];
    NSString *name = [klass getCanonicalName];
    NSString *fullPackage = aPackage != nil ? [aPackage getName] : @"";
    NSString *adapterName = AndroidArchLifecycleLifecycling_getAdapterNameWithNSString_([fullPackage java_isEmpty] ? name : [((NSString *) nil_chk(name)) java_substring:[fullPackage java_length] + 1]);
    IOSClass *aClass = IOSClass_forName_([fullPackage java_isEmpty] ? adapterName : JreStrcat("$C$", fullPackage, '.', adapterName));
    JavaLangReflectConstructor *constructor = [((IOSClass *) nil_chk(aClass)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ klass } count:1 type:IOSClass_class_()]];
    if (![((JavaLangReflectConstructor *) nil_chk(constructor)) isAccessible]) {
      [constructor setAccessibleWithBoolean:true];
    }
    return constructor;
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

jint AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(IOSClass *klass) {
  AndroidArchLifecycleLifecycling_initialize();
  if ([((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sCallbackCache)) containsKeyWithId:klass]) {
    return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sCallbackCache)) getWithId:klass])) intValue];
  }
  jint type = AndroidArchLifecycleLifecycling_resolveObserverCallbackTypeWithIOSClass_(klass);
  [((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sCallbackCache)) putWithId:klass withId:JavaLangInteger_valueOfWithInt_(type)];
  return type;
}

jint AndroidArchLifecycleLifecycling_resolveObserverCallbackTypeWithIOSClass_(IOSClass *klass) {
  AndroidArchLifecycleLifecycling_initialize();
  if ([((IOSClass *) nil_chk(klass)) getCanonicalName] == nil) {
    return AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK;
  }
  JavaLangReflectConstructor *constructor = AndroidArchLifecycleLifecycling_generatedConstructorWithIOSClass_(klass);
  if (constructor != nil) {
    [((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sClassToAdapters)) putWithId:klass withId:JavaUtilCollections_singletonListWithId_(constructor)];
    return AndroidArchLifecycleLifecycling_GENERATED_CALLBACK;
  }
  jboolean hasLifecycleMethods = [((AndroidArchLifecycleClassesInfoCache *) nil_chk(JreLoadStatic(AndroidArchLifecycleClassesInfoCache, sInstance))) hasLifecycleMethodsWithIOSClass:klass];
  if (hasLifecycleMethods) {
    return AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK;
  }
  IOSClass *superclass_ = [klass getSuperclass];
  id<JavaUtilList> adapterConstructors = nil;
  if (AndroidArchLifecycleLifecycling_isLifecycleParentWithIOSClass_(superclass_)) {
    if (AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(superclass_) == AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK) {
      return AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK;
    }
    adapterConstructors = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sClassToAdapters)) getWithId:superclass_]);
  }
  {
    IOSObjectArray *a__ = [klass getInterfaces];
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *intrface = *b__++;
      if (!AndroidArchLifecycleLifecycling_isLifecycleParentWithIOSClass_(intrface)) {
        continue;
      }
      if (AndroidArchLifecycleLifecycling_getObserverConstructorTypeWithIOSClass_(intrface) == AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK) {
        return AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK;
      }
      if (adapterConstructors == nil) {
        adapterConstructors = create_JavaUtilArrayList_init();
      }
      [adapterConstructors addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sClassToAdapters)) getWithId:intrface]];
    }
  }
  if (adapterConstructors != nil) {
    [((id<JavaUtilMap>) nil_chk(AndroidArchLifecycleLifecycling_sClassToAdapters)) putWithId:klass withId:adapterConstructors];
    return AndroidArchLifecycleLifecycling_GENERATED_CALLBACK;
  }
  return AndroidArchLifecycleLifecycling_REFLECTIVE_CALLBACK;
}

jboolean AndroidArchLifecycleLifecycling_isLifecycleParentWithIOSClass_(IOSClass *klass) {
  AndroidArchLifecycleLifecycling_initialize();
  return klass != nil && [AndroidArchLifecycleLifecycleObserver_class_() isAssignableFrom:klass];
}

NSString *AndroidArchLifecycleLifecycling_getAdapterNameWithNSString_(NSString *className_) {
  AndroidArchLifecycleLifecycling_initialize();
  return JreStrcat("$$", [((NSString *) nil_chk(className_)) java_replace:@"." withSequence:@"_"], @"_LifecycleAdapter");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleLifecycling)
