//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchLifecycleMethodCallsLogger.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface AndroidArchLifecycleMethodCallsLogger () {
 @public
  id<JavaUtilMap> mCalledMethods_;
}

@end

J2OBJC_FIELD_SETTER(AndroidArchLifecycleMethodCallsLogger, mCalledMethods_, id<JavaUtilMap>)

@implementation AndroidArchLifecycleMethodCallsLogger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidArchLifecycleMethodCallsLogger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)approveCallWithNSString:(NSString *)name
                            withInt:(jint)type {
  JavaLangInteger *nullableMask = [((id<JavaUtilMap>) nil_chk(mCalledMethods_)) getWithId:name];
  jint mask = nullableMask != nil ? [nullableMask intValue] : 0;
  jboolean wasCalled = (mask & type) != 0;
  [((id<JavaUtilMap>) nil_chk(mCalledMethods_)) putWithId:name withId:JavaLangInteger_valueOfWithInt_(mask | type)];
  return !wasCalled;
}

- (void)dealloc {
  RELEASE_(mCalledMethods_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(approveCallWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCalledMethods_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "approveCall", "LNSString;I", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleMethodCallsLogger = { "MethodCallsLogger", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleMethodCallsLogger;
}

@end

void AndroidArchLifecycleMethodCallsLogger_init(AndroidArchLifecycleMethodCallsLogger *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mCalledMethods_, new_JavaUtilHashMap_init());
}

AndroidArchLifecycleMethodCallsLogger *new_AndroidArchLifecycleMethodCallsLogger_init() {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleMethodCallsLogger, init)
}

AndroidArchLifecycleMethodCallsLogger *create_AndroidArchLifecycleMethodCallsLogger_init() {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleMethodCallsLogger, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleMethodCallsLogger)
