//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache")
#ifdef RESTRICT_AndroidArchLifecycleClassesInfoCache
#define INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache 0
#else
#define INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache 1
#endif
#undef RESTRICT_AndroidArchLifecycleClassesInfoCache

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidArchLifecycleClassesInfoCache_) && (INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache || defined(INCLUDE_AndroidArchLifecycleClassesInfoCache))
#define AndroidArchLifecycleClassesInfoCache_

@class AndroidArchLifecycleClassesInfoCache_CallbackInfo;
@class IOSClass;

@interface AndroidArchLifecycleClassesInfoCache : NSObject

+ (AndroidArchLifecycleClassesInfoCache *)sInstance;

+ (void)setSInstance:(AndroidArchLifecycleClassesInfoCache *)value;

#pragma mark Package-Private

- (instancetype)init;

- (AndroidArchLifecycleClassesInfoCache_CallbackInfo *)getInfoWithIOSClass:(IOSClass *)klass;

- (jboolean)hasLifecycleMethodsWithIOSClass:(IOSClass *)klass;

@end

J2OBJC_STATIC_INIT(AndroidArchLifecycleClassesInfoCache)

inline AndroidArchLifecycleClassesInfoCache *AndroidArchLifecycleClassesInfoCache_get_sInstance();
inline AndroidArchLifecycleClassesInfoCache *AndroidArchLifecycleClassesInfoCache_set_sInstance(AndroidArchLifecycleClassesInfoCache *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache *AndroidArchLifecycleClassesInfoCache_sInstance;
J2OBJC_STATIC_FIELD_OBJ(AndroidArchLifecycleClassesInfoCache, sInstance, AndroidArchLifecycleClassesInfoCache *)

FOUNDATION_EXPORT void AndroidArchLifecycleClassesInfoCache_init(AndroidArchLifecycleClassesInfoCache *self);

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache *new_AndroidArchLifecycleClassesInfoCache_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache *create_AndroidArchLifecycleClassesInfoCache_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleClassesInfoCache)

#endif

#if !defined (AndroidArchLifecycleClassesInfoCache_CallbackInfo_) && (INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache || defined(INCLUDE_AndroidArchLifecycleClassesInfoCache_CallbackInfo))
#define AndroidArchLifecycleClassesInfoCache_CallbackInfo_

@class AndroidArchLifecycleLifecycle_Event;
@protocol AndroidArchLifecycleLifecycleOwner;
@protocol JavaUtilMap;

@interface AndroidArchLifecycleClassesInfoCache_CallbackInfo : NSObject {
 @public
  id<JavaUtilMap> mEventToHandlers_;
  id<JavaUtilMap> mHandlerToEvent_;
}

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)handlerToEvent;

- (void)invokeCallbacksWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)source
                      withAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event
                                                       withId:(id)target;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleClassesInfoCache_CallbackInfo)

J2OBJC_FIELD_SETTER(AndroidArchLifecycleClassesInfoCache_CallbackInfo, mEventToHandlers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleClassesInfoCache_CallbackInfo, mHandlerToEvent_, id<JavaUtilMap>)

FOUNDATION_EXPORT void AndroidArchLifecycleClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(AndroidArchLifecycleClassesInfoCache_CallbackInfo *self, id<JavaUtilMap> handlerToEvent);

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache_CallbackInfo *new_AndroidArchLifecycleClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(id<JavaUtilMap> handlerToEvent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache_CallbackInfo *create_AndroidArchLifecycleClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(id<JavaUtilMap> handlerToEvent);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleClassesInfoCache_CallbackInfo)

#endif

#if !defined (AndroidArchLifecycleClassesInfoCache_MethodReference_) && (INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache || defined(INCLUDE_AndroidArchLifecycleClassesInfoCache_MethodReference))
#define AndroidArchLifecycleClassesInfoCache_MethodReference_

@class AndroidArchLifecycleLifecycle_Event;
@class JavaLangReflectMethod;
@protocol AndroidArchLifecycleLifecycleOwner;

@interface AndroidArchLifecycleClassesInfoCache_MethodReference : NSObject {
 @public
  jint mCallType_;
  JavaLangReflectMethod *mMethod_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)callType
  withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

- (void)invokeCallbackWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)source
                     withAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event
                                                      withId:(id)target;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchLifecycleClassesInfoCache_MethodReference)

J2OBJC_FIELD_SETTER(AndroidArchLifecycleClassesInfoCache_MethodReference, mMethod_, JavaLangReflectMethod *)

FOUNDATION_EXPORT void AndroidArchLifecycleClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(AndroidArchLifecycleClassesInfoCache_MethodReference *self, jint callType, JavaLangReflectMethod *method);

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache_MethodReference *new_AndroidArchLifecycleClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(jint callType, JavaLangReflectMethod *method) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchLifecycleClassesInfoCache_MethodReference *create_AndroidArchLifecycleClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(jint callType, JavaLangReflectMethod *method);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchLifecycleClassesInfoCache_MethodReference)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidArchLifecycleClassesInfoCache")
