//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DKOTKotlinHelper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/StringBuilder.h"

@implementation DKOTKotlinHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DKOTKotlinHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)loadResrouceSeedWithNSString:(NSString *)resource {
  return DKOTKotlinHelper_loadResrouceSeedWithNSString_(resource);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadResrouceSeedWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadResrouceSeed", "LNSString;" };
  static const J2ObjcClassInfo _DKOTKotlinHelper = { "KotlinHelper", "co.touchlab.droidconandroid.shared.kotlinnative", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_DKOTKotlinHelper;
}

@end

void DKOTKotlinHelper_init(DKOTKotlinHelper *self) {
  NSObject_init(self);
}

DKOTKotlinHelper *new_DKOTKotlinHelper_init() {
  J2OBJC_NEW_IMPL(DKOTKotlinHelper, init)
}

DKOTKotlinHelper *create_DKOTKotlinHelper_init() {
  J2OBJC_CREATE_IMPL(DKOTKotlinHelper, init)
}

NSString *DKOTKotlinHelper_loadResrouceSeedWithNSString_(NSString *resource) {
  DKOTKotlinHelper_initialize();
  JavaIoInputStream *resourceAsStream = [((JavaLangClassLoader *) nil_chk([DKOTKotlinHelper_class_() getClassLoader])) getResourceAsStreamWithNSString:resource];
  JavaIoBufferedReader *br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(resourceAsStream));
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  NSString *line;
  @try {
    while ((line = [br readLine]) != nil) {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:line])) appendWithNSString:@"\n"];
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    return nil;
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DKOTKotlinHelper)
