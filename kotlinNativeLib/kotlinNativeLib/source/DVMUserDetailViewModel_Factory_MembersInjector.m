//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DINTFindUserInteractor.h"
#include "DVMUserDetailViewModel.h"
#include "DVMUserDetailViewModel_Factory_MembersInjector.h"
#include "DaggerMembersInjector.h"
#include "IoReactivexFlowableTransformer.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "javax/inject/Provider.h"

@interface DVMUserDetailViewModel_Factory_MembersInjector () {
 @public
  id<JavaxInjectProvider> taskProvider_;
  id<JavaxInjectProvider> transformerProvider_;
}

@end

J2OBJC_FIELD_SETTER(DVMUserDetailViewModel_Factory_MembersInjector, taskProvider_, id<JavaxInjectProvider>)
J2OBJC_FIELD_SETTER(DVMUserDetailViewModel_Factory_MembersInjector, transformerProvider_, id<JavaxInjectProvider>)

@implementation DVMUserDetailViewModel_Factory_MembersInjector

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)taskProvider
                    withJavaxInjectProvider:(id<JavaxInjectProvider>)transformerProvider {
  DVMUserDetailViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_withJavaxInjectProvider_(self, taskProvider, transformerProvider);
  return self;
}

+ (id<DaggerMembersInjector>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)taskProvider
                                   withJavaxInjectProvider:(id<JavaxInjectProvider>)transformerProvider {
  return DVMUserDetailViewModel_Factory_MembersInjector_createWithJavaxInjectProvider_withJavaxInjectProvider_(taskProvider, transformerProvider);
}

- (void)injectMembersWithId:(DVMUserDetailViewModel_Factory *)instance {
  if (instance == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Cannot inject members into a null reference");
  }
  JreStrongAssign(&instance->task_, [((id<JavaxInjectProvider>) nil_chk(taskProvider_)) get]);
  JreStrongAssign(&instance->transformer_, [((id<JavaxInjectProvider>) nil_chk(transformerProvider_)) get]);
}

+ (void)injectTaskWithDVMUserDetailViewModel_Factory:(DVMUserDetailViewModel_Factory *)instance
                             withJavaxInjectProvider:(id<JavaxInjectProvider>)taskProvider {
  DVMUserDetailViewModel_Factory_MembersInjector_injectTaskWithDVMUserDetailViewModel_Factory_withJavaxInjectProvider_(instance, taskProvider);
}

+ (void)injectTransformerWithDVMUserDetailViewModel_Factory:(DVMUserDetailViewModel_Factory *)instance
                                    withJavaxInjectProvider:(id<JavaxInjectProvider>)transformerProvider {
  DVMUserDetailViewModel_Factory_MembersInjector_injectTransformerWithDVMUserDetailViewModel_Factory_withJavaxInjectProvider_(instance, transformerProvider);
}

- (void)dealloc {
  RELEASE_(taskProvider_);
  RELEASE_(transformerProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDaggerMembersInjector;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x9, 9, 7, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:withJavaxInjectProvider:);
  methods[1].selector = @selector(createWithJavaxInjectProvider:withJavaxInjectProvider:);
  methods[2].selector = @selector(injectMembersWithId:);
  methods[3].selector = @selector(injectTaskWithDVMUserDetailViewModel_Factory:withJavaxInjectProvider:);
  methods[4].selector = @selector(injectTransformerWithDVMUserDetailViewModel_Factory:withJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "taskProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "transformerProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;LJavaxInjectProvider;", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/interactors/FindUserInteractor;>;Ljavax/inject/Provider<Lio/reactivex/FlowableTransformer;>;)V", "create", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/interactors/FindUserInteractor;>;Ljavax/inject/Provider<Lio/reactivex/FlowableTransformer;>;)Ldagger/MembersInjector<Lco/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel$Factory;>;", "injectMembers", "LDVMUserDetailViewModel_Factory;", "injectTask", "LDVMUserDetailViewModel_Factory;LJavaxInjectProvider;", "(Lco/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel$Factory;Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/interactors/FindUserInteractor;>;)V", "injectTransformer", "(Lco/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel$Factory;Ljavax/inject/Provider<Lio/reactivex/FlowableTransformer;>;)V", "Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/interactors/FindUserInteractor;>;", "Ljavax/inject/Provider<Lio/reactivex/FlowableTransformer;>;", "Ljava/lang/Object;Ldagger/MembersInjector<Lco/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel$Factory;>;" };
  static const J2ObjcClassInfo _DVMUserDetailViewModel_Factory_MembersInjector = { "UserDetailViewModel_Factory_MembersInjector", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, 13, -1 };
  return &_DVMUserDetailViewModel_Factory_MembersInjector;
}

@end

void DVMUserDetailViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_withJavaxInjectProvider_(DVMUserDetailViewModel_Factory_MembersInjector *self, id<JavaxInjectProvider> taskProvider, id<JavaxInjectProvider> transformerProvider) {
  NSObject_init(self);
  JreAssert(taskProvider != nil, @"co/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel_Factory_MembersInjector.java:22 condition failed: assert taskProvider != null;");
  JreStrongAssign(&self->taskProvider_, taskProvider);
  JreAssert(transformerProvider != nil, @"co/touchlab/droidconandroid/shared/viewmodel/UserDetailViewModel_Factory_MembersInjector.java:24 condition failed: assert transformerProvider != null;");
  JreStrongAssign(&self->transformerProvider_, transformerProvider);
}

DVMUserDetailViewModel_Factory_MembersInjector *new_DVMUserDetailViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> taskProvider, id<JavaxInjectProvider> transformerProvider) {
  J2OBJC_NEW_IMPL(DVMUserDetailViewModel_Factory_MembersInjector, initWithJavaxInjectProvider_withJavaxInjectProvider_, taskProvider, transformerProvider)
}

DVMUserDetailViewModel_Factory_MembersInjector *create_DVMUserDetailViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> taskProvider, id<JavaxInjectProvider> transformerProvider) {
  J2OBJC_CREATE_IMPL(DVMUserDetailViewModel_Factory_MembersInjector, initWithJavaxInjectProvider_withJavaxInjectProvider_, taskProvider, transformerProvider)
}

id<DaggerMembersInjector> DVMUserDetailViewModel_Factory_MembersInjector_createWithJavaxInjectProvider_withJavaxInjectProvider_(id<JavaxInjectProvider> taskProvider, id<JavaxInjectProvider> transformerProvider) {
  DVMUserDetailViewModel_Factory_MembersInjector_initialize();
  return create_DVMUserDetailViewModel_Factory_MembersInjector_initWithJavaxInjectProvider_withJavaxInjectProvider_(taskProvider, transformerProvider);
}

void DVMUserDetailViewModel_Factory_MembersInjector_injectTaskWithDVMUserDetailViewModel_Factory_withJavaxInjectProvider_(DVMUserDetailViewModel_Factory *instance, id<JavaxInjectProvider> taskProvider) {
  DVMUserDetailViewModel_Factory_MembersInjector_initialize();
  JreStrongAssign(&((DVMUserDetailViewModel_Factory *) nil_chk(instance))->task_, [((id<JavaxInjectProvider>) nil_chk(taskProvider)) get]);
}

void DVMUserDetailViewModel_Factory_MembersInjector_injectTransformerWithDVMUserDetailViewModel_Factory_withJavaxInjectProvider_(DVMUserDetailViewModel_Factory *instance, id<JavaxInjectProvider> transformerProvider) {
  DVMUserDetailViewModel_Factory_MembersInjector_initialize();
  JreStrongAssign(&((DVMUserDetailViewModel_Factory *) nil_chk(instance))->transformer_, [((id<JavaxInjectProvider>) nil_chk(transformerProvider)) get]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMUserDetailViewModel_Factory_MembersInjector)
