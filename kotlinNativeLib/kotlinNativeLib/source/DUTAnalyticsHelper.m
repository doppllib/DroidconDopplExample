//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATEvent.h"
#include "DUTAnalyticsEvents.h"
#include "DUTAnalyticsHelper.h"
#include "DUTStringUtils.h"
#include "DVMAppManager.h"
#include "DVMPlatformClient.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"

@implementation DUTAnalyticsHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DUTAnalyticsHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)recordAnalyticsWithNSString:(NSString *)analyticsKey {
  DUTAnalyticsHelper_recordAnalyticsWithNSString_(analyticsKey);
}

+ (void)recordAnalyticsWithNSString:(NSString *)analyticsKey
                           withLong:(jlong)eventId {
  DUTAnalyticsHelper_recordAnalyticsWithNSString_withLong_(analyticsKey, eventId);
}

+ (void)recordAnalyticsWithNSString:(NSString *)analyticsKey
                      withDDATEvent:(DDATEvent *)event {
  DUTAnalyticsHelper_recordAnalyticsWithNSString_withDDATEvent_(analyticsKey, event);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(recordAnalyticsWithNSString:);
  methods[2].selector = @selector(recordAnalyticsWithNSString:withLong:);
  methods[3].selector = @selector(recordAnalyticsWithNSString:withDDATEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "recordAnalytics", "LNSString;", "LNSString;J", "LNSString;LDDATEvent;" };
  static const J2ObjcClassInfo _DUTAnalyticsHelper = { "AnalyticsHelper", "co.touchlab.droidconandroid.shared.utils", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_DUTAnalyticsHelper;
}

@end

void DUTAnalyticsHelper_init(DUTAnalyticsHelper *self) {
  NSObject_init(self);
}

DUTAnalyticsHelper *new_DUTAnalyticsHelper_init() {
  J2OBJC_NEW_IMPL(DUTAnalyticsHelper, init)
}

DUTAnalyticsHelper *create_DUTAnalyticsHelper_init() {
  J2OBJC_CREATE_IMPL(DUTAnalyticsHelper, init)
}

void DUTAnalyticsHelper_recordAnalyticsWithNSString_(NSString *analyticsKey) {
  DUTAnalyticsHelper_initialize();
}

void DUTAnalyticsHelper_recordAnalyticsWithNSString_withLong_(NSString *analyticsKey, jlong eventId) {
  DUTAnalyticsHelper_initialize();
  [((id<DVMPlatformClient>) nil_chk([((DVMAppManager *) nil_chk(DVMAppManager_getInstance())) getPlatformClient])) logEventWithNSString:analyticsKey withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ DUTAnalyticsEvents_PARAM_ITEM_ID, JavaLangLong_toStringWithLong_(eventId) } count:2 type:NSString_class_()]];
}

void DUTAnalyticsHelper_recordAnalyticsWithNSString_withDDATEvent_(NSString *analyticsKey, DDATEvent *event) {
  DUTAnalyticsHelper_initialize();
  NSString *eventName = event != nil ? DUTStringUtils_trimToEmptyWithNSString_([event getName]) : @"";
  [((id<DVMPlatformClient>) nil_chk([((DVMAppManager *) nil_chk(DVMAppManager_getInstance())) getPlatformClient])) logEventWithNSString:analyticsKey withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ DUTAnalyticsEvents_PARAM_ITEM_ID, JavaLangLong_toStringWithLong_([((DDATEvent *) nil_chk(event)) getId]), DUTAnalyticsEvents_PARAM_ITEM_NAME, eventName } count:4 type:NSString_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DUTAnalyticsHelper)
