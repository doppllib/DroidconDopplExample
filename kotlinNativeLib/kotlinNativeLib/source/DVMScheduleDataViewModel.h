//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DVMScheduleDataViewModel")
#ifdef RESTRICT_DVMScheduleDataViewModel
#define INCLUDE_ALL_DVMScheduleDataViewModel 0
#else
#define INCLUDE_ALL_DVMScheduleDataViewModel 1
#endif
#undef RESTRICT_DVMScheduleDataViewModel

#if !defined (DVMScheduleDataViewModel_) && (INCLUDE_ALL_DVMScheduleDataViewModel || defined(INCLUDE_DVMScheduleDataViewModel))
#define DVMScheduleDataViewModel_

#define RESTRICT_AndroidArchLifecycleViewModel 1
#define INCLUDE_AndroidArchLifecycleViewModel 1
#include "AndroidArchLifecycleViewModel.h"

@class DVMScheduleDataViewModel_Factory;
@protocol DVMScheduleDataViewModel_Host;

@interface DVMScheduleDataViewModel : AndroidArchLifecycleViewModel

#pragma mark Public

+ (DVMScheduleDataViewModel_Factory *)factory;

+ (DVMScheduleDataViewModel *)forIos;

- (void)unwire;

- (void)wireWithDVMScheduleDataViewModel_Host:(id<DVMScheduleDataViewModel_Host>)host
                                  withBoolean:(jboolean)allEvents;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMScheduleDataViewModel)

FOUNDATION_EXPORT DVMScheduleDataViewModel_Factory *DVMScheduleDataViewModel_factory();

FOUNDATION_EXPORT DVMScheduleDataViewModel *DVMScheduleDataViewModel_forIos();

J2OBJC_TYPE_LITERAL_HEADER(DVMScheduleDataViewModel)

@compatibility_alias CoTouchlabDroidconandroidSharedViewmodelScheduleDataViewModel DVMScheduleDataViewModel;

#endif

#if !defined (DVMScheduleDataViewModel_Host_) && (INCLUDE_ALL_DVMScheduleDataViewModel || defined(INCLUDE_DVMScheduleDataViewModel_Host))
#define DVMScheduleDataViewModel_Host_

@class IOSObjectArray;

@protocol DVMScheduleDataViewModel_Host < JavaObject >

- (void)loadCallbackWithDVMDayScheduleArray:(IOSObjectArray *)daySchedules;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMScheduleDataViewModel_Host)

J2OBJC_TYPE_LITERAL_HEADER(DVMScheduleDataViewModel_Host)

#endif

#if !defined (DVMScheduleDataViewModel_Factory_) && (INCLUDE_ALL_DVMScheduleDataViewModel || defined(INCLUDE_DVMScheduleDataViewModel_Factory))
#define DVMScheduleDataViewModel_Factory_

#define RESTRICT_AndroidArchLifecycleViewModelProvider 1
#define INCLUDE_AndroidArchLifecycleViewModelProvider_NewInstanceFactory 1
#include "AndroidArchLifecycleViewModelProvider.h"

@class AndroidArchLifecycleViewModel;
@class DINTRefreshScheduleInteractor;
@class IOSClass;

@interface DVMScheduleDataViewModel_Factory : AndroidArchLifecycleViewModelProvider_NewInstanceFactory {
 @public
  DINTRefreshScheduleInteractor *interactor_;
}

#pragma mark Public

- (AndroidArchLifecycleViewModel *)createWithIOSClass:(IOSClass *)modelClass;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMScheduleDataViewModel_Factory)

J2OBJC_FIELD_SETTER(DVMScheduleDataViewModel_Factory, interactor_, DINTRefreshScheduleInteractor *)

FOUNDATION_EXPORT void DVMScheduleDataViewModel_Factory_init(DVMScheduleDataViewModel_Factory *self);

FOUNDATION_EXPORT DVMScheduleDataViewModel_Factory *new_DVMScheduleDataViewModel_Factory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DVMScheduleDataViewModel_Factory *create_DVMScheduleDataViewModel_Factory_init();

J2OBJC_TYPE_LITERAL_HEADER(DVMScheduleDataViewModel_Factory)

#endif

#pragma pop_macro("INCLUDE_ALL_DVMScheduleDataViewModel")
