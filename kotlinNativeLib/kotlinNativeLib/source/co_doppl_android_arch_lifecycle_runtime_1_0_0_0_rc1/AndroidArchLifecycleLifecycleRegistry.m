//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchCoreInternalFastSafeIterableMap.h"
#include "AndroidArchCoreInternalSafeIterableMap.h"
#include "AndroidArchLifecycleGenericLifecycleObserver.h"
#include "AndroidArchLifecycleLifecycle.h"
#include "AndroidArchLifecycleLifecycleObserver.h"
#include "AndroidArchLifecycleLifecycleOwner.h"
#include "AndroidArchLifecycleLifecycleRegistry.h"
#include "AndroidArchLifecycleLifecycling.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@interface AndroidArchLifecycleLifecycleRegistry () {
 @public
  AndroidArchCoreInternalFastSafeIterableMap *mObserverMap_;
  AndroidArchLifecycleLifecycle_State *mState_;
  JavaLangRefWeakReference *mLifecycleOwner_;
  jint mAddingObserverCounter_;
  jboolean mHandlingEvent_;
  jboolean mNewEventOccurred_;
  JavaUtilArrayList *mParentStates_;
}

- (void)moveToStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)next;

- (jboolean)isSynced;

- (AndroidArchLifecycleLifecycle_State *)calculateTargetStateWithAndroidArchLifecycleLifecycleObserver:(id<AndroidArchLifecycleLifecycleObserver>)observer;

- (void)popParentState;

- (void)pushParentStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state;

+ (AndroidArchLifecycleLifecycle_Event *)downEventWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state;

+ (AndroidArchLifecycleLifecycle_Event *)upEventWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state;

- (void)forwardPassWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)lifecycleOwner;

- (void)backwardPassWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)lifecycleOwner;

- (void)sync;

@end

J2OBJC_FIELD_SETTER(AndroidArchLifecycleLifecycleRegistry, mObserverMap_, AndroidArchCoreInternalFastSafeIterableMap *)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleLifecycleRegistry, mState_, AndroidArchLifecycleLifecycle_State *)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleLifecycleRegistry, mLifecycleOwner_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(AndroidArchLifecycleLifecycleRegistry, mParentStates_, JavaUtilArrayList *)

inline NSString *AndroidArchLifecycleLifecycleRegistry_get_LOG_TAG();
static NSString *AndroidArchLifecycleLifecycleRegistry_LOG_TAG = @"LifecycleRegistry";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchLifecycleLifecycleRegistry, LOG_TAG, NSString *)

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_moveToStateWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry *self, AndroidArchLifecycleLifecycle_State *next);

__attribute__((unused)) static jboolean AndroidArchLifecycleLifecycleRegistry_isSynced(AndroidArchLifecycleLifecycleRegistry *self);

__attribute__((unused)) static AndroidArchLifecycleLifecycle_State *AndroidArchLifecycleLifecycleRegistry_calculateTargetStateWithAndroidArchLifecycleLifecycleObserver_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleObserver> observer);

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_popParentState(AndroidArchLifecycleLifecycleRegistry *self);

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry *self, AndroidArchLifecycleLifecycle_State *state);

__attribute__((unused)) static AndroidArchLifecycleLifecycle_Event *AndroidArchLifecycleLifecycleRegistry_downEventWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state);

__attribute__((unused)) static AndroidArchLifecycleLifecycle_Event *AndroidArchLifecycleLifecycleRegistry_upEventWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state);

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_forwardPassWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner);

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_backwardPassWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner);

__attribute__((unused)) static void AndroidArchLifecycleLifecycleRegistry_sync(AndroidArchLifecycleLifecycleRegistry *self);

@implementation AndroidArchLifecycleLifecycleRegistry

- (instancetype)initWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner> __nonnull)provider {
  AndroidArchLifecycleLifecycleRegistry_initWithAndroidArchLifecycleLifecycleOwner_(self, provider);
  return self;
}

- (void)markStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State * __nonnull)state {
  AndroidArchLifecycleLifecycleRegistry_moveToStateWithAndroidArchLifecycleLifecycle_State_(self, state);
}

- (void)handleLifecycleEventWithAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event * __nonnull)event {
  AndroidArchLifecycleLifecycle_State *next = AndroidArchLifecycleLifecycleRegistry_getStateAfterWithAndroidArchLifecycleLifecycle_Event_(event);
  AndroidArchLifecycleLifecycleRegistry_moveToStateWithAndroidArchLifecycleLifecycle_State_(self, next);
}

- (void)moveToStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)next {
  AndroidArchLifecycleLifecycleRegistry_moveToStateWithAndroidArchLifecycleLifecycle_State_(self, next);
}

- (jboolean)isSynced {
  return AndroidArchLifecycleLifecycleRegistry_isSynced(self);
}

- (AndroidArchLifecycleLifecycle_State *)calculateTargetStateWithAndroidArchLifecycleLifecycleObserver:(id<AndroidArchLifecycleLifecycleObserver>)observer {
  return AndroidArchLifecycleLifecycleRegistry_calculateTargetStateWithAndroidArchLifecycleLifecycleObserver_(self, observer);
}

- (void)addObserverWithAndroidArchLifecycleLifecycleObserver:(id<AndroidArchLifecycleLifecycleObserver> __nonnull)observer {
  AndroidArchLifecycleLifecycle_State *initialState = mState_ == JreLoadEnum(AndroidArchLifecycleLifecycle_State, DESTROYED) ? JreLoadEnum(AndroidArchLifecycleLifecycle_State, DESTROYED) : JreLoadEnum(AndroidArchLifecycleLifecycle_State, INITIALIZED);
  AndroidArchLifecycleLifecycleRegistry_ObserverWithState *statefulObserver = create_AndroidArchLifecycleLifecycleRegistry_ObserverWithState_initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_(observer, initialState);
  AndroidArchLifecycleLifecycleRegistry_ObserverWithState *previous = [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(mObserverMap_)) putIfAbsentWithId:observer withId:statefulObserver];
  if (previous != nil) {
    return;
  }
  id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner = [((JavaLangRefWeakReference *) nil_chk(mLifecycleOwner_)) get];
  if (lifecycleOwner == nil) {
    return;
  }
  jboolean isReentrance = mAddingObserverCounter_ != 0 || mHandlingEvent_;
  AndroidArchLifecycleLifecycle_State *targetState = AndroidArchLifecycleLifecycleRegistry_calculateTargetStateWithAndroidArchLifecycleLifecycleObserver_(self, observer);
  mAddingObserverCounter_++;
  while (([((AndroidArchLifecycleLifecycle_State *) nil_chk(statefulObserver->mState_)) compareToWithId:targetState] < 0 && [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(mObserverMap_)) containsWithId:observer])) {
    AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(self, statefulObserver->mState_);
    [statefulObserver dispatchEventWithAndroidArchLifecycleLifecycleOwner:lifecycleOwner withAndroidArchLifecycleLifecycle_Event:AndroidArchLifecycleLifecycleRegistry_upEventWithAndroidArchLifecycleLifecycle_State_(statefulObserver->mState_)];
    AndroidArchLifecycleLifecycleRegistry_popParentState(self);
    targetState = AndroidArchLifecycleLifecycleRegistry_calculateTargetStateWithAndroidArchLifecycleLifecycleObserver_(self, observer);
  }
  if (!isReentrance) {
    AndroidArchLifecycleLifecycleRegistry_sync(self);
  }
  mAddingObserverCounter_--;
}

- (void)popParentState {
  AndroidArchLifecycleLifecycleRegistry_popParentState(self);
}

- (void)pushParentStateWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state {
  AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(self, state);
}

- (void)removeObserverWithAndroidArchLifecycleLifecycleObserver:(id<AndroidArchLifecycleLifecycleObserver> __nonnull)observer {
  [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(mObserverMap_)) removeWithId:observer];
}

- (jint)getObserverCount {
  return [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(mObserverMap_)) size];
}

- (AndroidArchLifecycleLifecycle_State *)getCurrentState {
  return mState_;
}

+ (AndroidArchLifecycleLifecycle_State *)getStateAfterWithAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event {
  return AndroidArchLifecycleLifecycleRegistry_getStateAfterWithAndroidArchLifecycleLifecycle_Event_(event);
}

+ (AndroidArchLifecycleLifecycle_Event *)downEventWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state {
  return AndroidArchLifecycleLifecycleRegistry_downEventWithAndroidArchLifecycleLifecycle_State_(state);
}

+ (AndroidArchLifecycleLifecycle_Event *)upEventWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)state {
  return AndroidArchLifecycleLifecycleRegistry_upEventWithAndroidArchLifecycleLifecycle_State_(state);
}

- (void)forwardPassWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)lifecycleOwner {
  AndroidArchLifecycleLifecycleRegistry_forwardPassWithAndroidArchLifecycleLifecycleOwner_(self, lifecycleOwner);
}

- (void)backwardPassWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)lifecycleOwner {
  AndroidArchLifecycleLifecycleRegistry_backwardPassWithAndroidArchLifecycleLifecycleOwner_(self, lifecycleOwner);
}

- (void)sync {
  AndroidArchLifecycleLifecycleRegistry_sync(self);
}

+ (AndroidArchLifecycleLifecycle_State *)minWithAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State * __nonnull)state1
                                            withAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State * __nullable)state2 {
  return AndroidArchLifecycleLifecycleRegistry_minWithAndroidArchLifecycleLifecycle_State_withAndroidArchLifecycleLifecycle_State_(state1, state2);
}

- (void)dealloc {
  RELEASE_(mObserverMap_);
  RELEASE_(mState_);
  RELEASE_(mLifecycleOwner_);
  RELEASE_(mParentStates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_State;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_State;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_State;", 0x8, 11, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_Event;", 0xa, 12, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_Event;", 0xa, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleLifecycle_State;", 0x8, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchLifecycleLifecycleOwner:);
  methods[1].selector = @selector(markStateWithAndroidArchLifecycleLifecycle_State:);
  methods[2].selector = @selector(handleLifecycleEventWithAndroidArchLifecycleLifecycle_Event:);
  methods[3].selector = @selector(moveToStateWithAndroidArchLifecycleLifecycle_State:);
  methods[4].selector = @selector(isSynced);
  methods[5].selector = @selector(calculateTargetStateWithAndroidArchLifecycleLifecycleObserver:);
  methods[6].selector = @selector(addObserverWithAndroidArchLifecycleLifecycleObserver:);
  methods[7].selector = @selector(popParentState);
  methods[8].selector = @selector(pushParentStateWithAndroidArchLifecycleLifecycle_State:);
  methods[9].selector = @selector(removeObserverWithAndroidArchLifecycleLifecycleObserver:);
  methods[10].selector = @selector(getObserverCount);
  methods[11].selector = @selector(getCurrentState);
  methods[12].selector = @selector(getStateAfterWithAndroidArchLifecycleLifecycle_Event:);
  methods[13].selector = @selector(downEventWithAndroidArchLifecycleLifecycle_State:);
  methods[14].selector = @selector(upEventWithAndroidArchLifecycleLifecycle_State:);
  methods[15].selector = @selector(forwardPassWithAndroidArchLifecycleLifecycleOwner:);
  methods[16].selector = @selector(backwardPassWithAndroidArchLifecycleLifecycleOwner:);
  methods[17].selector = @selector(sync);
  methods[18].selector = @selector(minWithAndroidArchLifecycleLifecycle_State:withAndroidArchLifecycleLifecycle_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "mObserverMap_", "LAndroidArchCoreInternalFastSafeIterableMap;", .constantValue.asLong = 0, 0x2, -1, -1, 19, -1 },
    { "mState_", "LAndroidArchLifecycleLifecycle_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLifecycleOwner_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "mAddingObserverCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHandlingEvent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNewEventOccurred_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParentStates_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchLifecycleLifecycleOwner;", "markState", "LAndroidArchLifecycleLifecycle_State;", "handleLifecycleEvent", "LAndroidArchLifecycleLifecycle_Event;", "moveToState", "calculateTargetState", "LAndroidArchLifecycleLifecycleObserver;", "addObserver", "pushParentState", "removeObserver", "getStateAfter", "downEvent", "upEvent", "forwardPass", "backwardPass", "min", "LAndroidArchLifecycleLifecycle_State;LAndroidArchLifecycleLifecycle_State;", &AndroidArchLifecycleLifecycleRegistry_LOG_TAG, "Landroid/arch/core/internal/FastSafeIterableMap<Landroid/arch/lifecycle/LifecycleObserver;Landroid/arch/lifecycle/LifecycleRegistry$ObserverWithState;>;", "Ljava/lang/ref/WeakReference<Landroid/arch/lifecycle/LifecycleOwner;>;", "Ljava/util/ArrayList<Landroid/arch/lifecycle/Lifecycle$State;>;", "LAndroidArchLifecycleLifecycleRegistry_ObserverWithState;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLifecycleRegistry = { "LifecycleRegistry", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x1, 19, 8, -1, 22, -1, -1, -1 };
  return &_AndroidArchLifecycleLifecycleRegistry;
}

@end

void AndroidArchLifecycleLifecycleRegistry_initWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleOwner> provider) {
  AndroidArchLifecycleLifecycle_init(self);
  JreStrongAssignAndConsume(&self->mObserverMap_, new_AndroidArchCoreInternalFastSafeIterableMap_init());
  self->mAddingObserverCounter_ = 0;
  self->mHandlingEvent_ = false;
  self->mNewEventOccurred_ = false;
  JreStrongAssignAndConsume(&self->mParentStates_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mLifecycleOwner_, new_JavaLangRefWeakReference_initWithId_(provider));
  JreStrongAssign(&self->mState_, JreLoadEnum(AndroidArchLifecycleLifecycle_State, INITIALIZED));
}

AndroidArchLifecycleLifecycleRegistry *new_AndroidArchLifecycleLifecycleRegistry_initWithAndroidArchLifecycleLifecycleOwner_(id<AndroidArchLifecycleLifecycleOwner> provider) {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLifecycleRegistry, initWithAndroidArchLifecycleLifecycleOwner_, provider)
}

AndroidArchLifecycleLifecycleRegistry *create_AndroidArchLifecycleLifecycleRegistry_initWithAndroidArchLifecycleLifecycleOwner_(id<AndroidArchLifecycleLifecycleOwner> provider) {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLifecycleRegistry, initWithAndroidArchLifecycleLifecycleOwner_, provider)
}

void AndroidArchLifecycleLifecycleRegistry_moveToStateWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry *self, AndroidArchLifecycleLifecycle_State *next) {
  if (self->mState_ == next) {
    return;
  }
  JreStrongAssign(&self->mState_, next);
  if (self->mHandlingEvent_ || self->mAddingObserverCounter_ != 0) {
    self->mNewEventOccurred_ = true;
    return;
  }
  self->mHandlingEvent_ = true;
  AndroidArchLifecycleLifecycleRegistry_sync(self);
  self->mHandlingEvent_ = false;
}

jboolean AndroidArchLifecycleLifecycleRegistry_isSynced(AndroidArchLifecycleLifecycleRegistry *self) {
  if ([((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) size] == 0) {
    return true;
  }
  AndroidArchLifecycleLifecycle_State *eldestObserverState = ((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) eldest])) getValue]))->mState_;
  AndroidArchLifecycleLifecycle_State *newestObserverState = ((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) newest])) getValue]))->mState_;
  return eldestObserverState == newestObserverState && self->mState_ == newestObserverState;
}

AndroidArchLifecycleLifecycle_State *AndroidArchLifecycleLifecycleRegistry_calculateTargetStateWithAndroidArchLifecycleLifecycleObserver_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleObserver> observer) {
  id<JavaUtilMap_Entry> previous = [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) ceilWithId:observer];
  AndroidArchLifecycleLifecycle_State *siblingState = previous != nil ? ((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk([previous getValue]))->mState_ : nil;
  AndroidArchLifecycleLifecycle_State *parentState = ![((JavaUtilArrayList *) nil_chk(self->mParentStates_)) isEmpty] ? [((JavaUtilArrayList *) nil_chk(self->mParentStates_)) getWithInt:[self->mParentStates_ size] - 1] : nil;
  return AndroidArchLifecycleLifecycleRegistry_minWithAndroidArchLifecycleLifecycle_State_withAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry_minWithAndroidArchLifecycleLifecycle_State_withAndroidArchLifecycleLifecycle_State_(self->mState_, siblingState), parentState);
}

void AndroidArchLifecycleLifecycleRegistry_popParentState(AndroidArchLifecycleLifecycleRegistry *self) {
  [((JavaUtilArrayList *) nil_chk(self->mParentStates_)) removeWithInt:[self->mParentStates_ size] - 1];
}

void AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry *self, AndroidArchLifecycleLifecycle_State *state) {
  [((JavaUtilArrayList *) nil_chk(self->mParentStates_)) addWithId:state];
}

AndroidArchLifecycleLifecycle_State *AndroidArchLifecycleLifecycleRegistry_getStateAfterWithAndroidArchLifecycleLifecycle_Event_(AndroidArchLifecycleLifecycle_Event *event) {
  AndroidArchLifecycleLifecycleRegistry_initialize();
  switch ([event ordinal]) {
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_CREATE:
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_STOP:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_State, CREATED);
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_START:
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_PAUSE:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_State, STARTED);
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_RESUME:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_State, RESUMED);
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_DESTROY:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_State, DESTROYED);
    case AndroidArchLifecycleLifecycle_Event_Enum_ON_ANY:
    break;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unexpected event value ", event));
}

AndroidArchLifecycleLifecycle_Event *AndroidArchLifecycleLifecycleRegistry_downEventWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state) {
  AndroidArchLifecycleLifecycleRegistry_initialize();
  switch ([state ordinal]) {
    case AndroidArchLifecycleLifecycle_State_Enum_INITIALIZED:
    @throw create_JavaLangIllegalArgumentException_init();
    case AndroidArchLifecycleLifecycle_State_Enum_CREATED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_DESTROY);
    case AndroidArchLifecycleLifecycle_State_Enum_STARTED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_STOP);
    case AndroidArchLifecycleLifecycle_State_Enum_RESUMED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_PAUSE);
    case AndroidArchLifecycleLifecycle_State_Enum_DESTROYED:
    @throw create_JavaLangIllegalArgumentException_init();
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unexpected state value ", state));
}

AndroidArchLifecycleLifecycle_Event *AndroidArchLifecycleLifecycleRegistry_upEventWithAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state) {
  AndroidArchLifecycleLifecycleRegistry_initialize();
  switch ([state ordinal]) {
    case AndroidArchLifecycleLifecycle_State_Enum_INITIALIZED:
    case AndroidArchLifecycleLifecycle_State_Enum_DESTROYED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_CREATE);
    case AndroidArchLifecycleLifecycle_State_Enum_CREATED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_START);
    case AndroidArchLifecycleLifecycle_State_Enum_STARTED:
    return JreLoadEnum(AndroidArchLifecycleLifecycle_Event, ON_RESUME);
    case AndroidArchLifecycleLifecycle_State_Enum_RESUMED:
    @throw create_JavaLangIllegalArgumentException_init();
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unexpected state value ", state));
}

void AndroidArchLifecycleLifecycleRegistry_forwardPassWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner) {
  id<JavaUtilIterator> ascendingIterator = [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) iteratorWithAdditions];
  while ([((id<JavaUtilIterator>) nil_chk(ascendingIterator)) hasNext] && !self->mNewEventOccurred_) {
    id<JavaUtilMap_Entry> entry_ = [ascendingIterator next];
    AndroidArchLifecycleLifecycleRegistry_ObserverWithState *observer = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    while (([((AndroidArchLifecycleLifecycle_State *) nil_chk(((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk(observer))->mState_)) compareToWithId:self->mState_] < 0 && !self->mNewEventOccurred_ && [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) containsWithId:[entry_ getKey]])) {
      AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(self, observer->mState_);
      [observer dispatchEventWithAndroidArchLifecycleLifecycleOwner:lifecycleOwner withAndroidArchLifecycleLifecycle_Event:AndroidArchLifecycleLifecycleRegistry_upEventWithAndroidArchLifecycleLifecycle_State_(observer->mState_)];
      AndroidArchLifecycleLifecycleRegistry_popParentState(self);
    }
  }
}

void AndroidArchLifecycleLifecycleRegistry_backwardPassWithAndroidArchLifecycleLifecycleOwner_(AndroidArchLifecycleLifecycleRegistry *self, id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner) {
  id<JavaUtilIterator> descendingIterator = [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) descendingIterator];
  while ([((id<JavaUtilIterator>) nil_chk(descendingIterator)) hasNext] && !self->mNewEventOccurred_) {
    id<JavaUtilMap_Entry> entry_ = [descendingIterator next];
    AndroidArchLifecycleLifecycleRegistry_ObserverWithState *observer = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    while (([((AndroidArchLifecycleLifecycle_State *) nil_chk(((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk(observer))->mState_)) compareToWithId:self->mState_] > 0 && !self->mNewEventOccurred_ && [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) containsWithId:[entry_ getKey]])) {
      AndroidArchLifecycleLifecycle_Event *event = AndroidArchLifecycleLifecycleRegistry_downEventWithAndroidArchLifecycleLifecycle_State_(observer->mState_);
      AndroidArchLifecycleLifecycleRegistry_pushParentStateWithAndroidArchLifecycleLifecycle_State_(self, AndroidArchLifecycleLifecycleRegistry_getStateAfterWithAndroidArchLifecycleLifecycle_Event_(event));
      [observer dispatchEventWithAndroidArchLifecycleLifecycleOwner:lifecycleOwner withAndroidArchLifecycleLifecycle_Event:event];
      AndroidArchLifecycleLifecycleRegistry_popParentState(self);
    }
  }
}

void AndroidArchLifecycleLifecycleRegistry_sync(AndroidArchLifecycleLifecycleRegistry *self) {
  id<AndroidArchLifecycleLifecycleOwner> lifecycleOwner = [((JavaLangRefWeakReference *) nil_chk(self->mLifecycleOwner_)) get];
  if (lifecycleOwner == nil) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidArchLifecycleLifecycleRegistry_LOG_TAG, @"LifecycleOwner is garbage collected, you shouldn't try dispatch new events from it.");
    return;
  }
  while (!AndroidArchLifecycleLifecycleRegistry_isSynced(self)) {
    self->mNewEventOccurred_ = false;
    if ([((AndroidArchLifecycleLifecycle_State *) nil_chk(self->mState_)) compareToWithId:((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) eldest])) getValue]))->mState_] < 0) {
      AndroidArchLifecycleLifecycleRegistry_backwardPassWithAndroidArchLifecycleLifecycleOwner_(self, lifecycleOwner);
    }
    id<JavaUtilMap_Entry> newest = [((AndroidArchCoreInternalFastSafeIterableMap *) nil_chk(self->mObserverMap_)) newest];
    if (!self->mNewEventOccurred_ && newest != nil && [((AndroidArchLifecycleLifecycle_State *) nil_chk(self->mState_)) compareToWithId:((AndroidArchLifecycleLifecycleRegistry_ObserverWithState *) nil_chk([newest getValue]))->mState_] > 0) {
      AndroidArchLifecycleLifecycleRegistry_forwardPassWithAndroidArchLifecycleLifecycleOwner_(self, lifecycleOwner);
    }
  }
  self->mNewEventOccurred_ = false;
}

AndroidArchLifecycleLifecycle_State *AndroidArchLifecycleLifecycleRegistry_minWithAndroidArchLifecycleLifecycle_State_withAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycle_State *state1, AndroidArchLifecycleLifecycle_State *state2) {
  AndroidArchLifecycleLifecycleRegistry_initialize();
  return state2 != nil && [state2 compareToWithId:state1] < 0 ? state2 : state1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleLifecycleRegistry)

@implementation AndroidArchLifecycleLifecycleRegistry_ObserverWithState

- (instancetype)initWithAndroidArchLifecycleLifecycleObserver:(id<AndroidArchLifecycleLifecycleObserver>)observer
                      withAndroidArchLifecycleLifecycle_State:(AndroidArchLifecycleLifecycle_State *)initialState {
  AndroidArchLifecycleLifecycleRegistry_ObserverWithState_initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_(self, observer, initialState);
  return self;
}

- (void)dispatchEventWithAndroidArchLifecycleLifecycleOwner:(id<AndroidArchLifecycleLifecycleOwner>)owner
                    withAndroidArchLifecycleLifecycle_Event:(AndroidArchLifecycleLifecycle_Event *)event {
  AndroidArchLifecycleLifecycle_State *newState = AndroidArchLifecycleLifecycleRegistry_getStateAfterWithAndroidArchLifecycleLifecycle_Event_(event);
  JreStrongAssign(&mState_, AndroidArchLifecycleLifecycleRegistry_minWithAndroidArchLifecycleLifecycle_State_withAndroidArchLifecycleLifecycle_State_(mState_, newState));
  [((id<AndroidArchLifecycleGenericLifecycleObserver>) nil_chk(mLifecycleObserver_)) onStateChangedWithAndroidArchLifecycleLifecycleOwner:owner withAndroidArchLifecycleLifecycle_Event:event];
  JreStrongAssign(&mState_, newState);
}

- (void)dealloc {
  RELEASE_(mState_);
  RELEASE_(mLifecycleObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidArchLifecycleLifecycleObserver:withAndroidArchLifecycleLifecycle_State:);
  methods[1].selector = @selector(dispatchEventWithAndroidArchLifecycleLifecycleOwner:withAndroidArchLifecycleLifecycle_Event:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mState_", "LAndroidArchLifecycleLifecycle_State;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLifecycleObserver_", "LAndroidArchLifecycleGenericLifecycleObserver;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidArchLifecycleLifecycleObserver;LAndroidArchLifecycleLifecycle_State;", "dispatchEvent", "LAndroidArchLifecycleLifecycleOwner;LAndroidArchLifecycleLifecycle_Event;", "LAndroidArchLifecycleLifecycleRegistry;" };
  static const J2ObjcClassInfo _AndroidArchLifecycleLifecycleRegistry_ObserverWithState = { "ObserverWithState", "android.arch.lifecycle", ptrTable, methods, fields, 7, 0x8, 2, 2, 3, -1, -1, -1, -1 };
  return &_AndroidArchLifecycleLifecycleRegistry_ObserverWithState;
}

@end

void AndroidArchLifecycleLifecycleRegistry_ObserverWithState_initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_(AndroidArchLifecycleLifecycleRegistry_ObserverWithState *self, id<AndroidArchLifecycleLifecycleObserver> observer, AndroidArchLifecycleLifecycle_State *initialState) {
  NSObject_init(self);
  JreStrongAssign(&self->mLifecycleObserver_, AndroidArchLifecycleLifecycling_getCallbackWithId_(observer));
  JreStrongAssign(&self->mState_, initialState);
}

AndroidArchLifecycleLifecycleRegistry_ObserverWithState *new_AndroidArchLifecycleLifecycleRegistry_ObserverWithState_initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_(id<AndroidArchLifecycleLifecycleObserver> observer, AndroidArchLifecycleLifecycle_State *initialState) {
  J2OBJC_NEW_IMPL(AndroidArchLifecycleLifecycleRegistry_ObserverWithState, initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_, observer, initialState)
}

AndroidArchLifecycleLifecycleRegistry_ObserverWithState *create_AndroidArchLifecycleLifecycleRegistry_ObserverWithState_initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_(id<AndroidArchLifecycleLifecycleObserver> observer, AndroidArchLifecycleLifecycle_State *initialState) {
  J2OBJC_CREATE_IMPL(AndroidArchLifecycleLifecycleRegistry_ObserverWithState, initWithAndroidArchLifecycleLifecycleObserver_withAndroidArchLifecycleLifecycle_State_, observer, initialState)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchLifecycleLifecycleRegistry_ObserverWithState)
