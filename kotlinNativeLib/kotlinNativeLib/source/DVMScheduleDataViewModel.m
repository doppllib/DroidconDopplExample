//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidArchLifecycleViewModel.h"
#include "AndroidArchLifecycleViewModelProvider.h"
#include "DDAGAppComponent.h"
#include "DINTRefreshScheduleInteractor.h"
#include "DVMAppManager.h"
#include "DVMScheduleDataViewModel.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexAndroidSchedulersAndroidSchedulers.h"
#include "IoReactivexDisposablesCompositeDisposable.h"
#include "IoReactivexDisposablesDisposable.h"
#include "IoReactivexFunctionsConsumer.h"
#include "IoReactivexObservable.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersSchedulers.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/inject/Inject.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface DVMScheduleDataViewModel () {
 @public
  DINTRefreshScheduleInteractor *interactor_;
  IoReactivexDisposablesCompositeDisposable *disposables_;
}

- (instancetype)initWithDINTRefreshScheduleInteractor:(DINTRefreshScheduleInteractor *)interactor;

@end

J2OBJC_FIELD_SETTER(DVMScheduleDataViewModel, interactor_, DINTRefreshScheduleInteractor *)
J2OBJC_FIELD_SETTER(DVMScheduleDataViewModel, disposables_, IoReactivexDisposablesCompositeDisposable *)

__attribute__((unused)) static void DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DVMScheduleDataViewModel *self, DINTRefreshScheduleInteractor *interactor);

__attribute__((unused)) static DVMScheduleDataViewModel *new_DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DINTRefreshScheduleInteractor *interactor) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMScheduleDataViewModel *create_DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DINTRefreshScheduleInteractor *interactor);

@interface DVMScheduleDataViewModel_Host : NSObject

@end

__attribute__((unused)) static IOSObjectArray *DVMScheduleDataViewModel_Factory__Annotations$0();

@interface DVMScheduleDataViewModel_$Lambda$1 : NSObject < IoReactivexFunctionsConsumer > {
 @public
  id<DVMScheduleDataViewModel_Host> target$_;
}

- (void)acceptWithId:(IOSObjectArray *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(DVMScheduleDataViewModel_$Lambda$1)

__attribute__((unused)) static void DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(DVMScheduleDataViewModel_$Lambda$1 *self, id<DVMScheduleDataViewModel_Host> outer$);

__attribute__((unused)) static DVMScheduleDataViewModel_$Lambda$1 *new_DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(id<DVMScheduleDataViewModel_Host> outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static DVMScheduleDataViewModel_$Lambda$1 *create_DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(id<DVMScheduleDataViewModel_Host> outer$);

@implementation DVMScheduleDataViewModel

- (instancetype)initWithDINTRefreshScheduleInteractor:(DINTRefreshScheduleInteractor *)interactor {
  DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(self, interactor);
  return self;
}

- (void)wireWithDVMScheduleDataViewModel_Host:(id<DVMScheduleDataViewModel_Host>)host
                                  withBoolean:(jboolean)allEvents {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(disposables_)) clear];
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(disposables_)) addWithIoReactivexDisposablesDisposable:[((IoReactivexObservable *) nil_chk([((IoReactivexObservable *) nil_chk([((IoReactivexObservable *) nil_chk([((DINTRefreshScheduleInteractor *) nil_chk(interactor_)) getFullConferenceDataWithBoolean:allEvents])) subscribeOnWithIoReactivexScheduler:IoReactivexSchedulersSchedulers_io()])) observeOnWithIoReactivexScheduler:IoReactivexAndroidSchedulersAndroidSchedulers_mainThread()])) subscribeWithIoReactivexFunctionsConsumer:create_DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(nil_chk(host))]];
}

- (void)unwire {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(disposables_)) clear];
}

+ (DVMScheduleDataViewModel_Factory *)factory {
  return DVMScheduleDataViewModel_factory();
}

+ (DVMScheduleDataViewModel *)forIos {
  return DVMScheduleDataViewModel_forIos();
}

- (void)dealloc {
  RELEASE_(interactor_);
  RELEASE_(disposables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDVMScheduleDataViewModel_Factory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDVMScheduleDataViewModel;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDINTRefreshScheduleInteractor:);
  methods[1].selector = @selector(wireWithDVMScheduleDataViewModel_Host:withBoolean:);
  methods[2].selector = @selector(unwire);
  methods[3].selector = @selector(factory);
  methods[4].selector = @selector(forIos);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "interactor_", "LDINTRefreshScheduleInteractor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "disposables_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDINTRefreshScheduleInteractor;", "wire", "LDVMScheduleDataViewModel_Host;Z", "LDVMScheduleDataViewModel_Host;LDVMScheduleDataViewModel_Factory;" };
  static const J2ObjcClassInfo _DVMScheduleDataViewModel = { "ScheduleDataViewModel", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, 3, -1, -1, -1 };
  return &_DVMScheduleDataViewModel;
}

@end

void DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DVMScheduleDataViewModel *self, DINTRefreshScheduleInteractor *interactor) {
  AndroidArchLifecycleViewModel_init(self);
  JreStrongAssignAndConsume(&self->disposables_, new_IoReactivexDisposablesCompositeDisposable_init());
  JreStrongAssign(&self->interactor_, interactor);
}

DVMScheduleDataViewModel *new_DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DINTRefreshScheduleInteractor *interactor) {
  J2OBJC_NEW_IMPL(DVMScheduleDataViewModel, initWithDINTRefreshScheduleInteractor_, interactor)
}

DVMScheduleDataViewModel *create_DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(DINTRefreshScheduleInteractor *interactor) {
  J2OBJC_CREATE_IMPL(DVMScheduleDataViewModel, initWithDINTRefreshScheduleInteractor_, interactor)
}

DVMScheduleDataViewModel_Factory *DVMScheduleDataViewModel_factory() {
  DVMScheduleDataViewModel_initialize();
  DVMScheduleDataViewModel_Factory *factory = create_DVMScheduleDataViewModel_Factory_init();
  [((id<DDAGAppComponent>) nil_chk([((DVMAppManager *) nil_chk(DVMAppManager_getInstance())) getAppComponent])) injectWithDVMScheduleDataViewModel_Factory:factory];
  return factory;
}

DVMScheduleDataViewModel *DVMScheduleDataViewModel_forIos() {
  DVMScheduleDataViewModel_initialize();
  return ((DVMScheduleDataViewModel *) [((DVMScheduleDataViewModel_Factory *) nil_chk(DVMScheduleDataViewModel_factory())) createWithIOSClass:DVMScheduleDataViewModel_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMScheduleDataViewModel)

@implementation DVMScheduleDataViewModel_Host

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(loadCallbackWithDVMDayScheduleArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "loadCallback", "[LDVMDaySchedule;", "LDVMScheduleDataViewModel;" };
  static const J2ObjcClassInfo _DVMScheduleDataViewModel_Host = { "Host", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_DVMScheduleDataViewModel_Host;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DVMScheduleDataViewModel_Host)

@implementation DVMScheduleDataViewModel_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DVMScheduleDataViewModel_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidArchLifecycleViewModel *)createWithIOSClass:(IOSClass *)modelClass {
  return create_DVMScheduleDataViewModel_initWithDINTRefreshScheduleInteractor_(interactor_);
}

- (void)dealloc {
  RELEASE_(interactor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchLifecycleViewModel;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "interactor_", "LDINTRefreshScheduleInteractor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "create", "LIOSClass;", "<T:Landroid/arch/lifecycle/ViewModel;>(Ljava/lang/Class<TT;>;)TT;", (void *)&DVMScheduleDataViewModel_Factory__Annotations$0, "LDVMScheduleDataViewModel;" };
  static const J2ObjcClassInfo _DVMScheduleDataViewModel_Factory = { "Factory", "co.touchlab.droidconandroid.shared.viewmodel", ptrTable, methods, fields, 7, 0x9, 2, 1, 4, -1, -1, -1, -1 };
  return &_DVMScheduleDataViewModel_Factory;
}

@end

void DVMScheduleDataViewModel_Factory_init(DVMScheduleDataViewModel_Factory *self) {
  AndroidArchLifecycleViewModelProvider_NewInstanceFactory_init(self);
}

DVMScheduleDataViewModel_Factory *new_DVMScheduleDataViewModel_Factory_init() {
  J2OBJC_NEW_IMPL(DVMScheduleDataViewModel_Factory, init)
}

DVMScheduleDataViewModel_Factory *create_DVMScheduleDataViewModel_Factory_init() {
  J2OBJC_CREATE_IMPL(DVMScheduleDataViewModel_Factory, init)
}

IOSObjectArray *DVMScheduleDataViewModel_Factory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DVMScheduleDataViewModel_Factory)

@implementation DVMScheduleDataViewModel_$Lambda$1

- (void)acceptWithId:(IOSObjectArray *)a {
  [target$_ loadCallbackWithDVMDayScheduleArray:a];
}

- (void)dealloc {
  RELEASE_(target$_);
  [super dealloc];
}

@end

void DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(DVMScheduleDataViewModel_$Lambda$1 *self, id<DVMScheduleDataViewModel_Host> outer$) {
  JreStrongAssign(&self->target$_, outer$);
  NSObject_init(self);
}

DVMScheduleDataViewModel_$Lambda$1 *new_DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(id<DVMScheduleDataViewModel_Host> outer$) {
  J2OBJC_NEW_IMPL(DVMScheduleDataViewModel_$Lambda$1, initWithDVMScheduleDataViewModel_Host_, outer$)
}

DVMScheduleDataViewModel_$Lambda$1 *create_DVMScheduleDataViewModel_$Lambda$1_initWithDVMScheduleDataViewModel_Host_(id<DVMScheduleDataViewModel_Host> outer$) {
  J2OBJC_CREATE_IMPL(DVMScheduleDataViewModel_$Lambda$1, initWithDVMScheduleDataViewModel_Host_, outer$)
}
