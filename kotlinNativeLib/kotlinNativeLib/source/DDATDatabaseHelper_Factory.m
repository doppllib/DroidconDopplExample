//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATDatabaseHelper.h"
#include "DDATDatabaseHelper_Factory.h"
#include "DDATDroidconDatabase.h"
#include "DaggerInternalFactory.h"
#include "J2ObjC_source.h"
#include "javax/inject/Provider.h"

@interface DDATDatabaseHelper_Factory () {
 @public
  id<JavaxInjectProvider> droidconDatabaseProvider_;
}

@end

J2OBJC_FIELD_SETTER(DDATDatabaseHelper_Factory, droidconDatabaseProvider_, id<JavaxInjectProvider>)

@implementation DDATDatabaseHelper_Factory

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)droidconDatabaseProvider {
  DDATDatabaseHelper_Factory_initWithJavaxInjectProvider_(self, droidconDatabaseProvider);
  return self;
}

- (DDATDatabaseHelper *)get {
  return create_DDATDatabaseHelper_initWithDDATDroidconDatabase_([((id<JavaxInjectProvider>) nil_chk(droidconDatabaseProvider_)) get]);
}

+ (id<DaggerInternalFactory>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)droidconDatabaseProvider {
  return DDATDatabaseHelper_Factory_createWithJavaxInjectProvider_(droidconDatabaseProvider);
}

- (void)dealloc {
  RELEASE_(droidconDatabaseProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LDDATDatabaseHelper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDaggerInternalFactory;", 0x9, 2, 0, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxInjectProvider:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(createWithJavaxInjectProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "droidconDatabaseProvider_", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaxInjectProvider;", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DroidconDatabase;>;)V", "create", "(Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DroidconDatabase;>;)Ldagger/internal/Factory<Lco/touchlab/droidconandroid/shared/data/DatabaseHelper;>;", "Ljavax/inject/Provider<Lco/touchlab/droidconandroid/shared/data/DroidconDatabase;>;", "Ljava/lang/Object;Ldagger/internal/Factory<Lco/touchlab/droidconandroid/shared/data/DatabaseHelper;>;" };
  static const J2ObjcClassInfo _DDATDatabaseHelper_Factory = { "DatabaseHelper_Factory", "co.touchlab.droidconandroid.shared.data", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 5, -1 };
  return &_DDATDatabaseHelper_Factory;
}

@end

void DDATDatabaseHelper_Factory_initWithJavaxInjectProvider_(DDATDatabaseHelper_Factory *self, id<JavaxInjectProvider> droidconDatabaseProvider) {
  NSObject_init(self);
  JreAssert(droidconDatabaseProvider != nil, @"co/touchlab/droidconandroid/shared/data/DatabaseHelper_Factory.java:15 condition failed: assert droidconDatabaseProvider != null;");
  JreStrongAssign(&self->droidconDatabaseProvider_, droidconDatabaseProvider);
}

DDATDatabaseHelper_Factory *new_DDATDatabaseHelper_Factory_initWithJavaxInjectProvider_(id<JavaxInjectProvider> droidconDatabaseProvider) {
  J2OBJC_NEW_IMPL(DDATDatabaseHelper_Factory, initWithJavaxInjectProvider_, droidconDatabaseProvider)
}

DDATDatabaseHelper_Factory *create_DDATDatabaseHelper_Factory_initWithJavaxInjectProvider_(id<JavaxInjectProvider> droidconDatabaseProvider) {
  J2OBJC_CREATE_IMPL(DDATDatabaseHelper_Factory, initWithJavaxInjectProvider_, droidconDatabaseProvider)
}

id<DaggerInternalFactory> DDATDatabaseHelper_Factory_createWithJavaxInjectProvider_(id<JavaxInjectProvider> droidconDatabaseProvider) {
  DDATDatabaseHelper_Factory_initialize();
  return create_DDATDatabaseHelper_Factory_initWithJavaxInjectProvider_(droidconDatabaseProvider);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DDATDatabaseHelper_Factory)
