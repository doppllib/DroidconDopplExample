//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DINTTestSchedulerModule.h"
#include "DaggerModule.h"
#include "DaggerProvides.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObservableSource.h"
#include "IoReactivexObservableTransformer.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersSchedulers.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static IOSObjectArray *DINTTestSchedulerModule__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DINTTestSchedulerModule__Annotations$1();

@interface DINTTestSchedulerModule_$Lambda$1 : NSObject < IoReactivexObservableTransformer >

- (id<IoReactivexObservableSource>)applyWithIoReactivexObservable:(IoReactivexObservable *)upstream;

@end

J2OBJC_STATIC_INIT(DINTTestSchedulerModule_$Lambda$1)

inline DINTTestSchedulerModule_$Lambda$1 *DINTTestSchedulerModule_$Lambda$1_get_instance();
static DINTTestSchedulerModule_$Lambda$1 *DINTTestSchedulerModule_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTTestSchedulerModule_$Lambda$1, instance, DINTTestSchedulerModule_$Lambda$1 *)

__attribute__((unused)) static void DINTTestSchedulerModule_$Lambda$1_init(DINTTestSchedulerModule_$Lambda$1 *self);

__attribute__((unused)) static DINTTestSchedulerModule_$Lambda$1 *new_DINTTestSchedulerModule_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTTestSchedulerModule_$Lambda$1 *create_DINTTestSchedulerModule_$Lambda$1_init();

@implementation DINTTestSchedulerModule

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DINTTestSchedulerModule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<IoReactivexObservableTransformer>)providesTransformer {
  return JreLoadStatic(DINTTestSchedulerModule_$Lambda$1, instance);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObservableTransformer;", 0x0, -1, -1, -1, -1, 0, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(providesTransformer);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&DINTTestSchedulerModule__Annotations$0, (void *)&DINTTestSchedulerModule__Annotations$1 };
  static const J2ObjcClassInfo _DINTTestSchedulerModule = { "TestSchedulerModule", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, 1 };
  return &_DINTTestSchedulerModule;
}

@end

void DINTTestSchedulerModule_init(DINTTestSchedulerModule *self) {
  NSObject_init(self);
}

DINTTestSchedulerModule *new_DINTTestSchedulerModule_init() {
  J2OBJC_NEW_IMPL(DINTTestSchedulerModule, init)
}

DINTTestSchedulerModule *create_DINTTestSchedulerModule_init() {
  J2OBJC_CREATE_IMPL(DINTTestSchedulerModule, init)
}

IOSObjectArray *DINTTestSchedulerModule__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_DaggerProvides(JreLoadEnum(DaggerProvides_Type, UNIQUE)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTTestSchedulerModule__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_DaggerModule([IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DINTTestSchedulerModule)

J2OBJC_INITIALIZED_DEFN(DINTTestSchedulerModule_$Lambda$1)

@implementation DINTTestSchedulerModule_$Lambda$1

- (id<IoReactivexObservableSource>)applyWithIoReactivexObservable:(IoReactivexObservable *)upstream {
  return [((IoReactivexObservable *) nil_chk([((IoReactivexObservable *) nil_chk(upstream)) subscribeOnWithIoReactivexScheduler:IoReactivexSchedulersSchedulers_trampoline()])) observeOnWithIoReactivexScheduler:IoReactivexSchedulersSchedulers_trampoline()];
}

+ (void)initialize {
  if (self == [DINTTestSchedulerModule_$Lambda$1 class]) {
    JreStrongAssignAndConsume(&DINTTestSchedulerModule_$Lambda$1_instance, new_DINTTestSchedulerModule_$Lambda$1_init());
    J2OBJC_SET_INITIALIZED(DINTTestSchedulerModule_$Lambda$1)
  }
}

@end

void DINTTestSchedulerModule_$Lambda$1_init(DINTTestSchedulerModule_$Lambda$1 *self) {
  NSObject_init(self);
}

DINTTestSchedulerModule_$Lambda$1 *new_DINTTestSchedulerModule_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(DINTTestSchedulerModule_$Lambda$1, init)
}

DINTTestSchedulerModule_$Lambda$1 *create_DINTTestSchedulerModule_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(DINTTestSchedulerModule_$Lambda$1, init)
}
