//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DINTRxTrampolineSchedulerRule.h"
#include "IoReactivexAndroidPluginsRxAndroidPlugins.h"
#include "IoReactivexFunctionsFunction.h"
#include "IoReactivexPluginsRxJavaPlugins.h"
#include "IoReactivexScheduler.h"
#include "IoReactivexSchedulersSchedulers.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/Callable.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runners/model/Statement.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface DINTRxTrampolineSchedulerRule_1 : OrgJunitRunnersModelStatement {
 @public
  OrgJunitRunnersModelStatement *val$base_;
}

- (instancetype)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)capture$0;

- (void)evaluate;

@end

J2OBJC_EMPTY_STATIC_INIT(DINTRxTrampolineSchedulerRule_1)

__attribute__((unused)) static void DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(DINTRxTrampolineSchedulerRule_1 *self, OrgJunitRunnersModelStatement *capture$0);

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1 *new_DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(OrgJunitRunnersModelStatement *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1 *create_DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(OrgJunitRunnersModelStatement *capture$0);

@interface DINTRxTrampolineSchedulerRule_1_$Lambda$1 : NSObject < IoReactivexFunctionsFunction >

- (id)applyWithId:(IoReactivexScheduler *)scheduler;

@end

J2OBJC_STATIC_INIT(DINTRxTrampolineSchedulerRule_1_$Lambda$1)

inline DINTRxTrampolineSchedulerRule_1_$Lambda$1 *DINTRxTrampolineSchedulerRule_1_$Lambda$1_get_instance();
static DINTRxTrampolineSchedulerRule_1_$Lambda$1 *DINTRxTrampolineSchedulerRule_1_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTRxTrampolineSchedulerRule_1_$Lambda$1, instance, DINTRxTrampolineSchedulerRule_1_$Lambda$1 *)

__attribute__((unused)) static void DINTRxTrampolineSchedulerRule_1_$Lambda$1_init(DINTRxTrampolineSchedulerRule_1_$Lambda$1 *self);

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$1 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$1 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$1_init();

@interface DINTRxTrampolineSchedulerRule_1_$Lambda$2 : NSObject < IoReactivexFunctionsFunction >

- (id)applyWithId:(IoReactivexScheduler *)scheduler;

@end

J2OBJC_STATIC_INIT(DINTRxTrampolineSchedulerRule_1_$Lambda$2)

inline DINTRxTrampolineSchedulerRule_1_$Lambda$2 *DINTRxTrampolineSchedulerRule_1_$Lambda$2_get_instance();
static DINTRxTrampolineSchedulerRule_1_$Lambda$2 *DINTRxTrampolineSchedulerRule_1_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTRxTrampolineSchedulerRule_1_$Lambda$2, instance, DINTRxTrampolineSchedulerRule_1_$Lambda$2 *)

__attribute__((unused)) static void DINTRxTrampolineSchedulerRule_1_$Lambda$2_init(DINTRxTrampolineSchedulerRule_1_$Lambda$2 *self);

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$2 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$2 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$2_init();

@interface DINTRxTrampolineSchedulerRule_1_$Lambda$3 : NSObject < IoReactivexFunctionsFunction >

- (id)applyWithId:(IoReactivexScheduler *)scheduler;

@end

J2OBJC_STATIC_INIT(DINTRxTrampolineSchedulerRule_1_$Lambda$3)

inline DINTRxTrampolineSchedulerRule_1_$Lambda$3 *DINTRxTrampolineSchedulerRule_1_$Lambda$3_get_instance();
static DINTRxTrampolineSchedulerRule_1_$Lambda$3 *DINTRxTrampolineSchedulerRule_1_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTRxTrampolineSchedulerRule_1_$Lambda$3, instance, DINTRxTrampolineSchedulerRule_1_$Lambda$3 *)

__attribute__((unused)) static void DINTRxTrampolineSchedulerRule_1_$Lambda$3_init(DINTRxTrampolineSchedulerRule_1_$Lambda$3 *self);

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$3 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$3 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$3_init();

@interface DINTRxTrampolineSchedulerRule_1_$Lambda$4 : NSObject < IoReactivexFunctionsFunction >

- (id)applyWithId:(id<JavaUtilConcurrentCallable>)scheduler;

@end

J2OBJC_STATIC_INIT(DINTRxTrampolineSchedulerRule_1_$Lambda$4)

inline DINTRxTrampolineSchedulerRule_1_$Lambda$4 *DINTRxTrampolineSchedulerRule_1_$Lambda$4_get_instance();
static DINTRxTrampolineSchedulerRule_1_$Lambda$4 *DINTRxTrampolineSchedulerRule_1_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DINTRxTrampolineSchedulerRule_1_$Lambda$4, instance, DINTRxTrampolineSchedulerRule_1_$Lambda$4 *)

__attribute__((unused)) static void DINTRxTrampolineSchedulerRule_1_$Lambda$4_init(DINTRxTrampolineSchedulerRule_1_$Lambda$4 *self);

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$4 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DINTRxTrampolineSchedulerRule_1_$Lambda$4 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$4_init();

@implementation DINTRxTrampolineSchedulerRule

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DINTRxTrampolineSchedulerRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  return create_DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(base);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LOrgJunitRunnersModelStatement;LOrgJunitRunnerDescription;" };
  static const J2ObjcClassInfo _DINTRxTrampolineSchedulerRule = { "RxTrampolineSchedulerRule", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_DINTRxTrampolineSchedulerRule;
}

@end

void DINTRxTrampolineSchedulerRule_init(DINTRxTrampolineSchedulerRule *self) {
  NSObject_init(self);
}

DINTRxTrampolineSchedulerRule *new_DINTRxTrampolineSchedulerRule_init() {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule, init)
}

DINTRxTrampolineSchedulerRule *create_DINTRxTrampolineSchedulerRule_init() {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DINTRxTrampolineSchedulerRule)

@implementation DINTRxTrampolineSchedulerRule_1

- (instancetype)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)capture$0 {
  DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(self, capture$0);
  return self;
}

- (void)evaluate {
  IoReactivexPluginsRxJavaPlugins_setIoSchedulerHandlerWithIoReactivexFunctionsFunction_(JreLoadStatic(DINTRxTrampolineSchedulerRule_1_$Lambda$1, instance));
  IoReactivexPluginsRxJavaPlugins_setComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(JreLoadStatic(DINTRxTrampolineSchedulerRule_1_$Lambda$2, instance));
  IoReactivexPluginsRxJavaPlugins_setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(JreLoadStatic(DINTRxTrampolineSchedulerRule_1_$Lambda$3, instance));
  IoReactivexAndroidPluginsRxAndroidPlugins_setInitMainThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(JreLoadStatic(DINTRxTrampolineSchedulerRule_1_$Lambda$4, instance));
  @try {
    [((OrgJunitRunnersModelStatement *) nil_chk(val$base_)) evaluate];
  }
  @finally {
    IoReactivexPluginsRxJavaPlugins_reset();
    IoReactivexAndroidPluginsRxAndroidPlugins_reset();
  }
}

- (void)dealloc {
  RELEASE_(val$base_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersModelStatement:);
  methods[1].selector = @selector(evaluate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$base_", "LOrgJunitRunnersModelStatement;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "LDINTRxTrampolineSchedulerRule;", "applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:" };
  static const J2ObjcClassInfo _DINTRxTrampolineSchedulerRule_1 = { "", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_DINTRxTrampolineSchedulerRule_1;
}

@end

void DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(DINTRxTrampolineSchedulerRule_1 *self, OrgJunitRunnersModelStatement *capture$0) {
  JreStrongAssign(&self->val$base_, capture$0);
  OrgJunitRunnersModelStatement_init(self);
}

DINTRxTrampolineSchedulerRule_1 *new_DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(OrgJunitRunnersModelStatement *capture$0) {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule_1, initWithOrgJunitRunnersModelStatement_, capture$0)
}

DINTRxTrampolineSchedulerRule_1 *create_DINTRxTrampolineSchedulerRule_1_initWithOrgJunitRunnersModelStatement_(OrgJunitRunnersModelStatement *capture$0) {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule_1, initWithOrgJunitRunnersModelStatement_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(DINTRxTrampolineSchedulerRule_1_$Lambda$1)

@implementation DINTRxTrampolineSchedulerRule_1_$Lambda$1

- (id)applyWithId:(IoReactivexScheduler *)scheduler {
  return IoReactivexSchedulersSchedulers_trampoline();
}

+ (void)initialize {
  if (self == [DINTRxTrampolineSchedulerRule_1_$Lambda$1 class]) {
    JreStrongAssignAndConsume(&DINTRxTrampolineSchedulerRule_1_$Lambda$1_instance, new_DINTRxTrampolineSchedulerRule_1_$Lambda$1_init());
    J2OBJC_SET_INITIALIZED(DINTRxTrampolineSchedulerRule_1_$Lambda$1)
  }
}

@end

void DINTRxTrampolineSchedulerRule_1_$Lambda$1_init(DINTRxTrampolineSchedulerRule_1_$Lambda$1 *self) {
  NSObject_init(self);
}

DINTRxTrampolineSchedulerRule_1_$Lambda$1 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$1, init)
}

DINTRxTrampolineSchedulerRule_1_$Lambda$1 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(DINTRxTrampolineSchedulerRule_1_$Lambda$2)

@implementation DINTRxTrampolineSchedulerRule_1_$Lambda$2

- (id)applyWithId:(IoReactivexScheduler *)scheduler {
  return IoReactivexSchedulersSchedulers_trampoline();
}

+ (void)initialize {
  if (self == [DINTRxTrampolineSchedulerRule_1_$Lambda$2 class]) {
    JreStrongAssignAndConsume(&DINTRxTrampolineSchedulerRule_1_$Lambda$2_instance, new_DINTRxTrampolineSchedulerRule_1_$Lambda$2_init());
    J2OBJC_SET_INITIALIZED(DINTRxTrampolineSchedulerRule_1_$Lambda$2)
  }
}

@end

void DINTRxTrampolineSchedulerRule_1_$Lambda$2_init(DINTRxTrampolineSchedulerRule_1_$Lambda$2 *self) {
  NSObject_init(self);
}

DINTRxTrampolineSchedulerRule_1_$Lambda$2 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$2, init)
}

DINTRxTrampolineSchedulerRule_1_$Lambda$2 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(DINTRxTrampolineSchedulerRule_1_$Lambda$3)

@implementation DINTRxTrampolineSchedulerRule_1_$Lambda$3

- (id)applyWithId:(IoReactivexScheduler *)scheduler {
  return IoReactivexSchedulersSchedulers_trampoline();
}

+ (void)initialize {
  if (self == [DINTRxTrampolineSchedulerRule_1_$Lambda$3 class]) {
    JreStrongAssignAndConsume(&DINTRxTrampolineSchedulerRule_1_$Lambda$3_instance, new_DINTRxTrampolineSchedulerRule_1_$Lambda$3_init());
    J2OBJC_SET_INITIALIZED(DINTRxTrampolineSchedulerRule_1_$Lambda$3)
  }
}

@end

void DINTRxTrampolineSchedulerRule_1_$Lambda$3_init(DINTRxTrampolineSchedulerRule_1_$Lambda$3 *self) {
  NSObject_init(self);
}

DINTRxTrampolineSchedulerRule_1_$Lambda$3 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$3, init)
}

DINTRxTrampolineSchedulerRule_1_$Lambda$3 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(DINTRxTrampolineSchedulerRule_1_$Lambda$4)

@implementation DINTRxTrampolineSchedulerRule_1_$Lambda$4

- (id)applyWithId:(id<JavaUtilConcurrentCallable>)scheduler {
  return IoReactivexSchedulersSchedulers_trampoline();
}

+ (void)initialize {
  if (self == [DINTRxTrampolineSchedulerRule_1_$Lambda$4 class]) {
    JreStrongAssignAndConsume(&DINTRxTrampolineSchedulerRule_1_$Lambda$4_instance, new_DINTRxTrampolineSchedulerRule_1_$Lambda$4_init());
    J2OBJC_SET_INITIALIZED(DINTRxTrampolineSchedulerRule_1_$Lambda$4)
  }
}

@end

void DINTRxTrampolineSchedulerRule_1_$Lambda$4_init(DINTRxTrampolineSchedulerRule_1_$Lambda$4 *self) {
  NSObject_init(self);
}

DINTRxTrampolineSchedulerRule_1_$Lambda$4 *new_DINTRxTrampolineSchedulerRule_1_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$4, init)
}

DINTRxTrampolineSchedulerRule_1_$Lambda$4 *create_DINTRxTrampolineSchedulerRule_1_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(DINTRxTrampolineSchedulerRule_1_$Lambda$4, init)
}
