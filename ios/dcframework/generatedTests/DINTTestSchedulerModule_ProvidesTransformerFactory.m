//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DINTTestSchedulerModule.h"
#include "DINTTestSchedulerModule_ProvidesTransformerFactory.h"
#include "DaggerInternalFactory.h"
#include "DaggerInternalPreconditions.h"
#include "IoReactivexObservableTransformer.h"
#include "J2ObjC_source.h"

@interface DINTTestSchedulerModule_ProvidesTransformerFactory () {
 @public
  DINTTestSchedulerModule *module_;
}

@end

J2OBJC_FIELD_SETTER(DINTTestSchedulerModule_ProvidesTransformerFactory, module_, DINTTestSchedulerModule *)

@implementation DINTTestSchedulerModule_ProvidesTransformerFactory

- (instancetype)initWithDINTTestSchedulerModule:(DINTTestSchedulerModule *)module {
  DINTTestSchedulerModule_ProvidesTransformerFactory_initWithDINTTestSchedulerModule_(self, module);
  return self;
}

- (id<IoReactivexObservableTransformer>)get {
  return DaggerInternalPreconditions_checkNotNullWithId_withNSString_([((DINTTestSchedulerModule *) nil_chk(module_)) providesTransformer], @"Cannot return null from a non-@Nullable @Provides method");
}

+ (id<DaggerInternalFactory>)createWithDINTTestSchedulerModule:(DINTTestSchedulerModule *)module {
  return DINTTestSchedulerModule_ProvidesTransformerFactory_createWithDINTTestSchedulerModule_(module);
}

- (void)dealloc {
  RELEASE_(module_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObservableTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDaggerInternalFactory;", 0x9, 1, 0, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDINTTestSchedulerModule:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(createWithDINTTestSchedulerModule:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "module_", "LDINTTestSchedulerModule;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDINTTestSchedulerModule;", "create", "(Lco/touchlab/droidconandroid/shared/interactors/TestSchedulerModule;)Ldagger/internal/Factory<Lio/reactivex/ObservableTransformer;>;", "Ljava/lang/Object;Ldagger/internal/Factory<Lio/reactivex/ObservableTransformer;>;" };
  static const J2ObjcClassInfo _DINTTestSchedulerModule_ProvidesTransformerFactory = { "TestSchedulerModule_ProvidesTransformerFactory", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 3, -1 };
  return &_DINTTestSchedulerModule_ProvidesTransformerFactory;
}

@end

void DINTTestSchedulerModule_ProvidesTransformerFactory_initWithDINTTestSchedulerModule_(DINTTestSchedulerModule_ProvidesTransformerFactory *self, DINTTestSchedulerModule *module) {
  NSObject_init(self);
  JreAssert((module != nil), (@"co/touchlab/droidconandroid/shared/interactors/TestSchedulerModule_ProvidesTransformerFactory.java:17 condition failed: assert module != null;"));
  JreStrongAssign(&self->module_, module);
}

DINTTestSchedulerModule_ProvidesTransformerFactory *new_DINTTestSchedulerModule_ProvidesTransformerFactory_initWithDINTTestSchedulerModule_(DINTTestSchedulerModule *module) {
  J2OBJC_NEW_IMPL(DINTTestSchedulerModule_ProvidesTransformerFactory, initWithDINTTestSchedulerModule_, module)
}

DINTTestSchedulerModule_ProvidesTransformerFactory *create_DINTTestSchedulerModule_ProvidesTransformerFactory_initWithDINTTestSchedulerModule_(DINTTestSchedulerModule *module) {
  J2OBJC_CREATE_IMPL(DINTTestSchedulerModule_ProvidesTransformerFactory, initWithDINTTestSchedulerModule_, module)
}

id<DaggerInternalFactory> DINTTestSchedulerModule_ProvidesTransformerFactory_createWithDINTTestSchedulerModule_(DINTTestSchedulerModule *module) {
  DINTTestSchedulerModule_ProvidesTransformerFactory_initialize();
  return create_DINTTestSchedulerModule_ProvidesTransformerFactory_initWithDINTTestSchedulerModule_(module);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DINTTestSchedulerModule_ProvidesTransformerFactory)
