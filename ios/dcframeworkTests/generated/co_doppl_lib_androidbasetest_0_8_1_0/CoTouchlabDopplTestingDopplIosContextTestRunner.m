//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidAppApplication.h"
#include "CoTouchlabDopplTestingDopplIosContextTestRunner.h"
#include "CoTouchlabDopplTestingDopplRuntimeEnvironment.h"
#include "CoTouchlabDopplTestingTestingContext.h"
#include "CoTouchlabDopplUtilsPlatformUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/BlockJUnit4ClassRunner.h"
#include "org/junit/runners/model/FrameworkMethod.h"

@interface CoTouchlabDopplTestingDopplIosContextTestRunner ()

- (JavaIoFile *)initContext OBJC_METHOD_FAMILY_NONE;

- (void)deleteRecursiveWithJavaIoFile:(JavaIoFile *)contextDataDir;

@end

__attribute__((unused)) static JavaIoFile *CoTouchlabDopplTestingDopplIosContextTestRunner_initContext(CoTouchlabDopplTestingDopplIosContextTestRunner *self);

__attribute__((unused)) static void CoTouchlabDopplTestingDopplIosContextTestRunner_deleteRecursiveWithJavaIoFile_(CoTouchlabDopplTestingDopplIosContextTestRunner *self, JavaIoFile *contextDataDir);

@implementation CoTouchlabDopplTestingDopplIosContextTestRunner

- (instancetype)initWithIOSClass:(IOSClass *)klass {
  CoTouchlabDopplTestingDopplIosContextTestRunner_initWithIOSClass_(self, klass);
  return self;
}

- (void)runChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  JavaIoFile *contextDataDir = CoTouchlabDopplTestingDopplIosContextTestRunner_initContext(self);
  @try {
    [super runChildWithId:method withOrgJunitRunnerNotificationRunNotifier:notifier];
  }
  @finally {
    CoTouchlabDopplTestingDopplIosContextTestRunner_deleteRecursiveWithJavaIoFile_(self, contextDataDir);
    [((JavaIoFile *) nil_chk(contextDataDir)) delete__];
  }
}

- (JavaIoFile *)initContext {
  return CoTouchlabDopplTestingDopplIosContextTestRunner_initContext(self);
}

- (void)deleteRecursiveWithJavaIoFile:(JavaIoFile *)contextDataDir {
  CoTouchlabDopplTestingDopplIosContextTestRunner_deleteRecursiveWithJavaIoFile_(self, contextDataDir);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(runChildWithId:withOrgJunitRunnerNotificationRunNotifier:);
  methods[2].selector = @selector(initContext);
  methods[3].selector = @selector(deleteRecursiveWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;", "LOrgJunitRunnersModelInitializationError;", "(Ljava/lang/Class<*>;)V", "runChild", "LOrgJunitRunnersModelFrameworkMethod;LOrgJunitRunnerNotificationRunNotifier;", "deleteRecursive", "LJavaIoFile;" };
  static const J2ObjcClassInfo _CoTouchlabDopplTestingDopplIosContextTestRunner = { "DopplIosContextTestRunner", "co.touchlab.doppl.testing", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDopplTestingDopplIosContextTestRunner;
}

@end

void CoTouchlabDopplTestingDopplIosContextTestRunner_initWithIOSClass_(CoTouchlabDopplTestingDopplIosContextTestRunner *self, IOSClass *klass) {
  OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(self, klass);
  if (!CoTouchlabDopplUtilsPlatformUtils_isJ2objc()) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"DopplContextTestRunner can only be run in iOS");
  }
}

CoTouchlabDopplTestingDopplIosContextTestRunner *new_CoTouchlabDopplTestingDopplIosContextTestRunner_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_NEW_IMPL(CoTouchlabDopplTestingDopplIosContextTestRunner, initWithIOSClass_, klass)
}

CoTouchlabDopplTestingDopplIosContextTestRunner *create_CoTouchlabDopplTestingDopplIosContextTestRunner_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_CREATE_IMPL(CoTouchlabDopplTestingDopplIosContextTestRunner, initWithIOSClass_, klass)
}

JavaIoFile *CoTouchlabDopplTestingDopplIosContextTestRunner_initContext(CoTouchlabDopplTestingDopplIosContextTestRunner *self) {
  @try {
    JavaIoFile *context = JavaIoFile_createTempFileWithNSString_withNSString_(@"context", nil);
    NSString *filename = [((JavaIoFile *) nil_chk(context)) getName];
    if (![context isDirectory] && [((NSString *) nil_chk(filename)) java_hasSuffix:@".tmp"]) {
      context = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getParentFile], [((NSString *) nil_chk(filename)) java_substring:0 endIndex:[filename java_lastIndexOfString:@".tmp"]]);
      if ([context exists]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Can't create a new temp file for testing context");
    }
    [context mkdirs];
    JreStrongAssignAndConsume(JreLoadStaticRef(CoTouchlabDopplTestingDopplRuntimeEnvironment, application), new_CoTouchlabDopplTestingTestingContext_initWithJavaIoFile_(context));
    return context;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void CoTouchlabDopplTestingDopplIosContextTestRunner_deleteRecursiveWithJavaIoFile_(CoTouchlabDopplTestingDopplIosContextTestRunner *self, JavaIoFile *contextDataDir) {
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(contextDataDir)) listFiles];
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) CoTouchlabDopplTestingDopplIosContextTestRunner_deleteRecursiveWithJavaIoFile_(self, file);
      [file delete__];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDopplTestingDopplIosContextTestRunner)
