//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DDATDatabaseHelper.h"
#include "DDATUserAccount.h"
#include "DINTFindUserInteractor.h"
#include "DINTFindUserInteractorTest.h"
#include "DINTRxTrampolineSchedulerRule.h"
#include "DNETDNetworkUserAccount.h"
#include "DNETDUserInfoResponse.h"
#include "DNETFindUserRequest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IoReactivexCompletable.h"
#include "IoReactivexObservable.h"
#include "IoReactivexObserversTestObserver.h"
#include "IoReactivexSingle.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Before.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/runners/MockitoJUnitRunner.h"
#include "org/mockito/stubbing/OngoingStubbing.h"

@interface DINTFindUserInteractorTest () {
 @public
  DINTFindUserInteractor *interactor_;
  DNETDUserInfoResponse *response_;
  DDATUserAccount *user_;
}

@end

J2OBJC_FIELD_SETTER(DINTFindUserInteractorTest, interactor_, DINTFindUserInteractor *)
J2OBJC_FIELD_SETTER(DINTFindUserInteractorTest, response_, DNETDUserInfoResponse *)
J2OBJC_FIELD_SETTER(DINTFindUserInteractorTest, user_, DDATUserAccount *)

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *DINTFindUserInteractorTest__Annotations$7();

@implementation DINTFindUserInteractorTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DINTFindUserInteractorTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  JreStrongAssignAndConsume(&interactor_, new_DINTFindUserInteractor_initWithDDATDatabaseHelper_withDNETFindUserRequest_(helper_, request_));
  JreStrongAssignAndConsume(&response_, new_DNETDUserInfoResponse_init());
  JreStrongAssignAndConsume(&response_->user_, new_DNETDNetworkUserAccount_init());
  JreStrongAssignAndConsume(&user_, new_DDATUserAccount_init());
}

- (void)whenNetworkReturns_ShouldNotGoToDatabase {
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<DNETFindUserRequest>) nil_chk(request_)) getUserInfoWithLong:OrgMockitoMatchers_anyInt()]))) thenReturnWithId:IoReactivexObservable_justWithId_(response_)];
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((DDATDatabaseHelper *) nil_chk(helper_)) saveUserAccountWithDDATUserAccount:OrgMockitoMatchers_anyObject()]))) thenReturnWithId:IoReactivexCompletable_complete()];
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((DDATDatabaseHelper *) nil_chk(helper_)) getUserAccountForIdWithLong:OrgMockitoMatchers_anyInt()]))) thenReturnWithId:IoReactivexSingle_errorWithNSException_(create_NSException_init())];
  [((IoReactivexObserversTestObserver *) nil_chk([((IoReactivexObservable *) nil_chk([((DINTFindUserInteractor *) nil_chk(interactor_)) loadUserAccountWithLong:100])) test])) assertNoErrors];
}

- (void)whenNetworkReturnsError_ShouldGetUserFromDatabase {
  NSException *error = create_NSException_initWithNSString_(@"Error");
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<DNETFindUserRequest>) nil_chk(request_)) getUserInfoWithLong:OrgMockitoMatchers_anyInt()]))) thenReturnWithId:IoReactivexObservable_errorWithNSException_(error)];
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((DDATDatabaseHelper *) nil_chk(helper_)) getUserAccountForIdWithLong:OrgMockitoMatchers_anyLong()]))) thenReturnWithId:IoReactivexSingle_justWithId_(user_)];
  [((IoReactivexObserversTestObserver *) nil_chk([((IoReactivexObservable *) nil_chk([((DINTFindUserInteractor *) nil_chk(interactor_)) loadUserAccountWithLong:100])) test])) assertValueWithId:user_];
}

- (void)whenNetworkAndDatabaseError_ShouldError {
  NSException *error = create_NSException_initWithNSString_(@"Error");
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<DNETFindUserRequest>) nil_chk(request_)) getUserInfoWithLong:OrgMockitoMatchers_anyInt()]))) thenReturnWithId:IoReactivexObservable_errorWithNSException_(error)];
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((DDATDatabaseHelper *) nil_chk(helper_)) getUserAccountForIdWithLong:OrgMockitoMatchers_anyLong()]))) thenReturnWithId:IoReactivexSingle_errorWithNSException_(error)];
  [((IoReactivexObserversTestObserver *) nil_chk([((IoReactivexObservable *) nil_chk([((DINTFindUserInteractor *) nil_chk(interactor_)) loadUserAccountWithLong:100])) test])) assertErrorWithNSException:error];
}

- (void)dealloc {
  RELEASE_(schedulerRule_);
  RELEASE_(helper_);
  RELEASE_(request_);
  RELEASE_(interactor_);
  RELEASE_(response_);
  RELEASE_(user_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(whenNetworkReturns_ShouldNotGoToDatabase);
  methods[3].selector = @selector(whenNetworkReturnsError_ShouldGetUserFromDatabase);
  methods[4].selector = @selector(whenNetworkAndDatabaseError_ShouldError);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "schedulerRule_", "LDINTRxTrampolineSchedulerRule;", .constantValue.asLong = 0, 0x11, -1, -1, -1, 5 },
    { "helper_", "LDDATDatabaseHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 6 },
    { "request_", "LDNETFindUserRequest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 7 },
    { "interactor_", "LDINTFindUserInteractor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "response_", "LDNETDUserInfoResponse;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "user_", "LDDATUserAccount;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&DINTFindUserInteractorTest__Annotations$0, (void *)&DINTFindUserInteractorTest__Annotations$1, (void *)&DINTFindUserInteractorTest__Annotations$2, (void *)&DINTFindUserInteractorTest__Annotations$3, (void *)&DINTFindUserInteractorTest__Annotations$4, (void *)&DINTFindUserInteractorTest__Annotations$5, (void *)&DINTFindUserInteractorTest__Annotations$6, (void *)&DINTFindUserInteractorTest__Annotations$7 };
  static const J2ObjcClassInfo _DINTFindUserInteractorTest = { "FindUserInteractorTest", "co.touchlab.droidconandroid.shared.interactors", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, -1, -1, -1, 8 };
  return &_DINTFindUserInteractorTest;
}

@end

void DINTFindUserInteractorTest_init(DINTFindUserInteractorTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->schedulerRule_, new_DINTRxTrampolineSchedulerRule_init());
}

DINTFindUserInteractorTest *new_DINTFindUserInteractorTest_init() {
  J2OBJC_NEW_IMPL(DINTFindUserInteractorTest, init)
}

DINTFindUserInteractorTest *create_DINTFindUserInteractorTest_init() {
  J2OBJC_CREATE_IMPL(DINTFindUserInteractorTest, init)
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRule() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DINTFindUserInteractorTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgMockitoRunnersMockitoJUnitRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DINTFindUserInteractorTest)
